
RobotF403.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000218f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f80  08021a98  08021a98  00031a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08022a18  08022a18  00032a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08022a20  08022a20  00032a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08022a24  08022a24  00032a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00001678  20000000  08022a28  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002458  20001678  080240a0  00041678  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20003ad0  080240a0  00043ad0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00041678  2**0
                  CONTENTS, READONLY
 10 .debug_info   0008f30b  00000000  00000000  000416a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000941c  00000000  00000000  000d09b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0002e80c  00000000  00000000  000d9dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00003c98  00000000  00000000  001085e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003a38  00000000  00000000  0010c278  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001bdac  00000000  00000000  0010fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0001877b  00000000  00000000  0012ba5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000fb  00000000  00000000  001441d7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000da38  00000000  00000000  001442d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20001678 	.word	0x20001678
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08021a7c 	.word	0x08021a7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000167c 	.word	0x2000167c
 80001dc:	08021a7c 	.word	0x08021a7c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b97a 	b.w	8000f9c <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f806 	bl	8000cc0 <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__udivmoddi4>:
 8000cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc4:	468c      	mov	ip, r1
 8000cc6:	460d      	mov	r5, r1
 8000cc8:	4604      	mov	r4, r0
 8000cca:	9e08      	ldr	r6, [sp, #32]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d151      	bne.n	8000d74 <__udivmoddi4+0xb4>
 8000cd0:	428a      	cmp	r2, r1
 8000cd2:	4617      	mov	r7, r2
 8000cd4:	d96d      	bls.n	8000db2 <__udivmoddi4+0xf2>
 8000cd6:	fab2 fe82 	clz	lr, r2
 8000cda:	f1be 0f00 	cmp.w	lr, #0
 8000cde:	d00b      	beq.n	8000cf8 <__udivmoddi4+0x38>
 8000ce0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ce4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000ce8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cec:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cf0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cf4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cf8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cfc:	0c25      	lsrs	r5, r4, #16
 8000cfe:	fbbc f8fa 	udiv	r8, ip, sl
 8000d02:	fa1f f987 	uxth.w	r9, r7
 8000d06:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d0a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d0e:	fb08 f309 	mul.w	r3, r8, r9
 8000d12:	42ab      	cmp	r3, r5
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x6c>
 8000d16:	19ed      	adds	r5, r5, r7
 8000d18:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d1c:	f080 8123 	bcs.w	8000f66 <__udivmoddi4+0x2a6>
 8000d20:	42ab      	cmp	r3, r5
 8000d22:	f240 8120 	bls.w	8000f66 <__udivmoddi4+0x2a6>
 8000d26:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2a:	443d      	add	r5, r7
 8000d2c:	1aed      	subs	r5, r5, r3
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d34:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d3c:	fb00 f909 	mul.w	r9, r0, r9
 8000d40:	45a1      	cmp	r9, r4
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x98>
 8000d44:	19e4      	adds	r4, r4, r7
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	f080 810a 	bcs.w	8000f62 <__udivmoddi4+0x2a2>
 8000d4e:	45a1      	cmp	r9, r4
 8000d50:	f240 8107 	bls.w	8000f62 <__udivmoddi4+0x2a2>
 8000d54:	3802      	subs	r0, #2
 8000d56:	443c      	add	r4, r7
 8000d58:	eba4 0409 	sub.w	r4, r4, r9
 8000d5c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d60:	2100      	movs	r1, #0
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d061      	beq.n	8000e2a <__udivmoddi4+0x16a>
 8000d66:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	6034      	str	r4, [r6, #0]
 8000d6e:	6073      	str	r3, [r6, #4]
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0xc8>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d054      	beq.n	8000e26 <__udivmoddi4+0x166>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d82:	4608      	mov	r0, r1
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	fab3 f183 	clz	r1, r3
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	f040 808e 	bne.w	8000eae <__udivmoddi4+0x1ee>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xdc>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80fa 	bhi.w	8000f90 <__udivmoddi4+0x2d0>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb65 0503 	sbc.w	r5, r5, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	46ac      	mov	ip, r5
 8000da6:	2e00      	cmp	r6, #0
 8000da8:	d03f      	beq.n	8000e2a <__udivmoddi4+0x16a>
 8000daa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	b912      	cbnz	r2, 8000dba <__udivmoddi4+0xfa>
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dba:	fab7 fe87 	clz	lr, r7
 8000dbe:	f1be 0f00 	cmp.w	lr, #0
 8000dc2:	d134      	bne.n	8000e2e <__udivmoddi4+0x16e>
 8000dc4:	1beb      	subs	r3, r5, r7
 8000dc6:	0c3a      	lsrs	r2, r7, #16
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dd2:	0c25      	lsrs	r5, r4, #16
 8000dd4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dd8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ddc:	fb0c f308 	mul.w	r3, ip, r8
 8000de0:	42ab      	cmp	r3, r5
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x134>
 8000de4:	19ed      	adds	r5, r5, r7
 8000de6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x132>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	f200 80d1 	bhi.w	8000f94 <__udivmoddi4+0x2d4>
 8000df2:	4680      	mov	r8, r0
 8000df4:	1aed      	subs	r5, r5, r3
 8000df6:	b2a3      	uxth	r3, r4
 8000df8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dfc:	fb02 5510 	mls	r5, r2, r0, r5
 8000e00:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e04:	fb0c fc00 	mul.w	ip, ip, r0
 8000e08:	45a4      	cmp	ip, r4
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x15c>
 8000e0c:	19e4      	adds	r4, r4, r7
 8000e0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x15a>
 8000e14:	45a4      	cmp	ip, r4
 8000e16:	f200 80b8 	bhi.w	8000f8a <__udivmoddi4+0x2ca>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	eba4 040c 	sub.w	r4, r4, ip
 8000e20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e24:	e79d      	b.n	8000d62 <__udivmoddi4+0xa2>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	f1ce 0420 	rsb	r4, lr, #32
 8000e32:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e36:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e3a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e3e:	0c3a      	lsrs	r2, r7, #16
 8000e40:	fa25 f404 	lsr.w	r4, r5, r4
 8000e44:	ea48 0803 	orr.w	r8, r8, r3
 8000e48:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e4c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e50:	fb02 4411 	mls	r4, r2, r1, r4
 8000e54:	fa1f fc87 	uxth.w	ip, r7
 8000e58:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e5c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e60:	42ab      	cmp	r3, r5
 8000e62:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e66:	d909      	bls.n	8000e7c <__udivmoddi4+0x1bc>
 8000e68:	19ed      	adds	r5, r5, r7
 8000e6a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e6e:	f080 808a 	bcs.w	8000f86 <__udivmoddi4+0x2c6>
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	f240 8087 	bls.w	8000f86 <__udivmoddi4+0x2c6>
 8000e78:	3902      	subs	r1, #2
 8000e7a:	443d      	add	r5, r7
 8000e7c:	1aeb      	subs	r3, r5, r3
 8000e7e:	fa1f f588 	uxth.w	r5, r8
 8000e82:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e86:	fb02 3310 	mls	r3, r2, r0, r3
 8000e8a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e8e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1e6>
 8000e96:	19ed      	adds	r5, r5, r7
 8000e98:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9c:	d26f      	bcs.n	8000f7e <__udivmoddi4+0x2be>
 8000e9e:	42ab      	cmp	r3, r5
 8000ea0:	d96d      	bls.n	8000f7e <__udivmoddi4+0x2be>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	443d      	add	r5, r7
 8000ea6:	1aeb      	subs	r3, r5, r3
 8000ea8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eac:	e78f      	b.n	8000dce <__udivmoddi4+0x10e>
 8000eae:	f1c1 0720 	rsb	r7, r1, #32
 8000eb2:	fa22 f807 	lsr.w	r8, r2, r7
 8000eb6:	408b      	lsls	r3, r1
 8000eb8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebc:	ea48 0303 	orr.w	r3, r8, r3
 8000ec0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ec4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ece:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ed2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ed6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eda:	fa1f f883 	uxth.w	r8, r3
 8000ede:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ee2:	fb09 f408 	mul.w	r4, r9, r8
 8000ee6:	42ac      	cmp	r4, r5
 8000ee8:	fa02 f201 	lsl.w	r2, r2, r1
 8000eec:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x244>
 8000ef2:	18ed      	adds	r5, r5, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ef8:	d243      	bcs.n	8000f82 <__udivmoddi4+0x2c2>
 8000efa:	42ac      	cmp	r4, r5
 8000efc:	d941      	bls.n	8000f82 <__udivmoddi4+0x2c2>
 8000efe:	f1a9 0902 	sub.w	r9, r9, #2
 8000f02:	441d      	add	r5, r3
 8000f04:	1b2d      	subs	r5, r5, r4
 8000f06:	fa1f fe8e 	uxth.w	lr, lr
 8000f0a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f0e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f12:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f16:	fb00 f808 	mul.w	r8, r0, r8
 8000f1a:	45a0      	cmp	r8, r4
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x26e>
 8000f1e:	18e4      	adds	r4, r4, r3
 8000f20:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f24:	d229      	bcs.n	8000f7a <__udivmoddi4+0x2ba>
 8000f26:	45a0      	cmp	r8, r4
 8000f28:	d927      	bls.n	8000f7a <__udivmoddi4+0x2ba>
 8000f2a:	3802      	subs	r0, #2
 8000f2c:	441c      	add	r4, r3
 8000f2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f32:	eba4 0408 	sub.w	r4, r4, r8
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	454c      	cmp	r4, r9
 8000f3c:	46c6      	mov	lr, r8
 8000f3e:	464d      	mov	r5, r9
 8000f40:	d315      	bcc.n	8000f6e <__udivmoddi4+0x2ae>
 8000f42:	d012      	beq.n	8000f6a <__udivmoddi4+0x2aa>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x29c>
 8000f46:	ebba 030e 	subs.w	r3, sl, lr
 8000f4a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40cb      	lsrs	r3, r1
 8000f54:	431f      	orrs	r7, r3
 8000f56:	40cc      	lsrs	r4, r1
 8000f58:	6037      	str	r7, [r6, #0]
 8000f5a:	6074      	str	r4, [r6, #4]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f62:	4618      	mov	r0, r3
 8000f64:	e6f8      	b.n	8000d58 <__udivmoddi4+0x98>
 8000f66:	4690      	mov	r8, r2
 8000f68:	e6e0      	b.n	8000d2c <__udivmoddi4+0x6c>
 8000f6a:	45c2      	cmp	sl, r8
 8000f6c:	d2ea      	bcs.n	8000f44 <__udivmoddi4+0x284>
 8000f6e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f72:	eb69 0503 	sbc.w	r5, r9, r3
 8000f76:	3801      	subs	r0, #1
 8000f78:	e7e4      	b.n	8000f44 <__udivmoddi4+0x284>
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	e7d7      	b.n	8000f2e <__udivmoddi4+0x26e>
 8000f7e:	4640      	mov	r0, r8
 8000f80:	e791      	b.n	8000ea6 <__udivmoddi4+0x1e6>
 8000f82:	4681      	mov	r9, r0
 8000f84:	e7be      	b.n	8000f04 <__udivmoddi4+0x244>
 8000f86:	4601      	mov	r1, r0
 8000f88:	e778      	b.n	8000e7c <__udivmoddi4+0x1bc>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	443c      	add	r4, r7
 8000f8e:	e745      	b.n	8000e1c <__udivmoddi4+0x15c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e708      	b.n	8000da6 <__udivmoddi4+0xe6>
 8000f94:	f1a8 0802 	sub.w	r8, r8, #2
 8000f98:	443d      	add	r5, r7
 8000f9a:	e72b      	b.n	8000df4 <__udivmoddi4+0x134>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <HTS221_GetCapabilities>:
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
	/* Prevent unused argument(s) compilation warning */
	(void)(pObj);

	Capabilities->Humidity = 1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	708b      	strb	r3, [r1, #2]
	Capabilities->Pressure = 0;
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	7048      	strb	r0, [r1, #1]
	Capabilities->Temperature = 1;
 8000fa8:	700b      	strb	r3, [r1, #0]
	Capabilities->LowPower = 0;
 8000faa:	70c8      	strb	r0, [r1, #3]
	Capabilities->HumMaxOdr = 12.5f;
 8000fac:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <HTS221_GetCapabilities+0x18>)
 8000fae:	604b      	str	r3, [r1, #4]
	Capabilities->TempMaxOdr = 12.5f;
 8000fb0:	608b      	str	r3, [r1, #8]
	Capabilities->PressMaxOdr = 0.0f;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60cb      	str	r3, [r1, #12]
	return HTS221_OK;
}
 8000fb6:	4770      	bx	lr
 8000fb8:	41480000 	.word	0x41480000

08000fbc <Linear_Interpolation>:
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
	return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8000fbc:	edd0 6a03 	vldr	s13, [r0, #12]
 8000fc0:	edd0 7a01 	vldr	s15, [r0, #4]
 8000fc4:	ee36 7ae7 	vsub.f32	s14, s13, s15
 8000fc8:	ee27 0a00 	vmul.f32	s0, s14, s0
 8000fcc:	ed90 7a02 	vldr	s14, [r0, #8]
 8000fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd4:	ed90 6a00 	vldr	s12, [r0]
 8000fd8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8000fdc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000fe0:	ee70 7a27 	vadd.f32	s15, s0, s15
 8000fe4:	ee37 0a46 	vsub.f32	s0, s14, s12
}
 8000fe8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8000fec:	4770      	bx	lr

08000fee <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000fee:	b510      	push	{r4, lr}
	HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

	if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) { /* I2C */
 8000ff0:	6884      	ldr	r4, [r0, #8]
 8000ff2:	b12c      	cbz	r4, 8001000 <ReadRegWrap+0x12>
		/* Enable Multi-byte read */
		return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
	}else  {/* SPI 3-Wires */
		/* Enable Multi-byte read */
		return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8000ff4:	6944      	ldr	r4, [r0, #20]
 8000ff6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000ffa:	7b00      	ldrb	r0, [r0, #12]
 8000ffc:	47a0      	blx	r4
	}
}
 8000ffe:	bd10      	pop	{r4, pc}
		return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001000:	6944      	ldr	r4, [r0, #20]
 8001002:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001006:	7b00      	ldrb	r0, [r0, #12]
 8001008:	47a0      	blx	r4
 800100a:	bd10      	pop	{r4, pc}

0800100c <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800100c:	b510      	push	{r4, lr}
	HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

	if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) { /* I2C */
 800100e:	6884      	ldr	r4, [r0, #8]
 8001010:	b12c      	cbz	r4, 800101e <WriteRegWrap+0x12>
		/* Enable Multi-byte write */
		return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
	}else  {/* SPI 3-Wires */
		/* Enable Multi-byte write */
		return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001012:	6904      	ldr	r4, [r0, #16]
 8001014:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001018:	7b00      	ldrb	r0, [r0, #12]
 800101a:	47a0      	blx	r4
	}
}
 800101c:	bd10      	pop	{r4, pc}
		return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800101e:	6904      	ldr	r4, [r0, #16]
 8001020:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001024:	7b00      	ldrb	r0, [r0, #12]
 8001026:	47a0      	blx	r4
 8001028:	bd10      	pop	{r4, pc}

0800102a <HTS221_HUM_Enable>:
	if (pObj->hum_is_enabled == 1U) {
 800102a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800102e:	2b01      	cmp	r3, #1
 8001030:	d012      	beq.n	8001058 <HTS221_HUM_Enable+0x2e>
{
 8001032:	b510      	push	{r4, lr}
 8001034:	4604      	mov	r4, r0
	if (pObj->temp_is_enabled == 0U) {
 8001036:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800103a:	b123      	cbz	r3, 8001046 <HTS221_HUM_Enable+0x1c>
	pObj->hum_is_enabled = 1;
 800103c:	2301      	movs	r3, #1
 800103e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	return HTS221_OK;
 8001042:	2000      	movs	r0, #0
 8001044:	bd10      	pop	{r4, pc}
		if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK) {
 8001046:	2101      	movs	r1, #1
 8001048:	301c      	adds	r0, #28
 800104a:	f000 fa74 	bl	8001536 <hts221_power_on_set>
 800104e:	2800      	cmp	r0, #0
 8001050:	d0f4      	beq.n	800103c <HTS221_HUM_Enable+0x12>
			return HTS221_ERROR;
 8001052:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001056:	bd10      	pop	{r4, pc}
		return HTS221_OK;
 8001058:	2000      	movs	r0, #0
 800105a:	4770      	bx	lr

0800105c <HTS221_HUM_Disable>:
	if (pObj->hum_is_enabled == 0U) {
 800105c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001060:	b18b      	cbz	r3, 8001086 <HTS221_HUM_Disable+0x2a>
{
 8001062:	b510      	push	{r4, lr}
 8001064:	4604      	mov	r4, r0
	if (pObj->temp_is_enabled == 0U) {
 8001066:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800106a:	b11b      	cbz	r3, 8001074 <HTS221_HUM_Disable+0x18>
	pObj->hum_is_enabled = 0;
 800106c:	2000      	movs	r0, #0
 800106e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	return HTS221_OK;
 8001072:	bd10      	pop	{r4, pc}
		if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK) {
 8001074:	2100      	movs	r1, #0
 8001076:	301c      	adds	r0, #28
 8001078:	f000 fa5d 	bl	8001536 <hts221_power_on_set>
 800107c:	2800      	cmp	r0, #0
 800107e:	d0f5      	beq.n	800106c <HTS221_HUM_Disable+0x10>
			return HTS221_ERROR;
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001084:	bd10      	pop	{r4, pc}
		return HTS221_OK;
 8001086:	2000      	movs	r0, #0
 8001088:	4770      	bx	lr

0800108a <HTS221_TEMP_Enable>:
	if (pObj->temp_is_enabled == 1U) {
 800108a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800108e:	2b01      	cmp	r3, #1
 8001090:	d012      	beq.n	80010b8 <HTS221_TEMP_Enable+0x2e>
{
 8001092:	b510      	push	{r4, lr}
 8001094:	4604      	mov	r4, r0
	if (pObj->hum_is_enabled == 0U) {
 8001096:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800109a:	b123      	cbz	r3, 80010a6 <HTS221_TEMP_Enable+0x1c>
	pObj->temp_is_enabled = 1;
 800109c:	2301      	movs	r3, #1
 800109e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	return HTS221_OK;
 80010a2:	2000      	movs	r0, #0
 80010a4:	bd10      	pop	{r4, pc}
		if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK) {
 80010a6:	2101      	movs	r1, #1
 80010a8:	301c      	adds	r0, #28
 80010aa:	f000 fa44 	bl	8001536 <hts221_power_on_set>
 80010ae:	2800      	cmp	r0, #0
 80010b0:	d0f4      	beq.n	800109c <HTS221_TEMP_Enable+0x12>
			return HTS221_ERROR;
 80010b2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80010b6:	bd10      	pop	{r4, pc}
		return HTS221_OK;
 80010b8:	2000      	movs	r0, #0
 80010ba:	4770      	bx	lr

080010bc <HTS221_TEMP_Disable>:
	if (pObj->temp_is_enabled == 0U) {
 80010bc:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80010c0:	b18b      	cbz	r3, 80010e6 <HTS221_TEMP_Disable+0x2a>
{
 80010c2:	b510      	push	{r4, lr}
 80010c4:	4604      	mov	r4, r0
	if (pObj->hum_is_enabled == 0U) {
 80010c6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80010ca:	b11b      	cbz	r3, 80010d4 <HTS221_TEMP_Disable+0x18>
	pObj->temp_is_enabled = 0;
 80010cc:	2000      	movs	r0, #0
 80010ce:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
	return HTS221_OK;
 80010d2:	bd10      	pop	{r4, pc}
		if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK) {
 80010d4:	2100      	movs	r1, #0
 80010d6:	301c      	adds	r0, #28
 80010d8:	f000 fa2d 	bl	8001536 <hts221_power_on_set>
 80010dc:	2800      	cmp	r0, #0
 80010de:	d0f5      	beq.n	80010cc <HTS221_TEMP_Disable+0x10>
			return HTS221_ERROR;
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80010e4:	bd10      	pop	{r4, pc}
		return HTS221_OK;
 80010e6:	2000      	movs	r0, #0
 80010e8:	4770      	bx	lr

080010ea <HTS221_DeInit>:
{
 80010ea:	b510      	push	{r4, lr}
 80010ec:	4604      	mov	r4, r0
	if (pObj->is_initialized == 1U) {
 80010ee:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d003      	beq.n	80010fe <HTS221_DeInit+0x14>
	pObj->is_initialized = 0;
 80010f6:	2000      	movs	r0, #0
 80010f8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	return HTS221_OK;
 80010fc:	bd10      	pop	{r4, pc}
		if (HTS221_HUM_Disable(pObj) != HTS221_OK) {
 80010fe:	f7ff ffad 	bl	800105c <HTS221_HUM_Disable>
 8001102:	b938      	cbnz	r0, 8001114 <HTS221_DeInit+0x2a>
		if (HTS221_TEMP_Disable(pObj) != HTS221_OK) {
 8001104:	4620      	mov	r0, r4
 8001106:	f7ff ffd9 	bl	80010bc <HTS221_TEMP_Disable>
 800110a:	2800      	cmp	r0, #0
 800110c:	d0f3      	beq.n	80010f6 <HTS221_DeInit+0xc>
			return HTS221_ERROR;
 800110e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001112:	bd10      	pop	{r4, pc}
			return HTS221_ERROR;
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	bd10      	pop	{r4, pc}

0800111a <HTS221_SetOutputDataRate>:
{
 800111a:	b508      	push	{r3, lr}
		  : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800111c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001120:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	d90e      	bls.n	8001148 <HTS221_SetOutputDataRate+0x2e>
 800112a:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 800112e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	d809      	bhi.n	800114c <HTS221_SetOutputDataRate+0x32>
 8001138:	2102      	movs	r1, #2
	if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK) {
 800113a:	301c      	adds	r0, #28
 800113c:	f000 f98c 	bl	8001458 <hts221_data_rate_set>
 8001140:	4603      	mov	r3, r0
 8001142:	b928      	cbnz	r0, 8001150 <HTS221_SetOutputDataRate+0x36>
}
 8001144:	4618      	mov	r0, r3
 8001146:	bd08      	pop	{r3, pc}
		  : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001148:	2101      	movs	r1, #1
 800114a:	e7f6      	b.n	800113a <HTS221_SetOutputDataRate+0x20>
 800114c:	2103      	movs	r1, #3
 800114e:	e7f4      	b.n	800113a <HTS221_SetOutputDataRate+0x20>
		return HTS221_ERROR;
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	e7f6      	b.n	8001144 <HTS221_SetOutputDataRate+0x2a>

08001156 <HTS221_Initialize>:
{
 8001156:	b538      	push	{r3, r4, r5, lr}
 8001158:	4605      	mov	r5, r0
	if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK) {
 800115a:	f100 041c 	add.w	r4, r0, #28
 800115e:	2100      	movs	r1, #0
 8001160:	4620      	mov	r0, r4
 8001162:	f000 f9e8 	bl	8001536 <hts221_power_on_set>
 8001166:	b980      	cbnz	r0, 800118a <HTS221_Initialize+0x34>
	if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK) {
 8001168:	2101      	movs	r1, #1
 800116a:	4620      	mov	r0, r4
 800116c:	f000 f9b2 	bl	80014d4 <hts221_block_data_update_set>
 8001170:	b970      	cbnz	r0, 8001190 <HTS221_Initialize+0x3a>
	if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK) {
 8001172:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001176:	4628      	mov	r0, r5
 8001178:	f7ff ffcf 	bl	800111a <HTS221_SetOutputDataRate>
 800117c:	4603      	mov	r3, r0
 800117e:	b908      	cbnz	r0, 8001184 <HTS221_Initialize+0x2e>
}
 8001180:	4618      	mov	r0, r3
 8001182:	bd38      	pop	{r3, r4, r5, pc}
		return HTS221_ERROR;
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	e7fa      	b.n	8001180 <HTS221_Initialize+0x2a>
		return HTS221_ERROR;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e7f7      	b.n	8001180 <HTS221_Initialize+0x2a>
		return HTS221_ERROR;
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	e7f4      	b.n	8001180 <HTS221_Initialize+0x2a>

08001196 <HTS221_Init>:
{
 8001196:	b510      	push	{r4, lr}
 8001198:	4604      	mov	r4, r0
	if (pObj->is_initialized == 0U) {
 800119a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800119e:	b123      	cbz	r3, 80011aa <HTS221_Init+0x14>
	pObj->is_initialized = 1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	return HTS221_OK;
 80011a6:	2000      	movs	r0, #0
 80011a8:	bd10      	pop	{r4, pc}
		if (HTS221_Initialize(pObj) != HTS221_OK) {
 80011aa:	f7ff ffd4 	bl	8001156 <HTS221_Initialize>
 80011ae:	2800      	cmp	r0, #0
 80011b0:	d0f6      	beq.n	80011a0 <HTS221_Init+0xa>
			return HTS221_ERROR;
 80011b2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80011b6:	bd10      	pop	{r4, pc}

080011b8 <HTS221_HUM_SetOutputDataRate>:
{
 80011b8:	b508      	push	{r3, lr}
	return HTS221_SetOutputDataRate(pObj, Odr);
 80011ba:	f7ff ffae 	bl	800111a <HTS221_SetOutputDataRate>
}
 80011be:	bd08      	pop	{r3, pc}

080011c0 <HTS221_TEMP_SetOutputDataRate>:
{
 80011c0:	b508      	push	{r3, lr}
	return HTS221_SetOutputDataRate(pObj, Odr);
 80011c2:	f7ff ffaa 	bl	800111a <HTS221_SetOutputDataRate>
}
 80011c6:	bd08      	pop	{r3, pc}

080011c8 <HTS221_ReadID>:
{
 80011c8:	b508      	push	{r3, lr}
	if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK) {
 80011ca:	301c      	adds	r0, #28
 80011cc:	f000 f9ac 	bl	8001528 <hts221_device_id_get>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b908      	cbnz	r0, 80011d8 <HTS221_ReadID+0x10>
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	bd08      	pop	{r3, pc}
		return HTS221_ERROR;
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	e7fa      	b.n	80011d4 <HTS221_ReadID+0xc>
	...

080011e0 <HTS221_GetOutputDataRate>:
{
 80011e0:	b510      	push	{r4, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	460c      	mov	r4, r1
	if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK) {
 80011e6:	f10d 0107 	add.w	r1, sp, #7
 80011ea:	301c      	adds	r0, #28
 80011ec:	f000 f950 	bl	8001490 <hts221_data_rate_get>
 80011f0:	b9b8      	cbnz	r0, 8001222 <HTS221_GetOutputDataRate+0x42>
 80011f2:	4602      	mov	r2, r0
	switch (odr_low_level) {
 80011f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d815      	bhi.n	8001228 <HTS221_GetOutputDataRate+0x48>
 80011fc:	e8df f003 	tbb	[pc, r3]
 8001200:	0e0b0702 	.word	0x0e0b0702
		*Odr = 0.0f;
 8001204:	2300      	movs	r3, #0
 8001206:	6023      	str	r3, [r4, #0]
}
 8001208:	4610      	mov	r0, r2
 800120a:	b002      	add	sp, #8
 800120c:	bd10      	pop	{r4, pc}
		*Odr = 1.0f;
 800120e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001212:	6023      	str	r3, [r4, #0]
		break;
 8001214:	e7f8      	b.n	8001208 <HTS221_GetOutputDataRate+0x28>
		*Odr = 7.0f;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HTS221_GetOutputDataRate+0x50>)
 8001218:	6023      	str	r3, [r4, #0]
		break;
 800121a:	e7f5      	b.n	8001208 <HTS221_GetOutputDataRate+0x28>
		*Odr = 12.5f;
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HTS221_GetOutputDataRate+0x54>)
 800121e:	6023      	str	r3, [r4, #0]
		break;
 8001220:	e7f2      	b.n	8001208 <HTS221_GetOutputDataRate+0x28>
		return HTS221_ERROR;
 8001222:	f04f 32ff 	mov.w	r2, #4294967295
 8001226:	e7ef      	b.n	8001208 <HTS221_GetOutputDataRate+0x28>
		ret = HTS221_ERROR;
 8001228:	f04f 32ff 	mov.w	r2, #4294967295
 800122c:	e7ec      	b.n	8001208 <HTS221_GetOutputDataRate+0x28>
 800122e:	bf00      	nop
 8001230:	40e00000 	.word	0x40e00000
 8001234:	41480000 	.word	0x41480000

08001238 <HTS221_HUM_GetOutputDataRate>:
{
 8001238:	b508      	push	{r3, lr}
	return HTS221_GetOutputDataRate(pObj, Odr);
 800123a:	f7ff ffd1 	bl	80011e0 <HTS221_GetOutputDataRate>
}
 800123e:	bd08      	pop	{r3, pc}

08001240 <HTS221_TEMP_GetOutputDataRate>:
{
 8001240:	b508      	push	{r3, lr}
	return HTS221_GetOutputDataRate(pObj, Odr);
 8001242:	f7ff ffcd 	bl	80011e0 <HTS221_GetOutputDataRate>
}
 8001246:	bd08      	pop	{r3, pc}

08001248 <HTS221_HUM_GetHumidity>:
{
 8001248:	b530      	push	{r4, r5, lr}
 800124a:	b087      	sub	sp, #28
 800124c:	460d      	mov	r5, r1
	if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK) {
 800124e:	f100 041c 	add.w	r4, r0, #28
 8001252:	a904      	add	r1, sp, #16
 8001254:	4620      	mov	r0, r4
 8001256:	f000 f9ea 	bl	800162e <hts221_hum_adc_point_0_get>
 800125a:	2800      	cmp	r0, #0
 800125c:	d15a      	bne.n	8001314 <HTS221_HUM_GetHumidity+0xcc>
	lin_hum.x0 = (float)coeff.i16bit;
 800125e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126a:	edcd 7a00 	vstr	s15, [sp]
	if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK) {
 800126e:	a904      	add	r1, sp, #16
 8001270:	4620      	mov	r0, r4
 8001272:	f000 f97c 	bl	800156e <hts221_hum_rh_point_0_get>
 8001276:	2800      	cmp	r0, #0
 8001278:	d14f      	bne.n	800131a <HTS221_HUM_GetHumidity+0xd2>
	lin_hum.y0 = (float)coeff.u8bit[0];
 800127a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001286:	edcd 7a01 	vstr	s15, [sp, #4]
	if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK) {
 800128a:	a904      	add	r1, sp, #16
 800128c:	4620      	mov	r0, r4
 800128e:	f000 f9d5 	bl	800163c <hts221_hum_adc_point_1_get>
 8001292:	2800      	cmp	r0, #0
 8001294:	d144      	bne.n	8001320 <HTS221_HUM_GetHumidity+0xd8>
	lin_hum.x1 = (float)coeff.i16bit;
 8001296:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a2:	edcd 7a02 	vstr	s15, [sp, #8]
	if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK) {
 80012a6:	a904      	add	r1, sp, #16
 80012a8:	4620      	mov	r0, r4
 80012aa:	f000 f96b 	bl	8001584 <hts221_hum_rh_point_1_get>
 80012ae:	bbd0      	cbnz	r0, 8001326 <HTS221_HUM_GetHumidity+0xde>
	lin_hum.y1 = (float)coeff.u8bit[0];
 80012b0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012bc:	edcd 7a03 	vstr	s15, [sp, #12]
	(void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK) {
 80012c6:	a905      	add	r1, sp, #20
 80012c8:	4620      	mov	r0, r4
 80012ca:	f000 f91f 	bl	800150c <hts221_humidity_raw_get>
 80012ce:	4604      	mov	r4, r0
 80012d0:	bb60      	cbnz	r0, 800132c <HTS221_HUM_GetHumidity+0xe4>
	*Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80012d2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80012d6:	ee00 3a10 	vmov	s0, r3
 80012da:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80012de:	4668      	mov	r0, sp
 80012e0:	f7ff fe6c 	bl	8000fbc <Linear_Interpolation>
 80012e4:	ed85 0a00 	vstr	s0, [r5]
	if (*Value < 0.0f) {
 80012e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	d40d      	bmi.n	800130e <HTS221_HUM_GetHumidity+0xc6>
	if (*Value > 100.0f) {
 80012f2:	ed95 7a00 	vldr	s14, [r5]
 80012f6:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001334 <HTS221_HUM_GetHumidity+0xec>
 80012fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd01      	ble.n	8001308 <HTS221_HUM_GetHumidity+0xc0>
		*Value = 100.0f;
 8001304:	edc5 7a00 	vstr	s15, [r5]
}
 8001308:	4620      	mov	r0, r4
 800130a:	b007      	add	sp, #28
 800130c:	bd30      	pop	{r4, r5, pc}
		*Value = 0.0f;
 800130e:	2300      	movs	r3, #0
 8001310:	602b      	str	r3, [r5, #0]
 8001312:	e7ee      	b.n	80012f2 <HTS221_HUM_GetHumidity+0xaa>
		return HTS221_ERROR;
 8001314:	f04f 34ff 	mov.w	r4, #4294967295
 8001318:	e7f6      	b.n	8001308 <HTS221_HUM_GetHumidity+0xc0>
		return HTS221_ERROR;
 800131a:	f04f 34ff 	mov.w	r4, #4294967295
 800131e:	e7f3      	b.n	8001308 <HTS221_HUM_GetHumidity+0xc0>
		return HTS221_ERROR;
 8001320:	f04f 34ff 	mov.w	r4, #4294967295
 8001324:	e7f0      	b.n	8001308 <HTS221_HUM_GetHumidity+0xc0>
		return HTS221_ERROR;
 8001326:	f04f 34ff 	mov.w	r4, #4294967295
 800132a:	e7ed      	b.n	8001308 <HTS221_HUM_GetHumidity+0xc0>
		return HTS221_ERROR;
 800132c:	f04f 34ff 	mov.w	r4, #4294967295
 8001330:	e7ea      	b.n	8001308 <HTS221_HUM_GetHumidity+0xc0>
 8001332:	bf00      	nop
 8001334:	42c80000 	.word	0x42c80000

08001338 <HTS221_TEMP_GetTemperature>:
{
 8001338:	b530      	push	{r4, r5, lr}
 800133a:	b087      	sub	sp, #28
 800133c:	460d      	mov	r5, r1
	if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK) {
 800133e:	f100 041c 	add.w	r4, r0, #28
 8001342:	a904      	add	r1, sp, #16
 8001344:	4620      	mov	r0, r4
 8001346:	f000 f980 	bl	800164a <hts221_temp_adc_point_0_get>
 800134a:	2800      	cmp	r0, #0
 800134c:	d146      	bne.n	80013dc <HTS221_TEMP_GetTemperature+0xa4>
	lin_temp.x0 = (float)coeff.i16bit;
 800134e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135a:	edcd 7a00 	vstr	s15, [sp]
	if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK) {
 800135e:	a904      	add	r1, sp, #16
 8001360:	4620      	mov	r0, r4
 8001362:	f000 f91a 	bl	800159a <hts221_temp_deg_point_0_get>
 8001366:	2800      	cmp	r0, #0
 8001368:	d13b      	bne.n	80013e2 <HTS221_TEMP_GetTemperature+0xaa>
	lin_temp.y0 = (float)coeff.u8bit[0];
 800136a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001376:	edcd 7a01 	vstr	s15, [sp, #4]
	if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK) {
 800137a:	a904      	add	r1, sp, #16
 800137c:	4620      	mov	r0, r4
 800137e:	f000 f96b 	bl	8001658 <hts221_temp_adc_point_1_get>
 8001382:	bb88      	cbnz	r0, 80013e8 <HTS221_TEMP_GetTemperature+0xb0>
	lin_temp.x1 = (float)coeff.i16bit;
 8001384:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001390:	edcd 7a02 	vstr	s15, [sp, #8]
	if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK) {
 8001394:	a904      	add	r1, sp, #16
 8001396:	4620      	mov	r0, r4
 8001398:	f000 f924 	bl	80015e4 <hts221_temp_deg_point_1_get>
 800139c:	bb38      	cbnz	r0, 80013ee <HTS221_TEMP_GetTemperature+0xb6>
	lin_temp.y1 = (float)coeff.u8bit[0];
 800139e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013aa:	edcd 7a03 	vstr	s15, [sp, #12]
	(void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK) {
 80013b4:	a905      	add	r1, sp, #20
 80013b6:	4620      	mov	r0, r4
 80013b8:	f000 f8af 	bl	800151a <hts221_temperature_raw_get>
 80013bc:	4604      	mov	r4, r0
 80013be:	b9c8      	cbnz	r0, 80013f4 <HTS221_TEMP_GetTemperature+0xbc>
	*Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80013c0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80013c4:	ee00 3a10 	vmov	s0, r3
 80013c8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80013cc:	4668      	mov	r0, sp
 80013ce:	f7ff fdf5 	bl	8000fbc <Linear_Interpolation>
 80013d2:	ed85 0a00 	vstr	s0, [r5]
}
 80013d6:	4620      	mov	r0, r4
 80013d8:	b007      	add	sp, #28
 80013da:	bd30      	pop	{r4, r5, pc}
		return HTS221_ERROR;
 80013dc:	f04f 34ff 	mov.w	r4, #4294967295
 80013e0:	e7f9      	b.n	80013d6 <HTS221_TEMP_GetTemperature+0x9e>
		return HTS221_ERROR;
 80013e2:	f04f 34ff 	mov.w	r4, #4294967295
 80013e6:	e7f6      	b.n	80013d6 <HTS221_TEMP_GetTemperature+0x9e>
		return HTS221_ERROR;
 80013e8:	f04f 34ff 	mov.w	r4, #4294967295
 80013ec:	e7f3      	b.n	80013d6 <HTS221_TEMP_GetTemperature+0x9e>
		return HTS221_ERROR;
 80013ee:	f04f 34ff 	mov.w	r4, #4294967295
 80013f2:	e7f0      	b.n	80013d6 <HTS221_TEMP_GetTemperature+0x9e>
		return HTS221_ERROR;
 80013f4:	f04f 34ff 	mov.w	r4, #4294967295
 80013f8:	e7ed      	b.n	80013d6 <HTS221_TEMP_GetTemperature+0x9e>
	...

080013fc <HTS221_RegisterBusIO>:
	if (pObj == NULL) {
 80013fc:	b1b8      	cbz	r0, 800142e <HTS221_RegisterBusIO+0x32>
{
 80013fe:	b508      	push	{r3, lr}
 8001400:	4603      	mov	r3, r0
		pObj->IO.Init = pIO->Init;
 8001402:	680a      	ldr	r2, [r1, #0]
 8001404:	6002      	str	r2, [r0, #0]
		pObj->IO.DeInit = pIO->DeInit;
 8001406:	6848      	ldr	r0, [r1, #4]
 8001408:	6058      	str	r0, [r3, #4]
		pObj->IO.BusType = pIO->BusType;
 800140a:	6888      	ldr	r0, [r1, #8]
 800140c:	6098      	str	r0, [r3, #8]
		pObj->IO.Address = pIO->Address;
 800140e:	7b08      	ldrb	r0, [r1, #12]
 8001410:	7318      	strb	r0, [r3, #12]
		pObj->IO.WriteReg = pIO->WriteReg;
 8001412:	6908      	ldr	r0, [r1, #16]
 8001414:	6118      	str	r0, [r3, #16]
		pObj->IO.ReadReg = pIO->ReadReg;
 8001416:	6948      	ldr	r0, [r1, #20]
 8001418:	6158      	str	r0, [r3, #20]
		pObj->IO.GetTick = pIO->GetTick;
 800141a:	6989      	ldr	r1, [r1, #24]
 800141c:	6199      	str	r1, [r3, #24]
		pObj->Ctx.read_reg = ReadRegWrap;
 800141e:	4907      	ldr	r1, [pc, #28]	; (800143c <HTS221_RegisterBusIO+0x40>)
 8001420:	6219      	str	r1, [r3, #32]
		pObj->Ctx.write_reg = WriteRegWrap;
 8001422:	4907      	ldr	r1, [pc, #28]	; (8001440 <HTS221_RegisterBusIO+0x44>)
 8001424:	61d9      	str	r1, [r3, #28]
		pObj->Ctx.handle = pObj;
 8001426:	625b      	str	r3, [r3, #36]	; 0x24
		if (pObj->IO.Init != NULL) {
 8001428:	b122      	cbz	r2, 8001434 <HTS221_RegisterBusIO+0x38>
			ret = pObj->IO.Init();
 800142a:	4790      	blx	r2
 800142c:	bd08      	pop	{r3, pc}
		ret = HTS221_ERROR;
 800142e:	f04f 30ff 	mov.w	r0, #4294967295
 8001432:	4770      	bx	lr
			ret = HTS221_ERROR;
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001438:	bd08      	pop	{r3, pc}
 800143a:	bf00      	nop
 800143c:	08000fef 	.word	0x08000fef
 8001440:	0800100d 	.word	0x0800100d

08001444 <hts221_read_reg>:
 * @param  uint16_t len: number of consecutive register to read
 *
 */
int32_t hts221_read_reg(hts221_ctx_t *ctx, uint8_t reg, uint8_t *data,
			uint16_t len)
{
 8001444:	b510      	push	{r4, lr}
	int32_t ret;
	ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001446:	6844      	ldr	r4, [r0, #4]
 8001448:	6880      	ldr	r0, [r0, #8]
 800144a:	47a0      	blx	r4
	return ret;
}
 800144c:	bd10      	pop	{r4, pc}

0800144e <hts221_write_reg>:
 * @param  uint16_t len: number of consecutive register to write
 *
 */
int32_t hts221_write_reg(hts221_ctx_t *ctx, uint8_t reg, uint8_t *data,
			 uint16_t len)
{
 800144e:	b510      	push	{r4, lr}
	int32_t ret;
	ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001450:	6804      	ldr	r4, [r0, #0]
 8001452:	6880      	ldr	r0, [r0, #8]
 8001454:	47a0      	blx	r4
	return ret;
}
 8001456:	bd10      	pop	{r4, pc}

08001458 <hts221_data_rate_set>:
 * @param  hts221_ctx_t *ctx: read / write interface definitions
 * @param  hts221_odr_t: change the values of odr in reg CTRL_REG1
 *
 */
int32_t hts221_data_rate_set(hts221_ctx_t *ctx, hts221_odr_t val)
{
 8001458:	b530      	push	{r4, r5, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	4604      	mov	r4, r0
 800145e:	460d      	mov	r5, r1
	hts221_reg_t reg;
	int32_t ret;

	ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8001460:	2301      	movs	r3, #1
 8001462:	aa01      	add	r2, sp, #4
 8001464:	2120      	movs	r1, #32
 8001466:	f7ff ffed 	bl	8001444 <hts221_read_reg>

	if (ret == 0) {
 800146a:	4603      	mov	r3, r0
 800146c:	b110      	cbz	r0, 8001474 <hts221_data_rate_set+0x1c>
		reg.ctrl_reg1.odr = (uint8_t)val;
		ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
	}

	return ret;
}
 800146e:	4618      	mov	r0, r3
 8001470:	b003      	add	sp, #12
 8001472:	bd30      	pop	{r4, r5, pc}
		reg.ctrl_reg1.odr = (uint8_t)val;
 8001474:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001478:	f365 0301 	bfi	r3, r5, #0, #2
 800147c:	aa02      	add	r2, sp, #8
 800147e:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8001482:	2301      	movs	r3, #1
 8001484:	2120      	movs	r1, #32
 8001486:	4620      	mov	r0, r4
 8001488:	f7ff ffe1 	bl	800144e <hts221_write_reg>
 800148c:	4603      	mov	r3, r0
	return ret;
 800148e:	e7ee      	b.n	800146e <hts221_data_rate_set+0x16>

08001490 <hts221_data_rate_get>:
 * @param  hts221_ctx_t *ctx: read / write interface definitions
 * @param  hts221_odr_t: Get the values of odr in reg CTRL_REG1
 *
 */
int32_t hts221_data_rate_get(hts221_ctx_t *ctx, hts221_odr_t *val)
{
 8001490:	b510      	push	{r4, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	460c      	mov	r4, r1
	hts221_reg_t reg;
	int32_t ret;

	ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8001496:	2301      	movs	r3, #1
 8001498:	aa01      	add	r2, sp, #4
 800149a:	2120      	movs	r1, #32
 800149c:	f7ff ffd2 	bl	8001444 <hts221_read_reg>

	switch (reg.ctrl_reg1.odr) {
 80014a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d810      	bhi.n	80014ce <hts221_data_rate_get+0x3e>
 80014ac:	e8df f003 	tbb	[pc, r3]
 80014b0:	0c090602 	.word	0x0c090602
	case HTS221_ONE_SHOT:
		*val = HTS221_ONE_SHOT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	7023      	strb	r3, [r4, #0]
		*val = HTS221_ODR_ND;
		break;
	}

	return ret;
}
 80014b8:	b002      	add	sp, #8
 80014ba:	bd10      	pop	{r4, pc}
		*val = HTS221_ODR_1Hz;
 80014bc:	2301      	movs	r3, #1
 80014be:	7023      	strb	r3, [r4, #0]
		break;
 80014c0:	e7fa      	b.n	80014b8 <hts221_data_rate_get+0x28>
		*val = HTS221_ODR_7Hz;
 80014c2:	2302      	movs	r3, #2
 80014c4:	7023      	strb	r3, [r4, #0]
		break;
 80014c6:	e7f7      	b.n	80014b8 <hts221_data_rate_get+0x28>
		*val = HTS221_ODR_12Hz5;
 80014c8:	2303      	movs	r3, #3
 80014ca:	7023      	strb	r3, [r4, #0]
		break;
 80014cc:	e7f4      	b.n	80014b8 <hts221_data_rate_get+0x28>
		*val = HTS221_ODR_ND;
 80014ce:	2304      	movs	r3, #4
 80014d0:	7023      	strb	r3, [r4, #0]
	return ret;
 80014d2:	e7f1      	b.n	80014b8 <hts221_data_rate_get+0x28>

080014d4 <hts221_block_data_update_set>:
 * @param  hts221_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t val: change the values of bdu in reg CTRL_REG1
 *
 */
int32_t hts221_block_data_update_set(hts221_ctx_t *ctx, uint8_t val)
{
 80014d4:	b530      	push	{r4, r5, lr}
 80014d6:	b083      	sub	sp, #12
 80014d8:	4604      	mov	r4, r0
 80014da:	460d      	mov	r5, r1
	hts221_reg_t reg;
	int32_t ret;

	ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 80014dc:	2301      	movs	r3, #1
 80014de:	aa01      	add	r2, sp, #4
 80014e0:	2120      	movs	r1, #32
 80014e2:	f7ff ffaf 	bl	8001444 <hts221_read_reg>

	if (ret == 0) {
 80014e6:	4603      	mov	r3, r0
 80014e8:	b110      	cbz	r0, 80014f0 <hts221_block_data_update_set+0x1c>
		reg.ctrl_reg1.bdu = val;
		ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
	}

	return ret;
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	b003      	add	sp, #12
 80014ee:	bd30      	pop	{r4, r5, pc}
		reg.ctrl_reg1.bdu = val;
 80014f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80014f4:	f365 0382 	bfi	r3, r5, #2, #1
 80014f8:	aa02      	add	r2, sp, #8
 80014fa:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 80014fe:	2301      	movs	r3, #1
 8001500:	2120      	movs	r1, #32
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff ffa3 	bl	800144e <hts221_write_reg>
 8001508:	4603      	mov	r3, r0
	return ret;
 800150a:	e7ee      	b.n	80014ea <hts221_block_data_update_set+0x16>

0800150c <hts221_humidity_raw_get>:
 * @param  hts221_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t hts221_humidity_raw_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 800150c:	b508      	push	{r3, lr}
	return hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800150e:	2302      	movs	r3, #2
 8001510:	460a      	mov	r2, r1
 8001512:	2128      	movs	r1, #40	; 0x28
 8001514:	f7ff ff96 	bl	8001444 <hts221_read_reg>
}
 8001518:	bd08      	pop	{r3, pc}

0800151a <hts221_temperature_raw_get>:
 * @param  hts221_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t hts221_temperature_raw_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 800151a:	b508      	push	{r3, lr}
	return hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 800151c:	2302      	movs	r3, #2
 800151e:	460a      	mov	r2, r1
 8001520:	212a      	movs	r1, #42	; 0x2a
 8001522:	f7ff ff8f 	bl	8001444 <hts221_read_reg>
}
 8001526:	bd08      	pop	{r3, pc}

08001528 <hts221_device_id_get>:
 * @param  hts221_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t hts221_device_id_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8001528:	b508      	push	{r3, lr}
	return hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800152a:	2301      	movs	r3, #1
 800152c:	460a      	mov	r2, r1
 800152e:	210f      	movs	r1, #15
 8001530:	f7ff ff88 	bl	8001444 <hts221_read_reg>
}
 8001534:	bd08      	pop	{r3, pc}

08001536 <hts221_power_on_set>:
 * @param  hts221_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t val: change the values of pd in reg CTRL_REG1
 *
 */
int32_t hts221_power_on_set(hts221_ctx_t *ctx, uint8_t val)
{
 8001536:	b530      	push	{r4, r5, lr}
 8001538:	b083      	sub	sp, #12
 800153a:	4604      	mov	r4, r0
 800153c:	460d      	mov	r5, r1
	hts221_reg_t reg;
	int32_t ret;

	ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 800153e:	2301      	movs	r3, #1
 8001540:	aa01      	add	r2, sp, #4
 8001542:	2120      	movs	r1, #32
 8001544:	f7ff ff7e 	bl	8001444 <hts221_read_reg>

	if (ret == 0) {
 8001548:	4603      	mov	r3, r0
 800154a:	b110      	cbz	r0, 8001552 <hts221_power_on_set+0x1c>
		reg.ctrl_reg1.pd = val;
		ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
	}
	return ret;
}
 800154c:	4618      	mov	r0, r3
 800154e:	b003      	add	sp, #12
 8001550:	bd30      	pop	{r4, r5, pc}
		reg.ctrl_reg1.pd = val;
 8001552:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001556:	f365 13c7 	bfi	r3, r5, #7, #1
 800155a:	aa02      	add	r2, sp, #8
 800155c:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8001560:	2301      	movs	r3, #1
 8001562:	2120      	movs	r1, #32
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff ff72 	bl	800144e <hts221_write_reg>
 800156a:	4603      	mov	r3, r0
	return ret;
 800156c:	e7ee      	b.n	800154c <hts221_power_on_set+0x16>

0800156e <hts221_hum_rh_point_0_get>:
 * @param  hts221_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t hts221_hum_rh_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 800156e:	b510      	push	{r4, lr}
 8001570:	460c      	mov	r4, r1
	int32_t ret;

	ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 8001572:	2301      	movs	r3, #1
 8001574:	460a      	mov	r2, r1
 8001576:	2130      	movs	r1, #48	; 0x30
 8001578:	f7ff ff64 	bl	8001444 <hts221_read_reg>
	*buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 800157c:	7823      	ldrb	r3, [r4, #0]
 800157e:	085b      	lsrs	r3, r3, #1
 8001580:	7023      	strb	r3, [r4, #0]

	return ret;
}
 8001582:	bd10      	pop	{r4, pc}

08001584 <hts221_hum_rh_point_1_get>:
 * @param  hts221_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t hts221_hum_rh_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8001584:	b510      	push	{r4, lr}
 8001586:	460c      	mov	r4, r1
	int32_t ret;

	ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 8001588:	2301      	movs	r3, #1
 800158a:	460a      	mov	r2, r1
 800158c:	2131      	movs	r1, #49	; 0x31
 800158e:	f7ff ff59 	bl	8001444 <hts221_read_reg>
	*buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8001592:	7823      	ldrb	r3, [r4, #0]
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	7023      	strb	r3, [r4, #0]

	return ret;
}
 8001598:	bd10      	pop	{r4, pc}

0800159a <hts221_temp_deg_point_0_get>:
 * @param  hts221_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t hts221_temp_deg_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 800159a:	b530      	push	{r4, r5, lr}
 800159c:	b083      	sub	sp, #12
 800159e:	4605      	mov	r5, r0
 80015a0:	460c      	mov	r4, r1
	hts221_reg_t reg;
	int32_t ret;
	axis1bit16_t coeff;

	ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, coeff.u8bit, 1);
 80015a2:	2301      	movs	r3, #1
 80015a4:	466a      	mov	r2, sp
 80015a6:	2132      	movs	r1, #50	; 0x32
 80015a8:	f7ff ff4c 	bl	8001444 <hts221_read_reg>

	if (ret == 0) {
 80015ac:	4603      	mov	r3, r0
 80015ae:	b110      	cbz	r0, 80015b6 <hts221_temp_deg_point_0_get+0x1c>
		coeff.i16bit = coeff.i16bit / 8;
		*(buff) = (uint8_t)coeff.i16bit;
	}

	return ret;
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	b003      	add	sp, #12
 80015b4:	bd30      	pop	{r4, r5, pc}
		ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, &reg.byte, 1);
 80015b6:	2301      	movs	r3, #1
 80015b8:	aa01      	add	r2, sp, #4
 80015ba:	2135      	movs	r1, #53	; 0x35
 80015bc:	4628      	mov	r0, r5
 80015be:	f7ff ff41 	bl	8001444 <hts221_read_reg>
 80015c2:	4603      	mov	r3, r0
		coeff.u8bit[1] = reg.t1_t0_msb.t0_msb;
 80015c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80015c8:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80015cc:	f88d 2001 	strb.w	r2, [sp, #1]
		coeff.i16bit = coeff.i16bit / 8;
 80015d0:	f9bd 2000 	ldrsh.w	r2, [sp]
 80015d4:	2a00      	cmp	r2, #0
 80015d6:	db03      	blt.n	80015e0 <hts221_temp_deg_point_0_get+0x46>
		*(buff) = (uint8_t)coeff.i16bit;
 80015d8:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 80015dc:	7022      	strb	r2, [r4, #0]
	return ret;
 80015de:	e7e7      	b.n	80015b0 <hts221_temp_deg_point_0_get+0x16>
		coeff.i16bit = coeff.i16bit / 8;
 80015e0:	3207      	adds	r2, #7
 80015e2:	e7f9      	b.n	80015d8 <hts221_temp_deg_point_0_get+0x3e>

080015e4 <hts221_temp_deg_point_1_get>:
 * @param  hts221_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t hts221_temp_deg_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 80015e4:	b530      	push	{r4, r5, lr}
 80015e6:	b083      	sub	sp, #12
 80015e8:	4605      	mov	r5, r0
 80015ea:	460c      	mov	r4, r1
	hts221_reg_t reg;
	int32_t ret;
	axis1bit16_t coeff;

	ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, coeff.u8bit, 1);
 80015ec:	2301      	movs	r3, #1
 80015ee:	466a      	mov	r2, sp
 80015f0:	2133      	movs	r1, #51	; 0x33
 80015f2:	f7ff ff27 	bl	8001444 <hts221_read_reg>

	if (ret == 0) {
 80015f6:	4603      	mov	r3, r0
 80015f8:	b110      	cbz	r0, 8001600 <hts221_temp_deg_point_1_get+0x1c>
		coeff.i16bit = coeff.i16bit / 8;
		*(buff) = (uint8_t)coeff.i16bit;
	}

	return ret;
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	b003      	add	sp, #12
 80015fe:	bd30      	pop	{r4, r5, pc}
		ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, &reg.byte, 1);
 8001600:	2301      	movs	r3, #1
 8001602:	aa01      	add	r2, sp, #4
 8001604:	2135      	movs	r1, #53	; 0x35
 8001606:	4628      	mov	r0, r5
 8001608:	f7ff ff1c 	bl	8001444 <hts221_read_reg>
 800160c:	4603      	mov	r3, r0
		coeff.u8bit[1] = reg.t1_t0_msb.t1_msb;
 800160e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001612:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8001616:	f88d 2001 	strb.w	r2, [sp, #1]
		coeff.i16bit = coeff.i16bit / 8;
 800161a:	f9bd 2000 	ldrsh.w	r2, [sp]
 800161e:	2a00      	cmp	r2, #0
 8001620:	db03      	blt.n	800162a <hts221_temp_deg_point_1_get+0x46>
		*(buff) = (uint8_t)coeff.i16bit;
 8001622:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8001626:	7022      	strb	r2, [r4, #0]
	return ret;
 8001628:	e7e7      	b.n	80015fa <hts221_temp_deg_point_1_get+0x16>
		coeff.i16bit = coeff.i16bit / 8;
 800162a:	3207      	adds	r2, #7
 800162c:	e7f9      	b.n	8001622 <hts221_temp_deg_point_1_get+0x3e>

0800162e <hts221_hum_adc_point_0_get>:
 * @param  hts221_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t hts221_hum_adc_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 800162e:	b508      	push	{r3, lr}
	return hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 8001630:	2302      	movs	r3, #2
 8001632:	460a      	mov	r2, r1
 8001634:	2136      	movs	r1, #54	; 0x36
 8001636:	f7ff ff05 	bl	8001444 <hts221_read_reg>
}
 800163a:	bd08      	pop	{r3, pc}

0800163c <hts221_hum_adc_point_1_get>:
 * @param  hts221_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t hts221_hum_adc_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 800163c:	b508      	push	{r3, lr}
	return hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 800163e:	2302      	movs	r3, #2
 8001640:	460a      	mov	r2, r1
 8001642:	213a      	movs	r1, #58	; 0x3a
 8001644:	f7ff fefe 	bl	8001444 <hts221_read_reg>
}
 8001648:	bd08      	pop	{r3, pc}

0800164a <hts221_temp_adc_point_0_get>:
 * @param  hts221_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t hts221_temp_adc_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 800164a:	b508      	push	{r3, lr}
	return hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 800164c:	2302      	movs	r3, #2
 800164e:	460a      	mov	r2, r1
 8001650:	213c      	movs	r1, #60	; 0x3c
 8001652:	f7ff fef7 	bl	8001444 <hts221_read_reg>
}
 8001656:	bd08      	pop	{r3, pc}

08001658 <hts221_temp_adc_point_1_get>:
 * @param  hts221_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t hts221_temp_adc_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8001658:	b508      	push	{r3, lr}
	return hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 800165a:	2302      	movs	r3, #2
 800165c:	460a      	mov	r2, r1
 800165e:	213e      	movs	r1, #62	; 0x3e
 8001660:	f7ff fef0 	bl	8001444 <hts221_read_reg>
}
 8001664:	bd08      	pop	{r3, pc}
	...

08001668 <L6206_AttachErrorHandler>:
* to the error Hanlder
* @retval None
**********************************************************/
void L6206_AttachErrorHandler(void (*callback)(uint16_t))
{
	errorHandlerCallback = (void (*)(uint16_t))callback;
 8001668:	4b01      	ldr	r3, [pc, #4]	; (8001670 <L6206_AttachErrorHandler+0x8>)
 800166a:	6018      	str	r0, [r3, #0]
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20002914 	.word	0x20002914

08001674 <L6206_AttachFlagInterrupt>:
* to the Flag Interrupt
* @retval None
**********************************************************/
void L6206_AttachFlagInterrupt(void (*callback)(void))
{
	flagInterruptCallback = (void (*)())callback;
 8001674:	4b01      	ldr	r3, [pc, #4]	; (800167c <L6206_AttachFlagInterrupt+0x8>)
 8001676:	6018      	str	r0, [r3, #0]
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20002918 	.word	0x20002918

08001680 <L6206_GetBridgeInputPwmFreq>:
* @param[in] bridgeId 0 for bridge A, 1 for bridge B
* @retval Freq in Hz
**********************************************************/
uint32_t L6206_GetBridgeInputPwmFreq(uint8_t bridgeId)
{
	return(devicePrm.pwmFreq[(bridgeId << 1)]);
 8001680:	4b02      	ldr	r3, [pc, #8]	; (800168c <L6206_GetBridgeInputPwmFreq+0xc>)
 8001682:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
 8001686:	6840      	ldr	r0, [r0, #4]
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	200028ec 	.word	0x200028ec

08001690 <L6206_GetFwVersion>:
* @retval L6206_FW_VERSION
**********************************************************/
uint32_t L6206_GetFwVersion(void)
{
	return(L6206_FW_VERSION);
}
 8001690:	2000      	movs	r0, #0
 8001692:	4770      	bx	lr

08001694 <L6206_ReadId>:
* @retval Id of the l6206 Driver Instance
**********************************************************/
uint16_t L6206_ReadId(void)
{
	return(l6206DriverInstance);
}
 8001694:	4b01      	ldr	r3, [pc, #4]	; (800169c <L6206_ReadId+0x8>)
 8001696:	8818      	ldrh	r0, [r3, #0]
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	2000248a 	.word	0x2000248a

080016a0 <L6206_SetNbDevices>:
* @retval TRUE if successfull, FALSE if failure, attempt to set a number of
* devices greater than MAX_NUMBER_OF_DEVICES
**********************************************************/
bool L6206_SetNbDevices(uint8_t nbDevices)
{
	if (nbDevices <= MAX_NUMBER_OF_DEVICES) {
 80016a0:	2801      	cmp	r0, #1
 80016a2:	d901      	bls.n	80016a8 <L6206_SetNbDevices+0x8>
		return TRUE;
	}else {
		return FALSE;
 80016a4:	2000      	movs	r0, #0
	}
}
 80016a6:	4770      	bx	lr
		return TRUE;
 80016a8:	2001      	movs	r0, #1
 80016aa:	4770      	bx	lr

080016ac <L6206_ErrorHandler>:
* @brief Error handler which calls the user callback (if defined)
* @param[in] error Number of the error
* @retval None
**********************************************************/
void L6206_ErrorHandler(uint16_t error)
{
 80016ac:	b508      	push	{r3, lr}
	if (errorHandlerCallback != 0) {
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <L6206_ErrorHandler+0x10>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	b10b      	cbz	r3, 80016b8 <L6206_ErrorHandler+0xc>
		(void)errorHandlerCallback(error);
 80016b4:	4798      	blx	r3
	}else {
		while (1) {
			/* Infinite loop */
		}
	}
}
 80016b6:	bd08      	pop	{r3, pc}
 80016b8:	e7fe      	b.n	80016b8 <L6206_ErrorHandler+0xc>
 80016ba:	bf00      	nop
 80016bc:	20002914 	.word	0x20002914

080016c0 <L6206_GetCurrentSpeed>:
{
 80016c0:	b508      	push	{r3, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <L6206_GetCurrentSpeed+0x38>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <L6206_GetCurrentSpeed+0x3c>)
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
 80016ca:	4283      	cmp	r3, r0
 80016cc:	d30b      	bcc.n	80016e6 <L6206_GetCurrentSpeed+0x26>
	}else if (devicePrm.motionState[motorId] != INACTIVE) {
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <L6206_GetCurrentSpeed+0x38>)
 80016d0:	4403      	add	r3, r0
 80016d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d00b      	beq.n	80016f2 <L6206_GetCurrentSpeed+0x32>
		speed = devicePrm.speed[motorId];
 80016da:	3008      	adds	r0, #8
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <L6206_GetCurrentSpeed+0x38>)
 80016de:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80016e2:	8880      	ldrh	r0, [r0, #4]
 80016e4:	bd08      	pop	{r3, pc}
		L6206_ErrorHandler(L6206_ERROR_1);
 80016e6:	f248 0001 	movw	r0, #32769	; 0x8001
 80016ea:	f7ff ffdf 	bl	80016ac <L6206_ErrorHandler>
	uint16_t speed = 0;
 80016ee:	2000      	movs	r0, #0
 80016f0:	bd08      	pop	{r3, pc}
 80016f2:	2000      	movs	r0, #0
}
 80016f4:	bd08      	pop	{r3, pc}
 80016f6:	bf00      	nop
 80016f8:	200028ec 	.word	0x200028ec
 80016fc:	08021c8c 	.word	0x08021c8c

08001700 <L6206_GetDeviceState>:
{
 8001700:	b508      	push	{r3, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <L6206_GetDeviceState+0x24>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <L6206_GetDeviceState+0x28>)
 8001708:	5cd3      	ldrb	r3, [r2, r3]
 800170a:	4283      	cmp	r3, r0
 800170c:	d304      	bcc.n	8001718 <L6206_GetDeviceState+0x18>
		state = devicePrm.motionState[motorId];
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <L6206_GetDeviceState+0x24>)
 8001710:	4418      	add	r0, r3
 8001712:	f890 0020 	ldrb.w	r0, [r0, #32]
}
 8001716:	bd08      	pop	{r3, pc}
		L6206_ErrorHandler(L6206_ERROR_1);
 8001718:	f248 0001 	movw	r0, #32769	; 0x8001
 800171c:	f7ff ffc6 	bl	80016ac <L6206_ErrorHandler>
	motorState_t state = INACTIVE;
 8001720:	2008      	movs	r0, #8
 8001722:	bd08      	pop	{r3, pc}
 8001724:	200028ec 	.word	0x200028ec
 8001728:	08021c8c 	.word	0x08021c8c

0800172c <L6206_GetMaxSpeed>:
{
 800172c:	b508      	push	{r3, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <L6206_GetMaxSpeed+0x28>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <L6206_GetMaxSpeed+0x2c>)
 8001734:	5cd3      	ldrb	r3, [r2, r3]
 8001736:	4283      	cmp	r3, r0
 8001738:	d305      	bcc.n	8001746 <L6206_GetMaxSpeed+0x1a>
		speed = devicePrm.speed[motorId];
 800173a:	3008      	adds	r0, #8
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <L6206_GetMaxSpeed+0x28>)
 800173e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001742:	8880      	ldrh	r0, [r0, #4]
}
 8001744:	bd08      	pop	{r3, pc}
		L6206_ErrorHandler(L6206_ERROR_1);
 8001746:	f248 0001 	movw	r0, #32769	; 0x8001
 800174a:	f7ff ffaf 	bl	80016ac <L6206_ErrorHandler>
	uint16_t speed = 0;
 800174e:	2000      	movs	r0, #0
 8001750:	bd08      	pop	{r3, pc}
 8001752:	bf00      	nop
 8001754:	200028ec 	.word	0x200028ec
 8001758:	08021c8c 	.word	0x08021c8c

0800175c <L6206_DisableBridge>:
{
 800175c:	b510      	push	{r4, lr}
 800175e:	4604      	mov	r4, r0
	L6206_Board_DisableBridge(bridgeId);
 8001760:	f006 fd3e 	bl	80081e0 <L6206_Board_DisableBridge>
	devicePrm.bridgeEnabled[bridgeId] = FALSE;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <L6206_DisableBridge+0x3c>)
 8001766:	191a      	adds	r2, r3, r4
 8001768:	2100      	movs	r1, #0
 800176a:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
	if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR) {
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b08      	cmp	r3, #8
 8001772:	d907      	bls.n	8001784 <L6206_DisableBridge+0x28>
		if (bridgeId == BRIDGE_A) {
 8001774:	b13c      	cbz	r4, 8001786 <L6206_DisableBridge+0x2a>
			L6206_Board_DisableBridge(BRIDGE_A);
 8001776:	2000      	movs	r0, #0
 8001778:	f006 fd32 	bl	80081e0 <L6206_Board_DisableBridge>
			devicePrm.bridgeEnabled[BRIDGE_A] = FALSE;
 800177c:	2200      	movs	r2, #0
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <L6206_DisableBridge+0x3c>)
 8001780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001784:	bd10      	pop	{r4, pc}
			L6206_Board_DisableBridge(BRIDGE_B);
 8001786:	2001      	movs	r0, #1
 8001788:	f006 fd2a 	bl	80081e0 <L6206_Board_DisableBridge>
			devicePrm.bridgeEnabled[BRIDGE_B] = FALSE;
 800178c:	2200      	movs	r2, #0
 800178e:	4b02      	ldr	r3, [pc, #8]	; (8001798 <L6206_DisableBridge+0x3c>)
 8001790:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001794:	bd10      	pop	{r4, pc}
 8001796:	bf00      	nop
 8001798:	200028ec 	.word	0x200028ec

0800179c <L6206_EnableBridge>:
{
 800179c:	b510      	push	{r4, lr}
 800179e:	4604      	mov	r4, r0
	devicePrm.bridgeEnabled[bridgeId] = TRUE;
 80017a0:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <L6206_EnableBridge+0x48>)
 80017a2:	181a      	adds	r2, r3, r0
 80017a4:	2101      	movs	r1, #1
 80017a6:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
	if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR) {
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d915      	bls.n	80017dc <L6206_EnableBridge+0x40>
		L6206_Board_EnableBridge(bridgeId, 0);
 80017b0:	2100      	movs	r1, #0
 80017b2:	f006 fd39 	bl	8008228 <L6206_Board_EnableBridge>
		if (bridgeId == BRIDGE_A) {
 80017b6:	b944      	cbnz	r4, 80017ca <L6206_EnableBridge+0x2e>
			L6206_Board_EnableBridge(BRIDGE_B, 1);
 80017b8:	2101      	movs	r1, #1
 80017ba:	4608      	mov	r0, r1
 80017bc:	f006 fd34 	bl	8008228 <L6206_Board_EnableBridge>
			devicePrm.bridgeEnabled[BRIDGE_B] = TRUE;
 80017c0:	2201      	movs	r2, #1
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <L6206_EnableBridge+0x48>)
 80017c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80017c8:	bd10      	pop	{r4, pc}
			L6206_Board_EnableBridge(BRIDGE_A, 1);
 80017ca:	2101      	movs	r1, #1
 80017cc:	2000      	movs	r0, #0
 80017ce:	f006 fd2b 	bl	8008228 <L6206_Board_EnableBridge>
			devicePrm.bridgeEnabled[BRIDGE_A] = TRUE;
 80017d2:	2201      	movs	r2, #1
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <L6206_EnableBridge+0x48>)
 80017d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017da:	bd10      	pop	{r4, pc}
		L6206_Board_EnableBridge(bridgeId, 1);
 80017dc:	2101      	movs	r1, #1
 80017de:	f006 fd23 	bl	8008228 <L6206_Board_EnableBridge>
 80017e2:	bd10      	pop	{r4, pc}
 80017e4:	200028ec 	.word	0x200028ec

080017e8 <L6206_GetBridgeStatus>:
{
 80017e8:	b508      	push	{r3, lr}
	uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 80017ea:	f006 fd4f 	bl	800828c <L6206_Board_GetFlagPinState>
}
 80017ee:	b280      	uxth	r0, r0
 80017f0:	bd08      	pop	{r3, pc}
	...

080017f4 <L6206_FlagInterruptHandler>:
/******************************************************//**
* @brief  Handlers of the flag interrupt which calls the user callback (if defined)
* @retval None
**********************************************************/
void L6206_FlagInterruptHandler(void)
{
 80017f4:	b508      	push	{r3, lr}
	bool status;

	status = L6206_GetBridgeStatus(BRIDGE_A);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff fff6 	bl	80017e8 <L6206_GetBridgeStatus>
 80017fc:	b2c0      	uxtb	r0, r0
	if (status != devicePrm.bridgeEnabled[BRIDGE_A]) {
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <L6206_FlagInterruptHandler+0x3c>)
 8001800:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001804:	4298      	cmp	r0, r3
 8001806:	d002      	beq.n	800180e <L6206_FlagInterruptHandler+0x1a>
		devicePrm.bridgeEnabled[BRIDGE_A] = status;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <L6206_FlagInterruptHandler+0x3c>)
 800180a:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
	}

	status = L6206_GetBridgeStatus(BRIDGE_B);
 800180e:	2001      	movs	r0, #1
 8001810:	f7ff ffea 	bl	80017e8 <L6206_GetBridgeStatus>
 8001814:	b2c0      	uxtb	r0, r0
	if (status != devicePrm.bridgeEnabled[BRIDGE_B]) {
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <L6206_FlagInterruptHandler+0x3c>)
 8001818:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800181c:	4298      	cmp	r0, r3
 800181e:	d002      	beq.n	8001826 <L6206_FlagInterruptHandler+0x32>
		devicePrm.bridgeEnabled[BRIDGE_B] = status;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <L6206_FlagInterruptHandler+0x3c>)
 8001822:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
	}

	if (flagInterruptCallback != 0) {
 8001826:	4b03      	ldr	r3, [pc, #12]	; (8001834 <L6206_FlagInterruptHandler+0x40>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	b103      	cbz	r3, 800182e <L6206_FlagInterruptHandler+0x3a>
		flagInterruptCallback();
 800182c:	4798      	blx	r3
 800182e:	bd08      	pop	{r3, pc}
 8001830:	200028ec 	.word	0x200028ec
 8001834:	20002918 	.word	0x20002918

08001838 <L6206_SetDualFullBridgeConfig>:
{
 8001838:	b510      	push	{r4, lr}
	devicePrm.config = (dualFullBridgeConfig_t)newConfig;
 800183a:	4c34      	ldr	r4, [pc, #208]	; (800190c <L6206_SetDualFullBridgeConfig+0xd4>)
 800183c:	7020      	strb	r0, [r4, #0]
	L6206_Board_PwmDeInit(INPUT_1A);
 800183e:	2000      	movs	r0, #0
 8001840:	f006 fd8e 	bl	8008360 <L6206_Board_PwmDeInit>
	L6206_Board_PwmDeInit(INPUT_2A);
 8001844:	2001      	movs	r0, #1
 8001846:	f006 fd8b 	bl	8008360 <L6206_Board_PwmDeInit>
	L6206_Board_PwmDeInit(INPUT_1B);
 800184a:	2002      	movs	r0, #2
 800184c:	f006 fd88 	bl	8008360 <L6206_Board_PwmDeInit>
	L6206_Board_PwmDeInit(INPUT_2B);
 8001850:	2003      	movs	r0, #3
 8001852:	f006 fd85 	bl	8008360 <L6206_Board_PwmDeInit>
	switch (devicePrm.config) {
 8001856:	7823      	ldrb	r3, [r4, #0]
 8001858:	2b0c      	cmp	r3, #12
 800185a:	d855      	bhi.n	8001908 <L6206_SetDualFullBridgeConfig+0xd0>
 800185c:	e8df f003 	tbb	[pc, r3]
 8001860:	07070707 	.word	0x07070707
 8001864:	21211414 	.word	0x21211414
 8001868:	3b3b2e2e 	.word	0x3b3b2e2e
 800186c:	48          	.byte	0x48
 800186d:	00          	.byte	0x00
		L6206_Board_PwmInit(INPUT_1A);
 800186e:	2000      	movs	r0, #0
 8001870:	f006 fda4 	bl	80083bc <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2A);
 8001874:	2001      	movs	r0, #1
 8001876:	f006 fda1 	bl	80083bc <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_1B);
 800187a:	2002      	movs	r0, #2
 800187c:	f006 fd9e 	bl	80083bc <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2B);
 8001880:	2003      	movs	r0, #3
 8001882:	f006 fd9b 	bl	80083bc <L6206_Board_PwmInit>
		break;
 8001886:	bd10      	pop	{r4, pc}
		L6206_Board_PwmDeInit(INPUT_2A);
 8001888:	2001      	movs	r0, #1
 800188a:	f006 fd69 	bl	8008360 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 800188e:	2000      	movs	r0, #0
 8001890:	f006 fd94 	bl	80083bc <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_1B);
 8001894:	2002      	movs	r0, #2
 8001896:	f006 fd91 	bl	80083bc <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2B);
 800189a:	2003      	movs	r0, #3
 800189c:	f006 fd8e 	bl	80083bc <L6206_Board_PwmInit>
		break;
 80018a0:	bd10      	pop	{r4, pc}
		L6206_Board_PwmDeInit(INPUT_2B);
 80018a2:	2003      	movs	r0, #3
 80018a4:	f006 fd5c 	bl	8008360 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f006 fd87 	bl	80083bc <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2A);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f006 fd84 	bl	80083bc <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_1B);
 80018b4:	2002      	movs	r0, #2
 80018b6:	f006 fd81 	bl	80083bc <L6206_Board_PwmInit>
		break;
 80018ba:	bd10      	pop	{r4, pc}
		L6206_Board_PwmDeInit(INPUT_2A);
 80018bc:	2001      	movs	r0, #1
 80018be:	f006 fd4f 	bl	8008360 <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_2B);
 80018c2:	2003      	movs	r0, #3
 80018c4:	f006 fd4c 	bl	8008360 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 80018c8:	2000      	movs	r0, #0
 80018ca:	f006 fd77 	bl	80083bc <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_1B);
 80018ce:	2002      	movs	r0, #2
 80018d0:	f006 fd74 	bl	80083bc <L6206_Board_PwmInit>
		break;
 80018d4:	bd10      	pop	{r4, pc}
		L6206_Board_PwmDeInit(INPUT_1B);
 80018d6:	2002      	movs	r0, #2
 80018d8:	f006 fd42 	bl	8008360 <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_2B);
 80018dc:	2003      	movs	r0, #3
 80018de:	f006 fd3f 	bl	8008360 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f006 fd6a 	bl	80083bc <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2A);
 80018e8:	2001      	movs	r0, #1
 80018ea:	f006 fd67 	bl	80083bc <L6206_Board_PwmInit>
		break;
 80018ee:	bd10      	pop	{r4, pc}
		L6206_Board_PwmDeInit(INPUT_2A);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f006 fd35 	bl	8008360 <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_1B);
 80018f6:	2002      	movs	r0, #2
 80018f8:	f006 fd32 	bl	8008360 <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_2B);
 80018fc:	2003      	movs	r0, #3
 80018fe:	f006 fd2f 	bl	8008360 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 8001902:	2000      	movs	r0, #0
 8001904:	f006 fd5a 	bl	80083bc <L6206_Board_PwmInit>
 8001908:	bd10      	pop	{r4, pc}
 800190a:	bf00      	nop
 800190c:	200028ec 	.word	0x200028ec

08001910 <L6206_GetMotorHandle>:
}
 8001910:	4800      	ldr	r0, [pc, #0]	; (8001914 <L6206_GetMotorHandle+0x4>)
 8001912:	4770      	bx	lr
 8001914:	200011f8 	.word	0x200011f8

08001918 <L6206_GetBridgeIdUsedByMotorId>:
* @retval bridgeId 0 for bridge A , 1 for bridge B
**********************************************************/
uint8_t L6206_GetBridgeIdUsedByMotorId(uint8_t motorId)
{
	uint8_t bridgeId;
	switch (devicePrm.config) {
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <L6206_GetBridgeIdUsedByMotorId+0x30>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b08      	cmp	r3, #8
 800191e:	d80e      	bhi.n	800193e <L6206_GetBridgeIdUsedByMotorId+0x26>
 8001920:	e8df f003 	tbb	[pc, r3]
 8001924:	07070505 	.word	0x07070505
 8001928:	07050505 	.word	0x07050505
 800192c:	05          	.byte	0x05
 800192d:	00          	.byte	0x00
	case PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1B_IN2B__1_BIDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_UNDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 800192e:	b940      	cbnz	r0, 8001942 <L6206_GetBridgeIdUsedByMotorId+0x2a>
 8001930:	4770      	bx	lr
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1B_IN2B__2_UNDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (motorId < 2) {
 8001932:	2801      	cmp	r0, #1
 8001934:	d901      	bls.n	800193a <L6206_GetBridgeIdUsedByMotorId+0x22>
			bridgeId = 0;
		}else {
			bridgeId = 1;
 8001936:	2001      	movs	r0, #1
	default:
		bridgeId = 0;
		break;
	}
	return(bridgeId);
}
 8001938:	4770      	bx	lr
			bridgeId = 0;
 800193a:	2000      	movs	r0, #0
 800193c:	4770      	bx	lr
		bridgeId = 0;
 800193e:	2000      	movs	r0, #0
 8001940:	4770      	bx	lr
			bridgeId = 1;
 8001942:	2001      	movs	r0, #1
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	200028ec 	.word	0x200028ec

0800194c <L6206_GetMotorIdUsingbridgeInput>:
**********************************************************/
uint8_t L6206_GetMotorIdUsingbridgeInput(uint8_t bridgeInput)
{
	uint8_t motorId;

	switch (devicePrm.config) {
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <L6206_GetMotorIdUsingbridgeInput+0x70>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b0a      	cmp	r3, #10
 8001952:	d82c      	bhi.n	80019ae <L6206_GetMotorIdUsingbridgeInput+0x62>
 8001954:	e8df f003 	tbb	[pc, r3]
 8001958:	1a120a06 	.word	0x1a120a06
 800195c:	12060a06 	.word	0x12060a06
 8001960:	2b06      	.short	0x2b06
 8001962:	23          	.byte	0x23
 8001963:	00          	.byte	0x00
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1B_IN2B__1_BIDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_UNDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput >= INPUT_1B) {
 8001964:	2801      	cmp	r0, #1
 8001966:	d924      	bls.n	80019b2 <L6206_GetMotorIdUsingbridgeInput+0x66>
			motorId = 1;
 8001968:	2001      	movs	r0, #1
 800196a:	4770      	bx	lr
			motorId = 0;
		}
		break;
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
	case   PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput == INPUT_2B) {
 800196c:	2803      	cmp	r0, #3
 800196e:	d022      	beq.n	80019b6 <L6206_GetMotorIdUsingbridgeInput+0x6a>
			motorId = 2;
		}else if (bridgeInput == INPUT_1B) {
 8001970:	2802      	cmp	r0, #2
 8001972:	d001      	beq.n	8001978 <L6206_GetMotorIdUsingbridgeInput+0x2c>
			motorId = 1;
		}else {
			motorId = 0;
 8001974:	2000      	movs	r0, #0
 8001976:	4770      	bx	lr
			motorId = 1;
 8001978:	2001      	movs	r0, #1
 800197a:	4770      	bx	lr
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1B_IN2B__2_UNDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput >= INPUT_1B) {
 800197c:	2801      	cmp	r0, #1
 800197e:	d901      	bls.n	8001984 <L6206_GetMotorIdUsingbridgeInput+0x38>
			motorId = 2;
 8001980:	2002      	movs	r0, #2
 8001982:	4770      	bx	lr
		}else if (bridgeInput == INPUT_2A) {
 8001984:	d001      	beq.n	800198a <L6206_GetMotorIdUsingbridgeInput+0x3e>
			motorId = 1;
		}else {
			motorId = 0;
 8001986:	2000      	movs	r0, #0
 8001988:	4770      	bx	lr
 800198a:	4770      	bx	lr
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput == INPUT_2B) {
 800198c:	2803      	cmp	r0, #3
 800198e:	d00b      	beq.n	80019a8 <L6206_GetMotorIdUsingbridgeInput+0x5c>
			motorId = 3;
		}else if (bridgeInput == INPUT_1B) {
 8001990:	2802      	cmp	r0, #2
 8001992:	d009      	beq.n	80019a8 <L6206_GetMotorIdUsingbridgeInput+0x5c>
			motorId = 2;
		}else if (bridgeInput == INPUT_2A) {
 8001994:	2801      	cmp	r0, #1
 8001996:	d001      	beq.n	800199c <L6206_GetMotorIdUsingbridgeInput+0x50>
			motorId = 1;
		}else {
			motorId = 0;
 8001998:	2000      	movs	r0, #0
 800199a:	4770      	bx	lr
 800199c:	4770      	bx	lr
		}
		break;
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_UNDIR_MOTOR_BRIDGE_1A__1_UNDIR_MOTOR_BRIDGE_2A:
		if ((bridgeInput == INPUT_2A) || (bridgeInput == INPUT_2B)) {
 800199e:	2801      	cmp	r0, #1
 80019a0:	d002      	beq.n	80019a8 <L6206_GetMotorIdUsingbridgeInput+0x5c>
 80019a2:	2803      	cmp	r0, #3
 80019a4:	d001      	beq.n	80019aa <L6206_GetMotorIdUsingbridgeInput+0x5e>
			motorId = 1;
		}else {
			motorId = 0;
 80019a6:	2000      	movs	r0, #0
		motorId = 0;
		break;
	}

	return(motorId);
}
 80019a8:	4770      	bx	lr
			motorId = 1;
 80019aa:	2001      	movs	r0, #1
 80019ac:	4770      	bx	lr
		motorId = 0;
 80019ae:	2000      	movs	r0, #0
 80019b0:	4770      	bx	lr
			motorId = 0;
 80019b2:	2000      	movs	r0, #0
 80019b4:	4770      	bx	lr
			motorId = 2;
 80019b6:	2002      	movs	r0, #2
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	200028ec 	.word	0x200028ec

080019c0 <L6206_GetBridgeInputUsedByMotorId>:
* @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
**********************************************************/
uint8_t L6206_GetBridgeInputUsedByMotorId(uint8_t motorId)
{
	uint8_t bridgeInput;
	switch (devicePrm.config) {
 80019c0:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b0b      	cmp	r3, #11
 80019c6:	d871      	bhi.n	8001aac <L6206_GetBridgeInputUsedByMotorId+0xec>
 80019c8:	e8df f003 	tbb	[pc, r3]
 80019cc:	30241606 	.word	0x30241606
 80019d0:	544a4339 	.word	0x544a4339
 80019d4:	68665e5a 	.word	0x68665e5a
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 80019d8:	b930      	cbnz	r0, 80019e8 <L6206_GetBridgeInputUsedByMotorId+0x28>
			if (devicePrm.direction[0] == FORWARD) {
 80019da:	4b36      	ldr	r3, [pc, #216]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 80019dc:	7f1b      	ldrb	r3, [r3, #28]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d001      	beq.n	80019e6 <L6206_GetBridgeInputUsedByMotorId+0x26>
				bridgeInput = INPUT_1A;
			}else {
				bridgeInput = INPUT_2A;
 80019e2:	2001      	movs	r0, #1
 80019e4:	4770      	bx	lr
 80019e6:	4770      	bx	lr
			}
		}else {
			if (devicePrm.direction[1] == FORWARD) {
 80019e8:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 80019ea:	7f5b      	ldrb	r3, [r3, #29]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d001      	beq.n	80019f4 <L6206_GetBridgeInputUsedByMotorId+0x34>
				bridgeInput = INPUT_1B;
			}else {
				bridgeInput = INPUT_2B;
 80019f0:	2003      	movs	r0, #3
 80019f2:	4770      	bx	lr
				bridgeInput = INPUT_1B;
 80019f4:	2002      	movs	r0, #2
 80019f6:	4770      	bx	lr
			}
		}
		break;
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 80019f8:	b930      	cbnz	r0, 8001a08 <L6206_GetBridgeInputUsedByMotorId+0x48>
			if (devicePrm.direction[0] == FORWARD) {
 80019fa:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 80019fc:	7f1b      	ldrb	r3, [r3, #28]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d001      	beq.n	8001a06 <L6206_GetBridgeInputUsedByMotorId+0x46>
				bridgeInput = INPUT_1A;
			}else {
				bridgeInput = INPUT_2A;
 8001a02:	2001      	movs	r0, #1
 8001a04:	4770      	bx	lr
 8001a06:	4770      	bx	lr
			}
		}else if (motorId == 1) {
 8001a08:	2801      	cmp	r0, #1
 8001a0a:	d001      	beq.n	8001a10 <L6206_GetBridgeInputUsedByMotorId+0x50>
			bridgeInput = INPUT_1B;
		}else {
			bridgeInput = INPUT_2B;
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	4770      	bx	lr
			bridgeInput = INPUT_1B;
 8001a10:	2002      	movs	r0, #2
 8001a12:	4770      	bx	lr
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001a14:	2800      	cmp	r0, #0
 8001a16:	d046      	beq.n	8001aa6 <L6206_GetBridgeInputUsedByMotorId+0xe6>
			bridgeInput = INPUT_1A;
		}else if (motorId == 1) {
 8001a18:	2801      	cmp	r0, #1
 8001a1a:	d044      	beq.n	8001aa6 <L6206_GetBridgeInputUsedByMotorId+0xe6>
			bridgeInput = INPUT_2A;
		}else {
			if (devicePrm.direction[2] == FORWARD) {
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 8001a1e:	7f9b      	ldrb	r3, [r3, #30]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d001      	beq.n	8001a28 <L6206_GetBridgeInputUsedByMotorId+0x68>
				bridgeInput = INPUT_1B;
			}else {
				bridgeInput = INPUT_2B;
 8001a24:	2003      	movs	r0, #3
 8001a26:	4770      	bx	lr
				bridgeInput = INPUT_1B;
 8001a28:	2002      	movs	r0, #2
 8001a2a:	4770      	bx	lr
			}
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d03a      	beq.n	8001aa6 <L6206_GetBridgeInputUsedByMotorId+0xe6>
			bridgeInput = INPUT_1A;
		}else if (motorId == 1) {
 8001a30:	2801      	cmp	r0, #1
 8001a32:	d038      	beq.n	8001aa6 <L6206_GetBridgeInputUsedByMotorId+0xe6>
			bridgeInput = INPUT_2A;
		}else if (motorId == 2) {
 8001a34:	2802      	cmp	r0, #2
 8001a36:	d001      	beq.n	8001a3c <L6206_GetBridgeInputUsedByMotorId+0x7c>
			bridgeInput = INPUT_1B;
		}else {
			bridgeInput = INPUT_2B;
 8001a38:	2003      	movs	r0, #3
 8001a3a:	4770      	bx	lr
 8001a3c:	4770      	bx	lr
		}
		break;
	case PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	d031      	beq.n	8001aa6 <L6206_GetBridgeInputUsedByMotorId+0xe6>
			bridgeInput = INPUT_1A;
		}else {
			if (devicePrm.direction[1] == FORWARD) {
 8001a42:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 8001a44:	7f5b      	ldrb	r3, [r3, #29]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d001      	beq.n	8001a4e <L6206_GetBridgeInputUsedByMotorId+0x8e>
				bridgeInput = INPUT_1B;
			}else {
				bridgeInput = INPUT_2B;
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	4770      	bx	lr
				bridgeInput = INPUT_1B;
 8001a4e:	2002      	movs	r0, #2
 8001a50:	4770      	bx	lr
			}
		}
		break;
	case PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001a52:	b340      	cbz	r0, 8001aa6 <L6206_GetBridgeInputUsedByMotorId+0xe6>
			bridgeInput = INPUT_1A;
		}else if (motorId == 1) {
 8001a54:	2801      	cmp	r0, #1
 8001a56:	d001      	beq.n	8001a5c <L6206_GetBridgeInputUsedByMotorId+0x9c>
			bridgeInput = INPUT_1B;
		}else {
			bridgeInput = INPUT_2B;
 8001a58:	2003      	movs	r0, #3
 8001a5a:	4770      	bx	lr
			bridgeInput = INPUT_1B;
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	4770      	bx	lr
		}
		break;
	case PARALLELING_IN1B_IN2B__1_BIDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001a60:	b108      	cbz	r0, 8001a66 <L6206_GetBridgeInputUsedByMotorId+0xa6>
				bridgeInput = INPUT_1A;
			}else {
				bridgeInput = INPUT_2A;
			}
		}else {
			bridgeInput = INPUT_1B;
 8001a62:	2002      	movs	r0, #2
 8001a64:	4770      	bx	lr
			if (devicePrm.direction[0] == FORWARD) {
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 8001a68:	7f1b      	ldrb	r3, [r3, #28]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d001      	beq.n	8001a72 <L6206_GetBridgeInputUsedByMotorId+0xb2>
				bridgeInput = INPUT_2A;
 8001a6e:	2001      	movs	r0, #1
 8001a70:	4770      	bx	lr
 8001a72:	4770      	bx	lr
		}
		break;
	case PARALLELING_IN1B_IN2B__2_UNDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001a74:	b1b8      	cbz	r0, 8001aa6 <L6206_GetBridgeInputUsedByMotorId+0xe6>
			bridgeInput = INPUT_1A;
		}else if (motorId == 1) {
 8001a76:	2801      	cmp	r0, #1
 8001a78:	d001      	beq.n	8001a7e <L6206_GetBridgeInputUsedByMotorId+0xbe>
			bridgeInput = INPUT_2A;
		}else {
			bridgeInput = INPUT_1B;
 8001a7a:	2002      	movs	r0, #2
 8001a7c:	4770      	bx	lr
 8001a7e:	4770      	bx	lr
		}
		break;
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_UNDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001a80:	b108      	cbz	r0, 8001a86 <L6206_GetBridgeInputUsedByMotorId+0xc6>
			bridgeInput = INPUT_1A;
		}else {
			bridgeInput = INPUT_1B;
 8001a82:	2002      	movs	r0, #2
 8001a84:	4770      	bx	lr
 8001a86:	4770      	bx	lr
		}
		break;
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
		if (devicePrm.direction[0] == FORWARD) {
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 8001a8a:	7f1b      	ldrb	r3, [r3, #28]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d001      	beq.n	8001a94 <L6206_GetBridgeInputUsedByMotorId+0xd4>
			bridgeInput = INPUT_1A;
		}else {
			bridgeInput = INPUT_1B;
 8001a90:	2002      	movs	r0, #2
 8001a92:	4770      	bx	lr
			bridgeInput = INPUT_1A;
 8001a94:	2000      	movs	r0, #0
 8001a96:	4770      	bx	lr
		}
		break;
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_UNDIR_MOTOR_BRIDGE_1A__1_UNDIR_MOTOR_BRIDGE_2A:
		if (motorId == 0) {
 8001a98:	b950      	cbnz	r0, 8001ab0 <L6206_GetBridgeInputUsedByMotorId+0xf0>
 8001a9a:	4770      	bx	lr
		}else {
			bridgeInput = INPUT_2A;
		}
		break;
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
		if (devicePrm.direction[0] == FORWARD) {
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 8001a9e:	7f1b      	ldrb	r3, [r3, #28]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d001      	beq.n	8001aa8 <L6206_GetBridgeInputUsedByMotorId+0xe8>
			bridgeInput = INPUT_1A;
		}else {
			bridgeInput = INPUT_2A;
 8001aa4:	2001      	movs	r0, #1
	default:
		bridgeInput = INPUT_1A;
		break;
	}
	return(bridgeInput);
}
 8001aa6:	4770      	bx	lr
			bridgeInput = INPUT_1A;
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	4770      	bx	lr
		bridgeInput = INPUT_1A;
 8001aac:	2000      	movs	r0, #0
 8001aae:	4770      	bx	lr
			bridgeInput = INPUT_2A;
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	4770      	bx	lr
 8001ab4:	200028ec 	.word	0x200028ec

08001ab8 <L6206_GetSecondBridgeInputUsedByMotorId>:
* @brief  Get the second PWM input used by a given bidirectionnal motor
* @param motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS
* @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
**********************************************************/
uint8_t L6206_GetSecondBridgeInputUsedByMotorId(uint8_t motorId)
{
 8001ab8:	b510      	push	{r4, lr}
	uint8_t bridgeInput = 0xFF;

	switch (devicePrm.config) {
 8001aba:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b0b      	cmp	r3, #11
 8001ac0:	d859      	bhi.n	8001b76 <L6206_GetSecondBridgeInputUsedByMotorId+0xbe>
 8001ac2:	e8df f003 	tbb	[pc, r3]
 8001ac6:	1706      	.short	0x1706
 8001ac8:	58315822 	.word	0x58315822
 8001acc:	4858583d 	.word	0x4858583d
 8001ad0:	5058      	.short	0x5058
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001ad2:	b938      	cbnz	r0, 8001ae4 <L6206_GetSecondBridgeInputUsedByMotorId+0x2c>
			if (devicePrm.direction[0] == FORWARD) {
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001ad6:	7f1b      	ldrb	r3, [r3, #28]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d001      	beq.n	8001ae0 <L6206_GetSecondBridgeInputUsedByMotorId+0x28>
				bridgeInput = INPUT_2A;
			}else {
				bridgeInput = INPUT_1A;
 8001adc:	4604      	mov	r4, r0
 8001ade:	e017      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
				bridgeInput = INPUT_2A;
 8001ae0:	2401      	movs	r4, #1
 8001ae2:	e015      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
			}
		}else {
			if (devicePrm.direction[1] == FORWARD) {
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001ae6:	7f5b      	ldrb	r3, [r3, #29]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d001      	beq.n	8001af0 <L6206_GetSecondBridgeInputUsedByMotorId+0x38>
				bridgeInput = INPUT_2B;
			}else {
				bridgeInput = INPUT_1B;
 8001aec:	2402      	movs	r4, #2
 8001aee:	e00f      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
				bridgeInput = INPUT_2B;
 8001af0:	2403      	movs	r4, #3
 8001af2:	e00d      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
			}
		}
		break;
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001af4:	b108      	cbz	r0, 8001afa <L6206_GetSecondBridgeInputUsedByMotorId+0x42>
	uint8_t bridgeInput = 0xFF;
 8001af6:	24ff      	movs	r4, #255	; 0xff
 8001af8:	e00a      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
			if (devicePrm.direction[0] == FORWARD) {
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001afc:	7f1b      	ldrb	r3, [r3, #28]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d001      	beq.n	8001b06 <L6206_GetSecondBridgeInputUsedByMotorId+0x4e>
				bridgeInput = INPUT_2A;
			}else {
				bridgeInput = INPUT_1A;
 8001b02:	4604      	mov	r4, r0
 8001b04:	e004      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
				bridgeInput = INPUT_2A;
 8001b06:	2401      	movs	r4, #1
 8001b08:	e002      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
			}
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 2) {
 8001b0a:	2802      	cmp	r0, #2
 8001b0c:	d004      	beq.n	8001b18 <L6206_GetSecondBridgeInputUsedByMotorId+0x60>
	uint8_t bridgeInput = 0xFF;
 8001b0e:	24ff      	movs	r4, #255	; 0xff
		break;
	default:
		bridgeInput = 0XFF;
		break;
	}
	if (bridgeInput == 0XFF) {
 8001b10:	2cff      	cmp	r4, #255	; 0xff
 8001b12:	d032      	beq.n	8001b7a <L6206_GetSecondBridgeInputUsedByMotorId+0xc2>
		L6206_ErrorHandler(L6206_ERROR_2);
	}

	return(bridgeInput);
}
 8001b14:	4620      	mov	r0, r4
 8001b16:	bd10      	pop	{r4, pc}
			if (devicePrm.direction[2] == FORWARD) {
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001b1a:	7f9b      	ldrb	r3, [r3, #30]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d001      	beq.n	8001b24 <L6206_GetSecondBridgeInputUsedByMotorId+0x6c>
				bridgeInput = INPUT_1B;
 8001b20:	4604      	mov	r4, r0
 8001b22:	e7f5      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
				bridgeInput = INPUT_2B;
 8001b24:	2403      	movs	r4, #3
 8001b26:	e7f3      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
		if (motorId == 1) {
 8001b28:	2801      	cmp	r0, #1
 8001b2a:	d001      	beq.n	8001b30 <L6206_GetSecondBridgeInputUsedByMotorId+0x78>
	uint8_t bridgeInput = 0xFF;
 8001b2c:	24ff      	movs	r4, #255	; 0xff
 8001b2e:	e7ef      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
			if (devicePrm.direction[1] == FORWARD) {
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001b32:	7f5b      	ldrb	r3, [r3, #29]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d001      	beq.n	8001b3c <L6206_GetSecondBridgeInputUsedByMotorId+0x84>
				bridgeInput = INPUT_1B;
 8001b38:	2402      	movs	r4, #2
 8001b3a:	e7e9      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
				bridgeInput = INPUT_2B;
 8001b3c:	2403      	movs	r4, #3
 8001b3e:	e7e7      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
		if (motorId == 0) {
 8001b40:	b108      	cbz	r0, 8001b46 <L6206_GetSecondBridgeInputUsedByMotorId+0x8e>
	uint8_t bridgeInput = 0xFF;
 8001b42:	24ff      	movs	r4, #255	; 0xff
 8001b44:	e7e4      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
			if (devicePrm.direction[0] == FORWARD) {
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001b48:	7f1b      	ldrb	r3, [r3, #28]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d001      	beq.n	8001b52 <L6206_GetSecondBridgeInputUsedByMotorId+0x9a>
				bridgeInput = INPUT_1A;
 8001b4e:	4604      	mov	r4, r0
 8001b50:	e7de      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
				bridgeInput = INPUT_2A;
 8001b52:	2401      	movs	r4, #1
 8001b54:	e7dc      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
		if (devicePrm.direction[0] == FORWARD) {
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001b58:	7f1b      	ldrb	r3, [r3, #28]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d001      	beq.n	8001b62 <L6206_GetSecondBridgeInputUsedByMotorId+0xaa>
			bridgeInput = INPUT_1A;
 8001b5e:	2400      	movs	r4, #0
 8001b60:	e7d6      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
			bridgeInput = INPUT_1B;
 8001b62:	2402      	movs	r4, #2
 8001b64:	e7d4      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
		if (devicePrm.direction[0] == FORWARD) {
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001b68:	7f1b      	ldrb	r3, [r3, #28]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d001      	beq.n	8001b72 <L6206_GetSecondBridgeInputUsedByMotorId+0xba>
			bridgeInput = INPUT_1A;
 8001b6e:	2400      	movs	r4, #0
 8001b70:	e7ce      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
			bridgeInput = INPUT_2A;
 8001b72:	2401      	movs	r4, #1
 8001b74:	e7cc      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
		bridgeInput = 0XFF;
 8001b76:	24ff      	movs	r4, #255	; 0xff
 8001b78:	e7ca      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
		L6206_ErrorHandler(L6206_ERROR_2);
 8001b7a:	f248 0002 	movw	r0, #32770	; 0x8002
 8001b7e:	f7ff fd95 	bl	80016ac <L6206_ErrorHandler>
 8001b82:	e7c7      	b.n	8001b14 <L6206_GetSecondBridgeInputUsedByMotorId+0x5c>
 8001b84:	200028ec 	.word	0x200028ec

08001b88 <L6206_IsBidirectionnalMotor>:
* @retval True if motor is bidirectionnal, else false
**********************************************************/
bool L6206_IsBidirectionnalMotor(uint8_t motorId)
{
	bool isBiDir = FALSE;
	switch (devicePrm.config) {
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <L6206_IsBidirectionnalMotor+0x44>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b0b      	cmp	r3, #11
 8001b8e:	d807      	bhi.n	8001ba0 <L6206_IsBidirectionnalMotor+0x18>
 8001b90:	e8df f003 	tbb	[pc, r3]
 8001b94:	060b0813 	.word	0x060b0813
 8001b98:	0608060f 	.word	0x0608060f
 8001b9c:	13061306 	.word	0x13061306
	bool isBiDir = FALSE;
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	4770      	bx	lr
		isBiDir = TRUE;
		break;

	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1B_IN2B__1_BIDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001ba4:	b158      	cbz	r0, 8001bbe <L6206_IsBidirectionnalMotor+0x36>
	bool isBiDir = FALSE;
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	4770      	bx	lr
			isBiDir = TRUE;
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 2) {
 8001baa:	2802      	cmp	r0, #2
 8001bac:	d009      	beq.n	8001bc2 <L6206_IsBidirectionnalMotor+0x3a>
	bool isBiDir = FALSE;
 8001bae:	2000      	movs	r0, #0
 8001bb0:	4770      	bx	lr
			isBiDir = TRUE;
		}
		break;
	case PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 1) {
 8001bb2:	2801      	cmp	r0, #1
 8001bb4:	d007      	beq.n	8001bc6 <L6206_IsBidirectionnalMotor+0x3e>
	bool isBiDir = FALSE;
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	4770      	bx	lr
		isBiDir = TRUE;
 8001bba:	2001      	movs	r0, #1
 8001bbc:	4770      	bx	lr
			isBiDir = TRUE;
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	4770      	bx	lr
			isBiDir = TRUE;
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	4770      	bx	lr
			isBiDir = TRUE;
 8001bc6:	2001      	movs	r0, #1
	default:
		break;
	}

	return(isBiDir);
}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	200028ec 	.word	0x200028ec

08001bd0 <L6206_HardStop>:
{
 8001bd0:	b538      	push	{r3, r4, r5, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <L6206_HardStop+0x54>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <L6206_HardStop+0x58>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	4283      	cmp	r3, r0
 8001bdc:	d316      	bcc.n	8001c0c <L6206_HardStop+0x3c>
 8001bde:	4604      	mov	r4, r0
	}else if (devicePrm.motionState[motorId] != INACTIVE) {
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <L6206_HardStop+0x54>)
 8001be2:	4403      	add	r3, r0
 8001be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d00e      	beq.n	8001c0a <L6206_HardStop+0x3a>
		bridgeInputFirstPWM = L6206_GetBridgeInputUsedByMotorId(motorId);
 8001bec:	f7ff fee8 	bl	80019c0 <L6206_GetBridgeInputUsedByMotorId>
 8001bf0:	4605      	mov	r5, r0
		if (L6206_IsBidirectionnalMotor(motorId)) {
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7ff ffc8 	bl	8001b88 <L6206_IsBidirectionnalMotor>
 8001bf8:	b968      	cbnz	r0, 8001c16 <L6206_HardStop+0x46>
		L6206_Board_PwmStop(bridgeInputFirstPWM);
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	f006 fc72 	bl	80084e4 <L6206_Board_PwmStop>
		devicePrm.motionState[motorId] = INACTIVE;
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <L6206_HardStop+0x54>)
 8001c02:	441c      	add	r4, r3
 8001c04:	2308      	movs	r3, #8
 8001c06:	f884 3020 	strb.w	r3, [r4, #32]
 8001c0a:	bd38      	pop	{r3, r4, r5, pc}
		L6206_ErrorHandler(L6206_ERROR_1);
 8001c0c:	f248 0001 	movw	r0, #32769	; 0x8001
 8001c10:	f7ff fd4c 	bl	80016ac <L6206_ErrorHandler>
 8001c14:	bd38      	pop	{r3, r4, r5, pc}
			bridgeInputSecondPWM = L6206_GetSecondBridgeInputUsedByMotorId(motorId);
 8001c16:	4620      	mov	r0, r4
 8001c18:	f7ff ff4e 	bl	8001ab8 <L6206_GetSecondBridgeInputUsedByMotorId>
			L6206_Board_PwmStop(bridgeInputSecondPWM);
 8001c1c:	f006 fc62 	bl	80084e4 <L6206_Board_PwmStop>
 8001c20:	e7eb      	b.n	8001bfa <L6206_HardStop+0x2a>
 8001c22:	bf00      	nop
 8001c24:	200028ec 	.word	0x200028ec
 8001c28:	08021c8c 	.word	0x08021c8c

08001c2c <L6206_HardHiz>:
{
 8001c2c:	b538      	push	{r3, r4, r5, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001c2e:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <L6206_HardHiz+0x110>)
 8001c30:	781d      	ldrb	r5, [r3, #0]
 8001c32:	4b43      	ldr	r3, [pc, #268]	; (8001d40 <L6206_HardHiz+0x114>)
 8001c34:	5d5b      	ldrb	r3, [r3, r5]
 8001c36:	4283      	cmp	r3, r0
 8001c38:	d311      	bcc.n	8001c5e <L6206_HardHiz+0x32>
 8001c3a:	4604      	mov	r4, r0
		uint8_t bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);
 8001c3c:	f7ff fe6c 	bl	8001918 <L6206_GetBridgeIdUsedByMotorId>
		if (devicePrm.bridgeEnabled[bridgeId] != FALSE) {
 8001c40:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <L6206_HardHiz+0x110>)
 8001c42:	4403      	add	r3, r0
 8001c44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c48:	b303      	cbz	r3, 8001c8c <L6206_HardHiz+0x60>
			switch (devicePrm.config) {
 8001c4a:	3d01      	subs	r5, #1
 8001c4c:	2d09      	cmp	r5, #9
 8001c4e:	d85d      	bhi.n	8001d0c <L6206_HardHiz+0xe0>
 8001c50:	e8df f005 	tbb	[pc, r5]
 8001c54:	5c28170a 	.word	0x5c28170a
 8001c58:	5c485c3c 	.word	0x5c485c3c
 8001c5c:	545c      	.short	0x545c
		L6206_ErrorHandler(L6206_ERROR_1);
 8001c5e:	f248 0001 	movw	r0, #32769	; 0x8001
 8001c62:	f7ff fd23 	bl	80016ac <L6206_ErrorHandler>
 8001c66:	bd38      	pop	{r3, r4, r5, pc}
				if ((motorId > 0) && (devicePrm.motionState[1] == STEADY) && (devicePrm.motionState[2] == STEADY)) {
 8001c68:	2c00      	cmp	r4, #0
 8001c6a:	d051      	beq.n	8001d10 <L6206_HardHiz+0xe4>
 8001c6c:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <L6206_HardHiz+0x110>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c78:	4a32      	ldr	r2, [pc, #200]	; (8001d44 <L6206_HardHiz+0x118>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d04a      	beq.n	8001d14 <L6206_HardHiz+0xe8>
			bool skip = FALSE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e002      	b.n	8001c88 <L6206_HardHiz+0x5c>
				if ((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 8001c82:	2c01      	cmp	r4, #1
 8001c84:	d906      	bls.n	8001c94 <L6206_HardHiz+0x68>
			bool skip = FALSE;
 8001c86:	2300      	movs	r3, #0
			if (skip == FALSE) {
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d053      	beq.n	8001d34 <L6206_HardHiz+0x108>
		L6206_HardStop(motorId);
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7ff ff9f 	bl	8001bd0 <L6206_HardStop>
 8001c92:	bd38      	pop	{r3, r4, r5, pc}
				if ((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 8001c94:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <L6206_HardHiz+0x110>)
 8001c96:	8c1a      	ldrh	r2, [r3, #32]
 8001c98:	f240 3303 	movw	r3, #771	; 0x303
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d03b      	beq.n	8001d18 <L6206_HardHiz+0xec>
			bool skip = FALSE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e7f1      	b.n	8001c88 <L6206_HardHiz+0x5c>
				if (((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) ||
 8001ca4:	2c01      	cmp	r4, #1
 8001ca6:	d909      	bls.n	8001cbc <L6206_HardHiz+0x90>
 8001ca8:	2c01      	cmp	r4, #1
 8001caa:	d937      	bls.n	8001d1c <L6206_HardHiz+0xf0>
				    ((motorId > 1) && (devicePrm.motionState[2] == STEADY) && (devicePrm.motionState[3] == STEADY))) {
 8001cac:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <L6206_HardHiz+0x110>)
 8001cae:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001cb0:	f240 3303 	movw	r3, #771	; 0x303
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d033      	beq.n	8001d20 <L6206_HardHiz+0xf4>
			bool skip = FALSE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e7e5      	b.n	8001c88 <L6206_HardHiz+0x5c>
				if (((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) ||
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <L6206_HardHiz+0x110>)
 8001cbe:	8c1a      	ldrh	r2, [r3, #32]
 8001cc0:	f240 3303 	movw	r3, #771	; 0x303
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d1ef      	bne.n	8001ca8 <L6206_HardHiz+0x7c>
					skip = TRUE;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e7dd      	b.n	8001c88 <L6206_HardHiz+0x5c>
				if ((motorId > 0) && (devicePrm.motionState[1] == STEADY) && (devicePrm.motionState[2] == STEADY)) {
 8001ccc:	b354      	cbz	r4, 8001d24 <L6206_HardHiz+0xf8>
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <L6206_HardHiz+0x110>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001cd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cda:	4a1a      	ldr	r2, [pc, #104]	; (8001d44 <L6206_HardHiz+0x118>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d023      	beq.n	8001d28 <L6206_HardHiz+0xfc>
			bool skip = FALSE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e7d1      	b.n	8001c88 <L6206_HardHiz+0x5c>
				if ((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 8001ce4:	2c01      	cmp	r4, #1
 8001ce6:	d901      	bls.n	8001cec <L6206_HardHiz+0xc0>
			bool skip = FALSE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e7cd      	b.n	8001c88 <L6206_HardHiz+0x5c>
				if ((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <L6206_HardHiz+0x110>)
 8001cee:	8c1a      	ldrh	r2, [r3, #32]
 8001cf0:	f240 3303 	movw	r3, #771	; 0x303
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d019      	beq.n	8001d2c <L6206_HardHiz+0x100>
			bool skip = FALSE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e7c5      	b.n	8001c88 <L6206_HardHiz+0x5c>
				if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <L6206_HardHiz+0x110>)
 8001cfe:	8c1a      	ldrh	r2, [r3, #32]
 8001d00:	f240 3303 	movw	r3, #771	; 0x303
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d013      	beq.n	8001d30 <L6206_HardHiz+0x104>
			bool skip = FALSE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e7bd      	b.n	8001c88 <L6206_HardHiz+0x5c>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e7bb      	b.n	8001c88 <L6206_HardHiz+0x5c>
 8001d10:	2300      	movs	r3, #0
 8001d12:	e7b9      	b.n	8001c88 <L6206_HardHiz+0x5c>
					skip = TRUE;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e7b7      	b.n	8001c88 <L6206_HardHiz+0x5c>
					skip = TRUE;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e7b5      	b.n	8001c88 <L6206_HardHiz+0x5c>
			bool skip = FALSE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e7b3      	b.n	8001c88 <L6206_HardHiz+0x5c>
					skip = TRUE;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e7b1      	b.n	8001c88 <L6206_HardHiz+0x5c>
			bool skip = FALSE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	e7af      	b.n	8001c88 <L6206_HardHiz+0x5c>
					skip = TRUE;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e7ad      	b.n	8001c88 <L6206_HardHiz+0x5c>
					skip = TRUE;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e7ab      	b.n	8001c88 <L6206_HardHiz+0x5c>
					skip = TRUE;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e7a9      	b.n	8001c88 <L6206_HardHiz+0x5c>
				L6206_DisableBridge(bridgeId);
 8001d34:	f7ff fd12 	bl	800175c <L6206_DisableBridge>
 8001d38:	e7a8      	b.n	8001c8c <L6206_HardHiz+0x60>
 8001d3a:	bf00      	nop
 8001d3c:	200028ec 	.word	0x200028ec
 8001d40:	08021c8c 	.word	0x08021c8c
 8001d44:	00030300 	.word	0x00030300

08001d48 <L6206_Run>:
{
 8001d48:	b570      	push	{r4, r5, r6, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <L6206_Run+0xb0>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	4a2b      	ldr	r2, [pc, #172]	; (8001dfc <L6206_Run+0xb4>)
 8001d50:	5cd3      	ldrb	r3, [r2, r3]
 8001d52:	4283      	cmp	r3, r0
 8001d54:	d332      	bcc.n	8001dbc <L6206_Run+0x74>
 8001d56:	4604      	mov	r4, r0
 8001d58:	460d      	mov	r5, r1
	}else if ((devicePrm.motionState[motorId] == INACTIVE) ||
 8001d5a:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <L6206_Run+0xb0>)
 8001d5c:	4403      	add	r3, r0
 8001d5e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001d62:	2a08      	cmp	r2, #8
 8001d64:	d004      	beq.n	8001d70 <L6206_Run+0x28>
		  (devicePrm.direction[motorId] != direction)) {
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <L6206_Run+0xb0>)
 8001d68:	4403      	add	r3, r0
 8001d6a:	7f1b      	ldrb	r3, [r3, #28]
	}else if ((devicePrm.motionState[motorId] == INACTIVE) ||
 8001d6c:	428b      	cmp	r3, r1
 8001d6e:	d024      	beq.n	8001dba <L6206_Run+0x72>
		if (devicePrm.motionState[motorId] != INACTIVE) {
 8001d70:	2a08      	cmp	r2, #8
 8001d72:	d002      	beq.n	8001d7a <L6206_Run+0x32>
			L6206_HardStop(motorId);
 8001d74:	4620      	mov	r0, r4
 8001d76:	f7ff ff2b 	bl	8001bd0 <L6206_HardStop>
		devicePrm.direction[motorId] = direction;
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <L6206_Run+0xb0>)
 8001d7c:	4423      	add	r3, r4
 8001d7e:	771d      	strb	r5, [r3, #28]
		devicePrm.motionState[motorId] = STEADY;
 8001d80:	2203      	movs	r2, #3
 8001d82:	f883 2020 	strb.w	r2, [r3, #32]
		bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);
 8001d86:	4620      	mov	r0, r4
 8001d88:	f7ff fdc6 	bl	8001918 <L6206_GetBridgeIdUsedByMotorId>
 8001d8c:	4606      	mov	r6, r0
		bridgeInput = L6206_GetBridgeInputUsedByMotorId(motorId);
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f7ff fe16 	bl	80019c0 <L6206_GetBridgeInputUsedByMotorId>
 8001d94:	4605      	mov	r5, r0
		L6206_EnableBridge(bridgeId);
 8001d96:	4630      	mov	r0, r6
 8001d98:	f7ff fd00 	bl	800179c <L6206_EnableBridge>
		if (L6206_IsBidirectionnalMotor(motorId)) {
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f7ff fef3 	bl	8001b88 <L6206_IsBidirectionnalMotor>
 8001da2:	b980      	cbnz	r0, 8001dc6 <L6206_Run+0x7e>
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <L6206_Run+0xb0>)
 8001da6:	3408      	adds	r4, #8
 8001da8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8001dac:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001db0:	7922      	ldrb	r2, [r4, #4]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	4628      	mov	r0, r5
 8001db6:	f006 fb4b 	bl	8008450 <L6206_Board_PwmSetFreq>
 8001dba:	bd70      	pop	{r4, r5, r6, pc}
		L6206_ErrorHandler(L6206_ERROR_1);
 8001dbc:	f248 0001 	movw	r0, #32769	; 0x8001
 8001dc0:	f7ff fc74 	bl	80016ac <L6206_ErrorHandler>
 8001dc4:	bd70      	pop	{r4, r5, r6, pc}
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 8001dc6:	4e0c      	ldr	r6, [pc, #48]	; (8001df8 <L6206_Run+0xb0>)
 8001dc8:	f104 0308 	add.w	r3, r4, #8
 8001dcc:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8001dd0:	889a      	ldrh	r2, [r3, #4]
 8001dd2:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001dd6:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	6859      	ldr	r1, [r3, #4]
 8001dde:	4628      	mov	r0, r5
 8001de0:	f006 fb36 	bl	8008450 <L6206_Board_PwmSetFreq>
			bridgeInput = L6206_GetSecondBridgeInputUsedByMotorId(motorId);
 8001de4:	4620      	mov	r0, r4
 8001de6:	f7ff fe67 	bl	8001ab8 <L6206_GetSecondBridgeInputUsedByMotorId>
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], 100);
 8001dea:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8001dee:	2264      	movs	r2, #100	; 0x64
 8001df0:	6871      	ldr	r1, [r6, #4]
 8001df2:	f006 fb2d 	bl	8008450 <L6206_Board_PwmSetFreq>
 8001df6:	bd70      	pop	{r4, r5, r6, pc}
 8001df8:	200028ec 	.word	0x200028ec
 8001dfc:	08021c8c 	.word	0x08021c8c

08001e00 <L6206_SetMaxSpeed>:
{
 8001e00:	b570      	push	{r4, r5, r6, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <L6206_SetMaxSpeed+0x74>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <L6206_SetMaxSpeed+0x78>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
 8001e0a:	4283      	cmp	r3, r0
 8001e0c:	d31d      	bcc.n	8001e4a <L6206_SetMaxSpeed+0x4a>
 8001e0e:	4604      	mov	r4, r0
 8001e10:	460d      	mov	r5, r1
		devicePrm.speed[motorId] = newMaxSpeed;
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <L6206_SetMaxSpeed+0x74>)
 8001e14:	f100 0208 	add.w	r2, r0, #8
 8001e18:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8001e1c:	8091      	strh	r1, [r2, #4]
		if (devicePrm.motionState[motorId] != INACTIVE) {
 8001e1e:	4403      	add	r3, r0
 8001e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d022      	beq.n	8001e6e <L6206_SetMaxSpeed+0x6e>
			bridgeInput = L6206_GetBridgeInputUsedByMotorId(motorId);
 8001e28:	f7ff fdca 	bl	80019c0 <L6206_GetBridgeInputUsedByMotorId>
 8001e2c:	4606      	mov	r6, r0
			if (L6206_IsBidirectionnalMotor(motorId)) {
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f7ff feaa 	bl	8001b88 <L6206_IsBidirectionnalMotor>
 8001e34:	b978      	cbnz	r0, 8001e56 <L6206_SetMaxSpeed+0x56>
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <L6206_SetMaxSpeed+0x74>)
 8001e38:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001e3c:	b2ea      	uxtb	r2, r5
 8001e3e:	6859      	ldr	r1, [r3, #4]
 8001e40:	4630      	mov	r0, r6
 8001e42:	f006 fb05 	bl	8008450 <L6206_Board_PwmSetFreq>
		cmdExecuted = TRUE;
 8001e46:	2001      	movs	r0, #1
 8001e48:	bd70      	pop	{r4, r5, r6, pc}
		L6206_ErrorHandler(L6206_ERROR_1);
 8001e4a:	f248 0001 	movw	r0, #32769	; 0x8001
 8001e4e:	f7ff fc2d 	bl	80016ac <L6206_ErrorHandler>
	bool cmdExecuted = FALSE;
 8001e52:	2000      	movs	r0, #0
 8001e54:	bd70      	pop	{r4, r5, r6, pc}
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 8001e56:	f1c5 0264 	rsb	r2, r5, #100	; 0x64
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <L6206_SetMaxSpeed+0x74>)
 8001e5c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	6859      	ldr	r1, [r3, #4]
 8001e64:	4630      	mov	r0, r6
 8001e66:	f006 faf3 	bl	8008450 <L6206_Board_PwmSetFreq>
		cmdExecuted = TRUE;
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	bd70      	pop	{r4, r5, r6, pc}
 8001e6e:	2001      	movs	r0, #1
}
 8001e70:	bd70      	pop	{r4, r5, r6, pc}
 8001e72:	bf00      	nop
 8001e74:	200028ec 	.word	0x200028ec
 8001e78:	08021c8c 	.word	0x08021c8c

08001e7c <L6206_SetBridgeInputPwmFreq>:
{
 8001e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e80:	4680      	mov	r8, r0
 8001e82:	460f      	mov	r7, r1
	if (newFreq > L6206_MAX_PWM_FREQ) {
 8001e84:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <L6206_SetBridgeInputPwmFreq+0x9c>)
 8001e86:	4299      	cmp	r1, r3
 8001e88:	d900      	bls.n	8001e8c <L6206_SetBridgeInputPwmFreq+0x10>
		newFreq = L6206_MAX_PWM_FREQ;
 8001e8a:	461f      	mov	r7, r3
	for (loop = 0; loop < 2; loop++) {
 8001e8c:	2500      	movs	r5, #0
 8001e8e:	e013      	b.n	8001eb8 <L6206_SetBridgeInputPwmFreq+0x3c>
					L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], 100);
 8001e90:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <L6206_SetBridgeInputPwmFreq+0xa0>)
 8001e92:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001e96:	2264      	movs	r2, #100	; 0x64
 8001e98:	6859      	ldr	r1, [r3, #4]
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f006 fad8 	bl	8008450 <L6206_Board_PwmSetFreq>
 8001ea0:	e008      	b.n	8001eb4 <L6206_SetBridgeInputPwmFreq+0x38>
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 8001ea2:	3608      	adds	r6, #8
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <L6206_SetBridgeInputPwmFreq+0xa0>)
 8001ea6:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 8001eaa:	7932      	ldrb	r2, [r6, #4]
 8001eac:	4639      	mov	r1, r7
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f006 face 	bl	8008450 <L6206_Board_PwmSetFreq>
	for (loop = 0; loop < 2; loop++) {
 8001eb4:	3501      	adds	r5, #1
 8001eb6:	b2ed      	uxtb	r5, r5
 8001eb8:	2d01      	cmp	r5, #1
 8001eba:	d82a      	bhi.n	8001f12 <L6206_SetBridgeInputPwmFreq+0x96>
		uint8_t bridgeInput = (bridgeId << 1) + loop;
 8001ebc:	ea4f 0448 	mov.w	r4, r8, lsl #1
 8001ec0:	b2e4      	uxtb	r4, r4
 8001ec2:	442c      	add	r4, r5
 8001ec4:	b2e4      	uxtb	r4, r4
		devicePrm.pwmFreq[bridgeInput] = newFreq;
 8001ec6:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8001f1c <L6206_SetBridgeInputPwmFreq+0xa0>
 8001eca:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8001ece:	605f      	str	r7, [r3, #4]
		motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7ff fd3b 	bl	800194c <L6206_GetMotorIdUsingbridgeInput>
 8001ed6:	4606      	mov	r6, r0
		if (devicePrm.motionState[motorId] != INACTIVE) {
 8001ed8:	4481      	add	r9, r0
 8001eda:	f899 3020 	ldrb.w	r3, [r9, #32]
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d0e8      	beq.n	8001eb4 <L6206_SetBridgeInputPwmFreq+0x38>
			if (L6206_IsBidirectionnalMotor(motorId)) {
 8001ee2:	f7ff fe51 	bl	8001b88 <L6206_IsBidirectionnalMotor>
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d0db      	beq.n	8001ea2 <L6206_SetBridgeInputPwmFreq+0x26>
				if (bridgeInput != L6206_GetSecondBridgeInputUsedByMotorId(motorId)) {
 8001eea:	4630      	mov	r0, r6
 8001eec:	f7ff fde4 	bl	8001ab8 <L6206_GetSecondBridgeInputUsedByMotorId>
 8001ef0:	4284      	cmp	r4, r0
 8001ef2:	d0cd      	beq.n	8001e90 <L6206_SetBridgeInputPwmFreq+0x14>
					L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <L6206_SetBridgeInputPwmFreq+0xa0>)
 8001ef6:	3608      	adds	r6, #8
 8001ef8:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 8001efc:	88b2      	ldrh	r2, [r6, #4]
 8001efe:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001f02:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	6859      	ldr	r1, [r3, #4]
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f006 faa0 	bl	8008450 <L6206_Board_PwmSetFreq>
 8001f10:	e7d0      	b.n	8001eb4 <L6206_SetBridgeInputPwmFreq+0x38>
}
 8001f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f16:	bf00      	nop
 8001f18:	000186a0 	.word	0x000186a0
 8001f1c:	200028ec 	.word	0x200028ec

08001f20 <L6206_SetDeviceParamsToPredefinedValues>:
* @brief  Sets the parameters of the device to predefined values
* from l6206_target_config.h
* @retval None
**********************************************************/
void L6206_SetDeviceParamsToPredefinedValues(void)
{
 8001f20:	b510      	push	{r4, lr}
	uint32_t i;

	memset(&devicePrm, 0, sizeof(devicePrm));
 8001f22:	4c14      	ldr	r4, [pc, #80]	; (8001f74 <L6206_SetDeviceParamsToPredefinedValues+0x54>)
 8001f24:	2228      	movs	r2, #40	; 0x28
 8001f26:	2100      	movs	r1, #0
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f01c ff24 	bl	801ed76 <memset>

	devicePrm.config = L6206_CONF_PARAM_PARALLE_BRIDGES;

	devicePrm.pwmFreq[INPUT_1A] = L6206_CONF_PARAM_FREQ_PWM1A;
 8001f2e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001f32:	6063      	str	r3, [r4, #4]
	devicePrm.pwmFreq[INPUT_2A] = L6206_CONF_PARAM_FREQ_PWM2A;
 8001f34:	60a3      	str	r3, [r4, #8]
	devicePrm.pwmFreq[INPUT_1B] = L6206_CONF_PARAM_FREQ_PWM1B;
 8001f36:	60e3      	str	r3, [r4, #12]
	devicePrm.pwmFreq[INPUT_2B] = L6206_CONF_PARAM_FREQ_PWM2B;
 8001f38:	6123      	str	r3, [r4, #16]

	for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++) {
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	e00d      	b.n	8001f5a <L6206_SetDeviceParamsToPredefinedValues+0x3a>
		devicePrm.speed[i] = 100;
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <L6206_SetDeviceParamsToPredefinedValues+0x54>)
 8001f40:	f102 0108 	add.w	r1, r2, #8
 8001f44:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8001f48:	2064      	movs	r0, #100	; 0x64
 8001f4a:	8088      	strh	r0, [r1, #4]
		devicePrm.direction[i] = FORWARD;
 8001f4c:	4413      	add	r3, r2
 8001f4e:	2101      	movs	r1, #1
 8001f50:	7719      	strb	r1, [r3, #28]
		devicePrm.motionState[i] = INACTIVE;
 8001f52:	2108      	movs	r1, #8
 8001f54:	f883 1020 	strb.w	r1, [r3, #32]
	for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++) {
 8001f58:	3201      	adds	r2, #1
 8001f5a:	2a03      	cmp	r2, #3
 8001f5c:	d9ef      	bls.n	8001f3e <L6206_SetDeviceParamsToPredefinedValues+0x1e>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e005      	b.n	8001f6e <L6206_SetDeviceParamsToPredefinedValues+0x4e>
	}
	for (i = 0; i < L6206_NB_MAX_BRIDGES; i++) {
		devicePrm.bridgeEnabled[i] = FALSE;
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <L6206_SetDeviceParamsToPredefinedValues+0x54>)
 8001f64:	441a      	add	r2, r3
 8001f66:	2100      	movs	r1, #0
 8001f68:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
	for (i = 0; i < L6206_NB_MAX_BRIDGES; i++) {
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d9f7      	bls.n	8001f62 <L6206_SetDeviceParamsToPredefinedValues+0x42>
	}
}
 8001f72:	bd10      	pop	{r4, pc}
 8001f74:	200028ec 	.word	0x200028ec

08001f78 <L6206_SetDeviceParamsToGivenValues>:
* @param initDevicePrm structure containing values to initialize the device
* parameters
* @retval None
**********************************************************/
void L6206_SetDeviceParamsToGivenValues(L6206_InitTypeDef* initDevicePrm)
{
 8001f78:	b4f0      	push	{r4, r5, r6, r7}
	memcpy(&devicePrm, initDevicePrm, sizeof(devicePrm));
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	4e08      	ldr	r6, [pc, #32]	; (8001fa0 <L6206_SetDeviceParamsToGivenValues+0x28>)
 8001f7e:	f100 0720 	add.w	r7, r0, #32
 8001f82:	4635      	mov	r5, r6
 8001f84:	6820      	ldr	r0, [r4, #0]
 8001f86:	6861      	ldr	r1, [r4, #4]
 8001f88:	68a2      	ldr	r2, [r4, #8]
 8001f8a:	68e3      	ldr	r3, [r4, #12]
 8001f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f8e:	3410      	adds	r4, #16
 8001f90:	462e      	mov	r6, r5
 8001f92:	42bc      	cmp	r4, r7
 8001f94:	d1f5      	bne.n	8001f82 <L6206_SetDeviceParamsToGivenValues+0xa>
 8001f96:	6820      	ldr	r0, [r4, #0]
 8001f98:	6861      	ldr	r1, [r4, #4]
 8001f9a:	c603      	stmia	r6!, {r0, r1}
}
 8001f9c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	200028ec 	.word	0x200028ec

08001fa4 <L6206_Init>:
{
 8001fa4:	b510      	push	{r4, lr}
 8001fa6:	4604      	mov	r4, r0
	l6206DriverInstance++;
 8001fa8:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <L6206_Init+0x28>)
 8001faa:	8813      	ldrh	r3, [r2, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	8013      	strh	r3, [r2, #0]
	L6206_Board_GpioInit();
 8001fb0:	f006 f97c 	bl	80082ac <L6206_Board_GpioInit>
	if (init == NULL) {
 8001fb4:	b13c      	cbz	r4, 8001fc6 <L6206_Init+0x22>
		L6206_SetDeviceParamsToGivenValues((L6206_InitTypeDef*)init);
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f7ff ffde 	bl	8001f78 <L6206_SetDeviceParamsToGivenValues>
	L6206_SetDualFullBridgeConfig(devicePrm.config);
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <L6206_Init+0x2c>)
 8001fbe:	7818      	ldrb	r0, [r3, #0]
 8001fc0:	f7ff fc3a 	bl	8001838 <L6206_SetDualFullBridgeConfig>
 8001fc4:	bd10      	pop	{r4, pc}
		L6206_SetDeviceParamsToPredefinedValues();
 8001fc6:	f7ff ffab 	bl	8001f20 <L6206_SetDeviceParamsToPredefinedValues>
 8001fca:	e7f7      	b.n	8001fbc <L6206_Init+0x18>
 8001fcc:	2000248a 	.word	0x2000248a
 8001fd0:	200028ec 	.word	0x200028ec

08001fd4 <LPS22HB_GetCapabilities>:
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
	/* Prevent unused argument(s) compilation warning */
	(void)(pObj);

	Capabilities->Humidity = 0;
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	7088      	strb	r0, [r1, #2]
	Capabilities->Pressure = 1;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	704b      	strb	r3, [r1, #1]
	Capabilities->Temperature = 1;
 8001fdc:	700b      	strb	r3, [r1, #0]
	Capabilities->LowPower = 0;
 8001fde:	70c8      	strb	r0, [r1, #3]
	Capabilities->HumMaxOdr = 0.0f;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	604b      	str	r3, [r1, #4]
	Capabilities->TempMaxOdr = 75.0f;
 8001fe4:	4b01      	ldr	r3, [pc, #4]	; (8001fec <LPS22HB_GetCapabilities+0x18>)
 8001fe6:	608b      	str	r3, [r1, #8]
	Capabilities->PressMaxOdr = 75.0f;
 8001fe8:	60cb      	str	r3, [r1, #12]
	return LPS22HB_OK;
}
 8001fea:	4770      	bx	lr
 8001fec:	42960000 	.word	0x42960000

08001ff0 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
	pObj->last_odr = (Odr <= 1.0f) ? LPS22HB_ODR_1_Hz
			 : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001ff0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001ff4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffc:	d918      	bls.n	8002030 <LPS22HB_SetOutputDataRate_When_Disabled+0x40>
 8001ffe:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002002:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200a:	d913      	bls.n	8002034 <LPS22HB_SetOutputDataRate_When_Disabled+0x44>
 800200c:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8002010:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002018:	d911      	bls.n	800203e <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 800201a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8002044 <LPS22HB_SetOutputDataRate_When_Disabled+0x54>
 800201e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002026:	d901      	bls.n	800202c <LPS22HB_SetOutputDataRate_When_Disabled+0x3c>
 8002028:	2305      	movs	r3, #5
 800202a:	e004      	b.n	8002036 <LPS22HB_SetOutputDataRate_When_Disabled+0x46>
 800202c:	2304      	movs	r3, #4
 800202e:	e002      	b.n	8002036 <LPS22HB_SetOutputDataRate_When_Disabled+0x46>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <LPS22HB_SetOutputDataRate_When_Disabled+0x46>
 8002034:	2302      	movs	r3, #2
	pObj->last_odr = (Odr <= 1.0f) ? LPS22HB_ODR_1_Hz
 8002036:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
			 : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
			 : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
			 :                  LPS22HB_ODR_75_Hz;

	return LPS22HB_OK;
}
 800203a:	2000      	movs	r0, #0
 800203c:	4770      	bx	lr
			 : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 800203e:	2303      	movs	r3, #3
 8002040:	e7f9      	b.n	8002036 <LPS22HB_SetOutputDataRate_When_Disabled+0x46>
 8002042:	bf00      	nop
 8002044:	42480000 	.word	0x42480000

08002048 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800204c:	4606      	mov	r6, r0
 800204e:	4688      	mov	r8, r1
 8002050:	4691      	mov	r9, r2
 8002052:	461f      	mov	r7, r3
	uint16_t i;
	int32_t ret = LPS22HB_OK;
	LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;

	if (pObj->IO.BusType == LPS22HB_I2C_BUS) { /* I2C */
 8002054:	6883      	ldr	r3, [r0, #8]
 8002056:	b98b      	cbnz	r3, 800207c <ReadRegWrap+0x34>
 8002058:	2300      	movs	r3, #0
 800205a:	461c      	mov	r4, r3
		for (i = 0; i < Length; i++) {
 800205c:	42bc      	cmp	r4, r7
 800205e:	d215      	bcs.n	800208c <ReadRegWrap+0x44>
			ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8002060:	6975      	ldr	r5, [r6, #20]
 8002062:	eb04 0108 	add.w	r1, r4, r8
 8002066:	2301      	movs	r3, #1
 8002068:	eb09 0204 	add.w	r2, r9, r4
 800206c:	b289      	uxth	r1, r1
 800206e:	7b30      	ldrb	r0, [r6, #12]
 8002070:	47a8      	blx	r5
			if (ret != LPS22HB_OK) {
 8002072:	4603      	mov	r3, r0
 8002074:	b940      	cbnz	r0, 8002088 <ReadRegWrap+0x40>
		for (i = 0; i < Length; i++) {
 8002076:	3401      	adds	r4, #1
 8002078:	b2a4      	uxth	r4, r4
 800207a:	e7ef      	b.n	800205c <ReadRegWrap+0x14>
			}
		}

		return ret;
	}else  {/* SPI 4-Wires or SPI 3-Wires */
		return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800207c:	6944      	ldr	r4, [r0, #20]
 800207e:	463b      	mov	r3, r7
 8002080:	7b00      	ldrb	r0, [r0, #12]
 8002082:	47a0      	blx	r4
 8002084:	4603      	mov	r3, r0
 8002086:	e001      	b.n	800208c <ReadRegWrap+0x44>
				return LPS22HB_ERROR;
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800208c:	4618      	mov	r0, r3
 800208e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002092 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002092:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002096:	4605      	mov	r5, r0
 8002098:	4688      	mov	r8, r1
 800209a:	4691      	mov	r9, r2
 800209c:	461f      	mov	r7, r3
	uint16_t i;
	int32_t ret = LPS22HB_OK;
	LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;

	if (pObj->IO.BusType == LPS22HB_I2C_BUS) { /* I2C */
 800209e:	6883      	ldr	r3, [r0, #8]
 80020a0:	b97b      	cbnz	r3, 80020c2 <WriteRegWrap+0x30>
 80020a2:	2300      	movs	r3, #0
 80020a4:	461c      	mov	r4, r3
		for (i = 0; i < Length; i++) {
 80020a6:	42bc      	cmp	r4, r7
 80020a8:	d213      	bcs.n	80020d2 <WriteRegWrap+0x40>
			ret = pObj->IO.WriteReg(pObj->IO.Address, Reg, &pData[i], 1);
 80020aa:	692e      	ldr	r6, [r5, #16]
 80020ac:	2301      	movs	r3, #1
 80020ae:	eb09 0204 	add.w	r2, r9, r4
 80020b2:	4641      	mov	r1, r8
 80020b4:	7b28      	ldrb	r0, [r5, #12]
 80020b6:	47b0      	blx	r6
			if (ret != LPS22HB_OK) {
 80020b8:	4603      	mov	r3, r0
 80020ba:	b940      	cbnz	r0, 80020ce <WriteRegWrap+0x3c>
		for (i = 0; i < Length; i++) {
 80020bc:	3401      	adds	r4, #1
 80020be:	b2a4      	uxth	r4, r4
 80020c0:	e7f1      	b.n	80020a6 <WriteRegWrap+0x14>
			}
		}

		return ret;
	}else  {/* SPI 4-Wires or SPI 3-Wires */
		return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80020c2:	6904      	ldr	r4, [r0, #16]
 80020c4:	463b      	mov	r3, r7
 80020c6:	7b00      	ldrb	r0, [r0, #12]
 80020c8:	47a0      	blx	r4
 80020ca:	4603      	mov	r3, r0
 80020cc:	e001      	b.n	80020d2 <WriteRegWrap+0x40>
				return LPS22HB_ERROR;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080020d8 <LPS22HB_PRESS_Enable>:
	if (pObj->press_is_enabled == 1U) {
 80020d8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d00d      	beq.n	80020fc <LPS22HB_PRESS_Enable+0x24>
{
 80020e0:	b510      	push	{r4, lr}
 80020e2:	4604      	mov	r4, r0
	if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK) {
 80020e4:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 80020e8:	301c      	adds	r0, #28
 80020ea:	f000 fa3d 	bl	8002568 <lps22hb_data_rate_set>
 80020ee:	4603      	mov	r3, r0
 80020f0:	b938      	cbnz	r0, 8002102 <LPS22HB_PRESS_Enable+0x2a>
	pObj->press_is_enabled = 1;
 80020f2:	2201      	movs	r2, #1
 80020f4:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd10      	pop	{r4, pc}
		return LPS22HB_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	4770      	bx	lr
		return LPS22HB_ERROR;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	e7f7      	b.n	80020f8 <LPS22HB_PRESS_Enable+0x20>

08002108 <LPS22HB_TEMP_Enable>:
	if (pObj->temp_is_enabled == 1U) {
 8002108:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800210c:	2b01      	cmp	r3, #1
 800210e:	d00d      	beq.n	800212c <LPS22HB_TEMP_Enable+0x24>
{
 8002110:	b510      	push	{r4, lr}
 8002112:	4604      	mov	r4, r0
	if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK) {
 8002114:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8002118:	301c      	adds	r0, #28
 800211a:	f000 fa25 	bl	8002568 <lps22hb_data_rate_set>
 800211e:	4603      	mov	r3, r0
 8002120:	b938      	cbnz	r0, 8002132 <LPS22HB_TEMP_Enable+0x2a>
	pObj->temp_is_enabled = 1;
 8002122:	2201      	movs	r2, #1
 8002124:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd10      	pop	{r4, pc}
		return LPS22HB_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	4770      	bx	lr
		return LPS22HB_ERROR;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	e7f7      	b.n	8002128 <LPS22HB_TEMP_Enable+0x20>

08002138 <LPS22HB_Initialize>:
{
 8002138:	b570      	push	{r4, r5, r6, lr}
 800213a:	4605      	mov	r5, r0
	if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK) {
 800213c:	f100 041c 	add.w	r4, r0, #28
 8002140:	2101      	movs	r1, #1
 8002142:	4620      	mov	r0, r4
 8002144:	f000 fa6a 	bl	800261c <lps22hb_low_power_set>
 8002148:	bb20      	cbnz	r0, 8002194 <LPS22HB_Initialize+0x5c>
	if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK) {
 800214a:	2100      	movs	r1, #0
 800214c:	4620      	mov	r0, r4
 800214e:	f000 fa0b 	bl	8002568 <lps22hb_data_rate_set>
 8002152:	bb10      	cbnz	r0, 800219a <LPS22HB_Initialize+0x62>
	if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK) {
 8002154:	2102      	movs	r1, #2
 8002156:	4620      	mov	r0, r4
 8002158:	f000 f9ea 	bl	8002530 <lps22hb_low_pass_filter_mode_set>
 800215c:	bb00      	cbnz	r0, 80021a0 <LPS22HB_Initialize+0x68>
	if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK) {
 800215e:	2101      	movs	r1, #1
 8002160:	4620      	mov	r0, r4
 8002162:	f000 f9c9 	bl	80024f8 <lps22hb_block_data_update_set>
 8002166:	4606      	mov	r6, r0
 8002168:	b9e8      	cbnz	r0, 80021a6 <LPS22HB_Initialize+0x6e>
	if (pObj->IO.BusType == LPS22HB_I2C_BUS) { /* I2C */
 800216a:	68ab      	ldr	r3, [r5, #8]
 800216c:	b94b      	cbnz	r3, 8002182 <LPS22HB_Initialize+0x4a>
		if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK) {
 800216e:	2100      	movs	r1, #0
 8002170:	4620      	mov	r0, r4
 8002172:	f000 fa6f 	bl	8002654 <lps22hb_auto_add_inc_set>
 8002176:	b9c8      	cbnz	r0, 80021ac <LPS22HB_Initialize+0x74>
	pObj->last_odr = LPS22HB_ODR_25_Hz;
 8002178:	2303      	movs	r3, #3
 800217a:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
}
 800217e:	4630      	mov	r0, r6
 8002180:	bd70      	pop	{r4, r5, r6, pc}
		if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK) {
 8002182:	2101      	movs	r1, #1
 8002184:	4620      	mov	r0, r4
 8002186:	f000 fa65 	bl	8002654 <lps22hb_auto_add_inc_set>
 800218a:	2800      	cmp	r0, #0
 800218c:	d0f4      	beq.n	8002178 <LPS22HB_Initialize+0x40>
			return LPS22HB_ERROR;
 800218e:	f04f 36ff 	mov.w	r6, #4294967295
 8002192:	e7f4      	b.n	800217e <LPS22HB_Initialize+0x46>
		return LPS22HB_ERROR;
 8002194:	f04f 36ff 	mov.w	r6, #4294967295
 8002198:	e7f1      	b.n	800217e <LPS22HB_Initialize+0x46>
		return LPS22HB_ERROR;
 800219a:	f04f 36ff 	mov.w	r6, #4294967295
 800219e:	e7ee      	b.n	800217e <LPS22HB_Initialize+0x46>
		return LPS22HB_ERROR;
 80021a0:	f04f 36ff 	mov.w	r6, #4294967295
 80021a4:	e7eb      	b.n	800217e <LPS22HB_Initialize+0x46>
		return LPS22HB_ERROR;
 80021a6:	f04f 36ff 	mov.w	r6, #4294967295
 80021aa:	e7e8      	b.n	800217e <LPS22HB_Initialize+0x46>
			return LPS22HB_ERROR;
 80021ac:	f04f 36ff 	mov.w	r6, #4294967295
 80021b0:	e7e5      	b.n	800217e <LPS22HB_Initialize+0x46>

080021b2 <LPS22HB_Init>:
{
 80021b2:	b510      	push	{r4, lr}
 80021b4:	4604      	mov	r4, r0
	if (pObj->is_initialized == 0U) {
 80021b6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80021ba:	b123      	cbz	r3, 80021c6 <LPS22HB_Init+0x14>
	pObj->is_initialized = 1U;
 80021bc:	2301      	movs	r3, #1
 80021be:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	return LPS22HB_OK;
 80021c2:	2000      	movs	r0, #0
 80021c4:	bd10      	pop	{r4, pc}
		if (LPS22HB_Initialize(pObj) != LPS22HB_OK) {
 80021c6:	f7ff ffb7 	bl	8002138 <LPS22HB_Initialize>
 80021ca:	2800      	cmp	r0, #0
 80021cc:	d0f6      	beq.n	80021bc <LPS22HB_Init+0xa>
			return LPS22HB_ERROR;
 80021ce:	f04f 30ff 	mov.w	r0, #4294967295
}
 80021d2:	bd10      	pop	{r4, pc}

080021d4 <LPS22HB_ReadID>:
{
 80021d4:	b508      	push	{r3, lr}
	if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK) {
 80021d6:	301c      	adds	r0, #28
 80021d8:	f000 fa19 	bl	800260e <lps22hb_device_id_get>
 80021dc:	4603      	mov	r3, r0
 80021de:	b908      	cbnz	r0, 80021e4 <LPS22HB_ReadID+0x10>
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd08      	pop	{r3, pc}
		return LPS22HB_ERROR;
 80021e4:	f04f 33ff 	mov.w	r3, #4294967295
 80021e8:	e7fa      	b.n	80021e0 <LPS22HB_ReadID+0xc>

080021ea <LPS22HB_PRESS_Disable>:
{
 80021ea:	b538      	push	{r3, r4, r5, lr}
	if (pObj->press_is_enabled == 0U) {
 80021ec:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80021f0:	b1c3      	cbz	r3, 8002224 <LPS22HB_PRESS_Disable+0x3a>
 80021f2:	4604      	mov	r4, r0
	if (pObj->temp_is_enabled == 0U) {
 80021f4:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80021f8:	b11b      	cbz	r3, 8002202 <LPS22HB_PRESS_Disable+0x18>
	pObj->press_is_enabled = 0;
 80021fa:	2000      	movs	r0, #0
 80021fc:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	return LPS22HB_OK;
 8002200:	bd38      	pop	{r3, r4, r5, pc}
		if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK) {
 8002202:	f100 051c 	add.w	r5, r0, #28
 8002206:	f100 012b 	add.w	r1, r0, #43	; 0x2b
 800220a:	4628      	mov	r0, r5
 800220c:	f000 f9c8 	bl	80025a0 <lps22hb_data_rate_get>
 8002210:	b950      	cbnz	r0, 8002228 <LPS22HB_PRESS_Disable+0x3e>
		if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK) {
 8002212:	2100      	movs	r1, #0
 8002214:	4628      	mov	r0, r5
 8002216:	f000 f9a7 	bl	8002568 <lps22hb_data_rate_set>
 800221a:	2800      	cmp	r0, #0
 800221c:	d0ed      	beq.n	80021fa <LPS22HB_PRESS_Disable+0x10>
			return LPS22HB_ERROR;
 800221e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002222:	bd38      	pop	{r3, r4, r5, pc}
		return LPS22HB_OK;
 8002224:	2000      	movs	r0, #0
 8002226:	bd38      	pop	{r3, r4, r5, pc}
			return LPS22HB_ERROR;
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	bd38      	pop	{r3, r4, r5, pc}
	...

08002230 <LPS22HB_GetOutputDataRate>:
{
 8002230:	b510      	push	{r4, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	460c      	mov	r4, r1
	if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK) {
 8002236:	f10d 0107 	add.w	r1, sp, #7
 800223a:	301c      	adds	r0, #28
 800223c:	f000 f9b0 	bl	80025a0 <lps22hb_data_rate_get>
 8002240:	b9f0      	cbnz	r0, 8002280 <LPS22HB_GetOutputDataRate+0x50>
 8002242:	4602      	mov	r2, r0
	switch (odr_low_level) {
 8002244:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002248:	2b05      	cmp	r3, #5
 800224a:	d81c      	bhi.n	8002286 <LPS22HB_GetOutputDataRate+0x56>
 800224c:	e8df f003 	tbb	[pc, r3]
 8002250:	0f0c0803 	.word	0x0f0c0803
 8002254:	1512      	.short	0x1512
		*Odr = 0.0f;
 8002256:	2300      	movs	r3, #0
 8002258:	6023      	str	r3, [r4, #0]
}
 800225a:	4610      	mov	r0, r2
 800225c:	b002      	add	sp, #8
 800225e:	bd10      	pop	{r4, pc}
		*Odr = 1.0f;
 8002260:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002264:	6023      	str	r3, [r4, #0]
		break;
 8002266:	e7f8      	b.n	800225a <LPS22HB_GetOutputDataRate+0x2a>
		*Odr = 10.0f;
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <LPS22HB_GetOutputDataRate+0x5c>)
 800226a:	6023      	str	r3, [r4, #0]
		break;
 800226c:	e7f5      	b.n	800225a <LPS22HB_GetOutputDataRate+0x2a>
		*Odr = 25.0f;
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <LPS22HB_GetOutputDataRate+0x60>)
 8002270:	6023      	str	r3, [r4, #0]
		break;
 8002272:	e7f2      	b.n	800225a <LPS22HB_GetOutputDataRate+0x2a>
		*Odr = 50.0f;
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <LPS22HB_GetOutputDataRate+0x64>)
 8002276:	6023      	str	r3, [r4, #0]
		break;
 8002278:	e7ef      	b.n	800225a <LPS22HB_GetOutputDataRate+0x2a>
		*Odr = 75.0f;
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <LPS22HB_GetOutputDataRate+0x68>)
 800227c:	6023      	str	r3, [r4, #0]
		break;
 800227e:	e7ec      	b.n	800225a <LPS22HB_GetOutputDataRate+0x2a>
		return LPS22HB_ERROR;
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	e7e9      	b.n	800225a <LPS22HB_GetOutputDataRate+0x2a>
		ret = LPS22HB_ERROR;
 8002286:	f04f 32ff 	mov.w	r2, #4294967295
 800228a:	e7e6      	b.n	800225a <LPS22HB_GetOutputDataRate+0x2a>
 800228c:	41200000 	.word	0x41200000
 8002290:	41c80000 	.word	0x41c80000
 8002294:	42480000 	.word	0x42480000
 8002298:	42960000 	.word	0x42960000

0800229c <LPS22HB_PRESS_GetOutputDataRate>:
{
 800229c:	b508      	push	{r3, lr}
	return LPS22HB_GetOutputDataRate(pObj, Odr);
 800229e:	f7ff ffc7 	bl	8002230 <LPS22HB_GetOutputDataRate>
}
 80022a2:	bd08      	pop	{r3, pc}

080022a4 <LPS22HB_TEMP_GetOutputDataRate>:
{
 80022a4:	b508      	push	{r3, lr}
	return LPS22HB_GetOutputDataRate(pObj, Odr);
 80022a6:	f7ff ffc3 	bl	8002230 <LPS22HB_GetOutputDataRate>
}
 80022aa:	bd08      	pop	{r3, pc}

080022ac <LPS22HB_SetOutputDataRate_When_Enabled>:
{
 80022ac:	b538      	push	{r3, r4, r5, lr}
 80022ae:	4605      	mov	r5, r0
		  : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 80022b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80022b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80022b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022bc:	d916      	bls.n	80022ec <LPS22HB_SetOutputDataRate_When_Enabled+0x40>
 80022be:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80022c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80022c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ca:	d911      	bls.n	80022f0 <LPS22HB_SetOutputDataRate_When_Enabled+0x44>
 80022cc:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80022d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	d91a      	bls.n	8002310 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 80022da:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002324 <LPS22HB_SetOutputDataRate_When_Enabled+0x78>
 80022de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80022e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e6:	d815      	bhi.n	8002314 <LPS22HB_SetOutputDataRate_When_Enabled+0x68>
 80022e8:	2104      	movs	r1, #4
 80022ea:	e002      	b.n	80022f2 <LPS22HB_SetOutputDataRate_When_Enabled+0x46>
 80022ec:	2101      	movs	r1, #1
 80022ee:	e000      	b.n	80022f2 <LPS22HB_SetOutputDataRate_When_Enabled+0x46>
 80022f0:	2102      	movs	r1, #2
	if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK) {
 80022f2:	f105 041c 	add.w	r4, r5, #28
 80022f6:	4620      	mov	r0, r4
 80022f8:	f000 f936 	bl	8002568 <lps22hb_data_rate_set>
 80022fc:	b978      	cbnz	r0, 800231e <LPS22HB_SetOutputDataRate_When_Enabled+0x72>
	if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK) {
 80022fe:	f105 012b 	add.w	r1, r5, #43	; 0x2b
 8002302:	4620      	mov	r0, r4
 8002304:	f000 f94c 	bl	80025a0 <lps22hb_data_rate_get>
 8002308:	4603      	mov	r3, r0
 800230a:	b928      	cbnz	r0, 8002318 <LPS22HB_SetOutputDataRate_When_Enabled+0x6c>
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd38      	pop	{r3, r4, r5, pc}
		  : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8002310:	2103      	movs	r1, #3
 8002312:	e7ee      	b.n	80022f2 <LPS22HB_SetOutputDataRate_When_Enabled+0x46>
 8002314:	2105      	movs	r1, #5
 8002316:	e7ec      	b.n	80022f2 <LPS22HB_SetOutputDataRate_When_Enabled+0x46>
		return LPS22HB_ERROR;
 8002318:	f04f 33ff 	mov.w	r3, #4294967295
 800231c:	e7f6      	b.n	800230c <LPS22HB_SetOutputDataRate_When_Enabled+0x60>
		return LPS22HB_ERROR;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
 8002322:	e7f3      	b.n	800230c <LPS22HB_SetOutputDataRate_When_Enabled+0x60>
 8002324:	42480000 	.word	0x42480000

08002328 <LPS22HB_PRESS_SetOutputDataRate>:
{
 8002328:	b508      	push	{r3, lr}
	if (pObj->press_is_enabled == 1U) {
 800232a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800232e:	2b01      	cmp	r3, #1
 8002330:	d002      	beq.n	8002338 <LPS22HB_PRESS_SetOutputDataRate+0x10>
		return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002332:	f7ff fe5d 	bl	8001ff0 <LPS22HB_SetOutputDataRate_When_Disabled>
}
 8002336:	bd08      	pop	{r3, pc}
		return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002338:	f7ff ffb8 	bl	80022ac <LPS22HB_SetOutputDataRate_When_Enabled>
 800233c:	bd08      	pop	{r3, pc}

0800233e <LPS22HB_TEMP_SetOutputDataRate>:
{
 800233e:	b508      	push	{r3, lr}
	if (pObj->temp_is_enabled == 1U) {
 8002340:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8002344:	2b01      	cmp	r3, #1
 8002346:	d002      	beq.n	800234e <LPS22HB_TEMP_SetOutputDataRate+0x10>
		return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002348:	f7ff fe52 	bl	8001ff0 <LPS22HB_SetOutputDataRate_When_Disabled>
}
 800234c:	bd08      	pop	{r3, pc}
		return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 800234e:	f7ff ffad 	bl	80022ac <LPS22HB_SetOutputDataRate_When_Enabled>
 8002352:	bd08      	pop	{r3, pc}

08002354 <LPS22HB_TEMP_Disable>:
{
 8002354:	b538      	push	{r3, r4, r5, lr}
	if (pObj->temp_is_enabled == 0U) {
 8002356:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800235a:	b1c3      	cbz	r3, 800238e <LPS22HB_TEMP_Disable+0x3a>
 800235c:	4604      	mov	r4, r0
	if (pObj->press_is_enabled == 0U) {
 800235e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002362:	b11b      	cbz	r3, 800236c <LPS22HB_TEMP_Disable+0x18>
	pObj->temp_is_enabled = 0;
 8002364:	2000      	movs	r0, #0
 8002366:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
	return LPS22HB_OK;
 800236a:	bd38      	pop	{r3, r4, r5, pc}
		if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK) {
 800236c:	f100 051c 	add.w	r5, r0, #28
 8002370:	f100 012b 	add.w	r1, r0, #43	; 0x2b
 8002374:	4628      	mov	r0, r5
 8002376:	f000 f913 	bl	80025a0 <lps22hb_data_rate_get>
 800237a:	b950      	cbnz	r0, 8002392 <LPS22HB_TEMP_Disable+0x3e>
		if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK) {
 800237c:	2100      	movs	r1, #0
 800237e:	4628      	mov	r0, r5
 8002380:	f000 f8f2 	bl	8002568 <lps22hb_data_rate_set>
 8002384:	2800      	cmp	r0, #0
 8002386:	d0ed      	beq.n	8002364 <LPS22HB_TEMP_Disable+0x10>
			return LPS22HB_ERROR;
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
}
 800238c:	bd38      	pop	{r3, r4, r5, pc}
		return LPS22HB_OK;
 800238e:	2000      	movs	r0, #0
 8002390:	bd38      	pop	{r3, r4, r5, pc}
			return LPS22HB_ERROR;
 8002392:	f04f 30ff 	mov.w	r0, #4294967295
 8002396:	bd38      	pop	{r3, r4, r5, pc}

08002398 <LPS22HB_DeInit>:
{
 8002398:	b510      	push	{r4, lr}
 800239a:	4604      	mov	r4, r0
	if (pObj->is_initialized == 1U) {
 800239c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d003      	beq.n	80023ac <LPS22HB_DeInit+0x14>
	pObj->is_initialized = 0;
 80023a4:	2000      	movs	r0, #0
 80023a6:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	return LPS22HB_OK;
 80023aa:	bd10      	pop	{r4, pc}
		if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK) {
 80023ac:	f7ff ff1d 	bl	80021ea <LPS22HB_PRESS_Disable>
 80023b0:	b938      	cbnz	r0, 80023c2 <LPS22HB_DeInit+0x2a>
		if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK) {
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7ff ffce 	bl	8002354 <LPS22HB_TEMP_Disable>
 80023b8:	2800      	cmp	r0, #0
 80023ba:	d0f3      	beq.n	80023a4 <LPS22HB_DeInit+0xc>
			return LPS22HB_ERROR;
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80023c0:	bd10      	pop	{r4, pc}
			return LPS22HB_ERROR;
 80023c2:	f04f 30ff 	mov.w	r0, #4294967295
 80023c6:	bd10      	pop	{r4, pc}

080023c8 <LPS22HB_PRESS_GetPressure>:
{
 80023c8:	b510      	push	{r4, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	460c      	mov	r4, r1
	(void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80023ce:	2300      	movs	r3, #0
 80023d0:	9301      	str	r3, [sp, #4]
	if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK) {
 80023d2:	a901      	add	r1, sp, #4
 80023d4:	301c      	adds	r0, #28
 80023d6:	f000 f90c 	bl	80025f2 <lps22hb_pressure_raw_get>
 80023da:	b968      	cbnz	r0, 80023f8 <LPS22HB_PRESS_GetPressure+0x30>
 80023dc:	4603      	mov	r3, r0
	*Value = LPS22HB_FROM_LSB_TO_hPa((float)(data_raw_pressure.i32bit));
 80023de:	eddd 7a01 	vldr	s15, [sp, #4]
 80023e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002400 <LPS22HB_PRESS_GetPressure+0x38>
 80023ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ee:	edc4 7a00 	vstr	s15, [r4]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	b002      	add	sp, #8
 80023f6:	bd10      	pop	{r4, pc}
		return LPS22HB_ERROR;
 80023f8:	f04f 33ff 	mov.w	r3, #4294967295
 80023fc:	e7f9      	b.n	80023f2 <LPS22HB_PRESS_GetPressure+0x2a>
 80023fe:	bf00      	nop
 8002400:	39800000 	.word	0x39800000

08002404 <LPS22HB_TEMP_GetTemperature>:
{
 8002404:	b510      	push	{r4, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	460c      	mov	r4, r1
	(void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800240a:	2300      	movs	r3, #0
 800240c:	f8ad 3004 	strh.w	r3, [sp, #4]
	if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK) {
 8002410:	a901      	add	r1, sp, #4
 8002412:	301c      	adds	r0, #28
 8002414:	f000 f8f4 	bl	8002600 <lps22hb_temperature_raw_get>
 8002418:	b978      	cbnz	r0, 800243a <LPS22HB_TEMP_GetTemperature+0x36>
 800241a:	4603      	mov	r3, r0
	*Value = LPS22HB_FROM_LSB_TO_degC((float)(data_raw_temperature.i16bit));
 800241c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002420:	ee07 2a90 	vmov	s15, r2
 8002424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002428:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002440 <LPS22HB_TEMP_GetTemperature+0x3c>
 800242c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002430:	ed84 7a00 	vstr	s14, [r4]
}
 8002434:	4618      	mov	r0, r3
 8002436:	b002      	add	sp, #8
 8002438:	bd10      	pop	{r4, pc}
		return LPS22HB_ERROR;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	e7f9      	b.n	8002434 <LPS22HB_TEMP_GetTemperature+0x30>
 8002440:	42c80000 	.word	0x42c80000

08002444 <LPS22HB_Write_Reg>:
{
 8002444:	b510      	push	{r4, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	ac02      	add	r4, sp, #8
 800244a:	f804 2d01 	strb.w	r2, [r4, #-1]!
	if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK) {
 800244e:	2301      	movs	r3, #1
 8002450:	4622      	mov	r2, r4
 8002452:	301c      	adds	r0, #28
 8002454:	f000 f84b 	bl	80024ee <lps22hb_write_reg>
 8002458:	4603      	mov	r3, r0
 800245a:	b910      	cbnz	r0, 8002462 <LPS22HB_Write_Reg+0x1e>
}
 800245c:	4618      	mov	r0, r3
 800245e:	b002      	add	sp, #8
 8002460:	bd10      	pop	{r4, pc}
		return LPS22HB_ERROR;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	e7f9      	b.n	800245c <LPS22HB_Write_Reg+0x18>

08002468 <LPS22HB_RegisterBusIO>:
	if (pObj == NULL) {
 8002468:	2800      	cmp	r0, #0
 800246a:	d02c      	beq.n	80024c6 <LPS22HB_RegisterBusIO+0x5e>
{
 800246c:	b510      	push	{r4, lr}
 800246e:	4604      	mov	r4, r0
		pObj->IO.Init = pIO->Init;
 8002470:	680a      	ldr	r2, [r1, #0]
 8002472:	6002      	str	r2, [r0, #0]
		pObj->IO.DeInit = pIO->DeInit;
 8002474:	6848      	ldr	r0, [r1, #4]
 8002476:	6060      	str	r0, [r4, #4]
		pObj->IO.BusType = pIO->BusType;
 8002478:	6888      	ldr	r0, [r1, #8]
 800247a:	60a0      	str	r0, [r4, #8]
		pObj->IO.Address = pIO->Address;
 800247c:	7b08      	ldrb	r0, [r1, #12]
 800247e:	7320      	strb	r0, [r4, #12]
		pObj->IO.WriteReg = pIO->WriteReg;
 8002480:	6908      	ldr	r0, [r1, #16]
 8002482:	6120      	str	r0, [r4, #16]
		pObj->IO.ReadReg = pIO->ReadReg;
 8002484:	6948      	ldr	r0, [r1, #20]
 8002486:	6160      	str	r0, [r4, #20]
		pObj->IO.GetTick = pIO->GetTick;
 8002488:	6989      	ldr	r1, [r1, #24]
 800248a:	61a1      	str	r1, [r4, #24]
		pObj->Ctx.read_reg = ReadRegWrap;
 800248c:	4913      	ldr	r1, [pc, #76]	; (80024dc <LPS22HB_RegisterBusIO+0x74>)
 800248e:	6221      	str	r1, [r4, #32]
		pObj->Ctx.write_reg = WriteRegWrap;
 8002490:	4913      	ldr	r1, [pc, #76]	; (80024e0 <LPS22HB_RegisterBusIO+0x78>)
 8002492:	61e1      	str	r1, [r4, #28]
		pObj->Ctx.handle = pObj;
 8002494:	6264      	str	r4, [r4, #36]	; 0x24
		if (pObj->IO.Init == NULL) {
 8002496:	b1d2      	cbz	r2, 80024ce <LPS22HB_RegisterBusIO+0x66>
		}else if (pObj->IO.Init() != LPS22HB_OK) {
 8002498:	4790      	blx	r2
 800249a:	4603      	mov	r3, r0
 800249c:	b9d0      	cbnz	r0, 80024d4 <LPS22HB_RegisterBusIO+0x6c>
			if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) { /* SPI 3-Wires */
 800249e:	68a2      	ldr	r2, [r4, #8]
 80024a0:	2a02      	cmp	r2, #2
 80024a2:	d001      	beq.n	80024a8 <LPS22HB_RegisterBusIO+0x40>
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd10      	pop	{r4, pc}
				if (pObj->is_initialized == 0U) {
 80024a8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80024ac:	2a00      	cmp	r2, #0
 80024ae:	d1f9      	bne.n	80024a4 <LPS22HB_RegisterBusIO+0x3c>
					if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK) {
 80024b0:	2201      	movs	r2, #1
 80024b2:	2110      	movs	r1, #16
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7ff ffc5 	bl	8002444 <LPS22HB_Write_Reg>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2800      	cmp	r0, #0
 80024be:	d0f1      	beq.n	80024a4 <LPS22HB_RegisterBusIO+0x3c>
						ret = LPS22HB_ERROR;
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295
	return ret;
 80024c4:	e7ee      	b.n	80024a4 <LPS22HB_RegisterBusIO+0x3c>
		ret = LPS22HB_ERROR;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	4770      	bx	lr
			ret = LPS22HB_ERROR;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
 80024d2:	e7e7      	b.n	80024a4 <LPS22HB_RegisterBusIO+0x3c>
			ret = LPS22HB_ERROR;
 80024d4:	f04f 33ff 	mov.w	r3, #4294967295
 80024d8:	e7e4      	b.n	80024a4 <LPS22HB_RegisterBusIO+0x3c>
 80024da:	bf00      	nop
 80024dc:	08002049 	.word	0x08002049
 80024e0:	08002093 	.word	0x08002093

080024e4 <lps22hb_read_reg>:
 * @param  uint16_t len: number of consecutive register to read
 *
 */
int32_t lps22hb_read_reg(lps22hb_ctx_t *ctx, uint8_t reg, uint8_t *data,
			 uint16_t len)
{
 80024e4:	b510      	push	{r4, lr}
	int32_t ret;
	ret = ctx->read_reg(ctx->handle, reg, data, len);
 80024e6:	6844      	ldr	r4, [r0, #4]
 80024e8:	6880      	ldr	r0, [r0, #8]
 80024ea:	47a0      	blx	r4
	return ret;
}
 80024ec:	bd10      	pop	{r4, pc}

080024ee <lps22hb_write_reg>:
 * @param  uint16_t len: number of consecutive register to write
 *
 */
int32_t lps22hb_write_reg(lps22hb_ctx_t *ctx, uint8_t reg, uint8_t *data,
			  uint16_t len)
{
 80024ee:	b510      	push	{r4, lr}
	int32_t ret;
	ret = ctx->write_reg(ctx->handle, reg, data, len);
 80024f0:	6804      	ldr	r4, [r0, #0]
 80024f2:	6880      	ldr	r0, [r0, #8]
 80024f4:	47a0      	blx	r4
	return ret;
}
 80024f6:	bd10      	pop	{r4, pc}

080024f8 <lps22hb_block_data_update_set>:
 * @param  lps22hb_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t val: change the values of bdu in reg CTRL_REG1
 *
 */
int32_t lps22hb_block_data_update_set(lps22hb_ctx_t *ctx, uint8_t val)
{
 80024f8:	b530      	push	{r4, r5, lr}
 80024fa:	b083      	sub	sp, #12
 80024fc:	4604      	mov	r4, r0
 80024fe:	460d      	mov	r5, r1
	lps22hb_reg_t reg;
	int32_t ret;

	ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002500:	2301      	movs	r3, #1
 8002502:	aa01      	add	r2, sp, #4
 8002504:	2110      	movs	r1, #16
 8002506:	f7ff ffed 	bl	80024e4 <lps22hb_read_reg>
	if (ret == 0) {
 800250a:	4603      	mov	r3, r0
 800250c:	b110      	cbz	r0, 8002514 <lps22hb_block_data_update_set+0x1c>
		reg.ctrl_reg1.bdu = val;
		ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
	}
	return ret;
}
 800250e:	4618      	mov	r0, r3
 8002510:	b003      	add	sp, #12
 8002512:	bd30      	pop	{r4, r5, pc}
		reg.ctrl_reg1.bdu = val;
 8002514:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002518:	f365 0341 	bfi	r3, r5, #1, #1
 800251c:	aa02      	add	r2, sp, #8
 800251e:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002522:	2301      	movs	r3, #1
 8002524:	2110      	movs	r1, #16
 8002526:	4620      	mov	r0, r4
 8002528:	f7ff ffe1 	bl	80024ee <lps22hb_write_reg>
 800252c:	4603      	mov	r3, r0
	return ret;
 800252e:	e7ee      	b.n	800250e <lps22hb_block_data_update_set+0x16>

08002530 <lps22hb_low_pass_filter_mode_set>:
 * @param  lps22hb_lpfp_t: change the values of lpfp in reg CTRL_REG1
 *
 */
int32_t lps22hb_low_pass_filter_mode_set(lps22hb_ctx_t *ctx,
					 lps22hb_lpfp_t val)
{
 8002530:	b530      	push	{r4, r5, lr}
 8002532:	b083      	sub	sp, #12
 8002534:	4604      	mov	r4, r0
 8002536:	460d      	mov	r5, r1
	lps22hb_reg_t reg;
	int32_t ret;

	ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002538:	2301      	movs	r3, #1
 800253a:	aa01      	add	r2, sp, #4
 800253c:	2110      	movs	r1, #16
 800253e:	f7ff ffd1 	bl	80024e4 <lps22hb_read_reg>
	if (ret == 0) {
 8002542:	4603      	mov	r3, r0
 8002544:	b110      	cbz	r0, 800254c <lps22hb_low_pass_filter_mode_set+0x1c>
		reg.ctrl_reg1.lpfp = (uint8_t)val;
		ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
	}
	return ret;
}
 8002546:	4618      	mov	r0, r3
 8002548:	b003      	add	sp, #12
 800254a:	bd30      	pop	{r4, r5, pc}
		reg.ctrl_reg1.lpfp = (uint8_t)val;
 800254c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002550:	f365 0383 	bfi	r3, r5, #2, #2
 8002554:	aa02      	add	r2, sp, #8
 8002556:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 800255a:	2301      	movs	r3, #1
 800255c:	2110      	movs	r1, #16
 800255e:	4620      	mov	r0, r4
 8002560:	f7ff ffc5 	bl	80024ee <lps22hb_write_reg>
 8002564:	4603      	mov	r3, r0
	return ret;
 8002566:	e7ee      	b.n	8002546 <lps22hb_low_pass_filter_mode_set+0x16>

08002568 <lps22hb_data_rate_set>:
 * @param  lps22hb_ctx_t *ctx: read / write interface definitions
 * @param  lps22hb_odr_t: change the values of odr in reg CTRL_REG1
 *
 */
int32_t lps22hb_data_rate_set(lps22hb_ctx_t *ctx, lps22hb_odr_t val)
{
 8002568:	b530      	push	{r4, r5, lr}
 800256a:	b083      	sub	sp, #12
 800256c:	4604      	mov	r4, r0
 800256e:	460d      	mov	r5, r1
	lps22hb_reg_t reg;
	int32_t ret;

	ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002570:	2301      	movs	r3, #1
 8002572:	aa01      	add	r2, sp, #4
 8002574:	2110      	movs	r1, #16
 8002576:	f7ff ffb5 	bl	80024e4 <lps22hb_read_reg>
	if (ret == 0) {
 800257a:	4603      	mov	r3, r0
 800257c:	b110      	cbz	r0, 8002584 <lps22hb_data_rate_set+0x1c>
		reg.ctrl_reg1.odr = (uint8_t)val;
		ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
	}
	return ret;
}
 800257e:	4618      	mov	r0, r3
 8002580:	b003      	add	sp, #12
 8002582:	bd30      	pop	{r4, r5, pc}
		reg.ctrl_reg1.odr = (uint8_t)val;
 8002584:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002588:	f365 1306 	bfi	r3, r5, #4, #3
 800258c:	aa02      	add	r2, sp, #8
 800258e:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002592:	2301      	movs	r3, #1
 8002594:	2110      	movs	r1, #16
 8002596:	4620      	mov	r0, r4
 8002598:	f7ff ffa9 	bl	80024ee <lps22hb_write_reg>
 800259c:	4603      	mov	r3, r0
	return ret;
 800259e:	e7ee      	b.n	800257e <lps22hb_data_rate_set+0x16>

080025a0 <lps22hb_data_rate_get>:
 * @param  lps22hb_ctx_t *ctx: read / write interface definitions
 * @param  lps22hb_odr_t: Get the values of odr in reg CTRL_REG1
 *
 */
int32_t lps22hb_data_rate_get(lps22hb_ctx_t *ctx, lps22hb_odr_t *val)
{
 80025a0:	b510      	push	{r4, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	460c      	mov	r4, r1
	lps22hb_reg_t reg;
	int32_t ret;

	ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 80025a6:	2301      	movs	r3, #1
 80025a8:	aa01      	add	r2, sp, #4
 80025aa:	2110      	movs	r1, #16
 80025ac:	f7ff ff9a 	bl	80024e4 <lps22hb_read_reg>

	switch (reg.ctrl_reg1.odr) {
 80025b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80025b4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d817      	bhi.n	80025ec <lps22hb_data_rate_get+0x4c>
 80025bc:	e8df f003 	tbb	[pc, r3]
 80025c0:	0d0a0703 	.word	0x0d0a0703
 80025c4:	1310      	.short	0x1310
	case LPS22HB_POWER_DOWN:
		*val = LPS22HB_POWER_DOWN;
 80025c6:	2300      	movs	r3, #0
 80025c8:	7023      	strb	r3, [r4, #0]
	default:
		*val = LPS22HB_ODR_ND;
		break;
	}
	return ret;
}
 80025ca:	b002      	add	sp, #8
 80025cc:	bd10      	pop	{r4, pc}
		*val = LPS22HB_ODR_1_Hz;
 80025ce:	2301      	movs	r3, #1
 80025d0:	7023      	strb	r3, [r4, #0]
		break;
 80025d2:	e7fa      	b.n	80025ca <lps22hb_data_rate_get+0x2a>
		*val = LPS22HB_ODR_10_Hz;
 80025d4:	2302      	movs	r3, #2
 80025d6:	7023      	strb	r3, [r4, #0]
		break;
 80025d8:	e7f7      	b.n	80025ca <lps22hb_data_rate_get+0x2a>
		*val = LPS22HB_ODR_25_Hz;
 80025da:	2303      	movs	r3, #3
 80025dc:	7023      	strb	r3, [r4, #0]
		break;
 80025de:	e7f4      	b.n	80025ca <lps22hb_data_rate_get+0x2a>
		*val = LPS22HB_ODR_50_Hz;
 80025e0:	2304      	movs	r3, #4
 80025e2:	7023      	strb	r3, [r4, #0]
		break;
 80025e4:	e7f1      	b.n	80025ca <lps22hb_data_rate_get+0x2a>
		*val = LPS22HB_ODR_75_Hz;
 80025e6:	2305      	movs	r3, #5
 80025e8:	7023      	strb	r3, [r4, #0]
		break;
 80025ea:	e7ee      	b.n	80025ca <lps22hb_data_rate_get+0x2a>
		*val = LPS22HB_ODR_ND;
 80025ec:	2306      	movs	r3, #6
 80025ee:	7023      	strb	r3, [r4, #0]
	return ret;
 80025f0:	e7eb      	b.n	80025ca <lps22hb_data_rate_get+0x2a>

080025f2 <lps22hb_pressure_raw_get>:
 * @param  lps22hb_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t lps22hb_pressure_raw_get(lps22hb_ctx_t *ctx, uint8_t *buff)
{
 80025f2:	b508      	push	{r3, lr}
	return lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 80025f4:	2303      	movs	r3, #3
 80025f6:	460a      	mov	r2, r1
 80025f8:	2128      	movs	r1, #40	; 0x28
 80025fa:	f7ff ff73 	bl	80024e4 <lps22hb_read_reg>
}
 80025fe:	bd08      	pop	{r3, pc}

08002600 <lps22hb_temperature_raw_get>:
 * @param  lps22hb_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t lps22hb_temperature_raw_get(lps22hb_ctx_t *ctx, uint8_t *buff)
{
 8002600:	b508      	push	{r3, lr}
	return lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *)buff, 2);
 8002602:	2302      	movs	r3, #2
 8002604:	460a      	mov	r2, r1
 8002606:	212b      	movs	r1, #43	; 0x2b
 8002608:	f7ff ff6c 	bl	80024e4 <lps22hb_read_reg>
}
 800260c:	bd08      	pop	{r3, pc}

0800260e <lps22hb_device_id_get>:
 * @param  lps22hb_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t lps22hb_device_id_get(lps22hb_ctx_t *ctx, uint8_t *buff)
{
 800260e:	b508      	push	{r3, lr}
	return lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *)buff, 1);
 8002610:	2301      	movs	r3, #1
 8002612:	460a      	mov	r2, r1
 8002614:	210f      	movs	r1, #15
 8002616:	f7ff ff65 	bl	80024e4 <lps22hb_read_reg>
}
 800261a:	bd08      	pop	{r3, pc}

0800261c <lps22hb_low_power_set>:
 * @param  lps22hb_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t val: change the values of lc_en in reg RES_CONF
 *
 */
int32_t lps22hb_low_power_set(lps22hb_ctx_t *ctx, uint8_t val)
{
 800261c:	b530      	push	{r4, r5, lr}
 800261e:	b083      	sub	sp, #12
 8002620:	4604      	mov	r4, r0
 8002622:	460d      	mov	r5, r1
	lps22hb_reg_t reg;
	int32_t ret;

	ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
 8002624:	2301      	movs	r3, #1
 8002626:	aa01      	add	r2, sp, #4
 8002628:	211a      	movs	r1, #26
 800262a:	f7ff ff5b 	bl	80024e4 <lps22hb_read_reg>
	if (ret == 0) {
 800262e:	4603      	mov	r3, r0
 8002630:	b110      	cbz	r0, 8002638 <lps22hb_low_power_set+0x1c>
		reg.res_conf.lc_en = val;
		ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
	}
	return ret;
}
 8002632:	4618      	mov	r0, r3
 8002634:	b003      	add	sp, #12
 8002636:	bd30      	pop	{r4, r5, pc}
		reg.res_conf.lc_en = val;
 8002638:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800263c:	f365 0300 	bfi	r3, r5, #0, #1
 8002640:	aa02      	add	r2, sp, #8
 8002642:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
 8002646:	2301      	movs	r3, #1
 8002648:	211a      	movs	r1, #26
 800264a:	4620      	mov	r0, r4
 800264c:	f7ff ff4f 	bl	80024ee <lps22hb_write_reg>
 8002650:	4603      	mov	r3, r0
	return ret;
 8002652:	e7ee      	b.n	8002632 <lps22hb_low_power_set+0x16>

08002654 <lps22hb_auto_add_inc_set>:
 * @param  lps22hb_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t val: change the values of if_add_inc in reg CTRL_REG2
 *
 */
int32_t lps22hb_auto_add_inc_set(lps22hb_ctx_t *ctx, uint8_t val)
{
 8002654:	b530      	push	{r4, r5, lr}
 8002656:	b083      	sub	sp, #12
 8002658:	4604      	mov	r4, r0
 800265a:	460d      	mov	r5, r1
	lps22hb_reg_t reg;
	int32_t ret;

	ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 800265c:	2301      	movs	r3, #1
 800265e:	aa01      	add	r2, sp, #4
 8002660:	2111      	movs	r1, #17
 8002662:	f7ff ff3f 	bl	80024e4 <lps22hb_read_reg>
	if (ret == 0) {
 8002666:	4603      	mov	r3, r0
 8002668:	b110      	cbz	r0, 8002670 <lps22hb_auto_add_inc_set+0x1c>
		reg.ctrl_reg2.if_add_inc = val;
		ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
	}
	return ret;
}
 800266a:	4618      	mov	r0, r3
 800266c:	b003      	add	sp, #12
 800266e:	bd30      	pop	{r4, r5, pc}
		reg.ctrl_reg2.if_add_inc = val;
 8002670:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002674:	f365 1304 	bfi	r3, r5, #4, #1
 8002678:	aa02      	add	r2, sp, #8
 800267a:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 800267e:	2301      	movs	r3, #1
 8002680:	2111      	movs	r1, #17
 8002682:	4620      	mov	r0, r4
 8002684:	f7ff ff33 	bl	80024ee <lps22hb_write_reg>
 8002688:	4603      	mov	r3, r0
	return ret;
 800268a:	e7ee      	b.n	800266a <lps22hb_auto_add_inc_set+0x16>

0800268c <LSM303AGR_ACC_GetCapabilities>:
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
	/* Prevent unused argument(s) compilation warning */
	(void)(pObj);

	Capabilities->Acc = 1;
 800268c:	2301      	movs	r3, #1
 800268e:	700b      	strb	r3, [r1, #0]
	Capabilities->Gyro = 0;
 8002690:	2000      	movs	r0, #0
 8002692:	7048      	strb	r0, [r1, #1]
	Capabilities->Magneto = 0;
 8002694:	7088      	strb	r0, [r1, #2]
	Capabilities->LowPower = 0;
 8002696:	70c8      	strb	r0, [r1, #3]
	Capabilities->GyroMaxFS = 0;
 8002698:	6048      	str	r0, [r1, #4]
	Capabilities->AccMaxFS = 16;
 800269a:	2310      	movs	r3, #16
 800269c:	608b      	str	r3, [r1, #8]
	Capabilities->MagMaxFS = 0;
 800269e:	60c8      	str	r0, [r1, #12]
	Capabilities->GyroMaxOdr = 0.0f;
 80026a0:	2300      	movs	r3, #0
 80026a2:	610b      	str	r3, [r1, #16]
	Capabilities->AccMaxOdr = 400.0f;
 80026a4:	4a01      	ldr	r2, [pc, #4]	; (80026ac <LSM303AGR_ACC_GetCapabilities+0x20>)
 80026a6:	614a      	str	r2, [r1, #20]
	Capabilities->MagMaxOdr = 0.0f;
 80026a8:	618b      	str	r3, [r1, #24]
	return LSM303AGR_OK;
}
 80026aa:	4770      	bx	lr
 80026ac:	43c80000 	.word	0x43c80000

080026b0 <LSM303AGR_MAG_GetCapabilities>:
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
	/* Prevent unused argument(s) compilation warning */
	(void)(pObj);

	Capabilities->Acc = 0;
 80026b0:	2000      	movs	r0, #0
 80026b2:	7008      	strb	r0, [r1, #0]
	Capabilities->Gyro = 0;
 80026b4:	7048      	strb	r0, [r1, #1]
	Capabilities->Magneto = 1;
 80026b6:	2301      	movs	r3, #1
 80026b8:	708b      	strb	r3, [r1, #2]
	Capabilities->LowPower = 0;
 80026ba:	70c8      	strb	r0, [r1, #3]
	Capabilities->GyroMaxFS = 0;
 80026bc:	6048      	str	r0, [r1, #4]
	Capabilities->AccMaxFS = 0;
 80026be:	6088      	str	r0, [r1, #8]
	Capabilities->MagMaxFS = 50;
 80026c0:	2332      	movs	r3, #50	; 0x32
 80026c2:	60cb      	str	r3, [r1, #12]
	Capabilities->GyroMaxOdr = 0.0f;
 80026c4:	2300      	movs	r3, #0
 80026c6:	610b      	str	r3, [r1, #16]
	Capabilities->AccMaxOdr = 0.0f;
 80026c8:	614b      	str	r3, [r1, #20]
	Capabilities->MagMaxOdr = 100.0f;
 80026ca:	4b01      	ldr	r3, [pc, #4]	; (80026d0 <LSM303AGR_MAG_GetCapabilities+0x20>)
 80026cc:	618b      	str	r3, [r1, #24]
	return LSM303AGR_OK;
}
 80026ce:	4770      	bx	lr
 80026d0:	42c80000 	.word	0x42c80000

080026d4 <LSM303AGR_MAG_GetSensitivity>:
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
	*Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 80026d4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80026d8:	600b      	str	r3, [r1, #0]

	return LSM303AGR_OK;
}
 80026da:	2000      	movs	r0, #0
 80026dc:	4770      	bx	lr

080026de <LSM303AGR_MAG_GetFullScale>:
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
	*FullScale = 50;
 80026de:	2332      	movs	r3, #50	; 0x32
 80026e0:	600b      	str	r3, [r1, #0]

	return LSM303AGR_OK;
}
 80026e2:	2000      	movs	r0, #0
 80026e4:	4770      	bx	lr

080026e6 <LSM303AGR_MAG_SetFullScale>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
	return LSM303AGR_OK;
}
 80026e6:	2000      	movs	r0, #0
 80026e8:	4770      	bx	lr
	...

080026ec <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
	pObj->acc_odr = (Odr <= 1.0f) ? LSM303AGR_XL_ODR_1Hz
			: (Odr <= 10.0f) ? LSM303AGR_XL_ODR_10Hz
 80026ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80026f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	d926      	bls.n	8002748 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x5c>
 80026fa:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80026fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002706:	d921      	bls.n	800274c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x60>
 8002708:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 800270c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002714:	d91f      	bls.n	8002756 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x6a>
 8002716:	eddf 7a13 	vldr	s15, [pc, #76]	; 8002764 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x78>
 800271a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800271e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002722:	d91a      	bls.n	800275a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x6e>
 8002724:	eddf 7a10 	vldr	s15, [pc, #64]	; 8002768 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002728:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800272c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002730:	d915      	bls.n	800275e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x72>
 8002732:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800276c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x80>
 8002736:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800273a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273e:	d901      	bls.n	8002744 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x58>
 8002740:	2307      	movs	r3, #7
 8002742:	e004      	b.n	800274e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x62>
 8002744:	2306      	movs	r3, #6
 8002746:	e002      	b.n	800274e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x62>
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x62>
 800274c:	2302      	movs	r3, #2
	pObj->acc_odr = (Odr <= 1.0f) ? LSM303AGR_XL_ODR_1Hz
 800274e:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
			: (Odr <= 100.0f) ? LSM303AGR_XL_ODR_100Hz
			: (Odr <= 200.0f) ? LSM303AGR_XL_ODR_200Hz
			:                    LSM303AGR_XL_ODR_400Hz;

	return LSM303AGR_OK;
}
 8002752:	2000      	movs	r0, #0
 8002754:	4770      	bx	lr
			: (Odr <= 10.0f) ? LSM303AGR_XL_ODR_10Hz
 8002756:	2303      	movs	r3, #3
 8002758:	e7f9      	b.n	800274e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x62>
 800275a:	2304      	movs	r3, #4
 800275c:	e7f7      	b.n	800274e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x62>
 800275e:	2305      	movs	r3, #5
 8002760:	e7f5      	b.n	800274e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x62>
 8002762:	bf00      	nop
 8002764:	42480000 	.word	0x42480000
 8002768:	42c80000 	.word	0x42c80000
 800276c:	43480000 	.word	0x43480000

08002770 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002770:	b510      	push	{r4, lr}
	LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;

	if (pObj->IO.BusType == LSM303AGR_I2C_BUS) { /* I2C */
 8002772:	6884      	ldr	r4, [r0, #8]
 8002774:	b12c      	cbz	r4, 8002782 <ReadAccRegWrap+0x12>
		/* Enable Multi-byte read */
		return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
	}else  {/* SPI 3-Wires */
		/* Enable Multi-byte read */
		return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002776:	6944      	ldr	r4, [r0, #20]
 8002778:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800277c:	7b00      	ldrb	r0, [r0, #12]
 800277e:	47a0      	blx	r4
	}
}
 8002780:	bd10      	pop	{r4, pc}
		return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002782:	6944      	ldr	r4, [r0, #20]
 8002784:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002788:	7b00      	ldrb	r0, [r0, #12]
 800278a:	47a0      	blx	r4
 800278c:	bd10      	pop	{r4, pc}

0800278e <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800278e:	b510      	push	{r4, lr}
	LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;

	if (pObj->IO.BusType == LSM303AGR_I2C_BUS) { /* I2C */
 8002790:	6884      	ldr	r4, [r0, #8]
 8002792:	b12c      	cbz	r4, 80027a0 <WriteAccRegWrap+0x12>
		/* Enable Multi-byte write */
		return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
	}else  {/* SPI 3-Wires */
		/* Enable Multi-byte write */
		return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002794:	6904      	ldr	r4, [r0, #16]
 8002796:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800279a:	7b00      	ldrb	r0, [r0, #12]
 800279c:	47a0      	blx	r4
	}
}
 800279e:	bd10      	pop	{r4, pc}
		return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80027a0:	6904      	ldr	r4, [r0, #16]
 80027a2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80027a6:	7b00      	ldrb	r0, [r0, #12]
 80027a8:	47a0      	blx	r4
 80027aa:	bd10      	pop	{r4, pc}

080027ac <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80027ac:	b510      	push	{r4, lr}
	LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;

	if (pObj->IO.BusType == LSM303AGR_I2C_BUS) { /* I2C */
 80027ae:	6884      	ldr	r4, [r0, #8]
 80027b0:	b12c      	cbz	r4, 80027be <ReadMagRegWrap+0x12>
		/* Enable Multi-byte read */
		return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
	}else  {/* SPI 3-Wires */
		/* Enable Multi-byte read */
		return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80027b2:	6944      	ldr	r4, [r0, #20]
 80027b4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80027b8:	7b00      	ldrb	r0, [r0, #12]
 80027ba:	47a0      	blx	r4
	}
}
 80027bc:	bd10      	pop	{r4, pc}
		return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80027be:	6944      	ldr	r4, [r0, #20]
 80027c0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80027c4:	7b00      	ldrb	r0, [r0, #12]
 80027c6:	47a0      	blx	r4
 80027c8:	bd10      	pop	{r4, pc}

080027ca <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80027ca:	b510      	push	{r4, lr}
	LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;

	if (pObj->IO.BusType == LSM303AGR_I2C_BUS) { /* I2C */
 80027cc:	6884      	ldr	r4, [r0, #8]
 80027ce:	b12c      	cbz	r4, 80027dc <WriteMagRegWrap+0x12>
		/* Enable Multi-byte write */
		return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
	}else  {/* SPI 3-Wires */
		/* Enable Multi-byte write */
		return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80027d0:	6904      	ldr	r4, [r0, #16]
 80027d2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80027d6:	7b00      	ldrb	r0, [r0, #12]
 80027d8:	47a0      	blx	r4
	}
}
 80027da:	bd10      	pop	{r4, pc}
		return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80027dc:	6904      	ldr	r4, [r0, #16]
 80027de:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80027e2:	7b00      	ldrb	r0, [r0, #12]
 80027e4:	47a0      	blx	r4
 80027e6:	bd10      	pop	{r4, pc}

080027e8 <LSM303AGR_ACC_Enable>:
	if (pObj->acc_is_enabled == 1U) {
 80027e8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d00d      	beq.n	800280c <LSM303AGR_ACC_Enable+0x24>
{
 80027f0:	b510      	push	{r4, lr}
 80027f2:	4604      	mov	r4, r0
	if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK) {
 80027f4:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
 80027f8:	301c      	adds	r0, #28
 80027fa:	f000 fca2 	bl	8003142 <lsm303agr_xl_data_rate_set>
 80027fe:	4603      	mov	r3, r0
 8002800:	b938      	cbnz	r0, 8002812 <LSM303AGR_ACC_Enable+0x2a>
	pObj->acc_is_enabled = 1;
 8002802:	2201      	movs	r2, #1
 8002804:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd10      	pop	{r4, pc}
		return LSM303AGR_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	4770      	bx	lr
		return LSM303AGR_ERROR;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e7f7      	b.n	8002808 <LSM303AGR_ACC_Enable+0x20>

08002818 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
{
 8002818:	b508      	push	{r3, lr}
		  : (Odr <= 10.0f) ? LSM303AGR_XL_ODR_10Hz
 800281a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800281e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002826:	d924      	bls.n	8002872 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5a>
 8002828:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800282c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002834:	d91f      	bls.n	8002876 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5e>
 8002836:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 800283a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	d920      	bls.n	8002886 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x6e>
 8002844:	eddf 7a15 	vldr	s15, [pc, #84]	; 800289c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x84>
 8002848:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800284c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002850:	d91b      	bls.n	800288a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x72>
 8002852:	eddf 7a13 	vldr	s15, [pc, #76]	; 80028a0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x88>
 8002856:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800285a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285e:	d916      	bls.n	800288e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x76>
 8002860:	eddf 7a10 	vldr	s15, [pc, #64]	; 80028a4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x8c>
 8002864:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286c:	d811      	bhi.n	8002892 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800286e:	2106      	movs	r1, #6
 8002870:	e002      	b.n	8002878 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x60>
 8002872:	2101      	movs	r1, #1
 8002874:	e000      	b.n	8002878 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x60>
 8002876:	2102      	movs	r1, #2
	if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK) {
 8002878:	301c      	adds	r0, #28
 800287a:	f000 fc62 	bl	8003142 <lsm303agr_xl_data_rate_set>
 800287e:	4603      	mov	r3, r0
 8002880:	b948      	cbnz	r0, 8002896 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7e>
}
 8002882:	4618      	mov	r0, r3
 8002884:	bd08      	pop	{r3, pc}
		  : (Odr <= 10.0f) ? LSM303AGR_XL_ODR_10Hz
 8002886:	2103      	movs	r1, #3
 8002888:	e7f6      	b.n	8002878 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x60>
 800288a:	2104      	movs	r1, #4
 800288c:	e7f4      	b.n	8002878 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x60>
 800288e:	2105      	movs	r1, #5
 8002890:	e7f2      	b.n	8002878 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x60>
 8002892:	2107      	movs	r1, #7
 8002894:	e7f0      	b.n	8002878 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x60>
		return LSM303AGR_ERROR;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
 800289a:	e7f2      	b.n	8002882 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x6a>
 800289c:	42480000 	.word	0x42480000
 80028a0:	42c80000 	.word	0x42c80000
 80028a4:	43480000 	.word	0x43480000

080028a8 <LSM303AGR_ACC_SetOutputDataRate>:
{
 80028a8:	b508      	push	{r3, lr}
	if (pObj->acc_is_enabled == 1U) {
 80028aa:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d002      	beq.n	80028b8 <LSM303AGR_ACC_SetOutputDataRate+0x10>
		return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80028b2:	f7ff ff1b 	bl	80026ec <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
}
 80028b6:	bd08      	pop	{r3, pc}
		return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80028b8:	f7ff ffae 	bl	8002818 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 80028bc:	bd08      	pop	{r3, pc}

080028be <LSM303AGR_ACC_Init>:
{
 80028be:	b538      	push	{r3, r4, r5, lr}
 80028c0:	4605      	mov	r5, r0
	if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK) {
 80028c2:	f100 041c 	add.w	r4, r0, #28
 80028c6:	2101      	movs	r1, #1
 80028c8:	4620      	mov	r0, r4
 80028ca:	f000 fc86 	bl	80031da <lsm303agr_xl_block_data_update_set>
 80028ce:	b9b8      	cbnz	r0, 8002900 <LSM303AGR_ACC_Init+0x42>
	if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK) {
 80028d0:	2100      	movs	r1, #0
 80028d2:	4620      	mov	r0, r4
 80028d4:	f000 fd1f 	bl	8003316 <lsm303agr_xl_fifo_mode_set>
 80028d8:	b9a8      	cbnz	r0, 8002906 <LSM303AGR_ACC_Init+0x48>
	pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80028da:	2305      	movs	r3, #5
 80028dc:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK) {
 80028e0:	2100      	movs	r1, #0
 80028e2:	4620      	mov	r0, r4
 80028e4:	f000 fc2d 	bl	8003142 <lsm303agr_xl_data_rate_set>
 80028e8:	b980      	cbnz	r0, 800290c <LSM303AGR_ACC_Init+0x4e>
	if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK) {
 80028ea:	2100      	movs	r1, #0
 80028ec:	4620      	mov	r0, r4
 80028ee:	f000 fc4e 	bl	800318e <lsm303agr_xl_full_scale_set>
 80028f2:	4603      	mov	r3, r0
 80028f4:	b968      	cbnz	r0, 8002912 <LSM303AGR_ACC_Init+0x54>
	pObj->is_initialized = 1;
 80028f6:	2201      	movs	r2, #1
 80028f8:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd38      	pop	{r3, r4, r5, pc}
		return LSM303AGR_ERROR;
 8002900:	f04f 33ff 	mov.w	r3, #4294967295
 8002904:	e7fa      	b.n	80028fc <LSM303AGR_ACC_Init+0x3e>
		return LSM303AGR_ERROR;
 8002906:	f04f 33ff 	mov.w	r3, #4294967295
 800290a:	e7f7      	b.n	80028fc <LSM303AGR_ACC_Init+0x3e>
		return LSM303AGR_ERROR;
 800290c:	f04f 33ff 	mov.w	r3, #4294967295
 8002910:	e7f4      	b.n	80028fc <LSM303AGR_ACC_Init+0x3e>
		return LSM303AGR_ERROR;
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
 8002916:	e7f1      	b.n	80028fc <LSM303AGR_ACC_Init+0x3e>

08002918 <LSM303AGR_ACC_SetFullScale>:
{
 8002918:	b508      	push	{r3, lr}
		 : (FullScale <= 4) ? LSM303AGR_4g
 800291a:	2902      	cmp	r1, #2
 800291c:	dd05      	ble.n	800292a <LSM303AGR_ACC_SetFullScale+0x12>
 800291e:	2904      	cmp	r1, #4
 8002920:	dd0b      	ble.n	800293a <LSM303AGR_ACC_SetFullScale+0x22>
 8002922:	2908      	cmp	r1, #8
 8002924:	dc0b      	bgt.n	800293e <LSM303AGR_ACC_SetFullScale+0x26>
 8002926:	2102      	movs	r1, #2
 8002928:	e000      	b.n	800292c <LSM303AGR_ACC_SetFullScale+0x14>
 800292a:	2100      	movs	r1, #0
	if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK) {
 800292c:	301c      	adds	r0, #28
 800292e:	f000 fc2e 	bl	800318e <lsm303agr_xl_full_scale_set>
 8002932:	4603      	mov	r3, r0
 8002934:	b928      	cbnz	r0, 8002942 <LSM303AGR_ACC_SetFullScale+0x2a>
}
 8002936:	4618      	mov	r0, r3
 8002938:	bd08      	pop	{r3, pc}
		 : (FullScale <= 4) ? LSM303AGR_4g
 800293a:	2101      	movs	r1, #1
 800293c:	e7f6      	b.n	800292c <LSM303AGR_ACC_SetFullScale+0x14>
 800293e:	2103      	movs	r1, #3
 8002940:	e7f4      	b.n	800292c <LSM303AGR_ACC_SetFullScale+0x14>
		return LSM303AGR_ERROR;
 8002942:	f04f 33ff 	mov.w	r3, #4294967295
 8002946:	e7f6      	b.n	8002936 <LSM303AGR_ACC_SetFullScale+0x1e>

08002948 <LSM303AGR_ACC_ReadID>:
{
 8002948:	b508      	push	{r3, lr}
	if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK) {
 800294a:	301c      	adds	r0, #28
 800294c:	f000 fcbe 	bl	80032cc <lsm303agr_xl_device_id_get>
 8002950:	4603      	mov	r3, r0
 8002952:	b908      	cbnz	r0, 8002958 <LSM303AGR_ACC_ReadID+0x10>
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd08      	pop	{r3, pc}
		return LSM303AGR_ERROR;
 8002958:	f04f 33ff 	mov.w	r3, #4294967295
 800295c:	e7fa      	b.n	8002954 <LSM303AGR_ACC_ReadID+0xc>

0800295e <LSM303AGR_ACC_Disable>:
{
 800295e:	b538      	push	{r3, r4, r5, lr}
	if (pObj->acc_is_enabled == 0U) {
 8002960:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002964:	b913      	cbnz	r3, 800296c <LSM303AGR_ACC_Disable+0xe>
		return LSM303AGR_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	bd38      	pop	{r3, r4, r5, pc}
 800296c:	4604      	mov	r4, r0
	if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK) {
 800296e:	f100 051c 	add.w	r5, r0, #28
 8002972:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 8002976:	4628      	mov	r0, r5
 8002978:	f000 fbfa 	bl	8003170 <lsm303agr_xl_data_rate_get>
 800297c:	b948      	cbnz	r0, 8002992 <LSM303AGR_ACC_Disable+0x34>
	if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK) {
 800297e:	2100      	movs	r1, #0
 8002980:	4628      	mov	r0, r5
 8002982:	f000 fbde 	bl	8003142 <lsm303agr_xl_data_rate_set>
 8002986:	4603      	mov	r3, r0
 8002988:	b930      	cbnz	r0, 8002998 <LSM303AGR_ACC_Disable+0x3a>
	pObj->acc_is_enabled = 0;
 800298a:	2200      	movs	r2, #0
 800298c:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
	return LSM303AGR_OK;
 8002990:	e7ea      	b.n	8002968 <LSM303AGR_ACC_Disable+0xa>
		return LSM303AGR_ERROR;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	e7e7      	b.n	8002968 <LSM303AGR_ACC_Disable+0xa>
		return LSM303AGR_ERROR;
 8002998:	f04f 33ff 	mov.w	r3, #4294967295
 800299c:	e7e4      	b.n	8002968 <LSM303AGR_ACC_Disable+0xa>

0800299e <LSM303AGR_ACC_DeInit>:
{
 800299e:	b510      	push	{r4, lr}
 80029a0:	4604      	mov	r4, r0
	if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK) {
 80029a2:	f7ff ffdc 	bl	800295e <LSM303AGR_ACC_Disable>
 80029a6:	b938      	cbnz	r0, 80029b8 <LSM303AGR_ACC_DeInit+0x1a>
 80029a8:	4602      	mov	r2, r0
	pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	pObj->is_initialized = 0;
 80029b0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 80029b4:	4610      	mov	r0, r2
 80029b6:	bd10      	pop	{r4, pc}
		return LSM303AGR_ERROR;
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	e7fa      	b.n	80029b4 <LSM303AGR_ACC_DeInit+0x16>
	...

080029c0 <LSM303AGR_ACC_GetOutputDataRate>:
{
 80029c0:	b530      	push	{r4, r5, lr}
 80029c2:	b083      	sub	sp, #12
 80029c4:	460d      	mov	r5, r1
	if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK) {
 80029c6:	f100 041c 	add.w	r4, r0, #28
 80029ca:	f10d 0107 	add.w	r1, sp, #7
 80029ce:	4620      	mov	r0, r4
 80029d0:	f000 fb94 	bl	80030fc <lsm303agr_xl_operating_mode_get>
 80029d4:	2800      	cmp	r0, #0
 80029d6:	d15c      	bne.n	8002a92 <LSM303AGR_ACC_GetOutputDataRate+0xd2>
	if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK) {
 80029d8:	f10d 0106 	add.w	r1, sp, #6
 80029dc:	4620      	mov	r0, r4
 80029de:	f000 fbc7 	bl	8003170 <lsm303agr_xl_data_rate_get>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2800      	cmp	r0, #0
 80029e6:	d159      	bne.n	8002a9c <LSM303AGR_ACC_GetOutputDataRate+0xdc>
	if (op_mode == LSM303AGR_LP_8bit) { /* LP mode */
 80029e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80029ec:	2a02      	cmp	r2, #2
 80029ee:	d00a      	beq.n	8002a06 <LSM303AGR_ACC_GetOutputDataRate+0x46>
		switch (odr_low_level) {
 80029f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80029f4:	2a09      	cmp	r2, #9
 80029f6:	d857      	bhi.n	8002aa8 <LSM303AGR_ACC_GetOutputDataRate+0xe8>
 80029f8:	e8df f002 	tbb	[pc, r2]
 80029fc:	3936322f 	.word	0x3936322f
 8002a00:	45423f3c 	.word	0x45423f3c
 8002a04:	4856      	.short	0x4856
		switch (odr_low_level) {
 8002a06:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8002a0a:	2a09      	cmp	r2, #9
 8002a0c:	d849      	bhi.n	8002aa2 <LSM303AGR_ACC_GetOutputDataRate+0xe2>
 8002a0e:	e8df f002 	tbb	[pc, r2]
 8002a12:	0805      	.short	0x0805
 8002a14:	15120f0c 	.word	0x15120f0c
 8002a18:	211e1b18 	.word	0x211e1b18
			*Odr = 0.0f;
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	602a      	str	r2, [r5, #0]
			break;
 8002a20:	e039      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 1.0f;
 8002a22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a26:	602a      	str	r2, [r5, #0]
			break;
 8002a28:	e035      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 10.0f;
 8002a2a:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0xf0>)
 8002a2c:	602a      	str	r2, [r5, #0]
			break;
 8002a2e:	e032      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 25.0f;
 8002a30:	4a20      	ldr	r2, [pc, #128]	; (8002ab4 <LSM303AGR_ACC_GetOutputDataRate+0xf4>)
 8002a32:	602a      	str	r2, [r5, #0]
			break;
 8002a34:	e02f      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 50.0f;
 8002a36:	4a20      	ldr	r2, [pc, #128]	; (8002ab8 <LSM303AGR_ACC_GetOutputDataRate+0xf8>)
 8002a38:	602a      	str	r2, [r5, #0]
			break;
 8002a3a:	e02c      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 100.0f;
 8002a3c:	4a1f      	ldr	r2, [pc, #124]	; (8002abc <LSM303AGR_ACC_GetOutputDataRate+0xfc>)
 8002a3e:	602a      	str	r2, [r5, #0]
			break;
 8002a40:	e029      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 200.0f;
 8002a42:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <LSM303AGR_ACC_GetOutputDataRate+0x100>)
 8002a44:	602a      	str	r2, [r5, #0]
			break;
 8002a46:	e026      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 400.0f;
 8002a48:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <LSM303AGR_ACC_GetOutputDataRate+0x104>)
 8002a4a:	602a      	str	r2, [r5, #0]
			break;
 8002a4c:	e023      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 1620.0f;
 8002a4e:	4a1e      	ldr	r2, [pc, #120]	; (8002ac8 <LSM303AGR_ACC_GetOutputDataRate+0x108>)
 8002a50:	602a      	str	r2, [r5, #0]
			break;
 8002a52:	e020      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 5376.0f;
 8002a54:	4a1d      	ldr	r2, [pc, #116]	; (8002acc <LSM303AGR_ACC_GetOutputDataRate+0x10c>)
 8002a56:	602a      	str	r2, [r5, #0]
			break;
 8002a58:	e01d      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 0.0f;
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	602a      	str	r2, [r5, #0]
			break;
 8002a5e:	e01a      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 1.0f;
 8002a60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a64:	602a      	str	r2, [r5, #0]
			break;
 8002a66:	e016      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 10.0f;
 8002a68:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0xf0>)
 8002a6a:	602a      	str	r2, [r5, #0]
			break;
 8002a6c:	e013      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 25.0f;
 8002a6e:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <LSM303AGR_ACC_GetOutputDataRate+0xf4>)
 8002a70:	602a      	str	r2, [r5, #0]
			break;
 8002a72:	e010      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 50.0f;
 8002a74:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <LSM303AGR_ACC_GetOutputDataRate+0xf8>)
 8002a76:	602a      	str	r2, [r5, #0]
			break;
 8002a78:	e00d      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 100.0f;
 8002a7a:	4a10      	ldr	r2, [pc, #64]	; (8002abc <LSM303AGR_ACC_GetOutputDataRate+0xfc>)
 8002a7c:	602a      	str	r2, [r5, #0]
			break;
 8002a7e:	e00a      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 200.0f;
 8002a80:	4a0f      	ldr	r2, [pc, #60]	; (8002ac0 <LSM303AGR_ACC_GetOutputDataRate+0x100>)
 8002a82:	602a      	str	r2, [r5, #0]
			break;
 8002a84:	e007      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 400.0f;
 8002a86:	4a0f      	ldr	r2, [pc, #60]	; (8002ac4 <LSM303AGR_ACC_GetOutputDataRate+0x104>)
 8002a88:	602a      	str	r2, [r5, #0]
			break;
 8002a8a:	e004      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			*Odr = 1344.0f;
 8002a8c:	4a10      	ldr	r2, [pc, #64]	; (8002ad0 <LSM303AGR_ACC_GetOutputDataRate+0x110>)
 8002a8e:	602a      	str	r2, [r5, #0]
			break;
 8002a90:	e001      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
		return LSM303AGR_ERROR;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	b003      	add	sp, #12
 8002a9a:	bd30      	pop	{r4, r5, pc}
		return LSM303AGR_ERROR;
 8002a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa0:	e7f9      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			ret = LSM303AGR_ERROR;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa6:	e7f6      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
			ret = LSM303AGR_ERROR;
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aac:	e7f3      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
 8002aae:	bf00      	nop
 8002ab0:	41200000 	.word	0x41200000
 8002ab4:	41c80000 	.word	0x41c80000
 8002ab8:	42480000 	.word	0x42480000
 8002abc:	42c80000 	.word	0x42c80000
 8002ac0:	43480000 	.word	0x43480000
 8002ac4:	43c80000 	.word	0x43c80000
 8002ac8:	44ca8000 	.word	0x44ca8000
 8002acc:	45a80000 	.word	0x45a80000
 8002ad0:	44a80000 	.word	0x44a80000

08002ad4 <LSM303AGR_ACC_GetSensitivityHR>:
{
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	460c      	mov	r4, r1
	if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK) {
 8002ada:	f10d 0107 	add.w	r1, sp, #7
 8002ade:	301c      	adds	r0, #28
 8002ae0:	f000 fb6c 	bl	80031bc <lsm303agr_xl_full_scale_get>
 8002ae4:	b9b0      	cbnz	r0, 8002b14 <LSM303AGR_ACC_GetSensitivityHR+0x40>
 8002ae6:	4602      	mov	r2, r0
	switch (fullscale) {
 8002ae8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d814      	bhi.n	8002b1a <LSM303AGR_ACC_GetSensitivityHR+0x46>
 8002af0:	e8df f003 	tbb	[pc, r3]
 8002af4:	0d0a0702 	.word	0x0d0a0702
		*Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <LSM303AGR_ACC_GetSensitivityHR+0x4c>)
 8002afa:	6023      	str	r3, [r4, #0]
}
 8002afc:	4610      	mov	r0, r2
 8002afe:	b002      	add	sp, #8
 8002b00:	bd10      	pop	{r4, pc}
		*Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <LSM303AGR_ACC_GetSensitivityHR+0x50>)
 8002b04:	6023      	str	r3, [r4, #0]
		break;
 8002b06:	e7f9      	b.n	8002afc <LSM303AGR_ACC_GetSensitivityHR+0x28>
		*Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8002b08:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <LSM303AGR_ACC_GetSensitivityHR+0x54>)
 8002b0a:	6023      	str	r3, [r4, #0]
		break;
 8002b0c:	e7f6      	b.n	8002afc <LSM303AGR_ACC_GetSensitivityHR+0x28>
		*Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <LSM303AGR_ACC_GetSensitivityHR+0x58>)
 8002b10:	6023      	str	r3, [r4, #0]
		break;
 8002b12:	e7f3      	b.n	8002afc <LSM303AGR_ACC_GetSensitivityHR+0x28>
		return LSM303AGR_ERROR;
 8002b14:	f04f 32ff 	mov.w	r2, #4294967295
 8002b18:	e7f0      	b.n	8002afc <LSM303AGR_ACC_GetSensitivityHR+0x28>
		ret = LSM303AGR_ERROR;
 8002b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1e:	e7ed      	b.n	8002afc <LSM303AGR_ACC_GetSensitivityHR+0x28>
 8002b20:	3f7ae148 	.word	0x3f7ae148
 8002b24:	3ff9999a 	.word	0x3ff9999a
 8002b28:	4079999a 	.word	0x4079999a
 8002b2c:	413b851f 	.word	0x413b851f

08002b30 <LSM303AGR_ACC_GetSensitivityNM>:
{
 8002b30:	b510      	push	{r4, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	460c      	mov	r4, r1
	if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK) {
 8002b36:	f10d 0107 	add.w	r1, sp, #7
 8002b3a:	301c      	adds	r0, #28
 8002b3c:	f000 fb3e 	bl	80031bc <lsm303agr_xl_full_scale_get>
 8002b40:	b9b0      	cbnz	r0, 8002b70 <LSM303AGR_ACC_GetSensitivityNM+0x40>
 8002b42:	4602      	mov	r2, r0
	switch (fullscale) {
 8002b44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d814      	bhi.n	8002b76 <LSM303AGR_ACC_GetSensitivityNM+0x46>
 8002b4c:	e8df f003 	tbb	[pc, r3]
 8002b50:	0d0a0702 	.word	0x0d0a0702
		*Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <LSM303AGR_ACC_GetSensitivityNM+0x4c>)
 8002b56:	6023      	str	r3, [r4, #0]
}
 8002b58:	4610      	mov	r0, r2
 8002b5a:	b002      	add	sp, #8
 8002b5c:	bd10      	pop	{r4, pc}
		*Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <LSM303AGR_ACC_GetSensitivityNM+0x50>)
 8002b60:	6023      	str	r3, [r4, #0]
		break;
 8002b62:	e7f9      	b.n	8002b58 <LSM303AGR_ACC_GetSensitivityNM+0x28>
		*Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <LSM303AGR_ACC_GetSensitivityNM+0x54>)
 8002b66:	6023      	str	r3, [r4, #0]
		break;
 8002b68:	e7f6      	b.n	8002b58 <LSM303AGR_ACC_GetSensitivityNM+0x28>
		*Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <LSM303AGR_ACC_GetSensitivityNM+0x58>)
 8002b6c:	6023      	str	r3, [r4, #0]
		break;
 8002b6e:	e7f3      	b.n	8002b58 <LSM303AGR_ACC_GetSensitivityNM+0x28>
		return LSM303AGR_ERROR;
 8002b70:	f04f 32ff 	mov.w	r2, #4294967295
 8002b74:	e7f0      	b.n	8002b58 <LSM303AGR_ACC_GetSensitivityNM+0x28>
		ret = LSM303AGR_ERROR;
 8002b76:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7a:	e7ed      	b.n	8002b58 <LSM303AGR_ACC_GetSensitivityNM+0x28>
 8002b7c:	4079999a 	.word	0x4079999a
 8002b80:	40fa3d71 	.word	0x40fa3d71
 8002b84:	417a147b 	.word	0x417a147b
 8002b88:	423b999a 	.word	0x423b999a

08002b8c <LSM303AGR_ACC_GetSensitivityLP>:
{
 8002b8c:	b510      	push	{r4, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	460c      	mov	r4, r1
	if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK) {
 8002b92:	f10d 0107 	add.w	r1, sp, #7
 8002b96:	301c      	adds	r0, #28
 8002b98:	f000 fb10 	bl	80031bc <lsm303agr_xl_full_scale_get>
 8002b9c:	b9b0      	cbnz	r0, 8002bcc <LSM303AGR_ACC_GetSensitivityLP+0x40>
 8002b9e:	4602      	mov	r2, r0
	switch (fullscale) {
 8002ba0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d814      	bhi.n	8002bd2 <LSM303AGR_ACC_GetSensitivityLP+0x46>
 8002ba8:	e8df f003 	tbb	[pc, r3]
 8002bac:	0d0a0702 	.word	0x0d0a0702
		*Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <LSM303AGR_ACC_GetSensitivityLP+0x4c>)
 8002bb2:	6023      	str	r3, [r4, #0]
}
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	b002      	add	sp, #8
 8002bb8:	bd10      	pop	{r4, pc}
		*Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <LSM303AGR_ACC_GetSensitivityLP+0x50>)
 8002bbc:	6023      	str	r3, [r4, #0]
		break;
 8002bbe:	e7f9      	b.n	8002bb4 <LSM303AGR_ACC_GetSensitivityLP+0x28>
		*Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <LSM303AGR_ACC_GetSensitivityLP+0x54>)
 8002bc2:	6023      	str	r3, [r4, #0]
		break;
 8002bc4:	e7f6      	b.n	8002bb4 <LSM303AGR_ACC_GetSensitivityLP+0x28>
		*Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <LSM303AGR_ACC_GetSensitivityLP+0x58>)
 8002bc8:	6023      	str	r3, [r4, #0]
		break;
 8002bca:	e7f3      	b.n	8002bb4 <LSM303AGR_ACC_GetSensitivityLP+0x28>
		return LSM303AGR_ERROR;
 8002bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd0:	e7f0      	b.n	8002bb4 <LSM303AGR_ACC_GetSensitivityLP+0x28>
		ret = LSM303AGR_ERROR;
 8002bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd6:	e7ed      	b.n	8002bb4 <LSM303AGR_ACC_GetSensitivityLP+0x28>
 8002bd8:	417a147b 	.word	0x417a147b
 8002bdc:	41fa147b 	.word	0x41fa147b
 8002be0:	427a147b 	.word	0x427a147b
 8002be4:	433b947b 	.word	0x433b947b

08002be8 <LSM303AGR_ACC_GetSensitivity>:
{
 8002be8:	b530      	push	{r4, r5, lr}
 8002bea:	b083      	sub	sp, #12
 8002bec:	4604      	mov	r4, r0
 8002bee:	460d      	mov	r5, r1
	if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK) {
 8002bf0:	f10d 0107 	add.w	r1, sp, #7
 8002bf4:	301c      	adds	r0, #28
 8002bf6:	f000 fa81 	bl	80030fc <lsm303agr_xl_operating_mode_get>
 8002bfa:	bb48      	cbnz	r0, 8002c50 <LSM303AGR_ACC_GetSensitivity+0x68>
	switch (op_mode) {
 8002bfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d011      	beq.n	8002c28 <LSM303AGR_ACC_GetSensitivity+0x40>
 8002c04:	b133      	cbz	r3, 8002c14 <LSM303AGR_ACC_GetSensitivity+0x2c>
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d018      	beq.n	8002c3c <LSM303AGR_ACC_GetSensitivity+0x54>
		ret = LSM303AGR_ERROR;
 8002c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	b003      	add	sp, #12
 8002c12:	bd30      	pop	{r4, r5, pc}
		if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK) {
 8002c14:	4629      	mov	r1, r5
 8002c16:	4620      	mov	r0, r4
 8002c18:	f7ff ff5c 	bl	8002ad4 <LSM303AGR_ACC_GetSensitivityHR>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d0f5      	beq.n	8002c0e <LSM303AGR_ACC_GetSensitivity+0x26>
			return LSM303AGR_ERROR;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
 8002c26:	e7f2      	b.n	8002c0e <LSM303AGR_ACC_GetSensitivity+0x26>
		if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK) {
 8002c28:	4629      	mov	r1, r5
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f7ff ff80 	bl	8002b30 <LSM303AGR_ACC_GetSensitivityNM>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d0eb      	beq.n	8002c0e <LSM303AGR_ACC_GetSensitivity+0x26>
			return LSM303AGR_ERROR;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3a:	e7e8      	b.n	8002c0e <LSM303AGR_ACC_GetSensitivity+0x26>
		if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK) {
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f7ff ffa4 	bl	8002b8c <LSM303AGR_ACC_GetSensitivityLP>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d0e1      	beq.n	8002c0e <LSM303AGR_ACC_GetSensitivity+0x26>
			return LSM303AGR_ERROR;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4e:	e7de      	b.n	8002c0e <LSM303AGR_ACC_GetSensitivity+0x26>
		return LSM303AGR_ERROR;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
 8002c54:	e7db      	b.n	8002c0e <LSM303AGR_ACC_GetSensitivity+0x26>

08002c56 <LSM303AGR_ACC_GetFullScale>:
{
 8002c56:	b510      	push	{r4, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	460c      	mov	r4, r1
	if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK) {
 8002c5c:	f10d 0107 	add.w	r1, sp, #7
 8002c60:	301c      	adds	r0, #28
 8002c62:	f000 faab 	bl	80031bc <lsm303agr_xl_full_scale_get>
 8002c66:	b9b0      	cbnz	r0, 8002c96 <LSM303AGR_ACC_GetFullScale+0x40>
 8002c68:	4602      	mov	r2, r0
	switch (fs_low_level) {
 8002c6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d814      	bhi.n	8002c9c <LSM303AGR_ACC_GetFullScale+0x46>
 8002c72:	e8df f003 	tbb	[pc, r3]
 8002c76:	0702      	.short	0x0702
 8002c78:	0d0a      	.short	0x0d0a
		*FullScale = 2;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	6023      	str	r3, [r4, #0]
}
 8002c7e:	4610      	mov	r0, r2
 8002c80:	b002      	add	sp, #8
 8002c82:	bd10      	pop	{r4, pc}
		*FullScale = 4;
 8002c84:	2304      	movs	r3, #4
 8002c86:	6023      	str	r3, [r4, #0]
		break;
 8002c88:	e7f9      	b.n	8002c7e <LSM303AGR_ACC_GetFullScale+0x28>
		*FullScale = 8;
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	6023      	str	r3, [r4, #0]
		break;
 8002c8e:	e7f6      	b.n	8002c7e <LSM303AGR_ACC_GetFullScale+0x28>
		*FullScale = 16;
 8002c90:	2310      	movs	r3, #16
 8002c92:	6023      	str	r3, [r4, #0]
		break;
 8002c94:	e7f3      	b.n	8002c7e <LSM303AGR_ACC_GetFullScale+0x28>
		return LSM303AGR_ERROR;
 8002c96:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9a:	e7f0      	b.n	8002c7e <LSM303AGR_ACC_GetFullScale+0x28>
		ret = LSM303AGR_ERROR;
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	e7ed      	b.n	8002c7e <LSM303AGR_ACC_GetFullScale+0x28>

08002ca2 <LSM303AGR_ACC_GetAxesRaw>:
{
 8002ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	460d      	mov	r5, r1
	if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK) {
 8002ca8:	f100 071c 	add.w	r7, r0, #28
 8002cac:	f10d 0107 	add.w	r1, sp, #7
 8002cb0:	4638      	mov	r0, r7
 8002cb2:	f000 fa23 	bl	80030fc <lsm303agr_xl_operating_mode_get>
 8002cb6:	bb58      	cbnz	r0, 8002d10 <LSM303AGR_ACC_GetAxesRaw+0x6e>
 8002cb8:	4604      	mov	r4, r0
	switch (op_mode) {
 8002cba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d024      	beq.n	8002d0c <LSM303AGR_ACC_GetAxesRaw+0x6a>
 8002cc2:	b12b      	cbz	r3, 8002cd0 <LSM303AGR_ACC_GetAxesRaw+0x2e>
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d01e      	beq.n	8002d06 <LSM303AGR_ACC_GetAxesRaw+0x64>
		ret = LSM303AGR_ERROR;
 8002cc8:	f04f 34ff 	mov.w	r4, #4294967295
	int16_t divisor = 1;
 8002ccc:	2601      	movs	r6, #1
		break;
 8002cce:	e000      	b.n	8002cd2 <LSM303AGR_ACC_GetAxesRaw+0x30>
		divisor = 16;
 8002cd0:	2610      	movs	r6, #16
	if (ret == LSM303AGR_ERROR) {
 8002cd2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002cd6:	d013      	beq.n	8002d00 <LSM303AGR_ACC_GetAxesRaw+0x5e>
	if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK) {
 8002cd8:	a902      	add	r1, sp, #8
 8002cda:	4638      	mov	r0, r7
 8002cdc:	f000 fa94 	bl	8003208 <lsm303agr_acceleration_raw_get>
 8002ce0:	b9c8      	cbnz	r0, 8002d16 <LSM303AGR_ACC_GetAxesRaw+0x74>
	Value->x = (data_raw.i16bit[0] / divisor);
 8002ce2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8002ce6:	fb93 f3f6 	sdiv	r3, r3, r6
 8002cea:	802b      	strh	r3, [r5, #0]
	Value->y = (data_raw.i16bit[1] / divisor);
 8002cec:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8002cf0:	fb93 f3f6 	sdiv	r3, r3, r6
 8002cf4:	806b      	strh	r3, [r5, #2]
	Value->z = (data_raw.i16bit[2] / divisor);
 8002cf6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002cfa:	fb93 f6f6 	sdiv	r6, r3, r6
 8002cfe:	80ae      	strh	r6, [r5, #4]
}
 8002d00:	4620      	mov	r0, r4
 8002d02:	b005      	add	sp, #20
 8002d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		divisor = 256;
 8002d06:	f44f 7680 	mov.w	r6, #256	; 0x100
		break;
 8002d0a:	e7e2      	b.n	8002cd2 <LSM303AGR_ACC_GetAxesRaw+0x30>
		divisor = 64;
 8002d0c:	2640      	movs	r6, #64	; 0x40
 8002d0e:	e7e0      	b.n	8002cd2 <LSM303AGR_ACC_GetAxesRaw+0x30>
		return LSM303AGR_ERROR;
 8002d10:	f04f 34ff 	mov.w	r4, #4294967295
 8002d14:	e7f4      	b.n	8002d00 <LSM303AGR_ACC_GetAxesRaw+0x5e>
		return LSM303AGR_ERROR;
 8002d16:	f04f 34ff 	mov.w	r4, #4294967295
 8002d1a:	e7f1      	b.n	8002d00 <LSM303AGR_ACC_GetAxesRaw+0x5e>

08002d1c <LSM303AGR_ACC_GetAxes>:
{
 8002d1c:	b530      	push	{r4, r5, lr}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	4605      	mov	r5, r0
 8002d22:	460c      	mov	r4, r1
	float sensitivity = 0.0f;
 8002d24:	2300      	movs	r3, #0
 8002d26:	9301      	str	r3, [sp, #4]
	if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK) {
 8002d28:	a902      	add	r1, sp, #8
 8002d2a:	f7ff ffba 	bl	8002ca2 <LSM303AGR_ACC_GetAxesRaw>
 8002d2e:	bb70      	cbnz	r0, 8002d8e <LSM303AGR_ACC_GetAxes+0x72>
	if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK) {
 8002d30:	a901      	add	r1, sp, #4
 8002d32:	4628      	mov	r0, r5
 8002d34:	f7ff ff58 	bl	8002be8 <LSM303AGR_ACC_GetSensitivity>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	bb58      	cbnz	r0, 8002d94 <LSM303AGR_ACC_GetAxes+0x78>
	Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002d3c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8002d40:	ee07 2a10 	vmov	s14, r2
 8002d44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d48:	eddd 7a01 	vldr	s15, [sp, #4]
 8002d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d50:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002d54:	ed84 7a00 	vstr	s14, [r4]
	Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002d58:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8002d5c:	ee07 2a10 	vmov	s14, r2
 8002d60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d68:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002d6c:	ed84 7a01 	vstr	s14, [r4, #4]
	Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002d70:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8002d74:	ee07 2a10 	vmov	s14, r2
 8002d78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d84:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	b005      	add	sp, #20
 8002d8c:	bd30      	pop	{r4, r5, pc}
		return LSM303AGR_ERROR;
 8002d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d92:	e7f9      	b.n	8002d88 <LSM303AGR_ACC_GetAxes+0x6c>
		return LSM303AGR_ERROR;
 8002d94:	f04f 33ff 	mov.w	r3, #4294967295
 8002d98:	e7f6      	b.n	8002d88 <LSM303AGR_ACC_GetAxes+0x6c>

08002d9a <LSM303AGR_MAG_Enable>:
	if (pObj->mag_is_enabled == 1U) {
 8002d9a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d00c      	beq.n	8002dbc <LSM303AGR_MAG_Enable+0x22>
{
 8002da2:	b510      	push	{r4, lr}
 8002da4:	4604      	mov	r4, r0
	if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK) {
 8002da6:	2100      	movs	r1, #0
 8002da8:	301c      	adds	r0, #28
 8002daa:	f000 fa34 	bl	8003216 <lsm303agr_mag_operating_mode_set>
 8002dae:	4603      	mov	r3, r0
 8002db0:	b938      	cbnz	r0, 8002dc2 <LSM303AGR_MAG_Enable+0x28>
	pObj->mag_is_enabled = 1;
 8002db2:	2201      	movs	r2, #1
 8002db4:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	bd10      	pop	{r4, pc}
		return LSM303AGR_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	4770      	bx	lr
		return LSM303AGR_ERROR;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	e7f7      	b.n	8002db8 <LSM303AGR_MAG_Enable+0x1e>

08002dc8 <LSM303AGR_MAG_Disable>:
	if (pObj->mag_is_enabled == 0U) {
 8002dc8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002dcc:	b913      	cbnz	r3, 8002dd4 <LSM303AGR_MAG_Disable+0xc>
		return LSM303AGR_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	4770      	bx	lr
{
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	4604      	mov	r4, r0
	if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK) {
 8002dd8:	2102      	movs	r1, #2
 8002dda:	301c      	adds	r0, #28
 8002ddc:	f000 fa1b 	bl	8003216 <lsm303agr_mag_operating_mode_set>
 8002de0:	4603      	mov	r3, r0
 8002de2:	b920      	cbnz	r0, 8002dee <LSM303AGR_MAG_Disable+0x26>
	pObj->mag_is_enabled = 0;
 8002de4:	2200      	movs	r2, #0
 8002de6:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	bd10      	pop	{r4, pc}
		return LSM303AGR_ERROR;
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295
 8002df2:	e7fa      	b.n	8002dea <LSM303AGR_MAG_Disable+0x22>

08002df4 <LSM303AGR_MAG_DeInit>:
{
 8002df4:	b510      	push	{r4, lr}
 8002df6:	4604      	mov	r4, r0
	if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK) {
 8002df8:	f7ff ffe6 	bl	8002dc8 <LSM303AGR_MAG_Disable>
 8002dfc:	b928      	cbnz	r0, 8002e0a <LSM303AGR_MAG_DeInit+0x16>
 8002dfe:	4603      	mov	r3, r0
	pObj->is_initialized = 0;
 8002e00:	2200      	movs	r2, #0
 8002e02:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	bd10      	pop	{r4, pc}
		return LSM303AGR_ERROR;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	e7fa      	b.n	8002e06 <LSM303AGR_MAG_DeInit+0x12>

08002e10 <LSM303AGR_MAG_SetOutputDataRate>:
{
 8002e10:	b508      	push	{r3, lr}
		  : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002e12:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002e16:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1e:	d90f      	bls.n	8002e40 <LSM303AGR_MAG_SetOutputDataRate+0x30>
 8002e20:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8002e24:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2c:	d910      	bls.n	8002e50 <LSM303AGR_MAG_SetOutputDataRate+0x40>
 8002e2e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002e60 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002e32:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e3a:	d80b      	bhi.n	8002e54 <LSM303AGR_MAG_SetOutputDataRate+0x44>
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	e000      	b.n	8002e42 <LSM303AGR_MAG_SetOutputDataRate+0x32>
 8002e40:	2100      	movs	r1, #0
	if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK) {
 8002e42:	301c      	adds	r0, #28
 8002e44:	f000 f9fe 	bl	8003244 <lsm303agr_mag_data_rate_set>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	b928      	cbnz	r0, 8002e58 <LSM303AGR_MAG_SetOutputDataRate+0x48>
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	bd08      	pop	{r3, pc}
		  : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002e50:	2101      	movs	r1, #1
 8002e52:	e7f6      	b.n	8002e42 <LSM303AGR_MAG_SetOutputDataRate+0x32>
 8002e54:	2103      	movs	r1, #3
 8002e56:	e7f4      	b.n	8002e42 <LSM303AGR_MAG_SetOutputDataRate+0x32>
		return LSM303AGR_ERROR;
 8002e58:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5c:	e7f6      	b.n	8002e4c <LSM303AGR_MAG_SetOutputDataRate+0x3c>
 8002e5e:	bf00      	nop
 8002e60:	42480000 	.word	0x42480000

08002e64 <LSM303AGR_MAG_Init>:
{
 8002e64:	b538      	push	{r3, r4, r5, lr}
 8002e66:	4605      	mov	r5, r0
	if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK) {
 8002e68:	f100 041c 	add.w	r4, r0, #28
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f000 fa0e 	bl	8003290 <lsm303agr_mag_block_data_update_set>
 8002e74:	b9a0      	cbnz	r0, 8002ea0 <LSM303AGR_MAG_Init+0x3c>
	if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK) {
 8002e76:	2102      	movs	r1, #2
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f000 f9cc 	bl	8003216 <lsm303agr_mag_operating_mode_set>
 8002e7e:	b990      	cbnz	r0, 8002ea6 <LSM303AGR_MAG_Init+0x42>
	if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK) {
 8002e80:	2103      	movs	r1, #3
 8002e82:	4620      	mov	r0, r4
 8002e84:	f000 f9de 	bl	8003244 <lsm303agr_mag_data_rate_set>
 8002e88:	b980      	cbnz	r0, 8002eac <LSM303AGR_MAG_Init+0x48>
	if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK) {
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	f000 fa2b 	bl	80032e8 <lsm303agr_mag_self_test_set>
 8002e92:	4603      	mov	r3, r0
 8002e94:	b968      	cbnz	r0, 8002eb2 <LSM303AGR_MAG_Init+0x4e>
	pObj->is_initialized = 1;
 8002e96:	2201      	movs	r2, #1
 8002e98:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd38      	pop	{r3, r4, r5, pc}
		return LSM303AGR_ERROR;
 8002ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea4:	e7fa      	b.n	8002e9c <LSM303AGR_MAG_Init+0x38>
		return LSM303AGR_ERROR;
 8002ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eaa:	e7f7      	b.n	8002e9c <LSM303AGR_MAG_Init+0x38>
		return LSM303AGR_ERROR;
 8002eac:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb0:	e7f4      	b.n	8002e9c <LSM303AGR_MAG_Init+0x38>
		return LSM303AGR_ERROR;
 8002eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb6:	e7f1      	b.n	8002e9c <LSM303AGR_MAG_Init+0x38>

08002eb8 <LSM303AGR_MAG_ReadID>:
{
 8002eb8:	b508      	push	{r3, lr}
	if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK) {
 8002eba:	301c      	adds	r0, #28
 8002ebc:	f000 fa0d 	bl	80032da <lsm303agr_mag_device_id_get>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	b908      	cbnz	r0, 8002ec8 <LSM303AGR_MAG_ReadID+0x10>
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	bd08      	pop	{r3, pc}
		return LSM303AGR_ERROR;
 8002ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ecc:	e7fa      	b.n	8002ec4 <LSM303AGR_MAG_ReadID+0xc>
	...

08002ed0 <LSM303AGR_MAG_GetOutputDataRate>:
{
 8002ed0:	b510      	push	{r4, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	460c      	mov	r4, r1
	if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK) {
 8002ed6:	f10d 0107 	add.w	r1, sp, #7
 8002eda:	301c      	adds	r0, #28
 8002edc:	f000 f9c9 	bl	8003272 <lsm303agr_mag_data_rate_get>
 8002ee0:	b9b0      	cbnz	r0, 8002f10 <LSM303AGR_MAG_GetOutputDataRate+0x40>
 8002ee2:	4602      	mov	r2, r0
	switch (odr_low_level) {
 8002ee4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d814      	bhi.n	8002f16 <LSM303AGR_MAG_GetOutputDataRate+0x46>
 8002eec:	e8df f003 	tbb	[pc, r3]
 8002ef0:	0d0a0702 	.word	0x0d0a0702
		*Odr = 10.0f;
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <LSM303AGR_MAG_GetOutputDataRate+0x4c>)
 8002ef6:	6023      	str	r3, [r4, #0]
}
 8002ef8:	4610      	mov	r0, r2
 8002efa:	b002      	add	sp, #8
 8002efc:	bd10      	pop	{r4, pc}
		*Odr = 20.0f;
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <LSM303AGR_MAG_GetOutputDataRate+0x50>)
 8002f00:	6023      	str	r3, [r4, #0]
		break;
 8002f02:	e7f9      	b.n	8002ef8 <LSM303AGR_MAG_GetOutputDataRate+0x28>
		*Odr = 50.0f;
 8002f04:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <LSM303AGR_MAG_GetOutputDataRate+0x54>)
 8002f06:	6023      	str	r3, [r4, #0]
		break;
 8002f08:	e7f6      	b.n	8002ef8 <LSM303AGR_MAG_GetOutputDataRate+0x28>
		*Odr = 100.0f;
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <LSM303AGR_MAG_GetOutputDataRate+0x58>)
 8002f0c:	6023      	str	r3, [r4, #0]
		break;
 8002f0e:	e7f3      	b.n	8002ef8 <LSM303AGR_MAG_GetOutputDataRate+0x28>
		return LSM303AGR_ERROR;
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295
 8002f14:	e7f0      	b.n	8002ef8 <LSM303AGR_MAG_GetOutputDataRate+0x28>
		ret = LSM303AGR_ERROR;
 8002f16:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1a:	e7ed      	b.n	8002ef8 <LSM303AGR_MAG_GetOutputDataRate+0x28>
 8002f1c:	41200000 	.word	0x41200000
 8002f20:	41a00000 	.word	0x41a00000
 8002f24:	42480000 	.word	0x42480000
 8002f28:	42c80000 	.word	0x42c80000

08002f2c <LSM303AGR_MAG_GetAxesRaw>:
{
 8002f2c:	b510      	push	{r4, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	460c      	mov	r4, r1
	if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK) {
 8002f32:	4669      	mov	r1, sp
 8002f34:	301c      	adds	r0, #28
 8002f36:	f000 f9c2 	bl	80032be <lsm303agr_magnetic_raw_get>
 8002f3a:	b960      	cbnz	r0, 8002f56 <LSM303AGR_MAG_GetAxesRaw+0x2a>
 8002f3c:	4603      	mov	r3, r0
	Value->x = data_raw.i16bit[0];
 8002f3e:	f9bd 2000 	ldrsh.w	r2, [sp]
 8002f42:	8022      	strh	r2, [r4, #0]
	Value->y = data_raw.i16bit[1];
 8002f44:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8002f48:	8062      	strh	r2, [r4, #2]
	Value->z = data_raw.i16bit[2];
 8002f4a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002f4e:	80a2      	strh	r2, [r4, #4]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	b002      	add	sp, #8
 8002f54:	bd10      	pop	{r4, pc}
		return LSM303AGR_ERROR;
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5a:	e7f9      	b.n	8002f50 <LSM303AGR_MAG_GetAxesRaw+0x24>

08002f5c <LSM303AGR_MAG_GetAxes>:
{
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	4606      	mov	r6, r0
 8002f62:	460c      	mov	r4, r1
	if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK) {
 8002f64:	a902      	add	r1, sp, #8
 8002f66:	301c      	adds	r0, #28
 8002f68:	f000 f9a9 	bl	80032be <lsm303agr_magnetic_raw_get>
 8002f6c:	bb68      	cbnz	r0, 8002fca <LSM303AGR_MAG_GetAxes+0x6e>
 8002f6e:	4605      	mov	r5, r0
	(void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8002f70:	a901      	add	r1, sp, #4
 8002f72:	4630      	mov	r0, r6
 8002f74:	f7ff fbae 	bl	80026d4 <LSM303AGR_MAG_GetSensitivity>
	MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002f78:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8002f7c:	ee07 3a10 	vmov	s14, r3
 8002f80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f84:	eddd 7a01 	vldr	s15, [sp, #4]
 8002f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f8c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002f90:	ed84 7a00 	vstr	s14, [r4]
	MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002f94:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8002f98:	ee07 3a10 	vmov	s14, r3
 8002f9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fa4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002fa8:	ed84 7a01 	vstr	s14, [r4, #4]
	MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002fac:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002fb0:	ee07 3a10 	vmov	s14, r3
 8002fb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fc0:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bd70      	pop	{r4, r5, r6, pc}
		return LSM303AGR_ERROR;
 8002fca:	f04f 35ff 	mov.w	r5, #4294967295
 8002fce:	e7f9      	b.n	8002fc4 <LSM303AGR_MAG_GetAxes+0x68>

08002fd0 <LSM303AGR_ACC_Write_Reg>:
{
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	ac02      	add	r4, sp, #8
 8002fd6:	f804 2d01 	strb.w	r2, [r4, #-1]!
	if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK) {
 8002fda:	2301      	movs	r3, #1
 8002fdc:	4622      	mov	r2, r4
 8002fde:	301c      	adds	r0, #28
 8002fe0:	f000 f887 	bl	80030f2 <lsm303agr_write_reg>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	b910      	cbnz	r0, 8002fee <LSM303AGR_ACC_Write_Reg+0x1e>
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	b002      	add	sp, #8
 8002fec:	bd10      	pop	{r4, pc}
		return LSM303AGR_ERROR;
 8002fee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff2:	e7f9      	b.n	8002fe8 <LSM303AGR_ACC_Write_Reg+0x18>

08002ff4 <LSM303AGR_ACC_RegisterBusIO>:
	if (pObj == NULL) {
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	d02c      	beq.n	8003052 <LSM303AGR_ACC_RegisterBusIO+0x5e>
{
 8002ff8:	b510      	push	{r4, lr}
 8002ffa:	4604      	mov	r4, r0
		pObj->IO.Init = pIO->Init;
 8002ffc:	680a      	ldr	r2, [r1, #0]
 8002ffe:	6002      	str	r2, [r0, #0]
		pObj->IO.DeInit = pIO->DeInit;
 8003000:	6848      	ldr	r0, [r1, #4]
 8003002:	6060      	str	r0, [r4, #4]
		pObj->IO.BusType = pIO->BusType;
 8003004:	6888      	ldr	r0, [r1, #8]
 8003006:	60a0      	str	r0, [r4, #8]
		pObj->IO.Address = pIO->Address;
 8003008:	7b08      	ldrb	r0, [r1, #12]
 800300a:	7320      	strb	r0, [r4, #12]
		pObj->IO.WriteReg = pIO->WriteReg;
 800300c:	6908      	ldr	r0, [r1, #16]
 800300e:	6120      	str	r0, [r4, #16]
		pObj->IO.ReadReg = pIO->ReadReg;
 8003010:	6948      	ldr	r0, [r1, #20]
 8003012:	6160      	str	r0, [r4, #20]
		pObj->IO.GetTick = pIO->GetTick;
 8003014:	6989      	ldr	r1, [r1, #24]
 8003016:	61a1      	str	r1, [r4, #24]
		pObj->Ctx.read_reg = ReadAccRegWrap;
 8003018:	4913      	ldr	r1, [pc, #76]	; (8003068 <LSM303AGR_ACC_RegisterBusIO+0x74>)
 800301a:	6221      	str	r1, [r4, #32]
		pObj->Ctx.write_reg = WriteAccRegWrap;
 800301c:	4913      	ldr	r1, [pc, #76]	; (800306c <LSM303AGR_ACC_RegisterBusIO+0x78>)
 800301e:	61e1      	str	r1, [r4, #28]
		pObj->Ctx.handle = pObj;
 8003020:	6264      	str	r4, [r4, #36]	; 0x24
		if (pObj->IO.Init == NULL) {
 8003022:	b1d2      	cbz	r2, 800305a <LSM303AGR_ACC_RegisterBusIO+0x66>
		}else if (pObj->IO.Init() != LSM303AGR_OK) {
 8003024:	4790      	blx	r2
 8003026:	4603      	mov	r3, r0
 8003028:	b9d0      	cbnz	r0, 8003060 <LSM303AGR_ACC_RegisterBusIO+0x6c>
			if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) { /* SPI 3-Wires */
 800302a:	68a2      	ldr	r2, [r4, #8]
 800302c:	2a01      	cmp	r2, #1
 800302e:	d001      	beq.n	8003034 <LSM303AGR_ACC_RegisterBusIO+0x40>
}
 8003030:	4618      	mov	r0, r3
 8003032:	bd10      	pop	{r4, pc}
				if (pObj->is_initialized == 0U) {
 8003034:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003038:	2a00      	cmp	r2, #0
 800303a:	d1f9      	bne.n	8003030 <LSM303AGR_ACC_RegisterBusIO+0x3c>
					if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK) {
 800303c:	2201      	movs	r2, #1
 800303e:	2123      	movs	r1, #35	; 0x23
 8003040:	4620      	mov	r0, r4
 8003042:	f7ff ffc5 	bl	8002fd0 <LSM303AGR_ACC_Write_Reg>
 8003046:	4603      	mov	r3, r0
 8003048:	2800      	cmp	r0, #0
 800304a:	d0f1      	beq.n	8003030 <LSM303AGR_ACC_RegisterBusIO+0x3c>
						return LSM303AGR_ERROR;
 800304c:	f04f 33ff 	mov.w	r3, #4294967295
 8003050:	e7ee      	b.n	8003030 <LSM303AGR_ACC_RegisterBusIO+0x3c>
		ret = LSM303AGR_ERROR;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003056:	4618      	mov	r0, r3
 8003058:	4770      	bx	lr
			ret = LSM303AGR_ERROR;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295
 800305e:	e7e7      	b.n	8003030 <LSM303AGR_ACC_RegisterBusIO+0x3c>
			ret = LSM303AGR_ERROR;
 8003060:	f04f 33ff 	mov.w	r3, #4294967295
 8003064:	e7e4      	b.n	8003030 <LSM303AGR_ACC_RegisterBusIO+0x3c>
 8003066:	bf00      	nop
 8003068:	08002771 	.word	0x08002771
 800306c:	0800278f 	.word	0x0800278f

08003070 <LSM303AGR_MAG_RegisterBusIO>:
	if (pObj == NULL) {
 8003070:	2800      	cmp	r0, #0
 8003072:	d02a      	beq.n	80030ca <LSM303AGR_MAG_RegisterBusIO+0x5a>
{
 8003074:	b510      	push	{r4, lr}
 8003076:	4604      	mov	r4, r0
		pObj->IO.Init = pIO->Init;
 8003078:	680a      	ldr	r2, [r1, #0]
 800307a:	6002      	str	r2, [r0, #0]
		pObj->IO.DeInit = pIO->DeInit;
 800307c:	6848      	ldr	r0, [r1, #4]
 800307e:	6060      	str	r0, [r4, #4]
		pObj->IO.BusType = pIO->BusType;
 8003080:	6888      	ldr	r0, [r1, #8]
 8003082:	60a0      	str	r0, [r4, #8]
		pObj->IO.Address = pIO->Address;
 8003084:	7b08      	ldrb	r0, [r1, #12]
 8003086:	7320      	strb	r0, [r4, #12]
		pObj->IO.WriteReg = pIO->WriteReg;
 8003088:	6908      	ldr	r0, [r1, #16]
 800308a:	6120      	str	r0, [r4, #16]
		pObj->IO.ReadReg = pIO->ReadReg;
 800308c:	6948      	ldr	r0, [r1, #20]
 800308e:	6160      	str	r0, [r4, #20]
		pObj->IO.GetTick = pIO->GetTick;
 8003090:	6989      	ldr	r1, [r1, #24]
 8003092:	61a1      	str	r1, [r4, #24]
		pObj->Ctx.read_reg = ReadMagRegWrap;
 8003094:	4912      	ldr	r1, [pc, #72]	; (80030e0 <LSM303AGR_MAG_RegisterBusIO+0x70>)
 8003096:	6221      	str	r1, [r4, #32]
		pObj->Ctx.write_reg = WriteMagRegWrap;
 8003098:	4912      	ldr	r1, [pc, #72]	; (80030e4 <LSM303AGR_MAG_RegisterBusIO+0x74>)
 800309a:	61e1      	str	r1, [r4, #28]
		pObj->Ctx.handle = pObj;
 800309c:	6264      	str	r4, [r4, #36]	; 0x24
		if (pObj->IO.Init == NULL) {
 800309e:	b1c2      	cbz	r2, 80030d2 <LSM303AGR_MAG_RegisterBusIO+0x62>
		}else if (pObj->IO.Init() != LSM303AGR_OK) {
 80030a0:	4790      	blx	r2
 80030a2:	4603      	mov	r3, r0
 80030a4:	b9c0      	cbnz	r0, 80030d8 <LSM303AGR_MAG_RegisterBusIO+0x68>
			if (pObj->IO.BusType != LSM303AGR_I2C_BUS) { /* If the bus type is not I2C */
 80030a6:	68a2      	ldr	r2, [r4, #8]
 80030a8:	b112      	cbz	r2, 80030b0 <LSM303AGR_MAG_RegisterBusIO+0x40>
				if (pObj->is_initialized == 0U) {
 80030aa:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80030ae:	b10a      	cbz	r2, 80030b4 <LSM303AGR_MAG_RegisterBusIO+0x44>
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd10      	pop	{r4, pc}
					if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK) {
 80030b4:	2101      	movs	r1, #1
 80030b6:	f104 001c 	add.w	r0, r4, #28
 80030ba:	f000 f943 	bl	8003344 <lsm303agr_mag_i2c_interface_set>
 80030be:	4603      	mov	r3, r0
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d0f5      	beq.n	80030b0 <LSM303AGR_MAG_RegisterBusIO+0x40>
						return LSM303AGR_ERROR;
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295
 80030c8:	e7f2      	b.n	80030b0 <LSM303AGR_MAG_RegisterBusIO+0x40>
		ret = LSM303AGR_ERROR;
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	4770      	bx	lr
			ret = LSM303AGR_ERROR;
 80030d2:	f04f 33ff 	mov.w	r3, #4294967295
 80030d6:	e7eb      	b.n	80030b0 <LSM303AGR_MAG_RegisterBusIO+0x40>
			ret = LSM303AGR_ERROR;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
 80030dc:	e7e8      	b.n	80030b0 <LSM303AGR_MAG_RegisterBusIO+0x40>
 80030de:	bf00      	nop
 80030e0:	080027ad 	.word	0x080027ad
 80030e4:	080027cb 	.word	0x080027cb

080030e8 <lsm303agr_read_reg>:
 * @param  uint16_t len: number of consecutive register to read
 *
 */
int32_t lsm303agr_read_reg(lsm303agr_ctx_t *ctx, uint8_t reg, uint8_t *data,
			   uint16_t len)
{
 80030e8:	b510      	push	{r4, lr}
	return ctx->read_reg(ctx->handle, reg, data, len);
 80030ea:	6844      	ldr	r4, [r0, #4]
 80030ec:	6880      	ldr	r0, [r0, #8]
 80030ee:	47a0      	blx	r4
}
 80030f0:	bd10      	pop	{r4, pc}

080030f2 <lsm303agr_write_reg>:
 * @param  uint16_t len: number of consecutive register to write
 *
 */
int32_t lsm303agr_write_reg(lsm303agr_ctx_t *ctx, uint8_t reg, uint8_t *data,
			    uint16_t len)
{
 80030f2:	b510      	push	{r4, lr}
	return ctx->write_reg(ctx->handle, reg, data, len);
 80030f4:	6804      	ldr	r4, [r0, #0]
 80030f6:	6880      	ldr	r0, [r0, #8]
 80030f8:	47a0      	blx	r4
}
 80030fa:	bd10      	pop	{r4, pc}

080030fc <lsm303agr_xl_operating_mode_get>:
 *                                  reg CTRL_REG4_AG1_A
 *
 */
int32_t lsm303agr_xl_operating_mode_get(lsm303agr_ctx_t *ctx,
					lsm303agr_op_md_a_t *val)
{
 80030fc:	b570      	push	{r4, r5, r6, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	4605      	mov	r5, r0
 8003102:	460e      	mov	r6, r1
	lsm303agr_reg_t reg;
	int32_t mm_error;
	uint8_t lpen, hr;

	mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 8003104:	2301      	movs	r3, #1
 8003106:	aa01      	add	r2, sp, #4
 8003108:	2120      	movs	r1, #32
 800310a:	f7ff ffed 	bl	80030e8 <lsm303agr_read_reg>
	lpen = reg.ctrl_reg1_a.lpen;
 800310e:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8003112:	f3c4 04c0 	ubfx	r4, r4, #3, #1
	mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8003116:	2301      	movs	r3, #1
 8003118:	aa01      	add	r2, sp, #4
 800311a:	2123      	movs	r1, #35	; 0x23
 800311c:	4628      	mov	r0, r5
 800311e:	f7ff ffe3 	bl	80030e8 <lsm303agr_read_reg>
	hr = reg.ctrl_reg4_a.hr;
 8003122:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003126:	f3c3 03c0 	ubfx	r3, r3, #3, #1

	if (lpen) {
 800312a:	b91c      	cbnz	r4, 8003134 <lsm303agr_xl_operating_mode_get+0x38>
		*val = LSM303AGR_LP_8bit;
	}else if (hr) {
 800312c:	b933      	cbnz	r3, 800313c <lsm303agr_xl_operating_mode_get+0x40>
		*val = LSM303AGR_HR_12bit;
	}else  {
		*val = LSM303AGR_NM_10bit;
 800312e:	2301      	movs	r3, #1
 8003130:	7033      	strb	r3, [r6, #0]
	}

	return mm_error;
 8003132:	e001      	b.n	8003138 <lsm303agr_xl_operating_mode_get+0x3c>
		*val = LSM303AGR_LP_8bit;
 8003134:	2302      	movs	r3, #2
 8003136:	7033      	strb	r3, [r6, #0]
}
 8003138:	b002      	add	sp, #8
 800313a:	bd70      	pop	{r4, r5, r6, pc}
		*val = LSM303AGR_HR_12bit;
 800313c:	2300      	movs	r3, #0
 800313e:	7033      	strb	r3, [r6, #0]
 8003140:	e7fa      	b.n	8003138 <lsm303agr_xl_operating_mode_get+0x3c>

08003142 <lsm303agr_xl_data_rate_set>:
 * @param  lsm303agr_odr_a_t: change the values of odr in reg CTRL_REG1_A
 *
 */
int32_t lsm303agr_xl_data_rate_set(lsm303agr_ctx_t *ctx,
				   lsm303agr_odr_a_t val)
{
 8003142:	b530      	push	{r4, r5, lr}
 8003144:	b083      	sub	sp, #12
 8003146:	4604      	mov	r4, r0
 8003148:	460d      	mov	r5, r1
	lsm303agr_reg_t reg;
	int32_t mm_error;

	mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800314a:	2301      	movs	r3, #1
 800314c:	aa01      	add	r2, sp, #4
 800314e:	2120      	movs	r1, #32
 8003150:	f7ff ffca 	bl	80030e8 <lsm303agr_read_reg>
				      &reg.byte, 1);
	reg.ctrl_reg1_a.odr = val;
 8003154:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003158:	f365 1307 	bfi	r3, r5, #4, #4
 800315c:	f88d 3004 	strb.w	r3, [sp, #4]
	mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003160:	2301      	movs	r3, #1
 8003162:	aa01      	add	r2, sp, #4
 8003164:	2120      	movs	r1, #32
 8003166:	4620      	mov	r0, r4
 8003168:	f7ff ffc3 	bl	80030f2 <lsm303agr_write_reg>
				       &reg.byte, 1);

	return mm_error;
}
 800316c:	b003      	add	sp, #12
 800316e:	bd30      	pop	{r4, r5, pc}

08003170 <lsm303agr_xl_data_rate_get>:
 * @param  lsm303agr_odr_a_t: Get the values of odr in reg CTRL_REG1_A
 *
 */
int32_t lsm303agr_xl_data_rate_get(lsm303agr_ctx_t *ctx,
				   lsm303agr_odr_a_t *val)
{
 8003170:	b510      	push	{r4, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	460c      	mov	r4, r1
	lsm303agr_reg_t reg;
	int32_t mm_error;

	mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 8003176:	2301      	movs	r3, #1
 8003178:	aa01      	add	r2, sp, #4
 800317a:	2120      	movs	r1, #32
 800317c:	f7ff ffb4 	bl	80030e8 <lsm303agr_read_reg>
	*val = (lsm303agr_odr_a_t)reg.ctrl_reg1_a.odr;
 8003180:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003184:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003188:	7023      	strb	r3, [r4, #0]

	return mm_error;
}
 800318a:	b002      	add	sp, #8
 800318c:	bd10      	pop	{r4, pc}

0800318e <lsm303agr_xl_full_scale_set>:
 * @param  lsm303agr_fs_a_t: change the values of fs in reg CTRL_REG4_A
 *
 */
int32_t lsm303agr_xl_full_scale_set(lsm303agr_ctx_t *ctx,
				    lsm303agr_fs_a_t val)
{
 800318e:	b530      	push	{r4, r5, lr}
 8003190:	b083      	sub	sp, #12
 8003192:	4604      	mov	r4, r0
 8003194:	460d      	mov	r5, r1
	lsm303agr_reg_t reg;
	int32_t mm_error;

	mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8003196:	2301      	movs	r3, #1
 8003198:	aa01      	add	r2, sp, #4
 800319a:	2123      	movs	r1, #35	; 0x23
 800319c:	f7ff ffa4 	bl	80030e8 <lsm303agr_read_reg>
	reg.ctrl_reg4_a.fs = val;
 80031a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80031a4:	f365 1305 	bfi	r3, r5, #4, #2
 80031a8:	f88d 3004 	strb.w	r3, [sp, #4]
	mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80031ac:	2301      	movs	r3, #1
 80031ae:	aa01      	add	r2, sp, #4
 80031b0:	2123      	movs	r1, #35	; 0x23
 80031b2:	4620      	mov	r0, r4
 80031b4:	f7ff ff9d 	bl	80030f2 <lsm303agr_write_reg>

	return mm_error;
}
 80031b8:	b003      	add	sp, #12
 80031ba:	bd30      	pop	{r4, r5, pc}

080031bc <lsm303agr_xl_full_scale_get>:
 * @param  lsm303agr_fs_a_t: Get the values of fs in reg CTRL_REG4_A
 *
 */
int32_t lsm303agr_xl_full_scale_get(lsm303agr_ctx_t *ctx,
				    lsm303agr_fs_a_t *val)
{
 80031bc:	b510      	push	{r4, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	460c      	mov	r4, r1
	lsm303agr_reg_t reg;
	int32_t mm_error;

	mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80031c2:	2301      	movs	r3, #1
 80031c4:	aa01      	add	r2, sp, #4
 80031c6:	2123      	movs	r1, #35	; 0x23
 80031c8:	f7ff ff8e 	bl	80030e8 <lsm303agr_read_reg>
	*val = (lsm303agr_fs_a_t)reg.ctrl_reg4_a.fs;
 80031cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80031d0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80031d4:	7023      	strb	r3, [r4, #0]

	return mm_error;
}
 80031d6:	b002      	add	sp, #8
 80031d8:	bd10      	pop	{r4, pc}

080031da <lsm303agr_xl_block_data_update_set>:
 * @param  uint8_t val: change the values of bdu in reg CTRL_REG4_A
 *
 */
int32_t lsm303agr_xl_block_data_update_set(lsm303agr_ctx_t *ctx,
					   uint8_t val)
{
 80031da:	b530      	push	{r4, r5, lr}
 80031dc:	b083      	sub	sp, #12
 80031de:	4604      	mov	r4, r0
 80031e0:	460d      	mov	r5, r1
	lsm303agr_reg_t reg;
	int32_t mm_error;

	mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80031e2:	2301      	movs	r3, #1
 80031e4:	aa01      	add	r2, sp, #4
 80031e6:	2123      	movs	r1, #35	; 0x23
 80031e8:	f7ff ff7e 	bl	80030e8 <lsm303agr_read_reg>
	reg.ctrl_reg4_a.bdu = val;
 80031ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80031f0:	f365 13c7 	bfi	r3, r5, #7, #1
 80031f4:	f88d 3004 	strb.w	r3, [sp, #4]
	mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80031f8:	2301      	movs	r3, #1
 80031fa:	aa01      	add	r2, sp, #4
 80031fc:	2123      	movs	r1, #35	; 0x23
 80031fe:	4620      	mov	r0, r4
 8003200:	f7ff ff77 	bl	80030f2 <lsm303agr_write_reg>

	return mm_error;
}
 8003204:	b003      	add	sp, #12
 8003206:	bd30      	pop	{r4, r5, pc}

08003208 <lsm303agr_acceleration_raw_get>:
 * @param  lsm303agr_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t lsm303agr_acceleration_raw_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
 8003208:	b508      	push	{r3, lr}
	return lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 800320a:	2306      	movs	r3, #6
 800320c:	460a      	mov	r2, r1
 800320e:	2128      	movs	r1, #40	; 0x28
 8003210:	f7ff ff6a 	bl	80030e8 <lsm303agr_read_reg>
}
 8003214:	bd08      	pop	{r3, pc}

08003216 <lsm303agr_mag_operating_mode_set>:
 * @param  lsm303agr_md_t: change the values of md in reg CFG_REG_A_M
 *
 */
int32_t lsm303agr_mag_operating_mode_set(lsm303agr_ctx_t *ctx,
					 lsm303agr_md_m_t val)
{
 8003216:	b530      	push	{r4, r5, lr}
 8003218:	b083      	sub	sp, #12
 800321a:	4604      	mov	r4, r0
 800321c:	460d      	mov	r5, r1
	lsm303agr_reg_t reg;
	int32_t mm_error;

	mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 800321e:	2301      	movs	r3, #1
 8003220:	aa01      	add	r2, sp, #4
 8003222:	2160      	movs	r1, #96	; 0x60
 8003224:	f7ff ff60 	bl	80030e8 <lsm303agr_read_reg>
	reg.cfg_reg_a_m.md = val;
 8003228:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800322c:	f365 0301 	bfi	r3, r5, #0, #2
 8003230:	f88d 3004 	strb.w	r3, [sp, #4]
	mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8003234:	2301      	movs	r3, #1
 8003236:	aa01      	add	r2, sp, #4
 8003238:	2160      	movs	r1, #96	; 0x60
 800323a:	4620      	mov	r0, r4
 800323c:	f7ff ff59 	bl	80030f2 <lsm303agr_write_reg>

	return mm_error;
}
 8003240:	b003      	add	sp, #12
 8003242:	bd30      	pop	{r4, r5, pc}

08003244 <lsm303agr_mag_data_rate_set>:
 * @param  lsm303agr_mg_odr_m_t: change the values of odr in reg CFG_REG_A_M
 *
 */
int32_t lsm303agr_mag_data_rate_set(lsm303agr_ctx_t *ctx,
				    lsm303agr_mg_odr_m_t val)
{
 8003244:	b530      	push	{r4, r5, lr}
 8003246:	b083      	sub	sp, #12
 8003248:	4604      	mov	r4, r0
 800324a:	460d      	mov	r5, r1
	lsm303agr_reg_t reg;
	int32_t mm_error;

	mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 800324c:	2301      	movs	r3, #1
 800324e:	aa01      	add	r2, sp, #4
 8003250:	2160      	movs	r1, #96	; 0x60
 8003252:	f7ff ff49 	bl	80030e8 <lsm303agr_read_reg>
	reg.cfg_reg_a_m.odr = val;
 8003256:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800325a:	f365 0383 	bfi	r3, r5, #2, #2
 800325e:	f88d 3004 	strb.w	r3, [sp, #4]
	mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8003262:	2301      	movs	r3, #1
 8003264:	aa01      	add	r2, sp, #4
 8003266:	2160      	movs	r1, #96	; 0x60
 8003268:	4620      	mov	r0, r4
 800326a:	f7ff ff42 	bl	80030f2 <lsm303agr_write_reg>

	return mm_error;
}
 800326e:	b003      	add	sp, #12
 8003270:	bd30      	pop	{r4, r5, pc}

08003272 <lsm303agr_mag_data_rate_get>:
 * @param  lsm303agr_mg_odr_m_tv: Get the values of odr in reg CFG_REG_A_M
 *
 */
int32_t lsm303agr_mag_data_rate_get(lsm303agr_ctx_t *ctx,
				    lsm303agr_mg_odr_m_t *val)
{
 8003272:	b510      	push	{r4, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	460c      	mov	r4, r1
	lsm303agr_reg_t reg;
	int32_t mm_error;

	mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8003278:	2301      	movs	r3, #1
 800327a:	aa01      	add	r2, sp, #4
 800327c:	2160      	movs	r1, #96	; 0x60
 800327e:	f7ff ff33 	bl	80030e8 <lsm303agr_read_reg>
	*val = (lsm303agr_mg_odr_m_t)reg.cfg_reg_a_m.odr;
 8003282:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003286:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800328a:	7023      	strb	r3, [r4, #0]

	return mm_error;
}
 800328c:	b002      	add	sp, #8
 800328e:	bd10      	pop	{r4, pc}

08003290 <lsm303agr_mag_block_data_update_set>:
 * @param  uint8_t val: change the values of bdu in reg CFG_REG_C_M
 *
 */
int32_t lsm303agr_mag_block_data_update_set(lsm303agr_ctx_t *ctx,
					    uint8_t val)
{
 8003290:	b530      	push	{r4, r5, lr}
 8003292:	b083      	sub	sp, #12
 8003294:	4604      	mov	r4, r0
 8003296:	460d      	mov	r5, r1
	lsm303agr_reg_t reg;
	int32_t mm_error;

	mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8003298:	2301      	movs	r3, #1
 800329a:	aa01      	add	r2, sp, #4
 800329c:	2162      	movs	r1, #98	; 0x62
 800329e:	f7ff ff23 	bl	80030e8 <lsm303agr_read_reg>
	reg.cfg_reg_c_m.bdu = val;
 80032a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80032a6:	f365 1304 	bfi	r3, r5, #4, #1
 80032aa:	f88d 3004 	strb.w	r3, [sp, #4]
	mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 80032ae:	2301      	movs	r3, #1
 80032b0:	aa01      	add	r2, sp, #4
 80032b2:	2162      	movs	r1, #98	; 0x62
 80032b4:	4620      	mov	r0, r4
 80032b6:	f7ff ff1c 	bl	80030f2 <lsm303agr_write_reg>

	return mm_error;
}
 80032ba:	b003      	add	sp, #12
 80032bc:	bd30      	pop	{r4, r5, pc}

080032be <lsm303agr_magnetic_raw_get>:
 * @param  lsm303agr_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t lsm303agr_magnetic_raw_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
 80032be:	b508      	push	{r3, lr}
	return lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 80032c0:	2306      	movs	r3, #6
 80032c2:	460a      	mov	r2, r1
 80032c4:	2168      	movs	r1, #104	; 0x68
 80032c6:	f7ff ff0f 	bl	80030e8 <lsm303agr_read_reg>
}
 80032ca:	bd08      	pop	{r3, pc}

080032cc <lsm303agr_xl_device_id_get>:
 * @param  lsm303agr_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t lsm303agr_xl_device_id_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
 80032cc:	b508      	push	{r3, lr}
	return lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 80032ce:	2301      	movs	r3, #1
 80032d0:	460a      	mov	r2, r1
 80032d2:	210f      	movs	r1, #15
 80032d4:	f7ff ff08 	bl	80030e8 <lsm303agr_read_reg>
}
 80032d8:	bd08      	pop	{r3, pc}

080032da <lsm303agr_mag_device_id_get>:
 * @param  lsm303agr_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t lsm303agr_mag_device_id_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
 80032da:	b508      	push	{r3, lr}
	return lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 80032dc:	2301      	movs	r3, #1
 80032de:	460a      	mov	r2, r1
 80032e0:	214f      	movs	r1, #79	; 0x4f
 80032e2:	f7ff ff01 	bl	80030e8 <lsm303agr_read_reg>
}
 80032e6:	bd08      	pop	{r3, pc}

080032e8 <lsm303agr_mag_self_test_set>:
 * @param  lsm303agr_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t val: change the values of self_test in reg CFG_REG_C_M
 *
 */
int32_t lsm303agr_mag_self_test_set(lsm303agr_ctx_t *ctx, uint8_t val)
{
 80032e8:	b530      	push	{r4, r5, lr}
 80032ea:	b083      	sub	sp, #12
 80032ec:	4604      	mov	r4, r0
 80032ee:	460d      	mov	r5, r1
	lsm303agr_reg_t reg;
	int32_t mm_error;

	mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 80032f0:	2301      	movs	r3, #1
 80032f2:	aa01      	add	r2, sp, #4
 80032f4:	2162      	movs	r1, #98	; 0x62
 80032f6:	f7ff fef7 	bl	80030e8 <lsm303agr_read_reg>
	reg.cfg_reg_c_m.self_test = val;
 80032fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80032fe:	f365 0341 	bfi	r3, r5, #1, #1
 8003302:	f88d 3004 	strb.w	r3, [sp, #4]
	mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8003306:	2301      	movs	r3, #1
 8003308:	aa01      	add	r2, sp, #4
 800330a:	2162      	movs	r1, #98	; 0x62
 800330c:	4620      	mov	r0, r4
 800330e:	f7ff fef0 	bl	80030f2 <lsm303agr_write_reg>

	return mm_error;
}
 8003312:	b003      	add	sp, #12
 8003314:	bd30      	pop	{r4, r5, pc}

08003316 <lsm303agr_xl_fifo_mode_set>:
 * @param  lsm303agr_fm_a_t: change the values of fm in reg FIFO_CTRL_REG_A
 *
 */
int32_t lsm303agr_xl_fifo_mode_set(lsm303agr_ctx_t *ctx,
				   lsm303agr_fm_a_t val)
{
 8003316:	b530      	push	{r4, r5, lr}
 8003318:	b083      	sub	sp, #12
 800331a:	4604      	mov	r4, r0
 800331c:	460d      	mov	r5, r1
	lsm303agr_reg_t reg;
	int32_t mm_error;

	mm_error = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800331e:	2301      	movs	r3, #1
 8003320:	aa01      	add	r2, sp, #4
 8003322:	212e      	movs	r1, #46	; 0x2e
 8003324:	f7ff fee0 	bl	80030e8 <lsm303agr_read_reg>
				      &reg.byte, 1);
	reg.fifo_ctrl_reg_a.fm = val;
 8003328:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800332c:	f365 1387 	bfi	r3, r5, #6, #2
 8003330:	f88d 3004 	strb.w	r3, [sp, #4]
	mm_error = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003334:	2301      	movs	r3, #1
 8003336:	aa01      	add	r2, sp, #4
 8003338:	212e      	movs	r1, #46	; 0x2e
 800333a:	4620      	mov	r0, r4
 800333c:	f7ff fed9 	bl	80030f2 <lsm303agr_write_reg>
				       &reg.byte, 1);

	return mm_error;
}
 8003340:	b003      	add	sp, #12
 8003342:	bd30      	pop	{r4, r5, pc}

08003344 <lsm303agr_mag_i2c_interface_set>:
 *                                reg CFG_REG_C_M
 *
 */
int32_t lsm303agr_mag_i2c_interface_set(lsm303agr_ctx_t *ctx,
					lsm303agr_i2c_dis_m_t val)
{
 8003344:	b530      	push	{r4, r5, lr}
 8003346:	b083      	sub	sp, #12
 8003348:	4604      	mov	r4, r0
 800334a:	460d      	mov	r5, r1
	lsm303agr_reg_t reg;
	int32_t mm_error;

	mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 800334c:	2301      	movs	r3, #1
 800334e:	aa01      	add	r2, sp, #4
 8003350:	2162      	movs	r1, #98	; 0x62
 8003352:	f7ff fec9 	bl	80030e8 <lsm303agr_read_reg>
	reg.cfg_reg_c_m.i2c_dis = val;
 8003356:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800335a:	f365 1345 	bfi	r3, r5, #5, #1
 800335e:	f88d 3004 	strb.w	r3, [sp, #4]
	mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8003362:	2301      	movs	r3, #1
 8003364:	aa01      	add	r2, sp, #4
 8003366:	2162      	movs	r1, #98	; 0x62
 8003368:	4620      	mov	r0, r4
 800336a:	f7ff fec2 	bl	80030f2 <lsm303agr_write_reg>

	return mm_error;
}
 800336e:	b003      	add	sp, #12
 8003370:	bd30      	pop	{r4, r5, pc}
	...

08003374 <LSM6DSL_GetCapabilities>:
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
	/* Prevent unused argument(s) compilation warning */
	(void)(pObj);

	Capabilities->Acc = 1;
 8003374:	2301      	movs	r3, #1
 8003376:	700b      	strb	r3, [r1, #0]
	Capabilities->Gyro = 1;
 8003378:	704b      	strb	r3, [r1, #1]
	Capabilities->Magneto = 0;
 800337a:	2000      	movs	r0, #0
 800337c:	7088      	strb	r0, [r1, #2]
	Capabilities->LowPower = 0;
 800337e:	70c8      	strb	r0, [r1, #3]
	Capabilities->GyroMaxFS = 2000;
 8003380:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003384:	604b      	str	r3, [r1, #4]
	Capabilities->AccMaxFS = 16;
 8003386:	2310      	movs	r3, #16
 8003388:	608b      	str	r3, [r1, #8]
	Capabilities->MagMaxFS = 0;
 800338a:	60c8      	str	r0, [r1, #12]
	Capabilities->GyroMaxOdr = 6660.0f;
 800338c:	4b02      	ldr	r3, [pc, #8]	; (8003398 <LSM6DSL_GetCapabilities+0x24>)
 800338e:	610b      	str	r3, [r1, #16]
	Capabilities->AccMaxOdr = 6660.0f;
 8003390:	614b      	str	r3, [r1, #20]
	Capabilities->MagMaxOdr = 0.0f;
 8003392:	2300      	movs	r3, #0
 8003394:	618b      	str	r3, [r1, #24]
	return LSM6DSL_OK;
}
 8003396:	4770      	bx	lr
 8003398:	45d02000 	.word	0x45d02000

0800339c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
	pObj->acc_odr = (Odr <= 12.5f) ? LSM6DSL_XL_ODR_12Hz5
			: (Odr <= 26.0f) ? LSM6DSL_XL_ODR_26Hz
 800339c:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80033a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a8:	d93b      	bls.n	8003422 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x86>
 80033aa:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80033ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	d939      	bls.n	800342c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80033b8:	eddf 7a23 	vldr	s15, [pc, #140]	; 8003448 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xac>
 80033bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c4:	d934      	bls.n	8003430 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x94>
 80033c6:	eddf 7a21 	vldr	s15, [pc, #132]	; 800344c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80033ca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d2:	d92f      	bls.n	8003434 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x98>
 80033d4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003450 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xb4>
 80033d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e0:	d92a      	bls.n	8003438 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x9c>
 80033e2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003454 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xb8>
 80033e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	d925      	bls.n	800343c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa0>
 80033f0:	eddf 7a19 	vldr	s15, [pc, #100]	; 8003458 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80033f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033fc:	d920      	bls.n	8003440 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa4>
 80033fe:	eddf 7a17 	vldr	s15, [pc, #92]	; 800345c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8003402:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340a:	d91b      	bls.n	8003444 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa8>
 800340c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003460 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xc4>
 8003410:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003418:	d901      	bls.n	800341e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x82>
 800341a:	230a      	movs	r3, #10
 800341c:	e002      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 800341e:	2309      	movs	r3, #9
 8003420:	e000      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 8003422:	2301      	movs	r3, #1
	pObj->acc_odr = (Odr <= 12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8003424:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
			: (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
			: (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
			:                    LSM6DSL_XL_ODR_6k66Hz;

	return LSM6DSL_OK;
}
 8003428:	2000      	movs	r0, #0
 800342a:	4770      	bx	lr
			: (Odr <= 26.0f) ? LSM6DSL_XL_ODR_26Hz
 800342c:	2302      	movs	r3, #2
 800342e:	e7f9      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 8003430:	2303      	movs	r3, #3
 8003432:	e7f7      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 8003434:	2304      	movs	r3, #4
 8003436:	e7f5      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 8003438:	2305      	movs	r3, #5
 800343a:	e7f3      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 800343c:	2306      	movs	r3, #6
 800343e:	e7f1      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 8003440:	2307      	movs	r3, #7
 8003442:	e7ef      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 8003444:	2308      	movs	r3, #8
 8003446:	e7ed      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 8003448:	42500000 	.word	0x42500000
 800344c:	42d00000 	.word	0x42d00000
 8003450:	43500000 	.word	0x43500000
 8003454:	43d00000 	.word	0x43d00000
 8003458:	44504000 	.word	0x44504000
 800345c:	44cf8000 	.word	0x44cf8000
 8003460:	45502000 	.word	0x45502000

08003464 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
	pObj->gyro_odr = (Odr <= 12.5f) ? LSM6DSL_GY_ODR_12Hz5
			 : (Odr <= 26.0f) ? LSM6DSL_GY_ODR_26Hz
 8003464:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8003468:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800346c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003470:	d93b      	bls.n	80034ea <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x86>
 8003472:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003476:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347e:	d939      	bls.n	80034f4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8003480:	eddf 7a23 	vldr	s15, [pc, #140]	; 8003510 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xac>
 8003484:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348c:	d934      	bls.n	80034f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x94>
 800348e:	eddf 7a21 	vldr	s15, [pc, #132]	; 8003514 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xb0>
 8003492:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349a:	d92f      	bls.n	80034fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x98>
 800349c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003518 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xb4>
 80034a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a8:	d92a      	bls.n	8003500 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 80034aa:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800351c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xb8>
 80034ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80034b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b6:	d925      	bls.n	8003504 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa0>
 80034b8:	eddf 7a19 	vldr	s15, [pc, #100]	; 8003520 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80034bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80034c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c4:	d920      	bls.n	8003508 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa4>
 80034c6:	eddf 7a17 	vldr	s15, [pc, #92]	; 8003524 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xc0>
 80034ca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80034ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d2:	d91b      	bls.n	800350c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa8>
 80034d4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003528 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xc4>
 80034d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80034dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e0:	d901      	bls.n	80034e6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x82>
 80034e2:	230a      	movs	r3, #10
 80034e4:	e002      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 80034e6:	2309      	movs	r3, #9
 80034e8:	e000      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 80034ea:	2301      	movs	r3, #1
	pObj->gyro_odr = (Odr <= 12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80034ec:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
			 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
			 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
			 :                    LSM6DSL_GY_ODR_6k66Hz;

	return LSM6DSL_OK;
}
 80034f0:	2000      	movs	r0, #0
 80034f2:	4770      	bx	lr
			 : (Odr <= 26.0f) ? LSM6DSL_GY_ODR_26Hz
 80034f4:	2302      	movs	r3, #2
 80034f6:	e7f9      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 80034f8:	2303      	movs	r3, #3
 80034fa:	e7f7      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 80034fc:	2304      	movs	r3, #4
 80034fe:	e7f5      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8003500:	2305      	movs	r3, #5
 8003502:	e7f3      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8003504:	2306      	movs	r3, #6
 8003506:	e7f1      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8003508:	2307      	movs	r3, #7
 800350a:	e7ef      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 800350c:	2308      	movs	r3, #8
 800350e:	e7ed      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8003510:	42500000 	.word	0x42500000
 8003514:	42d00000 	.word	0x42d00000
 8003518:	43500000 	.word	0x43500000
 800351c:	43d00000 	.word	0x43d00000
 8003520:	44504000 	.word	0x44504000
 8003524:	44cf8000 	.word	0x44cf8000
 8003528:	45502000 	.word	0x45502000

0800352c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800352c:	b510      	push	{r4, lr}
	LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;

	return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800352e:	6944      	ldr	r4, [r0, #20]
 8003530:	7b00      	ldrb	r0, [r0, #12]
 8003532:	47a0      	blx	r4
}
 8003534:	bd10      	pop	{r4, pc}

08003536 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003536:	b510      	push	{r4, lr}
	LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;

	return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003538:	6904      	ldr	r4, [r0, #16]
 800353a:	7b00      	ldrb	r0, [r0, #12]
 800353c:	47a0      	blx	r4
}
 800353e:	bd10      	pop	{r4, pc}

08003540 <LSM6DSL_ACC_Enable>:
	if (pObj->acc_is_enabled == 1U) {
 8003540:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8003544:	2b01      	cmp	r3, #1
 8003546:	d00d      	beq.n	8003564 <LSM6DSL_ACC_Enable+0x24>
{
 8003548:	b510      	push	{r4, lr}
 800354a:	4604      	mov	r4, r0
	if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK) {
 800354c:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8003550:	301c      	adds	r0, #28
 8003552:	f000 fcfd 	bl	8003f50 <lsm6dsl_xl_data_rate_set>
 8003556:	4603      	mov	r3, r0
 8003558:	b938      	cbnz	r0, 800356a <LSM6DSL_ACC_Enable+0x2a>
	pObj->acc_is_enabled = 1;
 800355a:	2201      	movs	r2, #1
 800355c:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd10      	pop	{r4, pc}
		return LSM6DSL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	4770      	bx	lr
		return LSM6DSL_ERROR;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
 800356e:	e7f7      	b.n	8003560 <LSM6DSL_ACC_Enable+0x20>

08003570 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
{
 8003570:	b508      	push	{r3, lr}
		  : (Odr <= 26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003572:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8003576:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800357a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357e:	d939      	bls.n	80035f4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x84>
 8003580:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003584:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358c:	d93a      	bls.n	8003604 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x94>
 800358e:	eddf 7a27 	vldr	s15, [pc, #156]	; 800362c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003592:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359a:	d935      	bls.n	8003608 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x98>
 800359c:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003630 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80035a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80035a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a8:	d930      	bls.n	800360c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x9c>
 80035aa:	eddf 7a22 	vldr	s15, [pc, #136]	; 8003634 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xc4>
 80035ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80035b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b6:	d92b      	bls.n	8003610 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa0>
 80035b8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003638 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xc8>
 80035bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80035c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c4:	d926      	bls.n	8003614 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa4>
 80035c6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800363c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xcc>
 80035ca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80035ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d2:	d921      	bls.n	8003618 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa8>
 80035d4:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8003640 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd0>
 80035d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80035dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e0:	d91c      	bls.n	800361c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xac>
 80035e2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003644 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80035e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80035ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ee:	d817      	bhi.n	8003620 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xb0>
 80035f0:	2109      	movs	r1, #9
 80035f2:	e000      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 80035f4:	2101      	movs	r1, #1
	if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK) {
 80035f6:	301c      	adds	r0, #28
 80035f8:	f000 fcaa 	bl	8003f50 <lsm6dsl_xl_data_rate_set>
 80035fc:	4603      	mov	r3, r0
 80035fe:	b988      	cbnz	r0, 8003624 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xb4>
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd08      	pop	{r3, pc}
		  : (Odr <= 26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003604:	2102      	movs	r1, #2
 8003606:	e7f6      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003608:	2103      	movs	r1, #3
 800360a:	e7f4      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 800360c:	2104      	movs	r1, #4
 800360e:	e7f2      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003610:	2105      	movs	r1, #5
 8003612:	e7f0      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003614:	2106      	movs	r1, #6
 8003616:	e7ee      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003618:	2107      	movs	r1, #7
 800361a:	e7ec      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 800361c:	2108      	movs	r1, #8
 800361e:	e7ea      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003620:	210a      	movs	r1, #10
 8003622:	e7e8      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
		return LSM6DSL_ERROR;
 8003624:	f04f 33ff 	mov.w	r3, #4294967295
 8003628:	e7ea      	b.n	8003600 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 800362a:	bf00      	nop
 800362c:	42500000 	.word	0x42500000
 8003630:	42d00000 	.word	0x42d00000
 8003634:	43500000 	.word	0x43500000
 8003638:	43d00000 	.word	0x43d00000
 800363c:	44504000 	.word	0x44504000
 8003640:	44cf8000 	.word	0x44cf8000
 8003644:	45502000 	.word	0x45502000

08003648 <LSM6DSL_ACC_SetOutputDataRate>:
{
 8003648:	b508      	push	{r3, lr}
	if (pObj->acc_is_enabled == 1U) {
 800364a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800364e:	2b01      	cmp	r3, #1
 8003650:	d002      	beq.n	8003658 <LSM6DSL_ACC_SetOutputDataRate+0x10>
		return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003652:	f7ff fea3 	bl	800339c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
}
 8003656:	bd08      	pop	{r3, pc}
		return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003658:	f7ff ff8a 	bl	8003570 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 800365c:	bd08      	pop	{r3, pc}

0800365e <LSM6DSL_ACC_SetFullScale>:
{
 800365e:	b508      	push	{r3, lr}
		 : (FullScale <= 4) ? LSM6DSL_4g
 8003660:	2902      	cmp	r1, #2
 8003662:	dd05      	ble.n	8003670 <LSM6DSL_ACC_SetFullScale+0x12>
 8003664:	2904      	cmp	r1, #4
 8003666:	dd0b      	ble.n	8003680 <LSM6DSL_ACC_SetFullScale+0x22>
 8003668:	2908      	cmp	r1, #8
 800366a:	dc0b      	bgt.n	8003684 <LSM6DSL_ACC_SetFullScale+0x26>
 800366c:	2103      	movs	r1, #3
 800366e:	e000      	b.n	8003672 <LSM6DSL_ACC_SetFullScale+0x14>
 8003670:	2100      	movs	r1, #0
	if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK) {
 8003672:	301c      	adds	r0, #28
 8003674:	f000 fc2e 	bl	8003ed4 <lsm6dsl_xl_full_scale_set>
 8003678:	4603      	mov	r3, r0
 800367a:	b928      	cbnz	r0, 8003688 <LSM6DSL_ACC_SetFullScale+0x2a>
}
 800367c:	4618      	mov	r0, r3
 800367e:	bd08      	pop	{r3, pc}
		 : (FullScale <= 4) ? LSM6DSL_4g
 8003680:	2102      	movs	r1, #2
 8003682:	e7f6      	b.n	8003672 <LSM6DSL_ACC_SetFullScale+0x14>
 8003684:	2101      	movs	r1, #1
 8003686:	e7f4      	b.n	8003672 <LSM6DSL_ACC_SetFullScale+0x14>
		return LSM6DSL_ERROR;
 8003688:	f04f 33ff 	mov.w	r3, #4294967295
 800368c:	e7f6      	b.n	800367c <LSM6DSL_ACC_SetFullScale+0x1e>

0800368e <LSM6DSL_GYRO_Enable>:
	if (pObj->gyro_is_enabled == 1U) {
 800368e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8003692:	2b01      	cmp	r3, #1
 8003694:	d00d      	beq.n	80036b2 <LSM6DSL_GYRO_Enable+0x24>
{
 8003696:	b510      	push	{r4, lr}
 8003698:	4604      	mov	r4, r0
	if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK) {
 800369a:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 800369e:	301c      	adds	r0, #28
 80036a0:	f000 fcf2 	bl	8004088 <lsm6dsl_gy_data_rate_set>
 80036a4:	4603      	mov	r3, r0
 80036a6:	b938      	cbnz	r0, 80036b8 <LSM6DSL_GYRO_Enable+0x2a>
	pObj->gyro_is_enabled = 1;
 80036a8:	2201      	movs	r2, #1
 80036aa:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	bd10      	pop	{r4, pc}
		return LSM6DSL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	4770      	bx	lr
		return LSM6DSL_ERROR;
 80036b8:	f04f 33ff 	mov.w	r3, #4294967295
 80036bc:	e7f7      	b.n	80036ae <LSM6DSL_GYRO_Enable+0x20>
	...

080036c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
{
 80036c0:	b508      	push	{r3, lr}
		  : (Odr <= 26.0f) ? LSM6DSL_GY_ODR_26Hz
 80036c2:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80036c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80036ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ce:	d939      	bls.n	8003744 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x84>
 80036d0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80036d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80036d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036dc:	d93a      	bls.n	8003754 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x94>
 80036de:	eddf 7a27 	vldr	s15, [pc, #156]	; 800377c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80036e2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80036e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ea:	d935      	bls.n	8003758 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x98>
 80036ec:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003780 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 80036f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80036f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f8:	d930      	bls.n	800375c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 80036fa:	eddf 7a22 	vldr	s15, [pc, #136]	; 8003784 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xc4>
 80036fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003706:	d92b      	bls.n	8003760 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa0>
 8003708:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003788 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xc8>
 800370c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003714:	d926      	bls.n	8003764 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa4>
 8003716:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800378c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xcc>
 800371a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800371e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003722:	d921      	bls.n	8003768 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa8>
 8003724:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8003790 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd0>
 8003728:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800372c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003730:	d91c      	bls.n	800376c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xac>
 8003732:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003794 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003736:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800373a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373e:	d817      	bhi.n	8003770 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xb0>
 8003740:	2109      	movs	r1, #9
 8003742:	e000      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003744:	2101      	movs	r1, #1
	if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK) {
 8003746:	301c      	adds	r0, #28
 8003748:	f000 fc9e 	bl	8004088 <lsm6dsl_gy_data_rate_set>
 800374c:	4603      	mov	r3, r0
 800374e:	b988      	cbnz	r0, 8003774 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xb4>
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd08      	pop	{r3, pc}
		  : (Odr <= 26.0f) ? LSM6DSL_GY_ODR_26Hz
 8003754:	2102      	movs	r1, #2
 8003756:	e7f6      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003758:	2103      	movs	r1, #3
 800375a:	e7f4      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 800375c:	2104      	movs	r1, #4
 800375e:	e7f2      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003760:	2105      	movs	r1, #5
 8003762:	e7f0      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003764:	2106      	movs	r1, #6
 8003766:	e7ee      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003768:	2107      	movs	r1, #7
 800376a:	e7ec      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 800376c:	2108      	movs	r1, #8
 800376e:	e7ea      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003770:	210a      	movs	r1, #10
 8003772:	e7e8      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
		return LSM6DSL_ERROR;
 8003774:	f04f 33ff 	mov.w	r3, #4294967295
 8003778:	e7ea      	b.n	8003750 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800377a:	bf00      	nop
 800377c:	42500000 	.word	0x42500000
 8003780:	42d00000 	.word	0x42d00000
 8003784:	43500000 	.word	0x43500000
 8003788:	43d00000 	.word	0x43d00000
 800378c:	44504000 	.word	0x44504000
 8003790:	44cf8000 	.word	0x44cf8000
 8003794:	45502000 	.word	0x45502000

08003798 <LSM6DSL_GYRO_SetOutputDataRate>:
{
 8003798:	b508      	push	{r3, lr}
	if (pObj->gyro_is_enabled == 1U) {
 800379a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d002      	beq.n	80037a8 <LSM6DSL_GYRO_SetOutputDataRate+0x10>
		return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80037a2:	f7ff fe5f 	bl	8003464 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
}
 80037a6:	bd08      	pop	{r3, pc}
		return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80037a8:	f7ff ff8a 	bl	80036c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 80037ac:	bd08      	pop	{r3, pc}

080037ae <LSM6DSL_Init>:
{
 80037ae:	b538      	push	{r3, r4, r5, lr}
 80037b0:	4605      	mov	r5, r0
	if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK) {
 80037b2:	f100 041c 	add.w	r4, r0, #28
 80037b6:	2101      	movs	r1, #1
 80037b8:	4620      	mov	r0, r4
 80037ba:	f000 fcec 	bl	8004196 <lsm6dsl_auto_increment_set>
 80037be:	bb48      	cbnz	r0, 8003814 <LSM6DSL_Init+0x66>
	if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK) {
 80037c0:	2101      	movs	r1, #1
 80037c2:	4620      	mov	r0, r4
 80037c4:	f000 fcb6 	bl	8004134 <lsm6dsl_block_data_update_set>
 80037c8:	bb38      	cbnz	r0, 800381a <LSM6DSL_Init+0x6c>
	if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK) {
 80037ca:	2100      	movs	r1, #0
 80037cc:	4620      	mov	r0, r4
 80037ce:	f000 ff6d 	bl	80046ac <lsm6dsl_fifo_mode_set>
 80037d2:	bb28      	cbnz	r0, 8003820 <LSM6DSL_Init+0x72>
	pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80037d4:	2304      	movs	r3, #4
 80037d6:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK) {
 80037da:	2100      	movs	r1, #0
 80037dc:	4620      	mov	r0, r4
 80037de:	f000 fbb7 	bl	8003f50 <lsm6dsl_xl_data_rate_set>
 80037e2:	bb00      	cbnz	r0, 8003826 <LSM6DSL_Init+0x78>
	if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK) {
 80037e4:	2100      	movs	r1, #0
 80037e6:	4620      	mov	r0, r4
 80037e8:	f000 fb74 	bl	8003ed4 <lsm6dsl_xl_full_scale_set>
 80037ec:	b9f0      	cbnz	r0, 800382c <LSM6DSL_Init+0x7e>
	pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80037ee:	2304      	movs	r3, #4
 80037f0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK) {
 80037f4:	2100      	movs	r1, #0
 80037f6:	4620      	mov	r0, r4
 80037f8:	f000 fc46 	bl	8004088 <lsm6dsl_gy_data_rate_set>
 80037fc:	b9c8      	cbnz	r0, 8003832 <LSM6DSL_Init+0x84>
	if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK) {
 80037fe:	2106      	movs	r1, #6
 8003800:	4620      	mov	r0, r4
 8003802:	f000 fbfe 	bl	8004002 <lsm6dsl_gy_full_scale_set>
 8003806:	4603      	mov	r3, r0
 8003808:	b9b0      	cbnz	r0, 8003838 <LSM6DSL_Init+0x8a>
	pObj->is_initialized = 1;
 800380a:	2201      	movs	r2, #1
 800380c:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
}
 8003810:	4618      	mov	r0, r3
 8003812:	bd38      	pop	{r3, r4, r5, pc}
		return LSM6DSL_ERROR;
 8003814:	f04f 33ff 	mov.w	r3, #4294967295
 8003818:	e7fa      	b.n	8003810 <LSM6DSL_Init+0x62>
		return LSM6DSL_ERROR;
 800381a:	f04f 33ff 	mov.w	r3, #4294967295
 800381e:	e7f7      	b.n	8003810 <LSM6DSL_Init+0x62>
		return LSM6DSL_ERROR;
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	e7f4      	b.n	8003810 <LSM6DSL_Init+0x62>
		return LSM6DSL_ERROR;
 8003826:	f04f 33ff 	mov.w	r3, #4294967295
 800382a:	e7f1      	b.n	8003810 <LSM6DSL_Init+0x62>
		return LSM6DSL_ERROR;
 800382c:	f04f 33ff 	mov.w	r3, #4294967295
 8003830:	e7ee      	b.n	8003810 <LSM6DSL_Init+0x62>
		return LSM6DSL_ERROR;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
 8003836:	e7eb      	b.n	8003810 <LSM6DSL_Init+0x62>
		return LSM6DSL_ERROR;
 8003838:	f04f 33ff 	mov.w	r3, #4294967295
 800383c:	e7e8      	b.n	8003810 <LSM6DSL_Init+0x62>

0800383e <LSM6DSL_GYRO_SetFullScale>:
{
 800383e:	b508      	push	{r3, lr}
		 : (FullScale <= 250)  ? LSM6DSL_250dps
 8003840:	297d      	cmp	r1, #125	; 0x7d
 8003842:	dd09      	ble.n	8003858 <LSM6DSL_GYRO_SetFullScale+0x1a>
 8003844:	29fa      	cmp	r1, #250	; 0xfa
 8003846:	dd0f      	ble.n	8003868 <LSM6DSL_GYRO_SetFullScale+0x2a>
 8003848:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 800384c:	dd0e      	ble.n	800386c <LSM6DSL_GYRO_SetFullScale+0x2e>
 800384e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8003852:	dc0d      	bgt.n	8003870 <LSM6DSL_GYRO_SetFullScale+0x32>
 8003854:	2104      	movs	r1, #4
 8003856:	e000      	b.n	800385a <LSM6DSL_GYRO_SetFullScale+0x1c>
 8003858:	2101      	movs	r1, #1
	if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK) {
 800385a:	301c      	adds	r0, #28
 800385c:	f000 fbd1 	bl	8004002 <lsm6dsl_gy_full_scale_set>
 8003860:	4603      	mov	r3, r0
 8003862:	b938      	cbnz	r0, 8003874 <LSM6DSL_GYRO_SetFullScale+0x36>
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd08      	pop	{r3, pc}
		 : (FullScale <= 250)  ? LSM6DSL_250dps
 8003868:	2100      	movs	r1, #0
 800386a:	e7f6      	b.n	800385a <LSM6DSL_GYRO_SetFullScale+0x1c>
 800386c:	2102      	movs	r1, #2
 800386e:	e7f4      	b.n	800385a <LSM6DSL_GYRO_SetFullScale+0x1c>
 8003870:	2106      	movs	r1, #6
 8003872:	e7f2      	b.n	800385a <LSM6DSL_GYRO_SetFullScale+0x1c>
		return LSM6DSL_ERROR;
 8003874:	f04f 33ff 	mov.w	r3, #4294967295
 8003878:	e7f4      	b.n	8003864 <LSM6DSL_GYRO_SetFullScale+0x26>

0800387a <LSM6DSL_ReadID>:
{
 800387a:	b508      	push	{r3, lr}
	if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK) {
 800387c:	301c      	adds	r0, #28
 800387e:	f000 fc83 	bl	8004188 <lsm6dsl_device_id_get>
 8003882:	4603      	mov	r3, r0
 8003884:	b908      	cbnz	r0, 800388a <LSM6DSL_ReadID+0x10>
}
 8003886:	4618      	mov	r0, r3
 8003888:	bd08      	pop	{r3, pc}
		return LSM6DSL_ERROR;
 800388a:	f04f 33ff 	mov.w	r3, #4294967295
 800388e:	e7fa      	b.n	8003886 <LSM6DSL_ReadID+0xc>

08003890 <LSM6DSL_ACC_Disable>:
{
 8003890:	b538      	push	{r3, r4, r5, lr}
	if (pObj->acc_is_enabled == 0U) {
 8003892:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8003896:	b913      	cbnz	r3, 800389e <LSM6DSL_ACC_Disable+0xe>
		return LSM6DSL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	bd38      	pop	{r3, r4, r5, pc}
 800389e:	4604      	mov	r4, r0
	if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK) {
 80038a0:	f100 051c 	add.w	r5, r0, #28
 80038a4:	f100 012b 	add.w	r1, r0, #43	; 0x2b
 80038a8:	4628      	mov	r0, r5
 80038aa:	f000 fb6d 	bl	8003f88 <lsm6dsl_xl_data_rate_get>
 80038ae:	b948      	cbnz	r0, 80038c4 <LSM6DSL_ACC_Disable+0x34>
	if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK) {
 80038b0:	2100      	movs	r1, #0
 80038b2:	4628      	mov	r0, r5
 80038b4:	f000 fb4c 	bl	8003f50 <lsm6dsl_xl_data_rate_set>
 80038b8:	4603      	mov	r3, r0
 80038ba:	b930      	cbnz	r0, 80038ca <LSM6DSL_ACC_Disable+0x3a>
	pObj->acc_is_enabled = 0;
 80038bc:	2200      	movs	r2, #0
 80038be:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
	return LSM6DSL_OK;
 80038c2:	e7ea      	b.n	800389a <LSM6DSL_ACC_Disable+0xa>
		return LSM6DSL_ERROR;
 80038c4:	f04f 33ff 	mov.w	r3, #4294967295
 80038c8:	e7e7      	b.n	800389a <LSM6DSL_ACC_Disable+0xa>
		return LSM6DSL_ERROR;
 80038ca:	f04f 33ff 	mov.w	r3, #4294967295
 80038ce:	e7e4      	b.n	800389a <LSM6DSL_ACC_Disable+0xa>

080038d0 <LSM6DSL_ACC_GetOutputDataRate>:
{
 80038d0:	b510      	push	{r4, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	460c      	mov	r4, r1
	if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK) {
 80038d6:	f10d 0107 	add.w	r1, sp, #7
 80038da:	301c      	adds	r0, #28
 80038dc:	f000 fb54 	bl	8003f88 <lsm6dsl_xl_data_rate_get>
 80038e0:	2800      	cmp	r0, #0
 80038e2:	d132      	bne.n	800394a <LSM6DSL_ACC_GetOutputDataRate+0x7a>
 80038e4:	4602      	mov	r2, r0
	switch (odr_low_level) {
 80038e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80038ea:	2b0b      	cmp	r3, #11
 80038ec:	d830      	bhi.n	8003950 <LSM6DSL_ACC_GetOutputDataRate+0x80>
 80038ee:	e8df f003 	tbb	[pc, r3]
 80038f2:	0e06      	.short	0x0e06
 80038f4:	1a171411 	.word	0x1a171411
 80038f8:	2623201d 	.word	0x2623201d
 80038fc:	0b29      	.short	0x0b29
		*Odr = 0.0f;
 80038fe:	2300      	movs	r3, #0
 8003900:	6023      	str	r3, [r4, #0]
}
 8003902:	4610      	mov	r0, r2
 8003904:	b002      	add	sp, #8
 8003906:	bd10      	pop	{r4, pc}
		*Odr = 1.6f;
 8003908:	4b13      	ldr	r3, [pc, #76]	; (8003958 <LSM6DSL_ACC_GetOutputDataRate+0x88>)
 800390a:	6023      	str	r3, [r4, #0]
		break;
 800390c:	e7f9      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
		*Odr = 12.5f;
 800390e:	4b13      	ldr	r3, [pc, #76]	; (800395c <LSM6DSL_ACC_GetOutputDataRate+0x8c>)
 8003910:	6023      	str	r3, [r4, #0]
		break;
 8003912:	e7f6      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
		*Odr = 26.0f;
 8003914:	4b12      	ldr	r3, [pc, #72]	; (8003960 <LSM6DSL_ACC_GetOutputDataRate+0x90>)
 8003916:	6023      	str	r3, [r4, #0]
		break;
 8003918:	e7f3      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
		*Odr = 52.0f;
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <LSM6DSL_ACC_GetOutputDataRate+0x94>)
 800391c:	6023      	str	r3, [r4, #0]
		break;
 800391e:	e7f0      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
		*Odr = 104.0f;
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <LSM6DSL_ACC_GetOutputDataRate+0x98>)
 8003922:	6023      	str	r3, [r4, #0]
		break;
 8003924:	e7ed      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
		*Odr = 208.0f;
 8003926:	4b11      	ldr	r3, [pc, #68]	; (800396c <LSM6DSL_ACC_GetOutputDataRate+0x9c>)
 8003928:	6023      	str	r3, [r4, #0]
		break;
 800392a:	e7ea      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
		*Odr = 416.0f;
 800392c:	4b10      	ldr	r3, [pc, #64]	; (8003970 <LSM6DSL_ACC_GetOutputDataRate+0xa0>)
 800392e:	6023      	str	r3, [r4, #0]
		break;
 8003930:	e7e7      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
		*Odr = 833.0f;
 8003932:	4b10      	ldr	r3, [pc, #64]	; (8003974 <LSM6DSL_ACC_GetOutputDataRate+0xa4>)
 8003934:	6023      	str	r3, [r4, #0]
		break;
 8003936:	e7e4      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
		*Odr = 1660.0f;
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <LSM6DSL_ACC_GetOutputDataRate+0xa8>)
 800393a:	6023      	str	r3, [r4, #0]
		break;
 800393c:	e7e1      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
		*Odr = 3330.0f;
 800393e:	4b0f      	ldr	r3, [pc, #60]	; (800397c <LSM6DSL_ACC_GetOutputDataRate+0xac>)
 8003940:	6023      	str	r3, [r4, #0]
		break;
 8003942:	e7de      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
		*Odr = 6660.0f;
 8003944:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <LSM6DSL_ACC_GetOutputDataRate+0xb0>)
 8003946:	6023      	str	r3, [r4, #0]
		break;
 8003948:	e7db      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
		return LSM6DSL_ERROR;
 800394a:	f04f 32ff 	mov.w	r2, #4294967295
 800394e:	e7d8      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
		ret = LSM6DSL_ERROR;
 8003950:	f04f 32ff 	mov.w	r2, #4294967295
 8003954:	e7d5      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
 8003956:	bf00      	nop
 8003958:	3fcccccd 	.word	0x3fcccccd
 800395c:	41480000 	.word	0x41480000
 8003960:	41d00000 	.word	0x41d00000
 8003964:	42500000 	.word	0x42500000
 8003968:	42d00000 	.word	0x42d00000
 800396c:	43500000 	.word	0x43500000
 8003970:	43d00000 	.word	0x43d00000
 8003974:	44504000 	.word	0x44504000
 8003978:	44cf8000 	.word	0x44cf8000
 800397c:	45502000 	.word	0x45502000
 8003980:	45d02000 	.word	0x45d02000

08003984 <LSM6DSL_ACC_GetSensitivity>:
{
 8003984:	b510      	push	{r4, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	460c      	mov	r4, r1
	if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK) {
 800398a:	f10d 0107 	add.w	r1, sp, #7
 800398e:	301c      	adds	r0, #28
 8003990:	f000 fabc 	bl	8003f0c <lsm6dsl_xl_full_scale_get>
 8003994:	b9b0      	cbnz	r0, 80039c4 <LSM6DSL_ACC_GetSensitivity+0x40>
 8003996:	4602      	mov	r2, r0
	switch (full_scale) {
 8003998:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d814      	bhi.n	80039ca <LSM6DSL_ACC_GetSensitivity+0x46>
 80039a0:	e8df f003 	tbb	[pc, r3]
 80039a4:	0a070d02 	.word	0x0a070d02
		*Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <LSM6DSL_ACC_GetSensitivity+0x4c>)
 80039aa:	6023      	str	r3, [r4, #0]
}
 80039ac:	4610      	mov	r0, r2
 80039ae:	b002      	add	sp, #8
 80039b0:	bd10      	pop	{r4, pc}
		*Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <LSM6DSL_ACC_GetSensitivity+0x50>)
 80039b4:	6023      	str	r3, [r4, #0]
		break;
 80039b6:	e7f9      	b.n	80039ac <LSM6DSL_ACC_GetSensitivity+0x28>
		*Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 80039b8:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <LSM6DSL_ACC_GetSensitivity+0x54>)
 80039ba:	6023      	str	r3, [r4, #0]
		break;
 80039bc:	e7f6      	b.n	80039ac <LSM6DSL_ACC_GetSensitivity+0x28>
		*Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 80039be:	4b07      	ldr	r3, [pc, #28]	; (80039dc <LSM6DSL_ACC_GetSensitivity+0x58>)
 80039c0:	6023      	str	r3, [r4, #0]
		break;
 80039c2:	e7f3      	b.n	80039ac <LSM6DSL_ACC_GetSensitivity+0x28>
		return LSM6DSL_ERROR;
 80039c4:	f04f 32ff 	mov.w	r2, #4294967295
 80039c8:	e7f0      	b.n	80039ac <LSM6DSL_ACC_GetSensitivity+0x28>
		ret = LSM6DSL_ERROR;
 80039ca:	f04f 32ff 	mov.w	r2, #4294967295
 80039ce:	e7ed      	b.n	80039ac <LSM6DSL_ACC_GetSensitivity+0x28>
 80039d0:	3d79db23 	.word	0x3d79db23
 80039d4:	3df9db23 	.word	0x3df9db23
 80039d8:	3e79db23 	.word	0x3e79db23
 80039dc:	3ef9db23 	.word	0x3ef9db23

080039e0 <LSM6DSL_ACC_GetFullScale>:
{
 80039e0:	b510      	push	{r4, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	460c      	mov	r4, r1
	if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK) {
 80039e6:	f10d 0107 	add.w	r1, sp, #7
 80039ea:	301c      	adds	r0, #28
 80039ec:	f000 fa8e 	bl	8003f0c <lsm6dsl_xl_full_scale_get>
 80039f0:	b9b0      	cbnz	r0, 8003a20 <LSM6DSL_ACC_GetFullScale+0x40>
 80039f2:	4602      	mov	r2, r0
	switch (fs_low_level) {
 80039f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d814      	bhi.n	8003a26 <LSM6DSL_ACC_GetFullScale+0x46>
 80039fc:	e8df f003 	tbb	[pc, r3]
 8003a00:	0a070d02 	.word	0x0a070d02
		*FullScale = 2;
 8003a04:	2302      	movs	r3, #2
 8003a06:	6023      	str	r3, [r4, #0]
}
 8003a08:	4610      	mov	r0, r2
 8003a0a:	b002      	add	sp, #8
 8003a0c:	bd10      	pop	{r4, pc}
		*FullScale = 4;
 8003a0e:	2304      	movs	r3, #4
 8003a10:	6023      	str	r3, [r4, #0]
		break;
 8003a12:	e7f9      	b.n	8003a08 <LSM6DSL_ACC_GetFullScale+0x28>
		*FullScale = 8;
 8003a14:	2308      	movs	r3, #8
 8003a16:	6023      	str	r3, [r4, #0]
		break;
 8003a18:	e7f6      	b.n	8003a08 <LSM6DSL_ACC_GetFullScale+0x28>
		*FullScale = 16;
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	6023      	str	r3, [r4, #0]
		break;
 8003a1e:	e7f3      	b.n	8003a08 <LSM6DSL_ACC_GetFullScale+0x28>
		return LSM6DSL_ERROR;
 8003a20:	f04f 32ff 	mov.w	r2, #4294967295
 8003a24:	e7f0      	b.n	8003a08 <LSM6DSL_ACC_GetFullScale+0x28>
		ret = LSM6DSL_ERROR;
 8003a26:	f04f 32ff 	mov.w	r2, #4294967295
 8003a2a:	e7ed      	b.n	8003a08 <LSM6DSL_ACC_GetFullScale+0x28>

08003a2c <LSM6DSL_ACC_GetAxesRaw>:
{
 8003a2c:	b510      	push	{r4, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	460c      	mov	r4, r1
	if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK) {
 8003a32:	4669      	mov	r1, sp
 8003a34:	301c      	adds	r0, #28
 8003a36:	f000 fba0 	bl	800417a <lsm6dsl_acceleration_raw_get>
 8003a3a:	b960      	cbnz	r0, 8003a56 <LSM6DSL_ACC_GetAxesRaw+0x2a>
 8003a3c:	4603      	mov	r3, r0
	Value->x = data_raw.i16bit[0];
 8003a3e:	f9bd 2000 	ldrsh.w	r2, [sp]
 8003a42:	8022      	strh	r2, [r4, #0]
	Value->y = data_raw.i16bit[1];
 8003a44:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8003a48:	8062      	strh	r2, [r4, #2]
	Value->z = data_raw.i16bit[2];
 8003a4a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8003a4e:	80a2      	strh	r2, [r4, #4]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	b002      	add	sp, #8
 8003a54:	bd10      	pop	{r4, pc}
		return LSM6DSL_ERROR;
 8003a56:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5a:	e7f9      	b.n	8003a50 <LSM6DSL_ACC_GetAxesRaw+0x24>

08003a5c <LSM6DSL_ACC_GetAxes>:
{
 8003a5c:	b530      	push	{r4, r5, lr}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	4605      	mov	r5, r0
 8003a62:	460c      	mov	r4, r1
	float sensitivity = 0.0f;
 8003a64:	2300      	movs	r3, #0
 8003a66:	9301      	str	r3, [sp, #4]
	if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK) {
 8003a68:	a902      	add	r1, sp, #8
 8003a6a:	301c      	adds	r0, #28
 8003a6c:	f000 fb85 	bl	800417a <lsm6dsl_acceleration_raw_get>
 8003a70:	bb70      	cbnz	r0, 8003ad0 <LSM6DSL_ACC_GetAxes+0x74>
	if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK) {
 8003a72:	a901      	add	r1, sp, #4
 8003a74:	4628      	mov	r0, r5
 8003a76:	f7ff ff85 	bl	8003984 <LSM6DSL_ACC_GetSensitivity>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	bb58      	cbnz	r0, 8003ad6 <LSM6DSL_ACC_GetAxes+0x7a>
	Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003a7e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8003a82:	ee07 2a10 	vmov	s14, r2
 8003a86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003a8a:	eddd 7a01 	vldr	s15, [sp, #4]
 8003a8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a92:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003a96:	ed84 7a00 	vstr	s14, [r4]
	Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003a9a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8003a9e:	ee07 2a10 	vmov	s14, r2
 8003aa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003aa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003aaa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003aae:	ed84 7a01 	vstr	s14, [r4, #4]
	Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003ab2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8003ab6:	ee07 2a10 	vmov	s14, r2
 8003aba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ac6:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	b005      	add	sp, #20
 8003ace:	bd30      	pop	{r4, r5, pc}
		return LSM6DSL_ERROR;
 8003ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad4:	e7f9      	b.n	8003aca <LSM6DSL_ACC_GetAxes+0x6e>
		return LSM6DSL_ERROR;
 8003ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ada:	e7f6      	b.n	8003aca <LSM6DSL_ACC_GetAxes+0x6e>

08003adc <LSM6DSL_GYRO_Disable>:
{
 8003adc:	b538      	push	{r3, r4, r5, lr}
	if (pObj->gyro_is_enabled == 0U) {
 8003ade:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8003ae2:	b913      	cbnz	r3, 8003aea <LSM6DSL_GYRO_Disable+0xe>
		return LSM6DSL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	bd38      	pop	{r3, r4, r5, pc}
 8003aea:	4604      	mov	r4, r0
	if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK) {
 8003aec:	f100 051c 	add.w	r5, r0, #28
 8003af0:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 8003af4:	4628      	mov	r0, r5
 8003af6:	f000 fae3 	bl	80040c0 <lsm6dsl_gy_data_rate_get>
 8003afa:	b948      	cbnz	r0, 8003b10 <LSM6DSL_GYRO_Disable+0x34>
	if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK) {
 8003afc:	2100      	movs	r1, #0
 8003afe:	4628      	mov	r0, r5
 8003b00:	f000 fac2 	bl	8004088 <lsm6dsl_gy_data_rate_set>
 8003b04:	4603      	mov	r3, r0
 8003b06:	b930      	cbnz	r0, 8003b16 <LSM6DSL_GYRO_Disable+0x3a>
	pObj->gyro_is_enabled = 0;
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
	return LSM6DSL_OK;
 8003b0e:	e7ea      	b.n	8003ae6 <LSM6DSL_GYRO_Disable+0xa>
		return LSM6DSL_ERROR;
 8003b10:	f04f 33ff 	mov.w	r3, #4294967295
 8003b14:	e7e7      	b.n	8003ae6 <LSM6DSL_GYRO_Disable+0xa>
		return LSM6DSL_ERROR;
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1a:	e7e4      	b.n	8003ae6 <LSM6DSL_GYRO_Disable+0xa>

08003b1c <LSM6DSL_DeInit>:
{
 8003b1c:	b510      	push	{r4, lr}
 8003b1e:	4604      	mov	r4, r0
	if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK) {
 8003b20:	f7ff feb6 	bl	8003890 <LSM6DSL_ACC_Disable>
 8003b24:	b968      	cbnz	r0, 8003b42 <LSM6DSL_DeInit+0x26>
	if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK) {
 8003b26:	4620      	mov	r0, r4
 8003b28:	f7ff ffd8 	bl	8003adc <LSM6DSL_GYRO_Disable>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	b958      	cbnz	r0, 8003b48 <LSM6DSL_DeInit+0x2c>
	pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8003b36:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	pObj->is_initialized = 0;
 8003b3a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8003b3e:	4610      	mov	r0, r2
 8003b40:	bd10      	pop	{r4, pc}
		return LSM6DSL_ERROR;
 8003b42:	f04f 32ff 	mov.w	r2, #4294967295
 8003b46:	e7fa      	b.n	8003b3e <LSM6DSL_DeInit+0x22>
		return LSM6DSL_ERROR;
 8003b48:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4c:	e7f7      	b.n	8003b3e <LSM6DSL_DeInit+0x22>
	...

08003b50 <LSM6DSL_GYRO_GetOutputDataRate>:
{
 8003b50:	b510      	push	{r4, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	460c      	mov	r4, r1
	if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK) {
 8003b56:	f10d 0107 	add.w	r1, sp, #7
 8003b5a:	301c      	adds	r0, #28
 8003b5c:	f000 fab0 	bl	80040c0 <lsm6dsl_gy_data_rate_get>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d12f      	bne.n	8003bc4 <LSM6DSL_GYRO_GetOutputDataRate+0x74>
 8003b64:	4602      	mov	r2, r0
	switch (odr_low_level) {
 8003b66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b6a:	2b0a      	cmp	r3, #10
 8003b6c:	d82d      	bhi.n	8003bca <LSM6DSL_GYRO_GetOutputDataRate+0x7a>
 8003b6e:	e8df f003 	tbb	[pc, r3]
 8003b72:	0b06      	.short	0x0b06
 8003b74:	1714110e 	.word	0x1714110e
 8003b78:	23201d1a 	.word	0x23201d1a
 8003b7c:	26          	.byte	0x26
 8003b7d:	00          	.byte	0x00
		*Odr = 0.0f;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	6023      	str	r3, [r4, #0]
}
 8003b82:	4610      	mov	r0, r2
 8003b84:	b002      	add	sp, #8
 8003b86:	bd10      	pop	{r4, pc}
		*Odr = 12.5f;
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <LSM6DSL_GYRO_GetOutputDataRate+0x80>)
 8003b8a:	6023      	str	r3, [r4, #0]
		break;
 8003b8c:	e7f9      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
		*Odr = 26.0f;
 8003b8e:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <LSM6DSL_GYRO_GetOutputDataRate+0x84>)
 8003b90:	6023      	str	r3, [r4, #0]
		break;
 8003b92:	e7f6      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
		*Odr = 52.0f;
 8003b94:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <LSM6DSL_GYRO_GetOutputDataRate+0x88>)
 8003b96:	6023      	str	r3, [r4, #0]
		break;
 8003b98:	e7f3      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
		*Odr = 104.0f;
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <LSM6DSL_GYRO_GetOutputDataRate+0x8c>)
 8003b9c:	6023      	str	r3, [r4, #0]
		break;
 8003b9e:	e7f0      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
		*Odr = 208.0f;
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <LSM6DSL_GYRO_GetOutputDataRate+0x90>)
 8003ba2:	6023      	str	r3, [r4, #0]
		break;
 8003ba4:	e7ed      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
		*Odr = 416.0f;
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <LSM6DSL_GYRO_GetOutputDataRate+0x94>)
 8003ba8:	6023      	str	r3, [r4, #0]
		break;
 8003baa:	e7ea      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
		*Odr = 833.0f;
 8003bac:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <LSM6DSL_GYRO_GetOutputDataRate+0x98>)
 8003bae:	6023      	str	r3, [r4, #0]
		break;
 8003bb0:	e7e7      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
		*Odr = 1660.0f;
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	; (8003bec <LSM6DSL_GYRO_GetOutputDataRate+0x9c>)
 8003bb4:	6023      	str	r3, [r4, #0]
		break;
 8003bb6:	e7e4      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
		*Odr = 3330.0f;
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <LSM6DSL_GYRO_GetOutputDataRate+0xa0>)
 8003bba:	6023      	str	r3, [r4, #0]
		break;
 8003bbc:	e7e1      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
		*Odr = 6660.0f;
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <LSM6DSL_GYRO_GetOutputDataRate+0xa4>)
 8003bc0:	6023      	str	r3, [r4, #0]
		break;
 8003bc2:	e7de      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
		return LSM6DSL_ERROR;
 8003bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc8:	e7db      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
		ret = LSM6DSL_ERROR;
 8003bca:	f04f 32ff 	mov.w	r2, #4294967295
 8003bce:	e7d8      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
 8003bd0:	41480000 	.word	0x41480000
 8003bd4:	41d00000 	.word	0x41d00000
 8003bd8:	42500000 	.word	0x42500000
 8003bdc:	42d00000 	.word	0x42d00000
 8003be0:	43500000 	.word	0x43500000
 8003be4:	43d00000 	.word	0x43d00000
 8003be8:	44504000 	.word	0x44504000
 8003bec:	44cf8000 	.word	0x44cf8000
 8003bf0:	45502000 	.word	0x45502000
 8003bf4:	45d02000 	.word	0x45d02000

08003bf8 <LSM6DSL_GYRO_GetSensitivity>:
{
 8003bf8:	b510      	push	{r4, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	460c      	mov	r4, r1
	if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK) {
 8003bfe:	f10d 0107 	add.w	r1, sp, #7
 8003c02:	301c      	adds	r0, #28
 8003c04:	f000 fa19 	bl	800403a <lsm6dsl_gy_full_scale_get>
 8003c08:	b9d8      	cbnz	r0, 8003c42 <LSM6DSL_GYRO_GetSensitivity+0x4a>
 8003c0a:	4602      	mov	r2, r0
	switch (full_scale) {
 8003c0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d819      	bhi.n	8003c48 <LSM6DSL_GYRO_GetSensitivity+0x50>
 8003c14:	e8df f003 	tbb	[pc, r3]
 8003c18:	180c0409 	.word	0x180c0409
 8003c1c:	180f      	.short	0x180f
 8003c1e:	12          	.byte	0x12
 8003c1f:	00          	.byte	0x00
		*Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <LSM6DSL_GYRO_GetSensitivity+0x58>)
 8003c22:	6023      	str	r3, [r4, #0]
}
 8003c24:	4610      	mov	r0, r2
 8003c26:	b002      	add	sp, #8
 8003c28:	bd10      	pop	{r4, pc}
		*Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <LSM6DSL_GYRO_GetSensitivity+0x5c>)
 8003c2c:	6023      	str	r3, [r4, #0]
		break;
 8003c2e:	e7f9      	b.n	8003c24 <LSM6DSL_GYRO_GetSensitivity+0x2c>
		*Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8003c30:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <LSM6DSL_GYRO_GetSensitivity+0x60>)
 8003c32:	6023      	str	r3, [r4, #0]
		break;
 8003c34:	e7f6      	b.n	8003c24 <LSM6DSL_GYRO_GetSensitivity+0x2c>
		*Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <LSM6DSL_GYRO_GetSensitivity+0x64>)
 8003c38:	6023      	str	r3, [r4, #0]
		break;
 8003c3a:	e7f3      	b.n	8003c24 <LSM6DSL_GYRO_GetSensitivity+0x2c>
		*Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8003c3c:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <LSM6DSL_GYRO_GetSensitivity+0x68>)
 8003c3e:	6023      	str	r3, [r4, #0]
		break;
 8003c40:	e7f0      	b.n	8003c24 <LSM6DSL_GYRO_GetSensitivity+0x2c>
		return LSM6DSL_ERROR;
 8003c42:	f04f 32ff 	mov.w	r2, #4294967295
 8003c46:	e7ed      	b.n	8003c24 <LSM6DSL_GYRO_GetSensitivity+0x2c>
		ret = LSM6DSL_ERROR;
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4c:	e7ea      	b.n	8003c24 <LSM6DSL_GYRO_GetSensitivity+0x2c>
 8003c4e:	bf00      	nop
 8003c50:	408c0000 	.word	0x408c0000
 8003c54:	410c0000 	.word	0x410c0000
 8003c58:	418c0000 	.word	0x418c0000
 8003c5c:	420c0000 	.word	0x420c0000
 8003c60:	428c0000 	.word	0x428c0000

08003c64 <LSM6DSL_GYRO_GetFullScale>:
{
 8003c64:	b510      	push	{r4, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	460c      	mov	r4, r1
	if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK) {
 8003c6a:	f10d 0107 	add.w	r1, sp, #7
 8003c6e:	301c      	adds	r0, #28
 8003c70:	f000 f9e3 	bl	800403a <lsm6dsl_gy_full_scale_get>
 8003c74:	b9f0      	cbnz	r0, 8003cb4 <LSM6DSL_GYRO_GetFullScale+0x50>
 8003c76:	4602      	mov	r2, r0
	switch (fs_low_level) {
 8003c78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c7c:	2b06      	cmp	r3, #6
 8003c7e:	d81c      	bhi.n	8003cba <LSM6DSL_GYRO_GetFullScale+0x56>
 8003c80:	e8df f003 	tbb	[pc, r3]
 8003c84:	1b0c0409 	.word	0x1b0c0409
 8003c88:	1b10      	.short	0x1b10
 8003c8a:	14          	.byte	0x14
 8003c8b:	00          	.byte	0x00
		*FullScale = 125;
 8003c8c:	237d      	movs	r3, #125	; 0x7d
 8003c8e:	6023      	str	r3, [r4, #0]
}
 8003c90:	4610      	mov	r0, r2
 8003c92:	b002      	add	sp, #8
 8003c94:	bd10      	pop	{r4, pc}
		*FullScale = 250;
 8003c96:	23fa      	movs	r3, #250	; 0xfa
 8003c98:	6023      	str	r3, [r4, #0]
		break;
 8003c9a:	e7f9      	b.n	8003c90 <LSM6DSL_GYRO_GetFullScale+0x2c>
		*FullScale = 500;
 8003c9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003ca0:	6023      	str	r3, [r4, #0]
		break;
 8003ca2:	e7f5      	b.n	8003c90 <LSM6DSL_GYRO_GetFullScale+0x2c>
		*FullScale = 1000;
 8003ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ca8:	6023      	str	r3, [r4, #0]
		break;
 8003caa:	e7f1      	b.n	8003c90 <LSM6DSL_GYRO_GetFullScale+0x2c>
		*FullScale = 2000;
 8003cac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003cb0:	6023      	str	r3, [r4, #0]
		break;
 8003cb2:	e7ed      	b.n	8003c90 <LSM6DSL_GYRO_GetFullScale+0x2c>
		return LSM6DSL_ERROR;
 8003cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb8:	e7ea      	b.n	8003c90 <LSM6DSL_GYRO_GetFullScale+0x2c>
		ret = LSM6DSL_ERROR;
 8003cba:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbe:	e7e7      	b.n	8003c90 <LSM6DSL_GYRO_GetFullScale+0x2c>

08003cc0 <LSM6DSL_GYRO_GetAxesRaw>:
{
 8003cc0:	b510      	push	{r4, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	460c      	mov	r4, r1
	if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK) {
 8003cc6:	4669      	mov	r1, sp
 8003cc8:	301c      	adds	r0, #28
 8003cca:	f000 fa4f 	bl	800416c <lsm6dsl_angular_rate_raw_get>
 8003cce:	b960      	cbnz	r0, 8003cea <LSM6DSL_GYRO_GetAxesRaw+0x2a>
 8003cd0:	4603      	mov	r3, r0
	Value->x = data_raw.i16bit[0];
 8003cd2:	f9bd 2000 	ldrsh.w	r2, [sp]
 8003cd6:	8022      	strh	r2, [r4, #0]
	Value->y = data_raw.i16bit[1];
 8003cd8:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8003cdc:	8062      	strh	r2, [r4, #2]
	Value->z = data_raw.i16bit[2];
 8003cde:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8003ce2:	80a2      	strh	r2, [r4, #4]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	b002      	add	sp, #8
 8003ce8:	bd10      	pop	{r4, pc}
		return LSM6DSL_ERROR;
 8003cea:	f04f 33ff 	mov.w	r3, #4294967295
 8003cee:	e7f9      	b.n	8003ce4 <LSM6DSL_GYRO_GetAxesRaw+0x24>

08003cf0 <LSM6DSL_GYRO_GetAxes>:
{
 8003cf0:	b530      	push	{r4, r5, lr}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	460c      	mov	r4, r1
	if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK) {
 8003cf8:	a902      	add	r1, sp, #8
 8003cfa:	301c      	adds	r0, #28
 8003cfc:	f000 fa36 	bl	800416c <lsm6dsl_angular_rate_raw_get>
 8003d00:	bb70      	cbnz	r0, 8003d60 <LSM6DSL_GYRO_GetAxes+0x70>
	if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK) {
 8003d02:	a901      	add	r1, sp, #4
 8003d04:	4628      	mov	r0, r5
 8003d06:	f7ff ff77 	bl	8003bf8 <LSM6DSL_GYRO_GetSensitivity>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	bb58      	cbnz	r0, 8003d66 <LSM6DSL_GYRO_GetAxes+0x76>
	AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003d0e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8003d12:	ee07 2a10 	vmov	s14, r2
 8003d16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d1a:	eddd 7a01 	vldr	s15, [sp, #4]
 8003d1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d22:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003d26:	ed84 7a00 	vstr	s14, [r4]
	AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003d2a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8003d2e:	ee07 2a10 	vmov	s14, r2
 8003d32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d3a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003d3e:	ed84 7a01 	vstr	s14, [r4, #4]
	AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003d42:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8003d46:	ee07 2a10 	vmov	s14, r2
 8003d4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d56:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	b005      	add	sp, #20
 8003d5e:	bd30      	pop	{r4, r5, pc}
		return LSM6DSL_ERROR;
 8003d60:	f04f 33ff 	mov.w	r3, #4294967295
 8003d64:	e7f9      	b.n	8003d5a <LSM6DSL_GYRO_GetAxes+0x6a>
		return LSM6DSL_ERROR;
 8003d66:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6a:	e7f6      	b.n	8003d5a <LSM6DSL_GYRO_GetAxes+0x6a>

08003d6c <LSM6DSL_Write_Reg>:
{
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	ac02      	add	r4, sp, #8
 8003d72:	f804 2d01 	strb.w	r2, [r4, #-1]!
	if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK) {
 8003d76:	2301      	movs	r3, #1
 8003d78:	4622      	mov	r2, r4
 8003d7a:	301c      	adds	r0, #28
 8003d7c:	f000 f8a5 	bl	8003eca <lsm6dsl_write_reg>
 8003d80:	4603      	mov	r3, r0
 8003d82:	b910      	cbnz	r0, 8003d8a <LSM6DSL_Write_Reg+0x1e>
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	b002      	add	sp, #8
 8003d88:	bd10      	pop	{r4, pc}
		return LSM6DSL_ERROR;
 8003d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8e:	e7f9      	b.n	8003d84 <LSM6DSL_Write_Reg+0x18>

08003d90 <LSM6DSL_RegisterBusIO>:
	if (pObj == NULL) {
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d02c      	beq.n	8003dee <LSM6DSL_RegisterBusIO+0x5e>
{
 8003d94:	b510      	push	{r4, lr}
 8003d96:	4604      	mov	r4, r0
		pObj->IO.Init = pIO->Init;
 8003d98:	680a      	ldr	r2, [r1, #0]
 8003d9a:	6002      	str	r2, [r0, #0]
		pObj->IO.DeInit = pIO->DeInit;
 8003d9c:	6848      	ldr	r0, [r1, #4]
 8003d9e:	6060      	str	r0, [r4, #4]
		pObj->IO.BusType = pIO->BusType;
 8003da0:	6888      	ldr	r0, [r1, #8]
 8003da2:	60a0      	str	r0, [r4, #8]
		pObj->IO.Address = pIO->Address;
 8003da4:	7b08      	ldrb	r0, [r1, #12]
 8003da6:	7320      	strb	r0, [r4, #12]
		pObj->IO.WriteReg = pIO->WriteReg;
 8003da8:	6908      	ldr	r0, [r1, #16]
 8003daa:	6120      	str	r0, [r4, #16]
		pObj->IO.ReadReg = pIO->ReadReg;
 8003dac:	6948      	ldr	r0, [r1, #20]
 8003dae:	6160      	str	r0, [r4, #20]
		pObj->IO.GetTick = pIO->GetTick;
 8003db0:	6989      	ldr	r1, [r1, #24]
 8003db2:	61a1      	str	r1, [r4, #24]
		pObj->Ctx.read_reg = ReadRegWrap;
 8003db4:	4913      	ldr	r1, [pc, #76]	; (8003e04 <LSM6DSL_RegisterBusIO+0x74>)
 8003db6:	6221      	str	r1, [r4, #32]
		pObj->Ctx.write_reg = WriteRegWrap;
 8003db8:	4913      	ldr	r1, [pc, #76]	; (8003e08 <LSM6DSL_RegisterBusIO+0x78>)
 8003dba:	61e1      	str	r1, [r4, #28]
		pObj->Ctx.handle = pObj;
 8003dbc:	6264      	str	r4, [r4, #36]	; 0x24
		if (pObj->IO.Init == NULL) {
 8003dbe:	b1d2      	cbz	r2, 8003df6 <LSM6DSL_RegisterBusIO+0x66>
		}else if (pObj->IO.Init() != LSM6DSL_OK) {
 8003dc0:	4790      	blx	r2
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	b9d0      	cbnz	r0, 8003dfc <LSM6DSL_RegisterBusIO+0x6c>
			if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) { /* SPI 3-Wires */
 8003dc6:	68a2      	ldr	r2, [r4, #8]
 8003dc8:	2a02      	cmp	r2, #2
 8003dca:	d001      	beq.n	8003dd0 <LSM6DSL_RegisterBusIO+0x40>
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	bd10      	pop	{r4, pc}
				if (pObj->is_initialized == 0U) {
 8003dd0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003dd4:	2a00      	cmp	r2, #0
 8003dd6:	d1f9      	bne.n	8003dcc <LSM6DSL_RegisterBusIO+0x3c>
					if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK) {
 8003dd8:	220c      	movs	r2, #12
 8003dda:	2112      	movs	r1, #18
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f7ff ffc5 	bl	8003d6c <LSM6DSL_Write_Reg>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d0f1      	beq.n	8003dcc <LSM6DSL_RegisterBusIO+0x3c>
						ret = LSM6DSL_ERROR;
 8003de8:	f04f 33ff 	mov.w	r3, #4294967295
	return ret;
 8003dec:	e7ee      	b.n	8003dcc <LSM6DSL_RegisterBusIO+0x3c>
		ret = LSM6DSL_ERROR;
 8003dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	4770      	bx	lr
			ret = LSM6DSL_ERROR;
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfa:	e7e7      	b.n	8003dcc <LSM6DSL_RegisterBusIO+0x3c>
			ret = LSM6DSL_ERROR;
 8003dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003e00:	e7e4      	b.n	8003dcc <LSM6DSL_RegisterBusIO+0x3c>
 8003e02:	bf00      	nop
 8003e04:	0800352d 	.word	0x0800352d
 8003e08:	08003537 	.word	0x08003537

08003e0c <LSM6DSL_ACC_Enable_6D_Orientation>:
{
 8003e0c:	b530      	push	{r4, r5, lr}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	4604      	mov	r4, r0
 8003e12:	460d      	mov	r5, r1
	if (LSM6DSL_ACC_SetOutputDataRate(pObj, 416.0f) != LSM6DSL_OK) {
 8003e14:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8003ebc <LSM6DSL_ACC_Enable_6D_Orientation+0xb0>
 8003e18:	f7ff fc16 	bl	8003648 <LSM6DSL_ACC_SetOutputDataRate>
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	d13e      	bne.n	8003e9e <LSM6DSL_ACC_Enable_6D_Orientation+0x92>
	if (LSM6DSL_ACC_SetFullScale(pObj, 2) != LSM6DSL_OK) {
 8003e20:	2102      	movs	r1, #2
 8003e22:	4620      	mov	r0, r4
 8003e24:	f7ff fc1b 	bl	800365e <LSM6DSL_ACC_SetFullScale>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d13b      	bne.n	8003ea4 <LSM6DSL_ACC_Enable_6D_Orientation+0x98>
	if (lsm6dsl_6d_threshold_set(&(pObj->Ctx), LSM6DSL_DEG_60) != LSM6DSL_OK) {
 8003e2c:	341c      	adds	r4, #28
 8003e2e:	2102      	movs	r1, #2
 8003e30:	4620      	mov	r0, r4
 8003e32:	f000 fc1f 	bl	8004674 <lsm6dsl_6d_threshold_set>
 8003e36:	2800      	cmp	r0, #0
 8003e38:	d137      	bne.n	8003eaa <LSM6DSL_ACC_Enable_6D_Orientation+0x9e>
	switch (IntPin) {
 8003e3a:	b135      	cbz	r5, 8003e4a <LSM6DSL_ACC_Enable_6D_Orientation+0x3e>
 8003e3c:	2d01      	cmp	r5, #1
 8003e3e:	d019      	beq.n	8003e74 <LSM6DSL_ACC_Enable_6D_Orientation+0x68>
		ret = LSM6DSL_ERROR;
 8003e40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	b003      	add	sp, #12
 8003e48:	bd30      	pop	{r4, r5, pc}
		if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSL_OK) {
 8003e4a:	a901      	add	r1, sp, #4
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f000 fa84 	bl	800435a <lsm6dsl_pin_int1_route_get>
 8003e52:	bb68      	cbnz	r0, 8003eb0 <LSM6DSL_ACC_Enable_6D_Orientation+0xa4>
		val1.int1_6d = PROPERTY_ENABLE;
 8003e54:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003e58:	f043 0304 	orr.w	r3, r3, #4
 8003e5c:	f88d 3005 	strb.w	r3, [sp, #5]
		if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSL_OK) {
 8003e60:	9901      	ldr	r1, [sp, #4]
 8003e62:	4620      	mov	r0, r4
 8003e64:	f000 f9b3 	bl	80041ce <lsm6dsl_pin_int1_route_set>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d0ea      	beq.n	8003e44 <LSM6DSL_ACC_Enable_6D_Orientation+0x38>
			return LSM6DSL_ERROR;
 8003e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e72:	e7e7      	b.n	8003e44 <LSM6DSL_ACC_Enable_6D_Orientation+0x38>
		if (lsm6dsl_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSL_OK) {
 8003e74:	4669      	mov	r1, sp
 8003e76:	4620      	mov	r0, r4
 8003e78:	f000 fb95 	bl	80045a6 <lsm6dsl_pin_int2_route_get>
 8003e7c:	b9d8      	cbnz	r0, 8003eb6 <LSM6DSL_ACC_Enable_6D_Orientation+0xaa>
		val2.int2_6d = PROPERTY_ENABLE;
 8003e7e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003e82:	f043 0304 	orr.w	r3, r3, #4
 8003e86:	f88d 3001 	strb.w	r3, [sp, #1]
		if (lsm6dsl_pin_int2_route_set(&(pObj->Ctx), val2) != LSM6DSL_OK) {
 8003e8a:	9900      	ldr	r1, [sp, #0]
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f000 fadd 	bl	800444c <lsm6dsl_pin_int2_route_set>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2800      	cmp	r0, #0
 8003e96:	d0d5      	beq.n	8003e44 <LSM6DSL_ACC_Enable_6D_Orientation+0x38>
			return LSM6DSL_ERROR;
 8003e98:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9c:	e7d2      	b.n	8003e44 <LSM6DSL_ACC_Enable_6D_Orientation+0x38>
		return LSM6DSL_ERROR;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	e7cf      	b.n	8003e44 <LSM6DSL_ACC_Enable_6D_Orientation+0x38>
		return LSM6DSL_ERROR;
 8003ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea8:	e7cc      	b.n	8003e44 <LSM6DSL_ACC_Enable_6D_Orientation+0x38>
		return LSM6DSL_ERROR;
 8003eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003eae:	e7c9      	b.n	8003e44 <LSM6DSL_ACC_Enable_6D_Orientation+0x38>
			return LSM6DSL_ERROR;
 8003eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb4:	e7c6      	b.n	8003e44 <LSM6DSL_ACC_Enable_6D_Orientation+0x38>
			return LSM6DSL_ERROR;
 8003eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eba:	e7c3      	b.n	8003e44 <LSM6DSL_ACC_Enable_6D_Orientation+0x38>
 8003ebc:	43d00000 	.word	0x43d00000

08003ec0 <lsm6dsl_read_reg>:
 * @param  uint16_t len: number of consecutive register to read
 *
 */
int32_t lsm6dsl_read_reg(lsm6dsl_ctx_t *ctx, uint8_t reg, uint8_t *data,
			 uint16_t len)
{
 8003ec0:	b510      	push	{r4, lr}
	int32_t ret;
	ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003ec2:	6844      	ldr	r4, [r0, #4]
 8003ec4:	6880      	ldr	r0, [r0, #8]
 8003ec6:	47a0      	blx	r4
	return ret;
}
 8003ec8:	bd10      	pop	{r4, pc}

08003eca <lsm6dsl_write_reg>:
 * @param  uint16_t len: number of consecutive register to write
 *
 */
int32_t lsm6dsl_write_reg(lsm6dsl_ctx_t *ctx, uint8_t reg, uint8_t *data,
			  uint16_t len)
{
 8003eca:	b510      	push	{r4, lr}
	int32_t ret;
	ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003ecc:	6804      	ldr	r4, [r0, #0]
 8003ece:	6880      	ldr	r0, [r0, #8]
 8003ed0:	47a0      	blx	r4
	return ret;
}
 8003ed2:	bd10      	pop	{r4, pc}

08003ed4 <lsm6dsl_xl_full_scale_set>:
 * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
 * @param  lsm6dsl_fs_xl_t: change the values of fs_xl in reg CTRL1_XL
 *
 */
int32_t lsm6dsl_xl_full_scale_set(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8003ed4:	b530      	push	{r4, r5, lr}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	4604      	mov	r4, r0
 8003eda:	460d      	mov	r5, r1
	lsm6dsl_reg_t reg;
	int32_t ret;

	ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003edc:	2301      	movs	r3, #1
 8003ede:	aa01      	add	r2, sp, #4
 8003ee0:	2110      	movs	r1, #16
 8003ee2:	f7ff ffed 	bl	8003ec0 <lsm6dsl_read_reg>
	if (ret == 0) {
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	b110      	cbz	r0, 8003ef0 <lsm6dsl_xl_full_scale_set+0x1c>
		reg.ctrl1_xl.fs_xl = (uint8_t)val;
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
	}
	return ret;
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	b003      	add	sp, #12
 8003eee:	bd30      	pop	{r4, r5, pc}
		reg.ctrl1_xl.fs_xl = (uint8_t)val;
 8003ef0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003ef4:	f365 0383 	bfi	r3, r5, #2, #2
 8003ef8:	aa02      	add	r2, sp, #8
 8003efa:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003efe:	2301      	movs	r3, #1
 8003f00:	2110      	movs	r1, #16
 8003f02:	4620      	mov	r0, r4
 8003f04:	f7ff ffe1 	bl	8003eca <lsm6dsl_write_reg>
 8003f08:	4603      	mov	r3, r0
	return ret;
 8003f0a:	e7ee      	b.n	8003eea <lsm6dsl_xl_full_scale_set+0x16>

08003f0c <lsm6dsl_xl_full_scale_get>:
 * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
 * @param  lsm6dsl_fs_xl_t: Get the values of fs_xl in reg CTRL1_XL
 *
 */
int32_t lsm6dsl_xl_full_scale_get(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8003f0c:	b510      	push	{r4, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	460c      	mov	r4, r1
	lsm6dsl_reg_t reg;
	int32_t ret;

	ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003f12:	2301      	movs	r3, #1
 8003f14:	aa01      	add	r2, sp, #4
 8003f16:	2110      	movs	r1, #16
 8003f18:	f7ff ffd2 	bl	8003ec0 <lsm6dsl_read_reg>
	switch (reg.ctrl1_xl.fs_xl) {
 8003f1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003f20:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d810      	bhi.n	8003f4a <lsm6dsl_xl_full_scale_get+0x3e>
 8003f28:	e8df f003 	tbb	[pc, r3]
 8003f2c:	0c090602 	.word	0x0c090602
	case LSM6DSL_2g:
		*val = LSM6DSL_2g;
 8003f30:	2300      	movs	r3, #0
 8003f32:	7023      	strb	r3, [r4, #0]
		*val = LSM6DSL_XL_FS_ND;
		break;
	}

	return ret;
}
 8003f34:	b002      	add	sp, #8
 8003f36:	bd10      	pop	{r4, pc}
		*val = LSM6DSL_16g;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	7023      	strb	r3, [r4, #0]
		break;
 8003f3c:	e7fa      	b.n	8003f34 <lsm6dsl_xl_full_scale_get+0x28>
		*val = LSM6DSL_4g;
 8003f3e:	2302      	movs	r3, #2
 8003f40:	7023      	strb	r3, [r4, #0]
		break;
 8003f42:	e7f7      	b.n	8003f34 <lsm6dsl_xl_full_scale_get+0x28>
		*val = LSM6DSL_8g;
 8003f44:	2303      	movs	r3, #3
 8003f46:	7023      	strb	r3, [r4, #0]
		break;
 8003f48:	e7f4      	b.n	8003f34 <lsm6dsl_xl_full_scale_get+0x28>
		*val = LSM6DSL_XL_FS_ND;
 8003f4a:	2304      	movs	r3, #4
 8003f4c:	7023      	strb	r3, [r4, #0]
	return ret;
 8003f4e:	e7f1      	b.n	8003f34 <lsm6dsl_xl_full_scale_get+0x28>

08003f50 <lsm6dsl_xl_data_rate_set>:
 * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
 * @param  lsm6dsl_odr_xl_t: change the values of odr_xl in reg CTRL1_XL
 *
 */
int32_t lsm6dsl_xl_data_rate_set(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8003f50:	b530      	push	{r4, r5, lr}
 8003f52:	b083      	sub	sp, #12
 8003f54:	4604      	mov	r4, r0
 8003f56:	460d      	mov	r5, r1
	lsm6dsl_reg_t reg;
	int32_t ret;

	ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003f58:	2301      	movs	r3, #1
 8003f5a:	aa01      	add	r2, sp, #4
 8003f5c:	2110      	movs	r1, #16
 8003f5e:	f7ff ffaf 	bl	8003ec0 <lsm6dsl_read_reg>
	if (ret == 0) {
 8003f62:	4603      	mov	r3, r0
 8003f64:	b110      	cbz	r0, 8003f6c <lsm6dsl_xl_data_rate_set+0x1c>
		reg.ctrl1_xl.odr_xl = (uint8_t)val;
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
	}
	return ret;
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	b003      	add	sp, #12
 8003f6a:	bd30      	pop	{r4, r5, pc}
		reg.ctrl1_xl.odr_xl = (uint8_t)val;
 8003f6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003f70:	f365 1307 	bfi	r3, r5, #4, #4
 8003f74:	aa02      	add	r2, sp, #8
 8003f76:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	2110      	movs	r1, #16
 8003f7e:	4620      	mov	r0, r4
 8003f80:	f7ff ffa3 	bl	8003eca <lsm6dsl_write_reg>
 8003f84:	4603      	mov	r3, r0
	return ret;
 8003f86:	e7ee      	b.n	8003f66 <lsm6dsl_xl_data_rate_set+0x16>

08003f88 <lsm6dsl_xl_data_rate_get>:
 * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
 * @param  lsm6dsl_odr_xl_t: Get the values of odr_xl in reg CTRL1_XL
 *
 */
int32_t lsm6dsl_xl_data_rate_get(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 8003f88:	b510      	push	{r4, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	460c      	mov	r4, r1
	lsm6dsl_reg_t reg;
	int32_t ret;

	ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003f8e:	2301      	movs	r3, #1
 8003f90:	aa01      	add	r2, sp, #4
 8003f92:	2110      	movs	r1, #16
 8003f94:	f7ff ff94 	bl	8003ec0 <lsm6dsl_read_reg>
	switch (reg.ctrl1_xl.odr_xl) {
 8003f98:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	2b0b      	cmp	r3, #11
 8003fa0:	d82c      	bhi.n	8003ffc <lsm6dsl_xl_data_rate_get+0x74>
 8003fa2:	e8df f003 	tbb	[pc, r3]
 8003fa6:	0a06      	.short	0x0a06
 8003fa8:	1613100d 	.word	0x1613100d
 8003fac:	221f1c19 	.word	0x221f1c19
 8003fb0:	2825      	.short	0x2825
	case LSM6DSL_XL_ODR_OFF:
		*val = LSM6DSL_XL_ODR_OFF;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	7023      	strb	r3, [r4, #0]
		*val = LSM6DSL_XL_ODR_ND;
		break;
	}

	return ret;
}
 8003fb6:	b002      	add	sp, #8
 8003fb8:	bd10      	pop	{r4, pc}
		*val = LSM6DSL_XL_ODR_12Hz5;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	7023      	strb	r3, [r4, #0]
		break;
 8003fbe:	e7fa      	b.n	8003fb6 <lsm6dsl_xl_data_rate_get+0x2e>
		*val = LSM6DSL_XL_ODR_26Hz;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	7023      	strb	r3, [r4, #0]
		break;
 8003fc4:	e7f7      	b.n	8003fb6 <lsm6dsl_xl_data_rate_get+0x2e>
		*val = LSM6DSL_XL_ODR_52Hz;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	7023      	strb	r3, [r4, #0]
		break;
 8003fca:	e7f4      	b.n	8003fb6 <lsm6dsl_xl_data_rate_get+0x2e>
		*val = LSM6DSL_XL_ODR_104Hz;
 8003fcc:	2304      	movs	r3, #4
 8003fce:	7023      	strb	r3, [r4, #0]
		break;
 8003fd0:	e7f1      	b.n	8003fb6 <lsm6dsl_xl_data_rate_get+0x2e>
		*val = LSM6DSL_XL_ODR_208Hz;
 8003fd2:	2305      	movs	r3, #5
 8003fd4:	7023      	strb	r3, [r4, #0]
		break;
 8003fd6:	e7ee      	b.n	8003fb6 <lsm6dsl_xl_data_rate_get+0x2e>
		*val = LSM6DSL_XL_ODR_416Hz;
 8003fd8:	2306      	movs	r3, #6
 8003fda:	7023      	strb	r3, [r4, #0]
		break;
 8003fdc:	e7eb      	b.n	8003fb6 <lsm6dsl_xl_data_rate_get+0x2e>
		*val = LSM6DSL_XL_ODR_833Hz;
 8003fde:	2307      	movs	r3, #7
 8003fe0:	7023      	strb	r3, [r4, #0]
		break;
 8003fe2:	e7e8      	b.n	8003fb6 <lsm6dsl_xl_data_rate_get+0x2e>
		*val = LSM6DSL_XL_ODR_1k66Hz;
 8003fe4:	2308      	movs	r3, #8
 8003fe6:	7023      	strb	r3, [r4, #0]
		break;
 8003fe8:	e7e5      	b.n	8003fb6 <lsm6dsl_xl_data_rate_get+0x2e>
		*val = LSM6DSL_XL_ODR_3k33Hz;
 8003fea:	2309      	movs	r3, #9
 8003fec:	7023      	strb	r3, [r4, #0]
		break;
 8003fee:	e7e2      	b.n	8003fb6 <lsm6dsl_xl_data_rate_get+0x2e>
		*val = LSM6DSL_XL_ODR_6k66Hz;
 8003ff0:	230a      	movs	r3, #10
 8003ff2:	7023      	strb	r3, [r4, #0]
		break;
 8003ff4:	e7df      	b.n	8003fb6 <lsm6dsl_xl_data_rate_get+0x2e>
		*val = LSM6DSL_XL_ODR_1Hz6;
 8003ff6:	230b      	movs	r3, #11
 8003ff8:	7023      	strb	r3, [r4, #0]
		break;
 8003ffa:	e7dc      	b.n	8003fb6 <lsm6dsl_xl_data_rate_get+0x2e>
		*val = LSM6DSL_XL_ODR_ND;
 8003ffc:	230c      	movs	r3, #12
 8003ffe:	7023      	strb	r3, [r4, #0]
	return ret;
 8004000:	e7d9      	b.n	8003fb6 <lsm6dsl_xl_data_rate_get+0x2e>

08004002 <lsm6dsl_gy_full_scale_set>:
 * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
 * @param  lsm6dsl_fs_g_t: change the values of fs_g in reg CTRL2_G
 *
 */
int32_t lsm6dsl_gy_full_scale_set(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8004002:	b530      	push	{r4, r5, lr}
 8004004:	b083      	sub	sp, #12
 8004006:	4604      	mov	r4, r0
 8004008:	460d      	mov	r5, r1
	lsm6dsl_reg_t reg;
	int32_t ret;

	ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 800400a:	2301      	movs	r3, #1
 800400c:	aa01      	add	r2, sp, #4
 800400e:	2111      	movs	r1, #17
 8004010:	f7ff ff56 	bl	8003ec0 <lsm6dsl_read_reg>
	if (ret == 0) {
 8004014:	4603      	mov	r3, r0
 8004016:	b110      	cbz	r0, 800401e <lsm6dsl_gy_full_scale_set+0x1c>
		reg.ctrl2_g.fs_g = (uint8_t)val;
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
	}
	return ret;
}
 8004018:	4618      	mov	r0, r3
 800401a:	b003      	add	sp, #12
 800401c:	bd30      	pop	{r4, r5, pc}
		reg.ctrl2_g.fs_g = (uint8_t)val;
 800401e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004022:	f365 0343 	bfi	r3, r5, #1, #3
 8004026:	aa02      	add	r2, sp, #8
 8004028:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 800402c:	2301      	movs	r3, #1
 800402e:	2111      	movs	r1, #17
 8004030:	4620      	mov	r0, r4
 8004032:	f7ff ff4a 	bl	8003eca <lsm6dsl_write_reg>
 8004036:	4603      	mov	r3, r0
	return ret;
 8004038:	e7ee      	b.n	8004018 <lsm6dsl_gy_full_scale_set+0x16>

0800403a <lsm6dsl_gy_full_scale_get>:
 * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
 * @param  lsm6dsl_fs_g_t: Get the values of fs_g in reg CTRL2_G
 *
 */
int32_t lsm6dsl_gy_full_scale_get(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 800403a:	b510      	push	{r4, lr}
 800403c:	b082      	sub	sp, #8
 800403e:	460c      	mov	r4, r1
	lsm6dsl_reg_t reg;
	int32_t ret;

	ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 8004040:	2301      	movs	r3, #1
 8004042:	aa01      	add	r2, sp, #4
 8004044:	2111      	movs	r1, #17
 8004046:	f7ff ff3b 	bl	8003ec0 <lsm6dsl_read_reg>
	switch (reg.ctrl2_g.fs_g) {
 800404a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800404e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004052:	2b06      	cmp	r3, #6
 8004054:	d815      	bhi.n	8004082 <lsm6dsl_gy_full_scale_get+0x48>
 8004056:	e8df f003 	tbb	[pc, r3]
 800405a:	0804      	.short	0x0804
 800405c:	140e140b 	.word	0x140e140b
 8004060:	11          	.byte	0x11
 8004061:	00          	.byte	0x00
	case LSM6DSL_250dps:
		*val = LSM6DSL_250dps;
 8004062:	2300      	movs	r3, #0
 8004064:	7023      	strb	r3, [r4, #0]
		*val = LSM6DSL_GY_FS_ND;
		break;
	}

	return ret;
}
 8004066:	b002      	add	sp, #8
 8004068:	bd10      	pop	{r4, pc}
		*val = LSM6DSL_125dps;
 800406a:	2301      	movs	r3, #1
 800406c:	7023      	strb	r3, [r4, #0]
		break;
 800406e:	e7fa      	b.n	8004066 <lsm6dsl_gy_full_scale_get+0x2c>
		*val = LSM6DSL_500dps;
 8004070:	2302      	movs	r3, #2
 8004072:	7023      	strb	r3, [r4, #0]
		break;
 8004074:	e7f7      	b.n	8004066 <lsm6dsl_gy_full_scale_get+0x2c>
		*val = LSM6DSL_1000dps;
 8004076:	2304      	movs	r3, #4
 8004078:	7023      	strb	r3, [r4, #0]
		break;
 800407a:	e7f4      	b.n	8004066 <lsm6dsl_gy_full_scale_get+0x2c>
		*val = LSM6DSL_2000dps;
 800407c:	2306      	movs	r3, #6
 800407e:	7023      	strb	r3, [r4, #0]
		break;
 8004080:	e7f1      	b.n	8004066 <lsm6dsl_gy_full_scale_get+0x2c>
		*val = LSM6DSL_GY_FS_ND;
 8004082:	2307      	movs	r3, #7
 8004084:	7023      	strb	r3, [r4, #0]
	return ret;
 8004086:	e7ee      	b.n	8004066 <lsm6dsl_gy_full_scale_get+0x2c>

08004088 <lsm6dsl_gy_data_rate_set>:
 * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
 * @param  lsm6dsl_odr_g_t: change the values of odr_g in reg CTRL2_G
 *
 */
int32_t lsm6dsl_gy_data_rate_set(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8004088:	b530      	push	{r4, r5, lr}
 800408a:	b083      	sub	sp, #12
 800408c:	4604      	mov	r4, r0
 800408e:	460d      	mov	r5, r1
	lsm6dsl_reg_t reg;
	int32_t ret;

	ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 8004090:	2301      	movs	r3, #1
 8004092:	aa01      	add	r2, sp, #4
 8004094:	2111      	movs	r1, #17
 8004096:	f7ff ff13 	bl	8003ec0 <lsm6dsl_read_reg>
	if (ret == 0) {
 800409a:	4603      	mov	r3, r0
 800409c:	b110      	cbz	r0, 80040a4 <lsm6dsl_gy_data_rate_set+0x1c>
		reg.ctrl2_g.odr_g = (uint8_t)val;
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
	}
	return ret;
}
 800409e:	4618      	mov	r0, r3
 80040a0:	b003      	add	sp, #12
 80040a2:	bd30      	pop	{r4, r5, pc}
		reg.ctrl2_g.odr_g = (uint8_t)val;
 80040a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80040a8:	f365 1307 	bfi	r3, r5, #4, #4
 80040ac:	aa02      	add	r2, sp, #8
 80040ae:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 80040b2:	2301      	movs	r3, #1
 80040b4:	2111      	movs	r1, #17
 80040b6:	4620      	mov	r0, r4
 80040b8:	f7ff ff07 	bl	8003eca <lsm6dsl_write_reg>
 80040bc:	4603      	mov	r3, r0
	return ret;
 80040be:	e7ee      	b.n	800409e <lsm6dsl_gy_data_rate_set+0x16>

080040c0 <lsm6dsl_gy_data_rate_get>:
 * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
 * @param  lsm6dsl_odr_g_t: Get the values of odr_g in reg CTRL2_G
 *
 */
int32_t lsm6dsl_gy_data_rate_get(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 80040c0:	b510      	push	{r4, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	460c      	mov	r4, r1
	lsm6dsl_reg_t reg;
	int32_t ret;

	ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 80040c6:	2301      	movs	r3, #1
 80040c8:	aa01      	add	r2, sp, #4
 80040ca:	2111      	movs	r1, #17
 80040cc:	f7ff fef8 	bl	8003ec0 <lsm6dsl_read_reg>
	switch (reg.ctrl2_g.odr_g) {
 80040d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	2b0a      	cmp	r3, #10
 80040d8:	d829      	bhi.n	800412e <lsm6dsl_gy_data_rate_get+0x6e>
 80040da:	e8df f003 	tbb	[pc, r3]
 80040de:	0a06      	.short	0x0a06
 80040e0:	1613100d 	.word	0x1613100d
 80040e4:	221f1c19 	.word	0x221f1c19
 80040e8:	25          	.byte	0x25
 80040e9:	00          	.byte	0x00
	case LSM6DSL_GY_ODR_OFF:
		*val = LSM6DSL_GY_ODR_OFF;
 80040ea:	2300      	movs	r3, #0
 80040ec:	7023      	strb	r3, [r4, #0]
		*val = LSM6DSL_GY_ODR_ND;
		break;
	}

	return ret;
}
 80040ee:	b002      	add	sp, #8
 80040f0:	bd10      	pop	{r4, pc}
		*val = LSM6DSL_GY_ODR_12Hz5;
 80040f2:	2301      	movs	r3, #1
 80040f4:	7023      	strb	r3, [r4, #0]
		break;
 80040f6:	e7fa      	b.n	80040ee <lsm6dsl_gy_data_rate_get+0x2e>
		*val = LSM6DSL_GY_ODR_26Hz;
 80040f8:	2302      	movs	r3, #2
 80040fa:	7023      	strb	r3, [r4, #0]
		break;
 80040fc:	e7f7      	b.n	80040ee <lsm6dsl_gy_data_rate_get+0x2e>
		*val = LSM6DSL_GY_ODR_52Hz;
 80040fe:	2303      	movs	r3, #3
 8004100:	7023      	strb	r3, [r4, #0]
		break;
 8004102:	e7f4      	b.n	80040ee <lsm6dsl_gy_data_rate_get+0x2e>
		*val = LSM6DSL_GY_ODR_104Hz;
 8004104:	2304      	movs	r3, #4
 8004106:	7023      	strb	r3, [r4, #0]
		break;
 8004108:	e7f1      	b.n	80040ee <lsm6dsl_gy_data_rate_get+0x2e>
		*val = LSM6DSL_GY_ODR_208Hz;
 800410a:	2305      	movs	r3, #5
 800410c:	7023      	strb	r3, [r4, #0]
		break;
 800410e:	e7ee      	b.n	80040ee <lsm6dsl_gy_data_rate_get+0x2e>
		*val = LSM6DSL_GY_ODR_416Hz;
 8004110:	2306      	movs	r3, #6
 8004112:	7023      	strb	r3, [r4, #0]
		break;
 8004114:	e7eb      	b.n	80040ee <lsm6dsl_gy_data_rate_get+0x2e>
		*val = LSM6DSL_GY_ODR_833Hz;
 8004116:	2307      	movs	r3, #7
 8004118:	7023      	strb	r3, [r4, #0]
		break;
 800411a:	e7e8      	b.n	80040ee <lsm6dsl_gy_data_rate_get+0x2e>
		*val = LSM6DSL_GY_ODR_1k66Hz;
 800411c:	2308      	movs	r3, #8
 800411e:	7023      	strb	r3, [r4, #0]
		break;
 8004120:	e7e5      	b.n	80040ee <lsm6dsl_gy_data_rate_get+0x2e>
		*val = LSM6DSL_GY_ODR_3k33Hz;
 8004122:	2309      	movs	r3, #9
 8004124:	7023      	strb	r3, [r4, #0]
		break;
 8004126:	e7e2      	b.n	80040ee <lsm6dsl_gy_data_rate_get+0x2e>
		*val = LSM6DSL_GY_ODR_6k66Hz;
 8004128:	230a      	movs	r3, #10
 800412a:	7023      	strb	r3, [r4, #0]
		break;
 800412c:	e7df      	b.n	80040ee <lsm6dsl_gy_data_rate_get+0x2e>
		*val = LSM6DSL_GY_ODR_ND;
 800412e:	230b      	movs	r3, #11
 8004130:	7023      	strb	r3, [r4, #0]
	return ret;
 8004132:	e7dc      	b.n	80040ee <lsm6dsl_gy_data_rate_get+0x2e>

08004134 <lsm6dsl_block_data_update_set>:
 * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t val: change the values of bdu in reg CTRL3_C
 *
 */
int32_t lsm6dsl_block_data_update_set(lsm6dsl_ctx_t *ctx, uint8_t val)
{
 8004134:	b530      	push	{r4, r5, lr}
 8004136:	b083      	sub	sp, #12
 8004138:	4604      	mov	r4, r0
 800413a:	460d      	mov	r5, r1
	lsm6dsl_reg_t reg;
	int32_t ret;

	ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 800413c:	2301      	movs	r3, #1
 800413e:	aa01      	add	r2, sp, #4
 8004140:	2112      	movs	r1, #18
 8004142:	f7ff febd 	bl	8003ec0 <lsm6dsl_read_reg>
	if (ret == 0) {
 8004146:	4603      	mov	r3, r0
 8004148:	b110      	cbz	r0, 8004150 <lsm6dsl_block_data_update_set+0x1c>
		reg.ctrl3_c.bdu = val;
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
	}
	return ret;
}
 800414a:	4618      	mov	r0, r3
 800414c:	b003      	add	sp, #12
 800414e:	bd30      	pop	{r4, r5, pc}
		reg.ctrl3_c.bdu = val;
 8004150:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004154:	f365 1386 	bfi	r3, r5, #6, #1
 8004158:	aa02      	add	r2, sp, #8
 800415a:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 800415e:	2301      	movs	r3, #1
 8004160:	2112      	movs	r1, #18
 8004162:	4620      	mov	r0, r4
 8004164:	f7ff feb1 	bl	8003eca <lsm6dsl_write_reg>
 8004168:	4603      	mov	r3, r0
	return ret;
 800416a:	e7ee      	b.n	800414a <lsm6dsl_block_data_update_set+0x16>

0800416c <lsm6dsl_angular_rate_raw_get>:
 * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t lsm6dsl_angular_rate_raw_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
{
 800416c:	b508      	push	{r3, lr}
	return lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800416e:	2306      	movs	r3, #6
 8004170:	460a      	mov	r2, r1
 8004172:	2122      	movs	r1, #34	; 0x22
 8004174:	f7ff fea4 	bl	8003ec0 <lsm6dsl_read_reg>
}
 8004178:	bd08      	pop	{r3, pc}

0800417a <lsm6dsl_acceleration_raw_get>:
 * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t lsm6dsl_acceleration_raw_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
{
 800417a:	b508      	push	{r3, lr}
	return lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800417c:	2306      	movs	r3, #6
 800417e:	460a      	mov	r2, r1
 8004180:	2128      	movs	r1, #40	; 0x28
 8004182:	f7ff fe9d 	bl	8003ec0 <lsm6dsl_read_reg>
}
 8004186:	bd08      	pop	{r3, pc}

08004188 <lsm6dsl_device_id_get>:
 * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t * : buffer that stores data read
 *
 */
int32_t lsm6dsl_device_id_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
{
 8004188:	b508      	push	{r3, lr}
	return lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800418a:	2301      	movs	r3, #1
 800418c:	460a      	mov	r2, r1
 800418e:	210f      	movs	r1, #15
 8004190:	f7ff fe96 	bl	8003ec0 <lsm6dsl_read_reg>
}
 8004194:	bd08      	pop	{r3, pc}

08004196 <lsm6dsl_auto_increment_set>:
 * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
 * @param  uint8_t val: change the values of if_inc in reg CTRL3_C
 *
 */
int32_t lsm6dsl_auto_increment_set(lsm6dsl_ctx_t *ctx, uint8_t val)
{
 8004196:	b530      	push	{r4, r5, lr}
 8004198:	b083      	sub	sp, #12
 800419a:	4604      	mov	r4, r0
 800419c:	460d      	mov	r5, r1
	lsm6dsl_reg_t reg;
	int32_t ret;

	ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 800419e:	2301      	movs	r3, #1
 80041a0:	aa01      	add	r2, sp, #4
 80041a2:	2112      	movs	r1, #18
 80041a4:	f7ff fe8c 	bl	8003ec0 <lsm6dsl_read_reg>
	if (ret == 0) {
 80041a8:	4603      	mov	r3, r0
 80041aa:	b110      	cbz	r0, 80041b2 <lsm6dsl_auto_increment_set+0x1c>
		reg.ctrl3_c.if_inc = val;
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
	}
	return ret;
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	b003      	add	sp, #12
 80041b0:	bd30      	pop	{r4, r5, pc}
		reg.ctrl3_c.if_inc = val;
 80041b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80041b6:	f365 0382 	bfi	r3, r5, #2, #1
 80041ba:	aa02      	add	r2, sp, #8
 80041bc:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 80041c0:	2301      	movs	r3, #1
 80041c2:	2112      	movs	r1, #18
 80041c4:	4620      	mov	r0, r4
 80041c6:	f7ff fe80 	bl	8003eca <lsm6dsl_write_reg>
 80041ca:	4603      	mov	r3, r0
	return ret;
 80041cc:	e7ee      	b.n	80041ac <lsm6dsl_auto_increment_set+0x16>

080041ce <lsm6dsl_pin_int1_route_set>:
 *                            MASTER_CONFIG(drdy_on_int1)
 *
 */
int32_t lsm6dsl_pin_int1_route_set(lsm6dsl_ctx_t *ctx,
				   lsm6dsl_int1_route_t val)
{
 80041ce:	b530      	push	{r4, r5, lr}
 80041d0:	b085      	sub	sp, #20
 80041d2:	4604      	mov	r4, r0
 80041d4:	9101      	str	r1, [sp, #4]
	lsm6dsl_reg_t reg;
	int32_t ret;

	ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, &reg.byte, 1);
 80041d6:	2301      	movs	r3, #1
 80041d8:	aa03      	add	r2, sp, #12
 80041da:	210d      	movs	r1, #13
 80041dc:	f7ff fe70 	bl	8003ec0 <lsm6dsl_read_reg>
	if (ret == 0) {
 80041e0:	4603      	mov	r3, r0
 80041e2:	b110      	cbz	r0, 80041ea <lsm6dsl_pin_int1_route_set+0x1c>
			}
		}
	}

	return ret;
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	b005      	add	sp, #20
 80041e8:	bd30      	pop	{r4, r5, pc}
		reg.int1_ctrl.int1_drdy_xl = val.int1_drdy_xl;
 80041ea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80041ee:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80041f2:	f362 0300 	bfi	r3, r2, #0, #1
		reg.int1_ctrl.int1_drdy_g = val.int1_drdy_g;
 80041f6:	f3c2 0140 	ubfx	r1, r2, #1, #1
 80041fa:	f361 0341 	bfi	r3, r1, #1, #1
		reg.int1_ctrl.int1_boot = val.int1_boot;
 80041fe:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8004202:	f361 0382 	bfi	r3, r1, #2, #1
		reg.int1_ctrl.int1_fth = val.int1_fth;
 8004206:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 800420a:	f361 03c3 	bfi	r3, r1, #3, #1
		reg.int1_ctrl.int1_fifo_ovr = val.int1_fifo_ovr;
 800420e:	f3c2 1100 	ubfx	r1, r2, #4, #1
 8004212:	f361 1304 	bfi	r3, r1, #4, #1
		reg.int1_ctrl.int1_full_flag = val.int1_full_flag;
 8004216:	f3c2 1140 	ubfx	r1, r2, #5, #1
 800421a:	f361 1345 	bfi	r3, r1, #5, #1
		reg.int1_ctrl.int1_sign_mot = val.int1_sign_mot;
 800421e:	f3c2 1180 	ubfx	r1, r2, #6, #1
 8004222:	f361 1386 	bfi	r3, r1, #6, #1
		reg.int1_ctrl.int1_step_detector = val.int1_step_detector;
 8004226:	09d2      	lsrs	r2, r2, #7
 8004228:	f362 13c7 	bfi	r3, r2, #7, #1
 800422c:	aa04      	add	r2, sp, #16
 800422e:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, &reg.byte, 1);
 8004232:	2301      	movs	r3, #1
 8004234:	210d      	movs	r1, #13
 8004236:	4620      	mov	r0, r4
 8004238:	f7ff fe47 	bl	8003eca <lsm6dsl_write_reg>
		if (ret == 0) {
 800423c:	4603      	mov	r3, r0
 800423e:	2800      	cmp	r0, #0
 8004240:	d1d0      	bne.n	80041e4 <lsm6dsl_pin_int1_route_set+0x16>
			ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, &reg.byte, 1);
 8004242:	2301      	movs	r3, #1
 8004244:	aa03      	add	r2, sp, #12
 8004246:	215e      	movs	r1, #94	; 0x5e
 8004248:	4620      	mov	r0, r4
 800424a:	f7ff fe39 	bl	8003ec0 <lsm6dsl_read_reg>
			if (ret == 0) {
 800424e:	4603      	mov	r3, r0
 8004250:	2800      	cmp	r0, #0
 8004252:	d1c7      	bne.n	80041e4 <lsm6dsl_pin_int1_route_set+0x16>
				reg.md1_cfg.int1_timer = val.int1_timer;
 8004254:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004258:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800425c:	f362 0300 	bfi	r3, r2, #0, #1
				reg.md1_cfg.int1_tilt = val.int1_tilt;
 8004260:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8004264:	f361 0341 	bfi	r3, r1, #1, #1
				reg.md1_cfg.int1_6d = val.int1_6d;
 8004268:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800426c:	f361 0382 	bfi	r3, r1, #2, #1
				reg.md1_cfg.int1_double_tap = val.int1_double_tap;
 8004270:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 8004274:	f361 03c3 	bfi	r3, r1, #3, #1
				reg.md1_cfg.int1_ff = val.int1_ff;
 8004278:	f3c2 1100 	ubfx	r1, r2, #4, #1
 800427c:	f361 1304 	bfi	r3, r1, #4, #1
				reg.md1_cfg.int1_wu = val.int1_wu;
 8004280:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8004284:	f361 1345 	bfi	r3, r1, #5, #1
				reg.md1_cfg.int1_single_tap = val.int1_single_tap;
 8004288:	f3c2 1180 	ubfx	r1, r2, #6, #1
 800428c:	f361 1386 	bfi	r3, r1, #6, #1
				reg.md1_cfg.int1_inact_state = val.int1_inact_state;
 8004290:	09d2      	lsrs	r2, r2, #7
 8004292:	f362 13c7 	bfi	r3, r2, #7, #1
 8004296:	aa04      	add	r2, sp, #16
 8004298:	f802 3d04 	strb.w	r3, [r2, #-4]!
				ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, &reg.byte, 1);
 800429c:	2301      	movs	r3, #1
 800429e:	215e      	movs	r1, #94	; 0x5e
 80042a0:	4620      	mov	r0, r4
 80042a2:	f7ff fe12 	bl	8003eca <lsm6dsl_write_reg>
				if (ret == 0) {
 80042a6:	4603      	mov	r3, r0
 80042a8:	2800      	cmp	r0, #0
 80042aa:	d19b      	bne.n	80041e4 <lsm6dsl_pin_int1_route_set+0x16>
					ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, &reg.byte, 1);
 80042ac:	2301      	movs	r3, #1
 80042ae:	aa03      	add	r2, sp, #12
 80042b0:	2113      	movs	r1, #19
 80042b2:	4620      	mov	r0, r4
 80042b4:	f7ff fe04 	bl	8003ec0 <lsm6dsl_read_reg>
					if (ret == 0) {
 80042b8:	4603      	mov	r3, r0
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d192      	bne.n	80041e4 <lsm6dsl_pin_int1_route_set+0x16>
						reg.ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 80042be:	f89d 5006 	ldrb.w	r5, [sp, #6]
 80042c2:	f005 0501 	and.w	r5, r5, #1
 80042c6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80042ca:	f365 1304 	bfi	r3, r5, #4, #1
 80042ce:	aa04      	add	r2, sp, #16
 80042d0:	f802 3d04 	strb.w	r3, [r2, #-4]!
						ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, &reg.byte, 1);
 80042d4:	2301      	movs	r3, #1
 80042d6:	2113      	movs	r1, #19
 80042d8:	4620      	mov	r0, r4
 80042da:	f7ff fdf6 	bl	8003eca <lsm6dsl_write_reg>
						if (ret == 0) {
 80042de:	4603      	mov	r3, r0
 80042e0:	2800      	cmp	r0, #0
 80042e2:	f47f af7f 	bne.w	80041e4 <lsm6dsl_pin_int1_route_set+0x16>
							ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80042e6:	2301      	movs	r3, #1
 80042e8:	aa03      	add	r2, sp, #12
 80042ea:	211a      	movs	r1, #26
 80042ec:	4620      	mov	r0, r4
 80042ee:	f7ff fde7 	bl	8003ec0 <lsm6dsl_read_reg>
							if (ret == 0) {
 80042f2:	4603      	mov	r3, r0
 80042f4:	2800      	cmp	r0, #0
 80042f6:	f47f af75 	bne.w	80041e4 <lsm6dsl_pin_int1_route_set+0x16>
								reg.master_config.drdy_on_int1 = val.den_drdy_int1;
 80042fa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80042fe:	f365 13c7 	bfi	r3, r5, #7, #1
 8004302:	aa04      	add	r2, sp, #16
 8004304:	f802 3d04 	strb.w	r3, [r2, #-4]!
								ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8004308:	2301      	movs	r3, #1
 800430a:	211a      	movs	r1, #26
 800430c:	4620      	mov	r0, r4
 800430e:	f7ff fddc 	bl	8003eca <lsm6dsl_write_reg>
								if (ret == 0) {
 8004312:	4603      	mov	r3, r0
 8004314:	2800      	cmp	r0, #0
 8004316:	f47f af65 	bne.w	80041e4 <lsm6dsl_pin_int1_route_set+0x16>
									ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, &reg.byte, 1);
 800431a:	2301      	movs	r3, #1
 800431c:	aa03      	add	r2, sp, #12
 800431e:	2158      	movs	r1, #88	; 0x58
 8004320:	4620      	mov	r0, r4
 8004322:	f7ff fdcd 	bl	8003ec0 <lsm6dsl_read_reg>
									    (val.int1_double_tap != 0x00U) ||
 8004326:	f89d 3005 	ldrb.w	r3, [sp, #5]
									if ((val.int1_6d != 0x00U) ||
 800432a:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 800432e:	d00d      	beq.n	800434c <lsm6dsl_pin_int1_route_set+0x17e>
										reg.tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8004330:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004338:	f88d 300c 	strb.w	r3, [sp, #12]
									ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, &reg.byte, 1);
 800433c:	2301      	movs	r3, #1
 800433e:	aa03      	add	r2, sp, #12
 8004340:	2158      	movs	r1, #88	; 0x58
 8004342:	4620      	mov	r0, r4
 8004344:	f7ff fdc1 	bl	8003eca <lsm6dsl_write_reg>
 8004348:	4603      	mov	r3, r0
	return ret;
 800434a:	e74b      	b.n	80041e4 <lsm6dsl_pin_int1_route_set+0x16>
										reg.tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 800434c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004350:	f36f 13c7 	bfc	r3, #7, #1
 8004354:	f88d 300c 	strb.w	r3, [sp, #12]
 8004358:	e7f0      	b.n	800433c <lsm6dsl_pin_int1_route_set+0x16e>

0800435a <lsm6dsl_pin_int1_route_get>:
 *                               MASTER_CONFIG(drdy_on_int1)
 *
 */
int32_t lsm6dsl_pin_int1_route_get(lsm6dsl_ctx_t *ctx,
				   lsm6dsl_int1_route_t *val)
{
 800435a:	b530      	push	{r4, r5, lr}
 800435c:	b083      	sub	sp, #12
 800435e:	4605      	mov	r5, r0
 8004360:	460c      	mov	r4, r1
	lsm6dsl_reg_t reg;
	int32_t ret;

	ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, &reg.byte, 1);
 8004362:	2301      	movs	r3, #1
 8004364:	aa01      	add	r2, sp, #4
 8004366:	210d      	movs	r1, #13
 8004368:	f7ff fdaa 	bl	8003ec0 <lsm6dsl_read_reg>
	if (ret == 0) {
 800436c:	4603      	mov	r3, r0
 800436e:	b110      	cbz	r0, 8004376 <lsm6dsl_pin_int1_route_get+0x1c>
				val->den_drdy_int1 = reg.master_config.drdy_on_int1;
			}
		}
	}
	return ret;
}
 8004370:	4618      	mov	r0, r3
 8004372:	b003      	add	sp, #12
 8004374:	bd30      	pop	{r4, r5, pc}
		val->int1_drdy_xl = reg.int1_ctrl.int1_drdy_xl;
 8004376:	aa02      	add	r2, sp, #8
 8004378:	f812 1d04 	ldrb.w	r1, [r2, #-4]!
 800437c:	7823      	ldrb	r3, [r4, #0]
 800437e:	f361 0300 	bfi	r3, r1, #0, #1
		val->int1_drdy_g = reg.int1_ctrl.int1_drdy_g;
 8004382:	f3c1 0040 	ubfx	r0, r1, #1, #1
 8004386:	f360 0341 	bfi	r3, r0, #1, #1
		val->int1_boot = reg.int1_ctrl.int1_boot;
 800438a:	f3c1 0080 	ubfx	r0, r1, #2, #1
 800438e:	f360 0382 	bfi	r3, r0, #2, #1
		val->int1_fth = reg.int1_ctrl.int1_fth;
 8004392:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8004396:	f360 03c3 	bfi	r3, r0, #3, #1
		val->int1_fifo_ovr = reg.int1_ctrl.int1_fifo_ovr;
 800439a:	f3c1 1000 	ubfx	r0, r1, #4, #1
 800439e:	f360 1304 	bfi	r3, r0, #4, #1
		val->int1_full_flag = reg.int1_ctrl.int1_full_flag;
 80043a2:	f3c1 1040 	ubfx	r0, r1, #5, #1
 80043a6:	f360 1345 	bfi	r3, r0, #5, #1
		val->int1_sign_mot = reg.int1_ctrl.int1_sign_mot;
 80043aa:	f3c1 1080 	ubfx	r0, r1, #6, #1
 80043ae:	f360 1386 	bfi	r3, r0, #6, #1
		val->int1_step_detector = reg.int1_ctrl.int1_step_detector;
 80043b2:	09c9      	lsrs	r1, r1, #7
 80043b4:	f361 13c7 	bfi	r3, r1, #7, #1
 80043b8:	7023      	strb	r3, [r4, #0]
		ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, &reg.byte, 1);
 80043ba:	2301      	movs	r3, #1
 80043bc:	215e      	movs	r1, #94	; 0x5e
 80043be:	4628      	mov	r0, r5
 80043c0:	f7ff fd7e 	bl	8003ec0 <lsm6dsl_read_reg>
		if (ret == 0) {
 80043c4:	4603      	mov	r3, r0
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d1d2      	bne.n	8004370 <lsm6dsl_pin_int1_route_get+0x16>
			val->int1_timer = reg.md1_cfg.int1_timer;
 80043ca:	aa02      	add	r2, sp, #8
 80043cc:	f812 1d04 	ldrb.w	r1, [r2, #-4]!
 80043d0:	7863      	ldrb	r3, [r4, #1]
 80043d2:	f361 0300 	bfi	r3, r1, #0, #1
			val->int1_tilt = reg.md1_cfg.int1_tilt;
 80043d6:	f3c1 0040 	ubfx	r0, r1, #1, #1
 80043da:	f360 0341 	bfi	r3, r0, #1, #1
			val->int1_6d = reg.md1_cfg.int1_6d;
 80043de:	f3c1 0080 	ubfx	r0, r1, #2, #1
 80043e2:	f360 0382 	bfi	r3, r0, #2, #1
			val->int1_double_tap = reg.md1_cfg.int1_double_tap;
 80043e6:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80043ea:	f360 03c3 	bfi	r3, r0, #3, #1
			val->int1_ff = reg.md1_cfg.int1_ff;
 80043ee:	f3c1 1000 	ubfx	r0, r1, #4, #1
 80043f2:	f360 1304 	bfi	r3, r0, #4, #1
			val->int1_wu = reg.md1_cfg.int1_wu;
 80043f6:	f3c1 1040 	ubfx	r0, r1, #5, #1
 80043fa:	f360 1345 	bfi	r3, r0, #5, #1
			val->int1_single_tap = reg.md1_cfg.int1_single_tap;
 80043fe:	f3c1 1080 	ubfx	r0, r1, #6, #1
 8004402:	f360 1386 	bfi	r3, r0, #6, #1
			val->int1_inact_state = reg.md1_cfg.int1_inact_state;
 8004406:	09c9      	lsrs	r1, r1, #7
 8004408:	f361 13c7 	bfi	r3, r1, #7, #1
 800440c:	7063      	strb	r3, [r4, #1]
			ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, &reg.byte, 1);
 800440e:	2301      	movs	r3, #1
 8004410:	2113      	movs	r1, #19
 8004412:	4628      	mov	r0, r5
 8004414:	f7ff fd54 	bl	8003ec0 <lsm6dsl_read_reg>
			if (ret == 0) {
 8004418:	4603      	mov	r3, r0
 800441a:	2800      	cmp	r0, #0
 800441c:	d1a8      	bne.n	8004370 <lsm6dsl_pin_int1_route_get+0x16>
				val->den_drdy_int1 = reg.ctrl4_c.den_drdy_int1;
 800441e:	aa02      	add	r2, sp, #8
 8004420:	f812 3d04 	ldrb.w	r3, [r2, #-4]!
 8004424:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004428:	78a1      	ldrb	r1, [r4, #2]
 800442a:	f363 0100 	bfi	r1, r3, #0, #1
 800442e:	70a1      	strb	r1, [r4, #2]
				ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG, &reg.byte, 1);
 8004430:	2301      	movs	r3, #1
 8004432:	211a      	movs	r1, #26
 8004434:	4628      	mov	r0, r5
 8004436:	f7ff fd43 	bl	8003ec0 <lsm6dsl_read_reg>
 800443a:	4603      	mov	r3, r0
				val->den_drdy_int1 = reg.master_config.drdy_on_int1;
 800443c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004440:	09d2      	lsrs	r2, r2, #7
 8004442:	78a1      	ldrb	r1, [r4, #2]
 8004444:	f362 0100 	bfi	r1, r2, #0, #1
 8004448:	70a1      	strb	r1, [r4, #2]
	return ret;
 800444a:	e791      	b.n	8004370 <lsm6dsl_pin_int1_route_get+0x16>

0800444c <lsm6dsl_pin_int2_route_set>:
 *                               MD2_CFG
 *
 */
int32_t lsm6dsl_pin_int2_route_set(lsm6dsl_ctx_t *ctx,
				   lsm6dsl_int2_route_t val)
{
 800444c:	b510      	push	{r4, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	4604      	mov	r4, r0
 8004452:	9101      	str	r1, [sp, #4]
	lsm6dsl_reg_t reg;
	int32_t ret;

	ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT2_CTRL, &reg.byte, 1);
 8004454:	2301      	movs	r3, #1
 8004456:	aa03      	add	r2, sp, #12
 8004458:	210e      	movs	r1, #14
 800445a:	f7ff fd31 	bl	8003ec0 <lsm6dsl_read_reg>
	if (ret == 0) {
 800445e:	4603      	mov	r3, r0
 8004460:	b110      	cbz	r0, 8004468 <lsm6dsl_pin_int2_route_set+0x1c>
			}
		}
	}

	return ret;
}
 8004462:	4618      	mov	r0, r3
 8004464:	b004      	add	sp, #16
 8004466:	bd10      	pop	{r4, pc}
		reg.int2_ctrl.int2_drdy_xl = val.int2_drdy_xl;
 8004468:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800446c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004470:	f362 0300 	bfi	r3, r2, #0, #1
		reg.int2_ctrl.int2_drdy_g = val.int2_drdy_g;
 8004474:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8004478:	f361 0341 	bfi	r3, r1, #1, #1
		reg.int2_ctrl.int2_drdy_temp = val.int2_drdy_temp;
 800447c:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8004480:	f361 0382 	bfi	r3, r1, #2, #1
		reg.int2_ctrl.int2_fth = val.int2_fth;
 8004484:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 8004488:	f361 03c3 	bfi	r3, r1, #3, #1
		reg.int2_ctrl.int2_fifo_ovr = val.int2_fifo_ovr;
 800448c:	f3c2 1100 	ubfx	r1, r2, #4, #1
 8004490:	f361 1304 	bfi	r3, r1, #4, #1
		reg.int2_ctrl.int2_full_flag = val.int2_full_flag;
 8004494:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8004498:	f361 1345 	bfi	r3, r1, #5, #1
		reg.int2_ctrl.int2_step_count_ov = val.int2_step_count_ov;
 800449c:	f3c2 1180 	ubfx	r1, r2, #6, #1
 80044a0:	f361 1386 	bfi	r3, r1, #6, #1
		reg.int2_ctrl.int2_step_delta = val.int2_step_delta;
 80044a4:	09d2      	lsrs	r2, r2, #7
 80044a6:	f362 13c7 	bfi	r3, r2, #7, #1
 80044aa:	aa04      	add	r2, sp, #16
 80044ac:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT2_CTRL, &reg.byte, 1);
 80044b0:	2301      	movs	r3, #1
 80044b2:	210e      	movs	r1, #14
 80044b4:	4620      	mov	r0, r4
 80044b6:	f7ff fd08 	bl	8003eca <lsm6dsl_write_reg>
		if (ret == 0) {
 80044ba:	4603      	mov	r3, r0
 80044bc:	2800      	cmp	r0, #0
 80044be:	d1d0      	bne.n	8004462 <lsm6dsl_pin_int2_route_set+0x16>
			ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, &reg.byte, 1);
 80044c0:	2301      	movs	r3, #1
 80044c2:	aa03      	add	r2, sp, #12
 80044c4:	215f      	movs	r1, #95	; 0x5f
 80044c6:	4620      	mov	r0, r4
 80044c8:	f7ff fcfa 	bl	8003ec0 <lsm6dsl_read_reg>
			if (ret == 0) {
 80044cc:	4603      	mov	r3, r0
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d1c7      	bne.n	8004462 <lsm6dsl_pin_int2_route_set+0x16>
				reg.md2_cfg.int2_iron = val.int2_iron;
 80044d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80044d6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80044da:	f362 0300 	bfi	r3, r2, #0, #1
				reg.md2_cfg.int2_tilt = val.int2_tilt;
 80044de:	f3c2 0140 	ubfx	r1, r2, #1, #1
 80044e2:	f361 0341 	bfi	r3, r1, #1, #1
				reg.md2_cfg.int2_6d = val.int2_6d;
 80044e6:	f3c2 0180 	ubfx	r1, r2, #2, #1
 80044ea:	f361 0382 	bfi	r3, r1, #2, #1
				reg.md2_cfg.int2_double_tap = val.int2_double_tap;
 80044ee:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 80044f2:	f361 03c3 	bfi	r3, r1, #3, #1
				reg.md2_cfg.int2_ff = val.int2_ff;
 80044f6:	f3c2 1100 	ubfx	r1, r2, #4, #1
 80044fa:	f361 1304 	bfi	r3, r1, #4, #1
				reg.md2_cfg.int2_wu = val.int2_wu;
 80044fe:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8004502:	f361 1345 	bfi	r3, r1, #5, #1
				reg.md2_cfg.int2_single_tap = val.int2_single_tap;
 8004506:	f3c2 1180 	ubfx	r1, r2, #6, #1
 800450a:	f361 1386 	bfi	r3, r1, #6, #1
				reg.md2_cfg.int2_inact_state = val.int2_inact_state;
 800450e:	09d2      	lsrs	r2, r2, #7
 8004510:	f362 13c7 	bfi	r3, r2, #7, #1
 8004514:	aa04      	add	r2, sp, #16
 8004516:	f802 3d04 	strb.w	r3, [r2, #-4]!
				ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD2_CFG, &reg.byte, 1);
 800451a:	2301      	movs	r3, #1
 800451c:	215f      	movs	r1, #95	; 0x5f
 800451e:	4620      	mov	r0, r4
 8004520:	f7ff fcd3 	bl	8003eca <lsm6dsl_write_reg>
				if (ret == 0) {
 8004524:	4603      	mov	r3, r0
 8004526:	2800      	cmp	r0, #0
 8004528:	d19b      	bne.n	8004462 <lsm6dsl_pin_int2_route_set+0x16>
					ret = lsm6dsl_read_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
 800452a:	2301      	movs	r3, #1
 800452c:	aa03      	add	r2, sp, #12
 800452e:	210b      	movs	r1, #11
 8004530:	4620      	mov	r0, r4
 8004532:	f7ff fcc5 	bl	8003ec0 <lsm6dsl_read_reg>
					if (ret == 0) {
 8004536:	4603      	mov	r3, r0
 8004538:	2800      	cmp	r0, #0
 800453a:	d192      	bne.n	8004462 <lsm6dsl_pin_int2_route_set+0x16>
						reg.drdy_pulse_cfg_g.int2_wrist_tilt = val.int2_wrist_tilt;
 800453c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8004540:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004544:	f362 0300 	bfi	r3, r2, #0, #1
 8004548:	aa04      	add	r2, sp, #16
 800454a:	f802 3d04 	strb.w	r3, [r2, #-4]!
						ret = lsm6dsl_write_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
 800454e:	2301      	movs	r3, #1
 8004550:	210b      	movs	r1, #11
 8004552:	4620      	mov	r0, r4
 8004554:	f7ff fcb9 	bl	8003eca <lsm6dsl_write_reg>
						if (ret == 0) {
 8004558:	4603      	mov	r3, r0
 800455a:	2800      	cmp	r0, #0
 800455c:	d181      	bne.n	8004462 <lsm6dsl_pin_int2_route_set+0x16>
							ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, &reg.byte, 1);
 800455e:	2301      	movs	r3, #1
 8004560:	aa03      	add	r2, sp, #12
 8004562:	2158      	movs	r1, #88	; 0x58
 8004564:	4620      	mov	r0, r4
 8004566:	f7ff fcab 	bl	8003ec0 <lsm6dsl_read_reg>
							if (ret == 0) {
 800456a:	4603      	mov	r3, r0
 800456c:	2800      	cmp	r0, #0
 800456e:	f47f af78 	bne.w	8004462 <lsm6dsl_pin_int2_route_set+0x16>
								    (val.int2_double_tap != 0x00U) ||
 8004572:	f89d 3005 	ldrb.w	r3, [sp, #5]
								if ((val.int2_6d != 0x00U) ||
 8004576:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 800457a:	d00d      	beq.n	8004598 <lsm6dsl_pin_int2_route_set+0x14c>
									reg.tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 800457c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004584:	f88d 300c 	strb.w	r3, [sp, #12]
								ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, &reg.byte, 1);
 8004588:	2301      	movs	r3, #1
 800458a:	aa03      	add	r2, sp, #12
 800458c:	2158      	movs	r1, #88	; 0x58
 800458e:	4620      	mov	r0, r4
 8004590:	f7ff fc9b 	bl	8003eca <lsm6dsl_write_reg>
 8004594:	4603      	mov	r3, r0
	return ret;
 8004596:	e764      	b.n	8004462 <lsm6dsl_pin_int2_route_set+0x16>
									reg.tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8004598:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800459c:	f36f 13c7 	bfc	r3, #7, #1
 80045a0:	f88d 300c 	strb.w	r3, [sp, #12]
 80045a4:	e7f0      	b.n	8004588 <lsm6dsl_pin_int2_route_set+0x13c>

080045a6 <lsm6dsl_pin_int2_route_get>:
 *                               MD2_CFG
 *
 */
int32_t lsm6dsl_pin_int2_route_get(lsm6dsl_ctx_t *ctx,
				   lsm6dsl_int2_route_t *val)
{
 80045a6:	b530      	push	{r4, r5, lr}
 80045a8:	b083      	sub	sp, #12
 80045aa:	4605      	mov	r5, r0
 80045ac:	460c      	mov	r4, r1
	lsm6dsl_reg_t reg;
	int32_t ret;

	ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT2_CTRL, &reg.byte, 1);
 80045ae:	2301      	movs	r3, #1
 80045b0:	aa01      	add	r2, sp, #4
 80045b2:	210e      	movs	r1, #14
 80045b4:	f7ff fc84 	bl	8003ec0 <lsm6dsl_read_reg>
	if (ret == 0) {
 80045b8:	4603      	mov	r3, r0
 80045ba:	b110      	cbz	r0, 80045c2 <lsm6dsl_pin_int2_route_get+0x1c>
			ret = lsm6dsl_read_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G, &reg.byte, 1);
			val->int2_wrist_tilt = reg.drdy_pulse_cfg_g.int2_wrist_tilt;
		}
	}
	return ret;
}
 80045bc:	4618      	mov	r0, r3
 80045be:	b003      	add	sp, #12
 80045c0:	bd30      	pop	{r4, r5, pc}
		val->int2_drdy_xl = reg.int2_ctrl.int2_drdy_xl;
 80045c2:	aa02      	add	r2, sp, #8
 80045c4:	f812 1d04 	ldrb.w	r1, [r2, #-4]!
 80045c8:	7823      	ldrb	r3, [r4, #0]
 80045ca:	f361 0300 	bfi	r3, r1, #0, #1
		val->int2_drdy_g = reg.int2_ctrl.int2_drdy_g;
 80045ce:	f3c1 0040 	ubfx	r0, r1, #1, #1
 80045d2:	f360 0341 	bfi	r3, r0, #1, #1
		val->int2_drdy_temp = reg.int2_ctrl.int2_drdy_temp;
 80045d6:	f3c1 0080 	ubfx	r0, r1, #2, #1
 80045da:	f360 0382 	bfi	r3, r0, #2, #1
		val->int2_fth = reg.int2_ctrl.int2_fth;
 80045de:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80045e2:	f360 03c3 	bfi	r3, r0, #3, #1
		val->int2_fifo_ovr = reg.int2_ctrl.int2_fifo_ovr;
 80045e6:	f3c1 1000 	ubfx	r0, r1, #4, #1
 80045ea:	f360 1304 	bfi	r3, r0, #4, #1
		val->int2_full_flag = reg.int2_ctrl.int2_full_flag;
 80045ee:	f3c1 1040 	ubfx	r0, r1, #5, #1
 80045f2:	f360 1345 	bfi	r3, r0, #5, #1
		val->int2_step_count_ov = reg.int2_ctrl.int2_step_count_ov;
 80045f6:	f3c1 1080 	ubfx	r0, r1, #6, #1
 80045fa:	f360 1386 	bfi	r3, r0, #6, #1
		val->int2_step_delta = reg.int2_ctrl.int2_step_delta;
 80045fe:	09c9      	lsrs	r1, r1, #7
 8004600:	f361 13c7 	bfi	r3, r1, #7, #1
 8004604:	7023      	strb	r3, [r4, #0]
		ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, &reg.byte, 1);
 8004606:	2301      	movs	r3, #1
 8004608:	215f      	movs	r1, #95	; 0x5f
 800460a:	4628      	mov	r0, r5
 800460c:	f7ff fc58 	bl	8003ec0 <lsm6dsl_read_reg>
		if (ret == 0) {
 8004610:	4603      	mov	r3, r0
 8004612:	2800      	cmp	r0, #0
 8004614:	d1d2      	bne.n	80045bc <lsm6dsl_pin_int2_route_get+0x16>
			val->int2_iron = reg.md2_cfg.int2_iron;
 8004616:	aa02      	add	r2, sp, #8
 8004618:	f812 1d04 	ldrb.w	r1, [r2, #-4]!
 800461c:	7863      	ldrb	r3, [r4, #1]
 800461e:	f361 0300 	bfi	r3, r1, #0, #1
			val->int2_tilt = reg.md2_cfg.int2_tilt;
 8004622:	f3c1 0040 	ubfx	r0, r1, #1, #1
 8004626:	f360 0341 	bfi	r3, r0, #1, #1
			val->int2_6d = reg.md2_cfg.int2_6d;
 800462a:	f3c1 0080 	ubfx	r0, r1, #2, #1
 800462e:	f360 0382 	bfi	r3, r0, #2, #1
			val->int2_double_tap = reg.md2_cfg.int2_double_tap;
 8004632:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8004636:	f360 03c3 	bfi	r3, r0, #3, #1
			val->int2_ff = reg.md2_cfg.int2_ff;
 800463a:	f3c1 1000 	ubfx	r0, r1, #4, #1
 800463e:	f360 1304 	bfi	r3, r0, #4, #1
			val->int2_wu = reg.md2_cfg.int2_wu;
 8004642:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004646:	f360 1345 	bfi	r3, r0, #5, #1
			val->int2_single_tap = reg.md2_cfg.int2_single_tap;
 800464a:	f3c1 1080 	ubfx	r0, r1, #6, #1
 800464e:	f360 1386 	bfi	r3, r0, #6, #1
			val->int2_inact_state = reg.md2_cfg.int2_inact_state;
 8004652:	09c9      	lsrs	r1, r1, #7
 8004654:	f361 13c7 	bfi	r3, r1, #7, #1
 8004658:	7063      	strb	r3, [r4, #1]
			ret = lsm6dsl_read_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G, &reg.byte, 1);
 800465a:	2301      	movs	r3, #1
 800465c:	210b      	movs	r1, #11
 800465e:	4628      	mov	r0, r5
 8004660:	f7ff fc2e 	bl	8003ec0 <lsm6dsl_read_reg>
 8004664:	4603      	mov	r3, r0
			val->int2_wrist_tilt = reg.drdy_pulse_cfg_g.int2_wrist_tilt;
 8004666:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800466a:	78a2      	ldrb	r2, [r4, #2]
 800466c:	f361 0200 	bfi	r2, r1, #0, #1
 8004670:	70a2      	strb	r2, [r4, #2]
	return ret;
 8004672:	e7a3      	b.n	80045bc <lsm6dsl_pin_int2_route_get+0x16>

08004674 <lsm6dsl_6d_threshold_set>:
 * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
 * @param  lsm6dsl_sixd_ths_t: change the values of sixd_ths in reg TAP_THS_6D
 *
 */
int32_t lsm6dsl_6d_threshold_set(lsm6dsl_ctx_t *ctx, lsm6dsl_sixd_ths_t val)
{
 8004674:	b530      	push	{r4, r5, lr}
 8004676:	b083      	sub	sp, #12
 8004678:	4604      	mov	r4, r0
 800467a:	460d      	mov	r5, r1
	lsm6dsl_reg_t reg;
	int32_t ret;

	ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_THS_6D, &reg.byte, 1);
 800467c:	2301      	movs	r3, #1
 800467e:	aa01      	add	r2, sp, #4
 8004680:	2159      	movs	r1, #89	; 0x59
 8004682:	f7ff fc1d 	bl	8003ec0 <lsm6dsl_read_reg>
	if (ret == 0) {
 8004686:	4603      	mov	r3, r0
 8004688:	b110      	cbz	r0, 8004690 <lsm6dsl_6d_threshold_set+0x1c>
		reg.tap_ths_6d.sixd_ths = (uint8_t)val;
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_THS_6D, &reg.byte, 1);
	}
	return ret;
}
 800468a:	4618      	mov	r0, r3
 800468c:	b003      	add	sp, #12
 800468e:	bd30      	pop	{r4, r5, pc}
		reg.tap_ths_6d.sixd_ths = (uint8_t)val;
 8004690:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004694:	f365 1346 	bfi	r3, r5, #5, #2
 8004698:	aa02      	add	r2, sp, #8
 800469a:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_THS_6D, &reg.byte, 1);
 800469e:	2301      	movs	r3, #1
 80046a0:	2159      	movs	r1, #89	; 0x59
 80046a2:	4620      	mov	r0, r4
 80046a4:	f7ff fc11 	bl	8003eca <lsm6dsl_write_reg>
 80046a8:	4603      	mov	r3, r0
	return ret;
 80046aa:	e7ee      	b.n	800468a <lsm6dsl_6d_threshold_set+0x16>

080046ac <lsm6dsl_fifo_mode_set>:
 * @param  lsm6dsl_fifo_mode_t: change the values of fifo_mode in
 *                              reg FIFO_CTRL5
 *
 */
int32_t lsm6dsl_fifo_mode_set(lsm6dsl_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 80046ac:	b530      	push	{r4, r5, lr}
 80046ae:	b083      	sub	sp, #12
 80046b0:	4604      	mov	r4, r0
 80046b2:	460d      	mov	r5, r1
	lsm6dsl_reg_t reg;
	int32_t ret;

	ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, &reg.byte, 1);
 80046b4:	2301      	movs	r3, #1
 80046b6:	aa01      	add	r2, sp, #4
 80046b8:	210a      	movs	r1, #10
 80046ba:	f7ff fc01 	bl	8003ec0 <lsm6dsl_read_reg>
	if (ret == 0) {
 80046be:	4603      	mov	r3, r0
 80046c0:	b110      	cbz	r0, 80046c8 <lsm6dsl_fifo_mode_set+0x1c>
		reg.fifo_ctrl5.fifo_mode = (uint8_t)val;
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, &reg.byte, 1);
	}
	return ret;
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	b003      	add	sp, #12
 80046c6:	bd30      	pop	{r4, r5, pc}
		reg.fifo_ctrl5.fifo_mode = (uint8_t)val;
 80046c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80046cc:	f365 0302 	bfi	r3, r5, #0, #3
 80046d0:	aa02      	add	r2, sp, #8
 80046d2:	f802 3d04 	strb.w	r3, [r2, #-4]!
		ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, &reg.byte, 1);
 80046d6:	2301      	movs	r3, #1
 80046d8:	210a      	movs	r1, #10
 80046da:	4620      	mov	r0, r4
 80046dc:	f7ff fbf5 	bl	8003eca <lsm6dsl_write_reg>
 80046e0:	4603      	mov	r3, r0
	return ret;
 80046e2:	e7ee      	b.n	80046c2 <lsm6dsl_fifo_mode_set+0x16>

080046e4 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
	VL53L1_PresetModes PresetMode,
	VL53L1_DistanceModes DistanceMode,
	VL53L1_DevicePresetModes *pDevicePresetMode)
{
 80046e4:	b410      	push	{r4}
 80046e6:	b085      	sub	sp, #20
	VL53L1_Error Status = VL53L1_ERROR_NONE;

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 80046e8:	4c1f      	ldr	r4, [pc, #124]	; (8004768 <ComputeDevicePresetMode+0x84>)
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	f8ad 300c 	strh.w	r3, [sp, #12]
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	f88d 300e 	strb.w	r3, [sp, #14]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE
	};


	VL53L1_DevicePresetModes TimedModes[3] = {
 80046f6:	6863      	ldr	r3, [r4, #4]
 80046f8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80046fc:	0c1b      	lsrs	r3, r3, #16
 80046fe:	f88d 300a 	strb.w	r3, [sp, #10]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE
	};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8004702:	68a3      	ldr	r3, [r4, #8]
 8004704:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	f88d 3006 	strb.w	r3, [sp, #6]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE
	};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800470e:	2301      	movs	r3, #1
 8004710:	7013      	strb	r3, [r2, #0]

	switch (DistanceMode) {
 8004712:	4299      	cmp	r1, r3
 8004714:	d003      	beq.n	800471e <ComputeDevicePresetMode+0x3a>
 8004716:	2902      	cmp	r1, #2
 8004718:	d00b      	beq.n	8004732 <ComputeDevicePresetMode+0x4e>
		break;
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
		break;
	default:
		DistIdx = 2;
 800471a:	2302      	movs	r3, #2
 800471c:	e000      	b.n	8004720 <ComputeDevicePresetMode+0x3c>
		DistIdx = 0;
 800471e:	2300      	movs	r3, #0
	}

	switch (PresetMode) {
 8004720:	2804      	cmp	r0, #4
 8004722:	d008      	beq.n	8004736 <ComputeDevicePresetMode+0x52>
 8004724:	2808      	cmp	r0, #8
 8004726:	d017      	beq.n	8004758 <ComputeDevicePresetMode+0x74>
 8004728:	2803      	cmp	r0, #3
 800472a:	d00e      	beq.n	800474a <ComputeDevicePresetMode+0x66>
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
		break;

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800472c:	f06f 0007 	mvn.w	r0, #7
 8004730:	e007      	b.n	8004742 <ComputeDevicePresetMode+0x5e>
		DistIdx = 1;
 8004732:	2301      	movs	r3, #1
 8004734:	e7f4      	b.n	8004720 <ComputeDevicePresetMode+0x3c>
		*pDevicePresetMode = LightModes[DistIdx];
 8004736:	a904      	add	r1, sp, #16
 8004738:	440b      	add	r3, r1
 800473a:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 800473e:	7013      	strb	r3, [r2, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004740:	2000      	movs	r0, #0
	}

	return Status;
}
 8004742:	b005      	add	sp, #20
 8004744:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004748:	4770      	bx	lr
		*pDevicePresetMode = TimedModes[DistIdx];
 800474a:	a904      	add	r1, sp, #16
 800474c:	440b      	add	r3, r1
 800474e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8004752:	7013      	strb	r3, [r2, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004754:	2000      	movs	r0, #0
		break;
 8004756:	e7f4      	b.n	8004742 <ComputeDevicePresetMode+0x5e>
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8004758:	a904      	add	r1, sp, #16
 800475a:	440b      	add	r3, r1
 800475c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004760:	7013      	strb	r3, [r2, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004762:	2000      	movs	r0, #0
		break;
 8004764:	e7ed      	b.n	8004742 <ComputeDevicePresetMode+0x5e>
 8004766:	bf00      	nop
 8004768:	08021a98 	.word	0x08021a98

0800476c <ComputeRQL>:
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800476c:	b350      	cbz	r0, 80047c4 <ComputeRQL+0x58>
		returnvalue = 0;
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800476e:	2907      	cmp	r1, #7
 8004770:	d029      	beq.n	80047c6 <ComputeRQL+0x5a>
		returnvalue = 50;
	else {
		if (presults_data->median_range_mm < SRL)
 8004772:	f9b2 103c 	ldrsh.w	r1, [r2, #60]	; 0x3c
 8004776:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 800477a:	db04      	blt.n	8004786 <ComputeRQL+0x1a>
			RAS = SRAS * 65536;
		else
			RAS = LRAP * presults_data->median_range_mm;
 800477c:	f641 139a 	movw	r3, #6554	; 0x199a
 8004780:	fb03 f101 	mul.w	r1, r3, r1
 8004784:	e001      	b.n	800478a <ComputeRQL+0x1e>
			RAS = SRAS * 65536;
 8004786:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800478a:	b161      	cbz	r1, 80047a6 <ComputeRQL+0x3a>
			partial = (GGm * presults_data->sigma_mm);
 800478c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
			partial = partial + (RAS >> 1);
 800478e:	084a      	lsrs	r2, r1, #1
 8004790:	480e      	ldr	r0, [pc, #56]	; (80047cc <ComputeRQL+0x60>)
 8004792:	fb00 2303 	mla	r3, r0, r3, r2
			partial = partial / RAS;
 8004796:	fbb3 f3f1 	udiv	r3, r3, r1
			partial = partial * 65536;
 800479a:	041b      	lsls	r3, r3, #16
			if (partial <= GI)
 800479c:	4a0c      	ldr	r2, [pc, #48]	; (80047d0 <ComputeRQL+0x64>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d809      	bhi.n	80047b6 <ComputeRQL+0x4a>
				SRQL = GI - partial;
 80047a2:	1ad0      	subs	r0, r2, r3
 80047a4:	e001      	b.n	80047aa <ComputeRQL+0x3e>
			else
				SRQL = 50 * 65536;
		} else
			SRQL = 100 * 65536;
 80047a6:	f44f 00c8 	mov.w	r0, #6553600	; 0x640000

		finalvalue = (uint8_t)(SRQL >> 16);
 80047aa:	f3c0 4007 	ubfx	r0, r0, #16, #8
		returnvalue = MAX(50, MIN(100, finalvalue));
 80047ae:	2832      	cmp	r0, #50	; 0x32
 80047b0:	d804      	bhi.n	80047bc <ComputeRQL+0x50>
 80047b2:	2032      	movs	r0, #50	; 0x32
	}

	return returnvalue;
}
 80047b4:	4770      	bx	lr
				SRQL = 50 * 65536;
 80047b6:	f44f 1048 	mov.w	r0, #3276800	; 0x320000
 80047ba:	e7f6      	b.n	80047aa <ComputeRQL+0x3e>
		returnvalue = MAX(50, MIN(100, finalvalue));
 80047bc:	2864      	cmp	r0, #100	; 0x64
 80047be:	bf28      	it	cs
 80047c0:	2064      	movcs	r0, #100	; 0x64
 80047c2:	4770      	bx	lr
 80047c4:	4770      	bx	lr
		returnvalue = 50;
 80047c6:	2032      	movs	r0, #50	; 0x32
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	0030cccd 	.word	0x0030cccd
 80047d0:	0075b333 	.word	0x0075b333

080047d4 <ConvertStatusLite>:

static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 80047d4:	1f03      	subs	r3, r0, #4
 80047d6:	2b0f      	cmp	r3, #15
 80047d8:	d817      	bhi.n	800480a <ConvertStatusLite+0x36>
 80047da:	e8df f003 	tbb	[pc, r3]
 80047de:	0a0c      	.short	0x0a0c
 80047e0:	1412190e 	.word	0x1412190e
 80047e4:	16101616 	.word	0x16101616
 80047e8:	16161616 	.word	0x16161616
 80047ec:	1808      	.short	0x1808
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 80047ee:	200a      	movs	r0, #10
 80047f0:	4770      	bx	lr
		break;
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80047f2:	2004      	movs	r0, #4
		break;
 80047f4:	4770      	bx	lr
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 80047f6:	2002      	movs	r0, #2
		break;
 80047f8:	4770      	bx	lr
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 80047fa:	2001      	movs	r0, #1
		break;
 80047fc:	4770      	bx	lr
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
		break;
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 80047fe:	2009      	movs	r0, #9
		break;
 8004800:	4770      	bx	lr
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8004802:	2003      	movs	r0, #3
		break;
 8004804:	4770      	bx	lr
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8004806:	2000      	movs	r0, #0
		break;
 8004808:	4770      	bx	lr
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800480a:	20ff      	movs	r0, #255	; 0xff
 800480c:	4770      	bx	lr
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800480e:	2006      	movs	r0, #6
	}

	return RangeStatus;
}
 8004810:	4770      	bx	lr

08004812 <SetPresetMode>:
{
 8004812:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004814:	b089      	sub	sp, #36	; 0x24
 8004816:	4605      	mov	r5, r0
 8004818:	460c      	mov	r4, r1
 800481a:	4611      	mov	r1, r2
 800481c:	461f      	mov	r7, r3
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800481e:	2c03      	cmp	r4, #3
 8004820:	d014      	beq.n	800484c <SetPresetMode+0x3a>
 8004822:	2c08      	cmp	r4, #8
 8004824:	d010      	beq.n	8004848 <SetPresetMode+0x36>
		measurement_mode = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8004826:	2620      	movs	r6, #32
	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8004828:	f10d 021f 	add.w	r2, sp, #31
 800482c:	4620      	mov	r0, r4
 800482e:	f7ff ff59 	bl	80046e4 <ComputeDevicePresetMode>
	if (Status == VL53L1_ERROR_NONE)
 8004832:	4603      	mov	r3, r0
 8004834:	b160      	cbz	r0, 8004850 <SetPresetMode+0x3e>
	if (Status == VL53L1_ERROR_NONE)
 8004836:	b1c3      	cbz	r3, 800486a <SetPresetMode+0x58>
	if (Status == VL53L1_ERROR_NONE)
 8004838:	b903      	cbnz	r3, 800483c <SetPresetMode+0x2a>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800483a:	70ae      	strb	r6, [r5, #2]
	if (Status == VL53L1_ERROR_NONE)
 800483c:	b90b      	cbnz	r3, 8004842 <SetPresetMode+0x30>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800483e:	f885 437c 	strb.w	r4, [r5, #892]	; 0x37c
}
 8004842:	4618      	mov	r0, r3
 8004844:	b009      	add	sp, #36	; 0x24
 8004846:	bdf0      	pop	{r4, r5, r6, r7, pc}
		measurement_mode = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8004848:	2640      	movs	r6, #64	; 0x40
 800484a:	e7ed      	b.n	8004828 <SetPresetMode+0x16>
 800484c:	2640      	movs	r6, #64	; 0x40
 800484e:	e7eb      	b.n	8004828 <SetPresetMode+0x16>
		Status = VL53L1_get_preset_mode_timing_cfg(Dev,
 8004850:	f89d 101f 	ldrb.w	r1, [sp, #31]
 8004854:	ab04      	add	r3, sp, #16
 8004856:	9301      	str	r3, [sp, #4]
 8004858:	ab05      	add	r3, sp, #20
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	ab06      	add	r3, sp, #24
 800485e:	aa07      	add	r2, sp, #28
 8004860:	4628      	mov	r0, r5
 8004862:	f000 fd04 	bl	800526e <VL53L1_get_preset_mode_timing_cfg>
 8004866:	4603      	mov	r3, r0
 8004868:	e7e5      	b.n	8004836 <SetPresetMode+0x24>
		Status = VL53L1_set_preset_mode(
 800486a:	f89d 101f 	ldrb.w	r1, [sp, #31]
 800486e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004872:	9702      	str	r7, [sp, #8]
 8004874:	9b04      	ldr	r3, [sp, #16]
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	9b05      	ldr	r3, [sp, #20]
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	9b06      	ldr	r3, [sp, #24]
 800487e:	4628      	mov	r0, r5
 8004880:	f000 fd45 	bl	800530e <VL53L1_set_preset_mode>
 8004884:	4603      	mov	r3, r0
 8004886:	e7d7      	b.n	8004838 <SetPresetMode+0x26>

08004888 <SetLimitValue>:
{
 8004888:	b508      	push	{r3, lr}
	switch (LimitCheckId) {
 800488a:	b121      	cbz	r1, 8004896 <SetLimitValue+0xe>
 800488c:	2901      	cmp	r1, #1
 800488e:	d008      	beq.n	80048a2 <SetLimitValue+0x1a>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004890:	f06f 0003 	mvn.w	r0, #3
}
 8004894:	bd08      	pop	{r3, pc}
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8004896:	f3c2 318f 	ubfx	r1, r2, #14, #16
 800489a:	f000 fe27 	bl	80054ec <VL53L1_set_lite_sigma_threshold>
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800489e:	2000      	movs	r0, #0
		break;
 80048a0:	bd08      	pop	{r3, pc}
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 80048a2:	f3c2 214f 	ubfx	r1, r2, #9, #16
 80048a6:	f000 fe2a 	bl	80054fe <VL53L1_set_lite_min_count_rate>
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80048aa:	2000      	movs	r0, #0
		break;
 80048ac:	bd08      	pop	{r3, pc}

080048ae <ChangePresetMode>:
{
 80048ae:	b570      	push	{r4, r5, r6, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	4604      	mov	r4, r0
	Status = VL53L1_get_user_zone(Dev, &user_zone);
 80048b4:	a903      	add	r1, sp, #12
 80048b6:	f000 fc60 	bl	800517a <VL53L1_get_user_zone>
	PresetMode = VL53L1DevDataGet(Dev,
 80048ba:	f894 637c 	ldrb.w	r6, [r4, #892]	; 0x37c
	NewDistanceMode = VL53L1DevDataGet(Dev,
 80048be:	f894 537f 	ldrb.w	r5, [r4, #895]	; 0x37f
	if (Status == VL53L1_ERROR_NONE)
 80048c2:	4603      	mov	r3, r0
 80048c4:	b160      	cbz	r0, 80048e0 <ChangePresetMode+0x32>
	if (Status == VL53L1_ERROR_NONE)
 80048c6:	b19b      	cbz	r3, 80048f0 <ChangePresetMode+0x42>
	if (Status == VL53L1_ERROR_NONE)
 80048c8:	b1bb      	cbz	r3, 80048fa <ChangePresetMode+0x4c>
	if (Status == VL53L1_ERROR_NONE) {
 80048ca:	b1eb      	cbz	r3, 8004908 <ChangePresetMode+0x5a>
	if (Status == VL53L1_ERROR_NONE) {
 80048cc:	b323      	cbz	r3, 8004918 <ChangePresetMode+0x6a>
	if (Status == VL53L1_ERROR_NONE)
 80048ce:	b37b      	cbz	r3, 8004930 <ChangePresetMode+0x82>
	if (Status == VL53L1_ERROR_NONE) {
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d033      	beq.n	800493c <ChangePresetMode+0x8e>
	if (Status == VL53L1_ERROR_NONE)
 80048d4:	b90b      	cbnz	r3, 80048da <ChangePresetMode+0x2c>
		VL53L1DevDataSet(Dev,
 80048d6:	f884 537e 	strb.w	r5, [r4, #894]	; 0x37e
}
 80048da:	4618      	mov	r0, r3
 80048dc:	b004      	add	sp, #16
 80048de:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80048e0:	ab02      	add	r3, sp, #8
 80048e2:	aa01      	add	r2, sp, #4
 80048e4:	4669      	mov	r1, sp
 80048e6:	4620      	mov	r0, r4
 80048e8:	f000 fbe2 	bl	80050b0 <VL53L1_get_timeouts_us>
 80048ec:	4603      	mov	r3, r0
 80048ee:	e7ea      	b.n	80048c6 <ChangePresetMode+0x18>
		Status = VL53L1_stop_range(Dev);
 80048f0:	4620      	mov	r0, r4
 80048f2:	f000 ff6d 	bl	80057d0 <VL53L1_stop_range>
 80048f6:	4603      	mov	r3, r0
 80048f8:	e7e6      	b.n	80048c8 <ChangePresetMode+0x1a>
		Status = VL53L1_WaitUs(Dev, 500);
 80048fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80048fe:	4620      	mov	r0, r4
 8004900:	f00b fef2 	bl	80106e8 <VL53L1_WaitUs>
 8004904:	4603      	mov	r3, r0
 8004906:	e7e0      	b.n	80048ca <ChangePresetMode+0x1c>
		Status = SetPresetMode(Dev,
 8004908:	6963      	ldr	r3, [r4, #20]
 800490a:	462a      	mov	r2, r5
 800490c:	4631      	mov	r1, r6
 800490e:	4620      	mov	r0, r4
 8004910:	f7ff ff7f 	bl	8004812 <SetPresetMode>
 8004914:	4603      	mov	r3, r0
 8004916:	e7d9      	b.n	80048cc <ChangePresetMode+0x1e>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8004918:	9b02      	ldr	r3, [sp, #8]
 800491a:	9a01      	ldr	r2, [sp, #4]
 800491c:	9900      	ldr	r1, [sp, #0]
 800491e:	4620      	mov	r0, r4
 8004920:	f000 fba7 	bl	8005072 <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 8004924:	4603      	mov	r3, r0
 8004926:	2800      	cmp	r0, #0
 8004928:	d1d1      	bne.n	80048ce <ChangePresetMode+0x20>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800492a:	9a02      	ldr	r2, [sp, #8]
 800492c:	6122      	str	r2, [r4, #16]
 800492e:	e7ce      	b.n	80048ce <ChangePresetMode+0x20>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8004930:	a903      	add	r1, sp, #12
 8004932:	4620      	mov	r0, r4
 8004934:	f000 fc10 	bl	8005158 <VL53L1_set_user_zone>
 8004938:	4603      	mov	r3, r0
 800493a:	e7c9      	b.n	80048d0 <ChangePresetMode+0x22>
		Status = VL53L1_init_and_start_range(
 800493c:	2206      	movs	r2, #6
 800493e:	78a1      	ldrb	r1, [r4, #2]
 8004940:	4620      	mov	r0, r4
 8004942:	f000 fe45 	bl	80055d0 <VL53L1_init_and_start_range>
 8004946:	4603      	mov	r3, r0
 8004948:	e7c4      	b.n	80048d4 <ChangePresetMode+0x26>

0800494a <VL53L1_SetDeviceAddress>:
{
 800494a:	b508      	push	{r3, lr}
	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 800494c:	084a      	lsrs	r2, r1, #1
 800494e:	2101      	movs	r1, #1
 8004950:	f00b fe70 	bl	8010634 <VL53L1_WrByte>
}
 8004954:	bd08      	pop	{r3, pc}

08004956 <VL53L1_WaitDeviceBooted>:
{
 8004956:	b508      	push	{r3, lr}
	Status = VL53L1_poll_for_boot_completion(Dev,
 8004958:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800495c:	f002 fc80 	bl	8007260 <VL53L1_poll_for_boot_completion>
}
 8004960:	bd08      	pop	{r3, pc}

08004962 <VL53L1_SetDistanceMode>:
{
 8004962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004966:	b084      	sub	sp, #16
	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8004968:	f890 637c 	ldrb.w	r6, [r0, #892]	; 0x37c
	    (DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800496c:	1e4b      	subs	r3, r1, #1
 800496e:	b2db      	uxtb	r3, r3
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8004970:	2b02      	cmp	r3, #2
 8004972:	d83d      	bhi.n	80049f0 <VL53L1_SetDistanceMode+0x8e>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 8004974:	2b01      	cmp	r3, #1
 8004976:	d917      	bls.n	80049a8 <VL53L1_SetDistanceMode+0x46>
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8004978:	2703      	movs	r7, #3
 800497a:	460d      	mov	r5, r1
 800497c:	4604      	mov	r4, r0
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800497e:	4669      	mov	r1, sp
 8004980:	f000 fbfb 	bl	800517a <VL53L1_get_user_zone>
	inter_measurement_period_ms = VL53L1DevDataGet(Dev,
 8004984:	f8d4 8014 	ldr.w	r8, [r4, #20]
	if (Status == VL53L1_ERROR_NONE)
 8004988:	4603      	mov	r3, r0
 800498a:	b178      	cbz	r0, 80049ac <VL53L1_SetDistanceMode+0x4a>
	if (Status == VL53L1_ERROR_NONE)
 800498c:	b1b3      	cbz	r3, 80049bc <VL53L1_SetDistanceMode+0x5a>
	if (Status == VL53L1_ERROR_NONE) {
 800498e:	b92b      	cbnz	r3, 800499c <VL53L1_SetDistanceMode+0x3a>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8004990:	f884 737e 	strb.w	r7, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8004994:	f884 737f 	strb.w	r7, [r4, #895]	; 0x37f
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8004998:	f884 537d 	strb.w	r5, [r4, #893]	; 0x37d
	if (Status == VL53L1_ERROR_NONE) {
 800499c:	b1b3      	cbz	r3, 80049cc <VL53L1_SetDistanceMode+0x6a>
	if (Status == VL53L1_ERROR_NONE)
 800499e:	b30b      	cbz	r3, 80049e4 <VL53L1_SetDistanceMode+0x82>
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	b004      	add	sp, #16
 80049a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			InternalDistanceMode = DistanceMode;
 80049a8:	460f      	mov	r7, r1
 80049aa:	e7e6      	b.n	800497a <VL53L1_SetDistanceMode+0x18>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80049ac:	ab03      	add	r3, sp, #12
 80049ae:	aa02      	add	r2, sp, #8
 80049b0:	a901      	add	r1, sp, #4
 80049b2:	4620      	mov	r0, r4
 80049b4:	f000 fb7c 	bl	80050b0 <VL53L1_get_timeouts_us>
 80049b8:	4603      	mov	r3, r0
 80049ba:	e7e7      	b.n	800498c <VL53L1_SetDistanceMode+0x2a>
		Status = SetPresetMode(Dev,
 80049bc:	4643      	mov	r3, r8
 80049be:	463a      	mov	r2, r7
 80049c0:	4631      	mov	r1, r6
 80049c2:	4620      	mov	r0, r4
 80049c4:	f7ff ff25 	bl	8004812 <SetPresetMode>
 80049c8:	4603      	mov	r3, r0
 80049ca:	e7e0      	b.n	800498e <VL53L1_SetDistanceMode+0x2c>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80049cc:	9b03      	ldr	r3, [sp, #12]
 80049ce:	9a02      	ldr	r2, [sp, #8]
 80049d0:	9901      	ldr	r1, [sp, #4]
 80049d2:	4620      	mov	r0, r4
 80049d4:	f000 fb4d 	bl	8005072 <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 80049d8:	4603      	mov	r3, r0
 80049da:	2800      	cmp	r0, #0
 80049dc:	d1df      	bne.n	800499e <VL53L1_SetDistanceMode+0x3c>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 80049de:	9a03      	ldr	r2, [sp, #12]
 80049e0:	6122      	str	r2, [r4, #16]
 80049e2:	e7dc      	b.n	800499e <VL53L1_SetDistanceMode+0x3c>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 80049e4:	4669      	mov	r1, sp
 80049e6:	4620      	mov	r0, r4
 80049e8:	f000 fbb6 	bl	8005158 <VL53L1_set_user_zone>
 80049ec:	4603      	mov	r3, r0
 80049ee:	e7d7      	b.n	80049a0 <VL53L1_SetDistanceMode+0x3e>
		return VL53L1_ERROR_INVALID_PARAMS;
 80049f0:	f06f 0303 	mvn.w	r3, #3
 80049f4:	e7d4      	b.n	80049a0 <VL53L1_SetDistanceMode+0x3e>
	...

080049f8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:
{
 80049f8:	b508      	push	{r3, lr}
	adjustedIMP += (adjustedIMP * 64) / 1000;
 80049fa:	018b      	lsls	r3, r1, #6
 80049fc:	4a03      	ldr	r2, [pc, #12]	; (8004a0c <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x14>)
 80049fe:	fba2 2303 	umull	r2, r3, r2, r3
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8004a02:	eb01 1193 	add.w	r1, r1, r3, lsr #6
 8004a06:	f000 fb16 	bl	8005036 <VL53L1_set_inter_measurement_period_ms>
}
 8004a0a:	bd08      	pop	{r3, pc}
 8004a0c:	10624dd3 	.word	0x10624dd3

08004a10 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:
{
 8004a10:	b510      	push	{r4, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	460c      	mov	r4, r1
	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8004a16:	a901      	add	r1, sp, #4
 8004a18:	f000 fb1c 	bl	8005054 <VL53L1_get_inter_measurement_period_ms>
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8004a1c:	9b01      	ldr	r3, [sp, #4]
 8004a1e:	019a      	lsls	r2, r3, #6
 8004a20:	4903      	ldr	r1, [pc, #12]	; (8004a30 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x20>)
 8004a22:	fba1 1202 	umull	r1, r2, r1, r2
 8004a26:	eba3 1392 	sub.w	r3, r3, r2, lsr #6
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8004a2a:	6023      	str	r3, [r4, #0]
}
 8004a2c:	b002      	add	sp, #8
 8004a2e:	bd10      	pop	{r4, pc}
 8004a30:	10624dd3 	.word	0x10624dd3

08004a34 <VL53L1_SetLimitCheckEnable>:
{
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	4604      	mov	r4, r0
 8004a38:	460d      	mov	r5, r1
 8004a3a:	4616      	mov	r6, r2
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004a3c:	2901      	cmp	r1, #1
 8004a3e:	d813      	bhi.n	8004a68 <VL53L1_SetLimitCheckEnable+0x34>
		if (LimitCheckEnable == 0)
 8004a40:	b182      	cbz	r2, 8004a64 <VL53L1_SetLimitCheckEnable+0x30>
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004a42:	f101 03e0 	add.w	r3, r1, #224	; 0xe0
 8004a46:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004a4a:	689a      	ldr	r2, [r3, #8]
		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	4620      	mov	r0, r4
 8004a50:	f7ff ff1a 	bl	8004888 <SetLimitValue>
	if (Status == VL53L1_ERROR_NONE)
 8004a54:	b928      	cbnz	r0, 8004a62 <VL53L1_SetLimitCheckEnable+0x2e>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004a56:	3600      	adds	r6, #0
 8004a58:	bf18      	it	ne
 8004a5a:	2601      	movne	r6, #1
 8004a5c:	442c      	add	r4, r5
 8004a5e:	f884 6384 	strb.w	r6, [r4, #900]	; 0x384
}
 8004a62:	bd70      	pop	{r4, r5, r6, pc}
			TempFix1616 = 0;
 8004a64:	2200      	movs	r2, #0
 8004a66:	e7f1      	b.n	8004a4c <VL53L1_SetLimitCheckEnable+0x18>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004a68:	f06f 0003 	mvn.w	r0, #3
 8004a6c:	e7f2      	b.n	8004a54 <VL53L1_SetLimitCheckEnable+0x20>

08004a6e <VL53L1_GetLimitCheckEnable>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004a6e:	2901      	cmp	r1, #1
 8004a70:	d805      	bhi.n	8004a7e <VL53L1_GetLimitCheckEnable+0x10>
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004a72:	4408      	add	r0, r1
 8004a74:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
		*pLimitCheckEnable = Temp8;
 8004a78:	7013      	strb	r3, [r2, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004a7a:	2000      	movs	r0, #0
}
 8004a7c:	4770      	bx	lr
		*pLimitCheckEnable = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	7013      	strb	r3, [r2, #0]
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004a82:	f06f 0003 	mvn.w	r0, #3
 8004a86:	4770      	bx	lr

08004a88 <VL53L1_SetLimitCheckValue>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004a88:	2901      	cmp	r1, #1
 8004a8a:	d818      	bhi.n	8004abe <VL53L1_SetLimitCheckValue+0x36>
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004a8c:	1843      	adds	r3, r0, r1
 8004a8e:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
		if (LimitChecksEnable == 0) {
 8004a92:	b92b      	cbnz	r3, 8004aa0 <VL53L1_SetLimitCheckValue+0x18>
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004a94:	31e0      	adds	r1, #224	; 0xe0
 8004a96:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004a9a:	608a      	str	r2, [r1, #8]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	4770      	bx	lr
{
 8004aa0:	b570      	push	{r4, r5, r6, lr}
 8004aa2:	4616      	mov	r6, r2
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	4605      	mov	r5, r0
			Status = SetLimitValue(Dev, LimitCheckId,
 8004aa8:	f7ff feee 	bl	8004888 <SetLimitValue>
			if (Status == VL53L1_ERROR_NONE) {
 8004aac:	4603      	mov	r3, r0
 8004aae:	b920      	cbnz	r0, 8004aba <VL53L1_SetLimitCheckValue+0x32>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004ab0:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 8004ab4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8004ab8:	608e      	str	r6, [r1, #8]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004abe:	f06f 0303 	mvn.w	r3, #3
 8004ac2:	e7eb      	b.n	8004a9c <VL53L1_SetLimitCheckValue+0x14>

08004ac4 <VL53L1_DataInit>:
{
 8004ac4:	b570      	push	{r4, r5, r6, lr}
 8004ac6:	4606      	mov	r6, r0
		Status = VL53L1_data_init(Dev, 1);
 8004ac8:	2101      	movs	r1, #1
 8004aca:	f000 fd27 	bl	800551c <VL53L1_data_init>
	if (Status == VL53L1_ERROR_NONE) {
 8004ace:	4604      	mov	r4, r0
 8004ad0:	b928      	cbnz	r0, 8004ade <VL53L1_DataInit+0x1a>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f886 3378 	strb.w	r3, [r6, #888]	; 0x378
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8004ad8:	2308      	movs	r3, #8
 8004ada:	f886 337c 	strb.w	r3, [r6, #892]	; 0x37c
{
 8004ade:	2500      	movs	r5, #0
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004ae0:	2d01      	cmp	r5, #1
 8004ae2:	d80a      	bhi.n	8004afa <VL53L1_DataInit+0x36>
		if (Status == VL53L1_ERROR_NONE)
 8004ae4:	b94c      	cbnz	r4, 8004afa <VL53L1_DataInit+0x36>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	4629      	mov	r1, r5
 8004aea:	4630      	mov	r0, r6
 8004aec:	f7ff ffa2 	bl	8004a34 <VL53L1_SetLimitCheckEnable>
 8004af0:	4304      	orrs	r4, r0
 8004af2:	b264      	sxtb	r4, r4
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004af4:	3501      	adds	r5, #1
 8004af6:	b2ed      	uxtb	r5, r5
 8004af8:	e7f2      	b.n	8004ae0 <VL53L1_DataInit+0x1c>
	if (Status == VL53L1_ERROR_NONE) {
 8004afa:	b114      	cbz	r4, 8004b02 <VL53L1_DataInit+0x3e>
	if (Status == VL53L1_ERROR_NONE) {
 8004afc:	b14c      	cbz	r4, 8004b12 <VL53L1_DataInit+0x4e>
}
 8004afe:	4620      	mov	r0, r4
 8004b00:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_SetLimitCheckValue(Dev,
 8004b02:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004b06:	2100      	movs	r1, #0
 8004b08:	4630      	mov	r0, r6
 8004b0a:	f7ff ffbd 	bl	8004a88 <VL53L1_SetLimitCheckValue>
 8004b0e:	4604      	mov	r4, r0
 8004b10:	e7f4      	b.n	8004afc <VL53L1_DataInit+0x38>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8004b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b16:	2101      	movs	r1, #1
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f7ff ffb5 	bl	8004a88 <VL53L1_SetLimitCheckValue>
 8004b1e:	4604      	mov	r4, r0
 8004b20:	e7ed      	b.n	8004afe <VL53L1_DataInit+0x3a>

08004b22 <VL53L1_GetLimitCheckValue>:
{
 8004b22:	b570      	push	{r4, r5, r6, lr}
 8004b24:	b082      	sub	sp, #8
 8004b26:	4604      	mov	r4, r0
 8004b28:	4616      	mov	r6, r2
	switch (LimitCheckId) {
 8004b2a:	460d      	mov	r5, r1
 8004b2c:	b121      	cbz	r1, 8004b38 <VL53L1_GetLimitCheckValue+0x16>
 8004b2e:	2901      	cmp	r1, #1
 8004b30:	d016      	beq.n	8004b60 <VL53L1_GetLimitCheckValue+0x3e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004b32:	f06f 0003 	mvn.w	r0, #3
 8004b36:	e005      	b.n	8004b44 <VL53L1_GetLimitCheckValue+0x22>
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8004b38:	a901      	add	r1, sp, #4
 8004b3a:	f000 fcd2 	bl	80054e2 <VL53L1_get_lite_sigma_threshold>
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8004b3e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004b42:	039b      	lsls	r3, r3, #14
	if (Status == VL53L1_ERROR_NONE) {
 8004b44:	b950      	cbnz	r0, 8004b5c <VL53L1_GetLimitCheckValue+0x3a>
		if (TempFix1616 == 0) {
 8004b46:	b19b      	cbz	r3, 8004b70 <VL53L1_GetLimitCheckValue+0x4e>
			*pLimitCheckValue = TempFix1616;
 8004b48:	6033      	str	r3, [r6, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004b4a:	f105 02e0 	add.w	r2, r5, #224	; 0xe0
 8004b4e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004b52:	6093      	str	r3, [r2, #8]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004b54:	442c      	add	r4, r5
 8004b56:	2301      	movs	r3, #1
 8004b58:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
}
 8004b5c:	b002      	add	sp, #8
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8004b60:	f10d 0106 	add.w	r1, sp, #6
 8004b64:	f000 fcc6 	bl	80054f4 <VL53L1_get_lite_min_count_rate>
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8004b68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004b6c:	025b      	lsls	r3, r3, #9
		break;
 8004b6e:	e7e9      	b.n	8004b44 <VL53L1_GetLimitCheckValue+0x22>
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8004b70:	f105 03e0 	add.w	r3, r5, #224	; 0xe0
 8004b74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b78:	689b      	ldr	r3, [r3, #8]
			*pLimitCheckValue = TempFix1616;
 8004b7a:	6033      	str	r3, [r6, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004b7c:	442c      	add	r4, r5
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
 8004b84:	e7ea      	b.n	8004b5c <VL53L1_GetLimitCheckValue+0x3a>
	...

08004b88 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
				  uint8_t active_results, uint8_t device_status,
				  VL53L1_range_data_t *presults_data,
				  VL53L1_RangingMeasurementData_t *pRangeData)
{
 8004b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	4606      	mov	r6, r0
 8004b90:	4608      	mov	r0, r1
 8004b92:	4690      	mov	r8, r2
 8004b94:	461d      	mov	r5, r3
 8004b96:	9c08      	ldr	r4, [sp, #32]
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	6023      	str	r3, [r4, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8004b9c:	f895 703e 	ldrb.w	r7, [r5, #62]	; 0x3e
 8004ba0:	f007 071f 	and.w	r7, r7, #31

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8004ba4:	462a      	mov	r2, r5
 8004ba6:	4639      	mov	r1, r7
 8004ba8:	f7ff fde0 	bl	800476c <ComputeRQL>
 8004bac:	7160      	strb	r0, [r4, #5]
						   FilteredRangeStatus,
						   presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004bae:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8004bb0:	025b      	lsls	r3, r3, #9
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8004bb2:	60a3      	str	r3, [r4, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004bb4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8004bb6:	025b      	lsls	r3, r3, #9
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8004bb8:	60e3      	str	r3, [r4, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 8004bba:	8a2b      	ldrh	r3, [r5, #16]
	pRangeData->EffectiveSpadRtnCount =
 8004bbc:	8223      	strh	r3, [r4, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004bbe:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 8004bc0:	025b      	lsls	r3, r3, #9
		presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8004bc2:	6163      	str	r3, [r4, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8004bc4:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
 8004bc8:	8323      	strh	r3, [r4, #24]

	pRangeData->RangeFractionalPart = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	76a3      	strb	r3, [r4, #26]

	/* Treat device error status first */
	switch (device_status) {
 8004bce:	f108 32ff 	add.w	r2, r8, #4294967295
 8004bd2:	2a10      	cmp	r2, #16
 8004bd4:	d84b      	bhi.n	8004c6e <SetSimpleData+0xe6>
 8004bd6:	e8df f002 	tbb	[pc, r2]
 8004bda:	0909      	.short	0x0909
 8004bdc:	4a4a4a09 	.word	0x4a4a4a09
 8004be0:	4a4a4a4a 	.word	0x4a4a4a4a
 8004be4:	4a474a4a 	.word	0x4a474a4a
 8004be8:	4a4a      	.short	0x4a4a
 8004bea:	09          	.byte	0x09
 8004beb:	00          	.byte	0x00
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8004bec:	2305      	movs	r3, #5
 8004bee:	76e3      	strb	r3, [r4, #27]
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8004bf0:	7ee3      	ldrb	r3, [r4, #27]
 8004bf2:	b91b      	cbnz	r3, 8004bfc <SetSimpleData+0x74>
		pRangeData->RangeStatus =
			ConvertStatusLite(FilteredRangeStatus);
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	f7ff fded 	bl	80047d4 <ConvertStatusLite>
		pRangeData->RangeStatus =
 8004bfa:	76e0      	strb	r0, [r4, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004bfc:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 8004bfe:	025b      	lsls	r3, r3, #9
		presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004c00:	f8c6 3390 	str.w	r3, [r6, #912]	; 0x390
				      LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				      TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004c04:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8004c06:	025b      	lsls	r3, r3, #9
		presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004c08:	f8c6 3394 	str.w	r3, [r6, #916]	; 0x394
				      LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				      TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 8004c0c:	466a      	mov	r2, sp
 8004c0e:	2100      	movs	r1, #0
 8004c10:	4630      	mov	r0, r6
 8004c12:	f7ff ff86 	bl	8004b22 <VL53L1_GetLimitCheckValue>

	SigmaLimitflag = (FilteredRangeStatus ==
			  VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			 ? 1 : 0;

	VL53L1_GetLimitCheckEnable(Dev,
 8004c16:	f10d 0207 	add.w	r2, sp, #7
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f7ff ff26 	bl	8004a6e <VL53L1_GetLimitCheckEnable>
				   VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				   &Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8004c22:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d024      	beq.n	8004c74 <SetSimpleData+0xec>
 8004c2a:	2300      	movs	r3, #0
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8004c2c:	f886 3386 	strb.w	r3, [r6, #902]	; 0x386
				      VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 8004c30:	466a      	mov	r2, sp
 8004c32:	2101      	movs	r1, #1
 8004c34:	4630      	mov	r0, r6
 8004c36:	f7ff ff74 	bl	8004b22 <VL53L1_GetLimitCheckValue>

	SignalLimitflag = (FilteredRangeStatus ==
			   VL53L1_DEVICEERROR_MSRCNOTARGET)
			  ? 1 : 0;

	VL53L1_GetLimitCheckEnable(Dev,
 8004c3a:	f10d 0207 	add.w	r2, sp, #7
 8004c3e:	2101      	movs	r1, #1
 8004c40:	4630      	mov	r0, r6
 8004c42:	f7ff ff14 	bl	8004a6e <VL53L1_GetLimitCheckEnable>
				   VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				   &Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8004c46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d018      	beq.n	8004c80 <SetSimpleData+0xf8>
 8004c4e:	2300      	movs	r3, #0
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8004c50:	f886 3387 	strb.w	r3, [r6, #903]	; 0x387
				      VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8004c54:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8004c58:	7ee3      	ldrb	r3, [r4, #27]
 8004c5a:	b90b      	cbnz	r3, 8004c60 <SetSimpleData+0xd8>
 8004c5c:	2a00      	cmp	r2, #0
 8004c5e:	db15      	blt.n	8004c8c <SetSimpleData+0x104>
		else
			pRangeData->RangeMilliMeter = 0;
	}

	return Status;
}
 8004c60:	2000      	movs	r0, #0
 8004c62:	b002      	add	sp, #8
 8004c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8004c68:	230d      	movs	r3, #13
 8004c6a:	76e3      	strb	r3, [r4, #27]
		break;
 8004c6c:	e7c0      	b.n	8004bf0 <SetSimpleData+0x68>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	76e3      	strb	r3, [r4, #27]
 8004c72:	e7bd      	b.n	8004bf0 <SetSimpleData+0x68>
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8004c74:	2f06      	cmp	r7, #6
 8004c76:	d001      	beq.n	8004c7c <SetSimpleData+0xf4>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e7d7      	b.n	8004c2c <SetSimpleData+0xa4>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e7d5      	b.n	8004c2c <SetSimpleData+0xa4>
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8004c80:	2f04      	cmp	r7, #4
 8004c82:	d001      	beq.n	8004c88 <SetSimpleData+0x100>
 8004c84:	2300      	movs	r3, #0
 8004c86:	e7e3      	b.n	8004c50 <SetSimpleData+0xc8>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e7e1      	b.n	8004c50 <SetSimpleData+0xc8>
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8004c8c:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <SetSimpleData+0x118>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	db02      	blt.n	8004c9a <SetSimpleData+0x112>
			pRangeData->RangeMilliMeter = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	8323      	strh	r3, [r4, #24]
 8004c98:	e7e2      	b.n	8004c60 <SetSimpleData+0xd8>
			pRangeData->RangeStatus =
 8004c9a:	230e      	movs	r3, #14
 8004c9c:	76e3      	strb	r3, [r4, #27]
 8004c9e:	e7df      	b.n	8004c60 <SetSimpleData+0xd8>
 8004ca0:	20001454 	.word	0x20001454

08004ca4 <VL53L1_GetSequenceStepEnable>:
{
 8004ca4:	b508      	push	{r3, lr}
	Status = VL53L1_get_sequence_config_bit(Dev,
 8004ca6:	f000 fa41 	bl	800512c <VL53L1_get_sequence_config_bit>
}
 8004caa:	bd08      	pop	{r3, pc}

08004cac <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:
{
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	4606      	mov	r6, r0
 8004cb2:	460d      	mov	r5, r1
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8004cb4:	4b49      	ldr	r3, [pc, #292]	; (8004ddc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x130>)
 8004cb6:	4299      	cmp	r1, r3
 8004cb8:	d813      	bhi.n	8004ce2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004cba:	2400      	movs	r4, #0
	if (Status == VL53L1_ERROR_NONE) {
 8004cbc:	b1a4      	cbz	r4, 8004ce8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x3c>
	if (Status == VL53L1_ERROR_NONE) {
 8004cbe:	b1dc      	cbz	r4, 8004cf8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x4c>
	if (Status == VL53L1_ERROR_NONE)
 8004cc0:	b314      	cbz	r4, 8004d08 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5c>
	if (Status == VL53L1_ERROR_NONE) {
 8004cc2:	2c00      	cmp	r4, #0
 8004cc4:	d16a      	bne.n	8004d9c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8004cc6:	f896 337c 	ldrb.w	r3, [r6, #892]	; 0x37c
		switch (PresetMode) {
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d024      	beq.n	8004d18 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6c>
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d046      	beq.n	8004d60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb4>
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d032      	beq.n	8004d3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x90>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8004cd6:	4942      	ldr	r1, [pc, #264]	; (8004de0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x134>)
		divisor = 1;
 8004cd8:	2001      	movs	r0, #1
		TimingGuard = 0;
 8004cda:	2200      	movs	r2, #0
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8004cdc:	f06f 0407 	mvn.w	r4, #7
 8004ce0:	e04f      	b.n	8004d82 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004ce2:	f06f 0403 	mvn.w	r4, #3
 8004ce6:	e7e9      	b.n	8004cbc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004ce8:	f10d 0217 	add.w	r2, sp, #23
 8004cec:	2105      	movs	r1, #5
 8004cee:	4630      	mov	r0, r6
 8004cf0:	f7ff ffd8 	bl	8004ca4 <VL53L1_GetSequenceStepEnable>
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	e7e2      	b.n	8004cbe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004cf8:	f10d 0216 	add.w	r2, sp, #22
 8004cfc:	2106      	movs	r1, #6
 8004cfe:	4630      	mov	r0, r6
 8004d00:	f7ff ffd0 	bl	8004ca4 <VL53L1_GetSequenceStepEnable>
 8004d04:	4604      	mov	r4, r0
 8004d06:	e7db      	b.n	8004cc0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x14>
		Status = VL53L1_get_timeouts_us(Dev,
 8004d08:	ab04      	add	r3, sp, #16
 8004d0a:	aa03      	add	r2, sp, #12
 8004d0c:	a902      	add	r1, sp, #8
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f000 f9ce 	bl	80050b0 <VL53L1_get_timeouts_us>
 8004d14:	4604      	mov	r4, r0
 8004d16:	e7d4      	b.n	8004cc2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x16>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004d18:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d045      	beq.n	8004dac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>
 8004d20:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d004      	beq.n	8004d32 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x86>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8004d28:	492d      	ldr	r1, [pc, #180]	; (8004de0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x134>)
		divisor = 1;
 8004d2a:	2001      	movs	r0, #1
				TimingGuard = 1000;
 8004d2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d30:	e027      	b.n	8004d82 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8004d32:	492b      	ldr	r1, [pc, #172]	; (8004de0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x134>)
		divisor = 1;
 8004d34:	2001      	movs	r0, #1
				TimingGuard = 5000;
 8004d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3a:	e022      	b.n	8004d82 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004d3c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d038      	beq.n	8004db6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10a>
 8004d44:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d004      	beq.n	8004d56 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xaa>
			FDAMaxTimingBudgetUs *= 2;
 8004d4c:	4925      	ldr	r1, [pc, #148]	; (8004de4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x138>)
			divisor = 2;
 8004d4e:	2002      	movs	r0, #2
				TimingGuard = 21600;
 8004d50:	f245 4260 	movw	r2, #21600	; 0x5460
 8004d54:	e015      	b.n	8004d82 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
			FDAMaxTimingBudgetUs *= 2;
 8004d56:	4923      	ldr	r1, [pc, #140]	; (8004de4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x138>)
			divisor = 2;
 8004d58:	2002      	movs	r0, #2
				TimingGuard = 26600;
 8004d5a:	f246 72e8 	movw	r2, #26600	; 0x67e8
 8004d5e:	e010      	b.n	8004d82 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
			VL53L1_get_tuning_parm(Dev,
 8004d60:	aa01      	add	r2, sp, #4
 8004d62:	f248 0136 	movw	r1, #32822	; 0x8036
 8004d66:	4630      	mov	r0, r6
 8004d68:	f000 fe6b 	bl	8005a42 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 8004d6c:	9b01      	ldr	r3, [sp, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	dd1a      	ble.n	8004da8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
				vhv += vhv_loops *
 8004d72:	22f5      	movs	r2, #245	; 0xf5
 8004d74:	fb02 f203 	mul.w	r2, r2, r3
 8004d78:	32f5      	adds	r2, #245	; 0xf5
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8004d7a:	f602 52dc 	addw	r2, r2, #3548	; 0xddc
			FDAMaxTimingBudgetUs *= 2;
 8004d7e:	4919      	ldr	r1, [pc, #100]	; (8004de4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x138>)
			divisor = 2;
 8004d80:	2002      	movs	r0, #2
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8004d82:	42aa      	cmp	r2, r5
 8004d84:	d21c      	bcs.n	8004dc0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x114>
					- TimingGuard);
 8004d86:	1aaa      	subs	r2, r5, r2
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8004d88:	9204      	str	r2, [sp, #16]
		if (Status == VL53L1_ERROR_NONE) {
 8004d8a:	b93c      	cbnz	r4, 8004d9c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8004d8c:	9b04      	ldr	r3, [sp, #16]
 8004d8e:	4299      	cmp	r1, r3
 8004d90:	d219      	bcs.n	8004dc6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11a>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8004d92:	f06f 0403 	mvn.w	r4, #3
			if (Status == VL53L1_ERROR_NONE)
 8004d96:	b90c      	cbnz	r4, 8004d9c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				VL53L1DevDataSet(Dev,
 8004d98:	9b04      	ldr	r3, [sp, #16]
 8004d9a:	6133      	str	r3, [r6, #16]
	if (Status == VL53L1_ERROR_NONE) {
 8004d9c:	b90c      	cbnz	r4, 8004da2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
		VL53L1DevDataSet(Dev,
 8004d9e:	f8c6 5380 	str.w	r5, [r6, #896]	; 0x380
}
 8004da2:	4620      	mov	r0, r4
 8004da4:	b006      	add	sp, #24
 8004da6:	bd70      	pop	{r4, r5, r6, pc}
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8004da8:	22f5      	movs	r2, #245	; 0xf5
 8004daa:	e7e6      	b.n	8004d7a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8004dac:	490c      	ldr	r1, [pc, #48]	; (8004de0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x134>)
		divisor = 1;
 8004dae:	2001      	movs	r0, #1
				TimingGuard = 5000;
 8004db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db4:	e7e5      	b.n	8004d82 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
			FDAMaxTimingBudgetUs *= 2;
 8004db6:	490b      	ldr	r1, [pc, #44]	; (8004de4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x138>)
			divisor = 2;
 8004db8:	2002      	movs	r0, #2
				TimingGuard = 26600;
 8004dba:	f246 72e8 	movw	r2, #26600	; 0x67e8
 8004dbe:	e7e0      	b.n	8004d82 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8004dc0:	f06f 0403 	mvn.w	r4, #3
 8004dc4:	e7e1      	b.n	8004d8a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xde>
				TimingBudget /= divisor;
 8004dc6:	fbb3 f3f0 	udiv	r3, r3, r0
 8004dca:	9304      	str	r3, [sp, #16]
				Status = VL53L1_set_timeouts_us(
 8004dcc:	9a03      	ldr	r2, [sp, #12]
 8004dce:	9902      	ldr	r1, [sp, #8]
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	f000 f94e 	bl	8005072 <VL53L1_set_timeouts_us>
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	e7dd      	b.n	8004d96 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xea>
 8004dda:	bf00      	nop
 8004ddc:	00989680 	.word	0x00989680
 8004de0:	00086470 	.word	0x00086470
 8004de4:	0010c8e0 	.word	0x0010c8e0

08004de8 <VL53L1_SetPresetMode>:
{
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	4604      	mov	r4, r0
 8004dec:	460d      	mov	r5, r1
	Status = SetPresetMode(Dev,
 8004dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004df2:	2203      	movs	r2, #3
 8004df4:	f7ff fd0d 	bl	8004812 <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 8004df8:	4603      	mov	r3, r0
 8004dfa:	b9b8      	cbnz	r0, 8004e2c <VL53L1_SetPresetMode+0x44>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	f884 337e 	strb.w	r3, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8004e02:	f884 337f 	strb.w	r3, [r4, #895]	; 0x37f
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8004e06:	1eeb      	subs	r3, r5, #3
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d908      	bls.n	8004e20 <VL53L1_SetPresetMode+0x38>
		    (PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8004e0e:	2d08      	cmp	r5, #8
 8004e10:	d006      	beq.n	8004e20 <VL53L1_SetPresetMode+0x38>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8004e12:	f248 2135 	movw	r1, #33333	; 0x8235
 8004e16:	4620      	mov	r0, r4
 8004e18:	f7ff ff48 	bl	8004cac <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	e005      	b.n	8004e2c <VL53L1_SetPresetMode+0x44>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8004e20:	f24a 0128 	movw	r1, #41000	; 0xa028
 8004e24:	4620      	mov	r0, r4
 8004e26:	f7ff ff41 	bl	8004cac <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8004e2a:	4603      	mov	r3, r0
	if (Status == VL53L1_ERROR_NONE) {
 8004e2c:	b10b      	cbz	r3, 8004e32 <VL53L1_SetPresetMode+0x4a>
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8004e32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e36:	4620      	mov	r0, r4
 8004e38:	f7ff fdde 	bl	80049f8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	e7f6      	b.n	8004e2e <VL53L1_SetPresetMode+0x46>

08004e40 <VL53L1_StaticInit>:
{
 8004e40:	b508      	push	{r3, lr}
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8004e42:	2203      	movs	r2, #3
 8004e44:	f880 2378 	strb.w	r2, [r0, #888]	; 0x378
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8004e48:	2120      	movs	r1, #32
 8004e4a:	7081      	strb	r1, [r0, #2]
	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8004e4c:	f880 237f 	strb.w	r2, [r0, #895]	; 0x37f
	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8004e50:	f880 237e 	strb.w	r2, [r0, #894]	; 0x37e
	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8004e54:	f880 237d 	strb.w	r2, [r0, #893]	; 0x37d
	Status = VL53L1_SetPresetMode(Dev,
 8004e58:	2108      	movs	r1, #8
 8004e5a:	f7ff ffc5 	bl	8004de8 <VL53L1_SetPresetMode>
}
 8004e5e:	bd08      	pop	{r3, pc}

08004e60 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:
{
 8004e60:	b570      	push	{r4, r5, r6, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	4606      	mov	r6, r0
 8004e66:	460d      	mov	r5, r1
	uint8_t Mm1Enabled = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f88d 3017 	strb.w	r3, [sp, #23]
	uint8_t Mm2Enabled = 0;
 8004e6e:	f88d 3016 	strb.w	r3, [sp, #22]
	uint32_t MmTimeoutUs = 0;
 8004e72:	9304      	str	r3, [sp, #16]
	uint32_t RangeTimeoutUs = 0;
 8004e74:	9303      	str	r3, [sp, #12]
	uint32_t PhaseCalTimeoutUs = 0;
 8004e76:	9302      	str	r3, [sp, #8]
	*pMeasurementTimingBudgetMicroSeconds = 0;
 8004e78:	600b      	str	r3, [r1, #0]
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004e7a:	f10d 0217 	add.w	r2, sp, #23
 8004e7e:	2105      	movs	r1, #5
 8004e80:	f7ff ff10 	bl	8004ca4 <VL53L1_GetSequenceStepEnable>
	if (Status == VL53L1_ERROR_NONE)
 8004e84:	4604      	mov	r4, r0
 8004e86:	b170      	cbz	r0, 8004ea6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x46>
	if (Status == VL53L1_ERROR_NONE)
 8004e88:	b1ac      	cbz	r4, 8004eb6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x56>
	if (Status == VL53L1_ERROR_NONE) {
 8004e8a:	2c00      	cmp	r4, #0
 8004e8c:	d155      	bne.n	8004f3a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8004e8e:	f896 337c 	ldrb.w	r3, [r6, #892]	; 0x37c
		switch (PresetMode) {
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d017      	beq.n	8004ec6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
 8004e96:	2b08      	cmp	r3, #8
 8004e98:	d03a      	beq.n	8004f10 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb0>
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d024      	beq.n	8004ee8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x88>
	uint32_t MeasTimingBdg = 0;
 8004e9e:	2300      	movs	r3, #0
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8004ea0:	f06f 0407 	mvn.w	r4, #7
 8004ea4:	e04a      	b.n	8004f3c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004ea6:	f10d 0216 	add.w	r2, sp, #22
 8004eaa:	2106      	movs	r1, #6
 8004eac:	4630      	mov	r0, r6
 8004eae:	f7ff fef9 	bl	8004ca4 <VL53L1_GetSequenceStepEnable>
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	e7e8      	b.n	8004e88 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x28>
		Status = VL53L1_get_timeouts_us(Dev,
 8004eb6:	ab03      	add	r3, sp, #12
 8004eb8:	aa04      	add	r2, sp, #16
 8004eba:	a902      	add	r1, sp, #8
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	f000 f8f7 	bl	80050b0 <VL53L1_get_timeouts_us>
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	e7e1      	b.n	8004e8a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x2a>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004ec6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d007      	beq.n	8004ede <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x7e>
 8004ece:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d003      	beq.n	8004ede <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x7e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8004ed6:	9b03      	ldr	r3, [sp, #12]
 8004ed8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004edc:	e02e      	b.n	8004f3c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	e029      	b.n	8004f3c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004ee8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d009      	beq.n	8004f04 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xa4>
 8004ef0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d005      	beq.n	8004f04 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xa4>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8004ef8:	9b03      	ldr	r3, [sp, #12]
 8004efa:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8004efe:	3330      	adds	r3, #48	; 0x30
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	e01b      	b.n	8004f3c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8004f04:	9b03      	ldr	r3, [sp, #12]
 8004f06:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8004f0a:	3334      	adds	r3, #52	; 0x34
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	e015      	b.n	8004f3c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
			VL53L1_get_tuning_parm(Dev,
 8004f10:	aa01      	add	r2, sp, #4
 8004f12:	f248 0136 	movw	r1, #32822	; 0x8036
 8004f16:	4630      	mov	r0, r6
 8004f18:	f000 fd93 	bl	8005a42 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 8004f1c:	9a01      	ldr	r2, [sp, #4]
 8004f1e:	2a00      	cmp	r2, #0
 8004f20:	dd09      	ble.n	8004f36 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd6>
				vhv += vhv_loops *
 8004f22:	23f5      	movs	r3, #245	; 0xf5
 8004f24:	fb03 f302 	mul.w	r3, r3, r2
 8004f28:	33f5      	adds	r3, #245	; 0xf5
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8004f2a:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8004f2e:	9a03      	ldr	r2, [sp, #12]
 8004f30:	eb03 0342 	add.w	r3, r3, r2, lsl #1
			break;
 8004f34:	e002      	b.n	8004f3c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8004f36:	23f5      	movs	r3, #245	; 0xf5
 8004f38:	e7f7      	b.n	8004f2a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xca>
	uint32_t MeasTimingBdg = 0;
 8004f3a:	2300      	movs	r3, #0
	if (Status == VL53L1_ERROR_NONE)
 8004f3c:	b904      	cbnz	r4, 8004f40 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe0>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8004f3e:	602b      	str	r3, [r5, #0]
}
 8004f40:	4620      	mov	r0, r4
 8004f42:	b006      	add	sp, #24
 8004f44:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f48 <VL53L1_StartMeasurement>:
{
 8004f48:	b570      	push	{r4, r5, r6, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	4605      	mov	r5, r0
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8004f4e:	f890 3378 	ldrb.w	r3, [r0, #888]	; 0x378
	switch (CurrPalState) {
 8004f52:	2b05      	cmp	r3, #5
 8004f54:	d810      	bhi.n	8004f78 <VL53L1_StartMeasurement+0x30>
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d214      	bcs.n	8004f84 <VL53L1_StartMeasurement+0x3c>
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d912      	bls.n	8004f84 <VL53L1_StartMeasurement+0x3c>
		Status = VL53L1_ERROR_NONE;
 8004f5e:	2400      	movs	r4, #0
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004f60:	78ae      	ldrb	r6, [r5, #2]
	if ((Status == VL53L1_ERROR_NONE) &&
 8004f62:	b90c      	cbnz	r4, 8004f68 <VL53L1_StartMeasurement+0x20>
 8004f64:	2e40      	cmp	r6, #64	; 0x40
 8004f66:	d010      	beq.n	8004f8a <VL53L1_StartMeasurement+0x42>
	if (Status == VL53L1_ERROR_NONE)
 8004f68:	b32c      	cbz	r4, 8004fb6 <VL53L1_StartMeasurement+0x6e>
	if (Status == VL53L1_ERROR_NONE)
 8004f6a:	b914      	cbnz	r4, 8004f72 <VL53L1_StartMeasurement+0x2a>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	f885 3378 	strb.w	r3, [r5, #888]	; 0x378
}
 8004f72:	4620      	mov	r0, r4
 8004f74:	b002      	add	sp, #8
 8004f76:	bd70      	pop	{r4, r5, r6, pc}
	switch (CurrPalState) {
 8004f78:	3b62      	subs	r3, #98	; 0x62
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d902      	bls.n	8004f84 <VL53L1_StartMeasurement+0x3c>
		Status = VL53L1_ERROR_UNDEFINED;
 8004f7e:	f06f 0402 	mvn.w	r4, #2
 8004f82:	e7ed      	b.n	8004f60 <VL53L1_StartMeasurement+0x18>
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8004f84:	f06f 040d 	mvn.w	r4, #13
 8004f88:	e7ea      	b.n	8004f60 <VL53L1_StartMeasurement+0x18>
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004f8a:	a901      	add	r1, sp, #4
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	f7ff ff67 	bl	8004e60 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
		MTBus /= 1000;
 8004f92:	4a0c      	ldr	r2, [pc, #48]	; (8004fc4 <VL53L1_StartMeasurement+0x7c>)
 8004f94:	9b01      	ldr	r3, [sp, #4]
 8004f96:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9a:	099b      	lsrs	r3, r3, #6
 8004f9c:	9301      	str	r3, [sp, #4]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004f9e:	4669      	mov	r1, sp
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	f7ff fd35 	bl	8004a10 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8004fa6:	9b01      	ldr	r3, [sp, #4]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	9a00      	ldr	r2, [sp, #0]
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d9db      	bls.n	8004f68 <VL53L1_StartMeasurement+0x20>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8004fb0:	f06f 0403 	mvn.w	r4, #3
 8004fb4:	e7d8      	b.n	8004f68 <VL53L1_StartMeasurement+0x20>
		Status = VL53L1_init_and_start_range(
 8004fb6:	2206      	movs	r2, #6
 8004fb8:	4631      	mov	r1, r6
 8004fba:	4628      	mov	r0, r5
 8004fbc:	f000 fb08 	bl	80055d0 <VL53L1_init_and_start_range>
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	e7d2      	b.n	8004f6a <VL53L1_StartMeasurement+0x22>
 8004fc4:	10624dd3 	.word	0x10624dd3

08004fc8 <VL53L1_ClearInterruptAndStartMeasurement>:
{
 8004fc8:	b508      	push	{r3, lr}
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004fca:	7881      	ldrb	r1, [r0, #2]
	InternalDistanceMode = VL53L1DevDataGet(Dev,
 8004fcc:	f890 237e 	ldrb.w	r2, [r0, #894]	; 0x37e
	NewDistanceMode = VL53L1DevDataGet(Dev,
 8004fd0:	f890 337f 	ldrb.w	r3, [r0, #895]	; 0x37f
	if (NewDistanceMode != InternalDistanceMode)
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d002      	beq.n	8004fde <VL53L1_ClearInterruptAndStartMeasurement+0x16>
		Status = ChangePresetMode(Dev);
 8004fd8:	f7ff fc69 	bl	80048ae <ChangePresetMode>
 8004fdc:	bd08      	pop	{r3, pc}
		Status = VL53L1_clear_interrupt_and_enable_next_range(
 8004fde:	f000 fc4b 	bl	8005878 <VL53L1_clear_interrupt_and_enable_next_range>
}
 8004fe2:	bd08      	pop	{r3, pc}

08004fe4 <VL53L1_WaitMeasurementDataReady>:
{
 8004fe4:	b508      	push	{r3, lr}
	Status = VL53L1_poll_for_range_completion(Dev,
 8004fe6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004fea:	f002 f956 	bl	800729a <VL53L1_poll_for_range_completion>
}
 8004fee:	bd08      	pop	{r3, pc}

08004ff0 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
					      VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004ff0:	b530      	push	{r4, r5, lr}
 8004ff2:	b0a5      	sub	sp, #148	; 0x94
 8004ff4:	4605      	mov	r5, r0
 8004ff6:	460c      	mov	r4, r1

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8004ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffc:	600b      	str	r3, [r1, #0]
 8004ffe:	604b      	str	r3, [r1, #4]
 8005000:	608b      	str	r3, [r1, #8]
 8005002:	60cb      	str	r3, [r1, #12]
 8005004:	610b      	str	r3, [r1, #16]
 8005006:	614b      	str	r3, [r1, #20]
 8005008:	618b      	str	r3, [r1, #24]
	       sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800500a:	aa03      	add	r2, sp, #12
 800500c:	2102      	movs	r1, #2
 800500e:	f000 fccc 	bl	80059aa <VL53L1_get_device_results>
		Dev,
		VL53L1_DEVICERESULTSLEVEL_FULL,
		presults);

	if (Status == VL53L1_ERROR_NONE) {
 8005012:	4603      	mov	r3, r0
 8005014:	b110      	cbz	r0, 800501c <VL53L1_GetRangingMeasurementData+0x2c>
				       pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005016:	4618      	mov	r0, r3
 8005018:	b025      	add	sp, #148	; 0x94
 800501a:	bd30      	pop	{r4, r5, pc}
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800501c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005020:	7123      	strb	r3, [r4, #4]
		Status = SetSimpleData(Dev, 1,
 8005022:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8005026:	9400      	str	r4, [sp, #0]
 8005028:	ab04      	add	r3, sp, #16
 800502a:	2101      	movs	r1, #1
 800502c:	4628      	mov	r0, r5
 800502e:	f7ff fdab 	bl	8004b88 <SetSimpleData>
 8005032:	4603      	mov	r3, r0
 8005034:	e7ef      	b.n	8005016 <VL53L1_GetRangingMeasurementData+0x26>

08005036 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV Dev,
	uint32_t inter_measurement_period_ms)
{
 8005036:	4602      	mov	r2, r0
	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8005038:	f8b0 32b4 	ldrh.w	r3, [r0, #692]	; 0x2b4
 800503c:	b13b      	cbz	r3, 800504e <VL53L1_set_inter_measurement_period_ms+0x18>
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800503e:	2000      	movs	r0, #0
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (status == VL53L1_ERROR_NONE) {
 8005040:	b920      	cbnz	r0, 800504c <VL53L1_set_inter_measurement_period_ms+0x16>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8005042:	6151      	str	r1, [r2, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
 8005044:	fb03 f301 	mul.w	r3, r3, r1
		pdev->tim_cfg.system__intermeasurement_period = \
 8005048:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800504c:	4770      	bx	lr
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800504e:	f06f 000e 	mvn.w	r0, #14
 8005052:	e7f5      	b.n	8005040 <VL53L1_set_inter_measurement_period_ms+0xa>

08005054 <VL53L1_get_inter_measurement_period_ms>:
	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8005054:	f8b0 22b4 	ldrh.w	r2, [r0, #692]	; 0x2b4
 8005058:	b142      	cbz	r2, 800506c <VL53L1_get_inter_measurement_period_ms+0x18>
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800505a:	2300      	movs	r3, #0
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (status == VL53L1_ERROR_NONE)
 800505c:	b923      	cbnz	r3, 8005068 <VL53L1_get_inter_measurement_period_ms+0x14>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 800505e:	f8d0 01ac 	ldr.w	r0, [r0, #428]	; 0x1ac
 8005062:	fbb0 f2f2 	udiv	r2, r0, r2
		*pinter_measurement_period_ms = \
 8005066:	600a      	str	r2, [r1, #0]


	LOG_FUNCTION_END(status);

	return status;
}
 8005068:	4618      	mov	r0, r3
 800506a:	4770      	bx	lr
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800506c:	f06f 030e 	mvn.w	r3, #14
 8005070:	e7f4      	b.n	800505c <VL53L1_get_inter_measurement_period_ms+0x8>

08005072 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV Dev,
	uint32_t phasecal_config_timeout_us,
	uint32_t mm_config_timeout_us,
	uint32_t range_config_timeout_us)
{
 8005072:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005074:	b083      	sub	sp, #12
 8005076:	4604      	mov	r4, r0
	VL53L1_LLDriverData_t *pdev =
		VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8005078:	f8b0 715e 	ldrh.w	r7, [r0, #350]	; 0x15e
 800507c:	b11f      	cbz	r7, 8005086 <VL53L1_set_timeouts_us+0x14>
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800507e:	2000      	movs	r0, #0
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (status == VL53L1_ERROR_NONE) {
 8005080:	b120      	cbz	r0, 800508c <VL53L1_set_timeouts_us+0x1a>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005082:	b003      	add	sp, #12
 8005084:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005086:	f06f 000e 	mvn.w	r0, #14
 800508a:	e7f9      	b.n	8005080 <VL53L1_set_timeouts_us+0xe>
 800508c:	461e      	mov	r6, r3
 800508e:	4615      	mov	r5, r2
 8005090:	4608      	mov	r0, r1
		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8005092:	60a1      	str	r1, [r4, #8]
		pdev->mm_config_timeout_us = mm_config_timeout_us;
 8005094:	60e2      	str	r2, [r4, #12]
		pdev->range_config_timeout_us = range_config_timeout_us;
 8005096:	6123      	str	r3, [r4, #16]
			VL53L1_calc_timeout_register_values(
 8005098:	f504 73c2 	add.w	r3, r4, #388	; 0x184
 800509c:	f504 74ce 	add.w	r4, r4, #412	; 0x19c
		status =
 80050a0:	9401      	str	r4, [sp, #4]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	463b      	mov	r3, r7
 80050a6:	4632      	mov	r2, r6
 80050a8:	4629      	mov	r1, r5
 80050aa:	f001 fae1 	bl	8006670 <VL53L1_calc_timeout_register_values>
 80050ae:	e7e8      	b.n	8005082 <VL53L1_set_timeouts_us+0x10>

080050b0 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t                        *prange_config_timeout_us)
{
 80050b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t macro_period_us = 0;
	uint16_t timeout_encoded = 0;

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80050b4:	f8b0 515e 	ldrh.w	r5, [r0, #350]	; 0x15e
 80050b8:	b125      	cbz	r5, 80050c4 <VL53L1_get_timeouts_us+0x14>
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80050ba:	2600      	movs	r6, #0
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (status == VL53L1_ERROR_NONE) {
 80050bc:	b12e      	cbz	r6, 80050ca <VL53L1_get_timeouts_us+0x1a>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80050be:	4630      	mov	r0, r6
 80050c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80050c4:	f06f 060e 	mvn.w	r6, #14
 80050c8:	e7f8      	b.n	80050bc <VL53L1_get_timeouts_us+0xc>
 80050ca:	461f      	mov	r7, r3
 80050cc:	4690      	mov	r8, r2
 80050ce:	4689      	mov	r9, r1
 80050d0:	4604      	mov	r4, r0
		macro_period_us =
 80050d2:	f890 11a2 	ldrb.w	r1, [r0, #418]	; 0x1a2
 80050d6:	4628      	mov	r0, r5
 80050d8:	f001 fa55 	bl	8006586 <VL53L1_calc_macro_period_us>
 80050dc:	4605      	mov	r5, r0
			VL53L1_calc_timeout_us(
 80050de:	4601      	mov	r1, r0
 80050e0:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
 80050e4:	f001 fa94 	bl	8006610 <VL53L1_calc_timeout_us>
		*pphasecal_config_timeout_us =
 80050e8:	f8c9 0000 	str.w	r0, [r9]
		timeout_encoded =
 80050ec:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
				  (uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 80050f0:	f894 019d 	ldrb.w	r0, [r4, #413]	; 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 80050f4:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			VL53L1_calc_decoded_timeout_us(
 80050f8:	4629      	mov	r1, r5
 80050fa:	b280      	uxth	r0, r0
 80050fc:	f001 fab0 	bl	8006660 <VL53L1_calc_decoded_timeout_us>
		*pmm_config_timeout_us =
 8005100:	f8c8 0000 	str.w	r0, [r8]
		timeout_encoded =
 8005104:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
				  (uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8005108:	f894 01a1 	ldrb.w	r0, [r4, #417]	; 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 800510c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			VL53L1_calc_decoded_timeout_us(
 8005110:	4629      	mov	r1, r5
 8005112:	b280      	uxth	r0, r0
 8005114:	f001 faa4 	bl	8006660 <VL53L1_calc_decoded_timeout_us>
		*prange_config_timeout_us =
 8005118:	6038      	str	r0, [r7, #0]
		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800511a:	f8d9 3000 	ldr.w	r3, [r9]
 800511e:	60a3      	str	r3, [r4, #8]
		pdev->mm_config_timeout_us = *pmm_config_timeout_us;
 8005120:	f8d8 3000 	ldr.w	r3, [r8]
 8005124:	60e3      	str	r3, [r4, #12]
		pdev->range_config_timeout_us = *prange_config_timeout_us;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6123      	str	r3, [r4, #16]
 800512a:	e7c8      	b.n	80050be <VL53L1_get_timeouts_us+0xe>

0800512c <VL53L1_get_sequence_config_bit>:
	VL53L1_LLDriverData_t *pdev =
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t bit_mask = 0x01;

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800512c:	2907      	cmp	r1, #7
 800512e:	d80e      	bhi.n	800514e <VL53L1_get_sequence_config_bit+0x22>
		if (bit_id > 0) {
 8005130:	b159      	cbz	r1, 800514a <VL53L1_get_sequence_config_bit+0x1e>
			bit_mask = 0x01 << bit_id;
 8005132:	2301      	movs	r3, #1
 8005134:	408b      	lsls	r3, r1
 8005136:	b2db      	uxtb	r3, r3
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8005138:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
		*pvalue =
 800513c:	4003      	ands	r3, r0
 800513e:	7013      	strb	r3, [r2, #0]

		if (bit_id > 0) {
 8005140:	b141      	cbz	r1, 8005154 <VL53L1_get_sequence_config_bit+0x28>
			*pvalue = *pvalue >> bit_id;
 8005142:	410b      	asrs	r3, r1
 8005144:	7013      	strb	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005146:	2000      	movs	r0, #0
 8005148:	4770      	bx	lr
	uint8_t bit_mask = 0x01;
 800514a:	2301      	movs	r3, #1
 800514c:	e7f4      	b.n	8005138 <VL53L1_get_sequence_config_bit+0xc>
		}
	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800514e:	f06f 0003 	mvn.w	r0, #3
 8005152:	4770      	bx	lr
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005154:	2000      	movs	r0, #0
	}

	return status;
}
 8005156:	4770      	bx	lr

08005158 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4605      	mov	r5, r0
 800515c:	460c      	mov	r4, r1
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800515e:	f200 12c3 	addw	r2, r0, #451	; 0x1c3
 8005162:	7809      	ldrb	r1, [r1, #0]
 8005164:	7860      	ldrb	r0, [r4, #1]
 8005166:	f001 fac5 	bl	80066f4 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800516a:	f505 72e2 	add.w	r2, r5, #452	; 0x1c4
 800516e:	78e1      	ldrb	r1, [r4, #3]
 8005170:	78a0      	ldrb	r0, [r4, #2]
 8005172:	f001 fad5 	bl	8006720 <VL53L1_encode_zone_size>
	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
}
 8005176:	2000      	movs	r0, #0
 8005178:	bd38      	pop	{r3, r4, r5, pc}

0800517a <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800517a:	b538      	push	{r3, r4, r5, lr}
 800517c:	4605      	mov	r5, r0
 800517e:	460c      	mov	r4, r1
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8005180:	460a      	mov	r2, r1
 8005182:	3101      	adds	r1, #1
 8005184:	f890 01c3 	ldrb.w	r0, [r0, #451]	; 0x1c3
 8005188:	f001 fb72 	bl	8006870 <VL53L1_decode_row_col>
		pdev->dyn_cfg.roi_config__user_roi_centre_spad,
		&(puser_zone->y_centre),
		&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800518c:	1ce2      	adds	r2, r4, #3
 800518e:	1ca1      	adds	r1, r4, #2
 8005190:	f895 01c4 	ldrb.w	r0, [r5, #452]	; 0x1c4
 8005194:	f001 fabe 	bl	8006714 <VL53L1_decode_zone_size>
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
}
 8005198:	2000      	movs	r0, #0
 800519a:	bd38      	pop	{r3, r4, r5, pc}

0800519c <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800519c:	b570      	push	{r4, r5, r6, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	4606      	mov	r6, r0
 80051a2:	460c      	mov	r4, r1
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t x = 0;
 80051a4:	2500      	movs	r5, #0
 80051a6:	f88d 5007 	strb.w	r5, [sp, #7]
	uint8_t y = 0;
 80051aa:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t xy_size = 0;

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 80051ae:	f10d 0207 	add.w	r2, sp, #7
 80051b2:	f10d 0106 	add.w	r1, sp, #6
 80051b6:	f890 022a 	ldrb.w	r0, [r0, #554]	; 0x22a
 80051ba:	f001 fb59 	bl	8006870 <VL53L1_decode_row_col>
		pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
		&y,
		&x);

	pmm_roi->x_centre = x;
 80051be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051c2:	7023      	strb	r3, [r4, #0]
	pmm_roi->y_centre = y;
 80051c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80051c8:	7063      	strb	r3, [r4, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 80051ca:	f896 322b 	ldrb.w	r3, [r6, #555]	; 0x22b

	pmm_roi->height = xy_size >> 4;
 80051ce:	091a      	lsrs	r2, r3, #4
 80051d0:	70e2      	strb	r2, [r4, #3]
	pmm_roi->width = xy_size & 0x0F;
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	70a3      	strb	r3, [r4, #2]

	LOG_FUNCTION_END(status);

	return status;
}
 80051d8:	4628      	mov	r0, r5
 80051da:	b002      	add	sp, #8
 80051dc:	bd70      	pop	{r4, r5, r6, pc}

080051de <VL53L1_read_p2p_data>:
{
 80051de:	b570      	push	{r4, r5, r6, lr}
 80051e0:	4604      	mov	r4, r0
		status = VL53L1_get_static_nvm_managed(
 80051e2:	f500 71ac 	add.w	r1, r0, #344	; 0x158
 80051e6:	f001 fbb1 	bl	800694c <VL53L1_get_static_nvm_managed>
	if (status == VL53L1_ERROR_NONE)
 80051ea:	4605      	mov	r5, r0
 80051ec:	b1d0      	cbz	r0, 8005224 <VL53L1_read_p2p_data+0x46>
	if (status == VL53L1_ERROR_NONE) {
 80051ee:	b305      	cbz	r5, 8005232 <VL53L1_read_p2p_data+0x54>
	if (status == VL53L1_ERROR_NONE)
 80051f0:	b375      	cbz	r5, 8005250 <VL53L1_read_p2p_data+0x72>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80051f2:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
 80051f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fa:	d203      	bcs.n	8005204 <VL53L1_read_p2p_data+0x26>
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 80051fc:	f64b 43cc 	movw	r3, #48332	; 0xbccc
 8005200:	f8a4 315e 	strh.w	r3, [r4, #350]	; 0x15e
	if (status == VL53L1_ERROR_NONE)
 8005204:	b365      	cbz	r5, 8005260 <VL53L1_read_p2p_data+0x82>
	if (pdev->optical_centre.x_centre == 0 &&
 8005206:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 800520a:	b94b      	cbnz	r3, 8005220 <VL53L1_read_p2p_data+0x42>
			pdev->mm_roi.x_centre << 4;
 800520c:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 8005210:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.x_centre =
 8005212:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			pdev->mm_roi.y_centre << 4;
 8005216:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 800521a:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.y_centre =
 800521c:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
}
 8005220:	4628      	mov	r0, r5
 8005222:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L1_get_customer_nvm_managed(
 8005224:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8005228:	4620      	mov	r0, r4
 800522a:	f001 fc42 	bl	8006ab2 <VL53L1_get_customer_nvm_managed>
 800522e:	4605      	mov	r5, r0
 8005230:	e7dd      	b.n	80051ee <VL53L1_read_p2p_data+0x10>
		status = VL53L1_get_nvm_copy_data(
 8005232:	f504 76fd 	add.w	r6, r4, #506	; 0x1fa
 8005236:	4631      	mov	r1, r6
 8005238:	4620      	mov	r0, r4
 800523a:	f001 fffc 	bl	8007236 <VL53L1_get_nvm_copy_data>
		if (status == VL53L1_ERROR_NONE)
 800523e:	4605      	mov	r5, r0
 8005240:	2800      	cmp	r0, #0
 8005242:	d1d5      	bne.n	80051f0 <VL53L1_read_p2p_data+0x12>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8005244:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 8005248:	4630      	mov	r0, r6
 800524a:	f001 f8d7 	bl	80063fc <VL53L1_copy_rtn_good_spads_to_buffer>
 800524e:	e7cf      	b.n	80051f0 <VL53L1_read_p2p_data+0x12>
		status =
 8005250:	f504 722d 	add.w	r2, r4, #692	; 0x2b4
 8005254:	21de      	movs	r1, #222	; 0xde
 8005256:	4620      	mov	r0, r4
 8005258:	f00b fa1a 	bl	8010690 <VL53L1_RdWord>
 800525c:	4605      	mov	r5, r0
 800525e:	e7c8      	b.n	80051f2 <VL53L1_read_p2p_data+0x14>
		status =
 8005260:	f104 019e 	add.w	r1, r4, #158	; 0x9e
 8005264:	4620      	mov	r0, r4
 8005266:	f7ff ff99 	bl	800519c <VL53L1_get_mode_mitigation_roi>
 800526a:	4605      	mov	r5, r0
 800526c:	e7cb      	b.n	8005206 <VL53L1_read_p2p_data+0x28>

0800526e <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800526e:	b500      	push	{lr}
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8005270:	3901      	subs	r1, #1
 8005272:	2925      	cmp	r1, #37	; 0x25
 8005274:	d847      	bhi.n	8005306 <VL53L1_get_preset_mode_timing_cfg+0x98>
 8005276:	e8df f001 	tbb	[pc, r1]
 800527a:	1313      	.short	0x1313
 800527c:	24131313 	.word	0x24131313
 8005280:	46462424 	.word	0x46462424
 8005284:	46464646 	.word	0x46464646
 8005288:	24134646 	.word	0x24134646
 800528c:	46464646 	.word	0x46464646
 8005290:	46464646 	.word	0x46464646
 8005294:	46464646 	.word	0x46464646
 8005298:	46464646 	.word	0x46464646
 800529c:	35353546 	.word	0x35353546
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 80052a0:	f8b0 10ca 	ldrh.w	r1, [r0, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 80052a4:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 80052a6:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 80052aa:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 80052ac:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
		*pmm_config_timeout_us =
 80052b0:	9a01      	ldr	r2, [sp, #4]
 80052b2:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 80052b4:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
		*prange_config_timeout_us =
 80052b8:	9a02      	ldr	r2, [sp, #8]
 80052ba:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80052bc:	2000      	movs	r0, #0
		break;
 80052be:	f85d fb04 	ldr.w	pc, [sp], #4
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 80052c2:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 80052c6:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80052c8:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 80052cc:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 80052ce:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
		*pmm_config_timeout_us =
 80052d2:	9a01      	ldr	r2, [sp, #4]
 80052d4:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 80052d6:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
		*prange_config_timeout_us =
 80052da:	9a02      	ldr	r2, [sp, #8]
 80052dc:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80052de:	2000      	movs	r0, #0
		break;
 80052e0:	f85d fb04 	ldr.w	pc, [sp], #4

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 80052e4:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 80052e8:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80052ea:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 80052ee:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80052f0:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
		*pmm_config_timeout_us =
 80052f4:	9a01      	ldr	r2, [sp, #4]
 80052f6:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 80052f8:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
		*prange_config_timeout_us =
 80052fc:	9a02      	ldr	r2, [sp, #8]
 80052fe:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005300:	2000      	movs	r0, #0
		break;
 8005302:	f85d fb04 	ldr.w	pc, [sp], #4

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005306:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800530a:	f85d fb04 	ldr.w	pc, [sp], #4

0800530e <VL53L1_set_preset_mode>:
	uint16_t dss_config__target_total_rate_mcps,
	uint32_t phasecal_config_timeout_us,
	uint32_t mm_config_timeout_us,
	uint32_t range_config_timeout_us,
	uint32_t inter_measurement_period_ms)
{
 800530e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005312:	b089      	sub	sp, #36	; 0x24
 8005314:	4604      	mov	r4, r0
 8005316:	460d      	mov	r5, r1
 8005318:	4616      	mov	r6, r2
 800531a:	9307      	str	r3, [sp, #28]

	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev =
		VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic = &(pdev->stat_cfg);
 800531c:	f500 77b2 	add.w	r7, r0, #356	; 0x164
	VL53L1_general_config_t       *pgeneral = &(pdev->gen_cfg);
 8005320:	f500 78c2 	add.w	r8, r0, #388	; 0x184
	VL53L1_timing_config_t        *ptiming = &(pdev->tim_cfg);
 8005324:	f500 73ce 	add.w	r3, r0, #412	; 0x19c
 8005328:	9305      	str	r3, [sp, #20]
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800532a:	f500 73da 	add.w	r3, r0, #436	; 0x1b4
 800532e:	9306      	str	r3, [sp, #24]
	VL53L1_system_control_t       *psystem = &(pdev->sys_ctrl);
 8005330:	f500 79e4 	add.w	r9, r0, #456	; 0x1c8
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8005334:	f100 0aa4 	add.w	sl, r0, #164	; 0xa4
	VL53L1_low_power_auto_data_t  *plpadata =
 8005338:	f500 7b39 	add.w	fp, r0, #740	; 0x2e4
		&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode = device_preset_mode;
 800533c:	7041      	strb	r1, [r0, #1]
	pdev->mm_config_timeout_us = mm_config_timeout_us;
 800533e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005340:	60c3      	str	r3, [r0, #12]
	pdev->range_config_timeout_us = range_config_timeout_us;
 8005342:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005344:	6103      	str	r3, [r0, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8005346:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005348:	6143      	str	r3, [r0, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800534a:	2103      	movs	r1, #3
 800534c:	f000 ff69 	bl	8006222 <VL53L1_init_ll_driver_state>
		Dev,
		VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8005350:	3d01      	subs	r5, #1
 8005352:	2d25      	cmp	r5, #37	; 0x25
 8005354:	f200 80b6 	bhi.w	80054c4 <VL53L1_set_preset_mode+0x1b6>
 8005358:	e8df f005 	tbb	[pc, r5]
 800535c:	40352a13 	.word	0x40352a13
 8005360:	6c61564b 	.word	0x6c61564b
 8005364:	b4b4b4b4 	.word	0xb4b4b4b4
 8005368:	b4b4b4b4 	.word	0xb4b4b4b4
 800536c:	b4b48277 	.word	0xb4b48277
 8005370:	b4b4b4b4 	.word	0xb4b4b4b4
 8005374:	b4b4b4b4 	.word	0xb4b4b4b4
 8005378:	b4b4b4b4 	.word	0xb4b4b4b4
 800537c:	8db4b4b4 	.word	0x8db4b4b4
 8005380:	a79a      	.short	0xa79a
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8005382:	f8cd a004 	str.w	sl, [sp, #4]
 8005386:	f8cd 9000 	str.w	r9, [sp]
 800538a:	9b06      	ldr	r3, [sp, #24]
 800538c:	9a05      	ldr	r2, [sp, #20]
 800538e:	4641      	mov	r1, r8
 8005390:	4638      	mov	r0, r7
 8005392:	f000 fd62 	bl	8005e5a <VL53L1_preset_mode_standard_ranging>
		break;
	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8005396:	b910      	cbnz	r0, 800539e <VL53L1_set_preset_mode+0x90>
		pstatic->dss_config__target_total_rate_mcps =
 8005398:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
			dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps =
 800539c:	8326      	strh	r6, [r4, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800539e:	2800      	cmp	r0, #0
 80053a0:	f000 8093 	beq.w	80054ca <VL53L1_set_preset_mode+0x1bc>
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 80053a4:	2800      	cmp	r0, #0
 80053a6:	f000 8097 	beq.w	80054d8 <VL53L1_set_preset_mode+0x1ca>
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
}
 80053aa:	b009      	add	sp, #36	; 0x24
 80053ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_preset_mode_standard_ranging_short_range(
 80053b0:	f8cd a004 	str.w	sl, [sp, #4]
 80053b4:	f8cd 9000 	str.w	r9, [sp]
 80053b8:	9b06      	ldr	r3, [sp, #24]
 80053ba:	9a05      	ldr	r2, [sp, #20]
 80053bc:	4641      	mov	r1, r8
 80053be:	4638      	mov	r0, r7
 80053c0:	f000 fdef 	bl	8005fa2 <VL53L1_preset_mode_standard_ranging_short_range>
		break;
 80053c4:	e7e7      	b.n	8005396 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_standard_ranging_long_range(
 80053c6:	f8cd a004 	str.w	sl, [sp, #4]
 80053ca:	f8cd 9000 	str.w	r9, [sp]
 80053ce:	9b06      	ldr	r3, [sp, #24]
 80053d0:	9a05      	ldr	r2, [sp, #20]
 80053d2:	4641      	mov	r1, r8
 80053d4:	4638      	mov	r0, r7
 80053d6:	f000 fe05 	bl	8005fe4 <VL53L1_preset_mode_standard_ranging_long_range>
		break;
 80053da:	e7dc      	b.n	8005396 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 80053dc:	f8cd a004 	str.w	sl, [sp, #4]
 80053e0:	f8cd 9000 	str.w	r9, [sp]
 80053e4:	9b06      	ldr	r3, [sp, #24]
 80053e6:	9a05      	ldr	r2, [sp, #20]
 80053e8:	4641      	mov	r1, r8
 80053ea:	4638      	mov	r0, r7
 80053ec:	f000 fe1b 	bl	8006026 <VL53L1_preset_mode_standard_ranging_mm1_cal>
		break;
 80053f0:	e7d1      	b.n	8005396 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 80053f2:	f8cd a004 	str.w	sl, [sp, #4]
 80053f6:	f8cd 9000 	str.w	r9, [sp]
 80053fa:	9b06      	ldr	r3, [sp, #24]
 80053fc:	9a05      	ldr	r2, [sp, #20]
 80053fe:	4641      	mov	r1, r8
 8005400:	4638      	mov	r0, r7
 8005402:	f000 fe23 	bl	800604c <VL53L1_preset_mode_standard_ranging_mm2_cal>
		break;
 8005406:	e7c6      	b.n	8005396 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_timed_ranging(
 8005408:	f8cd a004 	str.w	sl, [sp, #4]
 800540c:	f8cd 9000 	str.w	r9, [sp]
 8005410:	9b06      	ldr	r3, [sp, #24]
 8005412:	9a05      	ldr	r2, [sp, #20]
 8005414:	4641      	mov	r1, r8
 8005416:	4638      	mov	r0, r7
 8005418:	f000 fe2b 	bl	8006072 <VL53L1_preset_mode_timed_ranging>
		break;
 800541c:	e7bb      	b.n	8005396 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800541e:	f8cd a004 	str.w	sl, [sp, #4]
 8005422:	f8cd 9000 	str.w	r9, [sp]
 8005426:	9b06      	ldr	r3, [sp, #24]
 8005428:	9a05      	ldr	r2, [sp, #20]
 800542a:	4641      	mov	r1, r8
 800542c:	4638      	mov	r0, r7
 800542e:	f000 fe3f 	bl	80060b0 <VL53L1_preset_mode_timed_ranging_short_range>
		break;
 8005432:	e7b0      	b.n	8005396 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8005434:	f8cd a004 	str.w	sl, [sp, #4]
 8005438:	f8cd 9000 	str.w	r9, [sp]
 800543c:	9b06      	ldr	r3, [sp, #24]
 800543e:	9a05      	ldr	r2, [sp, #20]
 8005440:	4641      	mov	r1, r8
 8005442:	4638      	mov	r0, r7
 8005444:	f000 fe54 	bl	80060f0 <VL53L1_preset_mode_timed_ranging_long_range>
		break;
 8005448:	e7a5      	b.n	8005396 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_olt(
 800544a:	f8cd a004 	str.w	sl, [sp, #4]
 800544e:	f8cd 9000 	str.w	r9, [sp]
 8005452:	9b06      	ldr	r3, [sp, #24]
 8005454:	9a05      	ldr	r2, [sp, #20]
 8005456:	4641      	mov	r1, r8
 8005458:	4638      	mov	r0, r7
 800545a:	f000 fec6 	bl	80061ea <VL53L1_preset_mode_olt>
		break;
 800545e:	e79a      	b.n	8005396 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_singleshot_ranging(
 8005460:	f8cd a004 	str.w	sl, [sp, #4]
 8005464:	f8cd 9000 	str.w	r9, [sp]
 8005468:	9b06      	ldr	r3, [sp, #24]
 800546a:	9a05      	ldr	r2, [sp, #20]
 800546c:	4641      	mov	r1, r8
 800546e:	4638      	mov	r0, r7
 8005470:	f000 fe9f 	bl	80061b2 <VL53L1_preset_mode_singleshot_ranging>
		break;
 8005474:	e78f      	b.n	8005396 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8005476:	f8cd b008 	str.w	fp, [sp, #8]
 800547a:	f8cd a004 	str.w	sl, [sp, #4]
 800547e:	f8cd 9000 	str.w	r9, [sp]
 8005482:	9b06      	ldr	r3, [sp, #24]
 8005484:	9a05      	ldr	r2, [sp, #20]
 8005486:	4641      	mov	r1, r8
 8005488:	4638      	mov	r0, r7
 800548a:	f000 fe66 	bl	800615a <VL53L1_preset_mode_low_power_auto_short_ranging>
		break;
 800548e:	e782      	b.n	8005396 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8005490:	f8cd b008 	str.w	fp, [sp, #8]
 8005494:	f8cd a004 	str.w	sl, [sp, #4]
 8005498:	f8cd 9000 	str.w	r9, [sp]
 800549c:	9b06      	ldr	r3, [sp, #24]
 800549e:	9a05      	ldr	r2, [sp, #20]
 80054a0:	4641      	mov	r1, r8
 80054a2:	4638      	mov	r0, r7
 80054a4:	f000 fe43 	bl	800612e <VL53L1_preset_mode_low_power_auto_ranging>
		break;
 80054a8:	e775      	b.n	8005396 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80054aa:	f8cd b008 	str.w	fp, [sp, #8]
 80054ae:	f8cd a004 	str.w	sl, [sp, #4]
 80054b2:	f8cd 9000 	str.w	r9, [sp]
 80054b6:	9b06      	ldr	r3, [sp, #24]
 80054b8:	9a05      	ldr	r2, [sp, #20]
 80054ba:	4641      	mov	r1, r8
 80054bc:	4638      	mov	r0, r7
 80054be:	f000 fe62 	bl	8006186 <VL53L1_preset_mode_low_power_auto_long_ranging>
		break;
 80054c2:	e768      	b.n	8005396 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_ERROR_INVALID_PARAMS;
 80054c4:	f06f 0003 	mvn.w	r0, #3
 80054c8:	e765      	b.n	8005396 <VL53L1_set_preset_mode+0x88>
		status =
 80054ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80054cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80054ce:	9907      	ldr	r1, [sp, #28]
 80054d0:	4620      	mov	r0, r4
 80054d2:	f7ff fdce 	bl	8005072 <VL53L1_set_timeouts_us>
 80054d6:	e765      	b.n	80053a4 <VL53L1_set_preset_mode+0x96>
		status =
 80054d8:	9914      	ldr	r1, [sp, #80]	; 0x50
 80054da:	4620      	mov	r0, r4
 80054dc:	f7ff fdab 	bl	8005036 <VL53L1_set_inter_measurement_period_ms>
 80054e0:	e763      	b.n	80053aa <VL53L1_set_preset_mode+0x9c>

080054e2 <VL53L1_get_lite_sigma_threshold>:
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	*plite_sigma =
		pdev->tim_cfg.range_config__sigma_thresh;
 80054e2:	f8b0 31a6 	ldrh.w	r3, [r0, #422]	; 0x1a6
	*plite_sigma =
 80054e6:	800b      	strh	r3, [r1, #0]

	LOG_FUNCTION_END(status);

	return status;
}
 80054e8:	2000      	movs	r0, #0
 80054ea:	4770      	bx	lr

080054ec <VL53L1_set_lite_sigma_threshold>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 80054ec:	f8a0 11a6 	strh.w	r1, [r0, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
}
 80054f0:	2000      	movs	r0, #0
 80054f2:	4770      	bx	lr

080054f4 <VL53L1_get_lite_min_count_rate>:
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 80054f4:	f8b0 31a8 	ldrh.w	r3, [r0, #424]	; 0x1a8
	*plite_mincountrate =
 80054f8:	800b      	strh	r3, [r1, #0]

	LOG_FUNCTION_END(status);

	return status;
}
 80054fa:	2000      	movs	r0, #0
 80054fc:	4770      	bx	lr

080054fe <VL53L1_set_lite_min_count_rate>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 80054fe:	f8a0 11a8 	strh.w	r1, [r0, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
}
 8005502:	2000      	movs	r0, #0
 8005504:	4770      	bx	lr

08005506 <VL53L1_set_vhv_loopbound>:
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8005506:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
 800550a:	f003 0303 	and.w	r3, r3, #3
		(vhv_loopbound * 4);
 800550e:	0089      	lsls	r1, r1, #2
 8005510:	b2c9      	uxtb	r1, r1
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8005512:	440b      	add	r3, r1
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8005514:	f880 3160 	strb.w	r3, [r0, #352]	; 0x160

	LOG_FUNCTION_END(status);

	return status;
}
 8005518:	2000      	movs	r0, #0
 800551a:	4770      	bx	lr

0800551c <VL53L1_data_init>:
{
 800551c:	b530      	push	{r4, r5, lr}
 800551e:	b085      	sub	sp, #20
 8005520:	4604      	mov	r4, r0
 8005522:	460d      	mov	r5, r1
	VL53L1_init_ll_driver_state(
 8005524:	2162      	movs	r1, #98	; 0x62
 8005526:	f000 fe7c 	bl	8006222 <VL53L1_init_ll_driver_state>
	pdev->wait_method = VL53L1_WAIT_METHOD_BLOCKING;
 800552a:	2300      	movs	r3, #0
 800552c:	7023      	strb	r3, [r4, #0]
	pdev->preset_mode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800552e:	2201      	movs	r2, #1
 8005530:	7062      	strb	r2, [r4, #1]
	pdev->measurement_mode = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8005532:	70a3      	strb	r3, [r4, #2]
	pdev->offset_calibration_mode =
 8005534:	70e2      	strb	r2, [r4, #3]
	pdev->offset_correction_mode =
 8005536:	7122      	strb	r2, [r4, #4]
	pdev->phasecal_config_timeout_us = 1000;
 8005538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800553c:	60a2      	str	r2, [r4, #8]
	pdev->mm_config_timeout_us = 2000;
 800553e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005542:	60e2      	str	r2, [r4, #12]
	pdev->range_config_timeout_us = 13000;
 8005544:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8005548:	6122      	str	r2, [r4, #16]
	pdev->inter_measurement_period_ms = 100;
 800554a:	2264      	movs	r2, #100	; 0x64
 800554c:	6162      	str	r2, [r4, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800554e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005552:	8322      	strh	r2, [r4, #24]
	pdev->debug_mode = 0x00;
 8005554:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	pdev->gain_cal.standard_ranging_gain_factor =
 8005558:	f240 73db 	movw	r3, #2011	; 0x7db
 800555c:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
	VL53L1_init_version(Dev);
 8005560:	4620      	mov	r0, r4
 8005562:	f000 fe51 	bl	8006208 <VL53L1_init_version>
	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8005566:	bb0d      	cbnz	r5, 80055ac <VL53L1_data_init+0x90>
	status =
 8005568:	f504 7088 	add.w	r0, r4, #272	; 0x110
 800556c:	f000 fbcc 	bl	8005d08 <VL53L1_init_refspadchar_config_struct>
	status =
 8005570:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8005574:	f000 fbda 	bl	8005d2c <VL53L1_init_ssc_config_struct>
	status =
 8005578:	f504 7196 	add.w	r1, r4, #300	; 0x12c
 800557c:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8005580:	f000 fbe3 	bl	8005d4a <VL53L1_init_xtalk_config_struct>
	status =
 8005584:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 8005588:	f000 fc0a 	bl	8005da0 <VL53L1_init_offset_cal_config_struct>
	status =
 800558c:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 8005590:	f000 fc18 	bl	8005dc4 <VL53L1_init_tuning_parm_storage_struct>
	status = VL53L1_set_vhv_loopbound(Dev,
 8005594:	2120      	movs	r1, #32
 8005596:	4620      	mov	r0, r4
 8005598:	f7ff ffb5 	bl	8005506 <VL53L1_set_vhv_loopbound>
	if (status == VL53L1_ERROR_NONE)
 800559c:	4605      	mov	r5, r0
 800559e:	b148      	cbz	r0, 80055b4 <VL53L1_data_init+0x98>
	VL53L1_low_power_auto_data_init(
 80055a0:	4620      	mov	r0, r4
 80055a2:	f001 f8c2 	bl	800672a <VL53L1_low_power_auto_data_init>
}
 80055a6:	4628      	mov	r0, r5
 80055a8:	b005      	add	sp, #20
 80055aa:	bd30      	pop	{r4, r5, pc}
		status = VL53L1_read_p2p_data(Dev);
 80055ac:	4620      	mov	r0, r4
 80055ae:	f7ff fe16 	bl	80051de <VL53L1_read_p2p_data>
 80055b2:	e7d9      	b.n	8005568 <VL53L1_data_init+0x4c>
		status = VL53L1_set_preset_mode(
 80055b4:	7861      	ldrb	r1, [r4, #1]
 80055b6:	8b22      	ldrh	r2, [r4, #24]
 80055b8:	68e3      	ldr	r3, [r4, #12]
 80055ba:	6920      	ldr	r0, [r4, #16]
 80055bc:	6965      	ldr	r5, [r4, #20]
 80055be:	9502      	str	r5, [sp, #8]
 80055c0:	9001      	str	r0, [sp, #4]
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	68a3      	ldr	r3, [r4, #8]
 80055c6:	4620      	mov	r0, r4
 80055c8:	f7ff fea1 	bl	800530e <VL53L1_set_preset_mode>
 80055cc:	4605      	mov	r5, r0
 80055ce:	e7e7      	b.n	80055a0 <VL53L1_data_init+0x84>

080055d0 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV Dev,
	uint8_t measurement_mode,
	VL53L1_DeviceConfigLevel device_config_level)
{
 80055d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	b0c3      	sub	sp, #268	; 0x10c
 80055d6:	4604      	mov	r4, r0
 80055d8:	4616      	mov	r6, r2
	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm = &(pdev->stat_nvm);
 80055da:	f500 70ac 	add.w	r0, r0, #344	; 0x158
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 80055de:	f104 0b42 	add.w	fp, r4, #66	; 0x42
	VL53L1_static_config_t        *pstatic = &(pdev->stat_cfg);
 80055e2:	f504 73b2 	add.w	r3, r4, #356	; 0x164
 80055e6:	9300      	str	r3, [sp, #0]
	VL53L1_general_config_t       *pgeneral = &(pdev->gen_cfg);
 80055e8:	f504 73c2 	add.w	r3, r4, #388	; 0x184
 80055ec:	9301      	str	r3, [sp, #4]
	VL53L1_timing_config_t        *ptiming = &(pdev->tim_cfg);
 80055ee:	f504 7ace 	add.w	sl, r4, #412	; 0x19c
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 80055f2:	f504 79da 	add.w	r9, r4, #436	; 0x1b4
	VL53L1_system_control_t       *psystem = &(pdev->sys_ctrl);
 80055f6:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
	uint16_t i2c_buffer_size_bytes = 0;

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 80055fa:	70a1      	strb	r1, [r4, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 80055fc:	f994 31cc 	ldrsb.w	r3, [r4, #460]	; 0x1cc
 8005600:	f003 030f 	and.w	r3, r3, #15
		 VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005604:	4319      	orrs	r1, r3
	psystem->system__mode_start =
 8005606:	f884 11cc 	strb.w	r1, [r4, #460]	; 0x1cc
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800560a:	f8b4 3142 	ldrh.w	r3, [r4, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800560e:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8005612:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8005616:	2bff      	cmp	r3, #255	; 0xff
 8005618:	d019      	beq.n	800564e <VL53L1_init_and_start_range+0x7e>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800561a:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 800561e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005622:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800562a:	d014      	beq.n	8005656 <VL53L1_init_and_start_range+0x86>
			device_config_level =
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800562c:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 8005630:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005634:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005638:	4a64      	ldr	r2, [pc, #400]	; (80057cc <VL53L1_init_and_start_range+0x1fc>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d024      	beq.n	8005688 <VL53L1_init_and_start_range+0xb8>

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800563e:	1e73      	subs	r3, r6, #1
 8005640:	2b05      	cmp	r3, #5
 8005642:	d831      	bhi.n	80056a8 <VL53L1_init_and_start_range+0xd8>
 8005644:	e8df f003 	tbb	[pc, r3]
 8005648:	282a2c2e 	.word	0x282a2c2e
 800564c:	2632      	.short	0x2632
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800564e:	2300      	movs	r3, #0
 8005650:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
 8005654:	e7e1      	b.n	800561a <VL53L1_init_and_start_range+0x4a>
			pdev->gen_cfg.system__interrupt_config_gpio;
 8005656:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800565a:	f884 32e7 	strb.w	r3, [r4, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800565e:	2320      	movs	r3, #32
 8005660:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
		if ((pdev->dyn_cfg.system__sequence_config & (
 8005664:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
 8005668:	f013 0f60 	tst.w	r3, #96	; 0x60
 800566c:	d108      	bne.n	8005680 <VL53L1_init_and_start_range+0xb0>
				pdev->customer.mm_config__outer_offset_mm * 4;
 800566e:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 8005672:	009b      	lsls	r3, r3, #2
			pdev->customer.algo__part_to_part_range_offset_mm =
 8005674:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
		if (device_config_level <
 8005678:	2e04      	cmp	r6, #4
 800567a:	d8d7      	bhi.n	800562c <VL53L1_init_and_start_range+0x5c>
			device_config_level =
 800567c:	2605      	movs	r6, #5
 800567e:	e7d5      	b.n	800562c <VL53L1_init_and_start_range+0x5c>
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8005680:	2300      	movs	r3, #0
 8005682:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8005686:	e7f7      	b.n	8005678 <VL53L1_init_and_start_range+0xa8>
			pdev->low_power_auto_data.saved_interrupt_config;
 8005688:	f894 32e7 	ldrb.w	r3, [r4, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800568c:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8005690:	2606      	movs	r6, #6
 8005692:	e7d4      	b.n	800563e <VL53L1_init_and_start_range+0x6e>
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8005694:	2701      	movs	r7, #1
 8005696:	e00a      	b.n	80056ae <VL53L1_init_and_start_range+0xde>
		break;
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
		break;
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8005698:	2724      	movs	r7, #36	; 0x24
		break;
 800569a:	e008      	b.n	80056ae <VL53L1_init_and_start_range+0xde>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800569c:	2744      	movs	r7, #68	; 0x44
		break;
 800569e:	e006      	b.n	80056ae <VL53L1_init_and_start_range+0xde>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 80056a0:	275a      	movs	r7, #90	; 0x5a
		break;
 80056a2:	e004      	b.n	80056ae <VL53L1_init_and_start_range+0xde>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 80056a4:	2771      	movs	r7, #113	; 0x71
		break;
 80056a6:	e002      	b.n	80056ae <VL53L1_init_and_start_range+0xde>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 80056a8:	2783      	movs	r7, #131	; 0x83
		break;
 80056aa:	e000      	b.n	80056ae <VL53L1_init_and_start_range+0xde>
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 80056ac:	270d      	movs	r7, #13
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 80056ae:	f1c7 0588 	rsb	r5, r7, #136	; 0x88
 80056b2:	b2ad      	uxth	r5, r5
		i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
	for (i = 0; i < i2c_buffer_size_bytes; i++) {
 80056b4:	2300      	movs	r3, #0
	pbuffer = &buffer[0];
 80056b6:	aa02      	add	r2, sp, #8
	for (i = 0; i < i2c_buffer_size_bytes; i++) {
 80056b8:	e004      	b.n	80056c4 <VL53L1_init_and_start_range+0xf4>
		*pbuffer++ = 0;
 80056ba:	2100      	movs	r1, #0
 80056bc:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++) {
 80056be:	3301      	adds	r3, #1
 80056c0:	b29b      	uxth	r3, r3
		*pbuffer++ = 0;
 80056c2:	3201      	adds	r2, #1
	for (i = 0; i < i2c_buffer_size_bytes; i++) {
 80056c4:	42ab      	cmp	r3, r5
 80056c6:	d3f8      	bcc.n	80056ba <VL53L1_init_and_start_range+0xea>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 80056c8:	2e05      	cmp	r6, #5
 80056ca:	d835      	bhi.n	8005738 <VL53L1_init_and_start_range+0x168>
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80056cc:	2000      	movs	r0, #0
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80056ce:	2e04      	cmp	r6, #4
 80056d0:	d901      	bls.n	80056d6 <VL53L1_init_and_start_range+0x106>
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d039      	beq.n	800574a <VL53L1_init_and_start_range+0x17a>
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80056d6:	2e03      	cmp	r6, #3
 80056d8:	d901      	bls.n	80056de <VL53L1_init_and_start_range+0x10e>
 80056da:	2800      	cmp	r0, #0
 80056dc:	d03f      	beq.n	800575e <VL53L1_init_and_start_range+0x18e>
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80056de:	2e02      	cmp	r6, #2
 80056e0:	d901      	bls.n	80056e6 <VL53L1_init_and_start_range+0x116>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d045      	beq.n	8005772 <VL53L1_init_and_start_range+0x1a2>
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80056e6:	2e01      	cmp	r6, #1
 80056e8:	d901      	bls.n	80056ee <VL53L1_init_and_start_range+0x11e>
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d04b      	beq.n	8005786 <VL53L1_init_and_start_range+0x1b6>
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80056ee:	b1c6      	cbz	r6, 8005722 <VL53L1_init_and_start_range+0x152>
 80056f0:	b9b8      	cbnz	r0, 8005722 <VL53L1_init_and_start_range+0x152>
	    status == VL53L1_ERROR_NONE) {
		i2c_buffer_offset_bytes = \
 80056f2:	f1c7 0271 	rsb	r2, r7, #113	; 0x71
 80056f6:	b292      	uxth	r2, r2
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 80056f8:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
 80056fc:	f013 0f20 	tst.w	r3, #32
 8005700:	d009      	beq.n	8005716 <VL53L1_init_and_start_range+0x146>
		     VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
		    VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8005702:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8005706:	f043 0101 	orr.w	r1, r3, #1
 800570a:	f884 11b4 	strb.w	r1, [r4, #436]	; 0x1b4
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800570e:	f884 11c0 	strb.w	r1, [r4, #448]	; 0x1c0
			pdynamic->system__grouped_parameter_hold = pstate->cfg_gph_id;
 8005712:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
		}
		status =
 8005716:	ab02      	add	r3, sp, #8
 8005718:	441a      	add	r2, r3
 800571a:	2112      	movs	r1, #18
 800571c:	4648      	mov	r0, r9
 800571e:	f001 fad2 	bl	8006cc6 <VL53L1_i2c_encode_dynamic_config>
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (status == VL53L1_ERROR_NONE) {
 8005722:	2800      	cmp	r0, #0
 8005724:	d039      	beq.n	800579a <VL53L1_init_and_start_range+0x1ca>
				&buffer[i2c_buffer_offset_bytes]);
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 8005726:	2800      	cmp	r0, #0
 8005728:	d041      	beq.n	80057ae <VL53L1_init_and_start_range+0x1de>
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800572a:	2800      	cmp	r0, #0
 800572c:	d046      	beq.n	80057bc <VL53L1_init_and_start_range+0x1ec>
		status = VL53L1_update_ll_driver_rd_state(Dev);

	if (status == VL53L1_ERROR_NONE)
 800572e:	2800      	cmp	r0, #0
 8005730:	d048      	beq.n	80057c4 <VL53L1_init_and_start_range+0x1f4>
		status = VL53L1_update_ll_driver_cfg_state(Dev);

	LOG_FUNCTION_END(status);

	return status;
}
 8005732:	b043      	add	sp, #268	; 0x10c
 8005734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		i2c_buffer_offset_bytes = \
 8005738:	f1c7 0201 	rsb	r2, r7, #1
		status =
 800573c:	ab02      	add	r3, sp, #8
 800573e:	fa13 f282 	uxtah	r2, r3, r2
 8005742:	210b      	movs	r1, #11
 8005744:	f001 f8a8 	bl	8006898 <VL53L1_i2c_encode_static_nvm_managed>
 8005748:	e7c1      	b.n	80056ce <VL53L1_init_and_start_range+0xfe>
		i2c_buffer_offset_bytes = \
 800574a:	f1c7 020d 	rsb	r2, r7, #13
		status =
 800574e:	ab02      	add	r3, sp, #8
 8005750:	fa13 f282 	uxtah	r2, r3, r2
 8005754:	2117      	movs	r1, #23
 8005756:	4658      	mov	r0, fp
 8005758:	f001 f90c 	bl	8006974 <VL53L1_i2c_encode_customer_nvm_managed>
 800575c:	e7bb      	b.n	80056d6 <VL53L1_init_and_start_range+0x106>
		i2c_buffer_offset_bytes = \
 800575e:	f1c7 0224 	rsb	r2, r7, #36	; 0x24
		status =
 8005762:	ab02      	add	r3, sp, #8
 8005764:	fa13 f282 	uxtah	r2, r3, r2
 8005768:	2120      	movs	r1, #32
 800576a:	9800      	ldr	r0, [sp, #0]
 800576c:	f001 f9b5 	bl	8006ada <VL53L1_i2c_encode_static_config>
 8005770:	e7b5      	b.n	80056de <VL53L1_init_and_start_range+0x10e>
		i2c_buffer_offset_bytes =
 8005772:	f1c7 0244 	rsb	r2, r7, #68	; 0x44
		status =
 8005776:	ab02      	add	r3, sp, #8
 8005778:	fa13 f282 	uxtah	r2, r3, r2
 800577c:	2116      	movs	r1, #22
 800577e:	9801      	ldr	r0, [sp, #4]
 8005780:	f001 fa19 	bl	8006bb6 <VL53L1_i2c_encode_general_config>
 8005784:	e7af      	b.n	80056e6 <VL53L1_init_and_start_range+0x116>
		i2c_buffer_offset_bytes = \
 8005786:	f1c7 025a 	rsb	r2, r7, #90	; 0x5a
		status =
 800578a:	ab02      	add	r3, sp, #8
 800578c:	fa13 f282 	uxtah	r2, r3, r2
 8005790:	2117      	movs	r1, #23
 8005792:	4650      	mov	r0, sl
 8005794:	f001 fa54 	bl	8006c40 <VL53L1_i2c_encode_timing_config>
 8005798:	e7a9      	b.n	80056ee <VL53L1_init_and_start_range+0x11e>
		i2c_buffer_offset_bytes = \
 800579a:	f1c7 0283 	rsb	r2, r7, #131	; 0x83
		status =
 800579e:	ab02      	add	r3, sp, #8
 80057a0:	fa13 f282 	uxtah	r2, r3, r2
 80057a4:	2105      	movs	r1, #5
 80057a6:	4640      	mov	r0, r8
 80057a8:	f001 facf 	bl	8006d4a <VL53L1_i2c_encode_system_control>
 80057ac:	e7bb      	b.n	8005726 <VL53L1_init_and_start_range+0x156>
		status =
 80057ae:	462b      	mov	r3, r5
 80057b0:	aa02      	add	r2, sp, #8
 80057b2:	4639      	mov	r1, r7
 80057b4:	4620      	mov	r0, r4
 80057b6:	f00a ff03 	bl	80105c0 <VL53L1_WriteMulti>
 80057ba:	e7b6      	b.n	800572a <VL53L1_init_and_start_range+0x15a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 80057bc:	4620      	mov	r0, r4
 80057be:	f000 fd43 	bl	8006248 <VL53L1_update_ll_driver_rd_state>
 80057c2:	e7b4      	b.n	800572e <VL53L1_init_and_start_range+0x15e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80057c4:	4620      	mov	r0, r4
 80057c6:	f000 fdd0 	bl	800636a <VL53L1_update_ll_driver_cfg_state>
 80057ca:	e7b2      	b.n	8005732 <VL53L1_init_and_start_range+0x162>
 80057cc:	00010100 	.word	0x00010100

080057d0 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV Dev)
{
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4604      	mov	r4, r0
		VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
		(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80057d4:	f990 31cc 	ldrsb.w	r3, [r0, #460]	; 0x1cc
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	pdev->sys_ctrl.system__mode_start =
 80057e0:	f880 31cc 	strb.w	r3, [r0, #460]	; 0x1cc
		VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 80057e4:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
 80057e8:	f001 fac8 	bl	8006d7c <VL53L1_set_system_control>
 80057ec:	4605      	mov	r5, r0
		Dev,
		&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
		(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 80057ee:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
 80057f2:	f003 030f 	and.w	r3, r3, #15
	pdev->sys_ctrl.system__mode_start =
 80057f6:	f884 31cc 	strb.w	r3, [r4, #460]	; 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 80057fa:	2103      	movs	r1, #3
 80057fc:	4620      	mov	r0, r4
 80057fe:	f000 fd10 	bl	8006222 <VL53L1_init_ll_driver_state>
		Dev,
		VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8005802:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 8005806:	2b01      	cmp	r3, #1
 8005808:	d001      	beq.n	800580e <VL53L1_stop_range+0x3e>
		VL53L1_low_power_auto_data_stop_range(Dev);

	return status;
}
 800580a:	4628      	mov	r0, r5
 800580c:	bd38      	pop	{r3, r4, r5, pc}
		VL53L1_low_power_auto_data_stop_range(Dev);
 800580e:	4620      	mov	r0, r4
 8005810:	f000 ffa1 	bl	8006756 <VL53L1_low_power_auto_data_stop_range>
 8005814:	e7f9      	b.n	800580a <VL53L1_stop_range+0x3a>

08005816 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV Dev,
	VL53L1_DeviceResultsLevel device_results_level)
{
 8005816:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005818:	b0c1      	sub	sp, #260	; 0x104
 800581a:	460c      	mov	r4, r1
	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800581c:	f500 75e7 	add.w	r5, r0, #462	; 0x1ce
	VL53L1_core_results_t     *pcore_results = &(pdev->core_results);
 8005820:	f500 7722 	add.w	r7, r0, #648	; 0x288
	VL53L1_debug_results_t    *pdebug_results = &(pdev->dbg_results);
 8005824:	f500 762b 	add.w	r6, r0, #684	; 0x2ac

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 8005828:	2901      	cmp	r1, #1
 800582a:	d010      	beq.n	800584e <VL53L1_get_measurement_results+0x38>
 800582c:	2902      	cmp	r1, #2
 800582e:	d10c      	bne.n	800584a <VL53L1_get_measurement_results+0x34>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8005830:	2386      	movs	r3, #134	; 0x86
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status =
 8005832:	466a      	mov	r2, sp
 8005834:	2188      	movs	r1, #136	; 0x88
 8005836:	f00a fee1 	bl	80105fc <VL53L1_ReadMulti>
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800583a:	2c01      	cmp	r4, #1
 800583c:	d900      	bls.n	8005840 <VL53L1_get_measurement_results+0x2a>
 800583e:	b140      	cbz	r0, 8005852 <VL53L1_get_measurement_results+0x3c>
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8005840:	b104      	cbz	r4, 8005844 <VL53L1_get_measurement_results+0x2e>
 8005842:	b168      	cbz	r0, 8005860 <VL53L1_get_measurement_results+0x4a>
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8005844:	b190      	cbz	r0, 800586c <VL53L1_get_measurement_results+0x56>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005846:	b041      	add	sp, #260	; 0x104
 8005848:	bdf0      	pop	{r4, r5, r6, r7, pc}
		i2c_buffer_size_bytes =
 800584a:	232c      	movs	r3, #44	; 0x2c
		break;
 800584c:	e7f1      	b.n	8005832 <VL53L1_get_measurement_results+0x1c>
		i2c_buffer_size_bytes =
 800584e:	234d      	movs	r3, #77	; 0x4d
 8005850:	e7ef      	b.n	8005832 <VL53L1_get_measurement_results+0x1c>
		status =
 8005852:	4632      	mov	r2, r6
 8005854:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
 8005858:	2038      	movs	r0, #56	; 0x38
 800585a:	f001 fb6e 	bl	8006f3a <VL53L1_i2c_decode_debug_results>
 800585e:	e7ef      	b.n	8005840 <VL53L1_get_measurement_results+0x2a>
		status =
 8005860:	463a      	mov	r2, r7
 8005862:	a90b      	add	r1, sp, #44	; 0x2c
 8005864:	2021      	movs	r0, #33	; 0x21
 8005866:	f001 fb2d 	bl	8006ec4 <VL53L1_i2c_decode_core_results>
 800586a:	e7eb      	b.n	8005844 <VL53L1_get_measurement_results+0x2e>
		status =
 800586c:	462a      	mov	r2, r5
 800586e:	4669      	mov	r1, sp
 8005870:	202c      	movs	r0, #44	; 0x2c
 8005872:	f001 fa98 	bl	8006da6 <VL53L1_i2c_decode_system_results>
 8005876:	e7e6      	b.n	8005846 <VL53L1_get_measurement_results+0x30>

08005878 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV Dev,
	uint8_t measurement_mode)
{
 8005878:	b508      	push	{r3, lr}
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_init_and_start_range(
 800587a:	2203      	movs	r2, #3
 800587c:	f7ff fea8 	bl	80055d0 <VL53L1_init_and_start_range>
			VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
}
 8005880:	bd08      	pop	{r3, pc}

08005882 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8005882:	b470      	push	{r4, r5, r6}

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count = psys->result__stream_count;
 8005884:	78cc      	ldrb	r4, [r1, #3]
 8005886:	709c      	strb	r4, [r3, #2]

	pdata = &(presults->data[0]);
 8005888:	1d1c      	adds	r4, r3, #4

	for (i = 0; i < 2; i++) {
 800588a:	2500      	movs	r5, #0
 800588c:	e02e      	b.n	80058ec <VL53L1_copy_sys_and_core_results_to_range_results+0x6a>
		pdata->time_stamp = 0;

		if ((psys->result__stream_count == 0) &&
		    ((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
		     VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800588e:	2613      	movs	r6, #19
 8005890:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
 8005894:	e03b      	b.n	800590e <VL53L1_copy_sys_and_core_results_to_range_results+0x8c>
		}

		switch (i) {
		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8005896:	788e      	ldrb	r6, [r1, #2]
 8005898:	2e07      	cmp	r6, #7
 800589a:	d061      	beq.n	8005960 <VL53L1_copy_sys_and_core_results_to_range_results+0xde>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800589c:	2e08      	cmp	r6, #8
 800589e:	d062      	beq.n	8005966 <VL53L1_copy_sys_and_core_results_to_range_results+0xe4>
				pdata->actual_effective_spads =
					psys->result__mm_outer_actual_effective_spads_sd0;
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 80058a0:	888e      	ldrh	r6, [r1, #4]
				pdata->actual_effective_spads =
 80058a2:	8226      	strh	r6, [r4, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 80058a4:	8a0e      	ldrh	r6, [r1, #16]
			pdata->peak_signal_count_rate_mcps =
 80058a6:	85a6      	strh	r6, [r4, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 80058a8:	8ace      	ldrh	r6, [r1, #22]
			pdata->avg_signal_count_rate_mcps =
 80058aa:	85e6      	strh	r6, [r4, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 80058ac:	890e      	ldrh	r6, [r1, #8]
			pdata->ambient_count_rate_mcps =
 80058ae:	8626      	strh	r6, [r4, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80058b0:	894e      	ldrh	r6, [r1, #10]
 80058b2:	0176      	lsls	r6, r6, #5
			if (tmpu32 > 0xFFFF) {
 80058b4:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 80058b8:	d301      	bcc.n	80058be <VL53L1_copy_sys_and_core_results_to_range_results+0x3c>
				tmpu32 = 0xFFFF;
 80058ba:	f64f 76ff 	movw	r6, #65535	; 0xffff
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 80058be:	8726      	strh	r6, [r4, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 80058c0:	898e      	ldrh	r6, [r1, #12]
			pdata->median_phase =
 80058c2:	8766      	strh	r6, [r4, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 80058c4:	89ce      	ldrh	r6, [r1, #14]

			/* apply correction gain */
			range_mm *= gain_factor;
 80058c6:	fb00 f606 	mul.w	r6, r0, r6
			range_mm += 0x0400;
			range_mm /= 0x0800;
 80058ca:	f516 6680 	adds.w	r6, r6, #1024	; 0x400
 80058ce:	d44d      	bmi.n	800596c <VL53L1_copy_sys_and_core_results_to_range_results+0xea>

			pdata->median_range_mm = (int16_t)range_mm;
 80058d0:	f346 26cf 	sbfx	r6, r6, #11, #16
 80058d4:	87a6      	strh	r6, [r4, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 80058d6:	6856      	ldr	r6, [r2, #4]
			pdata->ranging_total_events =
 80058d8:	6266      	str	r6, [r4, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 80058da:	6896      	ldr	r6, [r2, #8]
			pdata->signal_total_events =
 80058dc:	62a6      	str	r6, [r4, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 80058de:	68d6      	ldr	r6, [r2, #12]
			pdata->total_periods_elapsed =
 80058e0:	6166      	str	r6, [r4, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 80058e2:	6816      	ldr	r6, [r2, #0]
			pdata->ambient_window_events =
 80058e4:	6226      	str	r6, [r4, #32]
				pcore->result_core__ambient_window_events_sd1;

			break;
		}

		pdata++;
 80058e6:	3440      	adds	r4, #64	; 0x40
	for (i = 0; i < 2; i++) {
 80058e8:	3501      	adds	r5, #1
 80058ea:	b2ed      	uxtb	r5, r5
 80058ec:	2d01      	cmp	r5, #1
 80058ee:	d843      	bhi.n	8005978 <VL53L1_copy_sys_and_core_results_to_range_results+0xf6>
		pdata->range_id = i;
 80058f0:	7025      	strb	r5, [r4, #0]
		pdata->time_stamp = 0;
 80058f2:	2600      	movs	r6, #0
 80058f4:	6066      	str	r6, [r4, #4]
		if ((psys->result__stream_count == 0) &&
 80058f6:	78ce      	ldrb	r6, [r1, #3]
 80058f8:	b926      	cbnz	r6, 8005904 <VL53L1_copy_sys_and_core_results_to_range_results+0x82>
		    ((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 80058fa:	784e      	ldrb	r6, [r1, #1]
		if ((psys->result__stream_count == 0) &&
 80058fc:	f006 061f 	and.w	r6, r6, #31
 8005900:	2e09      	cmp	r6, #9
 8005902:	d0c4      	beq.n	800588e <VL53L1_copy_sys_and_core_results_to_range_results+0xc>
				psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8005904:	784e      	ldrb	r6, [r1, #1]
 8005906:	f006 061f 	and.w	r6, r6, #31
			pdata->range_status =
 800590a:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
		switch (i) {
 800590e:	2d00      	cmp	r5, #0
 8005910:	d0c1      	beq.n	8005896 <VL53L1_copy_sys_and_core_results_to_range_results+0x14>
 8005912:	2d01      	cmp	r5, #1
 8005914:	d1e7      	bne.n	80058e6 <VL53L1_copy_sys_and_core_results_to_range_results+0x64>
				psys->result__dss_actual_effective_spads_sd1;
 8005916:	8b0e      	ldrh	r6, [r1, #24]
			pdata->actual_effective_spads =
 8005918:	8226      	strh	r6, [r4, #16]
				psys->result__peak_signal_count_rate_mcps_sd1;
 800591a:	8b4e      	ldrh	r6, [r1, #26]
			pdata->peak_signal_count_rate_mcps =
 800591c:	85a6      	strh	r6, [r4, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800591e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8005922:	85e6      	strh	r6, [r4, #46]	; 0x2e
				psys->result__ambient_count_rate_mcps_sd1;
 8005924:	8b8e      	ldrh	r6, [r1, #28]
			pdata->ambient_count_rate_mcps =
 8005926:	8626      	strh	r6, [r4, #48]	; 0x30
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8005928:	8bce      	ldrh	r6, [r1, #30]
 800592a:	0176      	lsls	r6, r6, #5
			if (tmpu32 > 0xFFFF) {
 800592c:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8005930:	d301      	bcc.n	8005936 <VL53L1_copy_sys_and_core_results_to_range_results+0xb4>
				tmpu32 = 0xFFFF;
 8005932:	f64f 76ff 	movw	r6, #65535	; 0xffff
			pdata->sigma_mm = (uint16_t)tmpu32;
 8005936:	8726      	strh	r6, [r4, #56]	; 0x38
				psys->result__phase_sd1;
 8005938:	8c0e      	ldrh	r6, [r1, #32]
			pdata->median_phase =
 800593a:	8766      	strh	r6, [r4, #58]	; 0x3a
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800593c:	8c4e      	ldrh	r6, [r1, #34]	; 0x22
			range_mm *= gain_factor;
 800593e:	fb06 f600 	mul.w	r6, r6, r0
			range_mm /= 0x0800;
 8005942:	f516 6680 	adds.w	r6, r6, #1024	; 0x400
 8005946:	d414      	bmi.n	8005972 <VL53L1_copy_sys_and_core_results_to_range_results+0xf0>
			pdata->median_range_mm = (int16_t)range_mm;
 8005948:	f346 26cf 	sbfx	r6, r6, #11, #16
 800594c:	87a6      	strh	r6, [r4, #60]	; 0x3c
				pcore->result_core__ranging_total_events_sd1;
 800594e:	6956      	ldr	r6, [r2, #20]
			pdata->ranging_total_events =
 8005950:	6266      	str	r6, [r4, #36]	; 0x24
				pcore->result_core__signal_total_events_sd1;
 8005952:	6996      	ldr	r6, [r2, #24]
			pdata->signal_total_events =
 8005954:	62a6      	str	r6, [r4, #40]	; 0x28
				pcore->result_core__total_periods_elapsed_sd1;
 8005956:	69d6      	ldr	r6, [r2, #28]
			pdata->total_periods_elapsed =
 8005958:	6166      	str	r6, [r4, #20]
				pcore->result_core__ambient_window_events_sd1;
 800595a:	6916      	ldr	r6, [r2, #16]
			pdata->ambient_window_events =
 800595c:	6226      	str	r6, [r4, #32]
			break;
 800595e:	e7c2      	b.n	80058e6 <VL53L1_copy_sys_and_core_results_to_range_results+0x64>
					psys->result__mm_inner_actual_effective_spads_sd0;
 8005960:	8a4e      	ldrh	r6, [r1, #18]
				pdata->actual_effective_spads =
 8005962:	8226      	strh	r6, [r4, #16]
 8005964:	e79e      	b.n	80058a4 <VL53L1_copy_sys_and_core_results_to_range_results+0x22>
					psys->result__mm_outer_actual_effective_spads_sd0;
 8005966:	8a8e      	ldrh	r6, [r1, #20]
				pdata->actual_effective_spads =
 8005968:	8226      	strh	r6, [r4, #16]
 800596a:	e79b      	b.n	80058a4 <VL53L1_copy_sys_and_core_results_to_range_results+0x22>
			range_mm /= 0x0800;
 800596c:	f206 76ff 	addw	r6, r6, #2047	; 0x7ff
 8005970:	e7ae      	b.n	80058d0 <VL53L1_copy_sys_and_core_results_to_range_results+0x4e>
			range_mm /= 0x0800;
 8005972:	f206 76ff 	addw	r6, r6, #2047	; 0x7ff
 8005976:	e7e7      	b.n	8005948 <VL53L1_copy_sys_and_core_results_to_range_results+0xc6>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8005978:	2200      	movs	r2, #0
 800597a:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800597c:	784a      	ldrb	r2, [r1, #1]
 800597e:	f002 021f 	and.w	r2, r2, #31
 8005982:	1e51      	subs	r1, r2, #1
 8005984:	2910      	cmp	r1, #16
 8005986:	d80e      	bhi.n	80059a6 <VL53L1_copy_sys_and_core_results_to_range_results+0x124>
 8005988:	e8df f001 	tbb	[pc, r1]
 800598c:	0d090909 	.word	0x0d090909
 8005990:	0d0d0d0d 	.word	0x0d0d0d0d
 8005994:	0d0d0d0d 	.word	0x0d0d0d0d
 8005998:	0d0d0d09 	.word	0x0d0d0d09
 800599c:	09          	.byte	0x09
 800599d:	00          	.byte	0x00
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800599e:	70da      	strb	r2, [r3, #3]
					   VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		break;
	}

	LOG_FUNCTION_END(0);
}
 80059a6:	bc70      	pop	{r4, r5, r6}
 80059a8:	4770      	bx	lr

080059aa <VL53L1_get_device_results>:
{
 80059aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ac:	4604      	mov	r4, r0
 80059ae:	4617      	mov	r7, r2
	VL53L1_range_results_t   *presults = &(pres->range_results);
 80059b0:	f500 763d 	add.w	r6, r0, #756	; 0x2f4
		status = VL53L1_get_measurement_results(
 80059b4:	f7ff ff2f 	bl	8005816 <VL53L1_get_measurement_results>
	if (status == VL53L1_ERROR_NONE)
 80059b8:	4605      	mov	r5, r0
 80059ba:	b198      	cbz	r0, 80059e4 <VL53L1_get_device_results+0x3a>
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 80059bc:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d019      	beq.n	80059f8 <VL53L1_get_device_results+0x4e>
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80059c4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80059c8:	f884 32f4 	strb.w	r3, [r4, #756]	; 0x2f4
	presults->rd_device_state = pdev->ll_state.rd_device_state;
 80059cc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80059d0:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
	memcpy(
 80059d4:	2284      	movs	r2, #132	; 0x84
 80059d6:	4631      	mov	r1, r6
 80059d8:	4638      	mov	r0, r7
 80059da:	f019 f9c1 	bl	801ed60 <memcpy>
	if (status == VL53L1_ERROR_NONE)
 80059de:	b35d      	cbz	r5, 8005a38 <VL53L1_get_device_results+0x8e>
}
 80059e0:	4628      	mov	r0, r5
 80059e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		VL53L1_copy_sys_and_core_results_to_range_results(
 80059e4:	4633      	mov	r3, r6
 80059e6:	f504 7222 	add.w	r2, r4, #648	; 0x288
 80059ea:	f504 71e7 	add.w	r1, r4, #462	; 0x1ce
 80059ee:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
 80059f2:	f7ff ff46 	bl	8005882 <VL53L1_copy_sys_and_core_results_to_range_results>
 80059f6:	e7e1      	b.n	80059bc <VL53L1_get_device_results+0x12>
		if ((status == VL53L1_ERROR_NONE) &&
 80059f8:	b915      	cbnz	r5, 8005a00 <VL53L1_get_device_results+0x56>
		    (pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80059fa:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 80059fe:	b17b      	cbz	r3, 8005a20 <VL53L1_get_device_results+0x76>
		} else if ((status == VL53L1_ERROR_NONE) &&
 8005a00:	b91d      	cbnz	r5, 8005a0a <VL53L1_get_device_results+0x60>
			   (pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8005a02:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d012      	beq.n	8005a30 <VL53L1_get_device_results+0x86>
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 8005a0a:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8005a0e:	2bff      	cmp	r3, #255	; 0xff
 8005a10:	d0d8      	beq.n	80059c4 <VL53L1_get_device_results+0x1a>
 8005a12:	2d00      	cmp	r5, #0
 8005a14:	d1d6      	bne.n	80059c4 <VL53L1_get_device_results+0x1a>
			status = VL53L1_low_power_auto_update_DSS(
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 fee3 	bl	80067e2 <VL53L1_low_power_auto_update_DSS>
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	e7d1      	b.n	80059c4 <VL53L1_get_device_results+0x1a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8005a20:	4620      	mov	r0, r4
 8005a22:	f000 febe 	bl	80067a2 <VL53L1_low_power_auto_setup_manual_calibration>
 8005a26:	4605      	mov	r5, r0
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
 8005a2e:	e7ec      	b.n	8005a0a <VL53L1_get_device_results+0x60>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8005a30:	2302      	movs	r3, #2
 8005a32:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
 8005a36:	e7e8      	b.n	8005a0a <VL53L1_get_device_results+0x60>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f000 fc65 	bl	8006308 <VL53L1_check_ll_driver_rd_state>
 8005a3e:	4605      	mov	r5, r0
 8005a40:	e7ce      	b.n	80059e0 <VL53L1_get_device_results+0x36>

08005a42 <VL53L1_get_tuning_parm>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8005a42:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8005a46:	2938      	cmp	r1, #56	; 0x38
 8005a48:	f200 8158 	bhi.w	8005cfc <VL53L1_get_tuning_parm+0x2ba>
 8005a4c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005a50:	003e0039 	.word	0x003e0039
 8005a54:	00480043 	.word	0x00480043
 8005a58:	0052004d 	.word	0x0052004d
 8005a5c:	005c0057 	.word	0x005c0057
 8005a60:	00660061 	.word	0x00660061
 8005a64:	0070006b 	.word	0x0070006b
 8005a68:	007a0075 	.word	0x007a0075
 8005a6c:	0084007f 	.word	0x0084007f
 8005a70:	008e0089 	.word	0x008e0089
 8005a74:	00980093 	.word	0x00980093
 8005a78:	00a2009d 	.word	0x00a2009d
 8005a7c:	00ac00a7 	.word	0x00ac00a7
 8005a80:	00b600b1 	.word	0x00b600b1
 8005a84:	00c000bb 	.word	0x00c000bb
 8005a88:	00ca00c5 	.word	0x00ca00c5
 8005a8c:	00d400cf 	.word	0x00d400cf
 8005a90:	00de00d9 	.word	0x00de00d9
 8005a94:	00e800e3 	.word	0x00e800e3
 8005a98:	00f200ed 	.word	0x00f200ed
 8005a9c:	00fc00f7 	.word	0x00fc00f7
 8005aa0:	01060101 	.word	0x01060101
 8005aa4:	0110010b 	.word	0x0110010b
 8005aa8:	011a0115 	.word	0x011a0115
 8005aac:	0124011f 	.word	0x0124011f
 8005ab0:	012e0129 	.word	0x012e0129
 8005ab4:	01380133 	.word	0x01380133
 8005ab8:	0142013d 	.word	0x0142013d
 8005abc:	014c0147 	.word	0x014c0147
 8005ac0:	0151      	.short	0x0151
	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8005ac2:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
		*ptuning_parm_value =
 8005ac6:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005ac8:	2000      	movs	r0, #0
		break;
 8005aca:	4770      	bx	lr
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8005acc:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
		*ptuning_parm_value =
 8005ad0:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005ad2:	2000      	movs	r0, #0
		break;
 8005ad4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8005ad6:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
		*ptuning_parm_value =
 8005ada:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005adc:	2000      	movs	r0, #0
		break;
 8005ade:	4770      	bx	lr
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8005ae0:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
		*ptuning_parm_value =
 8005ae4:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005ae6:	2000      	movs	r0, #0
		break;
 8005ae8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8005aea:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
		*ptuning_parm_value =
 8005aee:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005af0:	2000      	movs	r0, #0
		break;
 8005af2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8005af4:	f8b0 30b2 	ldrh.w	r3, [r0, #178]	; 0xb2
		*ptuning_parm_value =
 8005af8:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005afa:	2000      	movs	r0, #0
		break;
 8005afc:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8005afe:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
		*ptuning_parm_value =
 8005b02:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b04:	2000      	movs	r0, #0
		break;
 8005b06:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8005b08:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
		*ptuning_parm_value =
 8005b0c:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b0e:	2000      	movs	r0, #0
		break;
 8005b10:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8005b12:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
		*ptuning_parm_value =
 8005b16:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b18:	2000      	movs	r0, #0
		break;
 8005b1a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8005b1c:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
		*ptuning_parm_value =
 8005b20:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b22:	2000      	movs	r0, #0
		break;
 8005b24:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8005b26:	f8b0 30ba 	ldrh.w	r3, [r0, #186]	; 0xba
		*ptuning_parm_value =
 8005b2a:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b2c:	2000      	movs	r0, #0
		break;
 8005b2e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8005b30:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
		*ptuning_parm_value =
 8005b34:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b36:	2000      	movs	r0, #0
		break;
 8005b38:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8005b3a:	f8b0 30be 	ldrh.w	r3, [r0, #190]	; 0xbe
		*ptuning_parm_value =
 8005b3e:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b40:	2000      	movs	r0, #0
		break;
 8005b42:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 8005b44:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
		*ptuning_parm_value =
 8005b48:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b4a:	2000      	movs	r0, #0
		break;
 8005b4c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8005b4e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
		*ptuning_parm_value =
 8005b52:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b54:	2000      	movs	r0, #0
		break;
 8005b56:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8005b58:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
		*ptuning_parm_value =
 8005b5c:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b5e:	2000      	movs	r0, #0
		break;
 8005b60:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8005b62:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
		*ptuning_parm_value =
 8005b66:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b68:	2000      	movs	r0, #0
		break;
 8005b6a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
			(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005b6c:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
		*ptuning_parm_value =
 8005b70:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b72:	2000      	movs	r0, #0
		break;
 8005b74:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8005b76:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
		*ptuning_parm_value =
 8005b7a:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b7c:	2000      	movs	r0, #0
		break;
 8005b7e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005b80:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
		*ptuning_parm_value =
 8005b84:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b86:	2000      	movs	r0, #0
		break;
 8005b88:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005b8a:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
		*ptuning_parm_value =
 8005b8e:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b90:	2000      	movs	r0, #0
		break;
 8005b92:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
			(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8005b94:	f9b0 313e 	ldrsh.w	r3, [r0, #318]	; 0x13e
		*ptuning_parm_value =
 8005b98:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b9a:	2000      	movs	r0, #0
		break;
 8005b9c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8005b9e:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
		*ptuning_parm_value =
 8005ba2:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005ba4:	2000      	movs	r0, #0
		break;
 8005ba6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8005ba8:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
		*ptuning_parm_value =
 8005bac:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005bae:	2000      	movs	r0, #0
		break;
 8005bb0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8005bb2:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
		*ptuning_parm_value =
 8005bb6:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005bb8:	2000      	movs	r0, #0
		break;
 8005bba:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8005bbc:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
		*ptuning_parm_value =
 8005bc0:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005bc2:	2000      	movs	r0, #0
		break;
 8005bc4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8005bc6:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
		*ptuning_parm_value =
 8005bca:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005bcc:	2000      	movs	r0, #0
		break;
 8005bce:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8005bd0:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
		*ptuning_parm_value =
 8005bd4:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005bd6:	2000      	movs	r0, #0
		break;
 8005bd8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8005bda:	f890 30c6 	ldrb.w	r3, [r0, #198]	; 0xc6
		*ptuning_parm_value =
 8005bde:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005be0:	2000      	movs	r0, #0
		break;
 8005be2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
			(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8005be4:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
		*ptuning_parm_value =
 8005be8:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005bea:	2000      	movs	r0, #0
		break;
 8005bec:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.device_test_mode;
 8005bee:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		*ptuning_parm_value =
 8005bf2:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005bf4:	2000      	movs	r0, #0
		break;
 8005bf6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.vcsel_period;
 8005bf8:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
		*ptuning_parm_value =
 8005bfc:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005bfe:	2000      	movs	r0, #0
		break;
 8005c00:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.timeout_us;
 8005c02:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		*ptuning_parm_value =
 8005c06:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c08:	2000      	movs	r0, #0
		break;
 8005c0a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8005c0c:	f8b0 3118 	ldrh.w	r3, [r0, #280]	; 0x118
		*ptuning_parm_value =
 8005c10:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c12:	2000      	movs	r0, #0
		break;
 8005c14:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8005c16:	f8b0 311a 	ldrh.w	r3, [r0, #282]	; 0x11a
		*ptuning_parm_value =
 8005c1a:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c1c:	2000      	movs	r0, #0
		break;
 8005c1e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8005c20:	f8b0 311c 	ldrh.w	r3, [r0, #284]	; 0x11c
		*ptuning_parm_value =
 8005c24:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c26:	2000      	movs	r0, #0
		break;
 8005c28:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8005c2a:	f8b0 3144 	ldrh.w	r3, [r0, #324]	; 0x144
		*ptuning_parm_value =
 8005c2e:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c30:	2000      	movs	r0, #0
		break;
 8005c32:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8005c34:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
		*ptuning_parm_value =
 8005c38:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c3a:	2000      	movs	r0, #0
		break;
 8005c3c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8005c3e:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
		*ptuning_parm_value =
 8005c42:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c44:	2000      	movs	r0, #0
		break;
 8005c46:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8005c48:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
		*ptuning_parm_value =
 8005c4c:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c4e:	2000      	movs	r0, #0
		break;
 8005c50:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8005c52:	f890 3154 	ldrb.w	r3, [r0, #340]	; 0x154
		*ptuning_parm_value =
 8005c56:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c58:	2000      	movs	r0, #0
		break;
 8005c5a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8005c5c:	f890 3155 	ldrb.w	r3, [r0, #341]	; 0x155
		*ptuning_parm_value =
 8005c60:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c62:	2000      	movs	r0, #0
		break;
 8005c64:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8005c66:	f890 3156 	ldrb.w	r3, [r0, #342]	; 0x156
		*ptuning_parm_value =
 8005c6a:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c6c:	2000      	movs	r0, #0
		break;
 8005c6e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
			(int32_t)pdev->ssc_cfg.vcsel_period;
 8005c70:	f890 3121 	ldrb.w	r3, [r0, #289]	; 0x121
		*ptuning_parm_value =
 8005c74:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c76:	2000      	movs	r0, #0
		break;
 8005c78:	4770      	bx	lr
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
			(int32_t)pdev->ssc_cfg.vcsel_start;
 8005c7a:	f890 3122 	ldrb.w	r3, [r0, #290]	; 0x122
		*ptuning_parm_value =
 8005c7e:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c80:	2000      	movs	r0, #0
		break;
 8005c82:	4770      	bx	lr
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8005c84:	f8b0 3128 	ldrh.w	r3, [r0, #296]	; 0x128
		*ptuning_parm_value =
 8005c88:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c8a:	2000      	movs	r0, #0
		break;
 8005c8c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8005c8e:	f8b0 30ca 	ldrh.w	r3, [r0, #202]	; 0xca
		*ptuning_parm_value =
 8005c92:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c94:	2000      	movs	r0, #0
		break;
 8005c96:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005c98:	f8b0 30cc 	ldrh.w	r3, [r0, #204]	; 0xcc
		*ptuning_parm_value =
 8005c9c:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c9e:	2000      	movs	r0, #0
		break;
 8005ca0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8005ca2:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
		*ptuning_parm_value =
 8005ca6:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005ca8:	2000      	movs	r0, #0
		break;
 8005caa:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005cac:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
		*ptuning_parm_value =
 8005cb0:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005cb2:	2000      	movs	r0, #0
		break;
 8005cb4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8005cb6:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
		*ptuning_parm_value =
 8005cba:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005cbc:	2000      	movs	r0, #0
		break;
 8005cbe:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8005cc0:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
		*ptuning_parm_value =
 8005cc4:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005cc6:	2000      	movs	r0, #0
		break;
 8005cc8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8005cca:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
		*ptuning_parm_value =
 8005cce:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005cd0:	2000      	movs	r0, #0
		break;
 8005cd2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8005cd4:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
		*ptuning_parm_value =
 8005cd8:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005cda:	2000      	movs	r0, #0
		break;
 8005cdc:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
			(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8005cde:	f890 32e4 	ldrb.w	r3, [r0, #740]	; 0x2e4
		*ptuning_parm_value =
 8005ce2:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005ce4:	2000      	movs	r0, #0
		break;
 8005ce6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8005ce8:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
		*ptuning_parm_value =
 8005cec:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005cee:	2000      	movs	r0, #0
		break;
 8005cf0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8005cf2:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
		*ptuning_parm_value =
 8005cf6:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005cf8:	2000      	movs	r0, #0
		break;
 8005cfa:	4770      	bx	lr


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8005cfc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005d00:	6013      	str	r3, [r2, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005d02:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005d06:	4770      	bx	lr

08005d08 <VL53L1_init_refspadchar_config_struct>:
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 8005d08:	2308      	movs	r3, #8
 8005d0a:	7003      	strb	r3, [r0, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period =
 8005d0c:	230b      	movs	r3, #11
 8005d0e:	7043      	strb	r3, [r0, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us =
 8005d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d14:	6043      	str	r3, [r0, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps =
 8005d16:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005d1a:	8103      	strh	r3, [r0, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8005d1c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8005d20:	8143      	strh	r3, [r0, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8005d22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005d26:	8183      	strh	r3, [r0, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8005d28:	2000      	movs	r0, #0
 8005d2a:	4770      	bx	lr

08005d2c <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8005d2c:	4603      	mov	r3, r0
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8005d2e:	2000      	movs	r0, #0
 8005d30:	7018      	strb	r0, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8005d32:	2212      	movs	r2, #18
 8005d34:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start =
 8005d36:	220f      	movs	r2, #15
 8005d38:	709a      	strb	r2, [r3, #2]
		VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width = 0x02;
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us = 36000;
 8005d3e:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8005d42:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8005d44:	220c      	movs	r2, #12
 8005d46:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8005d48:	4770      	bx	lr

08005d4a <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8005d4a:	b570      	push	{r4, r5, r6, lr}
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8005d4c:	8944      	ldrh	r4, [r0, #10]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8005d4e:	600c      	str	r4, [r1, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005d50:	f9b0 500c 	ldrsh.w	r5, [r0, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8005d54:	808d      	strh	r5, [r1, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8005d56:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8005d5a:	80ca      	strh	r2, [r1, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8005d5c:	8943      	ldrh	r3, [r0, #10]
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps =
 8005d5e:	608b      	str	r3, [r1, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005d60:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps =
 8005d64:	818b      	strh	r3, [r1, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8005d66:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps =
 8005d6a:	81cb      	strh	r3, [r1, #14]

	pdata->lite_mode_crosstalk_margin_kcps =
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	824b      	strh	r3, [r1, #18]
		VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8005d70:	2340      	movs	r3, #64	; 0x40
 8005d72:	750b      	strb	r3, [r1, #20]
		VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8005d74:	b91c      	cbnz	r4, 8005d7e <VL53L1_init_xtalk_config_struct+0x34>
	    && (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
	    && (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8005d76:	684b      	ldr	r3, [r1, #4]
 8005d78:	b90b      	cbnz	r3, 8005d7e <VL53L1_init_xtalk_config_struct+0x34>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8005d7a:	740b      	strb	r3, [r1, #16]
 8005d7c:	e001      	b.n	8005d82 <VL53L1_init_xtalk_config_struct+0x38>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	740b      	strb	r3, [r1, #16]


	if ((status == VL53L1_ERROR_NONE) &&
	    (pdata->global_crosstalk_compensation_enable == 0x01)) {
 8005d82:	7c0b      	ldrb	r3, [r1, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d003      	beq.n	8005d90 <VL53L1_init_xtalk_config_struct+0x46>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	82cb      	strh	r3, [r1, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
 8005d90:	460e      	mov	r6, r1
			VL53L1_calc_range_ignore_threshold(
 8005d92:	2340      	movs	r3, #64	; 0x40
 8005d94:	4629      	mov	r1, r5
 8005d96:	4620      	mov	r0, r4
 8005d98:	f000 fc06 	bl	80065a8 <VL53L1_calc_range_ignore_threshold>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8005d9c:	82f0      	strh	r0, [r6, #22]
 8005d9e:	e7f5      	b.n	8005d8c <VL53L1_init_xtalk_config_struct+0x42>

08005da0 <VL53L1_init_offset_cal_config_struct>:

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps =
 8005da0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005da4:	8003      	strh	r3, [r0, #0]
		VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us =
 8005da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005daa:	6043      	str	r3, [r0, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us =
 8005dac:	f243 23c8 	movw	r3, #13000	; 0x32c8
 8005db0:	6083      	str	r3, [r0, #8]
		VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us =
 8005db2:	60c3      	str	r3, [r0, #12]
		VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples =
 8005db4:	2308      	movs	r3, #8
 8005db6:	7403      	strb	r3, [r0, #16]
		VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples =
 8005db8:	2328      	movs	r3, #40	; 0x28
 8005dba:	7443      	strb	r3, [r0, #17]
		VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples =
 8005dbc:	2309      	movs	r3, #9
 8005dbe:	7483      	strb	r3, [r0, #18]
		VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	4770      	bx	lr

08005dc4 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8005dc4:	4603      	mov	r3, r0
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version =
 8005dc6:	f248 0203 	movw	r2, #32771	; 0x8003
 8005dca:	8002      	strh	r2, [r0, #0]
		VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version =
 8005dcc:	f248 0201 	movw	r2, #32769	; 0x8001
 8005dd0:	8042      	strh	r2, [r0, #2]
		VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version =
 8005dd2:	f248 0241 	movw	r2, #32833	; 0x8041
 8005dd6:	8082      	strh	r2, [r0, #4]
		VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long =
 8005dd8:	200e      	movs	r0, #14
 8005dda:	7198      	strb	r0, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med =
 8005ddc:	210a      	movs	r1, #10
 8005dde:	71d9      	strb	r1, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short =
 8005de0:	2206      	movs	r2, #6
 8005de2:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long =
 8005de4:	7258      	strb	r0, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med =
 8005de6:	7299      	strb	r1, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short =
 8005de8:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8005dea:	2102      	movs	r1, #2
 8005dec:	7319      	strb	r1, [r3, #12]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target =
 8005dee:	2221      	movs	r2, #33	; 0x21
 8005df0:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate =
 8005df2:	2000      	movs	r0, #0
 8005df4:	81d8      	strh	r0, [r3, #14]
		VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip =
 8005df6:	7418      	strb	r0, [r3, #16]
		VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm =
 8005df8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8005dfc:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm =
 8005dfe:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm =
 8005e00:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps =
 8005e02:	22c0      	movs	r2, #192	; 0xc0
 8005e04:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps =
 8005e06:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8005e08:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns =
 8005e0a:	2208      	movs	r2, #8
 8005e0c:	779a      	strb	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns =
 8005e0e:	2210      	movs	r2, #16
 8005e10:	77da      	strb	r2, [r3, #31]
		VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm =
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2020 	strb.w	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg =
 8005e18:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
		VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg =
 8005e1c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier =
 8005e20:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select =
 8005e24:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
		VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps =
 8005e28:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8005e2c:	84d9      	strh	r1, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps =
 8005e2e:	8519      	strh	r1, [r3, #40]	; 0x28
		VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us =
 8005e30:	f248 0130 	movw	r1, #32816	; 0x8030
 8005e34:	62d9      	str	r1, [r3, #44]	; 0x2c
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us =
 8005e36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e3a:	6319      	str	r1, [r3, #48]	; 0x30
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us =
 8005e3c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005e40:	6359      	str	r1, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us =
 8005e42:	6399      	str	r1, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us =
 8005e44:	f24f 6118 	movw	r1, #63000	; 0xf618
 8005e48:	6419      	str	r1, [r3, #64]	; 0x40
		VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us =
 8005e4a:	f243 21c8 	movw	r1, #13000	; 0x32c8
 8005e4e:	6459      	str	r1, [r3, #68]	; 0x44
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8005e50:	63da      	str	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8005e52:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005e56:	649a      	str	r2, [r3, #72]	; 0x48


	LOG_FUNCTION_END(status);

	return status;
}
 8005e58:	4770      	bx	lr

08005e5a <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005e5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e5e:	4604      	mov	r4, r0
 8005e60:	9f08      	ldr	r7, [sp, #32]
 8005e62:	9d09      	ldr	r5, [sp, #36]	; 0x24
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8005e64:	f44f 6020 	mov.w	r0, #2560	; 0xa00
 8005e68:	8020      	strh	r0, [r4, #0]
	pstatic->debug__ctrl = 0x00;
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	70a0      	strb	r0, [r4, #2]
	pstatic->test_mode__ctrl = 0x00;
 8005e6e:	70e0      	strb	r0, [r4, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8005e70:	7120      	strb	r0, [r4, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8005e72:	7160      	strb	r0, [r4, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8005e74:	71a0      	strb	r0, [r4, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8005e76:	71e0      	strb	r0, [r4, #7]
	pstatic->host_if__status = 0x00;
 8005e78:	7220      	strb	r0, [r4, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8005e7a:	7260      	strb	r0, [r4, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8005e7c:	72a0      	strb	r0, [r4, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl = 0x00;
 8005e7e:	72e0      	strb	r0, [r4, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl = \
 8005e80:	2611      	movs	r6, #17
 8005e82:	7326      	strb	r6, [r4, #12]
		VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
		VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8005e84:	f04f 0e02 	mov.w	lr, #2
 8005e88:	f884 e00d 	strb.w	lr, [r4, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8005e8c:	73a0      	strb	r0, [r4, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8005e8e:	f884 e00f 	strb.w	lr, [r4, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8005e92:	f04f 0808 	mov.w	r8, #8
 8005e96:	f884 8010 	strb.w	r8, [r4, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8005e9a:	7460      	strb	r0, [r4, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns =
		ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8005e9c:	7fae      	ldrb	r6, [r5, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8005e9e:	74a6      	strb	r6, [r4, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
		ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8005ea0:	7fee      	ldrb	r6, [r5, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8005ea2:	74e6      	strb	r6, [r4, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
		ptuning_parms->tp_lite_sigma_ref_mm;
 8005ea4:	f895 6020 	ldrb.w	r6, [r5, #32]
	pstatic->sigma_estimator__sigma_ref_mm =
 8005ea8:	7526      	strb	r6, [r4, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8005eaa:	2601      	movs	r6, #1
 8005eac:	7566      	strb	r6, [r4, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8005eae:	75a0      	strb	r0, [r4, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8005eb0:	75e0      	strb	r0, [r4, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8005eb2:	8320      	strh	r0, [r4, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8005eb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005eb8:	f884 c01a 	strb.w	ip, [r4, #26]
	pstatic->algo__range_min_clip =
		ptuning_parms->tp_lite_min_clip;
 8005ebc:	f895 9010 	ldrb.w	r9, [r5, #16]
	pstatic->algo__range_min_clip =
 8005ec0:	f884 901b 	strb.w	r9, [r4, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance =
		ptuning_parms->tp_consistency_lite_phase_tolerance;
 8005ec4:	f895 900c 	ldrb.w	r9, [r5, #12]
	pstatic->algo__consistency_check__tolerance =
 8005ec8:	f884 901c 	strb.w	r9, [r4, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8005ecc:	7760      	strb	r0, [r4, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8005ece:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8005ed0:	77e0      	strb	r0, [r4, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8005ed2:	7008      	strb	r0, [r1, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8005ed4:	7048      	strb	r0, [r1, #1]
	pgeneral->system__interrupt_config_gpio =
 8005ed6:	f04f 0920 	mov.w	r9, #32
 8005eda:	f881 9002 	strb.w	r9, [r1, #2]
		VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8005ede:	240b      	movs	r4, #11
 8005ee0:	70cc      	strb	r4, [r1, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate =
		ptuning_parms->tp_cal_repeat_rate;
 8005ee2:	f8b5 a00e 	ldrh.w	sl, [r5, #14]
	pgeneral->cal_config__repeat_rate =
 8005ee6:	f8a1 a004 	strh.w	sl, [r1, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8005eea:	f881 e006 	strb.w	lr, [r1, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8005eee:	f04f 0a0d 	mov.w	sl, #13
 8005ef2:	f881 a007 	strb.w	sl, [r1, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target =
		ptuning_parms->tp_phasecal_target;
 8005ef6:	f895 a00d 	ldrb.w	sl, [r5, #13]
	pgeneral->phasecal_config__target =
 8005efa:	f881 a008 	strb.w	sl, [r1, #8]
	pgeneral->phasecal_config__override = 0x00;
 8005efe:	7248      	strb	r0, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 8005f00:	728e      	strb	r6, [r1, #10]
		VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high = 0x0000;
 8005f02:	8188      	strh	r0, [r1, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8005f04:	81c8      	strh	r0, [r1, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8005f06:	f44f 4a0c 	mov.w	sl, #35840	; 0x8c00
 8005f0a:	f8a1 a010 	strh.w	sl, [r1, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8005f0e:	7488      	strb	r0, [r1, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation = 0x38;
 8005f10:	f04f 0a38 	mov.w	sl, #56	; 0x38
 8005f14:	f881 a013 	strb.w	sl, [r1, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8005f18:	f881 c014 	strb.w	ip, [r1, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8005f1c:	754e      	strb	r6, [r1, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8005f1e:	7010      	strb	r0, [r2, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8005f20:	211a      	movs	r1, #26
 8005f22:	7051      	strb	r1, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8005f24:	7090      	strb	r0, [r2, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8005f26:	f882 9003 	strb.w	r9, [r2, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8005f2a:	7116      	strb	r6, [r2, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8005f2c:	21cc      	movs	r1, #204	; 0xcc
 8005f2e:	7151      	strb	r1, [r2, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a = 0x0B;
 8005f30:	7194      	strb	r4, [r2, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8005f32:	71d6      	strb	r6, [r2, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8005f34:	21f5      	movs	r1, #245	; 0xf5
 8005f36:	7211      	strb	r1, [r2, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b = 0x09;
 8005f38:	2109      	movs	r1, #9
 8005f3a:	7251      	strb	r1, [r2, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh =
		ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8005f3c:	f8b5 9014 	ldrh.w	r9, [r5, #20]
	ptiming->range_config__sigma_thresh =
 8005f40:	f8a2 900a 	strh.w	r9, [r2, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8005f44:	f8b5 901a 	ldrh.w	r9, [r5, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8005f48:	f8a2 900c 	strh.w	r9, [r2, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low = 0x08;
 8005f4c:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8005f50:	f04f 0878 	mov.w	r8, #120	; 0x78
 8005f54:	f882 800f 	strb.w	r8, [r2, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8005f58:	6110      	str	r0, [r2, #16]
	ptiming->system__fractional_enable = 0x00;
 8005f5a:	7510      	strb	r0, [r2, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8005f5c:	701e      	strb	r6, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8005f5e:	8058      	strh	r0, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8005f60:	8098      	strh	r0, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8005f62:	7198      	strb	r0, [r3, #6]
	pdynamic->system__seed_config =
		ptuning_parms->tp_lite_seed_cfg;
 8005f64:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	pdynamic->system__seed_config =
 8005f68:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0 = 0x0B;
 8005f6a:	721c      	strb	r4, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1 = 0x09;
 8005f6c:	7259      	strb	r1, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0 =
		ptuning_parms->tp_init_phase_rtn_lite_med;
 8005f6e:	79ea      	ldrb	r2, [r5, #7]
	pdynamic->sd_config__initial_phase_sd0 =
 8005f70:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1 =
		ptuning_parms->tp_init_phase_ref_lite_med;;
 8005f72:	7aaa      	ldrb	r2, [r5, #10]
	pdynamic->sd_config__initial_phase_sd1 =
 8005f74:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8005f76:	731e      	strb	r6, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
		ptuning_parms->tp_lite_first_order_select;
 8005f78:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 8005f7c:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier =
		ptuning_parms->tp_lite_quantifier;
 8005f7e:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
	pdynamic->sd_config__quantifier =
 8005f82:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8005f84:	22c7      	movs	r2, #199	; 0xc7
 8005f86:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8005f88:	f883 c010 	strb.w	ip, [r3, #16]


	pdynamic->system__sequence_config = \
 8005f8c:	22db      	movs	r2, #219	; 0xdb
 8005f8e:	745a      	strb	r2, [r3, #17]
		VL53L1_SEQUENCE_DSS1_EN | \
		VL53L1_SEQUENCE_DSS2_EN | \
		VL53L1_SEQUENCE_MM2_EN | \
		VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8005f90:	f883 e012 	strb.w	lr, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl = 0x00;
 8005f94:	7078      	strb	r0, [r7, #1]
	psystem->firmware__enable = 0x01;
 8005f96:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear = \
 8005f98:	70fe      	strb	r6, [r7, #3]
		VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start = \
 8005f9a:	2321      	movs	r3, #33	; 0x21
 8005f9c:	713b      	strb	r3, [r7, #4]
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
}
 8005f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005fa2 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	4614      	mov	r4, r2
 8005fa8:	461e      	mov	r6, r3
 8005faa:	9d09      	ldr	r5, [sp, #36]	; 0x24

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8005fac:	9501      	str	r5, [sp, #4]
 8005fae:	9f08      	ldr	r7, [sp, #32]
 8005fb0:	9700      	str	r7, [sp, #0]
 8005fb2:	f7ff ff52 	bl	8005e5a <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	b988      	cbnz	r0, 8005fde <VL53L1_preset_mode_standard_ranging_short_range+0x3c>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a = 0x07;
 8005fba:	2107      	movs	r1, #7
 8005fbc:	71a1      	strb	r1, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8005fbe:	2205      	movs	r2, #5
 8005fc0:	7262      	strb	r2, [r4, #9]
		ptiming->range_config__sigma_thresh =
			ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8005fc2:	8ae8      	ldrh	r0, [r5, #22]
		ptiming->range_config__sigma_thresh =
 8005fc4:	8160      	strh	r0, [r4, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8005fc6:	8ba8      	ldrh	r0, [r5, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8005fc8:	81a0      	strh	r0, [r4, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8005fca:	2008      	movs	r0, #8
 8005fcc:	73a0      	strb	r0, [r4, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 8005fce:	2038      	movs	r0, #56	; 0x38
 8005fd0:	73e0      	strb	r0, [r4, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0 = 0x07;
 8005fd2:	7231      	strb	r1, [r6, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8005fd4:	7272      	strb	r2, [r6, #9]
		pdynamic->sd_config__initial_phase_sd0 =
			ptuning_parms->tp_init_phase_rtn_lite_short;
 8005fd6:	7a2a      	ldrb	r2, [r5, #8]
		pdynamic->sd_config__initial_phase_sd0 =
 8005fd8:	72b2      	strb	r2, [r6, #10]
		pdynamic->sd_config__initial_phase_sd1 =
			ptuning_parms->tp_init_phase_ref_lite_short;
 8005fda:	7aea      	ldrb	r2, [r5, #11]
		pdynamic->sd_config__initial_phase_sd1 =
 8005fdc:	72f2      	strb	r2, [r6, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	b003      	add	sp, #12
 8005fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fe4 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	4614      	mov	r4, r2
 8005fea:	461e      	mov	r6, r3
 8005fec:	9d09      	ldr	r5, [sp, #36]	; 0x24

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8005fee:	9501      	str	r5, [sp, #4]
 8005ff0:	9f08      	ldr	r7, [sp, #32]
 8005ff2:	9700      	str	r7, [sp, #0]
 8005ff4:	f7ff ff31 	bl	8005e5a <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	b988      	cbnz	r0, 8006020 <VL53L1_preset_mode_standard_ranging_long_range+0x3c>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a = 0x0F;
 8005ffc:	210f      	movs	r1, #15
 8005ffe:	71a1      	strb	r1, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8006000:	220d      	movs	r2, #13
 8006002:	7262      	strb	r2, [r4, #9]
		ptiming->range_config__sigma_thresh =
			ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8006004:	8a68      	ldrh	r0, [r5, #18]
		ptiming->range_config__sigma_thresh =
 8006006:	8160      	strh	r0, [r4, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8006008:	8b28      	ldrh	r0, [r5, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800600a:	81a0      	strh	r0, [r4, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 800600c:	2008      	movs	r0, #8
 800600e:	73a0      	strb	r0, [r4, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8006010:	20b8      	movs	r0, #184	; 0xb8
 8006012:	73e0      	strb	r0, [r4, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0 = 0x0F;
 8006014:	7231      	strb	r1, [r6, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 8006016:	7272      	strb	r2, [r6, #9]
		pdynamic->sd_config__initial_phase_sd0 =
			ptuning_parms->tp_init_phase_rtn_lite_long;
 8006018:	79aa      	ldrb	r2, [r5, #6]
		pdynamic->sd_config__initial_phase_sd0 =
 800601a:	72b2      	strb	r2, [r6, #10]
		pdynamic->sd_config__initial_phase_sd1 =
			ptuning_parms->tp_init_phase_ref_lite_long;
 800601c:	7a6a      	ldrb	r2, [r5, #9]
		pdynamic->sd_config__initial_phase_sd1 =
 800601e:	72f2      	strb	r2, [r6, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8006020:	4618      	mov	r0, r3
 8006022:	b003      	add	sp, #12
 8006024:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006026 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006026:	b570      	push	{r4, r5, r6, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	460e      	mov	r6, r1
 800602c:	461d      	mov	r5, r3

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800602e:	9c07      	ldr	r4, [sp, #28]
 8006030:	9401      	str	r4, [sp, #4]
 8006032:	9c06      	ldr	r4, [sp, #24]
 8006034:	9400      	str	r4, [sp, #0]
 8006036:	f7ff ff10 	bl	8005e5a <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800603a:	4603      	mov	r3, r0
 800603c:	b918      	cbnz	r0, 8006046 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x20>
		pgeneral->dss_config__roi_mode_control =
 800603e:	2202      	movs	r2, #2
 8006040:	72b2      	strb	r2, [r6, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config = \
 8006042:	223b      	movs	r2, #59	; 0x3b
 8006044:	746a      	strb	r2, [r5, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8006046:	4618      	mov	r0, r3
 8006048:	b002      	add	sp, #8
 800604a:	bd70      	pop	{r4, r5, r6, pc}

0800604c <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	460e      	mov	r6, r1
 8006052:	461d      	mov	r5, r3

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8006054:	9c07      	ldr	r4, [sp, #28]
 8006056:	9401      	str	r4, [sp, #4]
 8006058:	9c06      	ldr	r4, [sp, #24]
 800605a:	9400      	str	r4, [sp, #0]
 800605c:	f7ff fefd 	bl	8005e5a <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006060:	4603      	mov	r3, r0
 8006062:	b918      	cbnz	r0, 800606c <VL53L1_preset_mode_standard_ranging_mm2_cal+0x20>
		pgeneral->dss_config__roi_mode_control =
 8006064:	2202      	movs	r2, #2
 8006066:	72b2      	strb	r2, [r6, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config = \
 8006068:	225b      	movs	r2, #91	; 0x5b
 800606a:	746a      	strb	r2, [r5, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800606c:	4618      	mov	r0, r3
 800606e:	b002      	add	sp, #8
 8006070:	bd70      	pop	{r4, r5, r6, pc}

08006072 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006072:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006074:	b083      	sub	sp, #12
 8006076:	4614      	mov	r4, r2
 8006078:	461f      	mov	r7, r3
 800607a:	9d08      	ldr	r5, [sp, #32]
 800607c:	9e09      	ldr	r6, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800607e:	9601      	str	r6, [sp, #4]
 8006080:	9500      	str	r5, [sp, #0]
 8006082:	f7ff feea 	bl	8005e5a <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006086:	4602      	mov	r2, r0
 8006088:	b978      	cbnz	r0, 80060aa <VL53L1_preset_mode_timed_ranging+0x38>
		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800608a:	2300      	movs	r3, #0
 800608c:	74bb      	strb	r3, [r7, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800608e:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8006090:	21b1      	movs	r1, #177	; 0xb1
 8006092:	7161      	strb	r1, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8006094:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8006096:	23d4      	movs	r3, #212	; 0xd4
 8006098:	7223      	strb	r3, [r4, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800609a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800609e:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
			ptuning_parms->tp_timed_seed_cfg;
 80060a0:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		pdynamic->system__seed_config =
 80060a4:	71fb      	strb	r3, [r7, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80060a6:	2340      	movs	r3, #64	; 0x40
 80060a8:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80060aa:	4610      	mov	r0, r2
 80060ac:	b003      	add	sp, #12
 80060ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060b0 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80060b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060b2:	b083      	sub	sp, #12
 80060b4:	4614      	mov	r4, r2
 80060b6:	461f      	mov	r7, r3
 80060b8:	9d08      	ldr	r5, [sp, #32]
 80060ba:	9e09      	ldr	r6, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 80060bc:	9601      	str	r6, [sp, #4]
 80060be:	9500      	str	r5, [sp, #0]
 80060c0:	f7ff ff6f 	bl	8005fa2 <VL53L1_preset_mode_standard_ranging_short_range>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80060c4:	4603      	mov	r3, r0
 80060c6:	b980      	cbnz	r0, 80060ea <VL53L1_preset_mode_timed_ranging_short_range+0x3a>
		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80060c8:	2200      	movs	r2, #0
 80060ca:	74ba      	strb	r2, [r7, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 80060cc:	2201      	movs	r2, #1
 80060ce:	7122      	strb	r2, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 80060d0:	2184      	movs	r1, #132	; 0x84
 80060d2:	7161      	strb	r1, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 80060d4:	71e2      	strb	r2, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 80060d6:	22b1      	movs	r2, #177	; 0xb1
 80060d8:	7222      	strb	r2, [r4, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 80060da:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80060de:	6122      	str	r2, [r4, #16]
		pdynamic->system__seed_config =
			ptuning_parms->tp_timed_seed_cfg;
 80060e0:	f896 2022 	ldrb.w	r2, [r6, #34]	; 0x22
		pdynamic->system__seed_config =
 80060e4:	71fa      	strb	r2, [r7, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80060e6:	2240      	movs	r2, #64	; 0x40
 80060e8:	712a      	strb	r2, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	b003      	add	sp, #12
 80060ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060f0 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80060f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060f2:	b083      	sub	sp, #12
 80060f4:	4614      	mov	r4, r2
 80060f6:	461f      	mov	r7, r3
 80060f8:	9d08      	ldr	r5, [sp, #32]
 80060fa:	9e09      	ldr	r6, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 80060fc:	9601      	str	r6, [sp, #4]
 80060fe:	9500      	str	r5, [sp, #0]
 8006100:	f7ff ff70 	bl	8005fe4 <VL53L1_preset_mode_standard_ranging_long_range>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006104:	4602      	mov	r2, r0
 8006106:	b978      	cbnz	r0, 8006128 <VL53L1_preset_mode_timed_ranging_long_range+0x38>
		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8006108:	2300      	movs	r3, #0
 800610a:	74bb      	strb	r3, [r7, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800610c:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 800610e:	2197      	movs	r1, #151	; 0x97
 8006110:	7161      	strb	r1, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8006112:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8006114:	23b1      	movs	r3, #177	; 0xb1
 8006116:	7223      	strb	r3, [r4, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8006118:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800611c:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
			ptuning_parms->tp_timed_seed_cfg;
 800611e:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		pdynamic->system__seed_config =
 8006122:	71fb      	strb	r3, [r7, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8006124:	2340      	movs	r3, #64	; 0x40
 8006126:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8006128:	4610      	mov	r0, r2
 800612a:	b003      	add	sp, #12
 800612c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800612e <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800612e:	b570      	push	{r4, r5, r6, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	460d      	mov	r5, r1
 8006134:	461e      	mov	r6, r3

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 8006136:	9c07      	ldr	r4, [sp, #28]
 8006138:	9401      	str	r4, [sp, #4]
 800613a:	9c06      	ldr	r4, [sp, #24]
 800613c:	9400      	str	r4, [sp, #0]
 800613e:	f7ff ff98 	bl	8006072 <VL53L1_preset_mode_timed_ranging>
		psystem,
		ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8006142:	4603      	mov	r3, r0
 8006144:	b110      	cbz	r0, 800614c <VL53L1_preset_mode_low_power_auto_ranging+0x1e>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8006146:	4618      	mov	r0, r3
 8006148:	b002      	add	sp, #8
 800614a:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L1_config_low_power_auto_mode(
 800614c:	9a08      	ldr	r2, [sp, #32]
 800614e:	4631      	mov	r1, r6
 8006150:	4628      	mov	r0, r5
 8006152:	f000 fb19 	bl	8006788 <VL53L1_config_low_power_auto_mode>
 8006156:	4603      	mov	r3, r0
 8006158:	e7f5      	b.n	8006146 <VL53L1_preset_mode_low_power_auto_ranging+0x18>

0800615a <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800615a:	b570      	push	{r4, r5, r6, lr}
 800615c:	b082      	sub	sp, #8
 800615e:	460d      	mov	r5, r1
 8006160:	461e      	mov	r6, r3

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8006162:	9c07      	ldr	r4, [sp, #28]
 8006164:	9401      	str	r4, [sp, #4]
 8006166:	9c06      	ldr	r4, [sp, #24]
 8006168:	9400      	str	r4, [sp, #0]
 800616a:	f7ff ffa1 	bl	80060b0 <VL53L1_preset_mode_timed_ranging_short_range>
		psystem,
		ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800616e:	4603      	mov	r3, r0
 8006170:	b110      	cbz	r0, 8006178 <VL53L1_preset_mode_low_power_auto_short_ranging+0x1e>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8006172:	4618      	mov	r0, r3
 8006174:	b002      	add	sp, #8
 8006176:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L1_config_low_power_auto_mode(
 8006178:	9a08      	ldr	r2, [sp, #32]
 800617a:	4631      	mov	r1, r6
 800617c:	4628      	mov	r0, r5
 800617e:	f000 fb03 	bl	8006788 <VL53L1_config_low_power_auto_mode>
 8006182:	4603      	mov	r3, r0
 8006184:	e7f5      	b.n	8006172 <VL53L1_preset_mode_low_power_auto_short_ranging+0x18>

08006186 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8006186:	b570      	push	{r4, r5, r6, lr}
 8006188:	b082      	sub	sp, #8
 800618a:	460d      	mov	r5, r1
 800618c:	461e      	mov	r6, r3

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800618e:	9c07      	ldr	r4, [sp, #28]
 8006190:	9401      	str	r4, [sp, #4]
 8006192:	9c06      	ldr	r4, [sp, #24]
 8006194:	9400      	str	r4, [sp, #0]
 8006196:	f7ff ffab 	bl	80060f0 <VL53L1_preset_mode_timed_ranging_long_range>
		psystem,
		ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800619a:	4603      	mov	r3, r0
 800619c:	b110      	cbz	r0, 80061a4 <VL53L1_preset_mode_low_power_auto_long_ranging+0x1e>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800619e:	4618      	mov	r0, r3
 80061a0:	b002      	add	sp, #8
 80061a2:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L1_config_low_power_auto_mode(
 80061a4:	9a08      	ldr	r2, [sp, #32]
 80061a6:	4631      	mov	r1, r6
 80061a8:	4628      	mov	r0, r5
 80061aa:	f000 faed 	bl	8006788 <VL53L1_config_low_power_auto_mode>
 80061ae:	4603      	mov	r3, r0
 80061b0:	e7f5      	b.n	800619e <VL53L1_preset_mode_low_power_auto_long_ranging+0x18>

080061b2 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80061b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061b4:	b083      	sub	sp, #12
 80061b6:	4614      	mov	r4, r2
 80061b8:	461f      	mov	r7, r3
 80061ba:	9d08      	ldr	r5, [sp, #32]
 80061bc:	9e09      	ldr	r6, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 80061be:	9601      	str	r6, [sp, #4]
 80061c0:	9500      	str	r5, [sp, #0]
 80061c2:	f7ff fe4a 	bl	8005e5a <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80061c6:	4602      	mov	r2, r0
 80061c8:	b960      	cbnz	r0, 80061e4 <VL53L1_preset_mode_singleshot_ranging+0x32>
		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80061ca:	2300      	movs	r3, #0
 80061cc:	74bb      	strb	r3, [r7, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80061ce:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 80061d0:	21b1      	movs	r1, #177	; 0xb1
 80061d2:	7161      	strb	r1, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80061d4:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 80061d6:	23d4      	movs	r3, #212	; 0xd4
 80061d8:	7223      	strb	r3, [r4, #8]

		pdynamic->system__seed_config =
			ptuning_parms->tp_timed_seed_cfg;
 80061da:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		pdynamic->system__seed_config =
 80061de:	71fb      	strb	r3, [r7, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 80061e0:	2310      	movs	r3, #16
 80061e2:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80061e4:	4610      	mov	r0, r2
 80061e6:	b003      	add	sp, #12
 80061e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061ea <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80061ea:	b530      	push	{r4, r5, lr}
 80061ec:	b083      	sub	sp, #12
 80061ee:	9c06      	ldr	r4, [sp, #24]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 80061f0:	9d07      	ldr	r5, [sp, #28]
 80061f2:	9501      	str	r5, [sp, #4]
 80061f4:	9400      	str	r4, [sp, #0]
 80061f6:	f7ff fe30 	bl	8005e5a <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80061fa:	4603      	mov	r3, r0
 80061fc:	b908      	cbnz	r0, 8006202 <VL53L1_preset_mode_olt+0x18>
		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl = 0x01;
 80061fe:	2201      	movs	r2, #1
 8006200:	7062      	strb	r2, [r4, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8006202:	4618      	mov	r0, r3
 8006204:	b003      	add	sp, #12
 8006206:	bd30      	pop	{r4, r5, pc}

08006208 <VL53L1_init_version>:
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	pdev->version.ll_major = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8006208:	2301      	movs	r3, #1
 800620a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	pdev->version.ll_minor = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800620e:	2302      	movs	r3, #2
 8006210:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	pdev->version.ll_build = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8006214:	230a      	movs	r3, #10
 8006216:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800621a:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 800621e:	6243      	str	r3, [r0, #36]	; 0x24
 8006220:	4770      	bx	lr

08006222 <VL53L1_init_ll_driver_state>:
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);

	pstate->cfg_device_state = device_state;
 8006222:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
	pstate->cfg_stream_count = 0;
 8006226:	2300      	movs	r3, #0
 8006228:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800622c:	2202      	movs	r2, #2
 800622e:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
	pstate->cfg_timing_status = 0;
 8006232:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f

	pstate->rd_device_state = device_state;
 8006236:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
	pstate->rd_stream_count = 0;
 800623a:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800623e:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
	pstate->rd_timing_status = 0;
 8006242:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 8006246:	4770      	bx	lr

08006248 <VL53L1_update_ll_driver_rd_state>:

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8006248:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 800624c:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8006250:	d016      	beq.n	8006280 <VL53L1_update_ll_driver_rd_state+0x38>
	} else {
		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 8006252:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8006256:	2bff      	cmp	r3, #255	; 0xff
 8006258:	d01f      	beq.n	800629a <VL53L1_update_ll_driver_rd_state+0x52>
			pstate->rd_stream_count = 0x80;
		} else {
			pstate->rd_stream_count++;
 800625a:	3301      	adds	r3, #1
 800625c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006260:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8006264:	f083 0302 	eor.w	r3, r3, #2
 8006268:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800626c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8006270:	3b03      	subs	r3, #3
 8006272:	2b05      	cmp	r3, #5
 8006274:	d83c      	bhi.n	80062f0 <VL53L1_update_ll_driver_rd_state+0xa8>
 8006276:	e8df f003 	tbb	[pc, r3]
 800627a:	3b14      	.short	0x3b14
 800627c:	312d263b 	.word	0x312d263b
		pstate->rd_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8006280:	2303      	movs	r3, #3
 8006282:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
		pstate->rd_stream_count = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800628c:	2202      	movs	r2, #2
 800628e:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
		pstate->rd_timing_status = 0;
 8006292:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 8006296:	2000      	movs	r0, #0
 8006298:	4770      	bx	lr
			pstate->rd_stream_count = 0x80;
 800629a:	2380      	movs	r3, #128	; 0x80
 800629c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
 80062a0:	e7de      	b.n	8006260 <VL53L1_update_ll_driver_rd_state+0x18>
			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 80062a2:	f890 31c6 	ldrb.w	r3, [r0, #454]	; 0x1c6
 80062a6:	f013 0f02 	tst.w	r3, #2
 80062aa:	d008      	beq.n	80062be <VL53L1_update_ll_driver_rd_state+0x76>
				pstate->rd_device_state =
 80062ac:	2306      	movs	r3, #6
 80062ae:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			pstate->rd_stream_count = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_timing_status = 0;
 80062b8:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
			break;
 80062bc:	e7eb      	b.n	8006296 <VL53L1_update_ll_driver_rd_state+0x4e>
				pstate->rd_device_state =
 80062be:	2308      	movs	r3, #8
 80062c0:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 80062c4:	e7f5      	b.n	80062b2 <VL53L1_update_ll_driver_rd_state+0x6a>
			pstate->rd_stream_count = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_device_state =
 80062cc:	2308      	movs	r3, #8
 80062ce:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			break;
 80062d2:	e7e0      	b.n	8006296 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_device_state =
 80062d4:	2308      	movs	r3, #8
 80062d6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			break;
 80062da:	e7dc      	b.n	8006296 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_timing_status ^= 0x01;
 80062dc:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 80062e0:	f083 0301 	eor.w	r3, r3, #1
 80062e4:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
			pstate->rd_device_state =
 80062e8:	2308      	movs	r3, #8
 80062ea:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			break;
 80062ee:	e7d2      	b.n	8006296 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_device_state =
 80062f0:	2303      	movs	r3, #3
 80062f2:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			pstate->rd_stream_count = 0;
 80062f6:	2300      	movs	r3, #0
 80062f8:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80062fc:	2202      	movs	r2, #2
 80062fe:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
			pstate->rd_timing_status = 0;
 8006302:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
			break;
 8006306:	e7c6      	b.n	8006296 <VL53L1_update_ll_driver_rd_state+0x4e>

08006308 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV Dev)
{
 8006308:	b410      	push	{r4}
 800630a:	4603      	mov	r3, r0
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
		psys_results->result__range_status &
 800630c:	f890 21cf 	ldrb.w	r2, [r0, #463]	; 0x1cf
	device_range_status =
 8006310:	f002 011f 	and.w	r1, r2, #31
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8006314:	f890 41d1 	ldrb.w	r4, [r0, #465]	; 0x1d1

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 8006318:	f890 21ce 	ldrb.w	r2, [r0, #462]	; 0x1ce
			 VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800631c:	f890 01cc 	ldrb.w	r0, [r0, #460]	; 0x1cc
 8006320:	f010 0f20 	tst.w	r0, #32
 8006324:	d019      	beq.n	800635a <VL53L1_check_ll_driver_rd_state+0x52>
 8006326:	0912      	lsrs	r2, r2, #4
 8006328:	f002 0202 	and.w	r2, r2, #2
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800632c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 8006330:	2806      	cmp	r0, #6
 8006332:	d00c      	beq.n	800634e <VL53L1_check_ll_driver_rd_state+0x46>
			if (device_range_status !=
			    VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8006334:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 8006338:	428c      	cmp	r4, r1
 800633a:	d00c      	beq.n	8006356 <VL53L1_check_ll_driver_rd_state+0x4e>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800633c:	f06f 0011 	mvn.w	r0, #17

			/*
			 * Check Read state GPH ID
			 */

			if (pstate->rd_gph_id != device_gph_id) {
 8006340:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006344:	429a      	cmp	r2, r3
 8006346:	d10d      	bne.n	8006364 <VL53L1_check_ll_driver_rd_state+0x5c>
	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
}
 8006348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800634c:	4770      	bx	lr
			if (device_range_status !=
 800634e:	2912      	cmp	r1, #18
 8006350:	d105      	bne.n	800635e <VL53L1_check_ll_driver_rd_state+0x56>
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006352:	2000      	movs	r0, #0
 8006354:	e7f8      	b.n	8006348 <VL53L1_check_ll_driver_rd_state+0x40>
 8006356:	2000      	movs	r0, #0
 8006358:	e7f2      	b.n	8006340 <VL53L1_check_ll_driver_rd_state+0x38>
 800635a:	2000      	movs	r0, #0
 800635c:	e7f4      	b.n	8006348 <VL53L1_check_ll_driver_rd_state+0x40>
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800635e:	f06f 0010 	mvn.w	r0, #16
 8006362:	e7f1      	b.n	8006348 <VL53L1_check_ll_driver_rd_state+0x40>
				status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8006364:	f06f 0012 	mvn.w	r0, #18
 8006368:	e7ee      	b.n	8006348 <VL53L1_check_ll_driver_rd_state+0x40>

0800636a <VL53L1_update_ll_driver_cfg_state>:
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800636a:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 800636e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8006372:	d01e      	beq.n	80063b2 <VL53L1_update_ll_driver_cfg_state+0x48>
	} else {
		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 8006374:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006378:	2bff      	cmp	r3, #255	; 0xff
 800637a:	d027      	beq.n	80063cc <VL53L1_update_ll_driver_cfg_state+0x62>
			pstate->cfg_stream_count = 0x80;
		} else {
			pstate->cfg_stream_count++;
 800637c:	3301      	adds	r3, #1
 800637e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006382:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8006386:	f083 0302 	eor.w	r3, r3, #2
 800638a:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800638e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006392:	2b03      	cmp	r3, #3
 8006394:	d01e      	beq.n	80063d4 <VL53L1_update_ll_driver_cfg_state+0x6a>
 8006396:	2b04      	cmp	r3, #4
 8006398:	d029      	beq.n	80063ee <VL53L1_update_ll_driver_cfg_state+0x84>

			break;

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800639a:	2303      	movs	r3, #3
 800639c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
			pstate->cfg_stream_count = 0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80063a6:	2202      	movs	r2, #2
 80063a8:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
			pstate->cfg_timing_status = 0;
 80063ac:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f

			break;
 80063b0:	e00a      	b.n	80063c8 <VL53L1_update_ll_driver_cfg_state+0x5e>
		pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 80063b2:	2303      	movs	r3, #3
 80063b4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
		pstate->cfg_stream_count = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80063be:	2202      	movs	r2, #2
 80063c0:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
		pstate->cfg_timing_status = 0;
 80063c4:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 80063c8:	2000      	movs	r0, #0
 80063ca:	4770      	bx	lr
			pstate->cfg_stream_count = 0x80;
 80063cc:	2380      	movs	r3, #128	; 0x80
 80063ce:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
 80063d2:	e7d6      	b.n	8006382 <VL53L1_update_ll_driver_cfg_state+0x18>
			pstate->cfg_timing_status ^= 0x01;
 80063d4:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80063d8:	f083 0301 	eor.w	r3, r3, #1
 80063dc:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
			pstate->cfg_stream_count = 1;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 80063e6:	2304      	movs	r3, #4
 80063e8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
			break;
 80063ec:	e7ec      	b.n	80063c8 <VL53L1_update_ll_driver_cfg_state+0x5e>
			pstate->cfg_timing_status ^= 0x01;
 80063ee:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80063f2:	f083 0301 	eor.w	r3, r3, #1
 80063f6:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
			break;
 80063fa:	e7e5      	b.n	80063c8 <VL53L1_update_ll_driver_cfg_state+0x5e>

080063fc <VL53L1_copy_rtn_good_spads_to_buffer>:
{
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer + 0) = pdata->global_config__spad_enables_rtn_0;
 80063fc:	7c03      	ldrb	r3, [r0, #16]
 80063fe:	700b      	strb	r3, [r1, #0]
	*(pbuffer + 1) = pdata->global_config__spad_enables_rtn_1;
 8006400:	7c43      	ldrb	r3, [r0, #17]
 8006402:	704b      	strb	r3, [r1, #1]
	*(pbuffer + 2) = pdata->global_config__spad_enables_rtn_2;
 8006404:	7c83      	ldrb	r3, [r0, #18]
 8006406:	708b      	strb	r3, [r1, #2]
	*(pbuffer + 3) = pdata->global_config__spad_enables_rtn_3;
 8006408:	7cc3      	ldrb	r3, [r0, #19]
 800640a:	70cb      	strb	r3, [r1, #3]
	*(pbuffer + 4) = pdata->global_config__spad_enables_rtn_4;
 800640c:	7d03      	ldrb	r3, [r0, #20]
 800640e:	710b      	strb	r3, [r1, #4]
	*(pbuffer + 5) = pdata->global_config__spad_enables_rtn_5;
 8006410:	7d43      	ldrb	r3, [r0, #21]
 8006412:	714b      	strb	r3, [r1, #5]
	*(pbuffer + 6) = pdata->global_config__spad_enables_rtn_6;
 8006414:	7d83      	ldrb	r3, [r0, #22]
 8006416:	718b      	strb	r3, [r1, #6]
	*(pbuffer + 7) = pdata->global_config__spad_enables_rtn_7;
 8006418:	7dc3      	ldrb	r3, [r0, #23]
 800641a:	71cb      	strb	r3, [r1, #7]
	*(pbuffer + 8) = pdata->global_config__spad_enables_rtn_8;
 800641c:	7e03      	ldrb	r3, [r0, #24]
 800641e:	720b      	strb	r3, [r1, #8]
	*(pbuffer + 9) = pdata->global_config__spad_enables_rtn_9;
 8006420:	7e43      	ldrb	r3, [r0, #25]
 8006422:	724b      	strb	r3, [r1, #9]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8006424:	7e83      	ldrb	r3, [r0, #26]
 8006426:	728b      	strb	r3, [r1, #10]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8006428:	7ec3      	ldrb	r3, [r0, #27]
 800642a:	72cb      	strb	r3, [r1, #11]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800642c:	7f03      	ldrb	r3, [r0, #28]
 800642e:	730b      	strb	r3, [r1, #12]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8006430:	7f43      	ldrb	r3, [r0, #29]
 8006432:	734b      	strb	r3, [r1, #13]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8006434:	7f83      	ldrb	r3, [r0, #30]
 8006436:	738b      	strb	r3, [r1, #14]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8006438:	7fc3      	ldrb	r3, [r0, #31]
 800643a:	73cb      	strb	r3, [r1, #15]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800643c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8006440:	740b      	strb	r3, [r1, #16]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8006442:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8006446:	744b      	strb	r3, [r1, #17]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8006448:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800644c:	748b      	strb	r3, [r1, #18]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800644e:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8006452:	74cb      	strb	r3, [r1, #19]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8006454:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8006458:	750b      	strb	r3, [r1, #20]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800645a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800645e:	754b      	strb	r3, [r1, #21]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8006460:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8006464:	758b      	strb	r3, [r1, #22]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8006466:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800646a:	75cb      	strb	r3, [r1, #23]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800646c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8006470:	760b      	strb	r3, [r1, #24]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8006472:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8006476:	764b      	strb	r3, [r1, #25]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8006478:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800647c:	768b      	strb	r3, [r1, #26]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800647e:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8006482:	76cb      	strb	r3, [r1, #27]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8006484:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006488:	770b      	strb	r3, [r1, #28]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800648a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800648e:	774b      	strb	r3, [r1, #29]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8006490:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8006494:	778b      	strb	r3, [r1, #30]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8006496:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800649a:	77cb      	strb	r3, [r1, #31]
 800649c:	4770      	bx	lr

0800649e <VL53L1_i2c_encode_uint16_t>:
	uint16_t i = 0;
	uint16_t data = 0;

	data = ip_value;

	for (i = 0; i < count; i++) {
 800649e:	2300      	movs	r3, #0
 80064a0:	428b      	cmp	r3, r1
 80064a2:	d20b      	bcs.n	80064bc <VL53L1_i2c_encode_uint16_t+0x1e>
{
 80064a4:	b410      	push	{r4}
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
 80064a6:	1acc      	subs	r4, r1, r3
 80064a8:	3c01      	subs	r4, #1
 80064aa:	5510      	strb	r0, [r2, r4]
		data = data >> 8;
 80064ac:	0a00      	lsrs	r0, r0, #8
	for (i = 0; i < count; i++) {
 80064ae:	3301      	adds	r3, #1
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	428b      	cmp	r3, r1
 80064b4:	d3f7      	bcc.n	80064a6 <VL53L1_i2c_encode_uint16_t+0x8>
	}
}
 80064b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	4770      	bx	lr

080064be <VL53L1_i2c_decode_uint16_t>:
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t value = 0x00;
 80064be:	2200      	movs	r2, #0

	while (count-- > 0) {
 80064c0:	e005      	b.n	80064ce <VL53L1_i2c_decode_uint16_t+0x10>
		value = (value << 8) | (uint16_t)*pbuffer++;
 80064c2:	7808      	ldrb	r0, [r1, #0]
 80064c4:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 80064c8:	b292      	uxth	r2, r2
 80064ca:	3101      	adds	r1, #1
	while (count-- > 0) {
 80064cc:	4618      	mov	r0, r3
 80064ce:	1e43      	subs	r3, r0, #1
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d1f5      	bne.n	80064c2 <VL53L1_i2c_decode_uint16_t+0x4>
	}

	return value;
}
 80064d6:	4610      	mov	r0, r2
 80064d8:	4770      	bx	lr

080064da <VL53L1_i2c_encode_int16_t>:
	uint16_t i = 0;
	int16_t data = 0;

	data = ip_value;

	for (i = 0; i < count; i++) {
 80064da:	2300      	movs	r3, #0
 80064dc:	428b      	cmp	r3, r1
 80064de:	d20b      	bcs.n	80064f8 <VL53L1_i2c_encode_int16_t+0x1e>
{
 80064e0:	b410      	push	{r4}
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
 80064e2:	1acc      	subs	r4, r1, r3
 80064e4:	3c01      	subs	r4, #1
 80064e6:	5510      	strb	r0, [r2, r4]
		data = data >> 8;
 80064e8:	1200      	asrs	r0, r0, #8
	for (i = 0; i < count; i++) {
 80064ea:	3301      	adds	r3, #1
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	428b      	cmp	r3, r1
 80064f0:	d3f7      	bcc.n	80064e2 <VL53L1_i2c_encode_int16_t+0x8>
	}
}
 80064f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	4770      	bx	lr

080064fa <VL53L1_i2c_decode_int16_t>:
	 */

	int16_t value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80064fa:	f991 3000 	ldrsb.w	r3, [r1]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	db01      	blt.n	8006506 <VL53L1_i2c_decode_int16_t+0xc>
	int16_t value = 0x00;
 8006502:	2300      	movs	r3, #0
 8006504:	e008      	b.n	8006518 <VL53L1_i2c_decode_int16_t+0x1e>
		value = 0xFFFF;
 8006506:	f04f 33ff 	mov.w	r3, #4294967295
 800650a:	e005      	b.n	8006518 <VL53L1_i2c_decode_int16_t+0x1e>
	}

	while (count-- > 0) {
		value = (value << 8) | (int16_t)*pbuffer++;
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	b21b      	sxth	r3, r3
 8006510:	7808      	ldrb	r0, [r1, #0]
 8006512:	4303      	orrs	r3, r0
 8006514:	3101      	adds	r1, #1
	while (count-- > 0) {
 8006516:	4610      	mov	r0, r2
 8006518:	1e42      	subs	r2, r0, #1
 800651a:	b292      	uxth	r2, r2
 800651c:	2800      	cmp	r0, #0
 800651e:	d1f5      	bne.n	800650c <VL53L1_i2c_decode_int16_t+0x12>
	}

	return value;
}
 8006520:	4618      	mov	r0, r3
 8006522:	4770      	bx	lr

08006524 <VL53L1_i2c_encode_uint32_t>:
	uint16_t i = 0;
	uint32_t data = 0;

	data = ip_value;

	for (i = 0; i < count; i++) {
 8006524:	2300      	movs	r3, #0
 8006526:	428b      	cmp	r3, r1
 8006528:	d20b      	bcs.n	8006542 <VL53L1_i2c_encode_uint32_t+0x1e>
{
 800652a:	b410      	push	{r4}
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
 800652c:	1acc      	subs	r4, r1, r3
 800652e:	3c01      	subs	r4, #1
 8006530:	5510      	strb	r0, [r2, r4]
		data = data >> 8;
 8006532:	0a00      	lsrs	r0, r0, #8
	for (i = 0; i < count; i++) {
 8006534:	3301      	adds	r3, #1
 8006536:	b29b      	uxth	r3, r3
 8006538:	428b      	cmp	r3, r1
 800653a:	d3f7      	bcc.n	800652c <VL53L1_i2c_encode_uint32_t+0x8>
	}
}
 800653c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	4770      	bx	lr

08006544 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t count,
	uint8_t    *pbuffer)
{
 8006544:	4602      	mov	r2, r0
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t value = 0x00;
 8006546:	2000      	movs	r0, #0

	while (count-- > 0) {
 8006548:	e004      	b.n	8006554 <VL53L1_i2c_decode_uint32_t+0x10>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800654a:	780a      	ldrb	r2, [r1, #0]
 800654c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8006550:	3101      	adds	r1, #1
	while (count-- > 0) {
 8006552:	461a      	mov	r2, r3
 8006554:	1e53      	subs	r3, r2, #1
 8006556:	b29b      	uxth	r3, r3
 8006558:	2a00      	cmp	r2, #0
 800655a:	d1f6      	bne.n	800654a <VL53L1_i2c_decode_uint32_t+0x6>
	}

	return value;
}
 800655c:	4770      	bx	lr

0800655e <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t count,
	uint8_t    *pbuffer)
{
 800655e:	4602      	mov	r2, r0
	 */

	int32_t value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8006560:	f991 3000 	ldrsb.w	r3, [r1]
 8006564:	2b00      	cmp	r3, #0
 8006566:	db01      	blt.n	800656c <VL53L1_i2c_decode_int32_t+0xe>
	int32_t value = 0x00;
 8006568:	2000      	movs	r0, #0
 800656a:	e007      	b.n	800657c <VL53L1_i2c_decode_int32_t+0x1e>
		value = 0xFFFFFFFF;
 800656c:	f04f 30ff 	mov.w	r0, #4294967295
 8006570:	e004      	b.n	800657c <VL53L1_i2c_decode_int32_t+0x1e>
	}

	while (count-- > 0) {
		value = (value << 8) | (int32_t)*pbuffer++;
 8006572:	780a      	ldrb	r2, [r1, #0]
 8006574:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8006578:	3101      	adds	r1, #1
	while (count-- > 0) {
 800657a:	461a      	mov	r2, r3
 800657c:	1e53      	subs	r3, r2, #1
 800657e:	b29b      	uxth	r3, r3
 8006580:	2a00      	cmp	r2, #0
 8006582:	d1f6      	bne.n	8006572 <VL53L1_i2c_decode_int32_t+0x14>
	}

	return value;
}
 8006584:	4770      	bx	lr

08006586 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t fast_osc_frequency,
	uint8_t vcsel_period)
{
 8006586:	b538      	push	{r3, r4, r5, lr}
 8006588:	460d      	mov	r5, r1

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800658a:	f000 f966 	bl	800685a <VL53L1_calc_pll_period_us>
 800658e:	4604      	mov	r4, r0

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8006590:	4628      	mov	r0, r5
 8006592:	f000 f967 	bl	8006864 <VL53L1_decode_vcsel_period>
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8006596:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800659a:	0223      	lsls	r3, r4, #8
		(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
		pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800659c:	099b      	lsrs	r3, r3, #6

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800659e:	fb00 f003 	mul.w	r0, r0, r3
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
}
 80065a2:	0980      	lsrs	r0, r0, #6
 80065a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080065a8 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t x_gradient,
	int16_t y_gradient,
	uint8_t rate_mult)
{
 80065a8:	b510      	push	{r4, lr}

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80065aa:	0100      	lsls	r0, r0, #4
 80065ac:	4c14      	ldr	r4, [pc, #80]	; (8006600 <VL53L1_calc_range_ignore_threshold+0x58>)
 80065ae:	fb84 e400 	smull	lr, r4, r4, r0
 80065b2:	17c0      	asrs	r0, r0, #31
 80065b4:	ebc0 10a4 	rsb	r0, r0, r4, asr #6

	if (x_gradient < 0) {
 80065b8:	2900      	cmp	r1, #0
 80065ba:	db17      	blt.n	80065ec <VL53L1_calc_range_ignore_threshold+0x44>
	int16_t x_gradient_int = 0;
 80065bc:	2100      	movs	r1, #0
		x_gradient_int = x_gradient * -1;
	}

	if (y_gradient < 0) {
 80065be:	2a00      	cmp	r2, #0
 80065c0:	db17      	blt.n	80065f2 <VL53L1_calc_range_ignore_threshold+0x4a>
	int16_t y_gradient_int = 0;
 80065c2:	2200      	movs	r2, #0

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 80065c4:	440a      	add	r2, r1
 80065c6:	0152      	lsls	r2, r2, #5

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80065c8:	490d      	ldr	r1, [pc, #52]	; (8006600 <VL53L1_calc_range_ignore_threshold+0x58>)
 80065ca:	fb81 4102 	smull	r4, r1, r1, r2
 80065ce:	17d2      	asrs	r2, r2, #31
 80065d0:	ebc2 12a1 	rsb	r2, r2, r1, asr #6

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 80065d4:	4402      	add	r2, r0

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 80065d6:	fb03 f302 	mul.w	r3, r3, r2

	range_ignore_thresh_int = (range_ignore_thresh_int + (1 << 4)) / (1 << 5);
 80065da:	3310      	adds	r3, #16
 80065dc:	d40c      	bmi.n	80065f8 <VL53L1_calc_range_ignore_threshold+0x50>
 80065de:	115b      	asrs	r3, r3, #5

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 80065e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e4:	db0a      	blt.n	80065fc <VL53L1_calc_range_ignore_threshold+0x54>
		range_ignore_thresh_kcps = 0xFFFF;
 80065e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
}
 80065ea:	bd10      	pop	{r4, pc}
		x_gradient_int = x_gradient * -1;
 80065ec:	4249      	negs	r1, r1
 80065ee:	b209      	sxth	r1, r1
 80065f0:	e7e5      	b.n	80065be <VL53L1_calc_range_ignore_threshold+0x16>
		y_gradient_int = y_gradient * -1;
 80065f2:	4252      	negs	r2, r2
 80065f4:	b212      	sxth	r2, r2
 80065f6:	e7e5      	b.n	80065c4 <VL53L1_calc_range_ignore_threshold+0x1c>
	range_ignore_thresh_int = (range_ignore_thresh_int + (1 << 4)) / (1 << 5);
 80065f8:	331f      	adds	r3, #31
 80065fa:	e7f0      	b.n	80065de <VL53L1_calc_range_ignore_threshold+0x36>
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 80065fc:	b298      	uxth	r0, r3
 80065fe:	bd10      	pop	{r4, pc}
 8006600:	10624dd3 	.word	0x10624dd3

08006604 <VL53L1_calc_timeout_mclks>:
	uint32_t timeout_mclks = 0;

	LOG_FUNCTION_START("");

	timeout_mclks =
		((timeout_us << 12) + (macro_period_us >> 1)) /
 8006604:	084b      	lsrs	r3, r1, #1
 8006606:	eb03 3000 	add.w	r0, r3, r0, lsl #12
		macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
}
 800660a:	fbb0 f0f1 	udiv	r0, r0, r1
 800660e:	4770      	bx	lr

08006610 <VL53L1_calc_timeout_us>:
	uint32_t timeout_us = 0;
	uint64_t tmp = 0;

	LOG_FUNCTION_START("");

	tmp = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8006610:	fba0 0101 	umull	r0, r1, r0, r1
	tmp += 0x00800;
 8006614:	f510 6200 	adds.w	r2, r0, #2048	; 0x800
 8006618:	f141 0300 	adc.w	r3, r1, #0
	tmp = tmp >> 12;
 800661c:	0b10      	lsrs	r0, r2, #12
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
}
 800661e:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8006622:	4770      	bx	lr

08006624 <VL53L1_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_mclks > 0) {
 8006624:	b170      	cbz	r0, 8006644 <VL53L1_encode_timeout+0x20>
		ls_byte = timeout_mclks - 1;
 8006626:	3801      	subs	r0, #1
	uint16_t ms_byte = 0;
 8006628:	2300      	movs	r3, #0

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800662a:	e002      	b.n	8006632 <VL53L1_encode_timeout+0xe>
			ls_byte = ls_byte >> 1;
 800662c:	0840      	lsrs	r0, r0, #1
			ms_byte++;
 800662e:	3301      	adds	r3, #1
 8006630:	b29b      	uxth	r3, r3
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006632:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
 8006636:	d1f9      	bne.n	800662c <VL53L1_encode_timeout+0x8>
		}

		encoded_timeout = (ms_byte << 8)
 8006638:	021b      	lsls	r3, r3, #8
 800663a:	b29b      	uxth	r3, r3
 800663c:	fa53 f080 	uxtab	r0, r3, r0
 8006640:	b280      	uxth	r0, r0
 8006642:	4770      	bx	lr
	uint16_t encoded_timeout = 0;
 8006644:	2000      	movs	r0, #0
				  + (uint16_t)(ls_byte & 0x000000FF);
	}

	return encoded_timeout;
}
 8006646:	4770      	bx	lr

08006648 <VL53L1_calc_encoded_timeout>:
{
 8006648:	b508      	push	{r3, lr}
	timeout_mclks =
 800664a:	f7ff ffdb 	bl	8006604 <VL53L1_calc_timeout_mclks>
	timeout_encoded =
 800664e:	f7ff ffe9 	bl	8006624 <VL53L1_encode_timeout>
}
 8006652:	bd08      	pop	{r3, pc}

08006654 <VL53L1_decode_timeout>:
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t)(encoded_timeout & 0x00FF)
 8006654:	b2c3      	uxtb	r3, r0
			      << (uint32_t)((encoded_timeout & 0xFF00) >> 8)) + 1;
 8006656:	0a00      	lsrs	r0, r0, #8
 8006658:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 800665c:	3001      	adds	r0, #1
 800665e:	4770      	bx	lr

08006660 <VL53L1_calc_decoded_timeout_us>:
{
 8006660:	b510      	push	{r4, lr}
 8006662:	460c      	mov	r4, r1
	timeout_mclks =
 8006664:	f7ff fff6 	bl	8006654 <VL53L1_decode_timeout>
	timeout_us =
 8006668:	4621      	mov	r1, r4
 800666a:	f7ff ffd1 	bl	8006610 <VL53L1_calc_timeout_us>
}
 800666e:	bd10      	pop	{r4, pc}

08006670 <VL53L1_calc_timeout_register_values>:
	uint32_t mm_config_timeout_us,
	uint32_t range_config_timeout_us,
	uint16_t fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8006670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006674:	9c09      	ldr	r4, [sp, #36]	; 0x24
	uint32_t timeout_mclks = 0;
	uint16_t timeout_encoded = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8006676:	b3cb      	cbz	r3, 80066ec <VL53L1_calc_timeout_register_values+0x7c>
 8006678:	461f      	mov	r7, r3
 800667a:	4615      	mov	r5, r2
 800667c:	460e      	mov	r6, r1
 800667e:	4680      	mov	r8, r0
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
 8006680:	79a1      	ldrb	r1, [r4, #6]
 8006682:	4618      	mov	r0, r3
 8006684:	f7ff ff7f 	bl	8006586 <VL53L1_calc_macro_period_us>
 8006688:	4681      	mov	r9, r0
			VL53L1_calc_macro_period_us(
				fast_osc_frequency,
				ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
 800668a:	4601      	mov	r1, r0
 800668c:	4640      	mov	r0, r8
 800668e:	f7ff ffb9 	bl	8006604 <VL53L1_calc_timeout_mclks>
			VL53L1_calc_timeout_mclks(
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 8006692:	28ff      	cmp	r0, #255	; 0xff
 8006694:	d900      	bls.n	8006698 <VL53L1_calc_timeout_register_values+0x28>
			timeout_mclks = 0xFF;
 8006696:	20ff      	movs	r0, #255	; 0xff

		pgeneral->phasecal_config__timeout_macrop =
 8006698:	9b08      	ldr	r3, [sp, #32]
 800669a:	71d8      	strb	r0, [r3, #7]
			(uint8_t)timeout_mclks;

		/*  Update MM Timing A timeout */
		timeout_encoded =
 800669c:	4649      	mov	r1, r9
 800669e:	4630      	mov	r0, r6
 80066a0:	f7ff ffd2 	bl	8006648 <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80066a4:	f3c0 2307 	ubfx	r3, r0, #8, #8
		ptiming->mm_config__timeout_macrop_a_hi =
 80066a8:	7023      	strb	r3, [r4, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
 80066aa:	7060      	strb	r0, [r4, #1]
			(uint8_t)(timeout_encoded & 0x00FF);

		/* Update Range Timing A timeout */
		timeout_encoded =
 80066ac:	4649      	mov	r1, r9
 80066ae:	4628      	mov	r0, r5
 80066b0:	f7ff ffca 	bl	8006648 <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80066b4:	f3c0 2307 	ubfx	r3, r0, #8, #8
		ptiming->range_config__timeout_macrop_a_hi =
 80066b8:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo =
 80066ba:	7160      	strb	r0, [r4, #5]
			(uint8_t)(timeout_encoded & 0x00FF);

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
 80066bc:	7a61      	ldrb	r1, [r4, #9]
 80066be:	4638      	mov	r0, r7
 80066c0:	f7ff ff61 	bl	8006586 <VL53L1_calc_macro_period_us>
 80066c4:	4607      	mov	r7, r0
			VL53L1_calc_macro_period_us(
				fast_osc_frequency,
				ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
 80066c6:	4601      	mov	r1, r0
 80066c8:	4630      	mov	r0, r6
 80066ca:	f7ff ffbd 	bl	8006648 <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80066ce:	f3c0 2307 	ubfx	r3, r0, #8, #8
		ptiming->mm_config__timeout_macrop_b_hi =
 80066d2:	70a3      	strb	r3, [r4, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
 80066d4:	70e0      	strb	r0, [r4, #3]
			(uint8_t)(timeout_encoded & 0x00FF);

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 80066d6:	4639      	mov	r1, r7
 80066d8:	4628      	mov	r0, r5
 80066da:	f7ff ffb5 	bl	8006648 <VL53L1_calc_encoded_timeout>
			range_config_timeout_us,
			macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80066de:	f3c0 2307 	ubfx	r3, r0, #8, #8
		ptiming->range_config__timeout_macrop_b_hi =
 80066e2:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo =
 80066e4:	7220      	strb	r0, [r4, #8]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80066e6:	2000      	movs	r0, #0
 80066e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80066ec:	f06f 000e 	mvn.w	r0, #14
	}

	LOG_FUNCTION_END(0);

	return status;
}
 80066f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080066f4 <VL53L1_encode_row_col>:
{
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 80066f4:	2807      	cmp	r0, #7
 80066f6:	d807      	bhi.n	8006708 <VL53L1_encode_row_col+0x14>
		*pspad_number = 128 + (col << 3) + (15 - row);
	} else {
		*pspad_number = ((15 - col) << 3) + row;
 80066f8:	f1c1 010f 	rsb	r1, r1, #15
 80066fc:	b2c9      	uxtb	r1, r1
 80066fe:	00c9      	lsls	r1, r1, #3
 8006700:	b2c9      	uxtb	r1, r1
 8006702:	4408      	add	r0, r1
 8006704:	7010      	strb	r0, [r2, #0]
 8006706:	4770      	bx	lr
		*pspad_number = 128 + (col << 3) + (15 - row);
 8006708:	00c9      	lsls	r1, r1, #3
 800670a:	b2c9      	uxtb	r1, r1
 800670c:	1a08      	subs	r0, r1, r0
 800670e:	3871      	subs	r0, #113	; 0x71
 8006710:	7010      	strb	r0, [r2, #0]
 8006712:	4770      	bx	lr

08006714 <VL53L1_decode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8006714:	0903      	lsrs	r3, r0, #4
 8006716:	7013      	strb	r3, [r2, #0]
	*pwidth = encoded_xy_size & 0x0F;
 8006718:	f000 000f 	and.w	r0, r0, #15
 800671c:	7008      	strb	r0, [r1, #0]
 800671e:	4770      	bx	lr

08006720 <VL53L1_encode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8006720:	0109      	lsls	r1, r1, #4
 8006722:	b2c9      	uxtb	r1, r1
 8006724:	4401      	add	r1, r0
 8006726:	7011      	strb	r1, [r2, #0]
 8006728:	4770      	bx	lr

0800672a <VL53L1_low_power_auto_data_init>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800672a:	2303      	movs	r3, #3
 800672c:	f880 32e4 	strb.w	r3, [r0, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	f880 32e5 	strb.w	r3, [r0, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8006736:	f880 32e6 	strb.w	r3, [r0, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800673a:	f880 32e7 	strb.w	r3, [r0, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800673e:	f880 32e8 	strb.w	r3, [r0, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8006742:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8006746:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800674a:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800674e:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
}
 8006752:	4618      	mov	r0, r3
 8006754:	4770      	bx	lr

08006756 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV Dev
	)
{
 8006756:	4603      	mov	r3, r0
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 8006758:	22ff      	movs	r2, #255	; 0xff
 800675a:	f880 22e6 	strb.w	r2, [r0, #742]	; 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800675e:	2200      	movs	r2, #0
 8006760:	f880 22ea 	strb.w	r2, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8006764:	f8c0 22ec 	str.w	r2, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8006768:	f8a0 22f0 	strh.w	r2, [r0, #752]	; 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800676c:	f890 22e8 	ldrb.w	r2, [r0, #744]	; 0x2e8
 8006770:	b10a      	cbz	r2, 8006776 <VL53L1_low_power_auto_data_stop_range+0x20>
		pdev->stat_nvm.vhv_config__init =
 8006772:	f880 2163 	strb.w	r2, [r0, #355]	; 0x163
			pdev->low_power_auto_data.saved_vhv_init;
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 8006776:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
 800677a:	b10a      	cbz	r2, 8006780 <VL53L1_low_power_auto_data_stop_range+0x2a>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800677c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			pdev->low_power_auto_data.saved_vhv_timeout;

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 8006780:	2000      	movs	r0, #0
 8006782:	f883 018d 	strb.w	r0, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
}
 8006786:	4770      	bx	lr

08006788 <VL53L1_config_low_power_auto_mode>:
	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8006788:	2301      	movs	r3, #1
 800678a:	7053      	strb	r3, [r2, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	7093      	strb	r3, [r2, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8006790:	228b      	movs	r2, #139	; 0x8b
 8006792:	744a      	strb	r2, [r1, #17]
		/* VL53L1_SEQUENCE_MM1_EN | \*/
		/* VL53L1_SEQUENCE_MM2_EN | \*/
		VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 8006794:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8006798:	8202      	strh	r2, [r0, #16]
	pgeneral->dss_config__roi_mode_control =
 800679a:	2202      	movs	r2, #2
 800679c:	7282      	strb	r2, [r0, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
}
 800679e:	4618      	mov	r0, r3
 80067a0:	4770      	bx	lr

080067a2 <VL53L1_low_power_auto_setup_manual_calibration>:

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 80067a2:	f890 2163 	ldrb.w	r2, [r0, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 80067a6:	f880 22e8 	strb.w	r2, [r0, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80067aa:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 80067ae:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 80067b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067b6:	f880 2163 	strb.w	r2, [r0, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80067ba:	f003 0303 	and.w	r3, r3, #3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 80067be:	f890 22e4 	ldrb.w	r2, [r0, #740]	; 0x2e4
 80067c2:	0092      	lsls	r2, r2, #2
 80067c4:	b2d2      	uxtb	r2, r2
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80067c6:	4413      	add	r3, r2
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 80067c8:	f880 3160 	strb.w	r3, [r0, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 80067cc:	2301      	movs	r3, #1
 80067ce:	f880 318d 	strb.w	r3, [r0, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 80067d2:	f890 32ae 	ldrb.w	r3, [r0, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 80067d6:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 80067da:	f880 3187 	strb.w	r3, [r0, #391]	; 0x187
		pdev->low_power_auto_data.first_run_phasecal_result;

	LOG_FUNCTION_END(status);

	return status;
}
 80067de:	2000      	movs	r0, #0
 80067e0:	4770      	bx	lr

080067e2 <VL53L1_low_power_auto_update_DSS>:

VL53L1_Error VL53L1_low_power_auto_update_DSS(
	VL53L1_DEV Dev)
{
 80067e2:	4602      	mov	r2, r0
	LOG_FUNCTION_START("");

	/* Calc total rate per spad */

	/* 9.7 format */
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 80067e4:	f8b0 31de 	ldrh.w	r3, [r0, #478]	; 0x1de
		   pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 80067e8:	f8b0 11d6 	ldrh.w	r1, [r0, #470]	; 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 80067ec:	440b      	add	r3, r1

	/* clip to 16 bits */
	if (utemp32a > 0xFFFF)
 80067ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f2:	d301      	bcc.n	80067f8 <VL53L1_low_power_auto_update_DSS+0x16>
		utemp32a = 0xFFFF;
 80067f4:	f64f 73ff 	movw	r3, #65535	; 0xffff

	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;
 80067f8:	041b      	lsls	r3, r3, #16

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 80067fa:	f8b2 11d2 	ldrh.w	r1, [r2, #466]	; 0x1d2
 80067fe:	b1c1      	cbz	r1, 8006832 <VL53L1_low_power_auto_update_DSS+0x50>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
 8006800:	fbb3 f3f1 	udiv	r3, r3, r1
			   pdev->sys_results.result__dss_actual_effective_spads_sd0;
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 8006804:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
			utemp32a;

		/* get the target rate and shift up by 16
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 8006808:	f8b2 1164 	ldrh.w	r1, [r2, #356]	; 0x164
 800680c:	0409      	lsls	r1, r1, #16
			   16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 800680e:	b1b3      	cbz	r3, 800683e <VL53L1_low_power_auto_update_DSS+0x5c>
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
 8006810:	fbb1 f3f3 	udiv	r3, r1, r3
				   pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;

			/* clip to 16 bit */
			if (utemp32a > 0xFFFF)
 8006814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006818:	d301      	bcc.n	800681e <VL53L1_low_power_auto_update_DSS+0x3c>
				utemp32a = 0xFFFF;
 800681a:	f64f 73ff 	movw	r3, #65535	; 0xffff

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800681e:	b29b      	uxth	r3, r3
			pdev->low_power_auto_data.dss__required_spads =
 8006820:	f8a2 32f0 	strh.w	r3, [r2, #752]	; 0x2f0

			/* override DSS config */
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8006824:	f8a2 3194 	strh.w	r3, [r2, #404]	; 0x194
				pdev->low_power_auto_data.dss__required_spads;
			pdev->gen_cfg.dss_config__roi_mode_control =
 8006828:	2302      	movs	r3, #2
 800682a:	f882 318e 	strb.w	r3, [r2, #398]	; 0x18e
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800682e:	2000      	movs	r0, #0
 8006830:	e001      	b.n	8006836 <VL53L1_low_power_auto_update_DSS+0x54>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8006832:	f06f 000e 	mvn.w	r0, #14
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}
	}

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
 8006836:	f110 0f0f 	cmn.w	r0, #15
 800683a:	d003      	beq.n	8006844 <VL53L1_low_power_auto_update_DSS+0x62>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800683c:	4770      	bx	lr
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800683e:	f06f 000e 	mvn.w	r0, #14
 8006842:	e7f8      	b.n	8006836 <VL53L1_low_power_auto_update_DSS+0x54>
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 8006844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006848:	f8a2 32f0 	strh.w	r3, [r2, #752]	; 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800684c:	f8a2 3194 	strh.w	r3, [r2, #404]	; 0x194
		pdev->gen_cfg.dss_config__roi_mode_control =
 8006850:	2302      	movs	r3, #2
 8006852:	f882 318e 	strb.w	r3, [r2, #398]	; 0x18e
		status = VL53L1_ERROR_NONE;
 8006856:	2000      	movs	r0, #0
 8006858:	e7f0      	b.n	800683c <VL53L1_low_power_auto_update_DSS+0x5a>

0800685a <VL53L1_calc_pll_period_us>:
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
}
 800685a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800685e:	fb93 f0f0 	sdiv	r0, r3, r0
 8006862:	4770      	bx	lr

08006864 <VL53L1_decode_vcsel_period>:
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8006864:	3001      	adds	r0, #1
 8006866:	b2c0      	uxtb	r0, r0
 8006868:	0040      	lsls	r0, r0, #1

	return vcsel_period_pclks;
}
 800686a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 800686e:	4770      	bx	lr

08006870 <VL53L1_decode_row_col>:
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8006870:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006874:	d107      	bne.n	8006886 <VL53L1_decode_row_col+0x16>
		*prow = 8 + ((255 - spad_number) & 0x07);
		*pcol = (spad_number - 128) >> 3;
	} else {
		*prow = spad_number & 0x07;
 8006876:	f000 0307 	and.w	r3, r0, #7
 800687a:	700b      	strb	r3, [r1, #0]
		*pcol = (127 - spad_number) >> 3;
 800687c:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
 8006880:	10c0      	asrs	r0, r0, #3
 8006882:	7010      	strb	r0, [r2, #0]
 8006884:	4770      	bx	lr
		*prow = 8 + ((255 - spad_number) & 0x07);
 8006886:	43c3      	mvns	r3, r0
 8006888:	f003 0307 	and.w	r3, r3, #7
 800688c:	3308      	adds	r3, #8
 800688e:	700b      	strb	r3, [r1, #0]
		*pcol = (spad_number - 128) >> 3;
 8006890:	3880      	subs	r0, #128	; 0x80
 8006892:	10c0      	asrs	r0, r0, #3
 8006894:	7010      	strb	r0, [r2, #0]
 8006896:	4770      	bx	lr

08006898 <VL53L1_i2c_encode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8006898:	290a      	cmp	r1, #10
 800689a:	d927      	bls.n	80068ec <VL53L1_i2c_encode_static_nvm_managed+0x54>
{
 800689c:	b538      	push	{r3, r4, r5, lr}
 800689e:	4614      	mov	r4, r2
 80068a0:	4605      	mov	r5, r0
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->i2c_slave__device_address & 0x7F;
 80068a2:	7803      	ldrb	r3, [r0, #0]
 80068a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 0) =
 80068a8:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80068aa:	7843      	ldrb	r3, [r0, #1]
 80068ac:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 1) =
 80068b0:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 80068b2:	7883      	ldrb	r3, [r0, #2]
 80068b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 2) =
 80068b8:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80068ba:	78c3      	ldrb	r3, [r0, #3]
 80068bc:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 3) =
 80068c0:	70d3      	strb	r3, [r2, #3]
	*(pbuffer + 4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 80068c2:	7903      	ldrb	r3, [r0, #4]
 80068c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 4) =
 80068c8:	7113      	strb	r3, [r2, #4]
	VL53L1_i2c_encode_uint16_t(
 80068ca:	3205      	adds	r2, #5
 80068cc:	2102      	movs	r1, #2
 80068ce:	88c0      	ldrh	r0, [r0, #6]
 80068d0:	f7ff fde5 	bl	800649e <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer + 5);
	*(pbuffer + 7) =
		pdata->vhv_config__timeout_macrop_loop_bound;
 80068d4:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer + 7) =
 80068d6:	71e3      	strb	r3, [r4, #7]
	*(pbuffer + 8) =
		pdata->vhv_config__count_thresh;
 80068d8:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer + 8) =
 80068da:	7223      	strb	r3, [r4, #8]
	*(pbuffer + 9) =
		pdata->vhv_config__offset & 0x3F;
 80068dc:	7aab      	ldrb	r3, [r5, #10]
 80068de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer + 9) =
 80068e2:	7263      	strb	r3, [r4, #9]
	*(pbuffer + 10) =
		pdata->vhv_config__init;
 80068e4:	7aeb      	ldrb	r3, [r5, #11]
	*(pbuffer + 10) =
 80068e6:	72a3      	strb	r3, [r4, #10]
	LOG_FUNCTION_END(status);


	return status;
 80068e8:	2000      	movs	r0, #0
 80068ea:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80068ec:	f06f 0009 	mvn.w	r0, #9
 80068f0:	4770      	bx	lr

080068f2 <VL53L1_i2c_decode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80068f2:	280a      	cmp	r0, #10
 80068f4:	d927      	bls.n	8006946 <VL53L1_i2c_decode_static_nvm_managed+0x54>
{
 80068f6:	b538      	push	{r3, r4, r5, lr}
 80068f8:	4614      	mov	r4, r2
 80068fa:	460d      	mov	r5, r1
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->i2c_slave__device_address =
		(*(pbuffer + 0)) & 0x7F;
 80068fc:	780b      	ldrb	r3, [r1, #0]
 80068fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->i2c_slave__device_address =
 8006902:	7013      	strb	r3, [r2, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer + 1)) & 0xF;
 8006904:	784b      	ldrb	r3, [r1, #1]
 8006906:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__vhv_ref_sel_vddpix =
 800690a:	7053      	strb	r3, [r2, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer + 2)) & 0x7F;
 800690c:	788b      	ldrb	r3, [r1, #2]
 800690e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__vhv_ref_sel_vquench =
 8006912:	7093      	strb	r3, [r2, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer + 3)) & 0x3;
 8006914:	78cb      	ldrb	r3, [r1, #3]
 8006916:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__reg_avdd1v2_sel =
 800691a:	70d3      	strb	r3, [r2, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer + 4)) & 0x7F;
 800691c:	790b      	ldrb	r3, [r1, #4]
 800691e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim =
 8006922:	7113      	strb	r3, [r2, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 5));
 8006924:	3105      	adds	r1, #5
 8006926:	2002      	movs	r0, #2
 8006928:	f7ff fdc9 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->osc_measured__fast_osc__frequency =
 800692c:	80e0      	strh	r0, [r4, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800692e:	79eb      	ldrb	r3, [r5, #7]
 8006930:	7223      	strb	r3, [r4, #8]
		(*(pbuffer + 7));
	pdata->vhv_config__count_thresh =
 8006932:	7a2b      	ldrb	r3, [r5, #8]
 8006934:	7263      	strb	r3, [r4, #9]
		(*(pbuffer + 8));
	pdata->vhv_config__offset =
		(*(pbuffer + 9)) & 0x3F;
 8006936:	7a6b      	ldrb	r3, [r5, #9]
 8006938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_config__offset =
 800693c:	72a3      	strb	r3, [r4, #10]
	pdata->vhv_config__init =
 800693e:	7aab      	ldrb	r3, [r5, #10]
 8006940:	72e3      	strb	r3, [r4, #11]
		(*(pbuffer + 10));

	LOG_FUNCTION_END(status);

	return status;
 8006942:	2000      	movs	r0, #0
 8006944:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006946:	f06f 0009 	mvn.w	r0, #9
 800694a:	4770      	bx	lr

0800694c <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800694c:	b510      	push	{r4, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 8006952:	230b      	movs	r3, #11
 8006954:	aa01      	add	r2, sp, #4
 8006956:	2101      	movs	r1, #1
 8006958:	f009 fe50 	bl	80105fc <VL53L1_ReadMulti>
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800695c:	4603      	mov	r3, r0
 800695e:	b110      	cbz	r0, 8006966 <VL53L1_get_static_nvm_managed+0x1a>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 8006960:	4618      	mov	r0, r3
 8006962:	b004      	add	sp, #16
 8006964:	bd10      	pop	{r4, pc}
		status = VL53L1_i2c_decode_static_nvm_managed(
 8006966:	4622      	mov	r2, r4
 8006968:	a901      	add	r1, sp, #4
 800696a:	200b      	movs	r0, #11
 800696c:	f7ff ffc1 	bl	80068f2 <VL53L1_i2c_decode_static_nvm_managed>
 8006970:	4603      	mov	r3, r0
 8006972:	e7f5      	b.n	8006960 <VL53L1_get_static_nvm_managed+0x14>

08006974 <VL53L1_i2c_encode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8006974:	2916      	cmp	r1, #22
 8006976:	d94c      	bls.n	8006a12 <VL53L1_i2c_encode_customer_nvm_managed+0x9e>
{
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4615      	mov	r5, r2
 800697c:	4604      	mov	r4, r0
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->global_config__spad_enables_ref_0;
 800697e:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer + 0) =
 8006980:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->global_config__spad_enables_ref_1;
 8006982:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer + 1) =
 8006984:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->global_config__spad_enables_ref_2;
 8006986:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer + 2) =
 8006988:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->global_config__spad_enables_ref_3;
 800698a:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer + 3) =
 800698c:	70d3      	strb	r3, [r2, #3]
	*(pbuffer + 4) =
		pdata->global_config__spad_enables_ref_4;
 800698e:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer + 4) =
 8006990:	7113      	strb	r3, [r2, #4]
	*(pbuffer + 5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8006992:	7943      	ldrb	r3, [r0, #5]
 8006994:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 5) =
 8006998:	7153      	strb	r3, [r2, #5]
	*(pbuffer + 6) =
		pdata->global_config__ref_en_start_select;
 800699a:	7983      	ldrb	r3, [r0, #6]
	*(pbuffer + 6) =
 800699c:	7193      	strb	r3, [r2, #6]
	*(pbuffer + 7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800699e:	79c3      	ldrb	r3, [r0, #7]
 80069a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer + 7) =
 80069a4:	71d3      	strb	r3, [r2, #7]
	*(pbuffer + 8) =
		pdata->ref_spad_man__ref_location & 0x3;
 80069a6:	7a03      	ldrb	r3, [r0, #8]
 80069a8:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 8) =
 80069ac:	7213      	strb	r3, [r2, #8]
	VL53L1_i2c_encode_uint16_t(
 80069ae:	3209      	adds	r2, #9
 80069b0:	2102      	movs	r1, #2
 80069b2:	8940      	ldrh	r0, [r0, #10]
 80069b4:	f7ff fd73 	bl	800649e <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer + 9);
	VL53L1_i2c_encode_int16_t(
 80069b8:	f105 020b 	add.w	r2, r5, #11
 80069bc:	2102      	movs	r1, #2
 80069be:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80069c2:	f7ff fd8a 	bl	80064da <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer + 11);
	VL53L1_i2c_encode_int16_t(
 80069c6:	f105 020d 	add.w	r2, r5, #13
 80069ca:	2102      	movs	r1, #2
 80069cc:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 80069d0:	f7ff fd83 	bl	80064da <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer + 13);
	VL53L1_i2c_encode_uint16_t(
 80069d4:	f105 020f 	add.w	r2, r5, #15
 80069d8:	2102      	movs	r1, #2
 80069da:	8a20      	ldrh	r0, [r4, #16]
 80069dc:	f7ff fd5f 	bl	800649e <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer + 15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 80069e0:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
	VL53L1_i2c_encode_int16_t(
 80069e4:	f105 0211 	add.w	r2, r5, #17
 80069e8:	2102      	movs	r1, #2
 80069ea:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80069ee:	f7ff fd74 	bl	80064da <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer + 17);
	VL53L1_i2c_encode_int16_t(
 80069f2:	f105 0213 	add.w	r2, r5, #19
 80069f6:	2102      	movs	r1, #2
 80069f8:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80069fc:	f7ff fd6d 	bl	80064da <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer + 19);
	VL53L1_i2c_encode_int16_t(
 8006a00:	f105 0215 	add.w	r2, r5, #21
 8006a04:	2102      	movs	r1, #2
 8006a06:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8006a0a:	f7ff fd66 	bl	80064da <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer + 21);
	LOG_FUNCTION_END(status);


	return status;
 8006a0e:	2000      	movs	r0, #0
 8006a10:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006a12:	f06f 0009 	mvn.w	r0, #9
 8006a16:	4770      	bx	lr

08006a18 <VL53L1_i2c_decode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8006a18:	2816      	cmp	r0, #22
 8006a1a:	d947      	bls.n	8006aac <VL53L1_i2c_decode_customer_nvm_managed+0x94>
{
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4614      	mov	r4, r2
 8006a20:	460d      	mov	r5, r1
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer + 0));
 8006a22:	780b      	ldrb	r3, [r1, #0]
	pdata->global_config__spad_enables_ref_0 =
 8006a24:	7013      	strb	r3, [r2, #0]
	pdata->global_config__spad_enables_ref_1 =
 8006a26:	784b      	ldrb	r3, [r1, #1]
 8006a28:	7053      	strb	r3, [r2, #1]
		(*(pbuffer + 1));
	pdata->global_config__spad_enables_ref_2 =
 8006a2a:	788b      	ldrb	r3, [r1, #2]
 8006a2c:	7093      	strb	r3, [r2, #2]
		(*(pbuffer + 2));
	pdata->global_config__spad_enables_ref_3 =
 8006a2e:	78cb      	ldrb	r3, [r1, #3]
 8006a30:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer + 3));
	pdata->global_config__spad_enables_ref_4 =
 8006a32:	790b      	ldrb	r3, [r1, #4]
 8006a34:	7113      	strb	r3, [r2, #4]
		(*(pbuffer + 4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer + 5)) & 0xF;
 8006a36:	794b      	ldrb	r3, [r1, #5]
 8006a38:	f003 030f 	and.w	r3, r3, #15
	pdata->global_config__spad_enables_ref_5 =
 8006a3c:	7153      	strb	r3, [r2, #5]
	pdata->global_config__ref_en_start_select =
 8006a3e:	798b      	ldrb	r3, [r1, #6]
 8006a40:	7193      	strb	r3, [r2, #6]
		(*(pbuffer + 6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer + 7)) & 0x3F;
 8006a42:	79cb      	ldrb	r3, [r1, #7]
 8006a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_man__num_requested_ref_spads =
 8006a48:	71d3      	strb	r3, [r2, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer + 8)) & 0x3;
 8006a4a:	7a0b      	ldrb	r3, [r1, #8]
 8006a4c:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_man__ref_location =
 8006a50:	7213      	strb	r3, [r2, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 9));
 8006a52:	3109      	adds	r1, #9
 8006a54:	2002      	movs	r0, #2
 8006a56:	f7ff fd32 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8006a5a:	8160      	strh	r0, [r4, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 11));
 8006a5c:	f105 010b 	add.w	r1, r5, #11
 8006a60:	2002      	movs	r0, #2
 8006a62:	f7ff fd4a 	bl	80064fa <VL53L1_i2c_decode_int16_t>
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8006a66:	81a0      	strh	r0, [r4, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 13));
 8006a68:	f105 010d 	add.w	r1, r5, #13
 8006a6c:	2002      	movs	r0, #2
 8006a6e:	f7ff fd44 	bl	80064fa <VL53L1_i2c_decode_int16_t>
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8006a72:	81e0      	strh	r0, [r4, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 15));
 8006a74:	f105 010f 	add.w	r1, r5, #15
 8006a78:	2002      	movs	r0, #2
 8006a7a:	f7ff fd20 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->ref_spad_char__total_rate_target_mcps =
 8006a7e:	8220      	strh	r0, [r4, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 17)) & 0x1FFF;
 8006a80:	f105 0111 	add.w	r1, r5, #17
 8006a84:	2002      	movs	r0, #2
 8006a86:	f7ff fd38 	bl	80064fa <VL53L1_i2c_decode_int16_t>
 8006a8a:	f3c0 000c 	ubfx	r0, r0, #0, #13
	pdata->algo__part_to_part_range_offset_mm =
 8006a8e:	8260      	strh	r0, [r4, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 19));
 8006a90:	f105 0113 	add.w	r1, r5, #19
 8006a94:	2002      	movs	r0, #2
 8006a96:	f7ff fd30 	bl	80064fa <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__inner_offset_mm =
 8006a9a:	82a0      	strh	r0, [r4, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 21));
 8006a9c:	f105 0115 	add.w	r1, r5, #21
 8006aa0:	2002      	movs	r0, #2
 8006aa2:	f7ff fd2a 	bl	80064fa <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
 8006aa6:	82e0      	strh	r0, [r4, #22]

	LOG_FUNCTION_END(status);

	return status;
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006aac:	f06f 0009 	mvn.w	r0, #9
 8006ab0:	4770      	bx	lr

08006ab2 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8006ab2:	b510      	push	{r4, lr}
 8006ab4:	b086      	sub	sp, #24
 8006ab6:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 8006ab8:	2317      	movs	r3, #23
 8006aba:	466a      	mov	r2, sp
 8006abc:	210d      	movs	r1, #13
 8006abe:	f009 fd9d 	bl	80105fc <VL53L1_ReadMulti>
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	b110      	cbz	r0, 8006acc <VL53L1_get_customer_nvm_managed+0x1a>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	b006      	add	sp, #24
 8006aca:	bd10      	pop	{r4, pc}
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8006acc:	4622      	mov	r2, r4
 8006ace:	4669      	mov	r1, sp
 8006ad0:	2017      	movs	r0, #23
 8006ad2:	f7ff ffa1 	bl	8006a18 <VL53L1_i2c_decode_customer_nvm_managed>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	e7f5      	b.n	8006ac6 <VL53L1_get_customer_nvm_managed+0x14>

08006ada <VL53L1_i2c_encode_static_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8006ada:	291f      	cmp	r1, #31
 8006adc:	d968      	bls.n	8006bb0 <VL53L1_i2c_encode_static_config+0xd6>
{
 8006ade:	b538      	push	{r3, r4, r5, lr}
 8006ae0:	4614      	mov	r4, r2
 8006ae2:	4605      	mov	r5, r0
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	VL53L1_i2c_encode_uint16_t(
 8006ae4:	2102      	movs	r1, #2
 8006ae6:	8800      	ldrh	r0, [r0, #0]
 8006ae8:	f7ff fcd9 	bl	800649e <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer + 0);
	*(pbuffer + 2) =
		pdata->debug__ctrl & 0x1;
 8006aec:	78ab      	ldrb	r3, [r5, #2]
 8006aee:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 2) =
 8006af2:	70a3      	strb	r3, [r4, #2]
	*(pbuffer + 3) =
		pdata->test_mode__ctrl & 0xF;
 8006af4:	78eb      	ldrb	r3, [r5, #3]
 8006af6:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 3) =
 8006afa:	70e3      	strb	r3, [r4, #3]
	*(pbuffer + 4) =
		pdata->clk_gating__ctrl & 0xF;
 8006afc:	792b      	ldrb	r3, [r5, #4]
 8006afe:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 4) =
 8006b02:	7123      	strb	r3, [r4, #4]
	*(pbuffer + 5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8006b04:	796b      	ldrb	r3, [r5, #5]
 8006b06:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer + 5) =
 8006b0a:	7163      	strb	r3, [r4, #5]
	*(pbuffer + 6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8006b0c:	79ab      	ldrb	r3, [r5, #6]
 8006b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 6) =
 8006b12:	71a3      	strb	r3, [r4, #6]
	*(pbuffer + 7) =
		pdata->nvm_bist__start_address & 0x7F;
 8006b14:	79eb      	ldrb	r3, [r5, #7]
 8006b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 7) =
 8006b1a:	71e3      	strb	r3, [r4, #7]
	*(pbuffer + 8) =
		pdata->host_if__status & 0x1;
 8006b1c:	7a2b      	ldrb	r3, [r5, #8]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 8) =
 8006b22:	7223      	strb	r3, [r4, #8]
	*(pbuffer + 9) =
		pdata->pad_i2c_hv__config;
 8006b24:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer + 9) =
 8006b26:	7263      	strb	r3, [r4, #9]
	*(pbuffer + 10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8006b28:	7aab      	ldrb	r3, [r5, #10]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 10) =
 8006b2e:	72a3      	strb	r3, [r4, #10]
	*(pbuffer + 11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8006b30:	7aeb      	ldrb	r3, [r5, #11]
 8006b32:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 11) =
 8006b36:	72e3      	strb	r3, [r4, #11]
	*(pbuffer + 12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8006b38:	7b2b      	ldrb	r3, [r5, #12]
 8006b3a:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer + 12) =
 8006b3e:	7323      	strb	r3, [r4, #12]
	*(pbuffer + 13) =
		pdata->gpio__tio_hv_status & 0x3;
 8006b40:	7b6b      	ldrb	r3, [r5, #13]
 8006b42:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 13) =
 8006b46:	7363      	strb	r3, [r4, #13]
	*(pbuffer + 14) =
		pdata->gpio__fio_hv_status & 0x3;
 8006b48:	7bab      	ldrb	r3, [r5, #14]
 8006b4a:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 14) =
 8006b4e:	73a3      	strb	r3, [r4, #14]
	*(pbuffer + 15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8006b50:	7beb      	ldrb	r3, [r5, #15]
 8006b52:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer + 15) =
 8006b56:	73e3      	strb	r3, [r4, #15]
	*(pbuffer + 16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8006b58:	7c2b      	ldrb	r3, [r5, #16]
 8006b5a:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer + 16) =
 8006b5e:	7423      	strb	r3, [r4, #16]
	*(pbuffer + 17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8006b60:	7c6b      	ldrb	r3, [r5, #17]
 8006b62:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 17) =
 8006b66:	7463      	strb	r3, [r4, #17]
	*(pbuffer + 18) =
		pdata->sigma_estimator__effective_pulse_width_ns;
 8006b68:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer + 18) =
 8006b6a:	74a3      	strb	r3, [r4, #18]
	*(pbuffer + 19) =
		pdata->sigma_estimator__effective_ambient_width_ns;
 8006b6c:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer + 19) =
 8006b6e:	74e3      	strb	r3, [r4, #19]
	*(pbuffer + 20) =
		pdata->sigma_estimator__sigma_ref_mm;
 8006b70:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer + 20) =
 8006b72:	7523      	strb	r3, [r4, #20]
	*(pbuffer + 21) =
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8006b74:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer + 21) =
 8006b76:	7563      	strb	r3, [r4, #21]
	*(pbuffer + 22) =
		pdata->spare_host_config__static_config_spare_0;
 8006b78:	7dab      	ldrb	r3, [r5, #22]
	*(pbuffer + 22) =
 8006b7a:	75a3      	strb	r3, [r4, #22]
	*(pbuffer + 23) =
		pdata->spare_host_config__static_config_spare_1;
 8006b7c:	7deb      	ldrb	r3, [r5, #23]
	*(pbuffer + 23) =
 8006b7e:	75e3      	strb	r3, [r4, #23]
	VL53L1_i2c_encode_uint16_t(
 8006b80:	f104 0218 	add.w	r2, r4, #24
 8006b84:	2102      	movs	r1, #2
 8006b86:	8b28      	ldrh	r0, [r5, #24]
 8006b88:	f7ff fc89 	bl	800649e <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer + 24);
	*(pbuffer + 26) =
		pdata->algo__range_ignore_valid_height_mm;
 8006b8c:	7eab      	ldrb	r3, [r5, #26]
	*(pbuffer + 26) =
 8006b8e:	76a3      	strb	r3, [r4, #26]
	*(pbuffer + 27) =
		pdata->algo__range_min_clip;
 8006b90:	7eeb      	ldrb	r3, [r5, #27]
	*(pbuffer + 27) =
 8006b92:	76e3      	strb	r3, [r4, #27]
	*(pbuffer + 28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8006b94:	7f2b      	ldrb	r3, [r5, #28]
 8006b96:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 28) =
 8006b9a:	7723      	strb	r3, [r4, #28]
	*(pbuffer + 29) =
		pdata->spare_host_config__static_config_spare_2;
 8006b9c:	7f6b      	ldrb	r3, [r5, #29]
	*(pbuffer + 29) =
 8006b9e:	7763      	strb	r3, [r4, #29]
	*(pbuffer + 30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8006ba0:	7fab      	ldrb	r3, [r5, #30]
 8006ba2:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 30) =
 8006ba6:	77a3      	strb	r3, [r4, #30]
	*(pbuffer + 31) =
		pdata->sd_config__reset_stages_lsb;
 8006ba8:	7feb      	ldrb	r3, [r5, #31]
	*(pbuffer + 31) =
 8006baa:	77e3      	strb	r3, [r4, #31]
	LOG_FUNCTION_END(status);


	return status;
 8006bac:	2000      	movs	r0, #0
 8006bae:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006bb0:	f06f 0009 	mvn.w	r0, #9
 8006bb4:	4770      	bx	lr

08006bb6 <VL53L1_i2c_encode_general_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8006bb6:	2915      	cmp	r1, #21
 8006bb8:	d93f      	bls.n	8006c3a <VL53L1_i2c_encode_general_config+0x84>
{
 8006bba:	b538      	push	{r3, r4, r5, lr}
 8006bbc:	4614      	mov	r4, r2
 8006bbe:	4605      	mov	r5, r0
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->gph_config__stream_count_update_value;
 8006bc0:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer + 0) =
 8006bc2:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->global_config__stream_divider;
 8006bc4:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer + 1) =
 8006bc6:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->system__interrupt_config_gpio;
 8006bc8:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer + 2) =
 8006bca:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8006bcc:	78c3      	ldrb	r3, [r0, #3]
 8006bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 3) =
 8006bd2:	70d3      	strb	r3, [r2, #3]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8006bd4:	8880      	ldrh	r0, [r0, #4]
	VL53L1_i2c_encode_uint16_t(
 8006bd6:	3204      	adds	r2, #4
 8006bd8:	2102      	movs	r1, #2
 8006bda:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8006bde:	f7ff fc5e 	bl	800649e <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer + 4);
	*(pbuffer + 6) =
		pdata->global_config__vcsel_width & 0x7F;
 8006be2:	79ab      	ldrb	r3, [r5, #6]
 8006be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 6) =
 8006be8:	71a3      	strb	r3, [r4, #6]
	*(pbuffer + 7) =
		pdata->phasecal_config__timeout_macrop;
 8006bea:	79eb      	ldrb	r3, [r5, #7]
	*(pbuffer + 7) =
 8006bec:	71e3      	strb	r3, [r4, #7]
	*(pbuffer + 8) =
		pdata->phasecal_config__target;
 8006bee:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer + 8) =
 8006bf0:	7223      	strb	r3, [r4, #8]
	*(pbuffer + 9) =
		pdata->phasecal_config__override & 0x1;
 8006bf2:	7a6b      	ldrb	r3, [r5, #9]
 8006bf4:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 9) =
 8006bf8:	7263      	strb	r3, [r4, #9]
	*(pbuffer + 11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8006bfa:	7aab      	ldrb	r3, [r5, #10]
 8006bfc:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer + 11) =
 8006c00:	72e3      	strb	r3, [r4, #11]
	VL53L1_i2c_encode_uint16_t(
 8006c02:	f104 020c 	add.w	r2, r4, #12
 8006c06:	2102      	movs	r1, #2
 8006c08:	89a8      	ldrh	r0, [r5, #12]
 8006c0a:	f7ff fc48 	bl	800649e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer + 12);
	VL53L1_i2c_encode_uint16_t(
 8006c0e:	f104 020e 	add.w	r2, r4, #14
 8006c12:	2102      	movs	r1, #2
 8006c14:	89e8      	ldrh	r0, [r5, #14]
 8006c16:	f7ff fc42 	bl	800649e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer + 14);
	VL53L1_i2c_encode_uint16_t(
 8006c1a:	f104 0210 	add.w	r2, r4, #16
 8006c1e:	2102      	movs	r1, #2
 8006c20:	8a28      	ldrh	r0, [r5, #16]
 8006c22:	f7ff fc3c 	bl	800649e <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer + 16);
	*(pbuffer + 18) =
		pdata->dss_config__manual_block_select;
 8006c26:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer + 18) =
 8006c28:	74a3      	strb	r3, [r4, #18]
	*(pbuffer + 19) =
		pdata->dss_config__aperture_attenuation;
 8006c2a:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer + 19) =
 8006c2c:	74e3      	strb	r3, [r4, #19]
	*(pbuffer + 20) =
		pdata->dss_config__max_spads_limit;
 8006c2e:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer + 20) =
 8006c30:	7523      	strb	r3, [r4, #20]
	*(pbuffer + 21) =
		pdata->dss_config__min_spads_limit;
 8006c32:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer + 21) =
 8006c34:	7563      	strb	r3, [r4, #21]
	LOG_FUNCTION_END(status);


	return status;
 8006c36:	2000      	movs	r0, #0
 8006c38:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006c3a:	f06f 0009 	mvn.w	r0, #9
 8006c3e:	4770      	bx	lr

08006c40 <VL53L1_i2c_encode_timing_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8006c40:	2916      	cmp	r1, #22
 8006c42:	d93d      	bls.n	8006cc0 <VL53L1_i2c_encode_timing_config+0x80>
{
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	4614      	mov	r4, r2
 8006c48:	4605      	mov	r5, r0
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8006c4a:	7803      	ldrb	r3, [r0, #0]
 8006c4c:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 0) =
 8006c50:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->mm_config__timeout_macrop_a_lo;
 8006c52:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer + 1) =
 8006c54:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8006c56:	7883      	ldrb	r3, [r0, #2]
 8006c58:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 2) =
 8006c5c:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->mm_config__timeout_macrop_b_lo;
 8006c5e:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer + 3) =
 8006c60:	70d3      	strb	r3, [r2, #3]
	*(pbuffer + 4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8006c62:	7903      	ldrb	r3, [r0, #4]
 8006c64:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 4) =
 8006c68:	7113      	strb	r3, [r2, #4]
	*(pbuffer + 5) =
		pdata->range_config__timeout_macrop_a_lo;
 8006c6a:	7943      	ldrb	r3, [r0, #5]
	*(pbuffer + 5) =
 8006c6c:	7153      	strb	r3, [r2, #5]
	*(pbuffer + 6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8006c6e:	7983      	ldrb	r3, [r0, #6]
 8006c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer + 6) =
 8006c74:	7193      	strb	r3, [r2, #6]
	*(pbuffer + 7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8006c76:	79c3      	ldrb	r3, [r0, #7]
 8006c78:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 7) =
 8006c7c:	71d3      	strb	r3, [r2, #7]
	*(pbuffer + 8) =
		pdata->range_config__timeout_macrop_b_lo;
 8006c7e:	7a03      	ldrb	r3, [r0, #8]
	*(pbuffer + 8) =
 8006c80:	7213      	strb	r3, [r2, #8]
	*(pbuffer + 9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8006c82:	7a43      	ldrb	r3, [r0, #9]
 8006c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer + 9) =
 8006c88:	7253      	strb	r3, [r2, #9]
	VL53L1_i2c_encode_uint16_t(
 8006c8a:	320a      	adds	r2, #10
 8006c8c:	2102      	movs	r1, #2
 8006c8e:	8940      	ldrh	r0, [r0, #10]
 8006c90:	f7ff fc05 	bl	800649e <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer + 10);
	VL53L1_i2c_encode_uint16_t(
 8006c94:	f104 020c 	add.w	r2, r4, #12
 8006c98:	2102      	movs	r1, #2
 8006c9a:	89a8      	ldrh	r0, [r5, #12]
 8006c9c:	f7ff fbff 	bl	800649e <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer + 12);
	*(pbuffer + 14) =
		pdata->range_config__valid_phase_low;
 8006ca0:	7bab      	ldrb	r3, [r5, #14]
	*(pbuffer + 14) =
 8006ca2:	73a3      	strb	r3, [r4, #14]
	*(pbuffer + 15) =
		pdata->range_config__valid_phase_high;
 8006ca4:	7beb      	ldrb	r3, [r5, #15]
	*(pbuffer + 15) =
 8006ca6:	73e3      	strb	r3, [r4, #15]
	VL53L1_i2c_encode_uint32_t(
 8006ca8:	f104 0212 	add.w	r2, r4, #18
 8006cac:	2104      	movs	r1, #4
 8006cae:	6928      	ldr	r0, [r5, #16]
 8006cb0:	f7ff fc38 	bl	8006524 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer + 18);
	*(pbuffer + 22) =
		pdata->system__fractional_enable & 0x1;
 8006cb4:	7d2b      	ldrb	r3, [r5, #20]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 22) =
 8006cba:	75a3      	strb	r3, [r4, #22]
	LOG_FUNCTION_END(status);


	return status;
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006cc0:	f06f 0009 	mvn.w	r0, #9
 8006cc4:	4770      	bx	lr

08006cc6 <VL53L1_i2c_encode_dynamic_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8006cc6:	2911      	cmp	r1, #17
 8006cc8:	d93c      	bls.n	8006d44 <VL53L1_i2c_encode_dynamic_config+0x7e>
{
 8006cca:	b538      	push	{r3, r4, r5, lr}
 8006ccc:	4615      	mov	r5, r2
 8006cce:	4604      	mov	r4, r0
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8006cd0:	7803      	ldrb	r3, [r0, #0]
 8006cd2:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 0) =
 8006cd6:	f802 3b01 	strb.w	r3, [r2], #1
	VL53L1_i2c_encode_uint16_t(
 8006cda:	2102      	movs	r1, #2
 8006cdc:	8840      	ldrh	r0, [r0, #2]
 8006cde:	f7ff fbde 	bl	800649e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer + 1);
	VL53L1_i2c_encode_uint16_t(
 8006ce2:	1cea      	adds	r2, r5, #3
 8006ce4:	2102      	movs	r1, #2
 8006ce6:	88a0      	ldrh	r0, [r4, #4]
 8006ce8:	f7ff fbd9 	bl	800649e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer + 3);
	*(pbuffer + 5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8006cec:	79a3      	ldrb	r3, [r4, #6]
 8006cee:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 5) =
 8006cf2:	716b      	strb	r3, [r5, #5]
	*(pbuffer + 6) =
		pdata->system__seed_config & 0x7;
 8006cf4:	79e3      	ldrb	r3, [r4, #7]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer + 6) =
 8006cfa:	71ab      	strb	r3, [r5, #6]
	*(pbuffer + 7) =
		pdata->sd_config__woi_sd0;
 8006cfc:	7a23      	ldrb	r3, [r4, #8]
	*(pbuffer + 7) =
 8006cfe:	71eb      	strb	r3, [r5, #7]
	*(pbuffer + 8) =
		pdata->sd_config__woi_sd1;
 8006d00:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer + 8) =
 8006d02:	722b      	strb	r3, [r5, #8]
	*(pbuffer + 9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8006d04:	7aa3      	ldrb	r3, [r4, #10]
 8006d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 9) =
 8006d0a:	726b      	strb	r3, [r5, #9]
	*(pbuffer + 10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8006d0c:	7ae3      	ldrb	r3, [r4, #11]
 8006d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 10) =
 8006d12:	72ab      	strb	r3, [r5, #10]
	*(pbuffer + 11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8006d14:	7b23      	ldrb	r3, [r4, #12]
 8006d16:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 11) =
 8006d1a:	72eb      	strb	r3, [r5, #11]
	*(pbuffer + 12) =
		pdata->sd_config__first_order_select & 0x3;
 8006d1c:	7b63      	ldrb	r3, [r4, #13]
 8006d1e:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 12) =
 8006d22:	732b      	strb	r3, [r5, #12]
	*(pbuffer + 13) =
		pdata->sd_config__quantifier & 0xF;
 8006d24:	7ba3      	ldrb	r3, [r4, #14]
 8006d26:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 13) =
 8006d2a:	736b      	strb	r3, [r5, #13]
	*(pbuffer + 14) =
		pdata->roi_config__user_roi_centre_spad;
 8006d2c:	7be3      	ldrb	r3, [r4, #15]
	*(pbuffer + 14) =
 8006d2e:	73ab      	strb	r3, [r5, #14]
	*(pbuffer + 15) =
		pdata->roi_config__user_roi_requested_global_xy_size;
 8006d30:	7c23      	ldrb	r3, [r4, #16]
	*(pbuffer + 15) =
 8006d32:	73eb      	strb	r3, [r5, #15]
	*(pbuffer + 16) =
		pdata->system__sequence_config;
 8006d34:	7c63      	ldrb	r3, [r4, #17]
	*(pbuffer + 16) =
 8006d36:	742b      	strb	r3, [r5, #16]
	*(pbuffer + 17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8006d38:	7ca3      	ldrb	r3, [r4, #18]
 8006d3a:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 17) =
 8006d3e:	746b      	strb	r3, [r5, #17]
	LOG_FUNCTION_END(status);


	return status;
 8006d40:	2000      	movs	r0, #0
 8006d42:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006d44:	f06f 0009 	mvn.w	r0, #9
 8006d48:	4770      	bx	lr

08006d4a <VL53L1_i2c_encode_system_control>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8006d4a:	2904      	cmp	r1, #4
 8006d4c:	d913      	bls.n	8006d76 <VL53L1_i2c_encode_system_control+0x2c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->power_management__go1_power_force & 0x1;
 8006d4e:	7803      	ldrb	r3, [r0, #0]
 8006d50:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 0) =
 8006d54:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->system__stream_count_ctrl & 0x1;
 8006d56:	7843      	ldrb	r3, [r0, #1]
 8006d58:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 1) =
 8006d5c:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->firmware__enable & 0x1;
 8006d5e:	7883      	ldrb	r3, [r0, #2]
 8006d60:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 2) =
 8006d64:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->system__interrupt_clear & 0x3;
 8006d66:	78c3      	ldrb	r3, [r0, #3]
 8006d68:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 3) =
 8006d6c:	70d3      	strb	r3, [r2, #3]
	*(pbuffer + 4) =
		pdata->system__mode_start;
 8006d6e:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer + 4) =
 8006d70:	7113      	strb	r3, [r2, #4]
	LOG_FUNCTION_END(status);


	return status;
 8006d72:	2000      	movs	r0, #0
 8006d74:	4770      	bx	lr
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006d76:	f06f 0009 	mvn.w	r0, #9
}
 8006d7a:	4770      	bx	lr

08006d7c <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV Dev,
	VL53L1_system_control_t   *pdata)
{
 8006d7c:	b510      	push	{r4, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	4604      	mov	r4, r0
 8006d82:	4608      	mov	r0, r1
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_i2c_encode_system_control(
 8006d84:	466a      	mov	r2, sp
 8006d86:	2105      	movs	r1, #5
 8006d88:	f7ff ffdf 	bl	8006d4a <VL53L1_i2c_encode_system_control>
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	b110      	cbz	r0, 8006d96 <VL53L1_set_system_control+0x1a>
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	b002      	add	sp, #8
 8006d94:	bd10      	pop	{r4, pc}
		status = VL53L1_WriteMulti(
 8006d96:	2305      	movs	r3, #5
 8006d98:	466a      	mov	r2, sp
 8006d9a:	2183      	movs	r1, #131	; 0x83
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f009 fc0f 	bl	80105c0 <VL53L1_WriteMulti>
 8006da2:	4603      	mov	r3, r0
 8006da4:	e7f4      	b.n	8006d90 <VL53L1_set_system_control+0x14>

08006da6 <VL53L1_i2c_decode_system_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 8006da6:	282b      	cmp	r0, #43	; 0x2b
 8006da8:	f240 8089 	bls.w	8006ebe <VL53L1_i2c_decode_system_results+0x118>
{
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4614      	mov	r4, r2
 8006db0:	460d      	mov	r5, r1
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result__interrupt_status =
		(*(pbuffer + 0)) & 0x3F;
 8006db2:	780b      	ldrb	r3, [r1, #0]
 8006db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->result__interrupt_status =
 8006db8:	7013      	strb	r3, [r2, #0]
	pdata->result__range_status =
 8006dba:	784b      	ldrb	r3, [r1, #1]
 8006dbc:	7053      	strb	r3, [r2, #1]
		(*(pbuffer + 1));
	pdata->result__report_status =
		(*(pbuffer + 2)) & 0xF;
 8006dbe:	788b      	ldrb	r3, [r1, #2]
 8006dc0:	f003 030f 	and.w	r3, r3, #15
	pdata->result__report_status =
 8006dc4:	7093      	strb	r3, [r2, #2]
	pdata->result__stream_count =
 8006dc6:	78cb      	ldrb	r3, [r1, #3]
 8006dc8:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer + 3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 4));
 8006dca:	3104      	adds	r1, #4
 8006dcc:	2002      	movs	r0, #2
 8006dce:	f7ff fb76 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd0 =
 8006dd2:	80a0      	strh	r0, [r4, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 6));
 8006dd4:	1da9      	adds	r1, r5, #6
 8006dd6:	2002      	movs	r0, #2
 8006dd8:	f7ff fb71 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8006ddc:	80e0      	strh	r0, [r4, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 8));
 8006dde:	f105 0108 	add.w	r1, r5, #8
 8006de2:	2002      	movs	r0, #2
 8006de4:	f7ff fb6b 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd0 =
 8006de8:	8120      	strh	r0, [r4, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 10));
 8006dea:	f105 010a 	add.w	r1, r5, #10
 8006dee:	2002      	movs	r0, #2
 8006df0:	f7ff fb65 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd0 =
 8006df4:	8160      	strh	r0, [r4, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 12));
 8006df6:	f105 010c 	add.w	r1, r5, #12
 8006dfa:	2002      	movs	r0, #2
 8006dfc:	f7ff fb5f 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd0 =
 8006e00:	81a0      	strh	r0, [r4, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 14));
 8006e02:	f105 010e 	add.w	r1, r5, #14
 8006e06:	2002      	movs	r0, #2
 8006e08:	f7ff fb59 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8006e0c:	81e0      	strh	r0, [r4, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 16));
 8006e0e:	f105 0110 	add.w	r1, r5, #16
 8006e12:	2002      	movs	r0, #2
 8006e14:	f7ff fb53 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8006e18:	8220      	strh	r0, [r4, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 18));
 8006e1a:	f105 0112 	add.w	r1, r5, #18
 8006e1e:	2002      	movs	r0, #2
 8006e20:	f7ff fb4d 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8006e24:	8260      	strh	r0, [r4, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 20));
 8006e26:	f105 0114 	add.w	r1, r5, #20
 8006e2a:	2002      	movs	r0, #2
 8006e2c:	f7ff fb47 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8006e30:	82a0      	strh	r0, [r4, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 22));
 8006e32:	f105 0116 	add.w	r1, r5, #22
 8006e36:	2002      	movs	r0, #2
 8006e38:	f7ff fb41 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8006e3c:	82e0      	strh	r0, [r4, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 24));
 8006e3e:	f105 0118 	add.w	r1, r5, #24
 8006e42:	2002      	movs	r0, #2
 8006e44:	f7ff fb3b 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd1 =
 8006e48:	8320      	strh	r0, [r4, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 26));
 8006e4a:	f105 011a 	add.w	r1, r5, #26
 8006e4e:	2002      	movs	r0, #2
 8006e50:	f7ff fb35 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8006e54:	8360      	strh	r0, [r4, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 28));
 8006e56:	f105 011c 	add.w	r1, r5, #28
 8006e5a:	2002      	movs	r0, #2
 8006e5c:	f7ff fb2f 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd1 =
 8006e60:	83a0      	strh	r0, [r4, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 30));
 8006e62:	f105 011e 	add.w	r1, r5, #30
 8006e66:	2002      	movs	r0, #2
 8006e68:	f7ff fb29 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd1 =
 8006e6c:	83e0      	strh	r0, [r4, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 32));
 8006e6e:	f105 0120 	add.w	r1, r5, #32
 8006e72:	2002      	movs	r0, #2
 8006e74:	f7ff fb23 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd1 =
 8006e78:	8420      	strh	r0, [r4, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 34));
 8006e7a:	f105 0122 	add.w	r1, r5, #34	; 0x22
 8006e7e:	2002      	movs	r0, #2
 8006e80:	f7ff fb1d 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8006e84:	8460      	strh	r0, [r4, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 36));
 8006e86:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8006e8a:	2002      	movs	r0, #2
 8006e8c:	f7ff fb17 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_0_sd1 =
 8006e90:	84a0      	strh	r0, [r4, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 38));
 8006e92:	f105 0126 	add.w	r1, r5, #38	; 0x26
 8006e96:	2002      	movs	r0, #2
 8006e98:	f7ff fb11 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_1_sd1 =
 8006e9c:	84e0      	strh	r0, [r4, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 40));
 8006e9e:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8006ea2:	2002      	movs	r0, #2
 8006ea4:	f7ff fb0b 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
 8006ea8:	8520      	strh	r0, [r4, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8006eaa:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 8006eae:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer + 42));
	pdata->result__thresh_info =
 8006eb2:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8006eb6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer + 43));

	LOG_FUNCTION_END(status);

	return status;
 8006eba:	2000      	movs	r0, #0
 8006ebc:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006ebe:	f06f 0009 	mvn.w	r0, #9
 8006ec2:	4770      	bx	lr

08006ec4 <VL53L1_i2c_decode_core_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8006ec4:	2820      	cmp	r0, #32
 8006ec6:	d935      	bls.n	8006f34 <VL53L1_i2c_decode_core_results+0x70>
{
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4614      	mov	r4, r2
 8006ecc:	460d      	mov	r5, r1
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 0));
 8006ece:	2004      	movs	r0, #4
 8006ed0:	f7ff fb38 	bl	8006544 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd0 =
 8006ed4:	6020      	str	r0, [r4, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 4));
 8006ed6:	1d29      	adds	r1, r5, #4
 8006ed8:	2004      	movs	r0, #4
 8006eda:	f7ff fb33 	bl	8006544 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd0 =
 8006ede:	6060      	str	r0, [r4, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer + 8));
 8006ee0:	f105 0108 	add.w	r1, r5, #8
 8006ee4:	2004      	movs	r0, #4
 8006ee6:	f7ff fb3a 	bl	800655e <VL53L1_i2c_decode_int32_t>
	pdata->result_core__signal_total_events_sd0 =
 8006eea:	60a0      	str	r0, [r4, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 12));
 8006eec:	f105 010c 	add.w	r1, r5, #12
 8006ef0:	2004      	movs	r0, #4
 8006ef2:	f7ff fb27 	bl	8006544 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd0 =
 8006ef6:	60e0      	str	r0, [r4, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 16));
 8006ef8:	f105 0110 	add.w	r1, r5, #16
 8006efc:	2004      	movs	r0, #4
 8006efe:	f7ff fb21 	bl	8006544 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd1 =
 8006f02:	6120      	str	r0, [r4, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 20));
 8006f04:	f105 0114 	add.w	r1, r5, #20
 8006f08:	2004      	movs	r0, #4
 8006f0a:	f7ff fb1b 	bl	8006544 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd1 =
 8006f0e:	6160      	str	r0, [r4, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer + 24));
 8006f10:	f105 0118 	add.w	r1, r5, #24
 8006f14:	2004      	movs	r0, #4
 8006f16:	f7ff fb22 	bl	800655e <VL53L1_i2c_decode_int32_t>
	pdata->result_core__signal_total_events_sd1 =
 8006f1a:	61a0      	str	r0, [r4, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 28));
 8006f1c:	f105 011c 	add.w	r1, r5, #28
 8006f20:	2004      	movs	r0, #4
 8006f22:	f7ff fb0f 	bl	8006544 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
 8006f26:	61e0      	str	r0, [r4, #28]
	pdata->result_core__spare_0 =
 8006f28:	f895 3020 	ldrb.w	r3, [r5, #32]
 8006f2c:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer + 32));

	LOG_FUNCTION_END(status);

	return status;
 8006f30:	2000      	movs	r0, #0
 8006f32:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006f34:	f06f 0009 	mvn.w	r0, #9
 8006f38:	4770      	bx	lr

08006f3a <VL53L1_i2c_decode_debug_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8006f3a:	2837      	cmp	r0, #55	; 0x37
 8006f3c:	f240 80d3 	bls.w	80070e6 <VL53L1_i2c_decode_debug_results+0x1ac>
{
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4614      	mov	r4, r2
 8006f44:	460d      	mov	r5, r1
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 0));
 8006f46:	2002      	movs	r0, #2
 8006f48:	f7ff fab9 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->phasecal_result__reference_phase =
 8006f4c:	8020      	strh	r0, [r4, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer + 2)) & 0x7F;
 8006f4e:	78ab      	ldrb	r3, [r5, #2]
 8006f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->phasecal_result__vcsel_start =
 8006f54:	70a3      	strb	r3, [r4, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer + 3)) & 0x3F;
 8006f56:	78eb      	ldrb	r3, [r5, #3]
 8006f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8006f5c:	70e3      	strb	r3, [r4, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer + 4)) & 0x3;
 8006f5e:	792b      	ldrb	r3, [r5, #4]
 8006f60:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_char_result__ref_location =
 8006f64:	7123      	strb	r3, [r4, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer + 5)) & 0x1;
 8006f66:	796b      	ldrb	r3, [r5, #5]
 8006f68:	f003 0301 	and.w	r3, r3, #1
	pdata->vhv_result__coldboot_status =
 8006f6c:	7163      	strb	r3, [r4, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer + 6)) & 0x3F;
 8006f6e:	79ab      	ldrb	r3, [r5, #6]
 8006f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__search_result =
 8006f74:	71a3      	strb	r3, [r4, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer + 7)) & 0x3F;
 8006f76:	79eb      	ldrb	r3, [r5, #7]
 8006f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__latest_setting =
 8006f7c:	71e3      	strb	r3, [r4, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 8)) & 0x3FF;
 8006f7e:	f105 0108 	add.w	r1, r5, #8
 8006f82:	2002      	movs	r0, #2
 8006f84:	f7ff fa9b 	bl	80064be <VL53L1_i2c_decode_uint16_t>
 8006f88:	f3c0 0009 	ubfx	r0, r0, #0, #10
	pdata->result__osc_calibrate_val =
 8006f8c:	8120      	strh	r0, [r4, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer + 10)) & 0x3;
 8006f8e:	7aab      	ldrb	r3, [r5, #10]
 8006f90:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__powerdown_go1 =
 8006f94:	72a3      	strb	r3, [r4, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer + 11)) & 0x3;
 8006f96:	7aeb      	ldrb	r3, [r5, #11]
 8006f98:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__ref_bg_ctrl =
 8006f9c:	72e3      	strb	r3, [r4, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer + 12)) & 0xF;
 8006f9e:	7b2b      	ldrb	r3, [r5, #12]
 8006fa0:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__regdvdd1v2_ctrl =
 8006fa4:	7323      	strb	r3, [r4, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer + 13)) & 0x7;
 8006fa6:	7b6b      	ldrb	r3, [r5, #13]
 8006fa8:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__osc_slow_ctrl =
 8006fac:	7363      	strb	r3, [r4, #13]
	pdata->test_mode__status =
		(*(pbuffer + 14)) & 0x1;
 8006fae:	7bab      	ldrb	r3, [r5, #14]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
	pdata->test_mode__status =
 8006fb4:	73a3      	strb	r3, [r4, #14]
	pdata->firmware__system_status =
		(*(pbuffer + 15)) & 0x3;
 8006fb6:	7beb      	ldrb	r3, [r5, #15]
 8006fb8:	f003 0303 	and.w	r3, r3, #3
	pdata->firmware__system_status =
 8006fbc:	73e3      	strb	r3, [r4, #15]
	pdata->firmware__mode_status =
 8006fbe:	7c2b      	ldrb	r3, [r5, #16]
 8006fc0:	7423      	strb	r3, [r4, #16]
		(*(pbuffer + 16));
	pdata->firmware__secondary_mode_status =
 8006fc2:	7c6b      	ldrb	r3, [r5, #17]
 8006fc4:	7463      	strb	r3, [r4, #17]
		(*(pbuffer + 17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 18)) & 0xFFF;
 8006fc6:	f105 0112 	add.w	r1, r5, #18
 8006fca:	2002      	movs	r0, #2
 8006fcc:	f7ff fa77 	bl	80064be <VL53L1_i2c_decode_uint16_t>
 8006fd0:	f3c0 000b 	ubfx	r0, r0, #0, #12
	pdata->firmware__cal_repeat_rate_counter =
 8006fd4:	8260      	strh	r0, [r4, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 22));
 8006fd6:	f105 0116 	add.w	r1, r5, #22
 8006fda:	2002      	movs	r0, #2
 8006fdc:	f7ff fa6f 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_high =
 8006fe0:	82a0      	strh	r0, [r4, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 24));
 8006fe2:	f105 0118 	add.w	r1, r5, #24
 8006fe6:	2002      	movs	r0, #2
 8006fe8:	f7ff fa69 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
 8006fec:	82e0      	strh	r0, [r4, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer + 26)) & 0x1;
 8006fee:	7eab      	ldrb	r3, [r5, #26]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__system__enable_xtalk_per_quadrant =
 8006ff4:	7623      	strb	r3, [r4, #24]
	pdata->gph__spare_0 =
		(*(pbuffer + 27)) & 0x7;
 8006ff6:	7eeb      	ldrb	r3, [r5, #27]
 8006ff8:	f003 0307 	and.w	r3, r3, #7
	pdata->gph__spare_0 =
 8006ffc:	7663      	strb	r3, [r4, #25]
	pdata->gph__sd_config__woi_sd0 =
 8006ffe:	7f2b      	ldrb	r3, [r5, #28]
 8007000:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer + 28));
	pdata->gph__sd_config__woi_sd1 =
 8007002:	7f6b      	ldrb	r3, [r5, #29]
 8007004:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer + 29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer + 30)) & 0x7F;
 8007006:	7fab      	ldrb	r3, [r5, #30]
 8007008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd0 =
 800700c:	7723      	strb	r3, [r4, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer + 31)) & 0x7F;
 800700e:	7feb      	ldrb	r3, [r5, #31]
 8007010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd1 =
 8007014:	7763      	strb	r3, [r4, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer + 32)) & 0x3;
 8007016:	f895 3020 	ldrb.w	r3, [r5, #32]
 800701a:	f003 0303 	and.w	r3, r3, #3
	pdata->gph__sd_config__first_order_select =
 800701e:	77a3      	strb	r3, [r4, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer + 33)) & 0xF;
 8007020:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8007024:	f003 030f 	and.w	r3, r3, #15
	pdata->gph__sd_config__quantifier =
 8007028:	77e3      	strb	r3, [r4, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800702a:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800702e:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer + 34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8007032:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8007036:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer + 35));
	pdata->gph__system__sequence_config =
 800703a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800703e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer + 36));
	pdata->gph__gph_id =
		(*(pbuffer + 37)) & 0x1;
 8007042:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8007046:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__gph_id =
 800704a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer + 38)) & 0x3;
 800704e:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8007052:	f003 0303 	and.w	r3, r3, #3
	pdata->system__interrupt_set =
 8007056:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer + 39)) & 0x1F;
 800705a:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 800705e:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__enables =
 8007062:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer + 40)) & 0x1F;
 8007066:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800706a:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__clear =
 800706e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer + 41)) & 0x1F;
 8007072:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8007076:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__status =
 800707a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer + 42)) & 0x1;
 800707e:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 8007082:	f003 0301 	and.w	r3, r3, #1
	pdata->mcu_to_host_bank__wr_access_en =
 8007086:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer + 43)) & 0x1;
 800708a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800708e:	f003 0301 	and.w	r3, r3, #1
	pdata->power_management__go1_reset_status =
 8007092:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer + 44)) & 0x3;
 8007096:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800709a:	f003 0303 	and.w	r3, r3, #3
	pdata->pad_startup_mode__value_ro =
 800709e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer + 45)) & 0x3F;
 80070a2:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 80070a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->pad_startup_mode__value_ctrl =
 80070aa:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 46)) & 0x3FFFF;
 80070ae:	f105 012e 	add.w	r1, r5, #46	; 0x2e
 80070b2:	2004      	movs	r0, #4
 80070b4:	f7ff fa46 	bl	8006544 <VL53L1_i2c_decode_uint32_t>
 80070b8:	f3c0 0011 	ubfx	r0, r0, #0, #18
	pdata->pll_period_us =
 80070bc:	62e0      	str	r0, [r4, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 50));
 80070be:	f105 0132 	add.w	r1, r5, #50	; 0x32
 80070c2:	2004      	movs	r0, #4
 80070c4:	f7ff fa3e 	bl	8006544 <VL53L1_i2c_decode_uint32_t>
	pdata->interrupt_scheduler__data_out =
 80070c8:	6320      	str	r0, [r4, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer + 54)) & 0x1;
 80070ca:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 80070ce:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__complete =
 80070d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer + 55)) & 0x1;
 80070d6:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 80070da:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__status =
 80070de:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 80070e2:	2000      	movs	r0, #0
 80070e4:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80070e6:	f06f 0009 	mvn.w	r0, #9
 80070ea:	4770      	bx	lr

080070ec <VL53L1_i2c_decode_nvm_copy_data>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 80070ec:	2830      	cmp	r0, #48	; 0x30
 80070ee:	f240 809f 	bls.w	8007230 <VL53L1_i2c_decode_nvm_copy_data+0x144>
{
 80070f2:	b538      	push	{r3, r4, r5, lr}
 80070f4:	4614      	mov	r4, r2
 80070f6:	460d      	mov	r5, r1
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->identification__model_id =
		(*(pbuffer + 0));
 80070f8:	780b      	ldrb	r3, [r1, #0]
	pdata->identification__model_id =
 80070fa:	7013      	strb	r3, [r2, #0]
	pdata->identification__module_type =
 80070fc:	784b      	ldrb	r3, [r1, #1]
 80070fe:	7053      	strb	r3, [r2, #1]
		(*(pbuffer + 1));
	pdata->identification__revision_id =
 8007100:	788b      	ldrb	r3, [r1, #2]
 8007102:	7093      	strb	r3, [r2, #2]
		(*(pbuffer + 2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 3));
 8007104:	3103      	adds	r1, #3
 8007106:	2002      	movs	r0, #2
 8007108:	f7ff f9d9 	bl	80064be <VL53L1_i2c_decode_uint16_t>
	pdata->identification__module_id =
 800710c:	80a0      	strh	r0, [r4, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer + 5)) & 0x7F;
 800710e:	796b      	ldrb	r3, [r5, #5]
 8007110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim_max =
 8007114:	71a3      	strb	r3, [r4, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer + 6)) & 0x7;
 8007116:	79ab      	ldrb	r3, [r5, #6]
 8007118:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__fast_osc__freq_set =
 800711c:	71e3      	strb	r3, [r4, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer + 7)) & 0x7;
 800711e:	79eb      	ldrb	r3, [r5, #7]
 8007120:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__vcsel_trim =
 8007124:	7223      	strb	r3, [r4, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer + 8)) & 0x3F;
 8007126:	7a2b      	ldrb	r3, [r5, #8]
 8007128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion =
 800712c:	7263      	strb	r3, [r4, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer + 9)) & 0x3F;
 800712e:	7a6b      	ldrb	r3, [r5, #9]
 8007130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion_max =
 8007134:	72a3      	strb	r3, [r4, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer + 10)) & 0x1;
 8007136:	7aab      	ldrb	r3, [r5, #10]
 8007138:	f003 0301 	and.w	r3, r3, #1
	pdata->protected_laser_safety__lock_bit =
 800713c:	72e3      	strb	r3, [r4, #11]
	pdata->laser_safety__key =
		(*(pbuffer + 11)) & 0x7F;
 800713e:	7aeb      	ldrb	r3, [r5, #11]
 8007140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->laser_safety__key =
 8007144:	7323      	strb	r3, [r4, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer + 12)) & 0x1;
 8007146:	7b2b      	ldrb	r3, [r5, #12]
 8007148:	f003 0301 	and.w	r3, r3, #1
	pdata->laser_safety__key_ro =
 800714c:	7363      	strb	r3, [r4, #13]
	pdata->laser_safety__clip =
		(*(pbuffer + 13)) & 0x3F;
 800714e:	7b6b      	ldrb	r3, [r5, #13]
 8007150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__clip =
 8007154:	73a3      	strb	r3, [r4, #14]
	pdata->laser_safety__mult =
		(*(pbuffer + 14)) & 0x3F;
 8007156:	7bab      	ldrb	r3, [r5, #14]
 8007158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__mult =
 800715c:	73e3      	strb	r3, [r4, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800715e:	7beb      	ldrb	r3, [r5, #15]
 8007160:	7423      	strb	r3, [r4, #16]
		(*(pbuffer + 15));
	pdata->global_config__spad_enables_rtn_1 =
 8007162:	7c2b      	ldrb	r3, [r5, #16]
 8007164:	7463      	strb	r3, [r4, #17]
		(*(pbuffer + 16));
	pdata->global_config__spad_enables_rtn_2 =
 8007166:	7c6b      	ldrb	r3, [r5, #17]
 8007168:	74a3      	strb	r3, [r4, #18]
		(*(pbuffer + 17));
	pdata->global_config__spad_enables_rtn_3 =
 800716a:	7cab      	ldrb	r3, [r5, #18]
 800716c:	74e3      	strb	r3, [r4, #19]
		(*(pbuffer + 18));
	pdata->global_config__spad_enables_rtn_4 =
 800716e:	7ceb      	ldrb	r3, [r5, #19]
 8007170:	7523      	strb	r3, [r4, #20]
		(*(pbuffer + 19));
	pdata->global_config__spad_enables_rtn_5 =
 8007172:	7d2b      	ldrb	r3, [r5, #20]
 8007174:	7563      	strb	r3, [r4, #21]
		(*(pbuffer + 20));
	pdata->global_config__spad_enables_rtn_6 =
 8007176:	7d6b      	ldrb	r3, [r5, #21]
 8007178:	75a3      	strb	r3, [r4, #22]
		(*(pbuffer + 21));
	pdata->global_config__spad_enables_rtn_7 =
 800717a:	7dab      	ldrb	r3, [r5, #22]
 800717c:	75e3      	strb	r3, [r4, #23]
		(*(pbuffer + 22));
	pdata->global_config__spad_enables_rtn_8 =
 800717e:	7deb      	ldrb	r3, [r5, #23]
 8007180:	7623      	strb	r3, [r4, #24]
		(*(pbuffer + 23));
	pdata->global_config__spad_enables_rtn_9 =
 8007182:	7e2b      	ldrb	r3, [r5, #24]
 8007184:	7663      	strb	r3, [r4, #25]
		(*(pbuffer + 24));
	pdata->global_config__spad_enables_rtn_10 =
 8007186:	7e6b      	ldrb	r3, [r5, #25]
 8007188:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer + 25));
	pdata->global_config__spad_enables_rtn_11 =
 800718a:	7eab      	ldrb	r3, [r5, #26]
 800718c:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer + 26));
	pdata->global_config__spad_enables_rtn_12 =
 800718e:	7eeb      	ldrb	r3, [r5, #27]
 8007190:	7723      	strb	r3, [r4, #28]
		(*(pbuffer + 27));
	pdata->global_config__spad_enables_rtn_13 =
 8007192:	7f2b      	ldrb	r3, [r5, #28]
 8007194:	7763      	strb	r3, [r4, #29]
		(*(pbuffer + 28));
	pdata->global_config__spad_enables_rtn_14 =
 8007196:	7f6b      	ldrb	r3, [r5, #29]
 8007198:	77a3      	strb	r3, [r4, #30]
		(*(pbuffer + 29));
	pdata->global_config__spad_enables_rtn_15 =
 800719a:	7fab      	ldrb	r3, [r5, #30]
 800719c:	77e3      	strb	r3, [r4, #31]
		(*(pbuffer + 30));
	pdata->global_config__spad_enables_rtn_16 =
 800719e:	7feb      	ldrb	r3, [r5, #31]
 80071a0:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer + 31));
	pdata->global_config__spad_enables_rtn_17 =
 80071a4:	f895 3020 	ldrb.w	r3, [r5, #32]
 80071a8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer + 32));
	pdata->global_config__spad_enables_rtn_18 =
 80071ac:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80071b0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer + 33));
	pdata->global_config__spad_enables_rtn_19 =
 80071b4:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80071b8:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
		(*(pbuffer + 34));
	pdata->global_config__spad_enables_rtn_20 =
 80071bc:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 80071c0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		(*(pbuffer + 35));
	pdata->global_config__spad_enables_rtn_21 =
 80071c4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80071c8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		(*(pbuffer + 36));
	pdata->global_config__spad_enables_rtn_22 =
 80071cc:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80071d0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		(*(pbuffer + 37));
	pdata->global_config__spad_enables_rtn_23 =
 80071d4:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 80071d8:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		(*(pbuffer + 38));
	pdata->global_config__spad_enables_rtn_24 =
 80071dc:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 80071e0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		(*(pbuffer + 39));
	pdata->global_config__spad_enables_rtn_25 =
 80071e4:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80071e8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		(*(pbuffer + 40));
	pdata->global_config__spad_enables_rtn_26 =
 80071ec:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 80071f0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer + 41));
	pdata->global_config__spad_enables_rtn_27 =
 80071f4:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 80071f8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer + 42));
	pdata->global_config__spad_enables_rtn_28 =
 80071fc:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8007200:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		(*(pbuffer + 43));
	pdata->global_config__spad_enables_rtn_29 =
 8007204:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8007208:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		(*(pbuffer + 44));
	pdata->global_config__spad_enables_rtn_30 =
 800720c:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8007210:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		(*(pbuffer + 45));
	pdata->global_config__spad_enables_rtn_31 =
 8007214:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 8007218:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		(*(pbuffer + 46));
	pdata->roi_config__mode_roi_centre_spad =
 800721c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007220:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		(*(pbuffer + 47));
	pdata->roi_config__mode_roi_xy_size =
 8007224:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8007228:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		(*(pbuffer + 48));

	LOG_FUNCTION_END(status);

	return status;
 800722c:	2000      	movs	r0, #0
 800722e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007230:	f06f 0009 	mvn.w	r0, #9
 8007234:	4770      	bx	lr

08007236 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8007236:	b510      	push	{r4, lr}
 8007238:	b08e      	sub	sp, #56	; 0x38
 800723a:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 800723c:	2331      	movs	r3, #49	; 0x31
 800723e:	aa01      	add	r2, sp, #4
 8007240:	f240 110f 	movw	r1, #271	; 0x10f
 8007244:	f009 f9da 	bl	80105fc <VL53L1_ReadMulti>
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8007248:	4603      	mov	r3, r0
 800724a:	b110      	cbz	r0, 8007252 <VL53L1_get_nvm_copy_data+0x1c>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800724c:	4618      	mov	r0, r3
 800724e:	b00e      	add	sp, #56	; 0x38
 8007250:	bd10      	pop	{r4, pc}
		status = VL53L1_i2c_decode_nvm_copy_data(
 8007252:	4622      	mov	r2, r4
 8007254:	a901      	add	r1, sp, #4
 8007256:	2031      	movs	r0, #49	; 0x31
 8007258:	f7ff ff48 	bl	80070ec <VL53L1_i2c_decode_nvm_copy_data>
 800725c:	4603      	mov	r3, r0
 800725e:	e7f5      	b.n	800724c <VL53L1_get_nvm_copy_data+0x16>

08007260 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV Dev,
	uint32_t timeout_ms)
{
 8007260:	b570      	push	{r4, r5, r6, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	4605      	mov	r5, r0
 8007266:	460e      	mov	r6, r1
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 8007268:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800726c:	f009 fa3c 	bl	80106e8 <VL53L1_WaitUs>
		Dev,
		VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8007270:	4604      	mov	r4, r0
 8007272:	b118      	cbz	r0, 800727c <VL53L1_poll_for_boot_completion+0x1c>
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8007274:	b164      	cbz	r4, 8007290 <VL53L1_poll_for_boot_completion+0x30>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);

	LOG_FUNCTION_END(status);

	return status;
}
 8007276:	4620      	mov	r0, r4
 8007278:	b002      	add	sp, #8
 800727a:	bd70      	pop	{r4, r5, r6, pc}
		status =
 800727c:	2301      	movs	r3, #1
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	22e5      	movs	r2, #229	; 0xe5
 8007284:	4631      	mov	r1, r6
 8007286:	4628      	mov	r0, r5
 8007288:	f009 fa3c 	bl	8010704 <VL53L1_WaitValueMaskEx>
 800728c:	4604      	mov	r4, r0
 800728e:	e7f1      	b.n	8007274 <VL53L1_poll_for_boot_completion+0x14>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8007290:	2103      	movs	r1, #3
 8007292:	4628      	mov	r0, r5
 8007294:	f7fe ffc5 	bl	8006222 <VL53L1_init_ll_driver_state>
 8007298:	e7ed      	b.n	8007276 <VL53L1_poll_for_boot_completion+0x16>

0800729a <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV Dev,
	uint32_t timeout_ms)
{
 800729a:	b500      	push	{lr}
 800729c:	b083      	sub	sp, #12
	uint8_t interrupt_ready = 0;

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
		pdev->stat_cfg.gpio_hv_mux__ctrl &
 800729e:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
		VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 80072a2:	f013 0f10 	tst.w	r3, #16
 80072a6:	d009      	beq.n	80072bc <VL53L1_poll_for_range_completion+0x22>
		interrupt_ready = 0x01;
	else
		interrupt_ready = 0x00;
 80072a8:	2300      	movs	r3, #0

	status =
 80072aa:	2201      	movs	r2, #1
 80072ac:	9201      	str	r2, [sp, #4]
 80072ae:	9200      	str	r2, [sp, #0]
 80072b0:	2231      	movs	r2, #49	; 0x31
 80072b2:	f009 fa27 	bl	8010704 <VL53L1_WaitValueMaskEx>
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
}
 80072b6:	b003      	add	sp, #12
 80072b8:	f85d fb04 	ldr.w	pc, [sp], #4
		interrupt_ready = 0x01;
 80072bc:	2301      	movs	r3, #1
 80072be:	e7f4      	b.n	80072aa <VL53L1_poll_for_range_completion+0x10>

080072c0 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	b08c      	sub	sp, #48	; 0x30
 80072c4:	4604      	mov	r4, r0
	int32_t ret = BSP_ERROR_NONE;
	static HTS221_Object_t hts221_obj_0;
	HTS221_Capabilities_t cap;

	/* Configure the environmental sensor driver */
	io_ctx.BusType = HTS221_I2C_BUS; /* I2C */
 80072c6:	2300      	movs	r3, #0
 80072c8:	9307      	str	r3, [sp, #28]
	io_ctx.Address = HTS221_I2C_ADDRESS;
 80072ca:	23bf      	movs	r3, #191	; 0xbf
 80072cc:	f88d 3020 	strb.w	r3, [sp, #32]
	io_ctx.Init = IKS01A2_I2C_Init;
 80072d0:	4b32      	ldr	r3, [pc, #200]	; (800739c <HTS221_0_Probe+0xdc>)
 80072d2:	9305      	str	r3, [sp, #20]
	io_ctx.DeInit = IKS01A2_I2C_DeInit;
 80072d4:	4b32      	ldr	r3, [pc, #200]	; (80073a0 <HTS221_0_Probe+0xe0>)
 80072d6:	9306      	str	r3, [sp, #24]
	io_ctx.ReadReg = IKS01A2_I2C_ReadReg;
 80072d8:	4b32      	ldr	r3, [pc, #200]	; (80073a4 <HTS221_0_Probe+0xe4>)
 80072da:	930a      	str	r3, [sp, #40]	; 0x28
	io_ctx.WriteReg = IKS01A2_I2C_WriteReg;
 80072dc:	4b32      	ldr	r3, [pc, #200]	; (80073a8 <HTS221_0_Probe+0xe8>)
 80072de:	9309      	str	r3, [sp, #36]	; 0x24
	io_ctx.GetTick = IKS01A2_GetTick;
 80072e0:	4b32      	ldr	r3, [pc, #200]	; (80073ac <HTS221_0_Probe+0xec>)
 80072e2:	930b      	str	r3, [sp, #44]	; 0x2c

	if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK) {
 80072e4:	a905      	add	r1, sp, #20
 80072e6:	4832      	ldr	r0, [pc, #200]	; (80073b0 <HTS221_0_Probe+0xf0>)
 80072e8:	f7fa f888 	bl	80013fc <HTS221_RegisterBusIO>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d14b      	bne.n	8007388 <HTS221_0_Probe+0xc8>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
	}else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK) {
 80072f0:	f10d 0113 	add.w	r1, sp, #19
 80072f4:	482e      	ldr	r0, [pc, #184]	; (80073b0 <HTS221_0_Probe+0xf0>)
 80072f6:	f7f9 ff67 	bl	80011c8 <HTS221_ReadID>
 80072fa:	4605      	mov	r5, r0
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d146      	bne.n	800738e <HTS221_0_Probe+0xce>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
	}else if (id != HTS221_ID) {
 8007300:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8007304:	2bbc      	cmp	r3, #188	; 0xbc
 8007306:	d145      	bne.n	8007394 <HTS221_0_Probe+0xd4>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
	}else  {
		(void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8007308:	4e29      	ldr	r6, [pc, #164]	; (80073b0 <HTS221_0_Probe+0xf0>)
 800730a:	4669      	mov	r1, sp
 800730c:	4630      	mov	r0, r6
 800730e:	f7f9 fe47 	bl	8000fa0 <HTS221_GetCapabilities>
		EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007312:	f89d 2000 	ldrb.w	r2, [sp]
 8007316:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800731a:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
															    uint32_t)cap.Humidity << 2);
 800731e:	f89d 1002 	ldrb.w	r1, [sp, #2]
		EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007322:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8007326:	4923      	ldr	r1, [pc, #140]	; (80073b4 <HTS221_0_Probe+0xf4>)
 8007328:	600b      	str	r3, [r1, #0]

		EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 800732a:	4b23      	ldr	r3, [pc, #140]	; (80073b8 <HTS221_0_Probe+0xf8>)
 800732c:	601e      	str	r6, [r3, #0]
		/* The second cast (void *) is added to bypass Misra R11.3 rule */
		EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800732e:	4923      	ldr	r1, [pc, #140]	; (80073bc <HTS221_0_Probe+0xfc>)
 8007330:	4b23      	ldr	r3, [pc, #140]	; (80073c0 <HTS221_0_Probe+0x100>)
 8007332:	6019      	str	r1, [r3, #0]

		if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U)) {
 8007334:	f014 0f01 	tst.w	r4, #1
 8007338:	d001      	beq.n	800733e <HTS221_0_Probe+0x7e>
 800733a:	2a01      	cmp	r2, #1
 800733c:	d009      	beq.n	8007352 <HTS221_0_Probe+0x92>
				ret = BSP_ERROR_COMPONENT_FAILURE;
			}else  {
				ret = BSP_ERROR_NONE;
			}
		}
		if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U)) {
 800733e:	f014 0f04 	tst.w	r4, #4
 8007342:	d003      	beq.n	800734c <HTS221_0_Probe+0x8c>
 8007344:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d00e      	beq.n	800736a <HTS221_0_Probe+0xaa>
			}
		}
	}

	return ret;
}
 800734c:	4628      	mov	r0, r5
 800734e:	b00c      	add	sp, #48	; 0x30
 8007350:	bd70      	pop	{r4, r5, r6, pc}
			EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8007352:	4a1c      	ldr	r2, [pc, #112]	; (80073c4 <HTS221_0_Probe+0x104>)
 8007354:	4b1c      	ldr	r3, [pc, #112]	; (80073c8 <HTS221_0_Probe+0x108>)
 8007356:	601a      	str	r2, [r3, #0]
			if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK) {
 8007358:	680b      	ldr	r3, [r1, #0]
 800735a:	4630      	mov	r0, r6
 800735c:	4798      	blx	r3
 800735e:	4605      	mov	r5, r0
 8007360:	2800      	cmp	r0, #0
 8007362:	d0ec      	beq.n	800733e <HTS221_0_Probe+0x7e>
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8007364:	f06f 0504 	mvn.w	r5, #4
 8007368:	e7e9      	b.n	800733e <HTS221_0_Probe+0x7e>
			EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800736a:	4a18      	ldr	r2, [pc, #96]	; (80073cc <HTS221_0_Probe+0x10c>)
 800736c:	4b16      	ldr	r3, [pc, #88]	; (80073c8 <HTS221_0_Probe+0x108>)
 800736e:	609a      	str	r2, [r3, #8]
			if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK) {
 8007370:	4b13      	ldr	r3, [pc, #76]	; (80073c0 <HTS221_0_Probe+0x100>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a10      	ldr	r2, [pc, #64]	; (80073b8 <HTS221_0_Probe+0xf8>)
 8007378:	6810      	ldr	r0, [r2, #0]
 800737a:	4798      	blx	r3
 800737c:	4605      	mov	r5, r0
 800737e:	2800      	cmp	r0, #0
 8007380:	d0e4      	beq.n	800734c <HTS221_0_Probe+0x8c>
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8007382:	f06f 0504 	mvn.w	r5, #4
 8007386:	e7e1      	b.n	800734c <HTS221_0_Probe+0x8c>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007388:	f06f 0506 	mvn.w	r5, #6
 800738c:	e7de      	b.n	800734c <HTS221_0_Probe+0x8c>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800738e:	f06f 0506 	mvn.w	r5, #6
 8007392:	e7db      	b.n	800734c <HTS221_0_Probe+0x8c>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007394:	f06f 0506 	mvn.w	r5, #6
	return ret;
 8007398:	e7d8      	b.n	800734c <HTS221_0_Probe+0x8c>
 800739a:	bf00      	nop
 800739c:	0800fcf5 	.word	0x0800fcf5
 80073a0:	0800fcf9 	.word	0x0800fcf9
 80073a4:	0800fd45 	.word	0x0800fd45
 80073a8:	0800fd19 	.word	0x0800fd19
 80073ac:	0800fd71 	.word	0x0800fd71
 80073b0:	200024b4 	.word	0x200024b4
 80073b4:	2000248c 	.word	0x2000248c
 80073b8:	2000291c 	.word	0x2000291c
 80073bc:	200011c0 	.word	0x200011c0
 80073c0:	20002494 	.word	0x20002494
 80073c4:	200011e4 	.word	0x200011e4
 80073c8:	2000249c 	.word	0x2000249c
 80073cc:	200011d0 	.word	0x200011d0

080073d0 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	b08c      	sub	sp, #48	; 0x30
 80073d4:	4604      	mov	r4, r0
	int32_t ret = BSP_ERROR_NONE;
	static LPS22HB_Object_t lps22hb_obj_0;
	LPS22HB_Capabilities_t cap;

	/* Configure the pressure driver */
	io_ctx.BusType = LPS22HB_I2C_BUS; /* I2C */
 80073d6:	2300      	movs	r3, #0
 80073d8:	9307      	str	r3, [sp, #28]
	io_ctx.Address = LPS22HB_I2C_ADD_H;
 80073da:	23bb      	movs	r3, #187	; 0xbb
 80073dc:	f88d 3020 	strb.w	r3, [sp, #32]
	io_ctx.Init = IKS01A2_I2C_Init;
 80073e0:	4b32      	ldr	r3, [pc, #200]	; (80074ac <LPS22HB_0_Probe+0xdc>)
 80073e2:	9305      	str	r3, [sp, #20]
	io_ctx.DeInit = IKS01A2_I2C_DeInit;
 80073e4:	4b32      	ldr	r3, [pc, #200]	; (80074b0 <LPS22HB_0_Probe+0xe0>)
 80073e6:	9306      	str	r3, [sp, #24]
	io_ctx.ReadReg = IKS01A2_I2C_ReadReg;
 80073e8:	4b32      	ldr	r3, [pc, #200]	; (80074b4 <LPS22HB_0_Probe+0xe4>)
 80073ea:	930a      	str	r3, [sp, #40]	; 0x28
	io_ctx.WriteReg = IKS01A2_I2C_WriteReg;
 80073ec:	4b32      	ldr	r3, [pc, #200]	; (80074b8 <LPS22HB_0_Probe+0xe8>)
 80073ee:	9309      	str	r3, [sp, #36]	; 0x24
	io_ctx.GetTick = IKS01A2_GetTick;
 80073f0:	4b32      	ldr	r3, [pc, #200]	; (80074bc <LPS22HB_0_Probe+0xec>)
 80073f2:	930b      	str	r3, [sp, #44]	; 0x2c

	if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK) {
 80073f4:	a905      	add	r1, sp, #20
 80073f6:	4832      	ldr	r0, [pc, #200]	; (80074c0 <LPS22HB_0_Probe+0xf0>)
 80073f8:	f7fb f836 	bl	8002468 <LPS22HB_RegisterBusIO>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d14b      	bne.n	8007498 <LPS22HB_0_Probe+0xc8>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
	}else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK) {
 8007400:	f10d 0113 	add.w	r1, sp, #19
 8007404:	482e      	ldr	r0, [pc, #184]	; (80074c0 <LPS22HB_0_Probe+0xf0>)
 8007406:	f7fa fee5 	bl	80021d4 <LPS22HB_ReadID>
 800740a:	4605      	mov	r5, r0
 800740c:	2800      	cmp	r0, #0
 800740e:	d146      	bne.n	800749e <LPS22HB_0_Probe+0xce>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
	}else if (id != LPS22HB_ID) {
 8007410:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8007414:	2bb1      	cmp	r3, #177	; 0xb1
 8007416:	d145      	bne.n	80074a4 <LPS22HB_0_Probe+0xd4>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
	}else  {
		(void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8007418:	4e29      	ldr	r6, [pc, #164]	; (80074c0 <LPS22HB_0_Probe+0xf0>)
 800741a:	4669      	mov	r1, sp
 800741c:	4630      	mov	r0, r6
 800741e:	f7fa fdd9 	bl	8001fd4 <LPS22HB_GetCapabilities>

		EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007422:	f89d 2000 	ldrb.w	r2, [sp]
 8007426:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800742a:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
															     uint32_t)cap.Humidity << 2);
 800742e:	f89d 1002 	ldrb.w	r1, [sp, #2]
		EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007432:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8007436:	4923      	ldr	r1, [pc, #140]	; (80074c4 <LPS22HB_0_Probe+0xf4>)
 8007438:	604b      	str	r3, [r1, #4]

		EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 800743a:	4b23      	ldr	r3, [pc, #140]	; (80074c8 <LPS22HB_0_Probe+0xf8>)
 800743c:	605e      	str	r6, [r3, #4]
		/* The second cast (void *) is added to bypass Misra R11.3 rule */
		EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 800743e:	4923      	ldr	r1, [pc, #140]	; (80074cc <LPS22HB_0_Probe+0xfc>)
 8007440:	4b23      	ldr	r3, [pc, #140]	; (80074d0 <LPS22HB_0_Probe+0x100>)
 8007442:	6059      	str	r1, [r3, #4]

		if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U)) {
 8007444:	f014 0f01 	tst.w	r4, #1
 8007448:	d001      	beq.n	800744e <LPS22HB_0_Probe+0x7e>
 800744a:	2a01      	cmp	r2, #1
 800744c:	d009      	beq.n	8007462 <LPS22HB_0_Probe+0x92>
				ret = BSP_ERROR_COMPONENT_FAILURE;
			}else  {
				ret = BSP_ERROR_NONE;
			}
		}
		if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U)) {
 800744e:	f014 0f02 	tst.w	r4, #2
 8007452:	d003      	beq.n	800745c <LPS22HB_0_Probe+0x8c>
 8007454:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d00e      	beq.n	800747a <LPS22HB_0_Probe+0xaa>
				ret = BSP_ERROR_NONE;
			}
		}
	}
	return ret;
}
 800745c:	4628      	mov	r0, r5
 800745e:	b00c      	add	sp, #48	; 0x30
 8007460:	bd70      	pop	{r4, r5, r6, pc}
			EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 8007462:	4a1c      	ldr	r2, [pc, #112]	; (80074d4 <LPS22HB_0_Probe+0x104>)
 8007464:	4b1c      	ldr	r3, [pc, #112]	; (80074d8 <LPS22HB_0_Probe+0x108>)
 8007466:	60da      	str	r2, [r3, #12]
			if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK) {
 8007468:	680b      	ldr	r3, [r1, #0]
 800746a:	4630      	mov	r0, r6
 800746c:	4798      	blx	r3
 800746e:	4605      	mov	r5, r0
 8007470:	2800      	cmp	r0, #0
 8007472:	d0ec      	beq.n	800744e <LPS22HB_0_Probe+0x7e>
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8007474:	f06f 0504 	mvn.w	r5, #4
 8007478:	e7e9      	b.n	800744e <LPS22HB_0_Probe+0x7e>
			EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 800747a:	4a18      	ldr	r2, [pc, #96]	; (80074dc <LPS22HB_0_Probe+0x10c>)
 800747c:	4b16      	ldr	r3, [pc, #88]	; (80074d8 <LPS22HB_0_Probe+0x108>)
 800747e:	611a      	str	r2, [r3, #16]
			if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK) {
 8007480:	4b13      	ldr	r3, [pc, #76]	; (80074d0 <LPS22HB_0_Probe+0x100>)
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a10      	ldr	r2, [pc, #64]	; (80074c8 <LPS22HB_0_Probe+0xf8>)
 8007488:	6850      	ldr	r0, [r2, #4]
 800748a:	4798      	blx	r3
 800748c:	4605      	mov	r5, r0
 800748e:	2800      	cmp	r0, #0
 8007490:	d0e4      	beq.n	800745c <LPS22HB_0_Probe+0x8c>
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8007492:	f06f 0504 	mvn.w	r5, #4
 8007496:	e7e1      	b.n	800745c <LPS22HB_0_Probe+0x8c>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007498:	f06f 0506 	mvn.w	r5, #6
 800749c:	e7de      	b.n	800745c <LPS22HB_0_Probe+0x8c>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800749e:	f06f 0506 	mvn.w	r5, #6
 80074a2:	e7db      	b.n	800745c <LPS22HB_0_Probe+0x8c>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80074a4:	f06f 0506 	mvn.w	r5, #6
	return ret;
 80074a8:	e7d8      	b.n	800745c <LPS22HB_0_Probe+0x8c>
 80074aa:	bf00      	nop
 80074ac:	0800fcf5 	.word	0x0800fcf5
 80074b0:	0800fcf9 	.word	0x0800fcf9
 80074b4:	0800fd45 	.word	0x0800fd45
 80074b8:	0800fd19 	.word	0x0800fd19
 80074bc:	0800fd71 	.word	0x0800fd71
 80074c0:	200024e0 	.word	0x200024e0
 80074c4:	2000248c 	.word	0x2000248c
 80074c8:	2000291c 	.word	0x2000291c
 80074cc:	2000135c 	.word	0x2000135c
 80074d0:	20002494 	.word	0x20002494
 80074d4:	20001380 	.word	0x20001380
 80074d8:	2000249c 	.word	0x2000249c
 80074dc:	2000136c 	.word	0x2000136c

080074e0 <IKS01A2_ENV_SENSOR_Init>:
{
 80074e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074e4:	b085      	sub	sp, #20
 80074e6:	460f      	mov	r7, r1
	switch (Instance) {
 80074e8:	4606      	mov	r6, r0
 80074ea:	b158      	cbz	r0, 8007504 <IKS01A2_ENV_SENSOR_Init+0x24>
 80074ec:	2801      	cmp	r0, #1
 80074ee:	d030      	beq.n	8007552 <IKS01A2_ENV_SENSOR_Init+0x72>
	uint32_t component_functions = 0;
 80074f0:	f04f 0900 	mov.w	r9, #0
		ret = BSP_ERROR_WRONG_PARAM;
 80074f4:	f06f 0801 	mvn.w	r8, #1
	if (ret != BSP_ERROR_NONE) {
 80074f8:	f1b8 0f00 	cmp.w	r8, #0
 80074fc:	d16f      	bne.n	80075de <IKS01A2_ENV_SENSOR_Init+0xfe>
 80074fe:	2400      	movs	r4, #0
 8007500:	2501      	movs	r5, #1
 8007502:	e04f      	b.n	80075a4 <IKS01A2_ENV_SENSOR_Init+0xc4>
		if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE) {
 8007504:	4608      	mov	r0, r1
 8007506:	f7ff fedb 	bl	80072c0 <HTS221_0_Probe>
 800750a:	2800      	cmp	r0, #0
 800750c:	d165      	bne.n	80075da <IKS01A2_ENV_SENSOR_Init+0xfa>
		if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE) {
 800750e:	4b3a      	ldr	r3, [pc, #232]	; (80075f8 <IKS01A2_ENV_SENSOR_Init+0x118>)
 8007510:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	4669      	mov	r1, sp
 8007518:	4a38      	ldr	r2, [pc, #224]	; (80075fc <IKS01A2_ENV_SENSOR_Init+0x11c>)
 800751a:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 800751e:	4798      	blx	r3
 8007520:	4680      	mov	r8, r0
 8007522:	2800      	cmp	r0, #0
 8007524:	d15f      	bne.n	80075e6 <IKS01A2_ENV_SENSOR_Init+0x106>
		if (cap.Temperature == 1U) {
 8007526:	f89d 3000 	ldrb.w	r3, [sp]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d00b      	beq.n	8007546 <IKS01A2_ENV_SENSOR_Init+0x66>
	uint32_t component_functions = 0;
 800752e:	46b1      	mov	r9, r6
		if (cap.Humidity == 1U) {
 8007530:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d009      	beq.n	800754c <IKS01A2_ENV_SENSOR_Init+0x6c>
		if (cap.Pressure == 1U) {
 8007538:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d1db      	bne.n	80074f8 <IKS01A2_ENV_SENSOR_Init+0x18>
			component_functions |= ENV_PRESSURE;
 8007540:	f049 0902 	orr.w	r9, r9, #2
 8007544:	e7d8      	b.n	80074f8 <IKS01A2_ENV_SENSOR_Init+0x18>
			component_functions |= ENV_TEMPERATURE;
 8007546:	f04f 0901 	mov.w	r9, #1
 800754a:	e7f1      	b.n	8007530 <IKS01A2_ENV_SENSOR_Init+0x50>
			component_functions |= ENV_HUMIDITY;
 800754c:	f049 0904 	orr.w	r9, r9, #4
 8007550:	e7f2      	b.n	8007538 <IKS01A2_ENV_SENSOR_Init+0x58>
		if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE) {
 8007552:	4608      	mov	r0, r1
 8007554:	f7ff ff3c 	bl	80073d0 <LPS22HB_0_Probe>
 8007558:	2800      	cmp	r0, #0
 800755a:	d147      	bne.n	80075ec <IKS01A2_ENV_SENSOR_Init+0x10c>
		if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE) {
 800755c:	4b26      	ldr	r3, [pc, #152]	; (80075f8 <IKS01A2_ENV_SENSOR_Init+0x118>)
 800755e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	4669      	mov	r1, sp
 8007566:	4a25      	ldr	r2, [pc, #148]	; (80075fc <IKS01A2_ENV_SENSOR_Init+0x11c>)
 8007568:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 800756c:	4798      	blx	r3
 800756e:	4680      	mov	r8, r0
 8007570:	2800      	cmp	r0, #0
 8007572:	d13e      	bne.n	80075f2 <IKS01A2_ENV_SENSOR_Init+0x112>
		if (cap.Temperature == 1U) {
 8007574:	f89d 3000 	ldrb.w	r3, [sp]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d00c      	beq.n	8007596 <IKS01A2_ENV_SENSOR_Init+0xb6>
	uint32_t component_functions = 0;
 800757c:	f04f 0900 	mov.w	r9, #0
		if (cap.Humidity == 1U) {
 8007580:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d008      	beq.n	800759a <IKS01A2_ENV_SENSOR_Init+0xba>
		if (cap.Pressure == 1U) {
 8007588:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d1b3      	bne.n	80074f8 <IKS01A2_ENV_SENSOR_Init+0x18>
			component_functions |= ENV_PRESSURE;
 8007590:	f049 0902 	orr.w	r9, r9, #2
 8007594:	e7b0      	b.n	80074f8 <IKS01A2_ENV_SENSOR_Init+0x18>
			component_functions |= ENV_TEMPERATURE;
 8007596:	46b1      	mov	r9, r6
 8007598:	e7f2      	b.n	8007580 <IKS01A2_ENV_SENSOR_Init+0xa0>
			component_functions |= ENV_HUMIDITY;
 800759a:	f049 0904 	orr.w	r9, r9, #4
 800759e:	e7f3      	b.n	8007588 <IKS01A2_ENV_SENSOR_Init+0xa8>
		function = function << 1;
 80075a0:	006d      	lsls	r5, r5, #1
	for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++) {
 80075a2:	3401      	adds	r4, #1
 80075a4:	2c02      	cmp	r4, #2
 80075a6:	d81a      	bhi.n	80075de <IKS01A2_ENV_SENSOR_Init+0xfe>
		if (((Functions & function) == function) && ((component_functions & function) == function)) {
 80075a8:	ea35 0307 	bics.w	r3, r5, r7
 80075ac:	d1f8      	bne.n	80075a0 <IKS01A2_ENV_SENSOR_Init+0xc0>
 80075ae:	ea35 0309 	bics.w	r3, r5, r9
 80075b2:	d1f5      	bne.n	80075a0 <IKS01A2_ENV_SENSOR_Init+0xc0>
			if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE) {
 80075b4:	4b12      	ldr	r3, [pc, #72]	; (8007600 <IKS01A2_ENV_SENSOR_Init+0x120>)
 80075b6:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80075ba:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80075be:	4413      	add	r3, r2
 80075c0:	4a10      	ldr	r2, [pc, #64]	; (8007604 <IKS01A2_ENV_SENSOR_Init+0x124>)
 80075c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a0c      	ldr	r2, [pc, #48]	; (80075fc <IKS01A2_ENV_SENSOR_Init+0x11c>)
 80075ca:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 80075ce:	4798      	blx	r3
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d0e5      	beq.n	80075a0 <IKS01A2_ENV_SENSOR_Init+0xc0>
				return BSP_ERROR_COMPONENT_FAILURE;
 80075d4:	f06f 0804 	mvn.w	r8, #4
 80075d8:	e001      	b.n	80075de <IKS01A2_ENV_SENSOR_Init+0xfe>
			return BSP_ERROR_NO_INIT;
 80075da:	f04f 38ff 	mov.w	r8, #4294967295
}
 80075de:	4640      	mov	r0, r8
 80075e0:	b005      	add	sp, #20
 80075e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return BSP_ERROR_UNKNOWN_COMPONENT;
 80075e6:	f06f 0806 	mvn.w	r8, #6
 80075ea:	e7f8      	b.n	80075de <IKS01A2_ENV_SENSOR_Init+0xfe>
			return BSP_ERROR_NO_INIT;
 80075ec:	f04f 38ff 	mov.w	r8, #4294967295
 80075f0:	e7f5      	b.n	80075de <IKS01A2_ENV_SENSOR_Init+0xfe>
			return BSP_ERROR_UNKNOWN_COMPONENT;
 80075f2:	f06f 0806 	mvn.w	r8, #6
 80075f6:	e7f2      	b.n	80075de <IKS01A2_ENV_SENSOR_Init+0xfe>
 80075f8:	20002494 	.word	0x20002494
 80075fc:	2000291c 	.word	0x2000291c
 8007600:	08021c9c 	.word	0x08021c9c
 8007604:	2000249c 	.word	0x2000249c

08007608 <IKS01A2_ENV_SENSOR_GetCapabilities>:
{
 8007608:	b508      	push	{r3, lr}
	if (Instance >= IKS01A2_ENV_INSTANCES_NBR) {
 800760a:	2801      	cmp	r0, #1
 800760c:	d80e      	bhi.n	800762c <IKS01A2_ENV_SENSOR_GetCapabilities+0x24>
	}else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE) {
 800760e:	4b09      	ldr	r3, [pc, #36]	; (8007634 <IKS01A2_ENV_SENSOR_GetCapabilities+0x2c>)
 8007610:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	4a08      	ldr	r2, [pc, #32]	; (8007638 <IKS01A2_ENV_SENSOR_GetCapabilities+0x30>)
 8007618:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800761c:	4798      	blx	r3
 800761e:	4603      	mov	r3, r0
 8007620:	b908      	cbnz	r0, 8007626 <IKS01A2_ENV_SENSOR_GetCapabilities+0x1e>
}
 8007622:	4618      	mov	r0, r3
 8007624:	bd08      	pop	{r3, pc}
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007626:	f06f 0306 	mvn.w	r3, #6
 800762a:	e7fa      	b.n	8007622 <IKS01A2_ENV_SENSOR_GetCapabilities+0x1a>
		ret = BSP_ERROR_WRONG_PARAM;
 800762c:	f06f 0301 	mvn.w	r3, #1
	return ret;
 8007630:	e7f7      	b.n	8007622 <IKS01A2_ENV_SENSOR_GetCapabilities+0x1a>
 8007632:	bf00      	nop
 8007634:	20002494 	.word	0x20002494
 8007638:	2000291c 	.word	0x2000291c

0800763c <IKS01A2_ENV_SENSOR_Enable>:
{
 800763c:	b508      	push	{r3, lr}
	if (Instance >= IKS01A2_ENV_INSTANCES_NBR) {
 800763e:	2801      	cmp	r0, #1
 8007640:	d81a      	bhi.n	8007678 <IKS01A2_ENV_SENSOR_Enable+0x3c>
		if ((EnvCtx[Instance].Functions & Function) == Function) {
 8007642:	4b10      	ldr	r3, [pc, #64]	; (8007684 <IKS01A2_ENV_SENSOR_Enable+0x48>)
 8007644:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007648:	ea31 0303 	bics.w	r3, r1, r3
 800764c:	d117      	bne.n	800767e <IKS01A2_ENV_SENSOR_Enable+0x42>
			if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE) {
 800764e:	4b0e      	ldr	r3, [pc, #56]	; (8007688 <IKS01A2_ENV_SENSOR_Enable+0x4c>)
 8007650:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8007654:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007658:	4413      	add	r3, r2
 800765a:	4a0c      	ldr	r2, [pc, #48]	; (800768c <IKS01A2_ENV_SENSOR_Enable+0x50>)
 800765c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a0b      	ldr	r2, [pc, #44]	; (8007690 <IKS01A2_ENV_SENSOR_Enable+0x54>)
 8007664:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8007668:	4798      	blx	r3
 800766a:	4603      	mov	r3, r0
 800766c:	b908      	cbnz	r0, 8007672 <IKS01A2_ENV_SENSOR_Enable+0x36>
}
 800766e:	4618      	mov	r0, r3
 8007670:	bd08      	pop	{r3, pc}
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8007672:	f06f 0304 	mvn.w	r3, #4
 8007676:	e7fa      	b.n	800766e <IKS01A2_ENV_SENSOR_Enable+0x32>
		ret = BSP_ERROR_WRONG_PARAM;
 8007678:	f06f 0301 	mvn.w	r3, #1
 800767c:	e7f7      	b.n	800766e <IKS01A2_ENV_SENSOR_Enable+0x32>
			ret = BSP_ERROR_WRONG_PARAM;
 800767e:	f06f 0301 	mvn.w	r3, #1
	return ret;
 8007682:	e7f4      	b.n	800766e <IKS01A2_ENV_SENSOR_Enable+0x32>
 8007684:	2000248c 	.word	0x2000248c
 8007688:	08021c9c 	.word	0x08021c9c
 800768c:	2000249c 	.word	0x2000249c
 8007690:	2000291c 	.word	0x2000291c

08007694 <IKS01A2_ENV_SENSOR_SetOutputDataRate>:
{
 8007694:	b508      	push	{r3, lr}
	if (Instance >= IKS01A2_ENV_INSTANCES_NBR) {
 8007696:	2801      	cmp	r0, #1
 8007698:	d81a      	bhi.n	80076d0 <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x3c>
		if ((EnvCtx[Instance].Functions & Function) == Function) {
 800769a:	4b10      	ldr	r3, [pc, #64]	; (80076dc <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x48>)
 800769c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80076a0:	ea31 0303 	bics.w	r3, r1, r3
 80076a4:	d117      	bne.n	80076d6 <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x42>
			if (EnvFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE) {
 80076a6:	4b0e      	ldr	r3, [pc, #56]	; (80076e0 <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x4c>)
 80076a8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80076ac:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80076b0:	4413      	add	r3, r2
 80076b2:	4a0c      	ldr	r2, [pc, #48]	; (80076e4 <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x50>)
 80076b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	4a0b      	ldr	r2, [pc, #44]	; (80076e8 <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x54>)
 80076bc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80076c0:	4798      	blx	r3
 80076c2:	4603      	mov	r3, r0
 80076c4:	b908      	cbnz	r0, 80076ca <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x36>
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	bd08      	pop	{r3, pc}
				ret = BSP_ERROR_COMPONENT_FAILURE;
 80076ca:	f06f 0304 	mvn.w	r3, #4
 80076ce:	e7fa      	b.n	80076c6 <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x32>
		ret = BSP_ERROR_WRONG_PARAM;
 80076d0:	f06f 0301 	mvn.w	r3, #1
 80076d4:	e7f7      	b.n	80076c6 <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x32>
			ret = BSP_ERROR_WRONG_PARAM;
 80076d6:	f06f 0301 	mvn.w	r3, #1
	return ret;
 80076da:	e7f4      	b.n	80076c6 <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x32>
 80076dc:	2000248c 	.word	0x2000248c
 80076e0:	08021c9c 	.word	0x08021c9c
 80076e4:	2000249c 	.word	0x2000249c
 80076e8:	2000291c 	.word	0x2000291c

080076ec <IKS01A2_ENV_SENSOR_GetValue>:
{
 80076ec:	b508      	push	{r3, lr}
	if (Instance >= IKS01A2_ENV_INSTANCES_NBR) {
 80076ee:	2801      	cmp	r0, #1
 80076f0:	d81c      	bhi.n	800772c <IKS01A2_ENV_SENSOR_GetValue+0x40>
		if ((EnvCtx[Instance].Functions & Function) == Function) {
 80076f2:	4b11      	ldr	r3, [pc, #68]	; (8007738 <IKS01A2_ENV_SENSOR_GetValue+0x4c>)
 80076f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80076f8:	ea31 0303 	bics.w	r3, r1, r3
 80076fc:	d119      	bne.n	8007732 <IKS01A2_ENV_SENSOR_GetValue+0x46>
 80076fe:	460b      	mov	r3, r1
			if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE) {
 8007700:	490e      	ldr	r1, [pc, #56]	; (800773c <IKS01A2_ENV_SENSOR_GetValue+0x50>)
 8007702:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007706:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800770a:	440b      	add	r3, r1
 800770c:	490c      	ldr	r1, [pc, #48]	; (8007740 <IKS01A2_ENV_SENSOR_GetValue+0x54>)
 800770e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	4611      	mov	r1, r2
 8007716:	4a0b      	ldr	r2, [pc, #44]	; (8007744 <IKS01A2_ENV_SENSOR_GetValue+0x58>)
 8007718:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800771c:	4798      	blx	r3
 800771e:	4603      	mov	r3, r0
 8007720:	b908      	cbnz	r0, 8007726 <IKS01A2_ENV_SENSOR_GetValue+0x3a>
}
 8007722:	4618      	mov	r0, r3
 8007724:	bd08      	pop	{r3, pc}
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8007726:	f06f 0304 	mvn.w	r3, #4
 800772a:	e7fa      	b.n	8007722 <IKS01A2_ENV_SENSOR_GetValue+0x36>
		ret = BSP_ERROR_WRONG_PARAM;
 800772c:	f06f 0301 	mvn.w	r3, #1
 8007730:	e7f7      	b.n	8007722 <IKS01A2_ENV_SENSOR_GetValue+0x36>
			ret = BSP_ERROR_WRONG_PARAM;
 8007732:	f06f 0301 	mvn.w	r3, #1
	return ret;
 8007736:	e7f4      	b.n	8007722 <IKS01A2_ENV_SENSOR_GetValue+0x36>
 8007738:	2000248c 	.word	0x2000248c
 800773c:	08021c9c 	.word	0x08021c9c
 8007740:	2000249c 	.word	0x2000249c
 8007744:	2000291c 	.word	0x2000291c

08007748 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8007748:	b570      	push	{r4, r5, r6, lr}
 800774a:	b090      	sub	sp, #64	; 0x40
 800774c:	4604      	mov	r4, r0
	static LSM6DSL_Object_t lsm6dsl_obj_0;
	LSM6DSL_Capabilities_t cap;
	int32_t ret = BSP_ERROR_NONE;

	/* Configure the accelero driver */
	io_ctx.BusType = LSM6DSL_I2C_BUS; /* I2C */
 800774e:	2300      	movs	r3, #0
 8007750:	930b      	str	r3, [sp, #44]	; 0x2c
	io_ctx.Address = LSM6DSL_I2C_ADD_H;
 8007752:	23d7      	movs	r3, #215	; 0xd7
 8007754:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	io_ctx.Init = IKS01A2_I2C_Init;
 8007758:	4b32      	ldr	r3, [pc, #200]	; (8007824 <LSM6DSL_0_Probe+0xdc>)
 800775a:	9309      	str	r3, [sp, #36]	; 0x24
	io_ctx.DeInit = IKS01A2_I2C_DeInit;
 800775c:	4b32      	ldr	r3, [pc, #200]	; (8007828 <LSM6DSL_0_Probe+0xe0>)
 800775e:	930a      	str	r3, [sp, #40]	; 0x28
	io_ctx.ReadReg = IKS01A2_I2C_ReadReg;
 8007760:	4b32      	ldr	r3, [pc, #200]	; (800782c <LSM6DSL_0_Probe+0xe4>)
 8007762:	930e      	str	r3, [sp, #56]	; 0x38
	io_ctx.WriteReg = IKS01A2_I2C_WriteReg;
 8007764:	4b32      	ldr	r3, [pc, #200]	; (8007830 <LSM6DSL_0_Probe+0xe8>)
 8007766:	930d      	str	r3, [sp, #52]	; 0x34
	io_ctx.GetTick = IKS01A2_GetTick;
 8007768:	4b32      	ldr	r3, [pc, #200]	; (8007834 <LSM6DSL_0_Probe+0xec>)
 800776a:	930f      	str	r3, [sp, #60]	; 0x3c

	if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK) {
 800776c:	a909      	add	r1, sp, #36	; 0x24
 800776e:	4832      	ldr	r0, [pc, #200]	; (8007838 <LSM6DSL_0_Probe+0xf0>)
 8007770:	f7fc fb0e 	bl	8003d90 <LSM6DSL_RegisterBusIO>
 8007774:	2800      	cmp	r0, #0
 8007776:	d14b      	bne.n	8007810 <LSM6DSL_0_Probe+0xc8>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
	}else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK) {
 8007778:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 800777c:	482e      	ldr	r0, [pc, #184]	; (8007838 <LSM6DSL_0_Probe+0xf0>)
 800777e:	f7fc f87c 	bl	800387a <LSM6DSL_ReadID>
 8007782:	4605      	mov	r5, r0
 8007784:	2800      	cmp	r0, #0
 8007786:	d146      	bne.n	8007816 <LSM6DSL_0_Probe+0xce>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
	}else if (id != LSM6DSL_ID) {
 8007788:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800778c:	2b6a      	cmp	r3, #106	; 0x6a
 800778e:	d145      	bne.n	800781c <LSM6DSL_0_Probe+0xd4>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
	}else  {
		(void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8007790:	4e29      	ldr	r6, [pc, #164]	; (8007838 <LSM6DSL_0_Probe+0xf0>)
 8007792:	a901      	add	r1, sp, #4
 8007794:	4630      	mov	r0, r6
 8007796:	f7fb fded 	bl	8003374 <LSM6DSL_GetCapabilities>
		MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800779a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800779e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80077a2:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 80077a6:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80077aa:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80077ae:	4923      	ldr	r1, [pc, #140]	; (800783c <LSM6DSL_0_Probe+0xf4>)
 80077b0:	600b      	str	r3, [r1, #0]

		MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 80077b2:	4b23      	ldr	r3, [pc, #140]	; (8007840 <LSM6DSL_0_Probe+0xf8>)
 80077b4:	601e      	str	r6, [r3, #0]
		/* The second cast (void *) is added to bypass Misra R11.3 rule */
		MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 80077b6:	4923      	ldr	r1, [pc, #140]	; (8007844 <LSM6DSL_0_Probe+0xfc>)
 80077b8:	4b23      	ldr	r3, [pc, #140]	; (8007848 <LSM6DSL_0_Probe+0x100>)
 80077ba:	6019      	str	r1, [r3, #0]

		if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U)) {
 80077bc:	f014 0f01 	tst.w	r4, #1
 80077c0:	d001      	beq.n	80077c6 <LSM6DSL_0_Probe+0x7e>
 80077c2:	2a01      	cmp	r2, #1
 80077c4:	d009      	beq.n	80077da <LSM6DSL_0_Probe+0x92>
				ret = BSP_ERROR_COMPONENT_FAILURE;
			}else  {
				ret = BSP_ERROR_NONE;
			}
		}
		if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U)) {
 80077c6:	f014 0f02 	tst.w	r4, #2
 80077ca:	d003      	beq.n	80077d4 <LSM6DSL_0_Probe+0x8c>
 80077cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d00e      	beq.n	80077f2 <LSM6DSL_0_Probe+0xaa>
				ret = BSP_ERROR_NONE;
			}
		}
	}
	return ret;
}
 80077d4:	4628      	mov	r0, r5
 80077d6:	b010      	add	sp, #64	; 0x40
 80077d8:	bd70      	pop	{r4, r5, r6, pc}
			MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 80077da:	4a1c      	ldr	r2, [pc, #112]	; (800784c <LSM6DSL_0_Probe+0x104>)
 80077dc:	4b1c      	ldr	r3, [pc, #112]	; (8007850 <LSM6DSL_0_Probe+0x108>)
 80077de:	601a      	str	r2, [r3, #0]
			if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK) {
 80077e0:	680b      	ldr	r3, [r1, #0]
 80077e2:	4630      	mov	r0, r6
 80077e4:	4798      	blx	r3
 80077e6:	4605      	mov	r5, r0
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d0ec      	beq.n	80077c6 <LSM6DSL_0_Probe+0x7e>
				ret = BSP_ERROR_COMPONENT_FAILURE;
 80077ec:	f06f 0504 	mvn.w	r5, #4
 80077f0:	e7e9      	b.n	80077c6 <LSM6DSL_0_Probe+0x7e>
			MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80077f2:	4a18      	ldr	r2, [pc, #96]	; (8007854 <LSM6DSL_0_Probe+0x10c>)
 80077f4:	4b16      	ldr	r3, [pc, #88]	; (8007850 <LSM6DSL_0_Probe+0x108>)
 80077f6:	605a      	str	r2, [r3, #4]
			if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK) {
 80077f8:	4b13      	ldr	r3, [pc, #76]	; (8007848 <LSM6DSL_0_Probe+0x100>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a10      	ldr	r2, [pc, #64]	; (8007840 <LSM6DSL_0_Probe+0xf8>)
 8007800:	6810      	ldr	r0, [r2, #0]
 8007802:	4798      	blx	r3
 8007804:	4605      	mov	r5, r0
 8007806:	2800      	cmp	r0, #0
 8007808:	d0e4      	beq.n	80077d4 <LSM6DSL_0_Probe+0x8c>
				ret = BSP_ERROR_COMPONENT_FAILURE;
 800780a:	f06f 0504 	mvn.w	r5, #4
 800780e:	e7e1      	b.n	80077d4 <LSM6DSL_0_Probe+0x8c>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007810:	f06f 0506 	mvn.w	r5, #6
 8007814:	e7de      	b.n	80077d4 <LSM6DSL_0_Probe+0x8c>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007816:	f06f 0506 	mvn.w	r5, #6
 800781a:	e7db      	b.n	80077d4 <LSM6DSL_0_Probe+0x8c>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800781c:	f06f 0506 	mvn.w	r5, #6
	return ret;
 8007820:	e7d8      	b.n	80077d4 <LSM6DSL_0_Probe+0x8c>
 8007822:	bf00      	nop
 8007824:	0800fcf5 	.word	0x0800fcf5
 8007828:	0800fcf9 	.word	0x0800fcf9
 800782c:	0800fd45 	.word	0x0800fd45
 8007830:	0800fd19 	.word	0x0800fd19
 8007834:	0800fd71 	.word	0x0800fd71
 8007838:	200025a0 	.word	0x200025a0
 800783c:	2000250c 	.word	0x2000250c
 8007840:	20002924 	.word	0x20002924
 8007844:	20001420 	.word	0x20001420
 8007848:	20002518 	.word	0x20002518
 800784c:	20001430 	.word	0x20001430
 8007850:	20002524 	.word	0x20002524
 8007854:	200013fc 	.word	0x200013fc

08007858 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8007858:	b570      	push	{r4, r5, r6, lr}
 800785a:	b090      	sub	sp, #64	; 0x40
 800785c:	4606      	mov	r6, r0
	static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
	LSM303AGR_Capabilities_t cap;
	int32_t ret = BSP_ERROR_NONE;

	/* Configure the accelero driver */
	io_ctx.BusType = LSM303AGR_I2C_BUS; /* I2C */
 800785e:	2300      	movs	r3, #0
 8007860:	930b      	str	r3, [sp, #44]	; 0x2c
	io_ctx.Address = LSM303AGR_I2C_ADD_XL;
 8007862:	2333      	movs	r3, #51	; 0x33
 8007864:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	io_ctx.Init = IKS01A2_I2C_Init;
 8007868:	4b27      	ldr	r3, [pc, #156]	; (8007908 <LSM303AGR_ACC_0_Probe+0xb0>)
 800786a:	9309      	str	r3, [sp, #36]	; 0x24
	io_ctx.DeInit = IKS01A2_I2C_DeInit;
 800786c:	4b27      	ldr	r3, [pc, #156]	; (800790c <LSM303AGR_ACC_0_Probe+0xb4>)
 800786e:	930a      	str	r3, [sp, #40]	; 0x28
	io_ctx.ReadReg = IKS01A2_I2C_ReadReg;
 8007870:	4b27      	ldr	r3, [pc, #156]	; (8007910 <LSM303AGR_ACC_0_Probe+0xb8>)
 8007872:	930e      	str	r3, [sp, #56]	; 0x38
	io_ctx.WriteReg = IKS01A2_I2C_WriteReg;
 8007874:	4b27      	ldr	r3, [pc, #156]	; (8007914 <LSM303AGR_ACC_0_Probe+0xbc>)
 8007876:	930d      	str	r3, [sp, #52]	; 0x34
	io_ctx.GetTick = IKS01A2_GetTick;
 8007878:	4b27      	ldr	r3, [pc, #156]	; (8007918 <LSM303AGR_ACC_0_Probe+0xc0>)
 800787a:	930f      	str	r3, [sp, #60]	; 0x3c

	if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK) {
 800787c:	a909      	add	r1, sp, #36	; 0x24
 800787e:	4827      	ldr	r0, [pc, #156]	; (800791c <LSM303AGR_ACC_0_Probe+0xc4>)
 8007880:	f7fb fbb8 	bl	8002ff4 <LSM303AGR_ACC_RegisterBusIO>
 8007884:	2800      	cmp	r0, #0
 8007886:	d135      	bne.n	80078f4 <LSM303AGR_ACC_0_Probe+0x9c>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
	}else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK) {
 8007888:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 800788c:	4823      	ldr	r0, [pc, #140]	; (800791c <LSM303AGR_ACC_0_Probe+0xc4>)
 800788e:	f7fb f85b 	bl	8002948 <LSM303AGR_ACC_ReadID>
 8007892:	4604      	mov	r4, r0
 8007894:	2800      	cmp	r0, #0
 8007896:	d130      	bne.n	80078fa <LSM303AGR_ACC_0_Probe+0xa2>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
	}else if (id != (uint8_t)LSM303AGR_ID_XL) {
 8007898:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800789c:	2b33      	cmp	r3, #51	; 0x33
 800789e:	d12f      	bne.n	8007900 <LSM303AGR_ACC_0_Probe+0xa8>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
	}else  {
		(void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 80078a0:	4d1e      	ldr	r5, [pc, #120]	; (800791c <LSM303AGR_ACC_0_Probe+0xc4>)
 80078a2:	a901      	add	r1, sp, #4
 80078a4:	4628      	mov	r0, r5
 80078a6:	f7fa fef1 	bl	800268c <LSM303AGR_ACC_GetCapabilities>
		MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80078aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80078ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80078b2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
															  uint32_t)cap.Magneto << 2);
 80078b6:	f89d 1006 	ldrb.w	r1, [sp, #6]
		MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80078ba:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80078be:	4918      	ldr	r1, [pc, #96]	; (8007920 <LSM303AGR_ACC_0_Probe+0xc8>)
 80078c0:	604b      	str	r3, [r1, #4]

		MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 80078c2:	4b18      	ldr	r3, [pc, #96]	; (8007924 <LSM303AGR_ACC_0_Probe+0xcc>)
 80078c4:	605d      	str	r5, [r3, #4]
		/* The second cast (void *) is added to bypass Misra R11.3 rule */
		MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 80078c6:	4918      	ldr	r1, [pc, #96]	; (8007928 <LSM303AGR_ACC_0_Probe+0xd0>)
 80078c8:	4b18      	ldr	r3, [pc, #96]	; (800792c <LSM303AGR_ACC_0_Probe+0xd4>)
 80078ca:	6059      	str	r1, [r3, #4]

		if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U)) {
 80078cc:	f016 0f02 	tst.w	r6, #2
 80078d0:	d001      	beq.n	80078d6 <LSM303AGR_ACC_0_Probe+0x7e>
 80078d2:	2a01      	cmp	r2, #1
 80078d4:	d002      	beq.n	80078dc <LSM303AGR_ACC_0_Probe+0x84>
			}
		}
	}

	return ret;
}
 80078d6:	4620      	mov	r0, r4
 80078d8:	b010      	add	sp, #64	; 0x40
 80078da:	bd70      	pop	{r4, r5, r6, pc}
			MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80078dc:	4a14      	ldr	r2, [pc, #80]	; (8007930 <LSM303AGR_ACC_0_Probe+0xd8>)
 80078de:	4b15      	ldr	r3, [pc, #84]	; (8007934 <LSM303AGR_ACC_0_Probe+0xdc>)
 80078e0:	611a      	str	r2, [r3, #16]
			if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK) {
 80078e2:	680b      	ldr	r3, [r1, #0]
 80078e4:	4628      	mov	r0, r5
 80078e6:	4798      	blx	r3
 80078e8:	4604      	mov	r4, r0
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d0f3      	beq.n	80078d6 <LSM303AGR_ACC_0_Probe+0x7e>
				ret = BSP_ERROR_COMPONENT_FAILURE;
 80078ee:	f06f 0404 	mvn.w	r4, #4
 80078f2:	e7f0      	b.n	80078d6 <LSM303AGR_ACC_0_Probe+0x7e>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80078f4:	f06f 0406 	mvn.w	r4, #6
 80078f8:	e7ed      	b.n	80078d6 <LSM303AGR_ACC_0_Probe+0x7e>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80078fa:	f06f 0406 	mvn.w	r4, #6
 80078fe:	e7ea      	b.n	80078d6 <LSM303AGR_ACC_0_Probe+0x7e>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007900:	f06f 0406 	mvn.w	r4, #6
	return ret;
 8007904:	e7e7      	b.n	80078d6 <LSM303AGR_ACC_0_Probe+0x7e>
 8007906:	bf00      	nop
 8007908:	0800fcf5 	.word	0x0800fcf5
 800790c:	0800fcf9 	.word	0x0800fcf9
 8007910:	0800fd45 	.word	0x0800fd45
 8007914:	0800fd19 	.word	0x0800fd19
 8007918:	0800fd71 	.word	0x0800fd71
 800791c:	20002548 	.word	0x20002548
 8007920:	2000250c 	.word	0x2000250c
 8007924:	20002924 	.word	0x20002924
 8007928:	20001394 	.word	0x20001394
 800792c:	20002518 	.word	0x20002518
 8007930:	200013a4 	.word	0x200013a4
 8007934:	20002524 	.word	0x20002524

08007938 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	b090      	sub	sp, #64	; 0x40
 800793c:	4606      	mov	r6, r0
	static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
	LSM303AGR_Capabilities_t cap;
	int32_t ret = BSP_ERROR_NONE;

	/* Configure the magneto driver */
	io_ctx.BusType = LSM303AGR_I2C_BUS; /* I2C */
 800793e:	2300      	movs	r3, #0
 8007940:	930b      	str	r3, [sp, #44]	; 0x2c
	io_ctx.Address = LSM303AGR_I2C_ADD_MG;
 8007942:	233d      	movs	r3, #61	; 0x3d
 8007944:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	io_ctx.Init = IKS01A2_I2C_Init;
 8007948:	4b27      	ldr	r3, [pc, #156]	; (80079e8 <LSM303AGR_MAG_0_Probe+0xb0>)
 800794a:	9309      	str	r3, [sp, #36]	; 0x24
	io_ctx.DeInit = IKS01A2_I2C_DeInit;
 800794c:	4b27      	ldr	r3, [pc, #156]	; (80079ec <LSM303AGR_MAG_0_Probe+0xb4>)
 800794e:	930a      	str	r3, [sp, #40]	; 0x28
	io_ctx.ReadReg = IKS01A2_I2C_ReadReg;
 8007950:	4b27      	ldr	r3, [pc, #156]	; (80079f0 <LSM303AGR_MAG_0_Probe+0xb8>)
 8007952:	930e      	str	r3, [sp, #56]	; 0x38
	io_ctx.WriteReg = IKS01A2_I2C_WriteReg;
 8007954:	4b27      	ldr	r3, [pc, #156]	; (80079f4 <LSM303AGR_MAG_0_Probe+0xbc>)
 8007956:	930d      	str	r3, [sp, #52]	; 0x34
	io_ctx.GetTick = IKS01A2_GetTick;
 8007958:	4b27      	ldr	r3, [pc, #156]	; (80079f8 <LSM303AGR_MAG_0_Probe+0xc0>)
 800795a:	930f      	str	r3, [sp, #60]	; 0x3c

	if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK) {
 800795c:	a909      	add	r1, sp, #36	; 0x24
 800795e:	4827      	ldr	r0, [pc, #156]	; (80079fc <LSM303AGR_MAG_0_Probe+0xc4>)
 8007960:	f7fb fb86 	bl	8003070 <LSM303AGR_MAG_RegisterBusIO>
 8007964:	2800      	cmp	r0, #0
 8007966:	d135      	bne.n	80079d4 <LSM303AGR_MAG_0_Probe+0x9c>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
	}else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK) {
 8007968:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 800796c:	4823      	ldr	r0, [pc, #140]	; (80079fc <LSM303AGR_MAG_0_Probe+0xc4>)
 800796e:	f7fb faa3 	bl	8002eb8 <LSM303AGR_MAG_ReadID>
 8007972:	4604      	mov	r4, r0
 8007974:	2800      	cmp	r0, #0
 8007976:	d130      	bne.n	80079da <LSM303AGR_MAG_0_Probe+0xa2>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
	}else if (id != (uint8_t)LSM303AGR_ID_MG) {
 8007978:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800797c:	2b40      	cmp	r3, #64	; 0x40
 800797e:	d12f      	bne.n	80079e0 <LSM303AGR_MAG_0_Probe+0xa8>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
	}else  {
		(void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8007980:	4d1e      	ldr	r5, [pc, #120]	; (80079fc <LSM303AGR_MAG_0_Probe+0xc4>)
 8007982:	a901      	add	r1, sp, #4
 8007984:	4628      	mov	r0, r5
 8007986:	f7fa fe93 	bl	80026b0 <LSM303AGR_MAG_GetCapabilities>
		MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800798a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800798e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007992:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
															  uint32_t)cap.Magneto << 2);
 8007996:	f89d 2006 	ldrb.w	r2, [sp, #6]
		MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800799a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800799e:	4918      	ldr	r1, [pc, #96]	; (8007a00 <LSM303AGR_MAG_0_Probe+0xc8>)
 80079a0:	608b      	str	r3, [r1, #8]

		MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 80079a2:	4b18      	ldr	r3, [pc, #96]	; (8007a04 <LSM303AGR_MAG_0_Probe+0xcc>)
 80079a4:	609d      	str	r5, [r3, #8]
		/* The second cast (void *) is added to bypass Misra R11.3 rule */
		MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 80079a6:	4918      	ldr	r1, [pc, #96]	; (8007a08 <LSM303AGR_MAG_0_Probe+0xd0>)
 80079a8:	4b18      	ldr	r3, [pc, #96]	; (8007a0c <LSM303AGR_MAG_0_Probe+0xd4>)
 80079aa:	6099      	str	r1, [r3, #8]

		if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U)) {
 80079ac:	f016 0f04 	tst.w	r6, #4
 80079b0:	d001      	beq.n	80079b6 <LSM303AGR_MAG_0_Probe+0x7e>
 80079b2:	2a01      	cmp	r2, #1
 80079b4:	d002      	beq.n	80079bc <LSM303AGR_MAG_0_Probe+0x84>
			}
		}
	}

	return ret;
}
 80079b6:	4620      	mov	r0, r4
 80079b8:	b010      	add	sp, #64	; 0x40
 80079ba:	bd70      	pop	{r4, r5, r6, pc}
			MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80079bc:	4a14      	ldr	r2, [pc, #80]	; (8007a10 <LSM303AGR_MAG_0_Probe+0xd8>)
 80079be:	4b15      	ldr	r3, [pc, #84]	; (8007a14 <LSM303AGR_MAG_0_Probe+0xdc>)
 80079c0:	621a      	str	r2, [r3, #32]
			if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK) {
 80079c2:	680b      	ldr	r3, [r1, #0]
 80079c4:	4628      	mov	r0, r5
 80079c6:	4798      	blx	r3
 80079c8:	4604      	mov	r4, r0
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d0f3      	beq.n	80079b6 <LSM303AGR_MAG_0_Probe+0x7e>
				ret = BSP_ERROR_COMPONENT_FAILURE;
 80079ce:	f06f 0404 	mvn.w	r4, #4
 80079d2:	e7f0      	b.n	80079b6 <LSM303AGR_MAG_0_Probe+0x7e>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80079d4:	f06f 0406 	mvn.w	r4, #6
 80079d8:	e7ed      	b.n	80079b6 <LSM303AGR_MAG_0_Probe+0x7e>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80079da:	f06f 0406 	mvn.w	r4, #6
 80079de:	e7ea      	b.n	80079b6 <LSM303AGR_MAG_0_Probe+0x7e>
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80079e0:	f06f 0406 	mvn.w	r4, #6
	return ret;
 80079e4:	e7e7      	b.n	80079b6 <LSM303AGR_MAG_0_Probe+0x7e>
 80079e6:	bf00      	nop
 80079e8:	0800fcf5 	.word	0x0800fcf5
 80079ec:	0800fcf9 	.word	0x0800fcf9
 80079f0:	0800fd45 	.word	0x0800fd45
 80079f4:	0800fd19 	.word	0x0800fd19
 80079f8:	0800fd71 	.word	0x0800fd71
 80079fc:	20002574 	.word	0x20002574
 8007a00:	2000250c 	.word	0x2000250c
 8007a04:	20002924 	.word	0x20002924
 8007a08:	200013c8 	.word	0x200013c8
 8007a0c:	20002518 	.word	0x20002518
 8007a10:	200013d8 	.word	0x200013d8
 8007a14:	20002524 	.word	0x20002524

08007a18 <IKS01A2_MOTION_SENSOR_Init>:
{
 8007a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a1c:	b089      	sub	sp, #36	; 0x24
 8007a1e:	4606      	mov	r6, r0
 8007a20:	460f      	mov	r7, r1
	switch (Instance) {
 8007a22:	2801      	cmp	r0, #1
 8007a24:	d036      	beq.n	8007a94 <IKS01A2_MOTION_SENSOR_Init+0x7c>
 8007a26:	b160      	cbz	r0, 8007a42 <IKS01A2_MOTION_SENSOR_Init+0x2a>
 8007a28:	2802      	cmp	r0, #2
 8007a2a:	d05b      	beq.n	8007ae4 <IKS01A2_MOTION_SENSOR_Init+0xcc>
	uint32_t component_functions = 0;
 8007a2c:	f04f 0900 	mov.w	r9, #0
		ret = BSP_ERROR_WRONG_PARAM;
 8007a30:	f06f 0801 	mvn.w	r8, #1
	if (ret != BSP_ERROR_NONE) {
 8007a34:	f1b8 0f00 	cmp.w	r8, #0
 8007a38:	f040 809a 	bne.w	8007b70 <IKS01A2_MOTION_SENSOR_Init+0x158>
 8007a3c:	2400      	movs	r4, #0
 8007a3e:	2501      	movs	r5, #1
 8007a40:	e079      	b.n	8007b36 <IKS01A2_MOTION_SENSOR_Init+0x11e>
		if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE) {
 8007a42:	4608      	mov	r0, r1
 8007a44:	f7ff fe80 	bl	8007748 <LSM6DSL_0_Probe>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	f040 808f 	bne.w	8007b6c <IKS01A2_MOTION_SENSOR_Init+0x154>
		if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE) {
 8007a4e:	4b52      	ldr	r3, [pc, #328]	; (8007b98 <IKS01A2_MOTION_SENSOR_Init+0x180>)
 8007a50:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	a901      	add	r1, sp, #4
 8007a58:	4a50      	ldr	r2, [pc, #320]	; (8007b9c <IKS01A2_MOTION_SENSOR_Init+0x184>)
 8007a5a:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8007a5e:	4798      	blx	r3
 8007a60:	4680      	mov	r8, r0
 8007a62:	2800      	cmp	r0, #0
 8007a64:	f040 8088 	bne.w	8007b78 <IKS01A2_MOTION_SENSOR_Init+0x160>
		if (cap.Acc == 1U) {
 8007a68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d00b      	beq.n	8007a88 <IKS01A2_MOTION_SENSOR_Init+0x70>
	uint32_t component_functions = 0;
 8007a70:	46b1      	mov	r9, r6
		if (cap.Gyro == 1U) {
 8007a72:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d009      	beq.n	8007a8e <IKS01A2_MOTION_SENSOR_Init+0x76>
		if (cap.Magneto == 1U) {
 8007a7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d1d8      	bne.n	8007a34 <IKS01A2_MOTION_SENSOR_Init+0x1c>
			component_functions |= MOTION_MAGNETO;
 8007a82:	f049 0904 	orr.w	r9, r9, #4
 8007a86:	e7d5      	b.n	8007a34 <IKS01A2_MOTION_SENSOR_Init+0x1c>
			component_functions |= MOTION_ACCELERO;
 8007a88:	f04f 0902 	mov.w	r9, #2
 8007a8c:	e7f1      	b.n	8007a72 <IKS01A2_MOTION_SENSOR_Init+0x5a>
			component_functions |= MOTION_GYRO;
 8007a8e:	f049 0901 	orr.w	r9, r9, #1
 8007a92:	e7f2      	b.n	8007a7a <IKS01A2_MOTION_SENSOR_Init+0x62>
		if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE) {
 8007a94:	4608      	mov	r0, r1
 8007a96:	f7ff fedf 	bl	8007858 <LSM303AGR_ACC_0_Probe>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d16f      	bne.n	8007b7e <IKS01A2_MOTION_SENSOR_Init+0x166>
		if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE) {
 8007a9e:	4b3e      	ldr	r3, [pc, #248]	; (8007b98 <IKS01A2_MOTION_SENSOR_Init+0x180>)
 8007aa0:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	a901      	add	r1, sp, #4
 8007aa8:	4a3c      	ldr	r2, [pc, #240]	; (8007b9c <IKS01A2_MOTION_SENSOR_Init+0x184>)
 8007aaa:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8007aae:	4798      	blx	r3
 8007ab0:	4680      	mov	r8, r0
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d166      	bne.n	8007b84 <IKS01A2_MOTION_SENSOR_Init+0x16c>
		if (cap.Acc == 1U) {
 8007ab6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d00c      	beq.n	8007ad8 <IKS01A2_MOTION_SENSOR_Init+0xc0>
	uint32_t component_functions = 0;
 8007abe:	f04f 0900 	mov.w	r9, #0
		if (cap.Gyro == 1U) {
 8007ac2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d009      	beq.n	8007ade <IKS01A2_MOTION_SENSOR_Init+0xc6>
		if (cap.Magneto == 1U) {
 8007aca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d1b0      	bne.n	8007a34 <IKS01A2_MOTION_SENSOR_Init+0x1c>
			component_functions |= MOTION_MAGNETO;
 8007ad2:	f049 0904 	orr.w	r9, r9, #4
 8007ad6:	e7ad      	b.n	8007a34 <IKS01A2_MOTION_SENSOR_Init+0x1c>
			component_functions |= MOTION_ACCELERO;
 8007ad8:	f04f 0902 	mov.w	r9, #2
 8007adc:	e7f1      	b.n	8007ac2 <IKS01A2_MOTION_SENSOR_Init+0xaa>
			component_functions |= MOTION_GYRO;
 8007ade:	f049 0901 	orr.w	r9, r9, #1
 8007ae2:	e7f2      	b.n	8007aca <IKS01A2_MOTION_SENSOR_Init+0xb2>
		if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE) {
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	f7ff ff27 	bl	8007938 <LSM303AGR_MAG_0_Probe>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d14d      	bne.n	8007b8a <IKS01A2_MOTION_SENSOR_Init+0x172>
		if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE) {
 8007aee:	4b2a      	ldr	r3, [pc, #168]	; (8007b98 <IKS01A2_MOTION_SENSOR_Init+0x180>)
 8007af0:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	a901      	add	r1, sp, #4
 8007af8:	4a28      	ldr	r2, [pc, #160]	; (8007b9c <IKS01A2_MOTION_SENSOR_Init+0x184>)
 8007afa:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8007afe:	4798      	blx	r3
 8007b00:	4680      	mov	r8, r0
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d144      	bne.n	8007b90 <IKS01A2_MOTION_SENSOR_Init+0x178>
		if (cap.Acc == 1U) {
 8007b06:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d00c      	beq.n	8007b28 <IKS01A2_MOTION_SENSOR_Init+0x110>
	uint32_t component_functions = 0;
 8007b0e:	f04f 0900 	mov.w	r9, #0
		if (cap.Gyro == 1U) {
 8007b12:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d008      	beq.n	8007b2c <IKS01A2_MOTION_SENSOR_Init+0x114>
		if (cap.Magneto == 1U) {
 8007b1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d188      	bne.n	8007a34 <IKS01A2_MOTION_SENSOR_Init+0x1c>
			component_functions |= MOTION_MAGNETO;
 8007b22:	f049 0904 	orr.w	r9, r9, #4
 8007b26:	e785      	b.n	8007a34 <IKS01A2_MOTION_SENSOR_Init+0x1c>
			component_functions |= MOTION_ACCELERO;
 8007b28:	46b1      	mov	r9, r6
 8007b2a:	e7f2      	b.n	8007b12 <IKS01A2_MOTION_SENSOR_Init+0xfa>
			component_functions |= MOTION_GYRO;
 8007b2c:	f049 0901 	orr.w	r9, r9, #1
 8007b30:	e7f3      	b.n	8007b1a <IKS01A2_MOTION_SENSOR_Init+0x102>
		function = function << 1;
 8007b32:	006d      	lsls	r5, r5, #1
	for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++) {
 8007b34:	3401      	adds	r4, #1
 8007b36:	2c02      	cmp	r4, #2
 8007b38:	d81a      	bhi.n	8007b70 <IKS01A2_MOTION_SENSOR_Init+0x158>
		if (((Functions & function) == function) && ((component_functions & function) == function)) {
 8007b3a:	ea35 0307 	bics.w	r3, r5, r7
 8007b3e:	d1f8      	bne.n	8007b32 <IKS01A2_MOTION_SENSOR_Init+0x11a>
 8007b40:	ea35 0309 	bics.w	r3, r5, r9
 8007b44:	d1f5      	bne.n	8007b32 <IKS01A2_MOTION_SENSOR_Init+0x11a>
			if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE) {
 8007b46:	4b16      	ldr	r3, [pc, #88]	; (8007ba0 <IKS01A2_MOTION_SENSOR_Init+0x188>)
 8007b48:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8007b4c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8007b50:	4413      	add	r3, r2
 8007b52:	4a14      	ldr	r2, [pc, #80]	; (8007ba4 <IKS01A2_MOTION_SENSOR_Init+0x18c>)
 8007b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a10      	ldr	r2, [pc, #64]	; (8007b9c <IKS01A2_MOTION_SENSOR_Init+0x184>)
 8007b5c:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8007b60:	4798      	blx	r3
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d0e5      	beq.n	8007b32 <IKS01A2_MOTION_SENSOR_Init+0x11a>
				return BSP_ERROR_COMPONENT_FAILURE;
 8007b66:	f06f 0804 	mvn.w	r8, #4
 8007b6a:	e001      	b.n	8007b70 <IKS01A2_MOTION_SENSOR_Init+0x158>
			return BSP_ERROR_NO_INIT;
 8007b6c:	f04f 38ff 	mov.w	r8, #4294967295
}
 8007b70:	4640      	mov	r0, r8
 8007b72:	b009      	add	sp, #36	; 0x24
 8007b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return BSP_ERROR_UNKNOWN_COMPONENT;
 8007b78:	f06f 0806 	mvn.w	r8, #6
 8007b7c:	e7f8      	b.n	8007b70 <IKS01A2_MOTION_SENSOR_Init+0x158>
			return BSP_ERROR_NO_INIT;
 8007b7e:	f04f 38ff 	mov.w	r8, #4294967295
 8007b82:	e7f5      	b.n	8007b70 <IKS01A2_MOTION_SENSOR_Init+0x158>
			return BSP_ERROR_UNKNOWN_COMPONENT;
 8007b84:	f06f 0806 	mvn.w	r8, #6
 8007b88:	e7f2      	b.n	8007b70 <IKS01A2_MOTION_SENSOR_Init+0x158>
			return BSP_ERROR_NO_INIT;
 8007b8a:	f04f 38ff 	mov.w	r8, #4294967295
 8007b8e:	e7ef      	b.n	8007b70 <IKS01A2_MOTION_SENSOR_Init+0x158>
			return BSP_ERROR_UNKNOWN_COMPONENT;
 8007b90:	f06f 0806 	mvn.w	r8, #6
 8007b94:	e7ec      	b.n	8007b70 <IKS01A2_MOTION_SENSOR_Init+0x158>
 8007b96:	bf00      	nop
 8007b98:	20002518 	.word	0x20002518
 8007b9c:	20002924 	.word	0x20002924
 8007ba0:	08021cb0 	.word	0x08021cb0
 8007ba4:	20002524 	.word	0x20002524

08007ba8 <IKS01A2_MOTION_SENSOR_GetCapabilities>:
{
 8007ba8:	b508      	push	{r3, lr}
	if (Instance >= IKS01A2_MOTION_INSTANCES_NBR) {
 8007baa:	2802      	cmp	r0, #2
 8007bac:	d80e      	bhi.n	8007bcc <IKS01A2_MOTION_SENSOR_GetCapabilities+0x24>
	}else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE) {
 8007bae:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <IKS01A2_MOTION_SENSOR_GetCapabilities+0x2c>)
 8007bb0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	4a08      	ldr	r2, [pc, #32]	; (8007bd8 <IKS01A2_MOTION_SENSOR_GetCapabilities+0x30>)
 8007bb8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8007bbc:	4798      	blx	r3
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	b908      	cbnz	r0, 8007bc6 <IKS01A2_MOTION_SENSOR_GetCapabilities+0x1e>
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	bd08      	pop	{r3, pc}
		ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007bc6:	f06f 0306 	mvn.w	r3, #6
 8007bca:	e7fa      	b.n	8007bc2 <IKS01A2_MOTION_SENSOR_GetCapabilities+0x1a>
		ret = BSP_ERROR_WRONG_PARAM;
 8007bcc:	f06f 0301 	mvn.w	r3, #1
	return ret;
 8007bd0:	e7f7      	b.n	8007bc2 <IKS01A2_MOTION_SENSOR_GetCapabilities+0x1a>
 8007bd2:	bf00      	nop
 8007bd4:	20002518 	.word	0x20002518
 8007bd8:	20002924 	.word	0x20002924

08007bdc <IKS01A2_MOTION_SENSOR_Enable>:
{
 8007bdc:	b508      	push	{r3, lr}
	if (Instance >= IKS01A2_MOTION_INSTANCES_NBR) {
 8007bde:	2802      	cmp	r0, #2
 8007be0:	d81a      	bhi.n	8007c18 <IKS01A2_MOTION_SENSOR_Enable+0x3c>
		if ((MotionCtx[Instance].Functions & Function) == Function) {
 8007be2:	4b10      	ldr	r3, [pc, #64]	; (8007c24 <IKS01A2_MOTION_SENSOR_Enable+0x48>)
 8007be4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007be8:	ea31 0303 	bics.w	r3, r1, r3
 8007bec:	d117      	bne.n	8007c1e <IKS01A2_MOTION_SENSOR_Enable+0x42>
			if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE) {
 8007bee:	4b0e      	ldr	r3, [pc, #56]	; (8007c28 <IKS01A2_MOTION_SENSOR_Enable+0x4c>)
 8007bf0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8007bf4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007bf8:	4413      	add	r3, r2
 8007bfa:	4a0c      	ldr	r2, [pc, #48]	; (8007c2c <IKS01A2_MOTION_SENSOR_Enable+0x50>)
 8007bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a0b      	ldr	r2, [pc, #44]	; (8007c30 <IKS01A2_MOTION_SENSOR_Enable+0x54>)
 8007c04:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8007c08:	4798      	blx	r3
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	b908      	cbnz	r0, 8007c12 <IKS01A2_MOTION_SENSOR_Enable+0x36>
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	bd08      	pop	{r3, pc}
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8007c12:	f06f 0304 	mvn.w	r3, #4
 8007c16:	e7fa      	b.n	8007c0e <IKS01A2_MOTION_SENSOR_Enable+0x32>
		ret = BSP_ERROR_WRONG_PARAM;
 8007c18:	f06f 0301 	mvn.w	r3, #1
 8007c1c:	e7f7      	b.n	8007c0e <IKS01A2_MOTION_SENSOR_Enable+0x32>
			ret = BSP_ERROR_WRONG_PARAM;
 8007c1e:	f06f 0301 	mvn.w	r3, #1
	return ret;
 8007c22:	e7f4      	b.n	8007c0e <IKS01A2_MOTION_SENSOR_Enable+0x32>
 8007c24:	2000250c 	.word	0x2000250c
 8007c28:	08021cb0 	.word	0x08021cb0
 8007c2c:	20002524 	.word	0x20002524
 8007c30:	20002924 	.word	0x20002924

08007c34 <IKS01A2_MOTION_SENSOR_GetAxes>:
{
 8007c34:	b508      	push	{r3, lr}
	if (Instance >= IKS01A2_MOTION_INSTANCES_NBR) {
 8007c36:	2802      	cmp	r0, #2
 8007c38:	d81c      	bhi.n	8007c74 <IKS01A2_MOTION_SENSOR_GetAxes+0x40>
		if ((MotionCtx[Instance].Functions & Function) == Function) {
 8007c3a:	4b11      	ldr	r3, [pc, #68]	; (8007c80 <IKS01A2_MOTION_SENSOR_GetAxes+0x4c>)
 8007c3c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c40:	ea31 0303 	bics.w	r3, r1, r3
 8007c44:	d119      	bne.n	8007c7a <IKS01A2_MOTION_SENSOR_GetAxes+0x46>
 8007c46:	460b      	mov	r3, r1
			if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE) {
 8007c48:	490e      	ldr	r1, [pc, #56]	; (8007c84 <IKS01A2_MOTION_SENSOR_GetAxes+0x50>)
 8007c4a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007c4e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007c52:	440b      	add	r3, r1
 8007c54:	490c      	ldr	r1, [pc, #48]	; (8007c88 <IKS01A2_MOTION_SENSOR_GetAxes+0x54>)
 8007c56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	4a0b      	ldr	r2, [pc, #44]	; (8007c8c <IKS01A2_MOTION_SENSOR_GetAxes+0x58>)
 8007c60:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8007c64:	4798      	blx	r3
 8007c66:	4603      	mov	r3, r0
 8007c68:	b908      	cbnz	r0, 8007c6e <IKS01A2_MOTION_SENSOR_GetAxes+0x3a>
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	bd08      	pop	{r3, pc}
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8007c6e:	f06f 0304 	mvn.w	r3, #4
 8007c72:	e7fa      	b.n	8007c6a <IKS01A2_MOTION_SENSOR_GetAxes+0x36>
		ret = BSP_ERROR_WRONG_PARAM;
 8007c74:	f06f 0301 	mvn.w	r3, #1
 8007c78:	e7f7      	b.n	8007c6a <IKS01A2_MOTION_SENSOR_GetAxes+0x36>
			ret = BSP_ERROR_WRONG_PARAM;
 8007c7a:	f06f 0301 	mvn.w	r3, #1
	return ret;
 8007c7e:	e7f4      	b.n	8007c6a <IKS01A2_MOTION_SENSOR_GetAxes+0x36>
 8007c80:	2000250c 	.word	0x2000250c
 8007c84:	08021cb0 	.word	0x08021cb0
 8007c88:	20002524 	.word	0x20002524
 8007c8c:	20002924 	.word	0x20002924

08007c90 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
{
 8007c90:	b508      	push	{r3, lr}
	if (Instance >= IKS01A2_MOTION_INSTANCES_NBR) {
 8007c92:	2802      	cmp	r0, #2
 8007c94:	d81a      	bhi.n	8007ccc <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x3c>
		if ((MotionCtx[Instance].Functions & Function) == Function) {
 8007c96:	4b10      	ldr	r3, [pc, #64]	; (8007cd8 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x48>)
 8007c98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c9c:	ea31 0303 	bics.w	r3, r1, r3
 8007ca0:	d117      	bne.n	8007cd2 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x42>
			if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE) {
 8007ca2:	4b0e      	ldr	r3, [pc, #56]	; (8007cdc <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x4c>)
 8007ca4:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8007ca8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007cac:	4413      	add	r3, r2
 8007cae:	4a0c      	ldr	r2, [pc, #48]	; (8007ce0 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x50>)
 8007cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	4a0b      	ldr	r2, [pc, #44]	; (8007ce4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x54>)
 8007cb8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8007cbc:	4798      	blx	r3
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	b908      	cbnz	r0, 8007cc6 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x36>
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	bd08      	pop	{r3, pc}
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8007cc6:	f06f 0304 	mvn.w	r3, #4
 8007cca:	e7fa      	b.n	8007cc2 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x32>
		ret = BSP_ERROR_WRONG_PARAM;
 8007ccc:	f06f 0301 	mvn.w	r3, #1
 8007cd0:	e7f7      	b.n	8007cc2 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x32>
			ret = BSP_ERROR_WRONG_PARAM;
 8007cd2:	f06f 0301 	mvn.w	r3, #1
	return ret;
 8007cd6:	e7f4      	b.n	8007cc2 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x32>
 8007cd8:	2000250c 	.word	0x2000250c
 8007cdc:	08021cb0 	.word	0x08021cb0
 8007ce0:	20002524 	.word	0x20002524
 8007ce4:	20002924 	.word	0x20002924

08007ce8 <IKS01A2_MOTION_SENSOR_SetFullScale>:
{
 8007ce8:	b508      	push	{r3, lr}
	if (Instance >= IKS01A2_MOTION_INSTANCES_NBR) {
 8007cea:	2802      	cmp	r0, #2
 8007cec:	d81c      	bhi.n	8007d28 <IKS01A2_MOTION_SENSOR_SetFullScale+0x40>
		if ((MotionCtx[Instance].Functions & Function) == Function) {
 8007cee:	4b11      	ldr	r3, [pc, #68]	; (8007d34 <IKS01A2_MOTION_SENSOR_SetFullScale+0x4c>)
 8007cf0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007cf4:	ea31 0303 	bics.w	r3, r1, r3
 8007cf8:	d119      	bne.n	8007d2e <IKS01A2_MOTION_SENSOR_SetFullScale+0x46>
 8007cfa:	460b      	mov	r3, r1
			if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8007cfc:	490e      	ldr	r1, [pc, #56]	; (8007d38 <IKS01A2_MOTION_SENSOR_SetFullScale+0x50>)
 8007cfe:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007d02:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007d06:	440b      	add	r3, r1
 8007d08:	490c      	ldr	r1, [pc, #48]	; (8007d3c <IKS01A2_MOTION_SENSOR_SetFullScale+0x54>)
 8007d0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	4611      	mov	r1, r2
 8007d12:	4a0b      	ldr	r2, [pc, #44]	; (8007d40 <IKS01A2_MOTION_SENSOR_SetFullScale+0x58>)
 8007d14:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8007d18:	4798      	blx	r3
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	b908      	cbnz	r0, 8007d22 <IKS01A2_MOTION_SENSOR_SetFullScale+0x3a>
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	bd08      	pop	{r3, pc}
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8007d22:	f06f 0304 	mvn.w	r3, #4
 8007d26:	e7fa      	b.n	8007d1e <IKS01A2_MOTION_SENSOR_SetFullScale+0x36>
		ret = BSP_ERROR_WRONG_PARAM;
 8007d28:	f06f 0301 	mvn.w	r3, #1
 8007d2c:	e7f7      	b.n	8007d1e <IKS01A2_MOTION_SENSOR_SetFullScale+0x36>
			ret = BSP_ERROR_WRONG_PARAM;
 8007d2e:	f06f 0301 	mvn.w	r3, #1
	return ret;
 8007d32:	e7f4      	b.n	8007d1e <IKS01A2_MOTION_SENSOR_SetFullScale+0x36>
 8007d34:	2000250c 	.word	0x2000250c
 8007d38:	08021cb0 	.word	0x08021cb0
 8007d3c:	20002524 	.word	0x20002524
 8007d40:	20002924 	.word	0x20002924

08007d44 <IKS01A2_MOTION_SENSOR_Enable_6D_Orientation>:
 * @param  IntPin the interrupt pin to be used
 * @note   This function sets the LSM6DSL accelerometer ODR to 416Hz and the LSM6DSL accelerometer full scale to 2g
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable_6D_Orientation(uint32_t Instance, IKS01A2_MOTION_SENSOR_IntPin_t IntPin)
{
 8007d44:	b508      	push	{r3, lr}
	int32_t ret;

	switch (Instance) {
 8007d46:	b128      	cbz	r0, 8007d54 <IKS01A2_MOTION_SENSOR_Enable_6D_Orientation+0x10>
 8007d48:	2802      	cmp	r0, #2
 8007d4a:	d80e      	bhi.n	8007d6a <IKS01A2_MOTION_SENSOR_Enable_6D_Orientation+0x26>
		break;
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
	case IKS01A2_LSM303AGR_ACC_0:
		ret = BSP_ERROR_COMPONENT_FAILURE;
 8007d4c:	f06f 0304 	mvn.w	r3, #4
		ret = BSP_ERROR_WRONG_PARAM;
		break;
	}

	return ret;
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	bd08      	pop	{r3, pc}
		if (LSM6DSL_ACC_Enable_6D_Orientation(MotionCompObj[Instance], (LSM6DSL_SensorIntPin_t)IntPin) != BSP_ERROR_NONE) {
 8007d54:	4a06      	ldr	r2, [pc, #24]	; (8007d70 <IKS01A2_MOTION_SENSOR_Enable_6D_Orientation+0x2c>)
 8007d56:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8007d5a:	f7fc f857 	bl	8003e0c <LSM6DSL_ACC_Enable_6D_Orientation>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d0f5      	beq.n	8007d50 <IKS01A2_MOTION_SENSOR_Enable_6D_Orientation+0xc>
			ret = BSP_ERROR_COMPONENT_FAILURE;
 8007d64:	f06f 0304 	mvn.w	r3, #4
 8007d68:	e7f2      	b.n	8007d50 <IKS01A2_MOTION_SENSOR_Enable_6D_Orientation+0xc>
		ret = BSP_ERROR_WRONG_PARAM;
 8007d6a:	f06f 0301 	mvn.w	r3, #1
	return ret;
 8007d6e:	e7ef      	b.n	8007d50 <IKS01A2_MOTION_SENSOR_Enable_6D_Orientation+0xc>
 8007d70:	20002924 	.word	0x20002924

08007d74 <BSP_LED_Init>:
 * @param  Led: Specifies the Led to be configured.
 *   This parameter can be one of following parameters:
 *     @arg LED2
 */
void BSP_LED_Init(Led_TypeDef Led)
{
 8007d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d76:	b087      	sub	sp, #28
 8007d78:	4606      	mov	r6, r0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the GPIO_LED Clock */
	LEDx_GPIO_CLK_ENABLE(Led);
 8007d7a:	2400      	movs	r4, #0
 8007d7c:	9400      	str	r4, [sp, #0]
 8007d7e:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <BSP_LED_Init+0x48>)
 8007d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d82:	f042 0201 	orr.w	r2, r2, #1
 8007d86:	631a      	str	r2, [r3, #48]	; 0x30
 8007d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	9b00      	ldr	r3, [sp, #0]

	/* Configure the GPIO_LED pin */
	GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8007d92:	2720      	movs	r7, #32
 8007d94:	9701      	str	r7, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d96:	2301      	movs	r3, #1
 8007d98:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d9a:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	9304      	str	r3, [sp, #16]

	HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8007da0:	4d07      	ldr	r5, [pc, #28]	; (8007dc0 <BSP_LED_Init+0x4c>)
 8007da2:	a901      	add	r1, sp, #4
 8007da4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8007da8:	f001 fcac 	bl	8009704 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8007dac:	4622      	mov	r2, r4
 8007dae:	4639      	mov	r1, r7
 8007db0:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8007db4:	f001 feae 	bl	8009b14 <HAL_GPIO_WritePin>
}
 8007db8:	b007      	add	sp, #28
 8007dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dbc:	40023800 	.word	0x40023800
 8007dc0:	20001478 	.word	0x20001478

08007dc4 <BSP_LED_On>:
 * @param  Led: Specifies the Led to be set on.
 *   This parameter can be one of following parameters:
 *     @arg LED2
 */
void BSP_LED_On(Led_TypeDef Led)
{
 8007dc4:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	2120      	movs	r1, #32
 8007dca:	4b03      	ldr	r3, [pc, #12]	; (8007dd8 <BSP_LED_On+0x14>)
 8007dcc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007dd0:	f001 fea0 	bl	8009b14 <HAL_GPIO_WritePin>
 8007dd4:	bd08      	pop	{r3, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20001478 	.word	0x20001478

08007ddc <BSP_LED_Off>:
 * @param  Led: Specifies the Led to be set off.
 *   This parameter can be one of following parameters:
 *     @arg LED2
 */
void BSP_LED_Off(Led_TypeDef Led)
{
 8007ddc:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8007dde:	2200      	movs	r2, #0
 8007de0:	2120      	movs	r1, #32
 8007de2:	4b03      	ldr	r3, [pc, #12]	; (8007df0 <BSP_LED_Off+0x14>)
 8007de4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007de8:	f001 fe94 	bl	8009b14 <HAL_GPIO_WritePin>
 8007dec:	bd08      	pop	{r3, pc}
 8007dee:	bf00      	nop
 8007df0:	20001478 	.word	0x20001478

08007df4 <BSP_PB_Init>:
 *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO
 *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
 *                            generation capability
 */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8007df4:	b530      	push	{r4, r5, lr}
 8007df6:	b087      	sub	sp, #28
 8007df8:	4605      	mov	r5, r0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the BUTTON Clock */
	BUTTONx_GPIO_CLK_ENABLE(Button);
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	4b1a      	ldr	r3, [pc, #104]	; (8007e68 <BSP_PB_Init+0x74>)
 8007e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e02:	f042 0204 	orr.w	r2, r2, #4
 8007e06:	631a      	str	r2, [r3, #48]	; 0x30
 8007e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0a:	f003 0304 	and.w	r3, r3, #4
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	9b00      	ldr	r3, [sp, #0]

	if (ButtonMode == BUTTON_MODE_GPIO) {
 8007e12:	460c      	mov	r4, r1
 8007e14:	b119      	cbz	r1, 8007e1e <BSP_PB_Init+0x2a>
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
		HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
	}

	if (ButtonMode == BUTTON_MODE_EXTI) {
 8007e16:	2c01      	cmp	r4, #1
 8007e18:	d010      	beq.n	8007e3c <BSP_PB_Init+0x48>

		/* Enable and set Button EXTI Interrupt to the lowest priority */
		HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
		HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
	}
}
 8007e1a:	b007      	add	sp, #28
 8007e1c:	bd30      	pop	{r4, r5, pc}
		GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8007e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e22:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e24:	2300      	movs	r3, #0
 8007e26:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007e28:	2302      	movs	r3, #2
 8007e2a:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8007e2c:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8007e2e:	a901      	add	r1, sp, #4
 8007e30:	4b0e      	ldr	r3, [pc, #56]	; (8007e6c <BSP_PB_Init+0x78>)
 8007e32:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007e36:	f001 fc65 	bl	8009704 <HAL_GPIO_Init>
 8007e3a:	e7ec      	b.n	8007e16 <BSP_PB_Init+0x22>
		GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8007e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e40:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e42:	2400      	movs	r4, #0
 8007e44:	9403      	str	r4, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007e46:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <BSP_PB_Init+0x7c>)
 8007e48:	9302      	str	r3, [sp, #8]
		HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8007e4a:	a901      	add	r1, sp, #4
 8007e4c:	4b07      	ldr	r3, [pc, #28]	; (8007e6c <BSP_PB_Init+0x78>)
 8007e4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e52:	f001 fc57 	bl	8009704 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8007e56:	4622      	mov	r2, r4
 8007e58:	210f      	movs	r1, #15
 8007e5a:	2028      	movs	r0, #40	; 0x28
 8007e5c:	f001 f838 	bl	8008ed0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8007e60:	2028      	movs	r0, #40	; 0x28
 8007e62:	f001 f879 	bl	8008f58 <HAL_NVIC_EnableIRQ>
}
 8007e66:	e7d8      	b.n	8007e1a <BSP_PB_Init+0x26>
 8007e68:	40023800 	.word	0x40023800
 8007e6c:	20001474 	.word	0x20001474
 8007e70:	10210000 	.word	0x10210000

08007e74 <_I2cFailRecover>:
 * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
 * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
 * this routine does use gpio to manipulate and recover i2c bus line in all cases.
 */
static void _I2cFailRecover()
{
 8007e74:	b570      	push	{r4, r5, r6, lr}
 8007e76:	b088      	sub	sp, #32
	// We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
	// by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
	// all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state

	// Enable I/O
	__GPIOB_CLK_ENABLE();
 8007e78:	2600      	movs	r6, #0
 8007e7a:	9601      	str	r6, [sp, #4]
 8007e7c:	4b3d      	ldr	r3, [pc, #244]	; (8007f74 <_I2cFailRecover+0x100>)
 8007e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e80:	f042 0202 	orr.w	r2, r2, #2
 8007e84:	631a      	str	r2, [r3, #48]	; 0x30
 8007e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	9b01      	ldr	r3, [sp, #4]

	/**I2C1 GPIO Configuration
	   PB8     ------> I2C1_SCL
	   PB9     ------> I2C1_SDA
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8007e90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007e94:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e96:	2312      	movs	r3, #18
 8007e98:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007ea2:	2304      	movs	r3, #4
 8007ea4:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ea6:	a903      	add	r1, sp, #12
 8007ea8:	4833      	ldr	r0, [pc, #204]	; (8007f78 <_I2cFailRecover+0x104>)
 8007eaa:	f001 fc2b 	bl	8009704 <HAL_GPIO_Init>
 8007eae:	e01f      	b.n	8007ef0 <_I2cFailRecover+0x7c>

	//TODO we could do this faster by not using HAL delay 1ms for clk timing
	do {
		for (i = 0; i < 10; i++) {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8007eb0:	4d31      	ldr	r5, [pc, #196]	; (8007f78 <_I2cFailRecover+0x104>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f001 fe2b 	bl	8009b14 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8007ebe:	2001      	movs	r0, #1
 8007ec0:	f000 fc98 	bl	80087f4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f001 fe22 	bl	8009b14 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8007ed0:	2001      	movs	r0, #1
 8007ed2:	f000 fc8f 	bl	80087f4 <HAL_Delay>
		for (i = 0; i < 10; i++) {
 8007ed6:	3401      	adds	r4, #1
 8007ed8:	2c09      	cmp	r4, #9
 8007eda:	dde9      	ble.n	8007eb0 <_I2cFailRecover+0x3c>
		}
//        if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
//            static int RetryRecover;
//            RetryRecover++;
//        }
	} while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++ < 7);
 8007edc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ee0:	4825      	ldr	r0, [pc, #148]	; (8007f78 <_I2cFailRecover+0x104>)
 8007ee2:	f001 fe03 	bl	8009aec <HAL_GPIO_ReadPin>
 8007ee6:	b928      	cbnz	r0, 8007ef4 <_I2cFailRecover+0x80>
 8007ee8:	1c73      	adds	r3, r6, #1
 8007eea:	2e06      	cmp	r6, #6
 8007eec:	dc02      	bgt.n	8007ef4 <_I2cFailRecover+0x80>
 8007eee:	461e      	mov	r6, r3
		for (i = 0; i < 10; i++) {
 8007ef0:	2400      	movs	r4, #0
 8007ef2:	e7f1      	b.n	8007ed8 <_I2cFailRecover+0x64>

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0) {
 8007ef4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ef8:	481f      	ldr	r0, [pc, #124]	; (8007f78 <_I2cFailRecover+0x104>)
 8007efa:	f001 fdf7 	bl	8009aec <HAL_GPIO_ReadPin>
 8007efe:	b108      	cbz	r0, 8007f04 <_I2cFailRecover+0x90>
			HAL_Delay(33);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
			HAL_Delay(33 * 20);
		} while (1);
	}
}
 8007f00:	b008      	add	sp, #32
 8007f02:	bd70      	pop	{r4, r5, r6, pc}
		__GPIOA_CLK_ENABLE();
 8007f04:	2100      	movs	r1, #0
 8007f06:	9102      	str	r1, [sp, #8]
 8007f08:	4b1a      	ldr	r3, [pc, #104]	; (8007f74 <_I2cFailRecover+0x100>)
 8007f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f0c:	f042 0201 	orr.w	r2, r2, #1
 8007f10:	631a      	str	r2, [r3, #48]	; 0x30
 8007f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f14:	f003 0301 	and.w	r3, r3, #1
 8007f18:	9302      	str	r3, [sp, #8]
 8007f1a:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007f1c:	2320      	movs	r3, #32
 8007f1e:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f20:	2301      	movs	r3, #1
 8007f22:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f24:	9105      	str	r1, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f26:	a903      	add	r1, sp, #12
 8007f28:	4814      	ldr	r0, [pc, #80]	; (8007f7c <_I2cFailRecover+0x108>)
 8007f2a:	f001 fbeb 	bl	8009704 <HAL_GPIO_Init>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8007f2e:	4c13      	ldr	r4, [pc, #76]	; (8007f7c <_I2cFailRecover+0x108>)
 8007f30:	2201      	movs	r2, #1
 8007f32:	2120      	movs	r1, #32
 8007f34:	4620      	mov	r0, r4
 8007f36:	f001 fded 	bl	8009b14 <HAL_GPIO_WritePin>
			HAL_Delay(33);
 8007f3a:	2021      	movs	r0, #33	; 0x21
 8007f3c:	f000 fc5a 	bl	80087f4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8007f40:	2200      	movs	r2, #0
 8007f42:	2120      	movs	r1, #32
 8007f44:	4620      	mov	r0, r4
 8007f46:	f001 fde5 	bl	8009b14 <HAL_GPIO_WritePin>
			HAL_Delay(33);
 8007f4a:	2021      	movs	r0, #33	; 0x21
 8007f4c:	f000 fc52 	bl	80087f4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8007f50:	2201      	movs	r2, #1
 8007f52:	2120      	movs	r1, #32
 8007f54:	4620      	mov	r0, r4
 8007f56:	f001 fddd 	bl	8009b14 <HAL_GPIO_WritePin>
			HAL_Delay(33);
 8007f5a:	2021      	movs	r0, #33	; 0x21
 8007f5c:	f000 fc4a 	bl	80087f4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8007f60:	2200      	movs	r2, #0
 8007f62:	2120      	movs	r1, #32
 8007f64:	4620      	mov	r0, r4
 8007f66:	f001 fdd5 	bl	8009b14 <HAL_GPIO_WritePin>
			HAL_Delay(33 * 20);
 8007f6a:	f44f 7025 	mov.w	r0, #660	; 0x294
 8007f6e:	f000 fc41 	bl	80087f4 <HAL_Delay>
 8007f72:	e7dc      	b.n	8007f2e <_I2cFailRecover+0xba>
 8007f74:	40023800 	.word	0x40023800
 8007f78:	40020400 	.word	0x40020400
 8007f7c:	40020000 	.word	0x40020000

08007f80 <_ExpanderRd>:
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data)
{
 8007f80:	b570      	push	{r4, r5, r6, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	4616      	mov	r6, r2
 8007f86:	461d      	mov	r5, r3
	int status;
	uint8_t RegAddr;
	RegAddr = index;
 8007f88:	aa04      	add	r2, sp, #16
 8007f8a:	f802 1d01 	strb.w	r1, [r2, #-1]!
	XNUCLEO53L1A1_GetI2cBus();
	do {
		status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8007f8e:	b284      	uxth	r4, r0
 8007f90:	2364      	movs	r3, #100	; 0x64
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	2301      	movs	r3, #1
 8007f96:	4621      	mov	r1, r4
 8007f98:	4808      	ldr	r0, [pc, #32]	; (8007fbc <_ExpanderRd+0x3c>)
 8007f9a:	f002 fb67 	bl	800a66c <HAL_I2C_Master_Transmit>
		if (status)
 8007f9e:	b108      	cbz	r0, 8007fa4 <_ExpanderRd+0x24>
			break;
		status = HAL_I2C_Master_Receive(&XNUCLEO53L1A1_hi2c, I2cExpAddr, data, n_data, n_data * 100);
	} while (0);
	XNUCLEO53L1A1_PutI2cBus();
	return status;
}
 8007fa0:	b004      	add	sp, #16
 8007fa2:	bd70      	pop	{r4, r5, r6, pc}
		status = HAL_I2C_Master_Receive(&XNUCLEO53L1A1_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8007fa4:	2364      	movs	r3, #100	; 0x64
 8007fa6:	fb03 f305 	mul.w	r3, r3, r5
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	b2ab      	uxth	r3, r5
 8007fae:	4632      	mov	r2, r6
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	4802      	ldr	r0, [pc, #8]	; (8007fbc <_ExpanderRd+0x3c>)
 8007fb4:	f002 fc1c 	bl	800a7f0 <HAL_I2C_Master_Receive>
	return status;
 8007fb8:	e7f2      	b.n	8007fa0 <_ExpanderRd+0x20>
 8007fba:	bf00      	nop
 8007fbc:	20002930 	.word	0x20002930

08007fc0 <_ExpanderWR>:
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data)
{
 8007fc0:	b570      	push	{r4, r5, r6, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	4606      	mov	r6, r0
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	461c      	mov	r4, r3
	int status;
	uint8_t RegAddr[0x10];
	RegAddr[0] = index;
 8007fca:	ad06      	add	r5, sp, #24
 8007fcc:	f805 1d10 	strb.w	r1, [r5, #-16]!
	memcpy(RegAddr + 1, data, n_data);
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	4601      	mov	r1, r0
 8007fd4:	f10d 0009 	add.w	r0, sp, #9
 8007fd8:	f016 fec2 	bl	801ed60 <memcpy>
	XNUCLEO53L1A1_GetI2cBus();
	status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8007fdc:	1c63      	adds	r3, r4, #1
 8007fde:	2264      	movs	r2, #100	; 0x64
 8007fe0:	9200      	str	r2, [sp, #0]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	462a      	mov	r2, r5
 8007fe6:	b2b1      	uxth	r1, r6
 8007fe8:	4802      	ldr	r0, [pc, #8]	; (8007ff4 <_ExpanderWR+0x34>)
 8007fea:	f002 fb3f 	bl	800a66c <HAL_I2C_Master_Transmit>
	XNUCLEO53L1A1_PutI2cBus();
	return status;
}
 8007fee:	b006      	add	sp, #24
 8007ff0:	bd70      	pop	{r4, r5, r6, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20002930 	.word	0x20002930

08007ff8 <_ExpandersSetAllIO>:
{
 8007ff8:	b508      	push	{r3, lr}
	status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	4a08      	ldr	r2, [pc, #32]	; (8008020 <_ExpandersSetAllIO+0x28>)
 8007ffe:	2112      	movs	r1, #18
 8008000:	2086      	movs	r0, #134	; 0x86
 8008002:	f7ff ffdd 	bl	8007fc0 <_ExpanderWR>
	if (status) {
 8008006:	4603      	mov	r3, r0
 8008008:	b108      	cbz	r0, 800800e <_ExpandersSetAllIO+0x16>
}
 800800a:	4618      	mov	r0, r3
 800800c:	bd08      	pop	{r3, pc}
	status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 800800e:	2302      	movs	r3, #2
 8008010:	4a04      	ldr	r2, [pc, #16]	; (8008024 <_ExpandersSetAllIO+0x2c>)
 8008012:	2112      	movs	r1, #18
 8008014:	2084      	movs	r0, #132	; 0x84
 8008016:	f7ff ffd3 	bl	8007fc0 <_ExpanderWR>
 800801a:	4603      	mov	r3, r0
	return status;
 800801c:	e7f5      	b.n	800800a <_ExpandersSetAllIO+0x12>
 800801e:	bf00      	nop
 8008020:	200025d0 	.word	0x200025d0
 8008024:	200025d2 	.word	0x200025d2

08008028 <XNUCLEO53L1A1_I2C1Configure>:
{
 8008028:	b510      	push	{r4, lr}
 800802a:	b088      	sub	sp, #32
	_I2cFailRecover();
 800802c:	f7ff ff22 	bl	8007e74 <_I2cFailRecover>
	__GPIOB_CLK_ENABLE();
 8008030:	2400      	movs	r4, #0
 8008032:	9401      	str	r4, [sp, #4]
 8008034:	4b19      	ldr	r3, [pc, #100]	; (800809c <XNUCLEO53L1A1_I2C1Configure+0x74>)
 8008036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008038:	f042 0202 	orr.w	r2, r2, #2
 800803c:	631a      	str	r2, [r3, #48]	; 0x30
 800803e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008040:	f002 0202 	and.w	r2, r2, #2
 8008044:	9201      	str	r2, [sp, #4]
 8008046:	9a01      	ldr	r2, [sp, #4]
	__I2C1_CLK_ENABLE();
 8008048:	9402      	str	r4, [sp, #8]
 800804a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800804c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8008050:	641a      	str	r2, [r3, #64]	; 0x40
 8008052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008058:	9302      	str	r3, [sp, #8]
 800805a:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800805c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008060:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008062:	2312      	movs	r3, #18
 8008064:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008066:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008068:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800806a:	2304      	movs	r3, #4
 800806c:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800806e:	a903      	add	r1, sp, #12
 8008070:	480b      	ldr	r0, [pc, #44]	; (80080a0 <XNUCLEO53L1A1_I2C1Configure+0x78>)
 8008072:	f001 fb47 	bl	8009704 <HAL_GPIO_Init>
	XNUCLEO53L1A1_hi2c.Instance = I2C1;
 8008076:	480b      	ldr	r0, [pc, #44]	; (80080a4 <XNUCLEO53L1A1_I2C1Configure+0x7c>)
 8008078:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <XNUCLEO53L1A1_I2C1Configure+0x80>)
 800807a:	6003      	str	r3, [r0, #0]
	XNUCLEO53L1A1_hi2c.Init.ClockSpeed = 400000;
 800807c:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <XNUCLEO53L1A1_I2C1Configure+0x84>)
 800807e:	6043      	str	r3, [r0, #4]
	XNUCLEO53L1A1_hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008080:	6084      	str	r4, [r0, #8]
	XNUCLEO53L1A1_hi2c.Init.OwnAddress1 = 0;
 8008082:	60c4      	str	r4, [r0, #12]
	XNUCLEO53L1A1_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008084:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008088:	6103      	str	r3, [r0, #16]
	XNUCLEO53L1A1_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800808a:	6144      	str	r4, [r0, #20]
	XNUCLEO53L1A1_hi2c.Init.OwnAddress2 = 0;
 800808c:	6184      	str	r4, [r0, #24]
	XNUCLEO53L1A1_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 800808e:	61c4      	str	r4, [r0, #28]
	XNUCLEO53L1A1_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8008090:	6204      	str	r4, [r0, #32]
	status = HAL_I2C_Init(&XNUCLEO53L1A1_hi2c);
 8008092:	f002 f9c3 	bl	800a41c <HAL_I2C_Init>
}
 8008096:	b008      	add	sp, #32
 8008098:	bd10      	pop	{r4, pc}
 800809a:	bf00      	nop
 800809c:	40023800 	.word	0x40023800
 80080a0:	40020400 	.word	0x40020400
 80080a4:	20002930 	.word	0x20002930
 80080a8:	40005400 	.word	0x40005400
 80080ac:	00061a80 	.word	0x00061a80

080080b0 <XNUCLEO53L1A1_Init>:
{
 80080b0:	b500      	push	{lr}
 80080b2:	b083      	sub	sp, #12
	XNUCLEO53L1A1_I2C1Configure();
 80080b4:	f7ff ffb8 	bl	8008028 <XNUCLEO53L1A1_I2C1Configure>
	status = _ExpanderRd(I2cExpAddr0, 0, ExpanderData, 2);
 80080b8:	2302      	movs	r3, #2
 80080ba:	aa01      	add	r2, sp, #4
 80080bc:	2100      	movs	r1, #0
 80080be:	2086      	movs	r0, #134	; 0x86
 80080c0:	f7ff ff5e 	bl	8007f80 <_ExpanderRd>
	if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 80080c4:	4603      	mov	r3, r0
 80080c6:	b930      	cbnz	r0, 80080d6 <XNUCLEO53L1A1_Init+0x26>
 80080c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80080cc:	b91a      	cbnz	r2, 80080d6 <XNUCLEO53L1A1_Init+0x26>
 80080ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80080d2:	2a16      	cmp	r2, #22
 80080d4:	d003      	beq.n	80080de <XNUCLEO53L1A1_Init+0x2e>
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	b003      	add	sp, #12
 80080da:	f85d fb04 	ldr.w	pc, [sp], #4
	status = _ExpanderRd(I2cExpAddr1, 0, ExpanderData, 2);
 80080de:	2302      	movs	r3, #2
 80080e0:	aa01      	add	r2, sp, #4
 80080e2:	2100      	movs	r1, #0
 80080e4:	2084      	movs	r0, #132	; 0x84
 80080e6:	f7ff ff4b 	bl	8007f80 <_ExpanderRd>
	if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 80080ea:	4603      	mov	r3, r0
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d1f2      	bne.n	80080d6 <XNUCLEO53L1A1_Init+0x26>
 80080f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80080f4:	2a00      	cmp	r2, #0
 80080f6:	d1ee      	bne.n	80080d6 <XNUCLEO53L1A1_Init+0x26>
 80080f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80080fc:	2a16      	cmp	r2, #22
 80080fe:	d1ea      	bne.n	80080d6 <XNUCLEO53L1A1_Init+0x26>
	CurIOVal.u32 = 0x0;
 8008100:	2200      	movs	r2, #0
 8008102:	4b13      	ldr	r3, [pc, #76]	; (8008150 <XNUCLEO53L1A1_Init+0xa0>)
 8008104:	601a      	str	r2, [r3, #0]
	ExpanderData[0] = 0xFF;
 8008106:	23ff      	movs	r3, #255	; 0xff
 8008108:	f88d 3004 	strb.w	r3, [sp, #4]
	ExpanderData[1] = 0xFF;
 800810c:	f88d 3005 	strb.w	r3, [sp, #5]
	status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 8008110:	2302      	movs	r3, #2
 8008112:	aa01      	add	r2, sp, #4
 8008114:	2114      	movs	r1, #20
 8008116:	2086      	movs	r0, #134	; 0x86
 8008118:	f7ff ff52 	bl	8007fc0 <_ExpanderWR>
	if (status) {
 800811c:	4603      	mov	r3, r0
 800811e:	2800      	cmp	r0, #0
 8008120:	d1d9      	bne.n	80080d6 <XNUCLEO53L1A1_Init+0x26>
	ExpanderData[0] = 0xFF;
 8008122:	23ff      	movs	r3, #255	; 0xff
 8008124:	f88d 3004 	strb.w	r3, [sp, #4]
	ExpanderData[1] = 0xBF; // all but bit 14-15 that is pb1 and xhurt
 8008128:	23bf      	movs	r3, #191	; 0xbf
 800812a:	f88d 3005 	strb.w	r3, [sp, #5]
	status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 800812e:	2302      	movs	r3, #2
 8008130:	aa01      	add	r2, sp, #4
 8008132:	2114      	movs	r1, #20
 8008134:	2084      	movs	r0, #132	; 0x84
 8008136:	f7ff ff43 	bl	8007fc0 <_ExpanderWR>
	if (status) {
 800813a:	4603      	mov	r3, r0
 800813c:	2800      	cmp	r0, #0
 800813e:	d1ca      	bne.n	80080d6 <XNUCLEO53L1A1_Init+0x26>
	CurIOVal.u32 = 0x7F + (0x7F << 7) + (0x7F << 16) + (0x7F << (16 + 7));
 8008140:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8008144:	4b02      	ldr	r3, [pc, #8]	; (8008150 <XNUCLEO53L1A1_Init+0xa0>)
 8008146:	601a      	str	r2, [r3, #0]
	status = _ExpandersSetAllIO();
 8008148:	f7ff ff56 	bl	8007ff8 <_ExpandersSetAllIO>
 800814c:	4603      	mov	r3, r0
	return status;
 800814e:	e7c2      	b.n	80080d6 <XNUCLEO53L1A1_Init+0x26>
 8008150:	200025d0 	.word	0x200025d0

08008154 <XNUCLEO53L1A1_ResetId>:
{
 8008154:	b508      	push	{r3, lr}
	switch (DevNo) {
 8008156:	2802      	cmp	r0, #2
 8008158:	d02c      	beq.n	80081b4 <XNUCLEO53L1A1_ResetId+0x60>
 800815a:	dd08      	ble.n	800816e <XNUCLEO53L1A1_ResetId+0x1a>
 800815c:	286c      	cmp	r0, #108	; 0x6c
 800815e:	d019      	beq.n	8008194 <XNUCLEO53L1A1_ResetId+0x40>
 8008160:	2872      	cmp	r0, #114	; 0x72
 8008162:	d027      	beq.n	80081b4 <XNUCLEO53L1A1_ResetId+0x60>
 8008164:	2863      	cmp	r0, #99	; 0x63
 8008166:	d005      	beq.n	8008174 <XNUCLEO53L1A1_ResetId+0x20>
		status = -1;
 8008168:	f04f 30ff 	mov.w	r0, #4294967295
}
 800816c:	bd08      	pop	{r3, pc}
	switch (DevNo) {
 800816e:	b188      	cbz	r0, 8008194 <XNUCLEO53L1A1_ResetId+0x40>
 8008170:	2801      	cmp	r0, #1
 8008172:	d1f9      	bne.n	8008168 <XNUCLEO53L1A1_ResetId+0x14>
		CurIOVal.bytes[3] &= ~0x80; /* bit 15 expender 1  => byte #3 */
 8008174:	4a17      	ldr	r2, [pc, #92]	; (80081d4 <XNUCLEO53L1A1_ResetId+0x80>)
 8008176:	78d3      	ldrb	r3, [r2, #3]
 8008178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800817c:	70d3      	strb	r3, [r2, #3]
		if (state)
 800817e:	b111      	cbz	r1, 8008186 <XNUCLEO53L1A1_ResetId+0x32>
			CurIOVal.bytes[3] |= 0x80; /* bit 15 expender 1  => byte #3 */
 8008180:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008184:	70d3      	strb	r3, [r2, #3]
		status = _ExpanderWR(I2cExpAddr1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8008186:	2301      	movs	r3, #1
 8008188:	4a13      	ldr	r2, [pc, #76]	; (80081d8 <XNUCLEO53L1A1_ResetId+0x84>)
 800818a:	2113      	movs	r1, #19
 800818c:	2084      	movs	r0, #132	; 0x84
 800818e:	f7ff ff17 	bl	8007fc0 <_ExpanderWR>
		break;
 8008192:	bd08      	pop	{r3, pc}
		CurIOVal.bytes[1] &= ~0x40; /* bit 14 expender 0 => byte #1*/
 8008194:	4a0f      	ldr	r2, [pc, #60]	; (80081d4 <XNUCLEO53L1A1_ResetId+0x80>)
 8008196:	7853      	ldrb	r3, [r2, #1]
 8008198:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800819c:	7053      	strb	r3, [r2, #1]
		if (state)
 800819e:	b111      	cbz	r1, 80081a6 <XNUCLEO53L1A1_ResetId+0x52>
			CurIOVal.bytes[1] |= 0x40; /* bit 14 expender 0 => byte #1*/
 80081a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081a4:	7053      	strb	r3, [r2, #1]
		status = _ExpanderWR(I2cExpAddr0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80081a6:	2301      	movs	r3, #1
 80081a8:	4a0c      	ldr	r2, [pc, #48]	; (80081dc <XNUCLEO53L1A1_ResetId+0x88>)
 80081aa:	2113      	movs	r1, #19
 80081ac:	2086      	movs	r0, #134	; 0x86
 80081ae:	f7ff ff07 	bl	8007fc0 <_ExpanderWR>
		break;
 80081b2:	bd08      	pop	{r3, pc}
		CurIOVal.bytes[1] &= ~0x80; /* bit 15 expender 0  => byte #1 */
 80081b4:	4a07      	ldr	r2, [pc, #28]	; (80081d4 <XNUCLEO53L1A1_ResetId+0x80>)
 80081b6:	7853      	ldrb	r3, [r2, #1]
 80081b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081bc:	7053      	strb	r3, [r2, #1]
		if (state)
 80081be:	b111      	cbz	r1, 80081c6 <XNUCLEO53L1A1_ResetId+0x72>
			CurIOVal.bytes[1] |= 0x80; /* bit 15 expender 0 => byte #1*/
 80081c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081c4:	7053      	strb	r3, [r2, #1]
		status = _ExpanderWR(I2cExpAddr0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80081c6:	2301      	movs	r3, #1
 80081c8:	4a04      	ldr	r2, [pc, #16]	; (80081dc <XNUCLEO53L1A1_ResetId+0x88>)
 80081ca:	2113      	movs	r1, #19
 80081cc:	2086      	movs	r0, #134	; 0x86
 80081ce:	f7ff fef7 	bl	8007fc0 <_ExpanderWR>
		break;
 80081d2:	bd08      	pop	{r3, pc}
 80081d4:	200025d0 	.word	0x200025d0
 80081d8:	200025d3 	.word	0x200025d3
 80081dc:	200025d1 	.word	0x200025d1

080081e0 <L6206_Board_DisableBridge>:
* @brief Disable the power bridges (leave the output bridges HiZ)
* @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
* @retval None
**********************************************************/
void L6206_Board_DisableBridge(uint8_t bridgeId)
{
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct;
	uint32_t gpioPin;
	GPIO_TypeDef* gpioPort;

	if (bridgeId == 0) {
 80081e4:	b1b0      	cbz	r0, 8008214 <L6206_Board_DisableBridge+0x34>
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
	}else {
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
 80081e6:	4d0d      	ldr	r5, [pc, #52]	; (800821c <L6206_Board_DisableBridge+0x3c>)
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 80081e8:	2402      	movs	r4, #2
	}

	/* Configure the GPIO connected to EN pin as an output */
	GPIO_InitStruct.Pin = gpioPin;
 80081ea:	9401      	str	r4, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081ec:	2301      	movs	r3, #1
 80081ee:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081f0:	2600      	movs	r6, #0
 80081f2:	9603      	str	r6, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80081f4:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 80081f6:	a901      	add	r1, sp, #4
 80081f8:	4628      	mov	r0, r5
 80081fa:	f001 fa83 	bl	8009704 <HAL_GPIO_Init>
   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
   Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
	__ASM volatile ("cpsid i" : : : "memory");
 80081fe:	b672      	cpsid	i

	__disable_irq();
	HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_RESET);
 8008200:	4632      	mov	r2, r6
 8008202:	4621      	mov	r1, r4
 8008204:	4628      	mov	r0, r5
 8008206:	f001 fc85 	bl	8009b14 <HAL_GPIO_WritePin>
	__HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 800820a:	4b05      	ldr	r3, [pc, #20]	; (8008220 <L6206_Board_DisableBridge+0x40>)
 800820c:	615c      	str	r4, [r3, #20]
	__ASM volatile ("cpsie i" : : : "memory");
 800820e:	b662      	cpsie	i
	__enable_irq();
}
 8008210:	b006      	add	sp, #24
 8008212:	bd70      	pop	{r4, r5, r6, pc}
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
 8008214:	4d03      	ldr	r5, [pc, #12]	; (8008224 <L6206_Board_DisableBridge+0x44>)
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8008216:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800821a:	e7e6      	b.n	80081ea <L6206_Board_DisableBridge+0xa>
 800821c:	40020800 	.word	0x40020800
 8008220:	40013c00 	.word	0x40013c00
 8008224:	40020000 	.word	0x40020000

08008228 <L6206_Board_EnableBridge>:
* @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
* @param[in]  addDelay if different from 0, a delay is added after bridge activation
* @retval None
**********************************************************/
void L6206_Board_EnableBridge(uint8_t bridgeId, uint8_t addDelay)
{
 8008228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800822a:	b087      	sub	sp, #28
 800822c:	460f      	mov	r7, r1
	GPIO_InitTypeDef GPIO_InitStruct;
	uint32_t gpioPin;
	GPIO_TypeDef* gpioPort;
	IRQn_Type flagIrqn;

	if (bridgeId == 0) {
 800822e:	b9e8      	cbnz	r0, 800826c <L6206_Board_EnableBridge+0x44>
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
		flagIrqn = EXTI_FLAG_A_IRQn;
 8008230:	2528      	movs	r5, #40	; 0x28
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
 8008232:	4e12      	ldr	r6, [pc, #72]	; (800827c <L6206_Board_EnableBridge+0x54>)
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8008234:	f44f 6480 	mov.w	r4, #1024	; 0x400
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
		flagIrqn = EXTI_FLAG_B_IRQn;
	}

	HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_SET);
 8008238:	2201      	movs	r2, #1
 800823a:	4621      	mov	r1, r4
 800823c:	4630      	mov	r0, r6
 800823e:	f001 fc69 	bl	8009b14 <HAL_GPIO_WritePin>
	if (addDelay != 0) {
 8008242:	b9bf      	cbnz	r7, 8008274 <L6206_Board_EnableBridge+0x4c>
		HAL_Delay(BSP_MOTOR_CONTROL_BOARD_BRIDGE_TURN_ON_DELAY);
	}
	/* Configure the GPIO connected to EN pin to take interrupt */
	GPIO_InitStruct.Pin = gpioPin;
 8008244:	9401      	str	r4, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008246:	4b0e      	ldr	r3, [pc, #56]	; (8008280 <L6206_Board_EnableBridge+0x58>)
 8008248:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800824a:	2301      	movs	r3, #1
 800824c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800824e:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8008250:	a901      	add	r1, sp, #4
 8008252:	4630      	mov	r0, r6
 8008254:	f001 fa56 	bl	8009704 <HAL_GPIO_Init>

	__HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8008258:	4b0a      	ldr	r3, [pc, #40]	; (8008284 <L6206_Board_EnableBridge+0x5c>)
 800825a:	615c      	str	r4, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(flagIrqn);
 800825c:	4628      	mov	r0, r5
 800825e:	f000 febf 	bl	8008fe0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(flagIrqn);
 8008262:	4628      	mov	r0, r5
 8008264:	f000 fe78 	bl	8008f58 <HAL_NVIC_EnableIRQ>
}
 8008268:	b007      	add	sp, #28
 800826a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flagIrqn = EXTI_FLAG_B_IRQn;
 800826c:	2507      	movs	r5, #7
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
 800826e:	4e06      	ldr	r6, [pc, #24]	; (8008288 <L6206_Board_EnableBridge+0x60>)
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8008270:	2402      	movs	r4, #2
 8008272:	e7e1      	b.n	8008238 <L6206_Board_EnableBridge+0x10>
		HAL_Delay(BSP_MOTOR_CONTROL_BOARD_BRIDGE_TURN_ON_DELAY);
 8008274:	2014      	movs	r0, #20
 8008276:	f000 fabd 	bl	80087f4 <HAL_Delay>
 800827a:	e7e3      	b.n	8008244 <L6206_Board_EnableBridge+0x1c>
 800827c:	40020000 	.word	0x40020000
 8008280:	10210000 	.word	0x10210000
 8008284:	40013c00 	.word	0x40013c00
 8008288:	40020800 	.word	0x40020800

0800828c <L6206_Board_GetFlagPinState>:
* @brief  Returns the FLAG pin state.
* @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
* @retval The FLAG pin value.
**********************************************************/
uint32_t L6206_Board_GetFlagPinState(uint8_t bridgeId)
{
 800828c:	b508      	push	{r3, lr}
	uint32_t gpioPin;
	GPIO_TypeDef* gpioPort;

	if (bridgeId == 0) {
 800828e:	b120      	cbz	r0, 800829a <L6206_Board_GetFlagPinState+0xe>
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
	}else {
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
 8008290:	4804      	ldr	r0, [pc, #16]	; (80082a4 <L6206_Board_GetFlagPinState+0x18>)
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8008292:	2102      	movs	r1, #2
	}
	return HAL_GPIO_ReadPin(gpioPort, gpioPin);
 8008294:	f001 fc2a 	bl	8009aec <HAL_GPIO_ReadPin>
}
 8008298:	bd08      	pop	{r3, pc}
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
 800829a:	4803      	ldr	r0, [pc, #12]	; (80082a8 <L6206_Board_GetFlagPinState+0x1c>)
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 800829c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80082a0:	e7f8      	b.n	8008294 <L6206_Board_GetFlagPinState+0x8>
 80082a2:	bf00      	nop
 80082a4:	40020800 	.word	0x40020800
 80082a8:	40020000 	.word	0x40020000

080082ac <L6206_Board_GpioInit>:
/******************************************************//**
* @brief  Initiliases the GPIOs used by the L6206s
* @retval None
**********************************************************/
void L6206_Board_GpioInit(void)
{
 80082ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ae:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE();
 80082b0:	2400      	movs	r4, #0
 80082b2:	9400      	str	r4, [sp, #0]
 80082b4:	4b27      	ldr	r3, [pc, #156]	; (8008354 <L6206_Board_GpioInit+0xa8>)
 80082b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082b8:	f042 0204 	orr.w	r2, r2, #4
 80082bc:	631a      	str	r2, [r3, #48]	; 0x30
 80082be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082c0:	f002 0204 	and.w	r2, r2, #4
 80082c4:	9200      	str	r2, [sp, #0]
 80082c6:	9a00      	ldr	r2, [sp, #0]
	__GPIOA_CLK_ENABLE();
 80082c8:	9401      	str	r4, [sp, #4]
 80082ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082cc:	f042 0201 	orr.w	r2, r2, #1
 80082d0:	631a      	str	r2, [r3, #48]	; 0x30
 80082d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082d4:	f002 0201 	and.w	r2, r2, #1
 80082d8:	9201      	str	r2, [sp, #4]
 80082da:	9a01      	ldr	r2, [sp, #4]
	__GPIOB_CLK_ENABLE();
 80082dc:	9402      	str	r4, [sp, #8]
 80082de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082e0:	f042 0202 	orr.w	r2, r2, #2
 80082e4:	631a      	str	r2, [r3, #48]	; 0x30
 80082e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e8:	f003 0302 	and.w	r3, r3, #2
 80082ec:	9302      	str	r3, [sp, #8]
 80082ee:	9b02      	ldr	r3, [sp, #8]

	/* Configure L6206 Enable pin of Bridge A ------------------------------*/
	/* This pin is reconfigured later for OCD and OVT as GPIO_MODE_IT_FALLING with GPIO_PULLUP */
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 80082f0:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80082f4:	9703      	str	r7, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082f6:	2501      	movs	r5, #1
 80082f8:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082fa:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80082fc:	9506      	str	r5, [sp, #24]
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 80082fe:	4e16      	ldr	r6, [pc, #88]	; (8008358 <L6206_Board_GpioInit+0xac>)
 8008300:	a903      	add	r1, sp, #12
 8008302:	4630      	mov	r0, r6
 8008304:	f001 f9fe 	bl	8009704 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN, GPIO_PIN_RESET);
 8008308:	4622      	mov	r2, r4
 800830a:	4639      	mov	r1, r7
 800830c:	4630      	mov	r0, r6
 800830e:	f001 fc01 	bl	8009b14 <HAL_GPIO_WritePin>

	/* Set Priority of External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_SetPriority(EXTI_FLAG_A_IRQn, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PRIORITY, 0);
 8008312:	4622      	mov	r2, r4
 8008314:	2104      	movs	r1, #4
 8008316:	2028      	movs	r0, #40	; 0x28
 8008318:	f000 fdda 	bl	8008ed0 <HAL_NVIC_SetPriority>

	/* Enable the External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_EnableIRQ(EXTI_FLAG_A_IRQn);
 800831c:	2028      	movs	r0, #40	; 0x28
 800831e:	f000 fe1b 	bl	8008f58 <HAL_NVIC_EnableIRQ>

/* Configure L6206 Enable pin of Bridge B ------------------------------*/
	/* This pin is reconfigured later for OCD and OVT as GPIO_MODE_IT_FALLING with GPIO_PULLUP */
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8008322:	2602      	movs	r6, #2
 8008324:	9603      	str	r6, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008326:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008328:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800832a:	9506      	str	r5, [sp, #24]
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 800832c:	4d0b      	ldr	r5, [pc, #44]	; (800835c <L6206_Board_GpioInit+0xb0>)
 800832e:	a903      	add	r1, sp, #12
 8008330:	4628      	mov	r0, r5
 8008332:	f001 f9e7 	bl	8009704 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN, GPIO_PIN_RESET);
 8008336:	4622      	mov	r2, r4
 8008338:	4631      	mov	r1, r6
 800833a:	4628      	mov	r0, r5
 800833c:	f001 fbea 	bl	8009b14 <HAL_GPIO_WritePin>

	/* Set Priority of External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_SetPriority(EXTI_FLAG_B_IRQn, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PRIORITY, 0);
 8008340:	4622      	mov	r2, r4
 8008342:	2104      	movs	r1, #4
 8008344:	2007      	movs	r0, #7
 8008346:	f000 fdc3 	bl	8008ed0 <HAL_NVIC_SetPriority>

	/* Enable the External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_EnableIRQ(EXTI_FLAG_B_IRQn);
 800834a:	2007      	movs	r0, #7
 800834c:	f000 fe04 	bl	8008f58 <HAL_NVIC_EnableIRQ>
}
 8008350:	b009      	add	sp, #36	; 0x24
 8008352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008354:	40023800 	.word	0x40023800
 8008358:	40020000 	.word	0x40020000
 800835c:	40020800 	.word	0x40020800

08008360 <L6206_Board_PwmDeInit>:
* @param[in] bridgeInput 0 for input 1A, 1 for input 2A,
* 2 for input 1B, 3 for input 2B
* @retval None
**********************************************************/
void L6206_Board_PwmDeInit(uint8_t bridgeInput)
{
 8008360:	b508      	push	{r3, lr}
	TIM_HandleTypeDef *pHTim;

	switch (bridgeInput) {
 8008362:	2802      	cmp	r0, #2
 8008364:	d011      	beq.n	800838a <L6206_Board_PwmDeInit+0x2a>
 8008366:	2803      	cmp	r0, #3
 8008368:	d016      	beq.n	8008398 <L6206_Board_PwmDeInit+0x38>
 800836a:	2801      	cmp	r0, #1
 800836c:	d007      	beq.n	800837e <L6206_Board_PwmDeInit+0x1e>
	case 0:
	default:
		pHTim = &hTimPwm1A;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 800836e:	480e      	ldr	r0, [pc, #56]	; (80083a8 <L6206_Board_PwmDeInit+0x48>)
 8008370:	4b0e      	ldr	r3, [pc, #56]	; (80083ac <L6206_Board_PwmDeInit+0x4c>)
 8008372:	6003      	str	r3, [r0, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1A;
 8008374:	2301      	movs	r3, #1
 8008376:	7603      	strb	r3, [r0, #24]
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;

		break;
	}
	HAL_TIM_PWM_DeInit(pHTim);
 8008378:	f004 fc74 	bl	800cc64 <HAL_TIM_PWM_DeInit>
 800837c:	bd08      	pop	{r3, pc}
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 800837e:	480c      	ldr	r0, [pc, #48]	; (80083b0 <L6206_Board_PwmDeInit+0x50>)
 8008380:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <L6206_Board_PwmDeInit+0x4c>)
 8008382:	6003      	str	r3, [r0, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2A;
 8008384:	2302      	movs	r3, #2
 8008386:	7603      	strb	r3, [r0, #24]
		break;
 8008388:	e7f6      	b.n	8008378 <L6206_Board_PwmDeInit+0x18>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 800838a:	480a      	ldr	r0, [pc, #40]	; (80083b4 <L6206_Board_PwmDeInit+0x54>)
 800838c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008390:	6003      	str	r3, [r0, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
 8008392:	2301      	movs	r3, #1
 8008394:	7603      	strb	r3, [r0, #24]
		break;
 8008396:	e7ef      	b.n	8008378 <L6206_Board_PwmDeInit+0x18>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8008398:	4807      	ldr	r0, [pc, #28]	; (80083b8 <L6206_Board_PwmDeInit+0x58>)
 800839a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800839e:	6003      	str	r3, [r0, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 80083a0:	2302      	movs	r3, #2
 80083a2:	7603      	strb	r3, [r0, #24]
		break;
 80083a4:	e7e8      	b.n	8008378 <L6206_Board_PwmDeInit+0x18>
 80083a6:	bf00      	nop
 80083a8:	20002a38 	.word	0x20002a38
 80083ac:	40000400 	.word	0x40000400
 80083b0:	20002984 	.word	0x20002984
 80083b4:	200029c0 	.word	0x200029c0
 80083b8:	200029fc 	.word	0x200029fc

080083bc <L6206_Board_PwmInit>:
* @param[in] bridgeInput 0 for input 1A, 1 for input 2A,
* 2 for input 1B, 3 for input 2B
* @retval None
**********************************************************/
void L6206_Board_PwmInit(uint8_t bridgeInput)
{
 80083bc:	b570      	push	{r4, r5, r6, lr}
 80083be:	b08a      	sub	sp, #40	; 0x28
	TIM_OC_InitTypeDef sConfigOC;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_HandleTypeDef *pHTim;
	uint32_t channel;

	switch (bridgeInput) {
 80083c0:	2802      	cmp	r0, #2
 80083c2:	d02b      	beq.n	800841c <L6206_Board_PwmInit+0x60>
 80083c4:	2803      	cmp	r0, #3
 80083c6:	d031      	beq.n	800842c <L6206_Board_PwmInit+0x70>
 80083c8:	2801      	cmp	r0, #1
 80083ca:	d020      	beq.n	800840e <L6206_Board_PwmInit+0x52>
	case 0:
	default:
		pHTim = &hTimPwm1A;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 80083cc:	4c1b      	ldr	r4, [pc, #108]	; (800843c <L6206_Board_PwmInit+0x80>)
 80083ce:	4b1c      	ldr	r3, [pc, #112]	; (8008440 <L6206_Board_PwmInit+0x84>)
 80083d0:	6023      	str	r3, [r4, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1A;
 80083d2:	2301      	movs	r3, #1
 80083d4:	7623      	strb	r3, [r4, #24]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1A;
 80083d6:	2600      	movs	r6, #0
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
		break;
	}
	pHTim->Init.Prescaler = TIMER_PRESCALER - 1;
 80083d8:	233f      	movs	r3, #63	; 0x3f
 80083da:	6063      	str	r3, [r4, #4]
	pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 80083dc:	2500      	movs	r5, #0
 80083de:	60a5      	str	r5, [r4, #8]
	pHTim->Init.Period = 0;
 80083e0:	60e5      	str	r5, [r4, #12]
	pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083e2:	6125      	str	r5, [r4, #16]
	HAL_TIM_PWM_Init(pHTim);
 80083e4:	4620      	mov	r0, r4
 80083e6:	f005 f879 	bl	800d4dc <HAL_TIM_PWM_Init>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80083ea:	2360      	movs	r3, #96	; 0x60
 80083ec:	9303      	str	r3, [sp, #12]
	sConfigOC.Pulse = 0;
 80083ee:	9504      	str	r5, [sp, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80083f0:	9505      	str	r5, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80083f2:	9507      	str	r5, [sp, #28]
	HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 80083f4:	4632      	mov	r2, r6
 80083f6:	a903      	add	r1, sp, #12
 80083f8:	4620      	mov	r0, r4
 80083fa:	f005 f90d 	bl	800d618 <HAL_TIM_PWM_ConfigChannel>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80083fe:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008400:	9502      	str	r5, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8008402:	a901      	add	r1, sp, #4
 8008404:	4620      	mov	r0, r4
 8008406:	f005 fb25 	bl	800da54 <HAL_TIMEx_MasterConfigSynchronization>
}
 800840a:	b00a      	add	sp, #40	; 0x28
 800840c:	bd70      	pop	{r4, r5, r6, pc}
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 800840e:	4c0d      	ldr	r4, [pc, #52]	; (8008444 <L6206_Board_PwmInit+0x88>)
 8008410:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <L6206_Board_PwmInit+0x84>)
 8008412:	6023      	str	r3, [r4, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2A;
 8008414:	2302      	movs	r3, #2
 8008416:	7623      	strb	r3, [r4, #24]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A;
 8008418:	2604      	movs	r6, #4
		break;
 800841a:	e7dd      	b.n	80083d8 <L6206_Board_PwmInit+0x1c>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 800841c:	4c0a      	ldr	r4, [pc, #40]	; (8008448 <L6206_Board_PwmInit+0x8c>)
 800841e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008422:	6023      	str	r3, [r4, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
 8008424:	2301      	movs	r3, #1
 8008426:	7623      	strb	r3, [r4, #24]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
 8008428:	2600      	movs	r6, #0
		break;
 800842a:	e7d5      	b.n	80083d8 <L6206_Board_PwmInit+0x1c>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 800842c:	4c07      	ldr	r4, [pc, #28]	; (800844c <L6206_Board_PwmInit+0x90>)
 800842e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008432:	6023      	str	r3, [r4, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8008434:	2302      	movs	r3, #2
 8008436:	7623      	strb	r3, [r4, #24]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
 8008438:	2604      	movs	r6, #4
		break;
 800843a:	e7cd      	b.n	80083d8 <L6206_Board_PwmInit+0x1c>
 800843c:	20002a38 	.word	0x20002a38
 8008440:	40000400 	.word	0x40000400
 8008444:	20002984 	.word	0x20002984
 8008448:	200029c0 	.word	0x200029c0
 800844c:	200029fc 	.word	0x200029fc

08008450 <L6206_Board_PwmSetFreq>:
* @param[in] duty Duty cycle
* @retval None
* @note The frequency is directly the current speed of the device
**********************************************************/
void L6206_Board_PwmSetFreq(uint8_t bridgeInput, uint32_t newFreq, uint8_t duty)
{
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	4606      	mov	r6, r0
 8008454:	460d      	mov	r5, r1
 8008456:	4614      	mov	r4, r2
	uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8008458:	f003 fcd6 	bl	800be08 <HAL_RCC_GetSysClockFreq>
	TIM_HandleTypeDef *pHTim;
	uint32_t period;
	uint32_t pulse;
	uint32_t channel;

	switch (bridgeInput) {
 800845c:	2e02      	cmp	r6, #2
 800845e:	d027      	beq.n	80084b0 <L6206_Board_PwmSetFreq+0x60>
 8008460:	2e03      	cmp	r6, #3
 8008462:	d02b      	beq.n	80084bc <L6206_Board_PwmSetFreq+0x6c>
 8008464:	2e01      	cmp	r6, #1
 8008466:	d01e      	beq.n	80084a6 <L6206_Board_PwmSetFreq+0x56>
	case 0:
	default:
		pHTim = &hTimPwm1A;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8008468:	4b18      	ldr	r3, [pc, #96]	; (80084cc <L6206_Board_PwmSetFreq+0x7c>)
 800846a:	4a19      	ldr	r2, [pc, #100]	; (80084d0 <L6206_Board_PwmSetFreq+0x80>)
 800846c:	601a      	str	r2, [r3, #0]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1A;
 800846e:	2100      	movs	r1, #0
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
		break;
	}

	period = (uint32_t)((uint32_t)sysFreq / (uint32_t)(TIMER_PRESCALER * newFreq)) - 1;
 8008470:	01ad      	lsls	r5, r5, #6
 8008472:	fbb0 f0f5 	udiv	r0, r0, r5
 8008476:	3801      	subs	r0, #1


	__HAL_TIM_SetAutoreload(pHTim, period);
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	62d0      	str	r0, [r2, #44]	; 0x2c
 800847c:	60d8      	str	r0, [r3, #12]

	if (duty == 0) {
 800847e:	b31c      	cbz	r4, 80084c8 <L6206_Board_PwmSetFreq+0x78>
		pulse = 0;
	}else {
		if (duty > 100) duty = 100;
 8008480:	2c64      	cmp	r4, #100	; 0x64
 8008482:	d900      	bls.n	8008486 <L6206_Board_PwmSetFreq+0x36>
 8008484:	2464      	movs	r4, #100	; 0x64
		pulse = (uint32_t)(((uint32_t)period * (uint32_t)duty) / 100) + 1;
 8008486:	fb04 f400 	mul.w	r4, r4, r0
 800848a:	4a12      	ldr	r2, [pc, #72]	; (80084d4 <L6206_Board_PwmSetFreq+0x84>)
 800848c:	fba2 2404 	umull	r2, r4, r2, r4
 8008490:	0964      	lsrs	r4, r4, #5
 8008492:	3401      	adds	r4, #1
	}
	__HAL_TIM_SetCompare(pHTim, channel, pulse);
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	3234      	adds	r2, #52	; 0x34
 8008498:	0888      	lsrs	r0, r1, #2
 800849a:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	HAL_TIM_PWM_Start(pHTim, channel);
 800849e:	4618      	mov	r0, r3
 80084a0:	f005 fa12 	bl	800d8c8 <HAL_TIM_PWM_Start>
 80084a4:	bd70      	pop	{r4, r5, r6, pc}
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 80084a6:	4b0c      	ldr	r3, [pc, #48]	; (80084d8 <L6206_Board_PwmSetFreq+0x88>)
 80084a8:	4a09      	ldr	r2, [pc, #36]	; (80084d0 <L6206_Board_PwmSetFreq+0x80>)
 80084aa:	601a      	str	r2, [r3, #0]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A;
 80084ac:	2104      	movs	r1, #4
		break;
 80084ae:	e7df      	b.n	8008470 <L6206_Board_PwmSetFreq+0x20>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 80084b0:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <L6206_Board_PwmSetFreq+0x8c>)
 80084b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80084b6:	601a      	str	r2, [r3, #0]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
 80084b8:	2100      	movs	r1, #0
		break;
 80084ba:	e7d9      	b.n	8008470 <L6206_Board_PwmSetFreq+0x20>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 80084bc:	4b08      	ldr	r3, [pc, #32]	; (80084e0 <L6206_Board_PwmSetFreq+0x90>)
 80084be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80084c2:	601a      	str	r2, [r3, #0]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
 80084c4:	2104      	movs	r1, #4
		break;
 80084c6:	e7d3      	b.n	8008470 <L6206_Board_PwmSetFreq+0x20>
		pulse = 0;
 80084c8:	2400      	movs	r4, #0
 80084ca:	e7e3      	b.n	8008494 <L6206_Board_PwmSetFreq+0x44>
 80084cc:	20002a38 	.word	0x20002a38
 80084d0:	40000400 	.word	0x40000400
 80084d4:	51eb851f 	.word	0x51eb851f
 80084d8:	20002984 	.word	0x20002984
 80084dc:	200029c0 	.word	0x200029c0
 80084e0:	200029fc 	.word	0x200029fc

080084e4 <L6206_Board_PwmStop>:
* @param[in] bridgeInput 0 for input 1A, 1 for input 2A,
* 2 for input 1B, 3 for input 2B
* @retval None
**********************************************************/
void L6206_Board_PwmStop(uint8_t bridgeInput)
{
 80084e4:	b508      	push	{r3, lr}
	switch (bridgeInput) {
 80084e6:	2803      	cmp	r0, #3
 80084e8:	d816      	bhi.n	8008518 <L6206_Board_PwmStop+0x34>
 80084ea:	e8df f000 	tbb	[pc, r0]
 80084ee:	0702      	.short	0x0702
 80084f0:	110c      	.short	0x110c
	case 0:
		HAL_TIM_PWM_Stop(&hTimPwm1A, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1A);
 80084f2:	2100      	movs	r1, #0
 80084f4:	4809      	ldr	r0, [pc, #36]	; (800851c <L6206_Board_PwmStop+0x38>)
 80084f6:	f005 fa3f 	bl	800d978 <HAL_TIM_PWM_Stop>
		break;
 80084fa:	bd08      	pop	{r3, pc}
	case  1:
		HAL_TIM_PWM_Stop(&hTimPwm2A, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A);
 80084fc:	2104      	movs	r1, #4
 80084fe:	4808      	ldr	r0, [pc, #32]	; (8008520 <L6206_Board_PwmStop+0x3c>)
 8008500:	f005 fa3a 	bl	800d978 <HAL_TIM_PWM_Stop>
		break;
 8008504:	bd08      	pop	{r3, pc}
	case  2:
		HAL_TIM_PWM_Stop(&hTimPwm1B, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B);
 8008506:	2100      	movs	r1, #0
 8008508:	4806      	ldr	r0, [pc, #24]	; (8008524 <L6206_Board_PwmStop+0x40>)
 800850a:	f005 fa35 	bl	800d978 <HAL_TIM_PWM_Stop>
		break;
 800850e:	bd08      	pop	{r3, pc}
	case  3:
		HAL_TIM_PWM_Stop(&hTimPwm2B, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B);
 8008510:	2104      	movs	r1, #4
 8008512:	4805      	ldr	r0, [pc, #20]	; (8008528 <L6206_Board_PwmStop+0x44>)
 8008514:	f005 fa30 	bl	800d978 <HAL_TIM_PWM_Stop>
 8008518:	bd08      	pop	{r3, pc}
 800851a:	bf00      	nop
 800851c:	20002a38 	.word	0x20002a38
 8008520:	20002984 	.word	0x20002984
 8008524:	200029c0 	.word	0x200029c0
 8008528:	200029fc 	.word	0x200029fc

0800852c <L6474_GetMotorHandle>:
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 800852c:	2000      	movs	r0, #0
 800852e:	4770      	bx	lr

08008530 <l647x_GetMotorHandle>:
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 8008530:	2000      	movs	r0, #0
 8008532:	4770      	bx	lr

08008534 <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 8008534:	2000      	movs	r0, #0
 8008536:	4770      	bx	lr

08008538 <Powerstep01_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 8008538:	2000      	movs	r0, #0
 800853a:	4770      	bx	lr

0800853c <L6208_GetMotorHandle>:
}
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 800853c:	2000      	movs	r0, #0
 800853e:	4770      	bx	lr

08008540 <Stspin220_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 8008540:	2000      	movs	r0, #0
 8008542:	4770      	bx	lr

08008544 <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 8008544:	2000      	movs	r0, #0
 8008546:	4770      	bx	lr

08008548 <BSP_MotorControl_ErrorHandler>:
* @brief Motor control error handler
* @param[in] error number of the error
* @retval None
**********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8008548:	b508      	push	{r3, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->ErrorHandler != 0)) {
 800854a:	4b04      	ldr	r3, [pc, #16]	; (800855c <BSP_MotorControl_ErrorHandler+0x14>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	b123      	cbz	r3, 800855a <BSP_MotorControl_ErrorHandler+0x12>
 8008550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008554:	b10b      	cbz	r3, 800855a <BSP_MotorControl_ErrorHandler+0x12>
		motorDrvHandle->ErrorHandler(error);
 8008556:	4798      	blx	r3
	}else {
		while (1) {
			/* Infinite loop as Error handler must be defined*/
		}
	}
}
 8008558:	bd08      	pop	{r3, pc}
 800855a:	e7fe      	b.n	800855a <BSP_MotorControl_ErrorHandler+0x12>
 800855c:	200025d8 	.word	0x200025d8

08008560 <BSP_MotorControl_AttachErrorHandler>:
{
 8008560:	b508      	push	{r3, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->AttachErrorHandler != 0)) {
 8008562:	4b06      	ldr	r3, [pc, #24]	; (800857c <BSP_MotorControl_AttachErrorHandler+0x1c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	b11b      	cbz	r3, 8008570 <BSP_MotorControl_AttachErrorHandler+0x10>
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	b10b      	cbz	r3, 8008570 <BSP_MotorControl_AttachErrorHandler+0x10>
		motorDrvHandle->AttachErrorHandler(callback);
 800856c:	4798      	blx	r3
 800856e:	bd08      	pop	{r3, pc}
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 8008570:	f640 0002 	movw	r0, #2050	; 0x802
 8008574:	f7ff ffe8 	bl	8008548 <BSP_MotorControl_ErrorHandler>
 8008578:	bd08      	pop	{r3, pc}
 800857a:	bf00      	nop
 800857c:	200025d8 	.word	0x200025d8

08008580 <BSP_MotorControl_AttachFlagInterrupt>:
{
 8008580:	b508      	push	{r3, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->AttachFlagInterrupt != 0)) {
 8008582:	4b06      	ldr	r3, [pc, #24]	; (800859c <BSP_MotorControl_AttachFlagInterrupt+0x1c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	b11b      	cbz	r3, 8008590 <BSP_MotorControl_AttachFlagInterrupt+0x10>
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	b10b      	cbz	r3, 8008590 <BSP_MotorControl_AttachFlagInterrupt+0x10>
		motorDrvHandle->AttachFlagInterrupt(callback);
 800858c:	4798      	blx	r3
 800858e:	bd08      	pop	{r3, pc}
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8008590:	f640 0003 	movw	r0, #2051	; 0x803
 8008594:	f7ff ffd8 	bl	8008548 <BSP_MotorControl_ErrorHandler>
 8008598:	bd08      	pop	{r3, pc}
 800859a:	bf00      	nop
 800859c:	200025d8 	.word	0x200025d8

080085a0 <BSP_MotorControl_Init>:
* @param[in] id Component Id (L6474, Powerstep01,...)
* @param[in] initDeviceParameters Initialization structure for one device
* @retval None
**********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 80085a0:	b508      	push	{r3, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->Init != 0)) {
 80085a2:	4b06      	ldr	r3, [pc, #24]	; (80085bc <BSP_MotorControl_Init+0x1c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	b123      	cbz	r3, 80085b2 <BSP_MotorControl_Init+0x12>
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	b113      	cbz	r3, 80085b2 <BSP_MotorControl_Init+0x12>
		motorDrvHandle->Init(initDeviceParameters);
 80085ac:	4608      	mov	r0, r1
 80085ae:	4798      	blx	r3
 80085b0:	bd08      	pop	{r3, pc}
	}else {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 80085b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80085b6:	f7ff ffc7 	bl	8008548 <BSP_MotorControl_ErrorHandler>
 80085ba:	bd08      	pop	{r3, pc}
 80085bc:	200025d8 	.word	0x200025d8

080085c0 <BSP_MotorControl_GetDeviceState>:
*            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
* @retval State ACCELERATING, DECELERATING, STEADY or INACTIVE for stepper motor,
                 STEADY or INACTIVE for Brush DC motor
**********************************************************/
motorState_t BSP_MotorControl_GetDeviceState(uint8_t deviceId)
{
 80085c0:	b508      	push	{r3, lr}
	motorState_t state = INACTIVE;

	if ((motorDrvHandle != 0) && (motorDrvHandle->GetDeviceState != 0)) {
 80085c2:	4b06      	ldr	r3, [pc, #24]	; (80085dc <BSP_MotorControl_GetDeviceState+0x1c>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	b11b      	cbz	r3, 80085d0 <BSP_MotorControl_GetDeviceState+0x10>
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	b10b      	cbz	r3, 80085d0 <BSP_MotorControl_GetDeviceState+0x10>
		state = motorDrvHandle->GetDeviceState(deviceId);
 80085cc:	4798      	blx	r3
 80085ce:	bd08      	pop	{r3, pc}
	}else {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
 80085d0:	f640 0009 	movw	r0, #2057	; 0x809
 80085d4:	f7ff ffb8 	bl	8008548 <BSP_MotorControl_ErrorHandler>
	motorState_t state = INACTIVE;
 80085d8:	2008      	movs	r0, #8
	}
	return(state);
}
 80085da:	bd08      	pop	{r3, pc}
 80085dc:	200025d8 	.word	0x200025d8

080085e0 <BSP_MotorControl_Run>:
* @retval None
* @note For unidirectionnal brush DC motor, direction parameter
* has no effect
**********************************************************/
void BSP_MotorControl_Run(uint8_t deviceId, motorDir_t direction)
{
 80085e0:	b508      	push	{r3, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->Run != 0)) {
 80085e2:	4b06      	ldr	r3, [pc, #24]	; (80085fc <BSP_MotorControl_Run+0x1c>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	b11b      	cbz	r3, 80085f0 <BSP_MotorControl_Run+0x10>
 80085e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ea:	b10b      	cbz	r3, 80085f0 <BSP_MotorControl_Run+0x10>
		motorDrvHandle->Run(deviceId, direction);
 80085ec:	4798      	blx	r3
 80085ee:	bd08      	pop	{r3, pc}
	}else {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(21);
 80085f0:	f640 0015 	movw	r0, #2069	; 0x815
 80085f4:	f7ff ffa8 	bl	8008548 <BSP_MotorControl_ErrorHandler>
 80085f8:	bd08      	pop	{r3, pc}
 80085fa:	bf00      	nop
 80085fc:	200025d8 	.word	0x200025d8

08008600 <BSP_MotorControl_SetMaxSpeed>:
* @retval true if the command is successfully executed, else false
* @note For a stepper motor, the command is not performed if the device
* is executing a MOVE or GOTO command (but it can be used during a RUN command).
**********************************************************/
bool BSP_MotorControl_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{
 8008600:	b508      	push	{r3, lr}
	bool status = FALSE;
	if ((motorDrvHandle != 0) && (motorDrvHandle->SetMaxSpeed != 0)) {
 8008602:	4b06      	ldr	r3, [pc, #24]	; (800861c <BSP_MotorControl_SetMaxSpeed+0x1c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	b11b      	cbz	r3, 8008610 <BSP_MotorControl_SetMaxSpeed+0x10>
 8008608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800860a:	b10b      	cbz	r3, 8008610 <BSP_MotorControl_SetMaxSpeed+0x10>
		status = motorDrvHandle->SetMaxSpeed(deviceId, newMaxSpeed);
 800860c:	4798      	blx	r3
 800860e:	bd08      	pop	{r3, pc}
	}else {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
 8008610:	f640 001a 	movw	r0, #2074	; 0x81a
 8008614:	f7ff ff98 	bl	8008548 <BSP_MotorControl_ErrorHandler>
	bool status = FALSE;
 8008618:	2000      	movs	r0, #0
	}
	return(status);
}
 800861a:	bd08      	pop	{r3, pc}
 800861c:	200025d8 	.word	0x200025d8

08008620 <BSP_MotorControl_CmdGetStatus>:
* the flags of the status register are reset.
* This is not the case when the status register is read with the
* GetParam command (via the functions ReadStatusRegister or CmdGetParam).
**********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 8008620:	b508      	push	{r3, lr}
	uint16_t status = 0;
	if ((motorDrvHandle != 0) && (motorDrvHandle->CmdGetStatus != 0)) {
 8008622:	4b07      	ldr	r3, [pc, #28]	; (8008640 <BSP_MotorControl_CmdGetStatus+0x20>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	b123      	cbz	r3, 8008632 <BSP_MotorControl_CmdGetStatus+0x12>
 8008628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800862c:	b10b      	cbz	r3, 8008632 <BSP_MotorControl_CmdGetStatus+0x12>
		status = motorDrvHandle->CmdGetStatus(deviceId);
 800862e:	4798      	blx	r3
 8008630:	bd08      	pop	{r3, pc}
	}else {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 8008632:	f640 0022 	movw	r0, #2082	; 0x822
 8008636:	f7ff ff87 	bl	8008548 <BSP_MotorControl_ErrorHandler>
	uint16_t status = 0;
 800863a:	2000      	movs	r0, #0
	}
	return(status);
}
 800863c:	bd08      	pop	{r3, pc}
 800863e:	bf00      	nop
 8008640:	200025d8 	.word	0x200025d8

08008644 <BSP_MotorControl_SetDualFullBridgeConfig>:
* for Stspin240, 0 for a mono brush DC configuration, 1 for a dual brush DC configuration
* for Stspin250, 0 only as no dual brush DC configuration is supported
* @retval None
**********************************************************/
void BSP_MotorControl_SetDualFullBridgeConfig(uint8_t config)
{
 8008644:	b508      	push	{r3, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->SetDualFullBridgeConfig != 0)) {
 8008646:	4b06      	ldr	r3, [pc, #24]	; (8008660 <BSP_MotorControl_SetDualFullBridgeConfig+0x1c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	b123      	cbz	r3, 8008656 <BSP_MotorControl_SetDualFullBridgeConfig+0x12>
 800864c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008650:	b10b      	cbz	r3, 8008656 <BSP_MotorControl_SetDualFullBridgeConfig+0x12>
		motorDrvHandle->SetDualFullBridgeConfig(config);
 8008652:	4798      	blx	r3
 8008654:	bd08      	pop	{r3, pc}
	}else {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(65);
 8008656:	f640 0041 	movw	r0, #2113	; 0x841
 800865a:	f7ff ff75 	bl	8008548 <BSP_MotorControl_ErrorHandler>
 800865e:	bd08      	pop	{r3, pc}
 8008660:	200025d8 	.word	0x200025d8

08008664 <BSP_MotorControl_SetBridgeInputPwmFreq>:
* bridgeId must be 0 for L6208 (both bridges are set with the same frequency)
* @param[in] newFreq in Hz up to 100000Hz
* @retval None
**********************************************************/
void BSP_MotorControl_SetBridgeInputPwmFreq(uint8_t bridgeId, uint32_t newFreq)
{
 8008664:	b508      	push	{r3, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->SetBridgeInputPwmFreq != 0)) {
 8008666:	4b06      	ldr	r3, [pc, #24]	; (8008680 <BSP_MotorControl_SetBridgeInputPwmFreq+0x1c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	b123      	cbz	r3, 8008676 <BSP_MotorControl_SetBridgeInputPwmFreq+0x12>
 800866c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008670:	b10b      	cbz	r3, 8008676 <BSP_MotorControl_SetBridgeInputPwmFreq+0x12>
		motorDrvHandle->SetBridgeInputPwmFreq(bridgeId, newFreq);
 8008672:	4798      	blx	r3
 8008674:	bd08      	pop	{r3, pc}
	}else {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(67);
 8008676:	f640 0043 	movw	r0, #2115	; 0x843
 800867a:	f7ff ff65 	bl	8008548 <BSP_MotorControl_ErrorHandler>
 800867e:	bd08      	pop	{r3, pc}
 8008680:	200025d8 	.word	0x200025d8

08008684 <BSP_MotorControl_SetNbDevices>:
* from 1 to MAX_NUMBER_OF_DEVICES
* @retval TRUE if successfull, FALSE if failure, attempt
* to set a number of devices greater than MAX_NUMBER_OF_DEVICES
**********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 8008684:	b510      	push	{r4, lr}
 8008686:	460c      	mov	r4, r1
	MotorControlBoardId = id;
 8008688:	4b2f      	ldr	r3, [pc, #188]	; (8008748 <BSP_MotorControl_SetNbDevices+0xc4>)
 800868a:	8018      	strh	r0, [r3, #0]
	bool status = FALSE;
	if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474) {
 800868c:	f641 134a 	movw	r3, #6474	; 0x194a
 8008690:	4298      	cmp	r0, r3
 8008692:	d022      	beq.n	80086da <BSP_MotorControl_SetNbDevices+0x56>
		motorDrvHandle = L6474_GetMotorHandle();
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01) {
 8008694:	2801      	cmp	r0, #1
 8008696:	d025      	beq.n	80086e4 <BSP_MotorControl_SetNbDevices+0x60>
		motorDrvHandle = Powerstep01_GetMotorHandle();
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206) {
 8008698:	f641 033e 	movw	r3, #6206	; 0x183e
 800869c:	4298      	cmp	r0, r3
 800869e:	d026      	beq.n	80086ee <BSP_MotorControl_SetNbDevices+0x6a>
		motorDrvHandle = L6206_GetMotorHandle();
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208) {
 80086a0:	f5b0 5fc2 	cmp.w	r0, #6208	; 0x1840
 80086a4:	d028      	beq.n	80086f8 <BSP_MotorControl_SetNbDevices+0x74>
		motorDrvHandle = L6208_GetMotorHandle();
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220) {
 80086a6:	28dc      	cmp	r0, #220	; 0xdc
 80086a8:	d02b      	beq.n	8008702 <BSP_MotorControl_SetNbDevices+0x7e>
		motorDrvHandle = Stspin220_GetMotorHandle();
	}else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 80086aa:	f641 1346 	movw	r3, #6470	; 0x1946
 80086ae:	4298      	cmp	r0, r3
 80086b0:	d02c      	beq.n	800870c <BSP_MotorControl_SetNbDevices+0x88>
 80086b2:	f641 1348 	movw	r3, #6472	; 0x1948
 80086b6:	4298      	cmp	r0, r3
 80086b8:	d028      	beq.n	800870c <BSP_MotorControl_SetNbDevices+0x88>
		  (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472)) {
		motorDrvHandle = l647x_GetMotorHandle();
	}else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 80086ba:	f641 1350 	movw	r3, #6480	; 0x1950
 80086be:	4298      	cmp	r0, r3
 80086c0:	d031      	beq.n	8008726 <BSP_MotorControl_SetNbDevices+0xa2>
 80086c2:	f641 1352 	movw	r3, #6482	; 0x1952
 80086c6:	4298      	cmp	r0, r3
 80086c8:	d02d      	beq.n	8008726 <BSP_MotorControl_SetNbDevices+0xa2>
		  (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482)) {
		motorDrvHandle = l648x_GetMotorHandle();
	}else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240) ||
 80086ca:	28f0      	cmp	r0, #240	; 0xf0
 80086cc:	d030      	beq.n	8008730 <BSP_MotorControl_SetNbDevices+0xac>
 80086ce:	28fa      	cmp	r0, #250	; 0xfa
 80086d0:	d02e      	beq.n	8008730 <BSP_MotorControl_SetNbDevices+0xac>
		  (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250)) {
		motorDrvHandle = Stspin240_250_GetMotorHandle();
	}else {
		motorDrvHandle = 0;
 80086d2:	2200      	movs	r2, #0
 80086d4:	4b1d      	ldr	r3, [pc, #116]	; (800874c <BSP_MotorControl_SetNbDevices+0xc8>)
 80086d6:	601a      	str	r2, [r3, #0]
 80086d8:	e01c      	b.n	8008714 <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = L6474_GetMotorHandle();
 80086da:	f7ff ff27 	bl	800852c <L6474_GetMotorHandle>
 80086de:	4b1b      	ldr	r3, [pc, #108]	; (800874c <BSP_MotorControl_SetNbDevices+0xc8>)
 80086e0:	6018      	str	r0, [r3, #0]
 80086e2:	e017      	b.n	8008714 <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = Powerstep01_GetMotorHandle();
 80086e4:	f7ff ff28 	bl	8008538 <Powerstep01_GetMotorHandle>
 80086e8:	4b18      	ldr	r3, [pc, #96]	; (800874c <BSP_MotorControl_SetNbDevices+0xc8>)
 80086ea:	6018      	str	r0, [r3, #0]
 80086ec:	e012      	b.n	8008714 <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = L6206_GetMotorHandle();
 80086ee:	f7f9 f90f 	bl	8001910 <L6206_GetMotorHandle>
 80086f2:	4b16      	ldr	r3, [pc, #88]	; (800874c <BSP_MotorControl_SetNbDevices+0xc8>)
 80086f4:	6018      	str	r0, [r3, #0]
 80086f6:	e00d      	b.n	8008714 <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = L6208_GetMotorHandle();
 80086f8:	f7ff ff20 	bl	800853c <L6208_GetMotorHandle>
 80086fc:	4b13      	ldr	r3, [pc, #76]	; (800874c <BSP_MotorControl_SetNbDevices+0xc8>)
 80086fe:	6018      	str	r0, [r3, #0]
 8008700:	e008      	b.n	8008714 <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = Stspin220_GetMotorHandle();
 8008702:	f7ff ff1d 	bl	8008540 <Stspin220_GetMotorHandle>
 8008706:	4b11      	ldr	r3, [pc, #68]	; (800874c <BSP_MotorControl_SetNbDevices+0xc8>)
 8008708:	6018      	str	r0, [r3, #0]
 800870a:	e003      	b.n	8008714 <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = l647x_GetMotorHandle();
 800870c:	f7ff ff10 	bl	8008530 <l647x_GetMotorHandle>
 8008710:	4b0e      	ldr	r3, [pc, #56]	; (800874c <BSP_MotorControl_SetNbDevices+0xc8>)
 8008712:	6018      	str	r0, [r3, #0]
	}
	if ((motorDrvHandle != 0) &&
 8008714:	4b0d      	ldr	r3, [pc, #52]	; (800874c <BSP_MotorControl_SetNbDevices+0xc8>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	b193      	cbz	r3, 8008740 <BSP_MotorControl_SetNbDevices+0xbc>
	    (motorDrvHandle->SetNbDevices != 0) &&
 800871a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	if ((motorDrvHandle != 0) &&
 800871e:	b18b      	cbz	r3, 8008744 <BSP_MotorControl_SetNbDevices+0xc0>
	    (motorDrvHandle->SetNbDevices != 0) &&
 8008720:	b95c      	cbnz	r4, 800873a <BSP_MotorControl_SetNbDevices+0xb6>
	bool status = FALSE;
 8008722:	2000      	movs	r0, #0
	    (nbDevices != 0)) {
		status = motorDrvHandle->SetNbDevices(nbDevices);
	}
	return(status);
}
 8008724:	bd10      	pop	{r4, pc}
		motorDrvHandle = l648x_GetMotorHandle();
 8008726:	f7ff ff05 	bl	8008534 <l648x_GetMotorHandle>
 800872a:	4b08      	ldr	r3, [pc, #32]	; (800874c <BSP_MotorControl_SetNbDevices+0xc8>)
 800872c:	6018      	str	r0, [r3, #0]
 800872e:	e7f1      	b.n	8008714 <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = Stspin240_250_GetMotorHandle();
 8008730:	f7ff ff08 	bl	8008544 <Stspin240_250_GetMotorHandle>
 8008734:	4b05      	ldr	r3, [pc, #20]	; (800874c <BSP_MotorControl_SetNbDevices+0xc8>)
 8008736:	6018      	str	r0, [r3, #0]
 8008738:	e7ec      	b.n	8008714 <BSP_MotorControl_SetNbDevices+0x90>
		status = motorDrvHandle->SetNbDevices(nbDevices);
 800873a:	4620      	mov	r0, r4
 800873c:	4798      	blx	r3
 800873e:	bd10      	pop	{r4, pc}
	bool status = FALSE;
 8008740:	2000      	movs	r0, #0
 8008742:	bd10      	pop	{r4, pc}
 8008744:	2000      	movs	r0, #0
 8008746:	bd10      	pop	{r4, pc}
 8008748:	200025d4 	.word	0x200025d4
 800874c:	200025d8 	.word	0x200025d8

08008750 <HAL_InitTick>:
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008750:	b510      	push	{r4, lr}
 8008752:	4604      	mov	r4, r0
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8008754:	4b0e      	ldr	r3, [pc, #56]	; (8008790 <HAL_InitTick+0x40>)
 8008756:	7818      	ldrb	r0, [r3, #0]
 8008758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800875c:	fbb3 f3f0 	udiv	r3, r3, r0
 8008760:	4a0c      	ldr	r2, [pc, #48]	; (8008794 <HAL_InitTick+0x44>)
 8008762:	6810      	ldr	r0, [r2, #0]
 8008764:	fbb0 f0f3 	udiv	r0, r0, r3
 8008768:	f000 fc24 	bl	8008fb4 <HAL_SYSTICK_Config>
 800876c:	b968      	cbnz	r0, 800878a <HAL_InitTick+0x3a>
		return HAL_ERROR;
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 800876e:	2c0f      	cmp	r4, #15
 8008770:	d901      	bls.n	8008776 <HAL_InitTick+0x26>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
		uwTickPrio = TickPriority;
	}else {
		return HAL_ERROR;
 8008772:	2001      	movs	r0, #1
	}

	/* Return function status */
	return HAL_OK;
}
 8008774:	bd10      	pop	{r4, pc}
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008776:	2200      	movs	r2, #0
 8008778:	4621      	mov	r1, r4
 800877a:	f04f 30ff 	mov.w	r0, #4294967295
 800877e:	f000 fba7 	bl	8008ed0 <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8008782:	4b05      	ldr	r3, [pc, #20]	; (8008798 <HAL_InitTick+0x48>)
 8008784:	601c      	str	r4, [r3, #0]
	return HAL_OK;
 8008786:	2000      	movs	r0, #0
 8008788:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 800878a:	2001      	movs	r0, #1
 800878c:	bd10      	pop	{r4, pc}
 800878e:	bf00      	nop
 8008790:	2000147c 	.word	0x2000147c
 8008794:	200014a0 	.word	0x200014a0
 8008798:	20001480 	.word	0x20001480

0800879c <HAL_Init>:
{
 800879c:	b508      	push	{r3, lr}
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800879e:	4b0b      	ldr	r3, [pc, #44]	; (80087cc <HAL_Init+0x30>)
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087a6:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087ae:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087b6:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80087b8:	2003      	movs	r0, #3
 80087ba:	f000 fb6b 	bl	8008e94 <HAL_NVIC_SetPriorityGrouping>
	HAL_InitTick(TICK_INT_PRIORITY);
 80087be:	2000      	movs	r0, #0
 80087c0:	f7ff ffc6 	bl	8008750 <HAL_InitTick>
	HAL_MspInit();
 80087c4:	f007 fb3c 	bl	800fe40 <HAL_MspInit>
}
 80087c8:	2000      	movs	r0, #0
 80087ca:	bd08      	pop	{r3, pc}
 80087cc:	40023c00 	.word	0x40023c00

080087d0 <HAL_IncTick>:
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void)
{
	uwTick += uwTickFreq;
 80087d0:	4a03      	ldr	r2, [pc, #12]	; (80087e0 <HAL_IncTick+0x10>)
 80087d2:	6811      	ldr	r1, [r2, #0]
 80087d4:	4b03      	ldr	r3, [pc, #12]	; (80087e4 <HAL_IncTick+0x14>)
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	440b      	add	r3, r1
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	20002a74 	.word	0x20002a74
 80087e4:	2000147c 	.word	0x2000147c

080087e8 <HAL_GetTick>:
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void)
{
	return uwTick;
 80087e8:	4b01      	ldr	r3, [pc, #4]	; (80087f0 <HAL_GetTick+0x8>)
 80087ea:	6818      	ldr	r0, [r3, #0]
}
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	20002a74 	.word	0x20002a74

080087f4 <HAL_Delay>:
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay)
{
 80087f4:	b538      	push	{r3, r4, r5, lr}
 80087f6:	4604      	mov	r4, r0
	uint32_t tickstart = HAL_GetTick();
 80087f8:	f7ff fff6 	bl	80087e8 <HAL_GetTick>
 80087fc:	4605      	mov	r5, r0
	uint32_t wait = Delay;

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 80087fe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008802:	d002      	beq.n	800880a <HAL_Delay+0x16>
		wait += (uint32_t)(uwTickFreq);
 8008804:	4b04      	ldr	r3, [pc, #16]	; (8008818 <HAL_Delay+0x24>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	441c      	add	r4, r3
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 800880a:	f7ff ffed 	bl	80087e8 <HAL_GetTick>
 800880e:	1b40      	subs	r0, r0, r5
 8008810:	4284      	cmp	r4, r0
 8008812:	d8fa      	bhi.n	800880a <HAL_Delay+0x16>
	}
}
 8008814:	bd38      	pop	{r3, r4, r5, pc}
 8008816:	bf00      	nop
 8008818:	2000147c 	.word	0x2000147c

0800881c <ADC_Init>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval None
 */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800881c:	b510      	push	{r4, lr}
 800881e:	4604      	mov	r4, r0
	/* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
	/* control register)                                                    */
	tmpADC_Common = ADC_COMMON_REGISTER(hadc);

	/* Set the ADC clock prescaler */
	tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008820:	4b4e      	ldr	r3, [pc, #312]	; (800895c <ADC_Init+0x140>)
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8008828:	605a      	str	r2, [r3, #4]
	tmpADC_Common->CCR |= hadc->Init.ClockPrescaler;
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	6841      	ldr	r1, [r0, #4]
 800882e:	430a      	orrs	r2, r1
 8008830:	605a      	str	r2, [r3, #4]

	/* Set ADC scan mode */
	hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008832:	6802      	ldr	r2, [r0, #0]
 8008834:	6853      	ldr	r3, [r2, #4]
 8008836:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800883a:	6053      	str	r3, [r2, #4]
	hadc->Instance->CR1 |= ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800883c:	6802      	ldr	r2, [r0, #0]
 800883e:	6853      	ldr	r3, [r2, #4]
 8008840:	6901      	ldr	r1, [r0, #16]
 8008842:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008846:	6053      	str	r3, [r2, #4]

	/* Set ADC resolution */
	hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008848:	6802      	ldr	r2, [r0, #0]
 800884a:	6853      	ldr	r3, [r2, #4]
 800884c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8008850:	6053      	str	r3, [r2, #4]
	hadc->Instance->CR1 |= hadc->Init.Resolution;
 8008852:	6802      	ldr	r2, [r0, #0]
 8008854:	6853      	ldr	r3, [r2, #4]
 8008856:	6881      	ldr	r1, [r0, #8]
 8008858:	430b      	orrs	r3, r1
 800885a:	6053      	str	r3, [r2, #4]

	/* Set ADC data alignment */
	hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800885c:	6802      	ldr	r2, [r0, #0]
 800885e:	6893      	ldr	r3, [r2, #8]
 8008860:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008864:	6093      	str	r3, [r2, #8]
	hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008866:	6802      	ldr	r2, [r0, #0]
 8008868:	6893      	ldr	r3, [r2, #8]
 800886a:	68c1      	ldr	r1, [r0, #12]
 800886c:	430b      	orrs	r3, r1
 800886e:	6093      	str	r3, [r2, #8]
	/* Enable external trigger if trigger selection is different of software  */
	/* start.                                                                 */
	/* Note: This configuration keeps the hardware feature of parameter       */
	/*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
	/*       software start.                                                  */
	if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 8008870:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008872:	4b3b      	ldr	r3, [pc, #236]	; (8008960 <ADC_Init+0x144>)
 8008874:	429a      	cmp	r2, r3
 8008876:	d059      	beq.n	800892c <ADC_Init+0x110>
		/* Select external trigger to start conversion */
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008878:	6802      	ldr	r2, [r0, #0]
 800887a:	6893      	ldr	r3, [r2, #8]
 800887c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8008880:	6093      	str	r3, [r2, #8]
		hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008882:	6802      	ldr	r2, [r0, #0]
 8008884:	6893      	ldr	r3, [r2, #8]
 8008886:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008888:	430b      	orrs	r3, r1
 800888a:	6093      	str	r3, [r2, #8]

		/* Select external trigger polarity */
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800888c:	6802      	ldr	r2, [r0, #0]
 800888e:	6893      	ldr	r3, [r2, #8]
 8008890:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008894:	6093      	str	r3, [r2, #8]
		hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008896:	6802      	ldr	r2, [r0, #0]
 8008898:	6893      	ldr	r3, [r2, #8]
 800889a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800889c:	430b      	orrs	r3, r1
 800889e:	6093      	str	r3, [r2, #8]
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
	}

	/* Enable or disable ADC continuous conversion mode */
	hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80088a0:	6822      	ldr	r2, [r4, #0]
 80088a2:	6893      	ldr	r3, [r2, #8]
 80088a4:	f023 0302 	bic.w	r3, r3, #2
 80088a8:	6093      	str	r3, [r2, #8]
	hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80088aa:	6822      	ldr	r2, [r4, #0]
 80088ac:	6893      	ldr	r3, [r2, #8]
 80088ae:	69a1      	ldr	r1, [r4, #24]
 80088b0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80088b4:	6093      	str	r3, [r2, #8]

	if (hadc->Init.DiscontinuousConvMode != DISABLE) {
 80088b6:	6a23      	ldr	r3, [r4, #32]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d048      	beq.n	800894e <ADC_Init+0x132>
		assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80088bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088be:	3b01      	subs	r3, #1
 80088c0:	2b07      	cmp	r3, #7
 80088c2:	d83e      	bhi.n	8008942 <ADC_Init+0x126>

		/* Enable the selected ADC regular discontinuous mode */
		hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80088c4:	6822      	ldr	r2, [r4, #0]
 80088c6:	6853      	ldr	r3, [r2, #4]
 80088c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80088cc:	6053      	str	r3, [r2, #4]

		/* Set the number of channels to be converted in discontinuous mode */
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80088ce:	6822      	ldr	r2, [r4, #0]
 80088d0:	6853      	ldr	r3, [r2, #4]
 80088d2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80088d6:	6053      	str	r3, [r2, #4]
		hadc->Instance->CR1 |= ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80088d8:	6821      	ldr	r1, [r4, #0]
 80088da:	684b      	ldr	r3, [r1, #4]
 80088dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80088de:	3a01      	subs	r2, #1
 80088e0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80088e4:	604b      	str	r3, [r1, #4]
		/* Disable the selected ADC regular discontinuous mode */
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
	}

	/* Set ADC number of conversion */
	hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80088e6:	6822      	ldr	r2, [r4, #0]
 80088e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80088ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80088ee:	62d3      	str	r3, [r2, #44]	; 0x2c
	hadc->Instance->SQR1 |= ADC_SQR1(hadc->Init.NbrOfConversion);
 80088f0:	6821      	ldr	r1, [r4, #0]
 80088f2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80088f4:	69e2      	ldr	r2, [r4, #28]
 80088f6:	3a01      	subs	r2, #1
 80088f8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80088fc:	62cb      	str	r3, [r1, #44]	; 0x2c

	/* Enable or disable ADC DMA continuous request */
	hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80088fe:	6822      	ldr	r2, [r4, #0]
 8008900:	6893      	ldr	r3, [r2, #8]
 8008902:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008906:	6093      	str	r3, [r2, #8]
	hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8008908:	6822      	ldr	r2, [r4, #0]
 800890a:	6893      	ldr	r3, [r2, #8]
 800890c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800890e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8008912:	6093      	str	r3, [r2, #8]

	/* Enable or disable ADC end of conversion selection */
	hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008914:	6822      	ldr	r2, [r4, #0]
 8008916:	6893      	ldr	r3, [r2, #8]
 8008918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800891c:	6093      	str	r3, [r2, #8]
	hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800891e:	6822      	ldr	r2, [r4, #0]
 8008920:	6893      	ldr	r3, [r2, #8]
 8008922:	6961      	ldr	r1, [r4, #20]
 8008924:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8008928:	6093      	str	r3, [r2, #8]
 800892a:	bd10      	pop	{r4, pc}
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800892c:	6802      	ldr	r2, [r0, #0]
 800892e:	6893      	ldr	r3, [r2, #8]
 8008930:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8008934:	6093      	str	r3, [r2, #8]
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008936:	6802      	ldr	r2, [r0, #0]
 8008938:	6893      	ldr	r3, [r2, #8]
 800893a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800893e:	6093      	str	r3, [r2, #8]
 8008940:	e7ae      	b.n	80088a0 <ADC_Init+0x84>
		assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8008942:	f240 51d1 	movw	r1, #1489	; 0x5d1
 8008946:	4807      	ldr	r0, [pc, #28]	; (8008964 <ADC_Init+0x148>)
 8008948:	f007 f916 	bl	800fb78 <assert_failed>
 800894c:	e7ba      	b.n	80088c4 <ADC_Init+0xa8>
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800894e:	6822      	ldr	r2, [r4, #0]
 8008950:	6853      	ldr	r3, [r2, #4]
 8008952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008956:	6053      	str	r3, [r2, #4]
 8008958:	e7c5      	b.n	80088e6 <ADC_Init+0xca>
 800895a:	bf00      	nop
 800895c:	40012300 	.word	0x40012300
 8008960:	0f000001 	.word	0x0f000001
 8008964:	08021cc4 	.word	0x08021cc4

08008968 <HAL_ADC_Init>:
	if (hadc == NULL) {
 8008968:	2800      	cmp	r0, #0
 800896a:	f000 80d9 	beq.w	8008b20 <HAL_ADC_Init+0x1b8>
{
 800896e:	b510      	push	{r4, lr}
 8008970:	4604      	mov	r4, r0
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8008972:	6802      	ldr	r2, [r0, #0]
 8008974:	4b6b      	ldr	r3, [pc, #428]	; (8008b24 <HAL_ADC_Init+0x1bc>)
 8008976:	429a      	cmp	r2, r3
 8008978:	d004      	beq.n	8008984 <HAL_ADC_Init+0x1c>
 800897a:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800897e:	486a      	ldr	r0, [pc, #424]	; (8008b28 <HAL_ADC_Init+0x1c0>)
 8008980:	f007 f8fa 	bl	800fb78 <assert_failed>
	assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8008984:	6863      	ldr	r3, [r4, #4]
 8008986:	b16b      	cbz	r3, 80089a4 <HAL_ADC_Init+0x3c>
 8008988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800898c:	d00a      	beq.n	80089a4 <HAL_ADC_Init+0x3c>
 800898e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008992:	d007      	beq.n	80089a4 <HAL_ADC_Init+0x3c>
 8008994:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008998:	d004      	beq.n	80089a4 <HAL_ADC_Init+0x3c>
 800899a:	f240 110b 	movw	r1, #267	; 0x10b
 800899e:	4862      	ldr	r0, [pc, #392]	; (8008b28 <HAL_ADC_Init+0x1c0>)
 80089a0:	f007 f8ea 	bl	800fb78 <assert_failed>
	assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80089a4:	68a3      	ldr	r3, [r4, #8]
 80089a6:	b16b      	cbz	r3, 80089c4 <HAL_ADC_Init+0x5c>
 80089a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089ac:	d00a      	beq.n	80089c4 <HAL_ADC_Init+0x5c>
 80089ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089b2:	d007      	beq.n	80089c4 <HAL_ADC_Init+0x5c>
 80089b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80089b8:	d004      	beq.n	80089c4 <HAL_ADC_Init+0x5c>
 80089ba:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80089be:	485a      	ldr	r0, [pc, #360]	; (8008b28 <HAL_ADC_Init+0x1c0>)
 80089c0:	f007 f8da 	bl	800fb78 <assert_failed>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80089c4:	6923      	ldr	r3, [r4, #16]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d904      	bls.n	80089d4 <HAL_ADC_Init+0x6c>
 80089ca:	f240 110d 	movw	r1, #269	; 0x10d
 80089ce:	4856      	ldr	r0, [pc, #344]	; (8008b28 <HAL_ADC_Init+0x1c0>)
 80089d0:	f007 f8d2 	bl	800fb78 <assert_failed>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80089d4:	69a3      	ldr	r3, [r4, #24]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d904      	bls.n	80089e4 <HAL_ADC_Init+0x7c>
 80089da:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80089de:	4852      	ldr	r0, [pc, #328]	; (8008b28 <HAL_ADC_Init+0x1c0>)
 80089e0:	f007 f8ca 	bl	800fb78 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80089e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80089e6:	b3a3      	cbz	r3, 8008a52 <HAL_ADC_Init+0xea>
 80089e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089ec:	d031      	beq.n	8008a52 <HAL_ADC_Init+0xea>
 80089ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089f2:	d02e      	beq.n	8008a52 <HAL_ADC_Init+0xea>
 80089f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80089f8:	d02b      	beq.n	8008a52 <HAL_ADC_Init+0xea>
 80089fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089fe:	d028      	beq.n	8008a52 <HAL_ADC_Init+0xea>
 8008a00:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008a04:	d025      	beq.n	8008a52 <HAL_ADC_Init+0xea>
 8008a06:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8008a0a:	d022      	beq.n	8008a52 <HAL_ADC_Init+0xea>
 8008a0c:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8008a10:	d01f      	beq.n	8008a52 <HAL_ADC_Init+0xea>
 8008a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a16:	d01c      	beq.n	8008a52 <HAL_ADC_Init+0xea>
 8008a18:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8008a1c:	d019      	beq.n	8008a52 <HAL_ADC_Init+0xea>
 8008a1e:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8008a22:	d016      	beq.n	8008a52 <HAL_ADC_Init+0xea>
 8008a24:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8008a28:	d013      	beq.n	8008a52 <HAL_ADC_Init+0xea>
 8008a2a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008a2e:	d010      	beq.n	8008a52 <HAL_ADC_Init+0xea>
 8008a30:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8008a34:	d00d      	beq.n	8008a52 <HAL_ADC_Init+0xea>
 8008a36:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8008a3a:	d00a      	beq.n	8008a52 <HAL_ADC_Init+0xea>
 8008a3c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008a40:	d007      	beq.n	8008a52 <HAL_ADC_Init+0xea>
 8008a42:	4a3a      	ldr	r2, [pc, #232]	; (8008b2c <HAL_ADC_Init+0x1c4>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d004      	beq.n	8008a52 <HAL_ADC_Init+0xea>
 8008a48:	f240 110f 	movw	r1, #271	; 0x10f
 8008a4c:	4836      	ldr	r0, [pc, #216]	; (8008b28 <HAL_ADC_Init+0x1c0>)
 8008a4e:	f007 f893 	bl	800fb78 <assert_failed>
	assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8008a52:	68e3      	ldr	r3, [r4, #12]
 8008a54:	b13b      	cbz	r3, 8008a66 <HAL_ADC_Init+0xfe>
 8008a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a5a:	d004      	beq.n	8008a66 <HAL_ADC_Init+0xfe>
 8008a5c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8008a60:	4831      	ldr	r0, [pc, #196]	; (8008b28 <HAL_ADC_Init+0x1c0>)
 8008a62:	f007 f889 	bl	800fb78 <assert_failed>
	assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8008a66:	69e3      	ldr	r3, [r4, #28]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	2b0f      	cmp	r3, #15
 8008a6c:	d831      	bhi.n	8008ad2 <HAL_ADC_Init+0x16a>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8008a6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d904      	bls.n	8008a7e <HAL_ADC_Init+0x116>
 8008a74:	f44f 7189 	mov.w	r1, #274	; 0x112
 8008a78:	482b      	ldr	r0, [pc, #172]	; (8008b28 <HAL_ADC_Init+0x1c0>)
 8008a7a:	f007 f87d 	bl	800fb78 <assert_failed>
	assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8008a7e:	6963      	ldr	r3, [r4, #20]
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d82c      	bhi.n	8008ade <HAL_ADC_Init+0x176>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8008a84:	6a23      	ldr	r3, [r4, #32]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d904      	bls.n	8008a94 <HAL_ADC_Init+0x12c>
 8008a8a:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008a8e:	4826      	ldr	r0, [pc, #152]	; (8008b28 <HAL_ADC_Init+0x1c0>)
 8008a90:	f007 f872 	bl	800fb78 <assert_failed>
	if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 8008a94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008a96:	4b25      	ldr	r3, [pc, #148]	; (8008b2c <HAL_ADC_Init+0x1c4>)
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d00f      	beq.n	8008abc <HAL_ADC_Init+0x154>
		assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8008a9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a9e:	b16b      	cbz	r3, 8008abc <HAL_ADC_Init+0x154>
 8008aa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008aa4:	d00a      	beq.n	8008abc <HAL_ADC_Init+0x154>
 8008aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aaa:	d007      	beq.n	8008abc <HAL_ADC_Init+0x154>
 8008aac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ab0:	d004      	beq.n	8008abc <HAL_ADC_Init+0x154>
 8008ab2:	f240 1117 	movw	r1, #279	; 0x117
 8008ab6:	481c      	ldr	r0, [pc, #112]	; (8008b28 <HAL_ADC_Init+0x1c0>)
 8008ab8:	f007 f85e 	bl	800fb78 <assert_failed>
	if (hadc->State == HAL_ADC_STATE_RESET) {
 8008abc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008abe:	b1a3      	cbz	r3, 8008aea <HAL_ADC_Init+0x182>
	if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 8008ac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ac2:	f013 0f10 	tst.w	r3, #16
 8008ac6:	d017      	beq.n	8008af8 <HAL_ADC_Init+0x190>
		tmp_hal_status = HAL_ERROR;
 8008ac8:	2001      	movs	r0, #1
	__HAL_UNLOCK(hadc);
 8008aca:	2300      	movs	r3, #0
 8008acc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	return tmp_hal_status;
 8008ad0:	bd10      	pop	{r4, pc}
	assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8008ad2:	f240 1111 	movw	r1, #273	; 0x111
 8008ad6:	4814      	ldr	r0, [pc, #80]	; (8008b28 <HAL_ADC_Init+0x1c0>)
 8008ad8:	f007 f84e 	bl	800fb78 <assert_failed>
 8008adc:	e7c7      	b.n	8008a6e <HAL_ADC_Init+0x106>
	assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8008ade:	f240 1113 	movw	r1, #275	; 0x113
 8008ae2:	4811      	ldr	r0, [pc, #68]	; (8008b28 <HAL_ADC_Init+0x1c0>)
 8008ae4:	f007 f848 	bl	800fb78 <assert_failed>
 8008ae8:	e7cc      	b.n	8008a84 <HAL_ADC_Init+0x11c>
		ADC_CLEAR_ERRORCODE(hadc);
 8008aea:	6463      	str	r3, [r4, #68]	; 0x44
		hadc->Lock = HAL_UNLOCKED;
 8008aec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		HAL_ADC_MspInit(hadc);
 8008af0:	4620      	mov	r0, r4
 8008af2:	f005 fd8f 	bl	800e614 <HAL_ADC_MspInit>
 8008af6:	e7e3      	b.n	8008ac0 <HAL_ADC_Init+0x158>
		ADC_STATE_CLR_SET(hadc->State,
 8008af8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008afa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008afe:	f023 0302 	bic.w	r3, r3, #2
 8008b02:	f043 0302 	orr.w	r3, r3, #2
 8008b06:	6423      	str	r3, [r4, #64]	; 0x40
		ADC_Init(hadc);
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f7ff fe87 	bl	800881c <ADC_Init>
		ADC_CLEAR_ERRORCODE(hadc);
 8008b0e:	2000      	movs	r0, #0
 8008b10:	6460      	str	r0, [r4, #68]	; 0x44
		ADC_STATE_CLR_SET(hadc->State,
 8008b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b14:	f023 0303 	bic.w	r3, r3, #3
 8008b18:	f043 0301 	orr.w	r3, r3, #1
 8008b1c:	6423      	str	r3, [r4, #64]	; 0x40
 8008b1e:	e7d4      	b.n	8008aca <HAL_ADC_Init+0x162>
		return HAL_ERROR;
 8008b20:	2001      	movs	r0, #1
 8008b22:	4770      	bx	lr
 8008b24:	40012000 	.word	0x40012000
 8008b28:	08021cc4 	.word	0x08021cc4
 8008b2c:	0f000001 	.word	0x0f000001

08008b30 <HAL_ADC_ConvCpltCallback>:
{
 8008b30:	4770      	bx	lr

08008b32 <HAL_ADC_LevelOutOfWindowCallback>:
{
 8008b32:	4770      	bx	lr

08008b34 <HAL_ADC_ErrorCallback>:
{
 8008b34:	4770      	bx	lr
	...

08008b38 <HAL_ADC_IRQHandler>:
{
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	4604      	mov	r4, r0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8008b3c:	6983      	ldr	r3, [r0, #24]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d904      	bls.n	8008b4c <HAL_ADC_IRQHandler+0x14>
 8008b42:	f240 3146 	movw	r1, #838	; 0x346
 8008b46:	485e      	ldr	r0, [pc, #376]	; (8008cc0 <HAL_ADC_IRQHandler+0x188>)
 8008b48:	f007 f816 	bl	800fb78 <assert_failed>
	assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8008b4c:	69e3      	ldr	r3, [r4, #28]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	2b0f      	cmp	r3, #15
 8008b52:	f200 8090 	bhi.w	8008c76 <HAL_ADC_IRQHandler+0x13e>
	assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8008b56:	6963      	ldr	r3, [r4, #20]
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	f200 8092 	bhi.w	8008c82 <HAL_ADC_IRQHandler+0x14a>
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8008b5e:	6822      	ldr	r2, [r4, #0]
 8008b60:	6811      	ldr	r1, [r2, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8008b62:	6853      	ldr	r3, [r2, #4]
 8008b64:	f003 0320 	and.w	r3, r3, #32
	if (tmp1 && tmp2) {
 8008b68:	f011 0f02 	tst.w	r1, #2
 8008b6c:	d02d      	beq.n	8008bca <HAL_ADC_IRQHandler+0x92>
 8008b6e:	b363      	cbz	r3, 8008bca <HAL_ADC_IRQHandler+0x92>
		if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 8008b70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b72:	f013 0f10 	tst.w	r3, #16
 8008b76:	d103      	bne.n	8008b80 <HAL_ADC_IRQHandler+0x48>
			SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008b78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b7e:	6423      	str	r3, [r4, #64]	; 0x40
		if (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8008b80:	6893      	ldr	r3, [r2, #8]
 8008b82:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8008b86:	d119      	bne.n	8008bbc <HAL_ADC_IRQHandler+0x84>
		    (hadc->Init.ContinuousConvMode == DISABLE) &&
 8008b88:	69a3      	ldr	r3, [r4, #24]
		if (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8008b8a:	b9bb      	cbnz	r3, 8008bbc <HAL_ADC_IRQHandler+0x84>
		    (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008b8c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		    (hadc->Init.ContinuousConvMode == DISABLE) &&
 8008b8e:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8008b92:	d003      	beq.n	8008b9c <HAL_ADC_IRQHandler+0x64>
		     HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS))) {
 8008b94:	6893      	ldr	r3, [r2, #8]
		    (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008b96:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008b9a:	d10f      	bne.n	8008bbc <HAL_ADC_IRQHandler+0x84>
			__HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008b9c:	6853      	ldr	r3, [r2, #4]
 8008b9e:	f023 0320 	bic.w	r3, r3, #32
 8008ba2:	6053      	str	r3, [r2, #4]
			CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008ba4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ba6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008baa:	6423      	str	r3, [r4, #64]	; 0x40
			if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 8008bac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bae:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8008bb2:	d103      	bne.n	8008bbc <HAL_ADC_IRQHandler+0x84>
				SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008bb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bb6:	f043 0301 	orr.w	r3, r3, #1
 8008bba:	6423      	str	r3, [r4, #64]	; 0x40
		HAL_ADC_ConvCpltCallback(hadc);
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f7ff ffb7 	bl	8008b30 <HAL_ADC_ConvCpltCallback>
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	f06f 0212 	mvn.w	r2, #18
 8008bc8:	601a      	str	r2, [r3, #0]
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	f002 0280 	and.w	r2, r2, #128	; 0x80
	if (tmp1 && tmp2) {
 8008bd4:	f011 0f04 	tst.w	r1, #4
 8008bd8:	d036      	beq.n	8008c48 <HAL_ADC_IRQHandler+0x110>
 8008bda:	2a00      	cmp	r2, #0
 8008bdc:	d034      	beq.n	8008c48 <HAL_ADC_IRQHandler+0x110>
		if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 8008bde:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008be0:	f012 0f10 	tst.w	r2, #16
 8008be4:	d103      	bne.n	8008bee <HAL_ADC_IRQHandler+0xb6>
			SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008be6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bec:	6422      	str	r2, [r4, #64]	; 0x40
		if (ADC_IS_SOFTWARE_START_INJECTED(hadc) &&
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8008bf4:	d121      	bne.n	8008c3a <HAL_ADC_IRQHandler+0x102>
		    (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8008bf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if (ADC_IS_SOFTWARE_START_INJECTED(hadc) &&
 8008bf8:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8008bfc:	d003      	beq.n	8008c06 <HAL_ADC_IRQHandler+0xce>
		     HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008bfe:	689a      	ldr	r2, [r3, #8]
		    (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8008c00:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8008c04:	d119      	bne.n	8008c3a <HAL_ADC_IRQHandler+0x102>
		    (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008c06:	685a      	ldr	r2, [r3, #4]
		     HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008c08:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8008c0c:	d115      	bne.n	8008c3a <HAL_ADC_IRQHandler+0x102>
		     (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8008c0e:	689a      	ldr	r2, [r3, #8]
		    (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008c10:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8008c14:	d111      	bne.n	8008c3a <HAL_ADC_IRQHandler+0x102>
		      (hadc->Init.ContinuousConvMode == DISABLE)))) {
 8008c16:	69a2      	ldr	r2, [r4, #24]
		     (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8008c18:	b97a      	cbnz	r2, 8008c3a <HAL_ADC_IRQHandler+0x102>
			__HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c20:	605a      	str	r2, [r3, #4]
			CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8008c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c28:	6423      	str	r3, [r4, #64]	; 0x40
			if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY)) {
 8008c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c2c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008c30:	d103      	bne.n	8008c3a <HAL_ADC_IRQHandler+0x102>
				SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008c32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c34:	f043 0301 	orr.w	r3, r3, #1
 8008c38:	6423      	str	r3, [r4, #64]	; 0x40
		HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 f928 	bl	8008e90 <HAL_ADCEx_InjectedConvCpltCallback>
		__HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	f06f 020c 	mvn.w	r2, #12
 8008c46:	601a      	str	r2, [r3, #0]
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8008c48:	6822      	ldr	r2, [r4, #0]
 8008c4a:	6811      	ldr	r1, [r2, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);
 8008c4c:	6853      	ldr	r3, [r2, #4]
 8008c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
	if (tmp1 && tmp2) {
 8008c52:	f011 0f01 	tst.w	r1, #1
 8008c56:	d004      	beq.n	8008c62 <HAL_ADC_IRQHandler+0x12a>
 8008c58:	b11b      	cbz	r3, 8008c62 <HAL_ADC_IRQHandler+0x12a>
		if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD)) {
 8008c5a:	6813      	ldr	r3, [r2, #0]
 8008c5c:	f013 0f01 	tst.w	r3, #1
 8008c60:	d115      	bne.n	8008c8e <HAL_ADC_IRQHandler+0x156>
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8008c62:	6822      	ldr	r2, [r4, #0]
 8008c64:	6811      	ldr	r1, [r2, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8008c66:	6853      	ldr	r3, [r2, #4]
 8008c68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
	if (tmp1 && tmp2) {
 8008c6c:	f011 0f20 	tst.w	r1, #32
 8008c70:	d000      	beq.n	8008c74 <HAL_ADC_IRQHandler+0x13c>
 8008c72:	b9c3      	cbnz	r3, 8008ca6 <HAL_ADC_IRQHandler+0x16e>
 8008c74:	bd38      	pop	{r3, r4, r5, pc}
	assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8008c76:	f240 3147 	movw	r1, #839	; 0x347
 8008c7a:	4811      	ldr	r0, [pc, #68]	; (8008cc0 <HAL_ADC_IRQHandler+0x188>)
 8008c7c:	f006 ff7c 	bl	800fb78 <assert_failed>
 8008c80:	e769      	b.n	8008b56 <HAL_ADC_IRQHandler+0x1e>
	assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8008c82:	f44f 7152 	mov.w	r1, #840	; 0x348
 8008c86:	480e      	ldr	r0, [pc, #56]	; (8008cc0 <HAL_ADC_IRQHandler+0x188>)
 8008c88:	f006 ff76 	bl	800fb78 <assert_failed>
 8008c8c:	e767      	b.n	8008b5e <HAL_ADC_IRQHandler+0x26>
			SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008c8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c94:	6423      	str	r3, [r4, #64]	; 0x40
			HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008c96:	4620      	mov	r0, r4
 8008c98:	f7ff ff4b 	bl	8008b32 <HAL_ADC_LevelOutOfWindowCallback>
			__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	f06f 0201 	mvn.w	r2, #1
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	e7dd      	b.n	8008c62 <HAL_ADC_IRQHandler+0x12a>
		SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008ca6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008ca8:	f043 0302 	orr.w	r3, r3, #2
 8008cac:	6463      	str	r3, [r4, #68]	; 0x44
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008cae:	f06f 0520 	mvn.w	r5, #32
 8008cb2:	6015      	str	r5, [r2, #0]
		HAL_ADC_ErrorCallback(hadc);
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f7ff ff3d 	bl	8008b34 <HAL_ADC_ErrorCallback>
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	601d      	str	r5, [r3, #0]
}
 8008cbe:	e7d9      	b.n	8008c74 <HAL_ADC_IRQHandler+0x13c>
 8008cc0:	08021cc4 	.word	0x08021cc4

08008cc4 <HAL_ADC_ConfigChannel>:
{
 8008cc4:	b530      	push	{r4, r5, lr}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	4605      	mov	r5, r0
 8008cca:	460c      	mov	r4, r1
	__IO uint32_t counter = 0U;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	9301      	str	r3, [sp, #4]
	assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8008cd0:	680b      	ldr	r3, [r1, #0]
 8008cd2:	2b12      	cmp	r3, #18
 8008cd4:	d84e      	bhi.n	8008d74 <HAL_ADC_ConfigChannel+0xb0>
	assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8008cd6:	6863      	ldr	r3, [r4, #4]
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	2b0f      	cmp	r3, #15
 8008cdc:	d850      	bhi.n	8008d80 <HAL_ADC_ConfigChannel+0xbc>
	assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8008cde:	68a3      	ldr	r3, [r4, #8]
 8008ce0:	2b07      	cmp	r3, #7
 8008ce2:	d853      	bhi.n	8008d8c <HAL_ADC_ConfigChannel+0xc8>
	__HAL_LOCK(hadc);
 8008ce4:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	f000 80c7 	beq.w	8008e7c <HAL_ADC_ConfigChannel+0x1b8>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9) {
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	2b09      	cmp	r3, #9
 8008cf8:	d94e      	bls.n	8008d98 <HAL_ADC_ConfigChannel+0xd4>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008cfa:	6828      	ldr	r0, [r5, #0]
 8008cfc:	68c2      	ldr	r2, [r0, #12]
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008d04:	3b1e      	subs	r3, #30
 8008d06:	2107      	movs	r1, #7
 8008d08:	fa01 f303 	lsl.w	r3, r1, r3
 8008d0c:	ea22 0303 	bic.w	r3, r2, r3
 8008d10:	60c3      	str	r3, [r0, #12]
		hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008d12:	6828      	ldr	r0, [r5, #0]
 8008d14:	68c2      	ldr	r2, [r0, #12]
 8008d16:	68a1      	ldr	r1, [r4, #8]
 8008d18:	8823      	ldrh	r3, [r4, #0]
 8008d1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008d1e:	3b1e      	subs	r3, #30
 8008d20:	fa01 f303 	lsl.w	r3, r1, r3
 8008d24:	4313      	orrs	r3, r2
 8008d26:	60c3      	str	r3, [r0, #12]
	if (sConfig->Rank < 7U) {
 8008d28:	6863      	ldr	r3, [r4, #4]
 8008d2a:	2b06      	cmp	r3, #6
 8008d2c:	d84a      	bhi.n	8008dc4 <HAL_ADC_ConfigChannel+0x100>
		hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008d2e:	6828      	ldr	r0, [r5, #0]
 8008d30:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008d32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008d36:	3b05      	subs	r3, #5
 8008d38:	211f      	movs	r1, #31
 8008d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d3e:	ea22 0303 	bic.w	r3, r2, r3
 8008d42:	6343      	str	r3, [r0, #52]	; 0x34
		hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008d44:	6828      	ldr	r0, [r5, #0]
 8008d46:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008d48:	6863      	ldr	r3, [r4, #4]
 8008d4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008d4e:	3b05      	subs	r3, #5
 8008d50:	8821      	ldrh	r1, [r4, #0]
 8008d52:	fa01 f303 	lsl.w	r3, r1, r3
 8008d56:	4313      	orrs	r3, r2
 8008d58:	6343      	str	r3, [r0, #52]	; 0x34
	if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT)) {
 8008d5a:	682a      	ldr	r2, [r5, #0]
 8008d5c:	4b48      	ldr	r3, [pc, #288]	; (8008e80 <HAL_ADC_ConfigChannel+0x1bc>)
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d060      	beq.n	8008e24 <HAL_ADC_ConfigChannel+0x160>
	if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT))) {
 8008d62:	682a      	ldr	r2, [r5, #0]
 8008d64:	4b46      	ldr	r3, [pc, #280]	; (8008e80 <HAL_ADC_ConfigChannel+0x1bc>)
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d065      	beq.n	8008e36 <HAL_ADC_ConfigChannel+0x172>
	__HAL_UNLOCK(hadc);
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 8008d70:	b003      	add	sp, #12
 8008d72:	bd30      	pop	{r4, r5, pc}
	assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8008d74:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 8008d78:	4842      	ldr	r0, [pc, #264]	; (8008e84 <HAL_ADC_ConfigChannel+0x1c0>)
 8008d7a:	f006 fefd 	bl	800fb78 <assert_failed>
 8008d7e:	e7aa      	b.n	8008cd6 <HAL_ADC_ConfigChannel+0x12>
	assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8008d80:	f240 41d1 	movw	r1, #1233	; 0x4d1
 8008d84:	483f      	ldr	r0, [pc, #252]	; (8008e84 <HAL_ADC_ConfigChannel+0x1c0>)
 8008d86:	f006 fef7 	bl	800fb78 <assert_failed>
 8008d8a:	e7a8      	b.n	8008cde <HAL_ADC_ConfigChannel+0x1a>
	assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8008d8c:	f240 41d2 	movw	r1, #1234	; 0x4d2
 8008d90:	483c      	ldr	r0, [pc, #240]	; (8008e84 <HAL_ADC_ConfigChannel+0x1c0>)
 8008d92:	f006 fef1 	bl	800fb78 <assert_failed>
 8008d96:	e7a5      	b.n	8008ce4 <HAL_ADC_ConfigChannel+0x20>
		hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008d98:	6828      	ldr	r0, [r5, #0]
 8008d9a:	6902      	ldr	r2, [r0, #16]
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008da2:	2107      	movs	r1, #7
 8008da4:	fa01 f303 	lsl.w	r3, r1, r3
 8008da8:	ea22 0303 	bic.w	r3, r2, r3
 8008dac:	6103      	str	r3, [r0, #16]
		hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008dae:	6828      	ldr	r0, [r5, #0]
 8008db0:	6902      	ldr	r2, [r0, #16]
 8008db2:	68a1      	ldr	r1, [r4, #8]
 8008db4:	8823      	ldrh	r3, [r4, #0]
 8008db6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008dba:	fa01 f303 	lsl.w	r3, r1, r3
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	6103      	str	r3, [r0, #16]
 8008dc2:	e7b1      	b.n	8008d28 <HAL_ADC_ConfigChannel+0x64>
	else if (sConfig->Rank < 13U) {
 8008dc4:	2b0c      	cmp	r3, #12
 8008dc6:	d816      	bhi.n	8008df6 <HAL_ADC_ConfigChannel+0x132>
		hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008dc8:	6828      	ldr	r0, [r5, #0]
 8008dca:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8008dcc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008dd0:	3b23      	subs	r3, #35	; 0x23
 8008dd2:	211f      	movs	r1, #31
 8008dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd8:	ea22 0303 	bic.w	r3, r2, r3
 8008ddc:	6303      	str	r3, [r0, #48]	; 0x30
		hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008dde:	6828      	ldr	r0, [r5, #0]
 8008de0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8008de2:	6863      	ldr	r3, [r4, #4]
 8008de4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008de8:	3b23      	subs	r3, #35	; 0x23
 8008dea:	8821      	ldrh	r1, [r4, #0]
 8008dec:	fa01 f303 	lsl.w	r3, r1, r3
 8008df0:	4313      	orrs	r3, r2
 8008df2:	6303      	str	r3, [r0, #48]	; 0x30
 8008df4:	e7b1      	b.n	8008d5a <HAL_ADC_ConfigChannel+0x96>
		hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008df6:	6828      	ldr	r0, [r5, #0]
 8008df8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008dfa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008dfe:	3b41      	subs	r3, #65	; 0x41
 8008e00:	211f      	movs	r1, #31
 8008e02:	fa01 f303 	lsl.w	r3, r1, r3
 8008e06:	ea22 0303 	bic.w	r3, r2, r3
 8008e0a:	62c3      	str	r3, [r0, #44]	; 0x2c
		hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008e0c:	6828      	ldr	r0, [r5, #0]
 8008e0e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008e10:	6863      	ldr	r3, [r4, #4]
 8008e12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008e16:	3b41      	subs	r3, #65	; 0x41
 8008e18:	8821      	ldrh	r1, [r4, #0]
 8008e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	62c3      	str	r3, [r0, #44]	; 0x2c
 8008e22:	e79a      	b.n	8008d5a <HAL_ADC_ConfigChannel+0x96>
	if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT)) {
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	2b12      	cmp	r3, #18
 8008e28:	d19b      	bne.n	8008d62 <HAL_ADC_ConfigChannel+0x9e>
		tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008e2a:	4a17      	ldr	r2, [pc, #92]	; (8008e88 <HAL_ADC_ConfigChannel+0x1c4>)
 8008e2c:	6853      	ldr	r3, [r2, #4]
 8008e2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e32:	6053      	str	r3, [r2, #4]
 8008e34:	e795      	b.n	8008d62 <HAL_ADC_ConfigChannel+0x9e>
	if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT))) {
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	3b10      	subs	r3, #16
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d895      	bhi.n	8008d6a <HAL_ADC_ConfigChannel+0xa6>
		tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008e3e:	4a12      	ldr	r2, [pc, #72]	; (8008e88 <HAL_ADC_ConfigChannel+0x1c4>)
 8008e40:	6853      	ldr	r3, [r2, #4]
 8008e42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e46:	6053      	str	r3, [r2, #4]
		if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)) {
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	2b10      	cmp	r3, #16
 8008e4c:	d18d      	bne.n	8008d6a <HAL_ADC_ConfigChannel+0xa6>
			counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008e4e:	4b0f      	ldr	r3, [pc, #60]	; (8008e8c <HAL_ADC_ConfigChannel+0x1c8>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8008e56:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8008e5a:	f202 3283 	addw	r2, r2, #899	; 0x383
 8008e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e62:	0c9b      	lsrs	r3, r3, #18
 8008e64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008e68:	005a      	lsls	r2, r3, #1
 8008e6a:	9201      	str	r2, [sp, #4]
			while (counter != 0U) {
 8008e6c:	e002      	b.n	8008e74 <HAL_ADC_ConfigChannel+0x1b0>
				counter--;
 8008e6e:	9b01      	ldr	r3, [sp, #4]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	9301      	str	r3, [sp, #4]
			while (counter != 0U) {
 8008e74:	9b01      	ldr	r3, [sp, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d1f9      	bne.n	8008e6e <HAL_ADC_ConfigChannel+0x1aa>
 8008e7a:	e776      	b.n	8008d6a <HAL_ADC_ConfigChannel+0xa6>
	__HAL_LOCK(hadc);
 8008e7c:	2002      	movs	r0, #2
 8008e7e:	e777      	b.n	8008d70 <HAL_ADC_ConfigChannel+0xac>
 8008e80:	40012000 	.word	0x40012000
 8008e84:	08021cc4 	.word	0x08021cc4
 8008e88:	40012300 	.word	0x40012300
 8008e8c:	200014a0 	.word	0x200014a0

08008e90 <HAL_ADCEx_InjectedConvCpltCallback>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval None
 */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008e90:	4770      	bx	lr
	...

08008e94 <HAL_NVIC_SetPriorityGrouping>:
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
 *         The pending IRQ priority will be managed only by the subpriority.
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e94:	b510      	push	{r4, lr}
 8008e96:	4604      	mov	r4, r0
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8008e98:	1ec3      	subs	r3, r0, #3
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	d80f      	bhi.n	8008ebe <HAL_NVIC_SetPriorityGrouping+0x2a>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
	uint32_t reg_value;
	uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);       /* only values 0..7 are used          */

	reg_value = SCB->AIRCR;                                               /* read old register configuration    */
 8008e9e:	4a0a      	ldr	r2, [pc, #40]	; (8008ec8 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8008ea0:	68d3      	ldr	r3, [r2, #12]
	reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008ea2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008ea6:	041b      	lsls	r3, r3, #16
 8008ea8:	0c1b      	lsrs	r3, r3, #16
	reg_value = (reg_value |
		     ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
		     (PriorityGroupTmp << 8U));                               /* Insert write key and priorty group */
 8008eaa:	0224      	lsls	r4, r4, #8
 8008eac:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
		     ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008eb0:	4323      	orrs	r3, r4
	reg_value = (reg_value |
 8008eb2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = reg_value;
 8008eba:	60d3      	str	r3, [r2, #12]
 8008ebc:	bd10      	pop	{r4, pc}
 8008ebe:	21a2      	movs	r1, #162	; 0xa2
 8008ec0:	4802      	ldr	r0, [pc, #8]	; (8008ecc <HAL_NVIC_SetPriorityGrouping+0x38>)
 8008ec2:	f006 fe59 	bl	800fb78 <assert_failed>
 8008ec6:	e7ea      	b.n	8008e9e <HAL_NVIC_SetPriorityGrouping+0xa>
 8008ec8:	e000ed00 	.word	0xe000ed00
 8008ecc:	08021cfc 	.word	0x08021cfc

08008ed0 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ed0:	b570      	push	{r4, r5, r6, lr}
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	4616      	mov	r6, r2
	uint32_t prioritygroup = 0x00U;

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8008ed8:	2a0f      	cmp	r2, #15
 8008eda:	d824      	bhi.n	8008f26 <HAL_NVIC_SetPriority+0x56>
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8008edc:	2c0f      	cmp	r4, #15
 8008ede:	d827      	bhi.n	8008f30 <HAL_NVIC_SetPriority+0x60>
   \details Reads the priority grouping field from the NVIC Interrupt Controller.
   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
	return((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ee0:	4b1a      	ldr	r3, [pc, #104]	; (8008f4c <HAL_NVIC_SetPriority+0x7c>)
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
	uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used          */
	uint32_t PreemptPriorityBits;
	uint32_t SubPriorityBits;

	PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ee8:	f1c3 0207 	rsb	r2, r3, #7
 8008eec:	2a04      	cmp	r2, #4
 8008eee:	bf28      	it	cs
 8008ef0:	2204      	movcs	r2, #4
	SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ef2:	1d19      	adds	r1, r3, #4
 8008ef4:	2906      	cmp	r1, #6
 8008ef6:	d920      	bls.n	8008f3a <HAL_NVIC_SetPriority+0x6a>
 8008ef8:	3b03      	subs	r3, #3

	return(
		((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008efa:	2101      	movs	r1, #1
 8008efc:	fa01 f202 	lsl.w	r2, r1, r2
 8008f00:	3a01      	subs	r2, #1
 8008f02:	4014      	ands	r4, r2
 8008f04:	409c      	lsls	r4, r3
		((SubPriority & (uint32_t)((1UL << (SubPriorityBits)) - 1UL)))
 8008f06:	fa01 f303 	lsl.w	r3, r1, r3
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	4033      	ands	r3, r6
		((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f0e:	431c      	orrs	r4, r3
	if ((int32_t)(IRQn) < 0) {
 8008f10:	2d00      	cmp	r5, #0
 8008f12:	db14      	blt.n	8008f3e <HAL_NVIC_SetPriority+0x6e>
		NVIC->IP[((uint32_t)(int32_t)IRQn)] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f14:	0124      	lsls	r4, r4, #4
 8008f16:	b2e4      	uxtb	r4, r4
 8008f18:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8008f1c:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8008f20:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
 8008f24:	bd70      	pop	{r4, r5, r6, pc}
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8008f26:	21ba      	movs	r1, #186	; 0xba
 8008f28:	4809      	ldr	r0, [pc, #36]	; (8008f50 <HAL_NVIC_SetPriority+0x80>)
 8008f2a:	f006 fe25 	bl	800fb78 <assert_failed>
 8008f2e:	e7d5      	b.n	8008edc <HAL_NVIC_SetPriority+0xc>
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8008f30:	21bb      	movs	r1, #187	; 0xbb
 8008f32:	4807      	ldr	r0, [pc, #28]	; (8008f50 <HAL_NVIC_SetPriority+0x80>)
 8008f34:	f006 fe20 	bl	800fb78 <assert_failed>
 8008f38:	e7d2      	b.n	8008ee0 <HAL_NVIC_SetPriority+0x10>
	SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	e7dd      	b.n	8008efa <HAL_NVIC_SetPriority+0x2a>
		SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f3e:	f005 050f 	and.w	r5, r5, #15
 8008f42:	0124      	lsls	r4, r4, #4
 8008f44:	b2e4      	uxtb	r4, r4
 8008f46:	4b03      	ldr	r3, [pc, #12]	; (8008f54 <HAL_NVIC_SetPriority+0x84>)
 8008f48:	555c      	strb	r4, [r3, r5]
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}
 8008f4c:	e000ed00 	.word	0xe000ed00
 8008f50:	08021cfc 	.word	0x08021cfc
 8008f54:	e000ed14 	.word	0xe000ed14

08008f58 <HAL_NVIC_EnableIRQ>:
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f58:	b510      	push	{r4, lr}
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008f5a:	1e04      	subs	r4, r0, #0
 8008f5c:	db09      	blt.n	8008f72 <HAL_NVIC_EnableIRQ+0x1a>
	NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8008f5e:	0962      	lsrs	r2, r4, #5
 8008f60:	f004 041f 	and.w	r4, r4, #31
 8008f64:	2301      	movs	r3, #1
 8008f66:	fa03 f404 	lsl.w	r4, r3, r4
 8008f6a:	4b04      	ldr	r3, [pc, #16]	; (8008f7c <HAL_NVIC_EnableIRQ+0x24>)
 8008f6c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f70:	bd10      	pop	{r4, pc}
 8008f72:	21ce      	movs	r1, #206	; 0xce
 8008f74:	4802      	ldr	r0, [pc, #8]	; (8008f80 <HAL_NVIC_EnableIRQ+0x28>)
 8008f76:	f006 fdff 	bl	800fb78 <assert_failed>
 8008f7a:	e7f0      	b.n	8008f5e <HAL_NVIC_EnableIRQ+0x6>
 8008f7c:	e000e100 	.word	0xe000e100
 8008f80:	08021cfc 	.word	0x08021cfc

08008f84 <HAL_NVIC_DisableIRQ>:
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008f84:	b510      	push	{r4, lr}
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008f86:	1e04      	subs	r4, r0, #0
 8008f88:	db0a      	blt.n	8008fa0 <HAL_NVIC_DisableIRQ+0x1c>
	NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8008f8a:	0963      	lsrs	r3, r4, #5
 8008f8c:	f004 041f 	and.w	r4, r4, #31
 8008f90:	2201      	movs	r2, #1
 8008f92:	fa02 f404 	lsl.w	r4, r2, r4
 8008f96:	3320      	adds	r3, #32
 8008f98:	4a04      	ldr	r2, [pc, #16]	; (8008fac <HAL_NVIC_DisableIRQ+0x28>)
 8008f9a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8008f9e:	bd10      	pop	{r4, pc}
 8008fa0:	21de      	movs	r1, #222	; 0xde
 8008fa2:	4803      	ldr	r0, [pc, #12]	; (8008fb0 <HAL_NVIC_DisableIRQ+0x2c>)
 8008fa4:	f006 fde8 	bl	800fb78 <assert_failed>
 8008fa8:	e7ef      	b.n	8008f8a <HAL_NVIC_DisableIRQ+0x6>
 8008faa:	bf00      	nop
 8008fac:	e000e100 	.word	0xe000e100
 8008fb0:	08021cfc 	.word	0x08021cfc

08008fb4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
	if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) {
 8008fb4:	3801      	subs	r0, #1
 8008fb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008fba:	d20a      	bcs.n	8008fd2 <HAL_SYSTICK_Config+0x1e>
		return(1UL);                                        /* Reload value impossible */
	}

	SysTick->LOAD = (uint32_t)(ticks - 1UL);                    /* set reload register */
 8008fbc:	4b06      	ldr	r3, [pc, #24]	; (8008fd8 <HAL_SYSTICK_Config+0x24>)
 8008fbe:	6058      	str	r0, [r3, #4]
		SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fc0:	21f0      	movs	r1, #240	; 0xf0
 8008fc2:	4a06      	ldr	r2, [pc, #24]	; (8008fdc <HAL_SYSTICK_Config+0x28>)
 8008fc4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
	NVIC_SetPriority(SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
	SysTick->VAL = 0UL;                                         /* Load the SysTick Counter Value */
 8008fc8:	2000      	movs	r0, #0
 8008fca:	6098      	str	r0, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8008fcc:	2207      	movs	r2, #7
 8008fce:	601a      	str	r2, [r3, #0]
 8008fd0:	4770      	bx	lr
		return(1UL);                                        /* Reload value impossible */
 8008fd2:	2001      	movs	r0, #1
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
	return SysTick_Config(TicksNumb);
}
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	e000e010 	.word	0xe000e010
 8008fdc:	e000ed00 	.word	0xe000ed00

08008fe0 <HAL_NVIC_ClearPendingIRQ>:
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008fe0:	b510      	push	{r4, lr}
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008fe2:	1e04      	subs	r4, r0, #0
 8008fe4:	db0a      	blt.n	8008ffc <HAL_NVIC_ClearPendingIRQ+0x1c>
	NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8008fe6:	0963      	lsrs	r3, r4, #5
 8008fe8:	f004 041f 	and.w	r4, r4, #31
 8008fec:	2201      	movs	r2, #1
 8008fee:	fa02 f404 	lsl.w	r4, r2, r4
 8008ff2:	3360      	adds	r3, #96	; 0x60
 8008ff4:	4a04      	ldr	r2, [pc, #16]	; (8009008 <HAL_NVIC_ClearPendingIRQ+0x28>)
 8008ff6:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8008ffa:	bd10      	pop	{r4, pc}
 8008ffc:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8009000:	4802      	ldr	r0, [pc, #8]	; (800900c <HAL_NVIC_ClearPendingIRQ+0x2c>)
 8009002:	f006 fdb9 	bl	800fb78 <assert_failed>
 8009006:	e7ee      	b.n	8008fe6 <HAL_NVIC_ClearPendingIRQ+0x6>
 8009008:	e000e100 	.word	0xe000e100
 800900c:	08021cfc 	.word	0x08021cfc

08009010 <DMA_SetConfig>:
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009010:	b430      	push	{r4, r5}
	/* Clear DBM bit */
	hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009012:	6805      	ldr	r5, [r0, #0]
 8009014:	682c      	ldr	r4, [r5, #0]
 8009016:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800901a:	602c      	str	r4, [r5, #0]

	/* Configure DMA Stream data length */
	hdma->Instance->NDTR = DataLength;
 800901c:	6804      	ldr	r4, [r0, #0]
 800901e:	6063      	str	r3, [r4, #4]

	/* Memory to Peripheral */
	if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH) {
 8009020:	6883      	ldr	r3, [r0, #8]
 8009022:	2b40      	cmp	r3, #64	; 0x40
 8009024:	d005      	beq.n	8009032 <DMA_SetConfig+0x22>
		hdma->Instance->M0AR = SrcAddress;
	}
	/* Peripheral to Memory */
	else{
		/* Configure DMA Stream source address */
		hdma->Instance->PAR = SrcAddress;
 8009026:	6803      	ldr	r3, [r0, #0]
 8009028:	6099      	str	r1, [r3, #8]

		/* Configure DMA Stream destination address */
		hdma->Instance->M0AR = DstAddress;
 800902a:	6803      	ldr	r3, [r0, #0]
 800902c:	60da      	str	r2, [r3, #12]
	}
}
 800902e:	bc30      	pop	{r4, r5}
 8009030:	4770      	bx	lr
		hdma->Instance->PAR = DstAddress;
 8009032:	6803      	ldr	r3, [r0, #0]
 8009034:	609a      	str	r2, [r3, #8]
		hdma->Instance->M0AR = SrcAddress;
 8009036:	6803      	ldr	r3, [r0, #0]
 8009038:	60d9      	str	r1, [r3, #12]
 800903a:	e7f8      	b.n	800902e <DMA_SetConfig+0x1e>

0800903c <DMA_CalcBaseAndBitshift>:
 *                     the configuration information for the specified DMA Stream.
 * @retval Stream base address
 */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
	uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800903c:	6802      	ldr	r2, [r0, #0]
 800903e:	b2d3      	uxtb	r3, r2
 8009040:	3b10      	subs	r3, #16
 8009042:	490b      	ldr	r1, [pc, #44]	; (8009070 <DMA_CalcBaseAndBitshift+0x34>)
 8009044:	fba1 1303 	umull	r1, r3, r1, r3
 8009048:	091b      	lsrs	r3, r3, #4

	/* lookup table for necessary bitshift of flags within status registers */
	static const uint8_t flagBitshiftOffset[8U] = { 0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U };
	hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800904a:	490a      	ldr	r1, [pc, #40]	; (8009074 <DMA_CalcBaseAndBitshift+0x38>)
 800904c:	5cc9      	ldrb	r1, [r1, r3]
 800904e:	65c1      	str	r1, [r0, #92]	; 0x5c

	if (stream_number > 3U) {
 8009050:	2b03      	cmp	r3, #3
 8009052:	d806      	bhi.n	8009062 <DMA_CalcBaseAndBitshift+0x26>
		/* return pointer to HISR and HIFCR */
		hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
	}else {
		/* return pointer to LISR and LIFCR */
		hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009054:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8009058:	f022 0203 	bic.w	r2, r2, #3
 800905c:	6582      	str	r2, [r0, #88]	; 0x58
	}

	return hdma->StreamBaseAddress;
}
 800905e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8009060:	4770      	bx	lr
		hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009062:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8009066:	f022 0203 	bic.w	r2, r2, #3
 800906a:	3204      	adds	r2, #4
 800906c:	6582      	str	r2, [r0, #88]	; 0x58
 800906e:	e7f6      	b.n	800905e <DMA_CalcBaseAndBitshift+0x22>
 8009070:	aaaaaaab 	.word	0xaaaaaaab
 8009074:	08021d70 	.word	0x08021d70

08009078 <DMA_CheckFifoParam>:
 * @retval HAL status
 */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
	HAL_StatusTypeDef status = HAL_OK;
	uint32_t tmp = hdma->Init.FIFOThreshold;
 8009078:	6a83      	ldr	r3, [r0, #40]	; 0x28

	/* Memory Data size equal to Byte */
	if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE) {
 800907a:	6982      	ldr	r2, [r0, #24]
 800907c:	b992      	cbnz	r2, 80090a4 <DMA_CheckFifoParam+0x2c>
		switch (tmp) {
 800907e:	2b01      	cmp	r3, #1
 8009080:	d00a      	beq.n	8009098 <DMA_CheckFifoParam+0x20>
 8009082:	b11b      	cbz	r3, 800908c <DMA_CheckFifoParam+0x14>
 8009084:	2b02      	cmp	r3, #2
 8009086:	d001      	beq.n	800908c <DMA_CheckFifoParam+0x14>
	HAL_StatusTypeDef status = HAL_OK;
 8009088:	2000      	movs	r0, #0
 800908a:	4770      	bx	lr
		case DMA_FIFO_THRESHOLD_1QUARTERFULL:
		case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
			if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 800908c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800908e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8009092:	d12c      	bne.n	80090ee <DMA_CheckFifoParam+0x76>
	HAL_StatusTypeDef status = HAL_OK;
 8009094:	2000      	movs	r0, #0
 8009096:	4770      	bx	lr
				status = HAL_ERROR;
			}
			break;
		case DMA_FIFO_THRESHOLD_HALFFULL:
			if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 8009098:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800909a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800909e:	d028      	beq.n	80090f2 <DMA_CheckFifoParam+0x7a>
	HAL_StatusTypeDef status = HAL_OK;
 80090a0:	2000      	movs	r0, #0
 80090a2:	4770      	bx	lr
		default:
			break;
		}
	}
	/* Memory Data size equal to Half-Word */
	else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD) {
 80090a4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80090a8:	d005      	beq.n	80090b6 <DMA_CheckFifoParam+0x3e>
			break;
		}
	}
	/* Memory Data size equal to Word */
	else{
		switch (tmp) {
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d929      	bls.n	8009102 <DMA_CheckFifoParam+0x8a>
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d015      	beq.n	80090de <DMA_CheckFifoParam+0x66>
	HAL_StatusTypeDef status = HAL_OK;
 80090b2:	2000      	movs	r0, #0
 80090b4:	4770      	bx	lr
		switch (tmp) {
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	d803      	bhi.n	80090c2 <DMA_CheckFifoParam+0x4a>
 80090ba:	e8df f003 	tbb	[pc, r3]
 80090be:	041c      	.short	0x041c
 80090c0:	0a1c      	.short	0x0a1c
	HAL_StatusTypeDef status = HAL_OK;
 80090c2:	2000      	movs	r0, #0
 80090c4:	4770      	bx	lr
			if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 80090c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80090c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80090cc:	d115      	bne.n	80090fa <DMA_CheckFifoParam+0x82>
	HAL_StatusTypeDef status = HAL_OK;
 80090ce:	2000      	movs	r0, #0
 80090d0:	4770      	bx	lr
			if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 80090d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80090d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80090d8:	d011      	beq.n	80090fe <DMA_CheckFifoParam+0x86>
	HAL_StatusTypeDef status = HAL_OK;
 80090da:	2000      	movs	r0, #0
 80090dc:	4770      	bx	lr
		case DMA_FIFO_THRESHOLD_HALFFULL:
		case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
			status = HAL_ERROR;
			break;
		case DMA_FIFO_THRESHOLD_FULL:
			if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 80090de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80090e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80090e4:	d001      	beq.n	80090ea <DMA_CheckFifoParam+0x72>
				status = HAL_ERROR;
 80090e6:	2001      	movs	r0, #1
			break;
		}
	}

	return status;
}
 80090e8:	4770      	bx	lr
	HAL_StatusTypeDef status = HAL_OK;
 80090ea:	2000      	movs	r0, #0
 80090ec:	4770      	bx	lr
				status = HAL_ERROR;
 80090ee:	2001      	movs	r0, #1
 80090f0:	4770      	bx	lr
				status = HAL_ERROR;
 80090f2:	2001      	movs	r0, #1
 80090f4:	4770      	bx	lr
			status = HAL_ERROR;
 80090f6:	2001      	movs	r0, #1
 80090f8:	4770      	bx	lr
				status = HAL_ERROR;
 80090fa:	2001      	movs	r0, #1
 80090fc:	4770      	bx	lr
				status = HAL_ERROR;
 80090fe:	2001      	movs	r0, #1
 8009100:	4770      	bx	lr
			status = HAL_ERROR;
 8009102:	2001      	movs	r0, #1
 8009104:	4770      	bx	lr
	...

08009108 <HAL_DMA_Init>:
{
 8009108:	b570      	push	{r4, r5, r6, lr}
 800910a:	4604      	mov	r4, r0
	uint32_t tickstart = HAL_GetTick();
 800910c:	f7ff fb6c 	bl	80087e8 <HAL_GetTick>
	if (hdma == NULL) {
 8009110:	2c00      	cmp	r4, #0
 8009112:	f000 8131 	beq.w	8009378 <HAL_DMA_Init+0x270>
 8009116:	4605      	mov	r5, r0
	assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	4a98      	ldr	r2, [pc, #608]	; (800937c <HAL_DMA_Init+0x274>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d031      	beq.n	8009184 <HAL_DMA_Init+0x7c>
 8009120:	3218      	adds	r2, #24
 8009122:	4293      	cmp	r3, r2
 8009124:	d02e      	beq.n	8009184 <HAL_DMA_Init+0x7c>
 8009126:	3218      	adds	r2, #24
 8009128:	4293      	cmp	r3, r2
 800912a:	d02b      	beq.n	8009184 <HAL_DMA_Init+0x7c>
 800912c:	3218      	adds	r2, #24
 800912e:	4293      	cmp	r3, r2
 8009130:	d028      	beq.n	8009184 <HAL_DMA_Init+0x7c>
 8009132:	3218      	adds	r2, #24
 8009134:	4293      	cmp	r3, r2
 8009136:	d025      	beq.n	8009184 <HAL_DMA_Init+0x7c>
 8009138:	3218      	adds	r2, #24
 800913a:	4293      	cmp	r3, r2
 800913c:	d022      	beq.n	8009184 <HAL_DMA_Init+0x7c>
 800913e:	3218      	adds	r2, #24
 8009140:	4293      	cmp	r3, r2
 8009142:	d01f      	beq.n	8009184 <HAL_DMA_Init+0x7c>
 8009144:	3218      	adds	r2, #24
 8009146:	4293      	cmp	r3, r2
 8009148:	d01c      	beq.n	8009184 <HAL_DMA_Init+0x7c>
 800914a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800914e:	4293      	cmp	r3, r2
 8009150:	d018      	beq.n	8009184 <HAL_DMA_Init+0x7c>
 8009152:	3218      	adds	r2, #24
 8009154:	4293      	cmp	r3, r2
 8009156:	d015      	beq.n	8009184 <HAL_DMA_Init+0x7c>
 8009158:	3218      	adds	r2, #24
 800915a:	4293      	cmp	r3, r2
 800915c:	d012      	beq.n	8009184 <HAL_DMA_Init+0x7c>
 800915e:	3218      	adds	r2, #24
 8009160:	4293      	cmp	r3, r2
 8009162:	d00f      	beq.n	8009184 <HAL_DMA_Init+0x7c>
 8009164:	3218      	adds	r2, #24
 8009166:	4293      	cmp	r3, r2
 8009168:	d00c      	beq.n	8009184 <HAL_DMA_Init+0x7c>
 800916a:	3218      	adds	r2, #24
 800916c:	4293      	cmp	r3, r2
 800916e:	d009      	beq.n	8009184 <HAL_DMA_Init+0x7c>
 8009170:	3218      	adds	r2, #24
 8009172:	4293      	cmp	r3, r2
 8009174:	d006      	beq.n	8009184 <HAL_DMA_Init+0x7c>
 8009176:	3218      	adds	r2, #24
 8009178:	4293      	cmp	r3, r2
 800917a:	d003      	beq.n	8009184 <HAL_DMA_Init+0x7c>
 800917c:	21c6      	movs	r1, #198	; 0xc6
 800917e:	4880      	ldr	r0, [pc, #512]	; (8009380 <HAL_DMA_Init+0x278>)
 8009180:	f006 fcfa 	bl	800fb78 <assert_failed>
	assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8009184:	6863      	ldr	r3, [r4, #4]
 8009186:	b1c3      	cbz	r3, 80091ba <HAL_DMA_Init+0xb2>
 8009188:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800918c:	d015      	beq.n	80091ba <HAL_DMA_Init+0xb2>
 800918e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009192:	d012      	beq.n	80091ba <HAL_DMA_Init+0xb2>
 8009194:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009198:	d00f      	beq.n	80091ba <HAL_DMA_Init+0xb2>
 800919a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800919e:	d00c      	beq.n	80091ba <HAL_DMA_Init+0xb2>
 80091a0:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80091a4:	d009      	beq.n	80091ba <HAL_DMA_Init+0xb2>
 80091a6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80091aa:	d006      	beq.n	80091ba <HAL_DMA_Init+0xb2>
 80091ac:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80091b0:	d003      	beq.n	80091ba <HAL_DMA_Init+0xb2>
 80091b2:	21c7      	movs	r1, #199	; 0xc7
 80091b4:	4872      	ldr	r0, [pc, #456]	; (8009380 <HAL_DMA_Init+0x278>)
 80091b6:	f006 fcdf 	bl	800fb78 <assert_failed>
	assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80091ba:	68a3      	ldr	r3, [r4, #8]
 80091bc:	b13b      	cbz	r3, 80091ce <HAL_DMA_Init+0xc6>
 80091be:	2b40      	cmp	r3, #64	; 0x40
 80091c0:	d005      	beq.n	80091ce <HAL_DMA_Init+0xc6>
 80091c2:	2b80      	cmp	r3, #128	; 0x80
 80091c4:	d003      	beq.n	80091ce <HAL_DMA_Init+0xc6>
 80091c6:	21c8      	movs	r1, #200	; 0xc8
 80091c8:	486d      	ldr	r0, [pc, #436]	; (8009380 <HAL_DMA_Init+0x278>)
 80091ca:	f006 fcd5 	bl	800fb78 <assert_failed>
	assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80091ce:	68e3      	ldr	r3, [r4, #12]
 80091d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091d4:	d001      	beq.n	80091da <HAL_DMA_Init+0xd2>
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d17d      	bne.n	80092d6 <HAL_DMA_Init+0x1ce>
	assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80091da:	6923      	ldr	r3, [r4, #16]
 80091dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091e0:	d001      	beq.n	80091e6 <HAL_DMA_Init+0xde>
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d17c      	bne.n	80092e0 <HAL_DMA_Init+0x1d8>
	assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80091e6:	6963      	ldr	r3, [r4, #20]
 80091e8:	b14b      	cbz	r3, 80091fe <HAL_DMA_Init+0xf6>
 80091ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091ee:	d006      	beq.n	80091fe <HAL_DMA_Init+0xf6>
 80091f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091f4:	d003      	beq.n	80091fe <HAL_DMA_Init+0xf6>
 80091f6:	21cb      	movs	r1, #203	; 0xcb
 80091f8:	4861      	ldr	r0, [pc, #388]	; (8009380 <HAL_DMA_Init+0x278>)
 80091fa:	f006 fcbd 	bl	800fb78 <assert_failed>
	assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80091fe:	69a3      	ldr	r3, [r4, #24]
 8009200:	b14b      	cbz	r3, 8009216 <HAL_DMA_Init+0x10e>
 8009202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009206:	d006      	beq.n	8009216 <HAL_DMA_Init+0x10e>
 8009208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800920c:	d003      	beq.n	8009216 <HAL_DMA_Init+0x10e>
 800920e:	21cc      	movs	r1, #204	; 0xcc
 8009210:	485b      	ldr	r0, [pc, #364]	; (8009380 <HAL_DMA_Init+0x278>)
 8009212:	f006 fcb1 	bl	800fb78 <assert_failed>
	assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8009216:	69e3      	ldr	r3, [r4, #28]
 8009218:	b143      	cbz	r3, 800922c <HAL_DMA_Init+0x124>
 800921a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800921e:	d005      	beq.n	800922c <HAL_DMA_Init+0x124>
 8009220:	2b20      	cmp	r3, #32
 8009222:	d003      	beq.n	800922c <HAL_DMA_Init+0x124>
 8009224:	21cd      	movs	r1, #205	; 0xcd
 8009226:	4856      	ldr	r0, [pc, #344]	; (8009380 <HAL_DMA_Init+0x278>)
 8009228:	f006 fca6 	bl	800fb78 <assert_failed>
	assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800922c:	6a23      	ldr	r3, [r4, #32]
 800922e:	b163      	cbz	r3, 800924a <HAL_DMA_Init+0x142>
 8009230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009234:	d009      	beq.n	800924a <HAL_DMA_Init+0x142>
 8009236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800923a:	d006      	beq.n	800924a <HAL_DMA_Init+0x142>
 800923c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009240:	d003      	beq.n	800924a <HAL_DMA_Init+0x142>
 8009242:	21ce      	movs	r1, #206	; 0xce
 8009244:	484e      	ldr	r0, [pc, #312]	; (8009380 <HAL_DMA_Init+0x278>)
 8009246:	f006 fc97 	bl	800fb78 <assert_failed>
	assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800924a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800924c:	b12b      	cbz	r3, 800925a <HAL_DMA_Init+0x152>
 800924e:	2b04      	cmp	r3, #4
 8009250:	d003      	beq.n	800925a <HAL_DMA_Init+0x152>
 8009252:	21cf      	movs	r1, #207	; 0xcf
 8009254:	484a      	ldr	r0, [pc, #296]	; (8009380 <HAL_DMA_Init+0x278>)
 8009256:	f006 fc8f 	bl	800fb78 <assert_failed>
	if (hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE) {
 800925a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800925c:	b303      	cbz	r3, 80092a0 <HAL_DMA_Init+0x198>
		assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800925e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009260:	2b03      	cmp	r3, #3
 8009262:	d842      	bhi.n	80092ea <HAL_DMA_Init+0x1e2>
		assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8009264:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009266:	b163      	cbz	r3, 8009282 <HAL_DMA_Init+0x17a>
 8009268:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800926c:	d009      	beq.n	8009282 <HAL_DMA_Init+0x17a>
 800926e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009272:	d006      	beq.n	8009282 <HAL_DMA_Init+0x17a>
 8009274:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009278:	d003      	beq.n	8009282 <HAL_DMA_Init+0x17a>
 800927a:	21d4      	movs	r1, #212	; 0xd4
 800927c:	4840      	ldr	r0, [pc, #256]	; (8009380 <HAL_DMA_Init+0x278>)
 800927e:	f006 fc7b 	bl	800fb78 <assert_failed>
		assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8009282:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009284:	b163      	cbz	r3, 80092a0 <HAL_DMA_Init+0x198>
 8009286:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800928a:	d009      	beq.n	80092a0 <HAL_DMA_Init+0x198>
 800928c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009290:	d006      	beq.n	80092a0 <HAL_DMA_Init+0x198>
 8009292:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009296:	d003      	beq.n	80092a0 <HAL_DMA_Init+0x198>
 8009298:	21d5      	movs	r1, #213	; 0xd5
 800929a:	4839      	ldr	r0, [pc, #228]	; (8009380 <HAL_DMA_Init+0x278>)
 800929c:	f006 fc6c 	bl	800fb78 <assert_failed>
	__HAL_UNLOCK(hdma);
 80092a0:	2300      	movs	r3, #0
 80092a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	hdma->State = HAL_DMA_STATE_BUSY;
 80092a6:	2302      	movs	r3, #2
 80092a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	__HAL_DMA_DISABLE(hdma);
 80092ac:	6822      	ldr	r2, [r4, #0]
 80092ae:	6813      	ldr	r3, [r2, #0]
 80092b0:	f023 0301 	bic.w	r3, r3, #1
 80092b4:	6013      	str	r3, [r2, #0]
	while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	f012 0f01 	tst.w	r2, #1
 80092be:	d019      	beq.n	80092f4 <HAL_DMA_Init+0x1ec>
		if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT) {
 80092c0:	f7ff fa92 	bl	80087e8 <HAL_GetTick>
 80092c4:	1b40      	subs	r0, r0, r5
 80092c6:	2805      	cmp	r0, #5
 80092c8:	d9f5      	bls.n	80092b6 <HAL_DMA_Init+0x1ae>
			hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80092ca:	2320      	movs	r3, #32
 80092cc:	6563      	str	r3, [r4, #84]	; 0x54
			hdma->State = HAL_DMA_STATE_TIMEOUT;
 80092ce:	2003      	movs	r0, #3
 80092d0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
			return HAL_TIMEOUT;
 80092d4:	bd70      	pop	{r4, r5, r6, pc}
	assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80092d6:	21c9      	movs	r1, #201	; 0xc9
 80092d8:	4829      	ldr	r0, [pc, #164]	; (8009380 <HAL_DMA_Init+0x278>)
 80092da:	f006 fc4d 	bl	800fb78 <assert_failed>
 80092de:	e77c      	b.n	80091da <HAL_DMA_Init+0xd2>
	assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80092e0:	21ca      	movs	r1, #202	; 0xca
 80092e2:	4827      	ldr	r0, [pc, #156]	; (8009380 <HAL_DMA_Init+0x278>)
 80092e4:	f006 fc48 	bl	800fb78 <assert_failed>
 80092e8:	e77d      	b.n	80091e6 <HAL_DMA_Init+0xde>
		assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80092ea:	21d3      	movs	r1, #211	; 0xd3
 80092ec:	4824      	ldr	r0, [pc, #144]	; (8009380 <HAL_DMA_Init+0x278>)
 80092ee:	f006 fc43 	bl	800fb78 <assert_failed>
 80092f2:	e7b7      	b.n	8009264 <HAL_DMA_Init+0x15c>
	tmp = hdma->Instance->CR;
 80092f4:	681a      	ldr	r2, [r3, #0]
	tmp &= ((uint32_t) ~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80092f6:	4923      	ldr	r1, [pc, #140]	; (8009384 <HAL_DMA_Init+0x27c>)
 80092f8:	4011      	ands	r1, r2
	tmp |= hdma->Init.Channel | hdma->Init.Direction |
 80092fa:	6862      	ldr	r2, [r4, #4]
 80092fc:	68a0      	ldr	r0, [r4, #8]
 80092fe:	4302      	orrs	r2, r0
	       hdma->Init.PeriphInc | hdma->Init.MemInc |
 8009300:	68e0      	ldr	r0, [r4, #12]
	tmp |= hdma->Init.Channel | hdma->Init.Direction |
 8009302:	4302      	orrs	r2, r0
	       hdma->Init.PeriphInc | hdma->Init.MemInc |
 8009304:	6920      	ldr	r0, [r4, #16]
 8009306:	4302      	orrs	r2, r0
	       hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009308:	6960      	ldr	r0, [r4, #20]
	       hdma->Init.PeriphInc | hdma->Init.MemInc |
 800930a:	4302      	orrs	r2, r0
	       hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800930c:	69a0      	ldr	r0, [r4, #24]
 800930e:	4302      	orrs	r2, r0
	       hdma->Init.Mode | hdma->Init.Priority;
 8009310:	69e0      	ldr	r0, [r4, #28]
	       hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009312:	4302      	orrs	r2, r0
	       hdma->Init.Mode | hdma->Init.Priority;
 8009314:	6a20      	ldr	r0, [r4, #32]
 8009316:	4302      	orrs	r2, r0
	tmp |= hdma->Init.Channel | hdma->Init.Direction |
 8009318:	430a      	orrs	r2, r1
	if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 800931a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800931c:	2904      	cmp	r1, #4
 800931e:	d016      	beq.n	800934e <HAL_DMA_Init+0x246>
	hdma->Instance->CR = tmp;
 8009320:	601a      	str	r2, [r3, #0]
	tmp = hdma->Instance->FCR;
 8009322:	6826      	ldr	r6, [r4, #0]
 8009324:	6975      	ldr	r5, [r6, #20]
	tmp &= (uint32_t) ~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009326:	f025 0507 	bic.w	r5, r5, #7
	tmp |= hdma->Init.FIFOMode;
 800932a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800932c:	431d      	orrs	r5, r3
	if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 800932e:	2b04      	cmp	r3, #4
 8009330:	d012      	beq.n	8009358 <HAL_DMA_Init+0x250>
	hdma->Instance->FCR = tmp;
 8009332:	6175      	str	r5, [r6, #20]
	regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009334:	4620      	mov	r0, r4
 8009336:	f7ff fe81 	bl	800903c <DMA_CalcBaseAndBitshift>
	regs->IFCR = 0x3FU << hdma->StreamIndex;
 800933a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800933c:	233f      	movs	r3, #63	; 0x3f
 800933e:	4093      	lsls	r3, r2
 8009340:	6083      	str	r3, [r0, #8]
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009342:	2000      	movs	r0, #0
 8009344:	6560      	str	r0, [r4, #84]	; 0x54
	hdma->State = HAL_DMA_STATE_READY;
 8009346:	2301      	movs	r3, #1
 8009348:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return HAL_OK;
 800934c:	bd70      	pop	{r4, r5, r6, pc}
		tmp |= hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800934e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009350:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009352:	4301      	orrs	r1, r0
 8009354:	430a      	orrs	r2, r1
 8009356:	e7e3      	b.n	8009320 <HAL_DMA_Init+0x218>
		tmp |= hdma->Init.FIFOThreshold;
 8009358:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800935a:	431d      	orrs	r5, r3
		if (hdma->Init.MemBurst != DMA_MBURST_SINGLE) {
 800935c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800935e:	2b00      	cmp	r3, #0
 8009360:	d0e7      	beq.n	8009332 <HAL_DMA_Init+0x22a>
			if (DMA_CheckFifoParam(hdma) != HAL_OK) {
 8009362:	4620      	mov	r0, r4
 8009364:	f7ff fe88 	bl	8009078 <DMA_CheckFifoParam>
 8009368:	2800      	cmp	r0, #0
 800936a:	d0e2      	beq.n	8009332 <HAL_DMA_Init+0x22a>
				hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800936c:	2340      	movs	r3, #64	; 0x40
 800936e:	6563      	str	r3, [r4, #84]	; 0x54
				hdma->State = HAL_DMA_STATE_READY;
 8009370:	2001      	movs	r0, #1
 8009372:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
				return HAL_ERROR;
 8009376:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_ERROR;
 8009378:	2001      	movs	r0, #1
}
 800937a:	bd70      	pop	{r4, r5, r6, pc}
 800937c:	40026010 	.word	0x40026010
 8009380:	08021d38 	.word	0x08021d38
 8009384:	f010803f 	.word	0xf010803f

08009388 <HAL_DMA_DeInit>:
	if (hdma == NULL) {
 8009388:	2800      	cmp	r0, #0
 800938a:	d05e      	beq.n	800944a <HAL_DMA_DeInit+0xc2>
{
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	4604      	mov	r4, r0
	if (hdma->State == HAL_DMA_STATE_BUSY) {
 8009390:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b02      	cmp	r3, #2
 8009398:	d059      	beq.n	800944e <HAL_DMA_DeInit+0xc6>
	assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800939a:	6803      	ldr	r3, [r0, #0]
 800939c:	4a2d      	ldr	r2, [pc, #180]	; (8009454 <HAL_DMA_DeInit+0xcc>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d032      	beq.n	8009408 <HAL_DMA_DeInit+0x80>
 80093a2:	3218      	adds	r2, #24
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d02f      	beq.n	8009408 <HAL_DMA_DeInit+0x80>
 80093a8:	3218      	adds	r2, #24
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d02c      	beq.n	8009408 <HAL_DMA_DeInit+0x80>
 80093ae:	3218      	adds	r2, #24
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d029      	beq.n	8009408 <HAL_DMA_DeInit+0x80>
 80093b4:	3218      	adds	r2, #24
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d026      	beq.n	8009408 <HAL_DMA_DeInit+0x80>
 80093ba:	3218      	adds	r2, #24
 80093bc:	4293      	cmp	r3, r2
 80093be:	d023      	beq.n	8009408 <HAL_DMA_DeInit+0x80>
 80093c0:	3218      	adds	r2, #24
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d020      	beq.n	8009408 <HAL_DMA_DeInit+0x80>
 80093c6:	3218      	adds	r2, #24
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d01d      	beq.n	8009408 <HAL_DMA_DeInit+0x80>
 80093cc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d019      	beq.n	8009408 <HAL_DMA_DeInit+0x80>
 80093d4:	3218      	adds	r2, #24
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d016      	beq.n	8009408 <HAL_DMA_DeInit+0x80>
 80093da:	3218      	adds	r2, #24
 80093dc:	4293      	cmp	r3, r2
 80093de:	d013      	beq.n	8009408 <HAL_DMA_DeInit+0x80>
 80093e0:	3218      	adds	r2, #24
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d010      	beq.n	8009408 <HAL_DMA_DeInit+0x80>
 80093e6:	3218      	adds	r2, #24
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d00d      	beq.n	8009408 <HAL_DMA_DeInit+0x80>
 80093ec:	3218      	adds	r2, #24
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d00a      	beq.n	8009408 <HAL_DMA_DeInit+0x80>
 80093f2:	3218      	adds	r2, #24
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d007      	beq.n	8009408 <HAL_DMA_DeInit+0x80>
 80093f8:	3218      	adds	r2, #24
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d004      	beq.n	8009408 <HAL_DMA_DeInit+0x80>
 80093fe:	f240 114d 	movw	r1, #333	; 0x14d
 8009402:	4815      	ldr	r0, [pc, #84]	; (8009458 <HAL_DMA_DeInit+0xd0>)
 8009404:	f006 fbb8 	bl	800fb78 <assert_failed>
	__HAL_DMA_DISABLE(hdma);
 8009408:	6822      	ldr	r2, [r4, #0]
 800940a:	6813      	ldr	r3, [r2, #0]
 800940c:	f023 0301 	bic.w	r3, r3, #1
 8009410:	6013      	str	r3, [r2, #0]
	hdma->Instance->CR = 0U;
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	2500      	movs	r5, #0
 8009416:	601d      	str	r5, [r3, #0]
	hdma->Instance->NDTR = 0U;
 8009418:	6823      	ldr	r3, [r4, #0]
 800941a:	605d      	str	r5, [r3, #4]
	hdma->Instance->PAR = 0U;
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	609d      	str	r5, [r3, #8]
	hdma->Instance->M0AR = 0U;
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	60dd      	str	r5, [r3, #12]
	hdma->Instance->M1AR = 0U;
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	611d      	str	r5, [r3, #16]
	hdma->Instance->FCR = 0x00000021U;
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	2221      	movs	r2, #33	; 0x21
 800942c:	615a      	str	r2, [r3, #20]
	regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800942e:	4620      	mov	r0, r4
 8009430:	f7ff fe04 	bl	800903c <DMA_CalcBaseAndBitshift>
	regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009434:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009436:	233f      	movs	r3, #63	; 0x3f
 8009438:	4093      	lsls	r3, r2
 800943a:	6083      	str	r3, [r0, #8]
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800943c:	6565      	str	r5, [r4, #84]	; 0x54
	hdma->State = HAL_DMA_STATE_RESET;
 800943e:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
	__HAL_UNLOCK(hdma);
 8009442:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
	return HAL_OK;
 8009446:	4628      	mov	r0, r5
 8009448:	bd38      	pop	{r3, r4, r5, pc}
		return HAL_ERROR;
 800944a:	2001      	movs	r0, #1
 800944c:	4770      	bx	lr
		return HAL_BUSY;
 800944e:	2002      	movs	r0, #2
}
 8009450:	bd38      	pop	{r3, r4, r5, pc}
 8009452:	bf00      	nop
 8009454:	40026010 	.word	0x40026010
 8009458:	08021d38 	.word	0x08021d38

0800945c <HAL_DMA_Start_IT>:
{
 800945c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009460:	4604      	mov	r4, r0
 8009462:	460f      	mov	r7, r1
 8009464:	4690      	mov	r8, r2
 8009466:	461d      	mov	r5, r3
	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009468:	6d86      	ldr	r6, [r0, #88]	; 0x58
	assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800946a:	1e5a      	subs	r2, r3, #1
 800946c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009470:	429a      	cmp	r2, r3
 8009472:	d811      	bhi.n	8009498 <HAL_DMA_Start_IT+0x3c>
	__HAL_LOCK(hdma);
 8009474:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009478:	2b01      	cmp	r3, #1
 800947a:	d03b      	beq.n	80094f4 <HAL_DMA_Start_IT+0x98>
 800947c:	2301      	movs	r3, #1
 800947e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	if (HAL_DMA_STATE_READY == hdma->State) {
 8009482:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b01      	cmp	r3, #1
 800948a:	d00b      	beq.n	80094a4 <HAL_DMA_Start_IT+0x48>
		__HAL_UNLOCK(hdma);
 800948c:	2300      	movs	r3, #0
 800948e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		status = HAL_BUSY;
 8009492:	2002      	movs	r0, #2
 8009494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8009498:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800949c:	4817      	ldr	r0, [pc, #92]	; (80094fc <HAL_DMA_Start_IT+0xa0>)
 800949e:	f006 fb6b 	bl	800fb78 <assert_failed>
 80094a2:	e7e7      	b.n	8009474 <HAL_DMA_Start_IT+0x18>
		hdma->State = HAL_DMA_STATE_BUSY;
 80094a4:	2302      	movs	r3, #2
 80094a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80094aa:	2300      	movs	r3, #0
 80094ac:	6563      	str	r3, [r4, #84]	; 0x54
		DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80094ae:	462b      	mov	r3, r5
 80094b0:	4642      	mov	r2, r8
 80094b2:	4639      	mov	r1, r7
 80094b4:	4620      	mov	r0, r4
 80094b6:	f7ff fdab 	bl	8009010 <DMA_SetConfig>
		regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80094bc:	233f      	movs	r3, #63	; 0x3f
 80094be:	4093      	lsls	r3, r2
 80094c0:	60b3      	str	r3, [r6, #8]
		hdma->Instance->CR |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80094c2:	6822      	ldr	r2, [r4, #0]
 80094c4:	6813      	ldr	r3, [r2, #0]
 80094c6:	f043 0316 	orr.w	r3, r3, #22
 80094ca:	6013      	str	r3, [r2, #0]
		hdma->Instance->FCR |= DMA_IT_FE;
 80094cc:	6822      	ldr	r2, [r4, #0]
 80094ce:	6953      	ldr	r3, [r2, #20]
 80094d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094d4:	6153      	str	r3, [r2, #20]
		if (hdma->XferHalfCpltCallback != NULL) {
 80094d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094d8:	b123      	cbz	r3, 80094e4 <HAL_DMA_Start_IT+0x88>
			hdma->Instance->CR |= DMA_IT_HT;
 80094da:	6822      	ldr	r2, [r4, #0]
 80094dc:	6813      	ldr	r3, [r2, #0]
 80094de:	f043 0308 	orr.w	r3, r3, #8
 80094e2:	6013      	str	r3, [r2, #0]
		__HAL_DMA_ENABLE(hdma);
 80094e4:	6822      	ldr	r2, [r4, #0]
 80094e6:	6813      	ldr	r3, [r2, #0]
 80094e8:	f043 0301 	orr.w	r3, r3, #1
 80094ec:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80094ee:	2000      	movs	r0, #0
 80094f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__HAL_LOCK(hdma);
 80094f4:	2002      	movs	r0, #2
}
 80094f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094fa:	bf00      	nop
 80094fc:	08021d38 	.word	0x08021d38

08009500 <HAL_DMA_Abort_IT>:
	if (hdma->State != HAL_DMA_STATE_BUSY) {
 8009500:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b02      	cmp	r3, #2
 8009508:	d003      	beq.n	8009512 <HAL_DMA_Abort_IT+0x12>
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800950a:	2380      	movs	r3, #128	; 0x80
 800950c:	6543      	str	r3, [r0, #84]	; 0x54
		return HAL_ERROR;
 800950e:	2001      	movs	r0, #1
 8009510:	4770      	bx	lr
		hdma->State = HAL_DMA_STATE_ABORT;
 8009512:	2305      	movs	r3, #5
 8009514:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		__HAL_DMA_DISABLE(hdma);
 8009518:	6802      	ldr	r2, [r0, #0]
 800951a:	6813      	ldr	r3, [r2, #0]
 800951c:	f023 0301 	bic.w	r3, r3, #1
 8009520:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 8009522:	2000      	movs	r0, #0
}
 8009524:	4770      	bx	lr
	...

08009528 <HAL_DMA_IRQHandler>:
{
 8009528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800952a:	b083      	sub	sp, #12
 800952c:	4604      	mov	r4, r0
	__IO uint32_t count = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	9301      	str	r3, [sp, #4]
	uint32_t timeout = SystemCoreClock / 9600U;
 8009532:	4b72      	ldr	r3, [pc, #456]	; (80096fc <HAL_DMA_IRQHandler+0x1d4>)
 8009534:	681d      	ldr	r5, [r3, #0]
 8009536:	4b72      	ldr	r3, [pc, #456]	; (8009700 <HAL_DMA_IRQHandler+0x1d8>)
 8009538:	fba3 3505 	umull	r3, r5, r3, r5
 800953c:	0aad      	lsrs	r5, r5, #10
	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800953e:	6d87      	ldr	r7, [r0, #88]	; 0x58
	tmpisr = regs->ISR;
 8009540:	683e      	ldr	r6, [r7, #0]
	if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET) {
 8009542:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8009544:	2308      	movs	r3, #8
 8009546:	4093      	lsls	r3, r2
 8009548:	421e      	tst	r6, r3
 800954a:	d010      	beq.n	800956e <HAL_DMA_IRQHandler+0x46>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET) {
 800954c:	6803      	ldr	r3, [r0, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	f012 0f04 	tst.w	r2, #4
 8009554:	d00b      	beq.n	800956e <HAL_DMA_IRQHandler+0x46>
			hdma->Instance->CR &= ~(DMA_IT_TE);
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	f022 0204 	bic.w	r2, r2, #4
 800955c:	601a      	str	r2, [r3, #0]
			regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800955e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8009560:	2308      	movs	r3, #8
 8009562:	4093      	lsls	r3, r2
 8009564:	60bb      	str	r3, [r7, #8]
			hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009566:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009568:	f043 0301 	orr.w	r3, r3, #1
 800956c:	6543      	str	r3, [r0, #84]	; 0x54
	if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET) {
 800956e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009570:	2301      	movs	r3, #1
 8009572:	4093      	lsls	r3, r2
 8009574:	421e      	tst	r6, r3
 8009576:	d009      	beq.n	800958c <HAL_DMA_IRQHandler+0x64>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET) {
 8009578:	6822      	ldr	r2, [r4, #0]
 800957a:	6952      	ldr	r2, [r2, #20]
 800957c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009580:	d004      	beq.n	800958c <HAL_DMA_IRQHandler+0x64>
			regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009582:	60bb      	str	r3, [r7, #8]
			hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009584:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009586:	f043 0302 	orr.w	r3, r3, #2
 800958a:	6563      	str	r3, [r4, #84]	; 0x54
	if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET) {
 800958c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800958e:	2304      	movs	r3, #4
 8009590:	4093      	lsls	r3, r2
 8009592:	421e      	tst	r6, r3
 8009594:	d009      	beq.n	80095aa <HAL_DMA_IRQHandler+0x82>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET) {
 8009596:	6822      	ldr	r2, [r4, #0]
 8009598:	6812      	ldr	r2, [r2, #0]
 800959a:	f012 0f02 	tst.w	r2, #2
 800959e:	d004      	beq.n	80095aa <HAL_DMA_IRQHandler+0x82>
			regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80095a0:	60bb      	str	r3, [r7, #8]
			hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80095a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80095a4:	f043 0304 	orr.w	r3, r3, #4
 80095a8:	6563      	str	r3, [r4, #84]	; 0x54
	if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET) {
 80095aa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80095ac:	2310      	movs	r3, #16
 80095ae:	4093      	lsls	r3, r2
 80095b0:	421e      	tst	r6, r3
 80095b2:	d024      	beq.n	80095fe <HAL_DMA_IRQHandler+0xd6>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET) {
 80095b4:	6822      	ldr	r2, [r4, #0]
 80095b6:	6812      	ldr	r2, [r2, #0]
 80095b8:	f012 0f08 	tst.w	r2, #8
 80095bc:	d01f      	beq.n	80095fe <HAL_DMA_IRQHandler+0xd6>
			regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80095be:	60bb      	str	r3, [r7, #8]
			if (((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET) {
 80095c0:	6823      	ldr	r3, [r4, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80095c8:	d00d      	beq.n	80095e6 <HAL_DMA_IRQHandler+0xbe>
				if ((hdma->Instance->CR & DMA_SxCR_CT) == RESET) {
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80095d0:	d104      	bne.n	80095dc <HAL_DMA_IRQHandler+0xb4>
					if (hdma->XferHalfCpltCallback != NULL) {
 80095d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095d4:	b19b      	cbz	r3, 80095fe <HAL_DMA_IRQHandler+0xd6>
						hdma->XferHalfCpltCallback(hdma);
 80095d6:	4620      	mov	r0, r4
 80095d8:	4798      	blx	r3
 80095da:	e010      	b.n	80095fe <HAL_DMA_IRQHandler+0xd6>
					if (hdma->XferM1HalfCpltCallback != NULL) {
 80095dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80095de:	b173      	cbz	r3, 80095fe <HAL_DMA_IRQHandler+0xd6>
						hdma->XferM1HalfCpltCallback(hdma);
 80095e0:	4620      	mov	r0, r4
 80095e2:	4798      	blx	r3
 80095e4:	e00b      	b.n	80095fe <HAL_DMA_IRQHandler+0xd6>
				if ((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET) {
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80095ec:	d103      	bne.n	80095f6 <HAL_DMA_IRQHandler+0xce>
					hdma->Instance->CR &= ~(DMA_IT_HT);
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	f022 0208 	bic.w	r2, r2, #8
 80095f4:	601a      	str	r2, [r3, #0]
				if (hdma->XferHalfCpltCallback != NULL) {
 80095f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095f8:	b10b      	cbz	r3, 80095fe <HAL_DMA_IRQHandler+0xd6>
					hdma->XferHalfCpltCallback(hdma);
 80095fa:	4620      	mov	r0, r4
 80095fc:	4798      	blx	r3
	if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET) {
 80095fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009600:	2320      	movs	r3, #32
 8009602:	4093      	lsls	r3, r2
 8009604:	421e      	tst	r6, r3
 8009606:	d055      	beq.n	80096b4 <HAL_DMA_IRQHandler+0x18c>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) {
 8009608:	6822      	ldr	r2, [r4, #0]
 800960a:	6812      	ldr	r2, [r2, #0]
 800960c:	f012 0f10 	tst.w	r2, #16
 8009610:	d050      	beq.n	80096b4 <HAL_DMA_IRQHandler+0x18c>
			regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009612:	60bb      	str	r3, [r7, #8]
			if (HAL_DMA_STATE_ABORT == hdma->State) {
 8009614:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b05      	cmp	r3, #5
 800961c:	d00e      	beq.n	800963c <HAL_DMA_IRQHandler+0x114>
			if (((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET) {
 800961e:	6823      	ldr	r3, [r4, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8009626:	d033      	beq.n	8009690 <HAL_DMA_IRQHandler+0x168>
				if ((hdma->Instance->CR & DMA_SxCR_CT) == RESET) {
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800962e:	d12a      	bne.n	8009686 <HAL_DMA_IRQHandler+0x15e>
					if (hdma->XferM1CpltCallback != NULL) {
 8009630:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009632:	2b00      	cmp	r3, #0
 8009634:	d03e      	beq.n	80096b4 <HAL_DMA_IRQHandler+0x18c>
						hdma->XferM1CpltCallback(hdma);
 8009636:	4620      	mov	r0, r4
 8009638:	4798      	blx	r3
 800963a:	e03b      	b.n	80096b4 <HAL_DMA_IRQHandler+0x18c>
				hdma->Instance->CR &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800963c:	6822      	ldr	r2, [r4, #0]
 800963e:	6813      	ldr	r3, [r2, #0]
 8009640:	f023 0316 	bic.w	r3, r3, #22
 8009644:	6013      	str	r3, [r2, #0]
				hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009646:	6822      	ldr	r2, [r4, #0]
 8009648:	6953      	ldr	r3, [r2, #20]
 800964a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800964e:	6153      	str	r3, [r2, #20]
				if ((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL)) {
 8009650:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009652:	b1a3      	cbz	r3, 800967e <HAL_DMA_IRQHandler+0x156>
					hdma->Instance->CR &= ~(DMA_IT_HT);
 8009654:	6822      	ldr	r2, [r4, #0]
 8009656:	6813      	ldr	r3, [r2, #0]
 8009658:	f023 0308 	bic.w	r3, r3, #8
 800965c:	6013      	str	r3, [r2, #0]
				regs->IFCR = 0x3FU << hdma->StreamIndex;
 800965e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009660:	233f      	movs	r3, #63	; 0x3f
 8009662:	4093      	lsls	r3, r2
 8009664:	60bb      	str	r3, [r7, #8]
				__HAL_UNLOCK(hdma);
 8009666:	2300      	movs	r3, #0
 8009668:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
				hdma->State = HAL_DMA_STATE_READY;
 800966c:	2301      	movs	r3, #1
 800966e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (hdma->XferAbortCallback != NULL) {
 8009672:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009674:	2b00      	cmp	r3, #0
 8009676:	d03f      	beq.n	80096f8 <HAL_DMA_IRQHandler+0x1d0>
					hdma->XferAbortCallback(hdma);
 8009678:	4620      	mov	r0, r4
 800967a:	4798      	blx	r3
 800967c:	e03c      	b.n	80096f8 <HAL_DMA_IRQHandler+0x1d0>
				if ((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL)) {
 800967e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1e7      	bne.n	8009654 <HAL_DMA_IRQHandler+0x12c>
 8009684:	e7eb      	b.n	800965e <HAL_DMA_IRQHandler+0x136>
					if (hdma->XferCpltCallback != NULL) {
 8009686:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009688:	b1a3      	cbz	r3, 80096b4 <HAL_DMA_IRQHandler+0x18c>
						hdma->XferCpltCallback(hdma);
 800968a:	4620      	mov	r0, r4
 800968c:	4798      	blx	r3
 800968e:	e011      	b.n	80096b4 <HAL_DMA_IRQHandler+0x18c>
				if ((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET) {
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	f412 7f80 	tst.w	r2, #256	; 0x100
 8009696:	d109      	bne.n	80096ac <HAL_DMA_IRQHandler+0x184>
					hdma->Instance->CR &= ~(DMA_IT_TC);
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	f022 0210 	bic.w	r2, r2, #16
 800969e:	601a      	str	r2, [r3, #0]
					__HAL_UNLOCK(hdma);
 80096a0:	2300      	movs	r3, #0
 80096a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
					hdma->State = HAL_DMA_STATE_READY;
 80096a6:	2301      	movs	r3, #1
 80096a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (hdma->XferCpltCallback != NULL) {
 80096ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80096ae:	b10b      	cbz	r3, 80096b4 <HAL_DMA_IRQHandler+0x18c>
					hdma->XferCpltCallback(hdma);
 80096b0:	4620      	mov	r0, r4
 80096b2:	4798      	blx	r3
	if (hdma->ErrorCode != HAL_DMA_ERROR_NONE) {
 80096b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80096b6:	b1fb      	cbz	r3, 80096f8 <HAL_DMA_IRQHandler+0x1d0>
		if ((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET) {
 80096b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80096ba:	f013 0f01 	tst.w	r3, #1
 80096be:	d017      	beq.n	80096f0 <HAL_DMA_IRQHandler+0x1c8>
			hdma->State = HAL_DMA_STATE_ABORT;
 80096c0:	2305      	movs	r3, #5
 80096c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			__HAL_DMA_DISABLE(hdma);
 80096c6:	6822      	ldr	r2, [r4, #0]
 80096c8:	6813      	ldr	r3, [r2, #0]
 80096ca:	f023 0301 	bic.w	r3, r3, #1
 80096ce:	6013      	str	r3, [r2, #0]
				if (++count > timeout) {
 80096d0:	9b01      	ldr	r3, [sp, #4]
 80096d2:	3301      	adds	r3, #1
 80096d4:	9301      	str	r3, [sp, #4]
 80096d6:	429d      	cmp	r5, r3
 80096d8:	d304      	bcc.n	80096e4 <HAL_DMA_IRQHandler+0x1bc>
			} while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f013 0f01 	tst.w	r3, #1
 80096e2:	d1f5      	bne.n	80096d0 <HAL_DMA_IRQHandler+0x1a8>
			__HAL_UNLOCK(hdma);
 80096e4:	2300      	movs	r3, #0
 80096e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			hdma->State = HAL_DMA_STATE_READY;
 80096ea:	2301      	movs	r3, #1
 80096ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if (hdma->XferErrorCallback != NULL) {
 80096f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80096f2:	b10b      	cbz	r3, 80096f8 <HAL_DMA_IRQHandler+0x1d0>
			hdma->XferErrorCallback(hdma);
 80096f4:	4620      	mov	r0, r4
 80096f6:	4798      	blx	r3
}
 80096f8:	b003      	add	sp, #12
 80096fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096fc:	200014a0 	.word	0x200014a0
 8009700:	1b4e81b5 	.word	0x1b4e81b5

08009704 <HAL_GPIO_Init>:
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009708:	b082      	sub	sp, #8
 800970a:	4680      	mov	r8, r0
 800970c:	460f      	mov	r7, r1
	uint32_t ioposition = 0x00U;
	uint32_t iocurrent = 0x00U;
	uint32_t temp = 0x00U;

	/* Check the parameters */
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800970e:	4ba4      	ldr	r3, [pc, #656]	; (80099a0 <HAL_GPIO_Init+0x29c>)
 8009710:	4298      	cmp	r0, r3
 8009712:	d017      	beq.n	8009744 <HAL_GPIO_Init+0x40>
 8009714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009718:	4298      	cmp	r0, r3
 800971a:	d013      	beq.n	8009744 <HAL_GPIO_Init+0x40>
 800971c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009720:	4298      	cmp	r0, r3
 8009722:	d00f      	beq.n	8009744 <HAL_GPIO_Init+0x40>
 8009724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009728:	4298      	cmp	r0, r3
 800972a:	d00b      	beq.n	8009744 <HAL_GPIO_Init+0x40>
 800972c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009730:	4298      	cmp	r0, r3
 8009732:	d007      	beq.n	8009744 <HAL_GPIO_Init+0x40>
 8009734:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8009738:	4298      	cmp	r0, r3
 800973a:	d003      	beq.n	8009744 <HAL_GPIO_Init+0x40>
 800973c:	21c3      	movs	r1, #195	; 0xc3
 800973e:	4899      	ldr	r0, [pc, #612]	; (80099a4 <HAL_GPIO_Init+0x2a0>)
 8009740:	f006 fa1a 	bl	800fb78 <assert_failed>
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	b29a      	uxth	r2, r3
 8009748:	b112      	cbz	r2, 8009750 <HAL_GPIO_Init+0x4c>
 800974a:	0c1b      	lsrs	r3, r3, #16
 800974c:	041b      	lsls	r3, r3, #16
 800974e:	b11b      	cbz	r3, 8009758 <HAL_GPIO_Init+0x54>
 8009750:	21c4      	movs	r1, #196	; 0xc4
 8009752:	4894      	ldr	r0, [pc, #592]	; (80099a4 <HAL_GPIO_Init+0x2a0>)
 8009754:	f006 fa10 	bl	800fb78 <assert_failed>
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b01      	cmp	r3, #1
 800975c:	d922      	bls.n	80097a4 <HAL_GPIO_Init+0xa0>
 800975e:	2b11      	cmp	r3, #17
 8009760:	d020      	beq.n	80097a4 <HAL_GPIO_Init+0xa0>
 8009762:	2b02      	cmp	r3, #2
 8009764:	d01e      	beq.n	80097a4 <HAL_GPIO_Init+0xa0>
 8009766:	2b12      	cmp	r3, #18
 8009768:	d01c      	beq.n	80097a4 <HAL_GPIO_Init+0xa0>
 800976a:	4a8f      	ldr	r2, [pc, #572]	; (80099a8 <HAL_GPIO_Init+0x2a4>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d019      	beq.n	80097a4 <HAL_GPIO_Init+0xa0>
 8009770:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8009774:	4293      	cmp	r3, r2
 8009776:	d015      	beq.n	80097a4 <HAL_GPIO_Init+0xa0>
 8009778:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 800977c:	4293      	cmp	r3, r2
 800977e:	d011      	beq.n	80097a4 <HAL_GPIO_Init+0xa0>
 8009780:	f5a2 12f8 	sub.w	r2, r2, #2031616	; 0x1f0000
 8009784:	4293      	cmp	r3, r2
 8009786:	d00d      	beq.n	80097a4 <HAL_GPIO_Init+0xa0>
 8009788:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 800978c:	4293      	cmp	r3, r2
 800978e:	d009      	beq.n	80097a4 <HAL_GPIO_Init+0xa0>
 8009790:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8009794:	4293      	cmp	r3, r2
 8009796:	d005      	beq.n	80097a4 <HAL_GPIO_Init+0xa0>
 8009798:	2b03      	cmp	r3, #3
 800979a:	d003      	beq.n	80097a4 <HAL_GPIO_Init+0xa0>
 800979c:	21c5      	movs	r1, #197	; 0xc5
 800979e:	4881      	ldr	r0, [pc, #516]	; (80099a4 <HAL_GPIO_Init+0x2a0>)
 80097a0:	f006 f9ea 	bl	800fb78 <assert_failed>
	assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d801      	bhi.n	80097ae <HAL_GPIO_Init+0xaa>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();

				temp = SYSCFG->EXTICR[position >> 2U];
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80097aa:	2500      	movs	r5, #0
 80097ac:	e0b9      	b.n	8009922 <HAL_GPIO_Init+0x21e>
	assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80097ae:	21c6      	movs	r1, #198	; 0xc6
 80097b0:	487c      	ldr	r0, [pc, #496]	; (80099a4 <HAL_GPIO_Init+0x2a0>)
 80097b2:	f006 f9e1 	bl	800fb78 <assert_failed>
 80097b6:	e7f8      	b.n	80097aa <HAL_GPIO_Init+0xa6>
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	b1cb      	cbz	r3, 80097f0 <HAL_GPIO_Init+0xec>
 80097bc:	2b09      	cmp	r3, #9
 80097be:	d017      	beq.n	80097f0 <HAL_GPIO_Init+0xec>
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d015      	beq.n	80097f0 <HAL_GPIO_Init+0xec>
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d013      	beq.n	80097f0 <HAL_GPIO_Init+0xec>
 80097c8:	2b04      	cmp	r3, #4
 80097ca:	d011      	beq.n	80097f0 <HAL_GPIO_Init+0xec>
 80097cc:	2b05      	cmp	r3, #5
 80097ce:	d00f      	beq.n	80097f0 <HAL_GPIO_Init+0xec>
 80097d0:	2b06      	cmp	r3, #6
 80097d2:	d00d      	beq.n	80097f0 <HAL_GPIO_Init+0xec>
 80097d4:	2b07      	cmp	r3, #7
 80097d6:	d00b      	beq.n	80097f0 <HAL_GPIO_Init+0xec>
 80097d8:	2b08      	cmp	r3, #8
 80097da:	d009      	beq.n	80097f0 <HAL_GPIO_Init+0xec>
 80097dc:	2b0a      	cmp	r3, #10
 80097de:	d007      	beq.n	80097f0 <HAL_GPIO_Init+0xec>
 80097e0:	2b0c      	cmp	r3, #12
 80097e2:	d005      	beq.n	80097f0 <HAL_GPIO_Init+0xec>
 80097e4:	2b0f      	cmp	r3, #15
 80097e6:	d003      	beq.n	80097f0 <HAL_GPIO_Init+0xec>
 80097e8:	21d4      	movs	r1, #212	; 0xd4
 80097ea:	486e      	ldr	r0, [pc, #440]	; (80099a4 <HAL_GPIO_Init+0x2a0>)
 80097ec:	f006 f9c4 	bl	800fb78 <assert_failed>
				temp = GPIOx->AFR[position >> 3U];
 80097f0:	08ea      	lsrs	r2, r5, #3
 80097f2:	3208      	adds	r2, #8
 80097f4:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
				temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 80097f8:	f005 0107 	and.w	r1, r5, #7
 80097fc:	0089      	lsls	r1, r1, #2
 80097fe:	200f      	movs	r0, #15
 8009800:	4088      	lsls	r0, r1
 8009802:	ea23 0300 	bic.w	r3, r3, r0
				temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009806:	6938      	ldr	r0, [r7, #16]
 8009808:	fa00 f101 	lsl.w	r1, r0, r1
 800980c:	430b      	orrs	r3, r1
				GPIOx->AFR[position >> 3U] = temp;
 800980e:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 8009812:	e096      	b.n	8009942 <HAL_GPIO_Init+0x23e>
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2b03      	cmp	r3, #3
 8009818:	f200 80b0 	bhi.w	800997c <HAL_GPIO_Init+0x278>
				temp = GPIOx->OSPEEDR;
 800981c:	f8d8 3008 	ldr.w	r3, [r8, #8]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009820:	4033      	ands	r3, r6
				temp |= (GPIO_Init->Speed << (position * 2U));
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	fa02 f20a 	lsl.w	r2, r2, sl
 8009828:	4313      	orrs	r3, r2
				GPIOx->OSPEEDR = temp;
 800982a:	f8c8 3008 	str.w	r3, [r8, #8]
				temp = GPIOx->OTYPER;
 800982e:	f8d8 3004 	ldr.w	r3, [r8, #4]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8009832:	ea23 0404 	bic.w	r4, r3, r4
				temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800983c:	40ab      	lsls	r3, r5
 800983e:	431c      	orrs	r4, r3
				GPIOx->OTYPER = temp;
 8009840:	f8c8 4004 	str.w	r4, [r8, #4]
			temp = GPIOx->PUPDR;
 8009844:	f8d8 300c 	ldr.w	r3, [r8, #12]
			temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009848:	401e      	ands	r6, r3
			temp |= ((GPIO_Init->Pull) << (position * 2U));
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	fa03 f30a 	lsl.w	r3, r3, sl
 8009850:	431e      	orrs	r6, r3
			GPIOx->PUPDR = temp;
 8009852:	f8c8 600c 	str.w	r6, [r8, #12]
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800985c:	d060      	beq.n	8009920 <HAL_GPIO_Init+0x21c>
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 800985e:	2300      	movs	r3, #0
 8009860:	9301      	str	r3, [sp, #4]
 8009862:	4b52      	ldr	r3, [pc, #328]	; (80099ac <HAL_GPIO_Init+0x2a8>)
 8009864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800986a:	645a      	str	r2, [r3, #68]	; 0x44
 800986c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800986e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009872:	9301      	str	r3, [sp, #4]
 8009874:	9b01      	ldr	r3, [sp, #4]
				temp = SYSCFG->EXTICR[position >> 2U];
 8009876:	08aa      	lsrs	r2, r5, #2
 8009878:	1c91      	adds	r1, r2, #2
 800987a:	4b4d      	ldr	r3, [pc, #308]	; (80099b0 <HAL_GPIO_Init+0x2ac>)
 800987c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009880:	f005 0103 	and.w	r1, r5, #3
 8009884:	0089      	lsls	r1, r1, #2
 8009886:	200f      	movs	r0, #15
 8009888:	4088      	lsls	r0, r1
 800988a:	ea23 0300 	bic.w	r3, r3, r0
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800988e:	4844      	ldr	r0, [pc, #272]	; (80099a0 <HAL_GPIO_Init+0x29c>)
 8009890:	4580      	cmp	r8, r0
 8009892:	d07a      	beq.n	800998a <HAL_GPIO_Init+0x286>
 8009894:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009898:	4580      	cmp	r8, r0
 800989a:	d078      	beq.n	800998e <HAL_GPIO_Init+0x28a>
 800989c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80098a0:	4580      	cmp	r8, r0
 80098a2:	d076      	beq.n	8009992 <HAL_GPIO_Init+0x28e>
 80098a4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80098a8:	4580      	cmp	r8, r0
 80098aa:	d074      	beq.n	8009996 <HAL_GPIO_Init+0x292>
 80098ac:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80098b0:	4580      	cmp	r8, r0
 80098b2:	d068      	beq.n	8009986 <HAL_GPIO_Init+0x282>
 80098b4:	2007      	movs	r0, #7
 80098b6:	fa00 f101 	lsl.w	r1, r0, r1
 80098ba:	430b      	orrs	r3, r1
				SYSCFG->EXTICR[position >> 2U] = temp;
 80098bc:	3202      	adds	r2, #2
 80098be:	493c      	ldr	r1, [pc, #240]	; (80099b0 <HAL_GPIO_Init+0x2ac>)
 80098c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 80098c4:	4b3b      	ldr	r3, [pc, #236]	; (80099b4 <HAL_GPIO_Init+0x2b0>)
 80098c6:	681a      	ldr	r2, [r3, #0]
				temp &= ~((uint32_t)iocurrent);
 80098c8:	ea6f 0309 	mvn.w	r3, r9
 80098cc:	ea02 0103 	and.w	r1, r2, r3
				if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 80098d6:	d001      	beq.n	80098dc <HAL_GPIO_Init+0x1d8>
					temp |= iocurrent;
 80098d8:	ea49 0102 	orr.w	r1, r9, r2
				}
				EXTI->IMR = temp;
 80098dc:	4a35      	ldr	r2, [pc, #212]	; (80099b4 <HAL_GPIO_Init+0x2b0>)
 80098de:	6011      	str	r1, [r2, #0]

				temp = EXTI->EMR;
 80098e0:	6852      	ldr	r2, [r2, #4]
				temp &= ~((uint32_t)iocurrent);
 80098e2:	ea03 0102 	and.w	r1, r3, r2
				if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 80098ec:	d001      	beq.n	80098f2 <HAL_GPIO_Init+0x1ee>
					temp |= iocurrent;
 80098ee:	ea49 0102 	orr.w	r1, r9, r2
				}
				EXTI->EMR = temp;
 80098f2:	4a30      	ldr	r2, [pc, #192]	; (80099b4 <HAL_GPIO_Init+0x2b0>)
 80098f4:	6051      	str	r1, [r2, #4]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 80098f6:	6892      	ldr	r2, [r2, #8]
				temp &= ~((uint32_t)iocurrent);
 80098f8:	ea03 0102 	and.w	r1, r3, r2
				if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8009902:	d001      	beq.n	8009908 <HAL_GPIO_Init+0x204>
					temp |= iocurrent;
 8009904:	ea49 0102 	orr.w	r1, r9, r2
				}
				EXTI->RTSR = temp;
 8009908:	4a2a      	ldr	r2, [pc, #168]	; (80099b4 <HAL_GPIO_Init+0x2b0>)
 800990a:	6091      	str	r1, [r2, #8]

				temp = EXTI->FTSR;
 800990c:	68d2      	ldr	r2, [r2, #12]
				temp &= ~((uint32_t)iocurrent);
 800990e:	4013      	ands	r3, r2
				if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8009916:	d001      	beq.n	800991c <HAL_GPIO_Init+0x218>
					temp |= iocurrent;
 8009918:	ea49 0302 	orr.w	r3, r9, r2
				}
				EXTI->FTSR = temp;
 800991c:	4a25      	ldr	r2, [pc, #148]	; (80099b4 <HAL_GPIO_Init+0x2b0>)
 800991e:	60d3      	str	r3, [r2, #12]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8009920:	3501      	adds	r5, #1
 8009922:	2d0f      	cmp	r5, #15
 8009924:	d839      	bhi.n	800999a <HAL_GPIO_Init+0x296>
		ioposition = 0x01U << position;
 8009926:	2401      	movs	r4, #1
 8009928:	40ac      	lsls	r4, r5
		iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	ea04 0903 	and.w	r9, r4, r3
		if (iocurrent == ioposition) {
 8009930:	454c      	cmp	r4, r9
 8009932:	d1f5      	bne.n	8009920 <HAL_GPIO_Init+0x21c>
			if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b02      	cmp	r3, #2
 8009938:	f43f af3e 	beq.w	80097b8 <HAL_GPIO_Init+0xb4>
 800993c:	2b12      	cmp	r3, #18
 800993e:	f43f af3b 	beq.w	80097b8 <HAL_GPIO_Init+0xb4>
			temp = GPIOx->MODER;
 8009942:	f8d8 3000 	ldr.w	r3, [r8]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009946:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800994a:	2603      	movs	r6, #3
 800994c:	fa06 f60a 	lsl.w	r6, r6, sl
 8009950:	43f6      	mvns	r6, r6
 8009952:	4033      	ands	r3, r6
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	f002 0203 	and.w	r2, r2, #3
 800995a:	fa02 f20a 	lsl.w	r2, r2, sl
 800995e:	4313      	orrs	r3, r2
			GPIOx->MODER = temp;
 8009960:	f8c8 3000 	str.w	r3, [r8]
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	1e5a      	subs	r2, r3, #1
 8009968:	2a01      	cmp	r2, #1
 800996a:	f67f af53 	bls.w	8009814 <HAL_GPIO_Init+0x110>
 800996e:	2b11      	cmp	r3, #17
 8009970:	f43f af50 	beq.w	8009814 <HAL_GPIO_Init+0x110>
			    (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 8009974:	2b12      	cmp	r3, #18
 8009976:	f47f af65 	bne.w	8009844 <HAL_GPIO_Init+0x140>
 800997a:	e74b      	b.n	8009814 <HAL_GPIO_Init+0x110>
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800997c:	21e6      	movs	r1, #230	; 0xe6
 800997e:	4809      	ldr	r0, [pc, #36]	; (80099a4 <HAL_GPIO_Init+0x2a0>)
 8009980:	f006 f8fa 	bl	800fb78 <assert_failed>
 8009984:	e74a      	b.n	800981c <HAL_GPIO_Init+0x118>
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009986:	2004      	movs	r0, #4
 8009988:	e795      	b.n	80098b6 <HAL_GPIO_Init+0x1b2>
 800998a:	2000      	movs	r0, #0
 800998c:	e793      	b.n	80098b6 <HAL_GPIO_Init+0x1b2>
 800998e:	2001      	movs	r0, #1
 8009990:	e791      	b.n	80098b6 <HAL_GPIO_Init+0x1b2>
 8009992:	2002      	movs	r0, #2
 8009994:	e78f      	b.n	80098b6 <HAL_GPIO_Init+0x1b2>
 8009996:	2003      	movs	r0, #3
 8009998:	e78d      	b.n	80098b6 <HAL_GPIO_Init+0x1b2>
			}
		}
	}
}
 800999a:	b002      	add	sp, #8
 800999c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a0:	40020000 	.word	0x40020000
 80099a4:	08021d78 	.word	0x08021d78
 80099a8:	10110000 	.word	0x10110000
 80099ac:	40023800 	.word	0x40023800
 80099b0:	40013800 	.word	0x40013800
 80099b4:	40013c00 	.word	0x40013c00

080099b8 <HAL_GPIO_DeInit>:
 * @param  GPIO_Pin specifies the port bit to be written.
 *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
 * @retval None
 */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80099b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ba:	4604      	mov	r4, r0
 80099bc:	460d      	mov	r5, r1
	uint32_t ioposition = 0x00U;
	uint32_t iocurrent = 0x00U;
	uint32_t tmp = 0x00U;

	/* Check the parameters */
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80099be:	4b47      	ldr	r3, [pc, #284]	; (8009adc <HAL_GPIO_DeInit+0x124>)
 80099c0:	4298      	cmp	r0, r3
 80099c2:	d018      	beq.n	80099f6 <HAL_GPIO_DeInit+0x3e>
 80099c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099c8:	4298      	cmp	r0, r3
 80099ca:	d014      	beq.n	80099f6 <HAL_GPIO_DeInit+0x3e>
 80099cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099d0:	4298      	cmp	r0, r3
 80099d2:	d010      	beq.n	80099f6 <HAL_GPIO_DeInit+0x3e>
 80099d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099d8:	4298      	cmp	r0, r3
 80099da:	d00c      	beq.n	80099f6 <HAL_GPIO_DeInit+0x3e>
 80099dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099e0:	4298      	cmp	r0, r3
 80099e2:	d008      	beq.n	80099f6 <HAL_GPIO_DeInit+0x3e>
 80099e4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80099e8:	4298      	cmp	r0, r3
 80099ea:	d004      	beq.n	80099f6 <HAL_GPIO_DeInit+0x3e>
 80099ec:	f240 1137 	movw	r1, #311	; 0x137
 80099f0:	483b      	ldr	r0, [pc, #236]	; (8009ae0 <HAL_GPIO_DeInit+0x128>)
 80099f2:	f006 f8c1 	bl	800fb78 <assert_failed>
			GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

			/*------------------------- EXTI Mode Configuration --------------------*/
			tmp = SYSCFG->EXTICR[position >> 2U];
			tmp &= (0x0FU << (4U * (position & 0x03U)));
			if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)))) {
 80099f6:	2300      	movs	r3, #0
 80099f8:	e007      	b.n	8009a0a <HAL_GPIO_DeInit+0x52>
 80099fa:	2604      	movs	r6, #4
 80099fc:	e000      	b.n	8009a00 <HAL_GPIO_DeInit+0x48>
 80099fe:	2600      	movs	r6, #0
 8009a00:	fa06 f202 	lsl.w	r2, r6, r2
 8009a04:	4291      	cmp	r1, r2
 8009a06:	d050      	beq.n	8009aaa <HAL_GPIO_DeInit+0xf2>
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8009a08:	3301      	adds	r3, #1
 8009a0a:	2b0f      	cmp	r3, #15
 8009a0c:	d865      	bhi.n	8009ada <HAL_GPIO_DeInit+0x122>
		ioposition = 0x01U << position;
 8009a0e:	2201      	movs	r2, #1
 8009a10:	409a      	lsls	r2, r3
		iocurrent = (GPIO_Pin) & ioposition;
 8009a12:	ea02 0005 	and.w	r0, r2, r5
		if (iocurrent == ioposition) {
 8009a16:	4282      	cmp	r2, r0
 8009a18:	d1f6      	bne.n	8009a08 <HAL_GPIO_DeInit+0x50>
			GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009a1a:	6826      	ldr	r6, [r4, #0]
 8009a1c:	005f      	lsls	r7, r3, #1
 8009a1e:	2103      	movs	r1, #3
 8009a20:	40b9      	lsls	r1, r7
 8009a22:	43c9      	mvns	r1, r1
 8009a24:	400e      	ands	r6, r1
 8009a26:	6026      	str	r6, [r4, #0]
			GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 8009a28:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8009a2c:	f10e 0e08 	add.w	lr, lr, #8
 8009a30:	f854 c02e 	ldr.w	ip, [r4, lr, lsl #2]
 8009a34:	f003 0607 	and.w	r6, r3, #7
 8009a38:	00b6      	lsls	r6, r6, #2
 8009a3a:	270f      	movs	r7, #15
 8009a3c:	fa07 f606 	lsl.w	r6, r7, r6
 8009a40:	ea2c 0606 	bic.w	r6, ip, r6
 8009a44:	f844 602e 	str.w	r6, [r4, lr, lsl #2]
			GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009a48:	68a6      	ldr	r6, [r4, #8]
 8009a4a:	400e      	ands	r6, r1
 8009a4c:	60a6      	str	r6, [r4, #8]
			GPIOx->OTYPER &= ~(GPIO_OTYPER_OT_0 << position);
 8009a4e:	6866      	ldr	r6, [r4, #4]
 8009a50:	ea26 0202 	bic.w	r2, r6, r2
 8009a54:	6062      	str	r2, [r4, #4]
			GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009a56:	68e2      	ldr	r2, [r4, #12]
 8009a58:	4011      	ands	r1, r2
 8009a5a:	60e1      	str	r1, [r4, #12]
			tmp = SYSCFG->EXTICR[position >> 2U];
 8009a5c:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8009a60:	f10e 0102 	add.w	r1, lr, #2
 8009a64:	4a1f      	ldr	r2, [pc, #124]	; (8009ae4 <HAL_GPIO_DeInit+0x12c>)
 8009a66:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
			tmp &= (0x0FU << (4U * (position & 0x03U)));
 8009a6a:	f003 0203 	and.w	r2, r3, #3
 8009a6e:	0092      	lsls	r2, r2, #2
 8009a70:	4097      	lsls	r7, r2
 8009a72:	4039      	ands	r1, r7
			if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)))) {
 8009a74:	4e19      	ldr	r6, [pc, #100]	; (8009adc <HAL_GPIO_DeInit+0x124>)
 8009a76:	42b4      	cmp	r4, r6
 8009a78:	d0c1      	beq.n	80099fe <HAL_GPIO_DeInit+0x46>
 8009a7a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009a7e:	42b4      	cmp	r4, r6
 8009a80:	d00d      	beq.n	8009a9e <HAL_GPIO_DeInit+0xe6>
 8009a82:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009a86:	42b4      	cmp	r4, r6
 8009a88:	d00b      	beq.n	8009aa2 <HAL_GPIO_DeInit+0xea>
 8009a8a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009a8e:	42b4      	cmp	r4, r6
 8009a90:	d009      	beq.n	8009aa6 <HAL_GPIO_DeInit+0xee>
 8009a92:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009a96:	42b4      	cmp	r4, r6
 8009a98:	d0af      	beq.n	80099fa <HAL_GPIO_DeInit+0x42>
 8009a9a:	2607      	movs	r6, #7
 8009a9c:	e7b0      	b.n	8009a00 <HAL_GPIO_DeInit+0x48>
 8009a9e:	2601      	movs	r6, #1
 8009aa0:	e7ae      	b.n	8009a00 <HAL_GPIO_DeInit+0x48>
 8009aa2:	2602      	movs	r6, #2
 8009aa4:	e7ac      	b.n	8009a00 <HAL_GPIO_DeInit+0x48>
 8009aa6:	2603      	movs	r6, #3
 8009aa8:	e7aa      	b.n	8009a00 <HAL_GPIO_DeInit+0x48>
				/* Configure the External Interrupt or event for the current IO */
				tmp = 0x0FU << (4U * (position & 0x03U));
				SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009aaa:	4e0e      	ldr	r6, [pc, #56]	; (8009ae4 <HAL_GPIO_DeInit+0x12c>)
 8009aac:	f10e 0202 	add.w	r2, lr, #2
 8009ab0:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
 8009ab4:	ea21 0707 	bic.w	r7, r1, r7
 8009ab8:	f846 7022 	str.w	r7, [r6, r2, lsl #2]

				/* Clear EXTI line configuration */
				EXTI->IMR &= ~((uint32_t)iocurrent);
 8009abc:	490a      	ldr	r1, [pc, #40]	; (8009ae8 <HAL_GPIO_DeInit+0x130>)
 8009abe:	680e      	ldr	r6, [r1, #0]
 8009ac0:	43c2      	mvns	r2, r0
 8009ac2:	4016      	ands	r6, r2
 8009ac4:	600e      	str	r6, [r1, #0]
				EXTI->EMR &= ~((uint32_t)iocurrent);
 8009ac6:	6848      	ldr	r0, [r1, #4]
 8009ac8:	4010      	ands	r0, r2
 8009aca:	6048      	str	r0, [r1, #4]

				/* Clear Rising Falling edge configuration */
				EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009acc:	6888      	ldr	r0, [r1, #8]
 8009ace:	4010      	ands	r0, r2
 8009ad0:	6088      	str	r0, [r1, #8]
				EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009ad2:	68c8      	ldr	r0, [r1, #12]
 8009ad4:	4002      	ands	r2, r0
 8009ad6:	60ca      	str	r2, [r1, #12]
 8009ad8:	e796      	b.n	8009a08 <HAL_GPIO_DeInit+0x50>
			}
		}
	}
}
 8009ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009adc:	40020000 	.word	0x40020000
 8009ae0:	08021d78 	.word	0x08021d78
 8009ae4:	40013800 	.word	0x40013800
 8009ae8:	40013c00 	.word	0x40013c00

08009aec <HAL_GPIO_ReadPin>:
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009aec:	b538      	push	{r3, r4, r5, lr}
 8009aee:	4605      	mov	r5, r0
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
 8009af0:	460c      	mov	r4, r1
 8009af2:	b121      	cbz	r1, 8009afe <HAL_GPIO_ReadPin+0x12>

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET) {
 8009af4:	692b      	ldr	r3, [r5, #16]
 8009af6:	421c      	tst	r4, r3
 8009af8:	d107      	bne.n	8009b0a <HAL_GPIO_ReadPin+0x1e>
		bitstatus = GPIO_PIN_SET;
	}else {
		bitstatus = GPIO_PIN_RESET;
 8009afa:	2000      	movs	r0, #0
	}
	return bitstatus;
}
 8009afc:	bd38      	pop	{r3, r4, r5, pc}
	assert_param(IS_GPIO_PIN(GPIO_Pin));
 8009afe:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8009b02:	4803      	ldr	r0, [pc, #12]	; (8009b10 <HAL_GPIO_ReadPin+0x24>)
 8009b04:	f006 f838 	bl	800fb78 <assert_failed>
 8009b08:	e7f4      	b.n	8009af4 <HAL_GPIO_ReadPin+0x8>
		bitstatus = GPIO_PIN_SET;
 8009b0a:	2001      	movs	r0, #1
 8009b0c:	bd38      	pop	{r3, r4, r5, pc}
 8009b0e:	bf00      	nop
 8009b10:	08021d78 	.word	0x08021d78

08009b14 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009b14:	b570      	push	{r4, r5, r6, lr}
 8009b16:	4606      	mov	r6, r0
 8009b18:	4615      	mov	r5, r2
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	b151      	cbz	r1, 8009b34 <HAL_GPIO_WritePin+0x20>
	assert_param(IS_GPIO_PIN_ACTION(PinState));
 8009b1e:	2d01      	cmp	r5, #1
 8009b20:	d904      	bls.n	8009b2c <HAL_GPIO_WritePin+0x18>
 8009b22:	f240 11a1 	movw	r1, #417	; 0x1a1
 8009b26:	4807      	ldr	r0, [pc, #28]	; (8009b44 <HAL_GPIO_WritePin+0x30>)
 8009b28:	f006 f826 	bl	800fb78 <assert_failed>

	if (PinState != GPIO_PIN_RESET) {
 8009b2c:	b945      	cbnz	r5, 8009b40 <HAL_GPIO_WritePin+0x2c>
		GPIOx->BSRR = GPIO_Pin;
	}else {
		GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009b2e:	0424      	lsls	r4, r4, #16
 8009b30:	61b4      	str	r4, [r6, #24]
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
	assert_param(IS_GPIO_PIN(GPIO_Pin));
 8009b34:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8009b38:	4802      	ldr	r0, [pc, #8]	; (8009b44 <HAL_GPIO_WritePin+0x30>)
 8009b3a:	f006 f81d 	bl	800fb78 <assert_failed>
 8009b3e:	e7ee      	b.n	8009b1e <HAL_GPIO_WritePin+0xa>
		GPIOx->BSRR = GPIO_Pin;
 8009b40:	61b4      	str	r4, [r6, #24]
 8009b42:	bd70      	pop	{r4, r5, r6, pc}
 8009b44:	08021d78 	.word	0x08021d78

08009b48 <HAL_GPIO_EXTI_IRQHandler>:
 * @brief  This function handles EXTI interrupt request.
 * @param  GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009b48:	b508      	push	{r3, lr}
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) {
 8009b4a:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8009b4c:	695b      	ldr	r3, [r3, #20]
 8009b4e:	4203      	tst	r3, r0
 8009b50:	d100      	bne.n	8009b54 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8009b52:	bd08      	pop	{r3, pc}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009b54:	4b02      	ldr	r3, [pc, #8]	; (8009b60 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8009b56:	6158      	str	r0, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009b58:	f005 fb06 	bl	800f168 <HAL_GPIO_EXTI_Callback>
	}
}
 8009b5c:	e7f9      	b.n	8009b52 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8009b5e:	bf00      	nop
 8009b60:	40013c00 	.word	0x40013c00

08009b64 <I2C_Master_SB>:
 *         the configuration information for I2C module
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
	if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8009b64:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b40      	cmp	r3, #64	; 0x40
 8009b6c:	d013      	beq.n	8009b96 <I2C_Master_SB+0x32>
			hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
		}else {
			hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
		}
	}else {
		if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 8009b6e:	6903      	ldr	r3, [r0, #16]
 8009b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b74:	d01e      	beq.n	8009bb4 <I2C_Master_SB+0x50>
				hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
			}else {
				hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
			}
		}else {
			if (hi2c->EventCount == 0U) {
 8009b76:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d02d      	beq.n	8009bd8 <I2C_Master_SB+0x74>
				/* Send header of slave address */
				hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
			}else if (hi2c->EventCount == 1U) {
 8009b7c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d133      	bne.n	8009bea <I2C_Master_SB+0x86>
				/* Send header of slave address */
				hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009b82:	6802      	ldr	r2, [r0, #0]
 8009b84:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009b86:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8009b8a:	f003 0306 	and.w	r3, r3, #6
 8009b8e:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8009b92:	6113      	str	r3, [r2, #16]
 8009b94:	e029      	b.n	8009bea <I2C_Master_SB+0x86>
		if (hi2c->EventCount == 0U) {
 8009b96:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009b98:	b92b      	cbnz	r3, 8009ba6 <I2C_Master_SB+0x42>
			hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009b9a:	6802      	ldr	r2, [r0, #0]
 8009b9c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009b9e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009ba2:	6113      	str	r3, [r2, #16]
 8009ba4:	e021      	b.n	8009bea <I2C_Master_SB+0x86>
			hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009ba6:	6802      	ldr	r2, [r0, #0]
 8009ba8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009baa:	f043 0301 	orr.w	r3, r3, #1
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	6113      	str	r3, [r2, #16]
 8009bb2:	e01a      	b.n	8009bea <I2C_Master_SB+0x86>
			if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 8009bb4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	2b21      	cmp	r3, #33	; 0x21
 8009bbc:	d006      	beq.n	8009bcc <I2C_Master_SB+0x68>
				hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009bbe:	6802      	ldr	r2, [r0, #0]
 8009bc0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009bc2:	f043 0301 	orr.w	r3, r3, #1
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	6113      	str	r3, [r2, #16]
 8009bca:	e00e      	b.n	8009bea <I2C_Master_SB+0x86>
				hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009bcc:	6802      	ldr	r2, [r0, #0]
 8009bce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009bd0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009bd4:	6113      	str	r3, [r2, #16]
 8009bd6:	e008      	b.n	8009bea <I2C_Master_SB+0x86>
				hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009bd8:	6802      	ldr	r2, [r0, #0]
 8009bda:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009bdc:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8009be0:	f003 0306 	and.w	r3, r3, #6
 8009be4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8009be8:	6113      	str	r3, [r2, #16]
			}
		}
	}

	return HAL_OK;
}
 8009bea:	2000      	movs	r0, #0
 8009bec:	4770      	bx	lr

08009bee <I2C_Master_ADD10>:
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
	/* Send slave address */
	hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009bee:	6802      	ldr	r2, [r0, #0]
 8009bf0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	6113      	str	r3, [r2, #16]

	return HAL_OK;
}
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	4770      	bx	lr

08009bfa <I2C_Master_ADDR>:
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *         the configuration information for I2C module
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8009bfa:	b410      	push	{r4}
 8009bfc:	b08b      	sub	sp, #44	; 0x2c
	/* Declaration of temporary variable to prevent undefined behavior of volatile usage */
	uint32_t CurrentMode = hi2c->Mode;
 8009bfe:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009c02:	b2da      	uxtb	r2, r3
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009c04:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	uint32_t Prev_State = hi2c->PreviousState;
 8009c06:	6b04      	ldr	r4, [r0, #48]	; 0x30

	if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 8009c08:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b22      	cmp	r3, #34	; 0x22
 8009c10:	d00c      	beq.n	8009c2c <I2C_Master_ADDR+0x32>
			/* Reset Event counter  */
			hi2c->EventCount = 0U;
		}
	}else {
		/* Clear ADDR flag */
		__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c12:	2300      	movs	r3, #0
 8009c14:	9309      	str	r3, [sp, #36]	; 0x24
 8009c16:	6803      	ldr	r3, [r0, #0]
 8009c18:	695a      	ldr	r2, [r3, #20]
 8009c1a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
	}

	return HAL_OK;
}
 8009c22:	2000      	movs	r0, #0
 8009c24:	b00b      	add	sp, #44	; 0x2c
 8009c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c2a:	4770      	bx	lr
		if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM)) {
 8009c2c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009c2e:	b90b      	cbnz	r3, 8009c34 <I2C_Master_ADDR+0x3a>
 8009c30:	2a40      	cmp	r2, #64	; 0x40
 8009c32:	d017      	beq.n	8009c64 <I2C_Master_ADDR+0x6a>
		}else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)) {
 8009c34:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009c36:	b91b      	cbnz	r3, 8009c40 <I2C_Master_ADDR+0x46>
 8009c38:	6903      	ldr	r3, [r0, #16]
 8009c3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009c3e:	d019      	beq.n	8009c74 <I2C_Master_ADDR+0x7a>
			if (hi2c->XferCount == 0U) {
 8009c40:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d125      	bne.n	8009c94 <I2C_Master_ADDR+0x9a>
				__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c48:	9302      	str	r3, [sp, #8]
 8009c4a:	6803      	ldr	r3, [r0, #0]
 8009c4c:	695a      	ldr	r2, [r3, #20]
 8009c4e:	9202      	str	r2, [sp, #8]
 8009c50:	699a      	ldr	r2, [r3, #24]
 8009c52:	9202      	str	r2, [sp, #8]
 8009c54:	9a02      	ldr	r2, [sp, #8]
				hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c5c:	601a      	str	r2, [r3, #0]
			hi2c->EventCount = 0U;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	6503      	str	r3, [r0, #80]	; 0x50
 8009c62:	e7de      	b.n	8009c22 <I2C_Master_ADDR+0x28>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	6803      	ldr	r3, [r0, #0]
 8009c68:	695a      	ldr	r2, [r3, #20]
 8009c6a:	9200      	str	r2, [sp, #0]
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	9b00      	ldr	r3, [sp, #0]
 8009c72:	e7d6      	b.n	8009c22 <I2C_Master_ADDR+0x28>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c74:	2300      	movs	r3, #0
 8009c76:	9301      	str	r3, [sp, #4]
 8009c78:	6803      	ldr	r3, [r0, #0]
 8009c7a:	695a      	ldr	r2, [r3, #20]
 8009c7c:	9201      	str	r2, [sp, #4]
 8009c7e:	699a      	ldr	r2, [r3, #24]
 8009c80:	9201      	str	r2, [sp, #4]
 8009c82:	9a01      	ldr	r2, [sp, #4]
			hi2c->Instance->CR1 |= I2C_CR1_START;
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c8a:	601a      	str	r2, [r3, #0]
			hi2c->EventCount++;
 8009c8c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009c8e:	3301      	adds	r3, #1
 8009c90:	6503      	str	r3, [r0, #80]	; 0x50
 8009c92:	e7c6      	b.n	8009c22 <I2C_Master_ADDR+0x28>
			}else if (hi2c->XferCount == 1U) {
 8009c94:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d01a      	beq.n	8009cd2 <I2C_Master_ADDR+0xd8>
			}else if (hi2c->XferCount == 2U) {
 8009c9c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d06b      	beq.n	8009d7c <I2C_Master_ADDR+0x182>
				hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8009ca4:	6802      	ldr	r2, [r0, #0]
 8009ca6:	6813      	ldr	r3, [r2, #0]
 8009ca8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009cac:	6013      	str	r3, [r2, #0]
				if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8009cae:	6803      	ldr	r3, [r0, #0]
 8009cb0:	685a      	ldr	r2, [r3, #4]
 8009cb2:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009cb6:	d003      	beq.n	8009cc0 <I2C_Master_ADDR+0xc6>
					hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8009cb8:	685a      	ldr	r2, [r3, #4]
 8009cba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009cbe:	605a      	str	r2, [r3, #4]
				__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	9308      	str	r3, [sp, #32]
 8009cc4:	6803      	ldr	r3, [r0, #0]
 8009cc6:	695a      	ldr	r2, [r3, #20]
 8009cc8:	9208      	str	r2, [sp, #32]
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	9308      	str	r3, [sp, #32]
 8009cce:	9b08      	ldr	r3, [sp, #32]
 8009cd0:	e7c5      	b.n	8009c5e <I2C_Master_ADDR+0x64>
				if (CurrentXferOptions == I2C_NO_OPTION_FRAME) {
 8009cd2:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8009cd6:	d016      	beq.n	8009d06 <I2C_Master_ADDR+0x10c>
				else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009cd8:	2904      	cmp	r1, #4
 8009cda:	d03d      	beq.n	8009d58 <I2C_Master_ADDR+0x15e>
 8009cdc:	2908      	cmp	r1, #8
 8009cde:	d03b      	beq.n	8009d58 <I2C_Master_ADDR+0x15e>
					 && (Prev_State != I2C_STATE_MASTER_BUSY_RX)) {
 8009ce0:	2c12      	cmp	r4, #18
 8009ce2:	d039      	beq.n	8009d58 <I2C_Master_ADDR+0x15e>
					if (hi2c->XferOptions != I2C_NEXT_FRAME) {
 8009ce4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d030      	beq.n	8009d4c <I2C_Master_ADDR+0x152>
						hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8009cea:	6802      	ldr	r2, [r0, #0]
 8009cec:	6813      	ldr	r3, [r2, #0]
 8009cee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cf2:	6013      	str	r3, [r2, #0]
					__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	9305      	str	r3, [sp, #20]
 8009cf8:	6803      	ldr	r3, [r0, #0]
 8009cfa:	695a      	ldr	r2, [r3, #20]
 8009cfc:	9205      	str	r2, [sp, #20]
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	9305      	str	r3, [sp, #20]
 8009d02:	9b05      	ldr	r3, [sp, #20]
 8009d04:	e7ab      	b.n	8009c5e <I2C_Master_ADDR+0x64>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8009d06:	6802      	ldr	r2, [r0, #0]
 8009d08:	6813      	ldr	r3, [r2, #0]
 8009d0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d0e:	6013      	str	r3, [r2, #0]
					if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8009d10:	6803      	ldr	r3, [r0, #0]
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009d18:	d00c      	beq.n	8009d34 <I2C_Master_ADDR+0x13a>
						hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d20:	601a      	str	r2, [r3, #0]
						__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d22:	2300      	movs	r3, #0
 8009d24:	9303      	str	r3, [sp, #12]
 8009d26:	6803      	ldr	r3, [r0, #0]
 8009d28:	695a      	ldr	r2, [r3, #20]
 8009d2a:	9203      	str	r2, [sp, #12]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	9303      	str	r3, [sp, #12]
 8009d30:	9b03      	ldr	r3, [sp, #12]
 8009d32:	e794      	b.n	8009c5e <I2C_Master_ADDR+0x64>
						__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d34:	2200      	movs	r2, #0
 8009d36:	9204      	str	r2, [sp, #16]
 8009d38:	695a      	ldr	r2, [r3, #20]
 8009d3a:	9204      	str	r2, [sp, #16]
 8009d3c:	699a      	ldr	r2, [r3, #24]
 8009d3e:	9204      	str	r2, [sp, #16]
 8009d40:	9a04      	ldr	r2, [sp, #16]
						hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d48:	601a      	str	r2, [r3, #0]
 8009d4a:	e788      	b.n	8009c5e <I2C_Master_ADDR+0x64>
						hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8009d4c:	6802      	ldr	r2, [r0, #0]
 8009d4e:	6813      	ldr	r3, [r2, #0]
 8009d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	e7cd      	b.n	8009cf4 <I2C_Master_ADDR+0xfa>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8009d58:	6802      	ldr	r2, [r0, #0]
 8009d5a:	6813      	ldr	r3, [r2, #0]
 8009d5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d60:	6013      	str	r3, [r2, #0]
					__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d62:	2300      	movs	r3, #0
 8009d64:	9306      	str	r3, [sp, #24]
 8009d66:	6803      	ldr	r3, [r0, #0]
 8009d68:	695a      	ldr	r2, [r3, #20]
 8009d6a:	9206      	str	r2, [sp, #24]
 8009d6c:	699a      	ldr	r2, [r3, #24]
 8009d6e:	9206      	str	r2, [sp, #24]
 8009d70:	9a06      	ldr	r2, [sp, #24]
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d78:	601a      	str	r2, [r3, #0]
 8009d7a:	e770      	b.n	8009c5e <I2C_Master_ADDR+0x64>
				if (hi2c->XferOptions != I2C_NEXT_FRAME) {
 8009d7c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d01b      	beq.n	8009dba <I2C_Master_ADDR+0x1c0>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8009d82:	6802      	ldr	r2, [r0, #0]
 8009d84:	6813      	ldr	r3, [r2, #0]
 8009d86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d8a:	6013      	str	r3, [r2, #0]
					hi2c->Instance->CR1 |= I2C_CR1_POS;
 8009d8c:	6802      	ldr	r2, [r0, #0]
 8009d8e:	6813      	ldr	r3, [r2, #0]
 8009d90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009d94:	6013      	str	r3, [r2, #0]
				if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8009d96:	6803      	ldr	r3, [r0, #0]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009d9e:	d003      	beq.n	8009da8 <I2C_Master_ADDR+0x1ae>
					hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8009da0:	685a      	ldr	r2, [r3, #4]
 8009da2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009da6:	605a      	str	r2, [r3, #4]
				__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009da8:	2300      	movs	r3, #0
 8009daa:	9307      	str	r3, [sp, #28]
 8009dac:	6803      	ldr	r3, [r0, #0]
 8009dae:	695a      	ldr	r2, [r3, #20]
 8009db0:	9207      	str	r2, [sp, #28]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	9307      	str	r3, [sp, #28]
 8009db6:	9b07      	ldr	r3, [sp, #28]
 8009db8:	e751      	b.n	8009c5e <I2C_Master_ADDR+0x64>
					hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8009dba:	6802      	ldr	r2, [r0, #0]
 8009dbc:	6813      	ldr	r3, [r2, #0]
 8009dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	e7e7      	b.n	8009d96 <I2C_Master_ADDR+0x19c>

08009dc6 <I2C_SlaveTransmit_BTF>:
 *         the configuration information for I2C module
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
	if (hi2c->XferCount != 0U) {
 8009dc6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	b153      	cbz	r3, 8009de2 <I2C_SlaveTransmit_BTF+0x1c>
		/* Write data to DR */
		hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8009dcc:	6802      	ldr	r2, [r0, #0]
 8009dce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009dd0:	1c59      	adds	r1, r3, #1
 8009dd2:	6241      	str	r1, [r0, #36]	; 0x24
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	6113      	str	r3, [r2, #16]
		hi2c->XferCount--;
 8009dd8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	8543      	strh	r3, [r0, #42]	; 0x2a
	}
	return HAL_OK;
}
 8009de2:	2000      	movs	r0, #0
 8009de4:	4770      	bx	lr

08009de6 <I2C_SlaveReceive_BTF>:
 *         the configuration information for I2C module
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
	if (hi2c->XferCount != 0U) {
 8009de6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	b153      	cbz	r3, 8009e02 <I2C_SlaveReceive_BTF+0x1c>
		/* Read data from DR */
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8009dec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009dee:	1c5a      	adds	r2, r3, #1
 8009df0:	6242      	str	r2, [r0, #36]	; 0x24
 8009df2:	6802      	ldr	r2, [r0, #0]
 8009df4:	6912      	ldr	r2, [r2, #16]
 8009df6:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8009df8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	8543      	strh	r3, [r0, #42]	; 0x2a
	}
	return HAL_OK;
}
 8009e02:	2000      	movs	r0, #0
 8009e04:	4770      	bx	lr

08009e06 <I2C_IsAcknowledgeFailed>:
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8009e06:	6803      	ldr	r3, [r0, #0]
 8009e08:	695a      	ldr	r2, [r3, #20]
 8009e0a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8009e0e:	d00d      	beq.n	8009e2c <I2C_IsAcknowledgeFailed+0x26>
		/* Clear NACKF Flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e14:	615a      	str	r2, [r3, #20]

		hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009e16:	2304      	movs	r3, #4
 8009e18:	6403      	str	r3, [r0, #64]	; 0x40
		hi2c->PreviousState = I2C_STATE_NONE;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	6303      	str	r3, [r0, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_READY;
 8009e1e:	2220      	movs	r2, #32
 8009e20:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 8009e24:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

		return HAL_ERROR;
 8009e28:	2001      	movs	r0, #1
 8009e2a:	4770      	bx	lr
	}
	return HAL_OK;
 8009e2c:	2000      	movs	r0, #0
}
 8009e2e:	4770      	bx	lr

08009e30 <I2C_WaitOnFlagUntilTimeout>:
{
 8009e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e32:	4606      	mov	r6, r0
 8009e34:	460c      	mov	r4, r1
 8009e36:	4617      	mov	r7, r2
 8009e38:	461d      	mov	r5, r3
	while ((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) {
 8009e3a:	e01e      	b.n	8009e7a <I2C_WaitOnFlagUntilTimeout+0x4a>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8009e3c:	b12d      	cbz	r5, 8009e4a <I2C_WaitOnFlagUntilTimeout+0x1a>
 8009e3e:	f7fe fcd3 	bl	80087e8 <HAL_GetTick>
 8009e42:	9b06      	ldr	r3, [sp, #24]
 8009e44:	1ac0      	subs	r0, r0, r3
 8009e46:	4285      	cmp	r5, r0
 8009e48:	d217      	bcs.n	8009e7a <I2C_WaitOnFlagUntilTimeout+0x4a>
				hi2c->PreviousState = I2C_STATE_NONE;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	6333      	str	r3, [r6, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 8009e4e:	2220      	movs	r2, #32
 8009e50:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e54:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
				__HAL_UNLOCK(hi2c);
 8009e58:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
				return HAL_TIMEOUT;
 8009e5c:	2003      	movs	r0, #3
 8009e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while ((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) {
 8009e60:	6833      	ldr	r3, [r6, #0]
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	ea24 0303 	bic.w	r3, r4, r3
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	fab3 f383 	clz	r3, r3
 8009e6e:	095b      	lsrs	r3, r3, #5
 8009e70:	42bb      	cmp	r3, r7
 8009e72:	d10f      	bne.n	8009e94 <I2C_WaitOnFlagUntilTimeout+0x64>
		if (Timeout != HAL_MAX_DELAY) {
 8009e74:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009e78:	d1e0      	bne.n	8009e3c <I2C_WaitOnFlagUntilTimeout+0xc>
	while ((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) {
 8009e7a:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d0ee      	beq.n	8009e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009e82:	6833      	ldr	r3, [r6, #0]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	ea24 0303 	bic.w	r3, r4, r3
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	fab3 f383 	clz	r3, r3
 8009e90:	095b      	lsrs	r3, r3, #5
 8009e92:	e7ed      	b.n	8009e70 <I2C_WaitOnFlagUntilTimeout+0x40>
	return HAL_OK;
 8009e94:	2000      	movs	r0, #0
}
 8009e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8009e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	460d      	mov	r5, r1
 8009e9e:	4616      	mov	r6, r2
 8009ea0:	461f      	mov	r7, r3
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8009ea2:	e032      	b.n	8009f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009eaa:	601a      	str	r2, [r3, #0]
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009eac:	6823      	ldr	r3, [r4, #0]
 8009eae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009eb2:	615a      	str	r2, [r3, #20]
			hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009eb4:	2304      	movs	r3, #4
 8009eb6:	6423      	str	r3, [r4, #64]	; 0x40
			hi2c->PreviousState = I2C_STATE_NONE;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	6323      	str	r3, [r4, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 8009ebc:	2220      	movs	r2, #32
 8009ebe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
			__HAL_UNLOCK(hi2c);
 8009ec2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			return HAL_ERROR;
 8009ec6:	2001      	movs	r0, #1
 8009ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8009eca:	b126      	cbz	r6, 8009ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
 8009ecc:	f7fe fc8c 	bl	80087e8 <HAL_GetTick>
 8009ed0:	1bc0      	subs	r0, r0, r7
 8009ed2:	4286      	cmp	r6, r0
 8009ed4:	d219      	bcs.n	8009f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
				hi2c->PreviousState = I2C_STATE_NONE;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	6323      	str	r3, [r4, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 8009eda:	2220      	movs	r2, #32
 8009edc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				__HAL_UNLOCK(hi2c);
 8009ee0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_TIMEOUT;
 8009ee4:	2003      	movs	r0, #3
 8009ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	695b      	ldr	r3, [r3, #20]
 8009eec:	ea25 0303 	bic.w	r3, r5, r3
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	3300      	adds	r3, #0
 8009ef4:	bf18      	it	ne
 8009ef6:	2301      	movne	r3, #1
 8009ef8:	b1a3      	cbz	r3, 8009f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8c>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	695a      	ldr	r2, [r3, #20]
 8009efe:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8009f02:	d1cf      	bne.n	8009ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
		if (Timeout != HAL_MAX_DELAY) {
 8009f04:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009f08:	d1df      	bne.n	8009eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x32>
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8009f0a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d0ea      	beq.n	8009ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x50>
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	ea25 0303 	bic.w	r3, r5, r3
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	3300      	adds	r3, #0
 8009f1e:	bf18      	it	ne
 8009f20:	2301      	movne	r3, #1
 8009f22:	e7e9      	b.n	8009ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
	return HAL_OK;
 8009f24:	2000      	movs	r0, #0
}
 8009f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f28 <I2C_MasterRequestWrite>:
{
 8009f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	460f      	mov	r7, r1
 8009f30:	4615      	mov	r5, r2
 8009f32:	461e      	mov	r6, r3
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009f34:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME)) {
 8009f36:	2b04      	cmp	r3, #4
 8009f38:	d00d      	beq.n	8009f56 <I2C_MasterRequestWrite+0x2e>
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d00b      	beq.n	8009f56 <I2C_MasterRequestWrite+0x2e>
 8009f3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f42:	d008      	beq.n	8009f56 <I2C_MasterRequestWrite+0x2e>
	}else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) {
 8009f44:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009f46:	2b12      	cmp	r3, #18
 8009f48:	d10a      	bne.n	8009f60 <I2C_MasterRequestWrite+0x38>
		hi2c->Instance->CR1 |= I2C_CR1_START;
 8009f4a:	6802      	ldr	r2, [r0, #0]
 8009f4c:	6813      	ldr	r3, [r2, #0]
 8009f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f52:	6013      	str	r3, [r2, #0]
 8009f54:	e004      	b.n	8009f60 <I2C_MasterRequestWrite+0x38>
		hi2c->Instance->CR1 |= I2C_CR1_START;
 8009f56:	6822      	ldr	r2, [r4, #0]
 8009f58:	6813      	ldr	r3, [r2, #0]
 8009f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f5e:	6013      	str	r3, [r2, #0]
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8009f60:	9600      	str	r6, [sp, #0]
 8009f62:	462b      	mov	r3, r5
 8009f64:	2200      	movs	r2, #0
 8009f66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f7ff ff60 	bl	8009e30 <I2C_WaitOnFlagUntilTimeout>
 8009f70:	b118      	cbz	r0, 8009f7a <I2C_MasterRequestWrite+0x52>
		return HAL_TIMEOUT;
 8009f72:	2303      	movs	r3, #3
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	b003      	add	sp, #12
 8009f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 8009f7a:	6923      	ldr	r3, [r4, #16]
 8009f7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f80:	d012      	beq.n	8009fa8 <I2C_MasterRequestWrite+0x80>
		hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009f82:	6822      	ldr	r2, [r4, #0]
 8009f84:	11fb      	asrs	r3, r7, #7
 8009f86:	f003 0306 	and.w	r3, r3, #6
 8009f8a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8009f8e:	6113      	str	r3, [r2, #16]
		if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK) {
 8009f90:	4633      	mov	r3, r6
 8009f92:	462a      	mov	r2, r5
 8009f94:	4911      	ldr	r1, [pc, #68]	; (8009fdc <I2C_MasterRequestWrite+0xb4>)
 8009f96:	4620      	mov	r0, r4
 8009f98:	f7ff ff7e 	bl	8009e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f9c:	b1c0      	cbz	r0, 8009fd0 <I2C_MasterRequestWrite+0xa8>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8009f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fa0:	2b04      	cmp	r3, #4
 8009fa2:	d013      	beq.n	8009fcc <I2C_MasterRequestWrite+0xa4>
				return HAL_TIMEOUT;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e7e5      	b.n	8009f74 <I2C_MasterRequestWrite+0x4c>
		hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009fa8:	6823      	ldr	r3, [r4, #0]
 8009faa:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8009fae:	611f      	str	r7, [r3, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8009fb0:	4633      	mov	r3, r6
 8009fb2:	462a      	mov	r2, r5
 8009fb4:	490a      	ldr	r1, [pc, #40]	; (8009fe0 <I2C_MasterRequestWrite+0xb8>)
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f7ff ff6e 	bl	8009e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d0d8      	beq.n	8009f74 <I2C_MasterRequestWrite+0x4c>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8009fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fc4:	2b04      	cmp	r3, #4
 8009fc6:	d007      	beq.n	8009fd8 <I2C_MasterRequestWrite+0xb0>
			return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e7d3      	b.n	8009f74 <I2C_MasterRequestWrite+0x4c>
				return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e7d1      	b.n	8009f74 <I2C_MasterRequestWrite+0x4c>
		hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	b2ff      	uxtb	r7, r7
 8009fd4:	611f      	str	r7, [r3, #16]
 8009fd6:	e7eb      	b.n	8009fb0 <I2C_MasterRequestWrite+0x88>
			return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e7cb      	b.n	8009f74 <I2C_MasterRequestWrite+0x4c>
 8009fdc:	00010008 	.word	0x00010008
 8009fe0:	00010002 	.word	0x00010002

08009fe4 <I2C_MasterRequestRead>:
{
 8009fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe8:	b084      	sub	sp, #16
 8009fea:	4604      	mov	r4, r0
 8009fec:	460f      	mov	r7, r1
 8009fee:	4615      	mov	r5, r2
 8009ff0:	461e      	mov	r6, r3
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009ff2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8009ff4:	6801      	ldr	r1, [r0, #0]
 8009ff6:	680b      	ldr	r3, [r1, #0]
 8009ff8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ffc:	600b      	str	r3, [r1, #0]
	if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME)) {
 8009ffe:	2a04      	cmp	r2, #4
 800a000:	d00d      	beq.n	800a01e <I2C_MasterRequestRead+0x3a>
 800a002:	2a01      	cmp	r2, #1
 800a004:	d00b      	beq.n	800a01e <I2C_MasterRequestRead+0x3a>
 800a006:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800a00a:	d008      	beq.n	800a01e <I2C_MasterRequestRead+0x3a>
	}else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) {
 800a00c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a00e:	2b11      	cmp	r3, #17
 800a010:	d10a      	bne.n	800a028 <I2C_MasterRequestRead+0x44>
		hi2c->Instance->CR1 |= I2C_CR1_START;
 800a012:	6802      	ldr	r2, [r0, #0]
 800a014:	6813      	ldr	r3, [r2, #0]
 800a016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a01a:	6013      	str	r3, [r2, #0]
 800a01c:	e004      	b.n	800a028 <I2C_MasterRequestRead+0x44>
		hi2c->Instance->CR1 |= I2C_CR1_START;
 800a01e:	6822      	ldr	r2, [r4, #0]
 800a020:	6813      	ldr	r3, [r2, #0]
 800a022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a026:	6013      	str	r3, [r2, #0]
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 800a028:	9600      	str	r6, [sp, #0]
 800a02a:	462b      	mov	r3, r5
 800a02c:	2200      	movs	r2, #0
 800a02e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a032:	4620      	mov	r0, r4
 800a034:	f7ff fefc 	bl	8009e30 <I2C_WaitOnFlagUntilTimeout>
 800a038:	b120      	cbz	r0, 800a044 <I2C_MasterRequestRead+0x60>
		return HAL_TIMEOUT;
 800a03a:	2303      	movs	r3, #3
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	b004      	add	sp, #16
 800a040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 800a044:	6923      	ldr	r3, [r4, #16]
 800a046:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a04a:	d013      	beq.n	800a074 <I2C_MasterRequestRead+0x90>
		hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a04c:	6823      	ldr	r3, [r4, #0]
 800a04e:	ea4f 18e7 	mov.w	r8, r7, asr #7
 800a052:	f008 0806 	and.w	r8, r8, #6
 800a056:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800a05a:	611a      	str	r2, [r3, #16]
		if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK) {
 800a05c:	4633      	mov	r3, r6
 800a05e:	462a      	mov	r2, r5
 800a060:	4926      	ldr	r1, [pc, #152]	; (800a0fc <I2C_MasterRequestRead+0x118>)
 800a062:	4620      	mov	r0, r4
 800a064:	f7ff ff18 	bl	8009e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a068:	b1c8      	cbz	r0, 800a09e <I2C_MasterRequestRead+0xba>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800a06a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a06c:	2b04      	cmp	r3, #4
 800a06e:	d014      	beq.n	800a09a <I2C_MasterRequestRead+0xb6>
				return HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	e7e3      	b.n	800a03c <I2C_MasterRequestRead+0x58>
		hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	f047 0701 	orr.w	r7, r7, #1
 800a07a:	b2ff      	uxtb	r7, r7
 800a07c:	611f      	str	r7, [r3, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 800a07e:	4633      	mov	r3, r6
 800a080:	462a      	mov	r2, r5
 800a082:	491f      	ldr	r1, [pc, #124]	; (800a100 <I2C_MasterRequestRead+0x11c>)
 800a084:	4620      	mov	r0, r4
 800a086:	f7ff ff07 	bl	8009e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d0d5      	beq.n	800a03c <I2C_MasterRequestRead+0x58>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800a090:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a092:	2b04      	cmp	r3, #4
 800a094:	d02f      	beq.n	800a0f6 <I2C_MasterRequestRead+0x112>
			return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e7d0      	b.n	800a03c <I2C_MasterRequestRead+0x58>
				return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e7ce      	b.n	800a03c <I2C_MasterRequestRead+0x58>
		hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	b2ff      	uxtb	r7, r7
 800a0a2:	611f      	str	r7, [r3, #16]
		if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 800a0a4:	4633      	mov	r3, r6
 800a0a6:	462a      	mov	r2, r5
 800a0a8:	4915      	ldr	r1, [pc, #84]	; (800a100 <I2C_MasterRequestRead+0x11c>)
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f7ff fef4 	bl	8009e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0b0:	b130      	cbz	r0, 800a0c0 <I2C_MasterRequestRead+0xdc>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800a0b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0b4:	2b04      	cmp	r3, #4
 800a0b6:	d001      	beq.n	800a0bc <I2C_MasterRequestRead+0xd8>
				return HAL_TIMEOUT;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e7bf      	b.n	800a03c <I2C_MasterRequestRead+0x58>
				return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e7bd      	b.n	800a03c <I2C_MasterRequestRead+0x58>
		__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	9203      	str	r2, [sp, #12]
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	6959      	ldr	r1, [r3, #20]
 800a0c8:	9103      	str	r1, [sp, #12]
 800a0ca:	6999      	ldr	r1, [r3, #24]
 800a0cc:	9103      	str	r1, [sp, #12]
 800a0ce:	9903      	ldr	r1, [sp, #12]
		hi2c->Instance->CR1 |= I2C_CR1_START;
 800a0d0:	6819      	ldr	r1, [r3, #0]
 800a0d2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800a0d6:	6019      	str	r1, [r3, #0]
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 800a0d8:	9600      	str	r6, [sp, #0]
 800a0da:	462b      	mov	r3, r5
 800a0dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f7ff fea5 	bl	8009e30 <I2C_WaitOnFlagUntilTimeout>
 800a0e6:	b108      	cbz	r0, 800a0ec <I2C_MasterRequestRead+0x108>
			return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e7a7      	b.n	800a03c <I2C_MasterRequestRead+0x58>
		hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a0ec:	6822      	ldr	r2, [r4, #0]
 800a0ee:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800a0f2:	6113      	str	r3, [r2, #16]
 800a0f4:	e7c3      	b.n	800a07e <I2C_MasterRequestRead+0x9a>
			return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e7a0      	b.n	800a03c <I2C_MasterRequestRead+0x58>
 800a0fa:	bf00      	nop
 800a0fc:	00010008 	.word	0x00010008
 800a100:	00010002 	.word	0x00010002

0800a104 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800a104:	b570      	push	{r4, r5, r6, lr}
 800a106:	4604      	mov	r4, r0
 800a108:	460d      	mov	r5, r1
 800a10a:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	695b      	ldr	r3, [r3, #20]
 800a110:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a114:	d119      	bne.n	800a14a <I2C_WaitOnTXEFlagUntilTimeout+0x46>
		if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 800a116:	4620      	mov	r0, r4
 800a118:	f7ff fe75 	bl	8009e06 <I2C_IsAcknowledgeFailed>
 800a11c:	b9b8      	cbnz	r0, 800a14e <I2C_WaitOnTXEFlagUntilTimeout+0x4a>
		if (Timeout != HAL_MAX_DELAY) {
 800a11e:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a122:	d0f3      	beq.n	800a10c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 800a124:	b125      	cbz	r5, 800a130 <I2C_WaitOnTXEFlagUntilTimeout+0x2c>
 800a126:	f7fe fb5f 	bl	80087e8 <HAL_GetTick>
 800a12a:	1b80      	subs	r0, r0, r6
 800a12c:	4285      	cmp	r5, r0
 800a12e:	d2ed      	bcs.n	800a10c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a130:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a132:	f043 0320 	orr.w	r3, r3, #32
 800a136:	6423      	str	r3, [r4, #64]	; 0x40
				hi2c->PreviousState = I2C_STATE_NONE;
 800a138:	2300      	movs	r3, #0
 800a13a:	6323      	str	r3, [r4, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 800a13c:	2220      	movs	r2, #32
 800a13e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				__HAL_UNLOCK(hi2c);
 800a142:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_TIMEOUT;
 800a146:	2003      	movs	r0, #3
 800a148:	bd70      	pop	{r4, r5, r6, pc}
	return HAL_OK;
 800a14a:	2000      	movs	r0, #0
 800a14c:	bd70      	pop	{r4, r5, r6, pc}
			return HAL_ERROR;
 800a14e:	2001      	movs	r0, #1
}
 800a150:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a154 <I2C_RequestMemoryWrite>:
{
 800a154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a158:	b084      	sub	sp, #16
 800a15a:	4605      	mov	r5, r0
 800a15c:	4688      	mov	r8, r1
 800a15e:	4616      	mov	r6, r2
 800a160:	461f      	mov	r7, r3
 800a162:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	hi2c->Instance->CR1 |= I2C_CR1_START;
 800a164:	6802      	ldr	r2, [r0, #0]
 800a166:	6813      	ldr	r3, [r2, #0]
 800a168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a16c:	6013      	str	r3, [r2, #0]
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 800a16e:	9400      	str	r4, [sp, #0]
 800a170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a172:	2200      	movs	r2, #0
 800a174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a178:	f7ff fe5a 	bl	8009e30 <I2C_WaitOnFlagUntilTimeout>
 800a17c:	b120      	cbz	r0, 800a188 <I2C_RequestMemoryWrite+0x34>
		return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
}
 800a180:	4618      	mov	r0, r3
 800a182:	b004      	add	sp, #16
 800a184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a188:	682a      	ldr	r2, [r5, #0]
 800a18a:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 800a18e:	6113      	str	r3, [r2, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 800a190:	4623      	mov	r3, r4
 800a192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a194:	4923      	ldr	r1, [pc, #140]	; (800a224 <I2C_RequestMemoryWrite+0xd0>)
 800a196:	4628      	mov	r0, r5
 800a198:	f7ff fe7e 	bl	8009e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a19c:	b130      	cbz	r0, 800a1ac <I2C_RequestMemoryWrite+0x58>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800a19e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a1a0:	2b04      	cmp	r3, #4
 800a1a2:	d001      	beq.n	800a1a8 <I2C_RequestMemoryWrite+0x54>
			return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e7eb      	b.n	800a180 <I2C_RequestMemoryWrite+0x2c>
			return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e7e9      	b.n	800a180 <I2C_RequestMemoryWrite+0x2c>
	__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9303      	str	r3, [sp, #12]
 800a1b0:	682b      	ldr	r3, [r5, #0]
 800a1b2:	695a      	ldr	r2, [r3, #20]
 800a1b4:	9203      	str	r2, [sp, #12]
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	9303      	str	r3, [sp, #12]
 800a1ba:	9b03      	ldr	r3, [sp, #12]
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800a1bc:	4622      	mov	r2, r4
 800a1be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	f7ff ff9f 	bl	800a104 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	b158      	cbz	r0, 800a1e2 <I2C_RequestMemoryWrite+0x8e>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800a1ca:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a1cc:	2b04      	cmp	r3, #4
 800a1ce:	d001      	beq.n	800a1d4 <I2C_RequestMemoryWrite+0x80>
			return HAL_TIMEOUT;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e7d5      	b.n	800a180 <I2C_RequestMemoryWrite+0x2c>
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800a1d4:	682a      	ldr	r2, [r5, #0]
 800a1d6:	6813      	ldr	r3, [r2, #0]
 800a1d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1dc:	6013      	str	r3, [r2, #0]
			return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e7ce      	b.n	800a180 <I2C_RequestMemoryWrite+0x2c>
	if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 800a1e2:	2f01      	cmp	r7, #1
 800a1e4:	d00e      	beq.n	800a204 <I2C_RequestMemoryWrite+0xb0>
		hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1e6:	682b      	ldr	r3, [r5, #0]
 800a1e8:	0a32      	lsrs	r2, r6, #8
 800a1ea:	611a      	str	r2, [r3, #16]
		if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800a1ec:	4622      	mov	r2, r4
 800a1ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	f7ff ff87 	bl	800a104 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	b178      	cbz	r0, 800a21a <I2C_RequestMemoryWrite+0xc6>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800a1fa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a1fc:	2b04      	cmp	r3, #4
 800a1fe:	d005      	beq.n	800a20c <I2C_RequestMemoryWrite+0xb8>
				return HAL_TIMEOUT;
 800a200:	2303      	movs	r3, #3
 800a202:	e7bd      	b.n	800a180 <I2C_RequestMemoryWrite+0x2c>
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a204:	682a      	ldr	r2, [r5, #0]
 800a206:	b2f6      	uxtb	r6, r6
 800a208:	6116      	str	r6, [r2, #16]
 800a20a:	e7b9      	b.n	800a180 <I2C_RequestMemoryWrite+0x2c>
				hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800a20c:	682a      	ldr	r2, [r5, #0]
 800a20e:	6813      	ldr	r3, [r2, #0]
 800a210:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a214:	6013      	str	r3, [r2, #0]
				return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e7b2      	b.n	800a180 <I2C_RequestMemoryWrite+0x2c>
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a21a:	682a      	ldr	r2, [r5, #0]
 800a21c:	b2f6      	uxtb	r6, r6
 800a21e:	6116      	str	r6, [r2, #16]
 800a220:	e7ae      	b.n	800a180 <I2C_RequestMemoryWrite+0x2c>
 800a222:	bf00      	nop
 800a224:	00010002 	.word	0x00010002

0800a228 <I2C_RequestMemoryRead>:
{
 800a228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	4605      	mov	r5, r0
 800a230:	460e      	mov	r6, r1
 800a232:	4617      	mov	r7, r2
 800a234:	4698      	mov	r8, r3
 800a236:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800a238:	6802      	ldr	r2, [r0, #0]
 800a23a:	6813      	ldr	r3, [r2, #0]
 800a23c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a240:	6013      	str	r3, [r2, #0]
	hi2c->Instance->CR1 |= I2C_CR1_START;
 800a242:	6802      	ldr	r2, [r0, #0]
 800a244:	6813      	ldr	r3, [r2, #0]
 800a246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a24a:	6013      	str	r3, [r2, #0]
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 800a24c:	9400      	str	r4, [sp, #0]
 800a24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a250:	2200      	movs	r2, #0
 800a252:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a256:	f7ff fdeb 	bl	8009e30 <I2C_WaitOnFlagUntilTimeout>
 800a25a:	b120      	cbz	r0, 800a266 <I2C_RequestMemoryRead+0x3e>
		return HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
}
 800a25e:	4618      	mov	r0, r3
 800a260:	b004      	add	sp, #16
 800a262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a266:	682b      	ldr	r3, [r5, #0]
 800a268:	b2f6      	uxtb	r6, r6
 800a26a:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 800a26e:	611a      	str	r2, [r3, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 800a270:	4623      	mov	r3, r4
 800a272:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a274:	493d      	ldr	r1, [pc, #244]	; (800a36c <I2C_RequestMemoryRead+0x144>)
 800a276:	4628      	mov	r0, r5
 800a278:	f7ff fe0e 	bl	8009e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a27c:	b130      	cbz	r0, 800a28c <I2C_RequestMemoryRead+0x64>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800a27e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a280:	2b04      	cmp	r3, #4
 800a282:	d001      	beq.n	800a288 <I2C_RequestMemoryRead+0x60>
			return HAL_TIMEOUT;
 800a284:	2303      	movs	r3, #3
 800a286:	e7ea      	b.n	800a25e <I2C_RequestMemoryRead+0x36>
			return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e7e8      	b.n	800a25e <I2C_RequestMemoryRead+0x36>
	__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a28c:	2300      	movs	r3, #0
 800a28e:	9303      	str	r3, [sp, #12]
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	695a      	ldr	r2, [r3, #20]
 800a294:	9203      	str	r2, [sp, #12]
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	9303      	str	r3, [sp, #12]
 800a29a:	9b03      	ldr	r3, [sp, #12]
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800a29c:	4622      	mov	r2, r4
 800a29e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	f7ff ff2f 	bl	800a104 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2a6:	b158      	cbz	r0, 800a2c0 <I2C_RequestMemoryRead+0x98>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800a2a8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a2aa:	2b04      	cmp	r3, #4
 800a2ac:	d001      	beq.n	800a2b2 <I2C_RequestMemoryRead+0x8a>
			return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e7d5      	b.n	800a25e <I2C_RequestMemoryRead+0x36>
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800a2b2:	682a      	ldr	r2, [r5, #0]
 800a2b4:	6813      	ldr	r3, [r2, #0]
 800a2b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2ba:	6013      	str	r3, [r2, #0]
			return HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e7ce      	b.n	800a25e <I2C_RequestMemoryRead+0x36>
	if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 800a2c0:	f1b8 0f01 	cmp.w	r8, #1
 800a2c4:	d00d      	beq.n	800a2e2 <I2C_RequestMemoryRead+0xba>
		hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a2c6:	682b      	ldr	r3, [r5, #0]
 800a2c8:	0a3a      	lsrs	r2, r7, #8
 800a2ca:	611a      	str	r2, [r3, #16]
		if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	f7ff ff17 	bl	800a104 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2d6:	b1c8      	cbz	r0, 800a30c <I2C_RequestMemoryRead+0xe4>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800a2d8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a2da:	2b04      	cmp	r3, #4
 800a2dc:	d00f      	beq.n	800a2fe <I2C_RequestMemoryRead+0xd6>
				return HAL_TIMEOUT;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	e7bd      	b.n	800a25e <I2C_RequestMemoryRead+0x36>
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2e2:	682b      	ldr	r3, [r5, #0]
 800a2e4:	b2ff      	uxtb	r7, r7
 800a2e6:	611f      	str	r7, [r3, #16]
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	f7ff ff09 	bl	800a104 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2f2:	b1b0      	cbz	r0, 800a322 <I2C_RequestMemoryRead+0xfa>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800a2f4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	d00c      	beq.n	800a314 <I2C_RequestMemoryRead+0xec>
			return HAL_TIMEOUT;
 800a2fa:	2303      	movs	r3, #3
 800a2fc:	e7af      	b.n	800a25e <I2C_RequestMemoryRead+0x36>
				hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800a2fe:	682a      	ldr	r2, [r5, #0]
 800a300:	6813      	ldr	r3, [r2, #0]
 800a302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a306:	6013      	str	r3, [r2, #0]
				return HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	e7a8      	b.n	800a25e <I2C_RequestMemoryRead+0x36>
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	b2ff      	uxtb	r7, r7
 800a310:	611f      	str	r7, [r3, #16]
 800a312:	e7e9      	b.n	800a2e8 <I2C_RequestMemoryRead+0xc0>
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800a314:	682a      	ldr	r2, [r5, #0]
 800a316:	6813      	ldr	r3, [r2, #0]
 800a318:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a31c:	6013      	str	r3, [r2, #0]
			return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e79d      	b.n	800a25e <I2C_RequestMemoryRead+0x36>
	hi2c->Instance->CR1 |= I2C_CR1_START;
 800a322:	682a      	ldr	r2, [r5, #0]
 800a324:	6813      	ldr	r3, [r2, #0]
 800a326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a32a:	6013      	str	r3, [r2, #0]
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 800a32c:	9400      	str	r4, [sp, #0]
 800a32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a330:	2200      	movs	r2, #0
 800a332:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a336:	4628      	mov	r0, r5
 800a338:	f7ff fd7a 	bl	8009e30 <I2C_WaitOnFlagUntilTimeout>
 800a33c:	b108      	cbz	r0, 800a342 <I2C_RequestMemoryRead+0x11a>
		return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e78d      	b.n	800a25e <I2C_RequestMemoryRead+0x36>
	hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a342:	682b      	ldr	r3, [r5, #0]
 800a344:	f046 0601 	orr.w	r6, r6, #1
 800a348:	611e      	str	r6, [r3, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 800a34a:	4623      	mov	r3, r4
 800a34c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a34e:	4907      	ldr	r1, [pc, #28]	; (800a36c <I2C_RequestMemoryRead+0x144>)
 800a350:	4628      	mov	r0, r5
 800a352:	f7ff fda1 	bl	8009e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a356:	4603      	mov	r3, r0
 800a358:	2800      	cmp	r0, #0
 800a35a:	d080      	beq.n	800a25e <I2C_RequestMemoryRead+0x36>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800a35c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a35e:	2b04      	cmp	r3, #4
 800a360:	d001      	beq.n	800a366 <I2C_RequestMemoryRead+0x13e>
			return HAL_TIMEOUT;
 800a362:	2303      	movs	r3, #3
 800a364:	e77b      	b.n	800a25e <I2C_RequestMemoryRead+0x36>
			return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e779      	b.n	800a25e <I2C_RequestMemoryRead+0x36>
 800a36a:	bf00      	nop
 800a36c:	00010002 	.word	0x00010002

0800a370 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800a370:	b570      	push	{r4, r5, r6, lr}
 800a372:	4604      	mov	r4, r0
 800a374:	460d      	mov	r5, r1
 800a376:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 800a378:	6823      	ldr	r3, [r4, #0]
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	f013 0f04 	tst.w	r3, #4
 800a380:	d119      	bne.n	800a3b6 <I2C_WaitOnBTFFlagUntilTimeout+0x46>
		if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 800a382:	4620      	mov	r0, r4
 800a384:	f7ff fd3f 	bl	8009e06 <I2C_IsAcknowledgeFailed>
 800a388:	b9b8      	cbnz	r0, 800a3ba <I2C_WaitOnBTFFlagUntilTimeout+0x4a>
		if (Timeout != HAL_MAX_DELAY) {
 800a38a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a38e:	d0f3      	beq.n	800a378 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 800a390:	b125      	cbz	r5, 800a39c <I2C_WaitOnBTFFlagUntilTimeout+0x2c>
 800a392:	f7fe fa29 	bl	80087e8 <HAL_GetTick>
 800a396:	1b80      	subs	r0, r0, r6
 800a398:	4285      	cmp	r5, r0
 800a39a:	d2ed      	bcs.n	800a378 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a39c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a39e:	f043 0320 	orr.w	r3, r3, #32
 800a3a2:	6423      	str	r3, [r4, #64]	; 0x40
				hi2c->PreviousState = I2C_STATE_NONE;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	6323      	str	r3, [r4, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				__HAL_UNLOCK(hi2c);
 800a3ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_TIMEOUT;
 800a3b2:	2003      	movs	r0, #3
 800a3b4:	bd70      	pop	{r4, r5, r6, pc}
	return HAL_OK;
 800a3b6:	2000      	movs	r0, #0
 800a3b8:	bd70      	pop	{r4, r5, r6, pc}
			return HAL_ERROR;
 800a3ba:	2001      	movs	r0, #1
}
 800a3bc:	bd70      	pop	{r4, r5, r6, pc}

0800a3be <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800a3be:	b570      	push	{r4, r5, r6, lr}
 800a3c0:	4605      	mov	r5, r0
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 800a3c6:	682b      	ldr	r3, [r5, #0]
 800a3c8:	695a      	ldr	r2, [r3, #20]
 800a3ca:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a3ce:	d122      	bne.n	800a416 <I2C_WaitOnRXNEFlagUntilTimeout+0x58>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 800a3d0:	695a      	ldr	r2, [r3, #20]
 800a3d2:	f012 0f10 	tst.w	r2, #16
 800a3d6:	d111      	bne.n	800a3fc <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
		if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 800a3d8:	b124      	cbz	r4, 800a3e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
 800a3da:	f7fe fa05 	bl	80087e8 <HAL_GetTick>
 800a3de:	1b80      	subs	r0, r0, r6
 800a3e0:	4284      	cmp	r4, r0
 800a3e2:	d2f0      	bcs.n	800a3c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
			hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3e4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a3e6:	f043 0320 	orr.w	r3, r3, #32
 800a3ea:	642b      	str	r3, [r5, #64]	; 0x40
			hi2c->State = HAL_I2C_STATE_READY;
 800a3ec:	2320      	movs	r3, #32
 800a3ee:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
			__HAL_UNLOCK(hi2c);
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
			return HAL_TIMEOUT;
 800a3f8:	2003      	movs	r0, #3
 800a3fa:	bd70      	pop	{r4, r5, r6, pc}
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a3fc:	f06f 0210 	mvn.w	r2, #16
 800a400:	615a      	str	r2, [r3, #20]
			hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a402:	2300      	movs	r3, #0
 800a404:	642b      	str	r3, [r5, #64]	; 0x40
			hi2c->PreviousState = I2C_STATE_NONE;
 800a406:	632b      	str	r3, [r5, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 800a408:	2220      	movs	r2, #32
 800a40a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
			__HAL_UNLOCK(hi2c);
 800a40e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
			return HAL_ERROR;
 800a412:	2001      	movs	r0, #1
 800a414:	bd70      	pop	{r4, r5, r6, pc}
	return HAL_OK;
 800a416:	2000      	movs	r0, #0
}
 800a418:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a41c <HAL_I2C_Init>:
	if (hi2c == NULL) {
 800a41c:	2800      	cmp	r0, #0
 800a41e:	f000 80e7 	beq.w	800a5f0 <HAL_I2C_Init+0x1d4>
{
 800a422:	b538      	push	{r3, r4, r5, lr}
 800a424:	4604      	mov	r4, r0
	assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a426:	6803      	ldr	r3, [r0, #0]
 800a428:	4a72      	ldr	r2, [pc, #456]	; (800a5f4 <HAL_I2C_Init+0x1d8>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d00c      	beq.n	800a448 <HAL_I2C_Init+0x2c>
 800a42e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a432:	4293      	cmp	r3, r2
 800a434:	d008      	beq.n	800a448 <HAL_I2C_Init+0x2c>
 800a436:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d004      	beq.n	800a448 <HAL_I2C_Init+0x2c>
 800a43e:	f240 116d 	movw	r1, #365	; 0x16d
 800a442:	486d      	ldr	r0, [pc, #436]	; (800a5f8 <HAL_I2C_Init+0x1dc>)
 800a444:	f005 fb98 	bl	800fb78 <assert_failed>
	assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800a448:	6863      	ldr	r3, [r4, #4]
 800a44a:	3b01      	subs	r3, #1
 800a44c:	4a6b      	ldr	r2, [pc, #428]	; (800a5fc <HAL_I2C_Init+0x1e0>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	f200 8081 	bhi.w	800a556 <HAL_I2C_Init+0x13a>
	assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800a454:	68a3      	ldr	r3, [r4, #8]
 800a456:	b13b      	cbz	r3, 800a468 <HAL_I2C_Init+0x4c>
 800a458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a45c:	d004      	beq.n	800a468 <HAL_I2C_Init+0x4c>
 800a45e:	f240 116f 	movw	r1, #367	; 0x16f
 800a462:	4865      	ldr	r0, [pc, #404]	; (800a5f8 <HAL_I2C_Init+0x1dc>)
 800a464:	f005 fb88 	bl	800fb78 <assert_failed>
	assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800a468:	68e3      	ldr	r3, [r4, #12]
 800a46a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a46e:	f023 0303 	bic.w	r3, r3, #3
 800a472:	2b00      	cmp	r3, #0
 800a474:	d175      	bne.n	800a562 <HAL_I2C_Init+0x146>
	assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800a476:	6923      	ldr	r3, [r4, #16]
 800a478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a47c:	d007      	beq.n	800a48e <HAL_I2C_Init+0x72>
 800a47e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a482:	d004      	beq.n	800a48e <HAL_I2C_Init+0x72>
 800a484:	f240 1171 	movw	r1, #369	; 0x171
 800a488:	485b      	ldr	r0, [pc, #364]	; (800a5f8 <HAL_I2C_Init+0x1dc>)
 800a48a:	f005 fb75 	bl	800fb78 <assert_failed>
	assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800a48e:	6963      	ldr	r3, [r4, #20]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d904      	bls.n	800a49e <HAL_I2C_Init+0x82>
 800a494:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800a498:	4857      	ldr	r0, [pc, #348]	; (800a5f8 <HAL_I2C_Init+0x1dc>)
 800a49a:	f005 fb6d 	bl	800fb78 <assert_failed>
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800a49e:	69a3      	ldr	r3, [r4, #24]
 800a4a0:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 800a4a4:	d163      	bne.n	800a56e <HAL_I2C_Init+0x152>
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800a4a6:	69e3      	ldr	r3, [r4, #28]
 800a4a8:	b133      	cbz	r3, 800a4b8 <HAL_I2C_Init+0x9c>
 800a4aa:	2b40      	cmp	r3, #64	; 0x40
 800a4ac:	d004      	beq.n	800a4b8 <HAL_I2C_Init+0x9c>
 800a4ae:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800a4b2:	4851      	ldr	r0, [pc, #324]	; (800a5f8 <HAL_I2C_Init+0x1dc>)
 800a4b4:	f005 fb60 	bl	800fb78 <assert_failed>
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800a4b8:	6a23      	ldr	r3, [r4, #32]
 800a4ba:	b133      	cbz	r3, 800a4ca <HAL_I2C_Init+0xae>
 800a4bc:	2b80      	cmp	r3, #128	; 0x80
 800a4be:	d004      	beq.n	800a4ca <HAL_I2C_Init+0xae>
 800a4c0:	f240 1175 	movw	r1, #373	; 0x175
 800a4c4:	484c      	ldr	r0, [pc, #304]	; (800a5f8 <HAL_I2C_Init+0x1dc>)
 800a4c6:	f005 fb57 	bl	800fb78 <assert_failed>
	if (hi2c->State == HAL_I2C_STATE_RESET) {
 800a4ca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d053      	beq.n	800a57a <HAL_I2C_Init+0x15e>
	hi2c->State = HAL_I2C_STATE_BUSY;
 800a4d2:	2324      	movs	r3, #36	; 0x24
 800a4d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	__HAL_I2C_DISABLE(hi2c);
 800a4d8:	6822      	ldr	r2, [r4, #0]
 800a4da:	6813      	ldr	r3, [r2, #0]
 800a4dc:	f023 0301 	bic.w	r3, r3, #1
 800a4e0:	6013      	str	r3, [r2, #0]
	pclk1 = HAL_RCC_GetPCLK1Freq();
 800a4e2:	f001 fe09 	bl	800c0f8 <HAL_RCC_GetPCLK1Freq>
	freqrange = I2C_FREQRANGE(pclk1);
 800a4e6:	4b46      	ldr	r3, [pc, #280]	; (800a600 <HAL_I2C_Init+0x1e4>)
 800a4e8:	fba3 2300 	umull	r2, r3, r3, r0
 800a4ec:	0c9b      	lsrs	r3, r3, #18
	hi2c->Instance->CR2 = freqrange;
 800a4ee:	6822      	ldr	r2, [r4, #0]
 800a4f0:	6053      	str	r3, [r2, #4]
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800a4f2:	6821      	ldr	r1, [r4, #0]
 800a4f4:	6865      	ldr	r5, [r4, #4]
 800a4f6:	4a43      	ldr	r2, [pc, #268]	; (800a604 <HAL_I2C_Init+0x1e8>)
 800a4f8:	4295      	cmp	r5, r2
 800a4fa:	d844      	bhi.n	800a586 <HAL_I2C_Init+0x16a>
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	620b      	str	r3, [r1, #32]
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800a500:	6821      	ldr	r1, [r4, #0]
 800a502:	6863      	ldr	r3, [r4, #4]
 800a504:	4a3f      	ldr	r2, [pc, #252]	; (800a604 <HAL_I2C_Init+0x1e8>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d847      	bhi.n	800a59a <HAL_I2C_Init+0x17e>
 800a50a:	005b      	lsls	r3, r3, #1
 800a50c:	fbb0 f0f3 	udiv	r0, r0, r3
 800a510:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800a514:	2b03      	cmp	r3, #3
 800a516:	d800      	bhi.n	800a51a <HAL_I2C_Init+0xfe>
 800a518:	2004      	movs	r0, #4
 800a51a:	61c8      	str	r0, [r1, #28]
	hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a51c:	6822      	ldr	r2, [r4, #0]
 800a51e:	69e3      	ldr	r3, [r4, #28]
 800a520:	6a21      	ldr	r1, [r4, #32]
 800a522:	430b      	orrs	r3, r1
 800a524:	6013      	str	r3, [r2, #0]
	hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800a526:	6822      	ldr	r2, [r4, #0]
 800a528:	6923      	ldr	r3, [r4, #16]
 800a52a:	68e1      	ldr	r1, [r4, #12]
 800a52c:	430b      	orrs	r3, r1
 800a52e:	6093      	str	r3, [r2, #8]
	hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800a530:	6822      	ldr	r2, [r4, #0]
 800a532:	6963      	ldr	r3, [r4, #20]
 800a534:	69a1      	ldr	r1, [r4, #24]
 800a536:	430b      	orrs	r3, r1
 800a538:	60d3      	str	r3, [r2, #12]
	__HAL_I2C_ENABLE(hi2c);
 800a53a:	6822      	ldr	r2, [r4, #0]
 800a53c:	6813      	ldr	r3, [r2, #0]
 800a53e:	f043 0301 	orr.w	r3, r3, #1
 800a542:	6013      	str	r3, [r2, #0]
	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a544:	2000      	movs	r0, #0
 800a546:	6420      	str	r0, [r4, #64]	; 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 800a548:	2320      	movs	r3, #32
 800a54a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 800a54e:	6320      	str	r0, [r4, #48]	; 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 800a550:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
	return HAL_OK;
 800a554:	bd38      	pop	{r3, r4, r5, pc}
	assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800a556:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 800a55a:	4827      	ldr	r0, [pc, #156]	; (800a5f8 <HAL_I2C_Init+0x1dc>)
 800a55c:	f005 fb0c 	bl	800fb78 <assert_failed>
 800a560:	e778      	b.n	800a454 <HAL_I2C_Init+0x38>
	assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800a562:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800a566:	4824      	ldr	r0, [pc, #144]	; (800a5f8 <HAL_I2C_Init+0x1dc>)
 800a568:	f005 fb06 	bl	800fb78 <assert_failed>
 800a56c:	e783      	b.n	800a476 <HAL_I2C_Init+0x5a>
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800a56e:	f240 1173 	movw	r1, #371	; 0x173
 800a572:	4821      	ldr	r0, [pc, #132]	; (800a5f8 <HAL_I2C_Init+0x1dc>)
 800a574:	f005 fb00 	bl	800fb78 <assert_failed>
 800a578:	e795      	b.n	800a4a6 <HAL_I2C_Init+0x8a>
		hi2c->Lock = HAL_UNLOCKED;
 800a57a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		HAL_I2C_MspInit(hi2c);
 800a57e:	4620      	mov	r0, r4
 800a580:	f004 fa8e 	bl	800eaa0 <HAL_I2C_MspInit>
 800a584:	e7a5      	b.n	800a4d2 <HAL_I2C_Init+0xb6>
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800a586:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a58a:	fb02 f303 	mul.w	r3, r2, r3
 800a58e:	4a1e      	ldr	r2, [pc, #120]	; (800a608 <HAL_I2C_Init+0x1ec>)
 800a590:	fba2 2303 	umull	r2, r3, r2, r3
 800a594:	099b      	lsrs	r3, r3, #6
 800a596:	3301      	adds	r3, #1
 800a598:	e7b1      	b.n	800a4fe <HAL_I2C_Init+0xe2>
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800a59a:	68a5      	ldr	r5, [r4, #8]
 800a59c:	b98d      	cbnz	r5, 800a5c2 <HAL_I2C_Init+0x1a6>
 800a59e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a5a2:	fbb0 f2f2 	udiv	r2, r0, r2
 800a5a6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800a5aa:	fab2 f282 	clz	r2, r2
 800a5ae:	0952      	lsrs	r2, r2, #5
 800a5b0:	b9e2      	cbnz	r2, 800a5ec <HAL_I2C_Init+0x1d0>
 800a5b2:	b995      	cbnz	r5, 800a5da <HAL_I2C_Init+0x1be>
 800a5b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a5b8:	fbb0 f0f3 	udiv	r0, r0, r3
 800a5bc:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800a5c0:	e7ab      	b.n	800a51a <HAL_I2C_Init+0xfe>
 800a5c2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a5c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a5ca:	fbb0 f2f2 	udiv	r2, r0, r2
 800a5ce:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800a5d2:	fab2 f282 	clz	r2, r2
 800a5d6:	0952      	lsrs	r2, r2, #5
 800a5d8:	e7ea      	b.n	800a5b0 <HAL_I2C_Init+0x194>
 800a5da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a5de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a5e2:	fbb0 f0f3 	udiv	r0, r0, r3
 800a5e6:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800a5ea:	e796      	b.n	800a51a <HAL_I2C_Init+0xfe>
 800a5ec:	2001      	movs	r0, #1
 800a5ee:	e794      	b.n	800a51a <HAL_I2C_Init+0xfe>
		return HAL_ERROR;
 800a5f0:	2001      	movs	r0, #1
 800a5f2:	4770      	bx	lr
 800a5f4:	40005400 	.word	0x40005400
 800a5f8:	08021db4 	.word	0x08021db4
 800a5fc:	00061a7f 	.word	0x00061a7f
 800a600:	431bde83 	.word	0x431bde83
 800a604:	000186a0 	.word	0x000186a0
 800a608:	10624dd3 	.word	0x10624dd3

0800a60c <HAL_I2C_DeInit>:
	if (hi2c == NULL) {
 800a60c:	b338      	cbz	r0, 800a65e <HAL_I2C_DeInit+0x52>
{
 800a60e:	b510      	push	{r4, lr}
 800a610:	4604      	mov	r4, r0
	assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a612:	6803      	ldr	r3, [r0, #0]
 800a614:	4a13      	ldr	r2, [pc, #76]	; (800a664 <HAL_I2C_DeInit+0x58>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d00c      	beq.n	800a634 <HAL_I2C_DeInit+0x28>
 800a61a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a61e:	4293      	cmp	r3, r2
 800a620:	d008      	beq.n	800a634 <HAL_I2C_DeInit+0x28>
 800a622:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a626:	4293      	cmp	r3, r2
 800a628:	d004      	beq.n	800a634 <HAL_I2C_DeInit+0x28>
 800a62a:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 800a62e:	480e      	ldr	r0, [pc, #56]	; (800a668 <HAL_I2C_DeInit+0x5c>)
 800a630:	f005 faa2 	bl	800fb78 <assert_failed>
	hi2c->State = HAL_I2C_STATE_BUSY;
 800a634:	2324      	movs	r3, #36	; 0x24
 800a636:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	__HAL_I2C_DISABLE(hi2c);
 800a63a:	6822      	ldr	r2, [r4, #0]
 800a63c:	6813      	ldr	r3, [r2, #0]
 800a63e:	f023 0301 	bic.w	r3, r3, #1
 800a642:	6013      	str	r3, [r2, #0]
	HAL_I2C_MspDeInit(hi2c);
 800a644:	4620      	mov	r0, r4
 800a646:	f004 fab3 	bl	800ebb0 <HAL_I2C_MspDeInit>
	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a64a:	2000      	movs	r0, #0
 800a64c:	6420      	str	r0, [r4, #64]	; 0x40
	hi2c->State = HAL_I2C_STATE_RESET;
 800a64e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 800a652:	6320      	str	r0, [r4, #48]	; 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 800a654:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
	__HAL_UNLOCK(hi2c);
 800a658:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	return HAL_OK;
 800a65c:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 800a65e:	2001      	movs	r0, #1
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	40005400 	.word	0x40005400
 800a668:	08021db4 	.word	0x08021db4

0800a66c <HAL_I2C_Master_Transmit>:
{
 800a66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a670:	b084      	sub	sp, #16
 800a672:	4604      	mov	r4, r0
 800a674:	460d      	mov	r5, r1
 800a676:	4690      	mov	r8, r2
 800a678:	461f      	mov	r7, r3
	tickstart = HAL_GetTick();
 800a67a:	f7fe f8b5 	bl	80087e8 <HAL_GetTick>
	if (hi2c->State == HAL_I2C_STATE_READY) {
 800a67e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b20      	cmp	r3, #32
 800a686:	d004      	beq.n	800a692 <HAL_I2C_Master_Transmit+0x26>
		return HAL_BUSY;
 800a688:	2502      	movs	r5, #2
}
 800a68a:	4628      	mov	r0, r5
 800a68c:	b004      	add	sp, #16
 800a68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a692:	4606      	mov	r6, r0
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 800a694:	9000      	str	r0, [sp, #0]
 800a696:	2319      	movs	r3, #25
 800a698:	2201      	movs	r2, #1
 800a69a:	4954      	ldr	r1, [pc, #336]	; (800a7ec <HAL_I2C_Master_Transmit+0x180>)
 800a69c:	4620      	mov	r0, r4
 800a69e:	f7ff fbc7 	bl	8009e30 <I2C_WaitOnFlagUntilTimeout>
 800a6a2:	b108      	cbz	r0, 800a6a8 <HAL_I2C_Master_Transmit+0x3c>
			return HAL_BUSY;
 800a6a4:	2502      	movs	r5, #2
 800a6a6:	e7f0      	b.n	800a68a <HAL_I2C_Master_Transmit+0x1e>
		__HAL_LOCK(hi2c);
 800a6a8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	f000 809a 	beq.w	800a7e6 <HAL_I2C_Master_Transmit+0x17a>
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 800a6b8:	6823      	ldr	r3, [r4, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	f012 0f01 	tst.w	r2, #1
 800a6c0:	d103      	bne.n	800a6ca <HAL_I2C_Master_Transmit+0x5e>
			__HAL_I2C_ENABLE(hi2c);
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	f042 0201 	orr.w	r2, r2, #1
 800a6c8:	601a      	str	r2, [r3, #0]
		hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800a6ca:	6822      	ldr	r2, [r4, #0]
 800a6cc:	6813      	ldr	r3, [r2, #0]
 800a6ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6d2:	6013      	str	r3, [r2, #0]
		hi2c->State = HAL_I2C_STATE_BUSY_TX;
 800a6d4:	2321      	movs	r3, #33	; 0x21
 800a6d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MASTER;
 800a6da:	2310      	movs	r3, #16
 800a6dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	6423      	str	r3, [r4, #64]	; 0x40
		hi2c->pBuffPtr = pData;
 800a6e4:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		hi2c->XferCount = Size;
 800a6e8:	8567      	strh	r7, [r4, #42]	; 0x2a
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a6ea:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800a6ee:	62e3      	str	r3, [r4, #44]	; 0x2c
		hi2c->XferSize = hi2c->XferCount;
 800a6f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a6f2:	8523      	strh	r3, [r4, #40]	; 0x28
		if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK) {
 800a6f4:	4633      	mov	r3, r6
 800a6f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f7ff fc14 	bl	8009f28 <I2C_MasterRequestWrite>
 800a700:	4605      	mov	r5, r0
 800a702:	b160      	cbz	r0, 800a71e <HAL_I2C_Master_Transmit+0xb2>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800a704:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a706:	2b04      	cmp	r3, #4
 800a708:	d004      	beq.n	800a714 <HAL_I2C_Master_Transmit+0xa8>
				__HAL_UNLOCK(hi2c);
 800a70a:	2300      	movs	r3, #0
 800a70c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_TIMEOUT;
 800a710:	2503      	movs	r5, #3
 800a712:	e7ba      	b.n	800a68a <HAL_I2C_Master_Transmit+0x1e>
				__HAL_UNLOCK(hi2c);
 800a714:	2300      	movs	r3, #0
 800a716:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_ERROR;
 800a71a:	2501      	movs	r5, #1
 800a71c:	e7b5      	b.n	800a68a <HAL_I2C_Master_Transmit+0x1e>
		__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a71e:	2300      	movs	r3, #0
 800a720:	9303      	str	r3, [sp, #12]
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	695a      	ldr	r2, [r3, #20]
 800a726:	9203      	str	r2, [sp, #12]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	9303      	str	r3, [sp, #12]
 800a72c:	9b03      	ldr	r3, [sp, #12]
		while (hi2c->XferSize > 0U) {
 800a72e:	e012      	b.n	800a756 <HAL_I2C_Master_Transmit+0xea>
				if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800a730:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a732:	2b04      	cmp	r3, #4
 800a734:	d001      	beq.n	800a73a <HAL_I2C_Master_Transmit+0xce>
					return HAL_TIMEOUT;
 800a736:	2503      	movs	r5, #3
 800a738:	e7a7      	b.n	800a68a <HAL_I2C_Master_Transmit+0x1e>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800a73a:	6822      	ldr	r2, [r4, #0]
 800a73c:	6813      	ldr	r3, [r2, #0]
 800a73e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a742:	6013      	str	r3, [r2, #0]
					return HAL_ERROR;
 800a744:	2501      	movs	r5, #1
 800a746:	e7a0      	b.n	800a68a <HAL_I2C_Master_Transmit+0x1e>
			if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 800a748:	4632      	mov	r2, r6
 800a74a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a74c:	4620      	mov	r0, r4
 800a74e:	f7ff fe0f 	bl	800a370 <I2C_WaitOnBTFFlagUntilTimeout>
 800a752:	2800      	cmp	r0, #0
 800a754:	d12d      	bne.n	800a7b2 <HAL_I2C_Master_Transmit+0x146>
		while (hi2c->XferSize > 0U) {
 800a756:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d036      	beq.n	800a7ca <HAL_I2C_Master_Transmit+0x15e>
			if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 800a75c:	4632      	mov	r2, r6
 800a75e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a760:	4620      	mov	r0, r4
 800a762:	f7ff fccf 	bl	800a104 <I2C_WaitOnTXEFlagUntilTimeout>
 800a766:	2800      	cmp	r0, #0
 800a768:	d1e2      	bne.n	800a730 <HAL_I2C_Master_Transmit+0xc4>
			hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800a76a:	6822      	ldr	r2, [r4, #0]
 800a76c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a76e:	1c59      	adds	r1, r3, #1
 800a770:	6261      	str	r1, [r4, #36]	; 0x24
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	6113      	str	r3, [r2, #16]
			hi2c->XferCount--;
 800a776:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a778:	b29b      	uxth	r3, r3
 800a77a:	3b01      	subs	r3, #1
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	8563      	strh	r3, [r4, #42]	; 0x2a
			hi2c->XferSize--;
 800a780:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a782:	3b01      	subs	r3, #1
 800a784:	b29b      	uxth	r3, r3
 800a786:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 800a788:	6822      	ldr	r2, [r4, #0]
 800a78a:	6951      	ldr	r1, [r2, #20]
 800a78c:	f011 0f04 	tst.w	r1, #4
 800a790:	d0da      	beq.n	800a748 <HAL_I2C_Master_Transmit+0xdc>
 800a792:	2b00      	cmp	r3, #0
 800a794:	d0d8      	beq.n	800a748 <HAL_I2C_Master_Transmit+0xdc>
				hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800a796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a798:	1c59      	adds	r1, r3, #1
 800a79a:	6261      	str	r1, [r4, #36]	; 0x24
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	6113      	str	r3, [r2, #16]
				hi2c->XferCount--;
 800a7a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	8563      	strh	r3, [r4, #42]	; 0x2a
				hi2c->XferSize--;
 800a7aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	8523      	strh	r3, [r4, #40]	; 0x28
 800a7b0:	e7ca      	b.n	800a748 <HAL_I2C_Master_Transmit+0xdc>
				if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800a7b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7b4:	2b04      	cmp	r3, #4
 800a7b6:	d001      	beq.n	800a7bc <HAL_I2C_Master_Transmit+0x150>
					return HAL_TIMEOUT;
 800a7b8:	2503      	movs	r5, #3
 800a7ba:	e766      	b.n	800a68a <HAL_I2C_Master_Transmit+0x1e>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800a7bc:	6822      	ldr	r2, [r4, #0]
 800a7be:	6813      	ldr	r3, [r2, #0]
 800a7c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7c4:	6013      	str	r3, [r2, #0]
					return HAL_ERROR;
 800a7c6:	2501      	movs	r5, #1
 800a7c8:	e75f      	b.n	800a68a <HAL_I2C_Master_Transmit+0x1e>
		hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800a7ca:	6822      	ldr	r2, [r4, #0]
 800a7cc:	6813      	ldr	r3, [r2, #0]
 800a7ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7d2:	6013      	str	r3, [r2, #0]
		hi2c->State = HAL_I2C_STATE_READY;
 800a7d4:	2320      	movs	r3, #32
 800a7d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		__HAL_UNLOCK(hi2c);
 800a7e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		return HAL_OK;
 800a7e4:	e751      	b.n	800a68a <HAL_I2C_Master_Transmit+0x1e>
		__HAL_LOCK(hi2c);
 800a7e6:	2502      	movs	r5, #2
 800a7e8:	e74f      	b.n	800a68a <HAL_I2C_Master_Transmit+0x1e>
 800a7ea:	bf00      	nop
 800a7ec:	00100002 	.word	0x00100002

0800a7f0 <HAL_I2C_Master_Receive>:
{
 800a7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f4:	b086      	sub	sp, #24
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	460d      	mov	r5, r1
 800a7fa:	4690      	mov	r8, r2
 800a7fc:	461f      	mov	r7, r3
	tickstart = HAL_GetTick();
 800a7fe:	f7fd fff3 	bl	80087e8 <HAL_GetTick>
	if (hi2c->State == HAL_I2C_STATE_READY) {
 800a802:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800a806:	b2db      	uxtb	r3, r3
 800a808:	2b20      	cmp	r3, #32
 800a80a:	d004      	beq.n	800a816 <HAL_I2C_Master_Receive+0x26>
		return HAL_BUSY;
 800a80c:	2502      	movs	r5, #2
}
 800a80e:	4628      	mov	r0, r5
 800a810:	b006      	add	sp, #24
 800a812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a816:	4606      	mov	r6, r0
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 800a818:	9000      	str	r0, [sp, #0]
 800a81a:	2319      	movs	r3, #25
 800a81c:	2201      	movs	r2, #1
 800a81e:	498f      	ldr	r1, [pc, #572]	; (800aa5c <HAL_I2C_Master_Receive+0x26c>)
 800a820:	4620      	mov	r0, r4
 800a822:	f7ff fb05 	bl	8009e30 <I2C_WaitOnFlagUntilTimeout>
 800a826:	b108      	cbz	r0, 800a82c <HAL_I2C_Master_Receive+0x3c>
			return HAL_BUSY;
 800a828:	2502      	movs	r5, #2
 800a82a:	e7f0      	b.n	800a80e <HAL_I2C_Master_Receive+0x1e>
		__HAL_LOCK(hi2c);
 800a82c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a830:	2b01      	cmp	r3, #1
 800a832:	f000 814c 	beq.w	800aace <HAL_I2C_Master_Receive+0x2de>
 800a836:	2301      	movs	r3, #1
 800a838:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 800a83c:	6823      	ldr	r3, [r4, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	f012 0f01 	tst.w	r2, #1
 800a844:	d103      	bne.n	800a84e <HAL_I2C_Master_Receive+0x5e>
			__HAL_I2C_ENABLE(hi2c);
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	f042 0201 	orr.w	r2, r2, #1
 800a84c:	601a      	str	r2, [r3, #0]
		hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800a84e:	6822      	ldr	r2, [r4, #0]
 800a850:	6813      	ldr	r3, [r2, #0]
 800a852:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a856:	6013      	str	r3, [r2, #0]
		hi2c->State = HAL_I2C_STATE_BUSY_RX;
 800a858:	2322      	movs	r3, #34	; 0x22
 800a85a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MASTER;
 800a85e:	2310      	movs	r3, #16
 800a860:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a864:	2300      	movs	r3, #0
 800a866:	6423      	str	r3, [r4, #64]	; 0x40
		hi2c->pBuffPtr = pData;
 800a868:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		hi2c->XferCount = Size;
 800a86c:	8567      	strh	r7, [r4, #42]	; 0x2a
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a86e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800a872:	62e3      	str	r3, [r4, #44]	; 0x2c
		hi2c->XferSize = hi2c->XferCount;
 800a874:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a876:	8523      	strh	r3, [r4, #40]	; 0x28
		if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK) {
 800a878:	4633      	mov	r3, r6
 800a87a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a87c:	4629      	mov	r1, r5
 800a87e:	4620      	mov	r0, r4
 800a880:	f7ff fbb0 	bl	8009fe4 <I2C_MasterRequestRead>
 800a884:	4605      	mov	r5, r0
 800a886:	b160      	cbz	r0, 800a8a2 <HAL_I2C_Master_Receive+0xb2>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800a888:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a88a:	2b04      	cmp	r3, #4
 800a88c:	d004      	beq.n	800a898 <HAL_I2C_Master_Receive+0xa8>
				__HAL_UNLOCK(hi2c);
 800a88e:	2300      	movs	r3, #0
 800a890:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_TIMEOUT;
 800a894:	2503      	movs	r5, #3
 800a896:	e7ba      	b.n	800a80e <HAL_I2C_Master_Receive+0x1e>
				__HAL_UNLOCK(hi2c);
 800a898:	2300      	movs	r3, #0
 800a89a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_ERROR;
 800a89e:	2501      	movs	r5, #1
 800a8a0:	e7b5      	b.n	800a80e <HAL_I2C_Master_Receive+0x1e>
		if (hi2c->XferSize == 0U) {
 800a8a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a8a4:	b95b      	cbnz	r3, 800a8be <HAL_I2C_Master_Receive+0xce>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8a6:	9302      	str	r3, [sp, #8]
 800a8a8:	6823      	ldr	r3, [r4, #0]
 800a8aa:	695a      	ldr	r2, [r3, #20]
 800a8ac:	9202      	str	r2, [sp, #8]
 800a8ae:	699a      	ldr	r2, [r3, #24]
 800a8b0:	9202      	str	r2, [sp, #8]
 800a8b2:	9a02      	ldr	r2, [sp, #8]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	e07d      	b.n	800a9ba <HAL_I2C_Master_Receive+0x1ca>
		}else if (hi2c->XferSize == 1U) {
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d00f      	beq.n	800a8e2 <HAL_I2C_Master_Receive+0xf2>
		}else if (hi2c->XferSize == 2U) {
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d01f      	beq.n	800a906 <HAL_I2C_Master_Receive+0x116>
			hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800a8c6:	6822      	ldr	r2, [r4, #0]
 800a8c8:	6813      	ldr	r3, [r2, #0]
 800a8ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a8ce:	6013      	str	r3, [r2, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	9305      	str	r3, [sp, #20]
 800a8d4:	6823      	ldr	r3, [r4, #0]
 800a8d6:	695a      	ldr	r2, [r3, #20]
 800a8d8:	9205      	str	r2, [sp, #20]
 800a8da:	699b      	ldr	r3, [r3, #24]
 800a8dc:	9305      	str	r3, [sp, #20]
 800a8de:	9b05      	ldr	r3, [sp, #20]
 800a8e0:	e06b      	b.n	800a9ba <HAL_I2C_Master_Receive+0x1ca>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800a8e2:	6822      	ldr	r2, [r4, #0]
 800a8e4:	6813      	ldr	r3, [r2, #0]
 800a8e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a8ea:	6013      	str	r3, [r2, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	9303      	str	r3, [sp, #12]
 800a8f0:	6823      	ldr	r3, [r4, #0]
 800a8f2:	695a      	ldr	r2, [r3, #20]
 800a8f4:	9203      	str	r2, [sp, #12]
 800a8f6:	699a      	ldr	r2, [r3, #24]
 800a8f8:	9203      	str	r2, [sp, #12]
 800a8fa:	9a03      	ldr	r2, [sp, #12]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	e059      	b.n	800a9ba <HAL_I2C_Master_Receive+0x1ca>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800a906:	6822      	ldr	r2, [r4, #0]
 800a908:	6813      	ldr	r3, [r2, #0]
 800a90a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a90e:	6013      	str	r3, [r2, #0]
			hi2c->Instance->CR1 |= I2C_CR1_POS;
 800a910:	6822      	ldr	r2, [r4, #0]
 800a912:	6813      	ldr	r3, [r2, #0]
 800a914:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a918:	6013      	str	r3, [r2, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a91a:	2300      	movs	r3, #0
 800a91c:	9304      	str	r3, [sp, #16]
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	695a      	ldr	r2, [r3, #20]
 800a922:	9204      	str	r2, [sp, #16]
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	9304      	str	r3, [sp, #16]
 800a928:	9b04      	ldr	r3, [sp, #16]
 800a92a:	e046      	b.n	800a9ba <HAL_I2C_Master_Receive+0x1ca>
					if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 800a92c:	4632      	mov	r2, r6
 800a92e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a930:	4620      	mov	r0, r4
 800a932:	f7ff fd44 	bl	800a3be <I2C_WaitOnRXNEFlagUntilTimeout>
 800a936:	b970      	cbnz	r0, 800a956 <HAL_I2C_Master_Receive+0x166>
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800a938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a93a:	1c5a      	adds	r2, r3, #1
 800a93c:	6262      	str	r2, [r4, #36]	; 0x24
 800a93e:	6822      	ldr	r2, [r4, #0]
 800a940:	6912      	ldr	r2, [r2, #16]
 800a942:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 800a944:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a946:	3b01      	subs	r3, #1
 800a948:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 800a94a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	3b01      	subs	r3, #1
 800a950:	b29b      	uxth	r3, r3
 800a952:	8563      	strh	r3, [r4, #42]	; 0x2a
 800a954:	e031      	b.n	800a9ba <HAL_I2C_Master_Receive+0x1ca>
						if (hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT) {
 800a956:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a958:	2b20      	cmp	r3, #32
 800a95a:	d001      	beq.n	800a960 <HAL_I2C_Master_Receive+0x170>
							return HAL_ERROR;
 800a95c:	2501      	movs	r5, #1
 800a95e:	e756      	b.n	800a80e <HAL_I2C_Master_Receive+0x1e>
							return HAL_TIMEOUT;
 800a960:	2503      	movs	r5, #3
 800a962:	e754      	b.n	800a80e <HAL_I2C_Master_Receive+0x1e>
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 800a964:	9600      	str	r6, [sp, #0]
 800a966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a968:	2200      	movs	r2, #0
 800a96a:	493d      	ldr	r1, [pc, #244]	; (800aa60 <HAL_I2C_Master_Receive+0x270>)
 800a96c:	4620      	mov	r0, r4
 800a96e:	f7ff fa5f 	bl	8009e30 <I2C_WaitOnFlagUntilTimeout>
 800a972:	2800      	cmp	r0, #0
 800a974:	f040 80ad 	bne.w	800aad2 <HAL_I2C_Master_Receive+0x2e2>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800a978:	6822      	ldr	r2, [r4, #0]
 800a97a:	6813      	ldr	r3, [r2, #0]
 800a97c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a980:	6013      	str	r3, [r2, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800a982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a984:	1c5a      	adds	r2, r3, #1
 800a986:	6262      	str	r2, [r4, #36]	; 0x24
 800a988:	6822      	ldr	r2, [r4, #0]
 800a98a:	6912      	ldr	r2, [r2, #16]
 800a98c:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 800a98e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a990:	3b01      	subs	r3, #1
 800a992:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 800a994:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a996:	b29b      	uxth	r3, r3
 800a998:	3b01      	subs	r3, #1
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	8563      	strh	r3, [r4, #42]	; 0x2a
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800a99e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9a0:	1c5a      	adds	r2, r3, #1
 800a9a2:	6262      	str	r2, [r4, #36]	; 0x24
 800a9a4:	6822      	ldr	r2, [r4, #0]
 800a9a6:	6912      	ldr	r2, [r2, #16]
 800a9a8:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 800a9aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 800a9b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	8563      	strh	r3, [r4, #42]	; 0x2a
		while (hi2c->XferSize > 0U) {
 800a9ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d07d      	beq.n	800aabc <HAL_I2C_Master_Receive+0x2cc>
			if (hi2c->XferSize <= 3U) {
 800a9c0:	2b03      	cmp	r3, #3
 800a9c2:	d84f      	bhi.n	800aa64 <HAL_I2C_Master_Receive+0x274>
				if (hi2c->XferSize == 1U) {
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d0b1      	beq.n	800a92c <HAL_I2C_Master_Receive+0x13c>
				else if (hi2c->XferSize == 2U) {
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d0cb      	beq.n	800a964 <HAL_I2C_Master_Receive+0x174>
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 800a9cc:	9600      	str	r6, [sp, #0]
 800a9ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	4923      	ldr	r1, [pc, #140]	; (800aa60 <HAL_I2C_Master_Receive+0x270>)
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f7ff fa2b 	bl	8009e30 <I2C_WaitOnFlagUntilTimeout>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d17b      	bne.n	800aad6 <HAL_I2C_Master_Receive+0x2e6>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800a9de:	6822      	ldr	r2, [r4, #0]
 800a9e0:	6813      	ldr	r3, [r2, #0]
 800a9e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9e6:	6013      	str	r3, [r2, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800a9e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9ea:	1c5a      	adds	r2, r3, #1
 800a9ec:	6262      	str	r2, [r4, #36]	; 0x24
 800a9ee:	6822      	ldr	r2, [r4, #0]
 800a9f0:	6912      	ldr	r2, [r2, #16]
 800a9f2:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 800a9f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 800a9fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	8563      	strh	r3, [r4, #42]	; 0x2a
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 800aa04:	9600      	str	r6, [sp, #0]
 800aa06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa08:	2200      	movs	r2, #0
 800aa0a:	4915      	ldr	r1, [pc, #84]	; (800aa60 <HAL_I2C_Master_Receive+0x270>)
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f7ff fa0f 	bl	8009e30 <I2C_WaitOnFlagUntilTimeout>
 800aa12:	2800      	cmp	r0, #0
 800aa14:	d161      	bne.n	800aada <HAL_I2C_Master_Receive+0x2ea>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800aa16:	6822      	ldr	r2, [r4, #0]
 800aa18:	6813      	ldr	r3, [r2, #0]
 800aa1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa1e:	6013      	str	r3, [r2, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800aa20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa22:	1c5a      	adds	r2, r3, #1
 800aa24:	6262      	str	r2, [r4, #36]	; 0x24
 800aa26:	6822      	ldr	r2, [r4, #0]
 800aa28:	6912      	ldr	r2, [r2, #16]
 800aa2a:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 800aa2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 800aa32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	3b01      	subs	r3, #1
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	8563      	strh	r3, [r4, #42]	; 0x2a
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800aa3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa3e:	1c5a      	adds	r2, r3, #1
 800aa40:	6262      	str	r2, [r4, #36]	; 0x24
 800aa42:	6822      	ldr	r2, [r4, #0]
 800aa44:	6912      	ldr	r2, [r2, #16]
 800aa46:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 800aa48:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 800aa4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	3b01      	subs	r3, #1
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	8563      	strh	r3, [r4, #42]	; 0x2a
 800aa58:	e7af      	b.n	800a9ba <HAL_I2C_Master_Receive+0x1ca>
 800aa5a:	bf00      	nop
 800aa5c:	00100002 	.word	0x00100002
 800aa60:	00010004 	.word	0x00010004
				if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 800aa64:	4632      	mov	r2, r6
 800aa66:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f7ff fca8 	bl	800a3be <I2C_WaitOnRXNEFlagUntilTimeout>
 800aa6e:	bb00      	cbnz	r0, 800aab2 <HAL_I2C_Master_Receive+0x2c2>
				(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800aa70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa72:	1c5a      	adds	r2, r3, #1
 800aa74:	6262      	str	r2, [r4, #36]	; 0x24
 800aa76:	6822      	ldr	r2, [r4, #0]
 800aa78:	6912      	ldr	r2, [r2, #16]
 800aa7a:	701a      	strb	r2, [r3, #0]
				hi2c->XferSize--;
 800aa7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	8523      	strh	r3, [r4, #40]	; 0x28
				hi2c->XferCount--;
 800aa82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	3b01      	subs	r3, #1
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	8563      	strh	r3, [r4, #42]	; 0x2a
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	695a      	ldr	r2, [r3, #20]
 800aa90:	f012 0f04 	tst.w	r2, #4
 800aa94:	d091      	beq.n	800a9ba <HAL_I2C_Master_Receive+0x1ca>
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800aa96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aa98:	1c51      	adds	r1, r2, #1
 800aa9a:	6261      	str	r1, [r4, #36]	; 0x24
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	7013      	strb	r3, [r2, #0]
					hi2c->XferSize--;
 800aaa0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 800aaa6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	8563      	strh	r3, [r4, #42]	; 0x2a
 800aab0:	e783      	b.n	800a9ba <HAL_I2C_Master_Receive+0x1ca>
					if (hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT) {
 800aab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aab4:	2b20      	cmp	r3, #32
 800aab6:	d112      	bne.n	800aade <HAL_I2C_Master_Receive+0x2ee>
						return HAL_TIMEOUT;
 800aab8:	2503      	movs	r5, #3
 800aaba:	e6a8      	b.n	800a80e <HAL_I2C_Master_Receive+0x1e>
		hi2c->State = HAL_I2C_STATE_READY;
 800aabc:	2320      	movs	r3, #32
 800aabe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800aac2:	2300      	movs	r3, #0
 800aac4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		__HAL_UNLOCK(hi2c);
 800aac8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		return HAL_OK;
 800aacc:	e69f      	b.n	800a80e <HAL_I2C_Master_Receive+0x1e>
		__HAL_LOCK(hi2c);
 800aace:	2502      	movs	r5, #2
 800aad0:	e69d      	b.n	800a80e <HAL_I2C_Master_Receive+0x1e>
						return HAL_TIMEOUT;
 800aad2:	2503      	movs	r5, #3
 800aad4:	e69b      	b.n	800a80e <HAL_I2C_Master_Receive+0x1e>
						return HAL_TIMEOUT;
 800aad6:	2503      	movs	r5, #3
 800aad8:	e699      	b.n	800a80e <HAL_I2C_Master_Receive+0x1e>
						return HAL_TIMEOUT;
 800aada:	2503      	movs	r5, #3
 800aadc:	e697      	b.n	800a80e <HAL_I2C_Master_Receive+0x1e>
						return HAL_ERROR;
 800aade:	2501      	movs	r5, #1
 800aae0:	e695      	b.n	800a80e <HAL_I2C_Master_Receive+0x1e>
 800aae2:	bf00      	nop

0800aae4 <HAL_I2C_Mem_Write>:
{
 800aae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae8:	b082      	sub	sp, #8
 800aaea:	4604      	mov	r4, r0
 800aaec:	460f      	mov	r7, r1
 800aaee:	4690      	mov	r8, r2
 800aaf0:	461d      	mov	r5, r3
	tickstart = HAL_GetTick();
 800aaf2:	f7fd fe79 	bl	80087e8 <HAL_GetTick>
 800aaf6:	4606      	mov	r6, r0
	assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800aaf8:	2d01      	cmp	r5, #1
 800aafa:	d006      	beq.n	800ab0a <HAL_I2C_Mem_Write+0x26>
 800aafc:	2d10      	cmp	r5, #16
 800aafe:	d004      	beq.n	800ab0a <HAL_I2C_Mem_Write+0x26>
 800ab00:	f640 01a5 	movw	r1, #2213	; 0x8a5
 800ab04:	4858      	ldr	r0, [pc, #352]	; (800ac68 <HAL_I2C_Mem_Write+0x184>)
 800ab06:	f005 f837 	bl	800fb78 <assert_failed>
	if (hi2c->State == HAL_I2C_STATE_READY) {
 800ab0a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b20      	cmp	r3, #32
 800ab12:	d004      	beq.n	800ab1e <HAL_I2C_Mem_Write+0x3a>
		return HAL_BUSY;
 800ab14:	2302      	movs	r3, #2
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	b002      	add	sp, #8
 800ab1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 800ab1e:	9600      	str	r6, [sp, #0]
 800ab20:	2319      	movs	r3, #25
 800ab22:	2201      	movs	r2, #1
 800ab24:	4951      	ldr	r1, [pc, #324]	; (800ac6c <HAL_I2C_Mem_Write+0x188>)
 800ab26:	4620      	mov	r0, r4
 800ab28:	f7ff f982 	bl	8009e30 <I2C_WaitOnFlagUntilTimeout>
 800ab2c:	b108      	cbz	r0, 800ab32 <HAL_I2C_Mem_Write+0x4e>
			return HAL_BUSY;
 800ab2e:	2302      	movs	r3, #2
 800ab30:	e7f1      	b.n	800ab16 <HAL_I2C_Mem_Write+0x32>
		__HAL_LOCK(hi2c);
 800ab32:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	f000 8094 	beq.w	800ac64 <HAL_I2C_Mem_Write+0x180>
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 800ab42:	6823      	ldr	r3, [r4, #0]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	f012 0f01 	tst.w	r2, #1
 800ab4a:	d103      	bne.n	800ab54 <HAL_I2C_Mem_Write+0x70>
			__HAL_I2C_ENABLE(hi2c);
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	f042 0201 	orr.w	r2, r2, #1
 800ab52:	601a      	str	r2, [r3, #0]
		hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ab54:	6822      	ldr	r2, [r4, #0]
 800ab56:	6813      	ldr	r3, [r2, #0]
 800ab58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab5c:	6013      	str	r3, [r2, #0]
		hi2c->State = HAL_I2C_STATE_BUSY_TX;
 800ab5e:	2321      	movs	r3, #33	; 0x21
 800ab60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MEM;
 800ab64:	2340      	movs	r3, #64	; 0x40
 800ab66:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	6423      	str	r3, [r4, #64]	; 0x40
		hi2c->pBuffPtr = pData;
 800ab6e:	9b08      	ldr	r3, [sp, #32]
 800ab70:	6263      	str	r3, [r4, #36]	; 0x24
		hi2c->XferCount = Size;
 800ab72:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800ab76:	8563      	strh	r3, [r4, #42]	; 0x2a
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab78:	4b3d      	ldr	r3, [pc, #244]	; (800ac70 <HAL_I2C_Mem_Write+0x18c>)
 800ab7a:	62e3      	str	r3, [r4, #44]	; 0x2c
		hi2c->XferSize = hi2c->XferCount;
 800ab7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ab7e:	8523      	strh	r3, [r4, #40]	; 0x28
		if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 800ab80:	9601      	str	r6, [sp, #4]
 800ab82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	462b      	mov	r3, r5
 800ab88:	4642      	mov	r2, r8
 800ab8a:	4639      	mov	r1, r7
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	f7ff fae1 	bl	800a154 <I2C_RequestMemoryWrite>
 800ab92:	b1c0      	cbz	r0, 800abc6 <HAL_I2C_Mem_Write+0xe2>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800ab94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab96:	2b04      	cmp	r3, #4
 800ab98:	d004      	beq.n	800aba4 <HAL_I2C_Mem_Write+0xc0>
				__HAL_UNLOCK(hi2c);
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_TIMEOUT;
 800aba0:	2303      	movs	r3, #3
 800aba2:	e7b8      	b.n	800ab16 <HAL_I2C_Mem_Write+0x32>
				__HAL_UNLOCK(hi2c);
 800aba4:	2300      	movs	r3, #0
 800aba6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e7b3      	b.n	800ab16 <HAL_I2C_Mem_Write+0x32>
				if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800abae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abb0:	2b04      	cmp	r3, #4
 800abb2:	d001      	beq.n	800abb8 <HAL_I2C_Mem_Write+0xd4>
					return HAL_TIMEOUT;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e7ae      	b.n	800ab16 <HAL_I2C_Mem_Write+0x32>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800abb8:	6822      	ldr	r2, [r4, #0]
 800abba:	6813      	ldr	r3, [r2, #0]
 800abbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abc0:	6013      	str	r3, [r2, #0]
					return HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	e7a7      	b.n	800ab16 <HAL_I2C_Mem_Write+0x32>
		while (hi2c->XferSize > 0U) {
 800abc6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d02a      	beq.n	800ac22 <HAL_I2C_Mem_Write+0x13e>
			if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 800abcc:	4632      	mov	r2, r6
 800abce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800abd0:	4620      	mov	r0, r4
 800abd2:	f7ff fa97 	bl	800a104 <I2C_WaitOnTXEFlagUntilTimeout>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d1e9      	bne.n	800abae <HAL_I2C_Mem_Write+0xca>
			hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800abda:	6822      	ldr	r2, [r4, #0]
 800abdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abde:	1c59      	adds	r1, r3, #1
 800abe0:	6261      	str	r1, [r4, #36]	; 0x24
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	6113      	str	r3, [r2, #16]
			hi2c->XferSize--;
 800abe6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800abe8:	3a01      	subs	r2, #1
 800abea:	b292      	uxth	r2, r2
 800abec:	8522      	strh	r2, [r4, #40]	; 0x28
			hi2c->XferCount--;
 800abee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	3b01      	subs	r3, #1
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	8563      	strh	r3, [r4, #42]	; 0x2a
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	6959      	ldr	r1, [r3, #20]
 800abfc:	f011 0f04 	tst.w	r1, #4
 800ac00:	d0e1      	beq.n	800abc6 <HAL_I2C_Mem_Write+0xe2>
 800ac02:	2a00      	cmp	r2, #0
 800ac04:	d0df      	beq.n	800abc6 <HAL_I2C_Mem_Write+0xe2>
				hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800ac06:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ac08:	1c51      	adds	r1, r2, #1
 800ac0a:	6261      	str	r1, [r4, #36]	; 0x24
 800ac0c:	7812      	ldrb	r2, [r2, #0]
 800ac0e:	611a      	str	r2, [r3, #16]
				hi2c->XferSize--;
 800ac10:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ac12:	3b01      	subs	r3, #1
 800ac14:	8523      	strh	r3, [r4, #40]	; 0x28
				hi2c->XferCount--;
 800ac16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	8563      	strh	r3, [r4, #42]	; 0x2a
 800ac20:	e7d1      	b.n	800abc6 <HAL_I2C_Mem_Write+0xe2>
		if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 800ac22:	4632      	mov	r2, r6
 800ac24:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac26:	4620      	mov	r0, r4
 800ac28:	f7ff fba2 	bl	800a370 <I2C_WaitOnBTFFlagUntilTimeout>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	b158      	cbz	r0, 800ac48 <HAL_I2C_Mem_Write+0x164>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800ac30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac32:	2b04      	cmp	r3, #4
 800ac34:	d001      	beq.n	800ac3a <HAL_I2C_Mem_Write+0x156>
				return HAL_TIMEOUT;
 800ac36:	2303      	movs	r3, #3
 800ac38:	e76d      	b.n	800ab16 <HAL_I2C_Mem_Write+0x32>
				hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800ac3a:	6822      	ldr	r2, [r4, #0]
 800ac3c:	6813      	ldr	r3, [r2, #0]
 800ac3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac42:	6013      	str	r3, [r2, #0]
				return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e766      	b.n	800ab16 <HAL_I2C_Mem_Write+0x32>
		hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800ac48:	6821      	ldr	r1, [r4, #0]
 800ac4a:	680a      	ldr	r2, [r1, #0]
 800ac4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac50:	600a      	str	r2, [r1, #0]
		hi2c->State = HAL_I2C_STATE_READY;
 800ac52:	2220      	movs	r2, #32
 800ac54:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
		__HAL_UNLOCK(hi2c);
 800ac5e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
		return HAL_OK;
 800ac62:	e758      	b.n	800ab16 <HAL_I2C_Mem_Write+0x32>
		__HAL_LOCK(hi2c);
 800ac64:	2302      	movs	r3, #2
 800ac66:	e756      	b.n	800ab16 <HAL_I2C_Mem_Write+0x32>
 800ac68:	08021db4 	.word	0x08021db4
 800ac6c:	00100002 	.word	0x00100002
 800ac70:	ffff0000 	.word	0xffff0000

0800ac74 <HAL_I2C_Mem_Read>:
{
 800ac74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac78:	b086      	sub	sp, #24
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	460f      	mov	r7, r1
 800ac7e:	4690      	mov	r8, r2
 800ac80:	461d      	mov	r5, r3
	tickstart = HAL_GetTick();
 800ac82:	f7fd fdb1 	bl	80087e8 <HAL_GetTick>
 800ac86:	4606      	mov	r6, r0
	assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800ac88:	2d01      	cmp	r5, #1
 800ac8a:	d006      	beq.n	800ac9a <HAL_I2C_Mem_Read+0x26>
 800ac8c:	2d10      	cmp	r5, #16
 800ac8e:	d004      	beq.n	800ac9a <HAL_I2C_Mem_Read+0x26>
 800ac90:	f640 1117 	movw	r1, #2327	; 0x917
 800ac94:	4896      	ldr	r0, [pc, #600]	; (800aef0 <HAL_I2C_Mem_Read+0x27c>)
 800ac96:	f004 ff6f 	bl	800fb78 <assert_failed>
	if (hi2c->State == HAL_I2C_STATE_READY) {
 800ac9a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	2b20      	cmp	r3, #32
 800aca2:	d004      	beq.n	800acae <HAL_I2C_Mem_Read+0x3a>
		return HAL_BUSY;
 800aca4:	2502      	movs	r5, #2
}
 800aca6:	4628      	mov	r0, r5
 800aca8:	b006      	add	sp, #24
 800acaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 800acae:	9600      	str	r6, [sp, #0]
 800acb0:	2319      	movs	r3, #25
 800acb2:	2201      	movs	r2, #1
 800acb4:	498f      	ldr	r1, [pc, #572]	; (800aef4 <HAL_I2C_Mem_Read+0x280>)
 800acb6:	4620      	mov	r0, r4
 800acb8:	f7ff f8ba 	bl	8009e30 <I2C_WaitOnFlagUntilTimeout>
 800acbc:	b108      	cbz	r0, 800acc2 <HAL_I2C_Mem_Read+0x4e>
			return HAL_BUSY;
 800acbe:	2502      	movs	r5, #2
 800acc0:	e7f1      	b.n	800aca6 <HAL_I2C_Mem_Read+0x32>
		__HAL_LOCK(hi2c);
 800acc2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	f000 814f 	beq.w	800af6a <HAL_I2C_Mem_Read+0x2f6>
 800accc:	2301      	movs	r3, #1
 800acce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	f012 0f01 	tst.w	r2, #1
 800acda:	d103      	bne.n	800ace4 <HAL_I2C_Mem_Read+0x70>
			__HAL_I2C_ENABLE(hi2c);
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	f042 0201 	orr.w	r2, r2, #1
 800ace2:	601a      	str	r2, [r3, #0]
		hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ace4:	6822      	ldr	r2, [r4, #0]
 800ace6:	6813      	ldr	r3, [r2, #0]
 800ace8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acec:	6013      	str	r3, [r2, #0]
		hi2c->State = HAL_I2C_STATE_BUSY_RX;
 800acee:	2322      	movs	r3, #34	; 0x22
 800acf0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MEM;
 800acf4:	2340      	movs	r3, #64	; 0x40
 800acf6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800acfa:	2300      	movs	r3, #0
 800acfc:	6423      	str	r3, [r4, #64]	; 0x40
		hi2c->pBuffPtr = pData;
 800acfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad00:	6263      	str	r3, [r4, #36]	; 0x24
		hi2c->XferCount = Size;
 800ad02:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800ad06:	8563      	strh	r3, [r4, #42]	; 0x2a
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ad08:	4b7b      	ldr	r3, [pc, #492]	; (800aef8 <HAL_I2C_Mem_Read+0x284>)
 800ad0a:	62e3      	str	r3, [r4, #44]	; 0x2c
		hi2c->XferSize = hi2c->XferCount;
 800ad0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ad0e:	8523      	strh	r3, [r4, #40]	; 0x28
		if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 800ad10:	9601      	str	r6, [sp, #4]
 800ad12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	462b      	mov	r3, r5
 800ad18:	4642      	mov	r2, r8
 800ad1a:	4639      	mov	r1, r7
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f7ff fa83 	bl	800a228 <I2C_RequestMemoryRead>
 800ad22:	4605      	mov	r5, r0
 800ad24:	b160      	cbz	r0, 800ad40 <HAL_I2C_Mem_Read+0xcc>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800ad26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad28:	2b04      	cmp	r3, #4
 800ad2a:	d004      	beq.n	800ad36 <HAL_I2C_Mem_Read+0xc2>
				__HAL_UNLOCK(hi2c);
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_TIMEOUT;
 800ad32:	2503      	movs	r5, #3
 800ad34:	e7b7      	b.n	800aca6 <HAL_I2C_Mem_Read+0x32>
				__HAL_UNLOCK(hi2c);
 800ad36:	2300      	movs	r3, #0
 800ad38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_ERROR;
 800ad3c:	2501      	movs	r5, #1
 800ad3e:	e7b2      	b.n	800aca6 <HAL_I2C_Mem_Read+0x32>
		if (hi2c->XferSize == 0U) {
 800ad40:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ad42:	b95b      	cbnz	r3, 800ad5c <HAL_I2C_Mem_Read+0xe8>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad44:	9302      	str	r3, [sp, #8]
 800ad46:	6823      	ldr	r3, [r4, #0]
 800ad48:	695a      	ldr	r2, [r3, #20]
 800ad4a:	9202      	str	r2, [sp, #8]
 800ad4c:	699a      	ldr	r2, [r3, #24]
 800ad4e:	9202      	str	r2, [sp, #8]
 800ad50:	9a02      	ldr	r2, [sp, #8]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad58:	601a      	str	r2, [r3, #0]
 800ad5a:	e078      	b.n	800ae4e <HAL_I2C_Mem_Read+0x1da>
		}else if (hi2c->XferSize == 1U) {
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d00a      	beq.n	800ad76 <HAL_I2C_Mem_Read+0x102>
		}else if (hi2c->XferSize == 2U) {
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	d01a      	beq.n	800ad9a <HAL_I2C_Mem_Read+0x126>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad64:	2300      	movs	r3, #0
 800ad66:	9305      	str	r3, [sp, #20]
 800ad68:	6823      	ldr	r3, [r4, #0]
 800ad6a:	695a      	ldr	r2, [r3, #20]
 800ad6c:	9205      	str	r2, [sp, #20]
 800ad6e:	699b      	ldr	r3, [r3, #24]
 800ad70:	9305      	str	r3, [sp, #20]
 800ad72:	9b05      	ldr	r3, [sp, #20]
 800ad74:	e06b      	b.n	800ae4e <HAL_I2C_Mem_Read+0x1da>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800ad76:	6822      	ldr	r2, [r4, #0]
 800ad78:	6813      	ldr	r3, [r2, #0]
 800ad7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad7e:	6013      	str	r3, [r2, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad80:	2300      	movs	r3, #0
 800ad82:	9303      	str	r3, [sp, #12]
 800ad84:	6823      	ldr	r3, [r4, #0]
 800ad86:	695a      	ldr	r2, [r3, #20]
 800ad88:	9203      	str	r2, [sp, #12]
 800ad8a:	699a      	ldr	r2, [r3, #24]
 800ad8c:	9203      	str	r2, [sp, #12]
 800ad8e:	9a03      	ldr	r2, [sp, #12]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	e059      	b.n	800ae4e <HAL_I2C_Mem_Read+0x1da>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800ad9a:	6822      	ldr	r2, [r4, #0]
 800ad9c:	6813      	ldr	r3, [r2, #0]
 800ad9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ada2:	6013      	str	r3, [r2, #0]
			hi2c->Instance->CR1 |= I2C_CR1_POS;
 800ada4:	6822      	ldr	r2, [r4, #0]
 800ada6:	6813      	ldr	r3, [r2, #0]
 800ada8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800adac:	6013      	str	r3, [r2, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800adae:	2300      	movs	r3, #0
 800adb0:	9304      	str	r3, [sp, #16]
 800adb2:	6823      	ldr	r3, [r4, #0]
 800adb4:	695a      	ldr	r2, [r3, #20]
 800adb6:	9204      	str	r2, [sp, #16]
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	9304      	str	r3, [sp, #16]
 800adbc:	9b04      	ldr	r3, [sp, #16]
 800adbe:	e046      	b.n	800ae4e <HAL_I2C_Mem_Read+0x1da>
					if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 800adc0:	4632      	mov	r2, r6
 800adc2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800adc4:	4620      	mov	r0, r4
 800adc6:	f7ff fafa 	bl	800a3be <I2C_WaitOnRXNEFlagUntilTimeout>
 800adca:	b970      	cbnz	r0, 800adea <HAL_I2C_Mem_Read+0x176>
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800adcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adce:	1c5a      	adds	r2, r3, #1
 800add0:	6262      	str	r2, [r4, #36]	; 0x24
 800add2:	6822      	ldr	r2, [r4, #0]
 800add4:	6912      	ldr	r2, [r2, #16]
 800add6:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 800add8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800adda:	3b01      	subs	r3, #1
 800addc:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 800adde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	3b01      	subs	r3, #1
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	8563      	strh	r3, [r4, #42]	; 0x2a
 800ade8:	e031      	b.n	800ae4e <HAL_I2C_Mem_Read+0x1da>
						if (hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT) {
 800adea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adec:	2b20      	cmp	r3, #32
 800adee:	d001      	beq.n	800adf4 <HAL_I2C_Mem_Read+0x180>
							return HAL_ERROR;
 800adf0:	2501      	movs	r5, #1
 800adf2:	e758      	b.n	800aca6 <HAL_I2C_Mem_Read+0x32>
							return HAL_TIMEOUT;
 800adf4:	2503      	movs	r5, #3
 800adf6:	e756      	b.n	800aca6 <HAL_I2C_Mem_Read+0x32>
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 800adf8:	9600      	str	r6, [sp, #0]
 800adfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adfc:	2200      	movs	r2, #0
 800adfe:	493f      	ldr	r1, [pc, #252]	; (800aefc <HAL_I2C_Mem_Read+0x288>)
 800ae00:	4620      	mov	r0, r4
 800ae02:	f7ff f815 	bl	8009e30 <I2C_WaitOnFlagUntilTimeout>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	f040 80b1 	bne.w	800af6e <HAL_I2C_Mem_Read+0x2fa>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800ae0c:	6822      	ldr	r2, [r4, #0]
 800ae0e:	6813      	ldr	r3, [r2, #0]
 800ae10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae14:	6013      	str	r3, [r2, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800ae16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae18:	1c5a      	adds	r2, r3, #1
 800ae1a:	6262      	str	r2, [r4, #36]	; 0x24
 800ae1c:	6822      	ldr	r2, [r4, #0]
 800ae1e:	6912      	ldr	r2, [r2, #16]
 800ae20:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 800ae22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ae24:	3b01      	subs	r3, #1
 800ae26:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 800ae28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	8563      	strh	r3, [r4, #42]	; 0x2a
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800ae32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae34:	1c5a      	adds	r2, r3, #1
 800ae36:	6262      	str	r2, [r4, #36]	; 0x24
 800ae38:	6822      	ldr	r2, [r4, #0]
 800ae3a:	6912      	ldr	r2, [r2, #16]
 800ae3c:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 800ae3e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ae40:	3b01      	subs	r3, #1
 800ae42:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 800ae44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	8563      	strh	r3, [r4, #42]	; 0x2a
		while (hi2c->XferSize > 0U) {
 800ae4e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 8081 	beq.w	800af58 <HAL_I2C_Mem_Read+0x2e4>
			if (hi2c->XferSize <= 3U) {
 800ae56:	2b03      	cmp	r3, #3
 800ae58:	d852      	bhi.n	800af00 <HAL_I2C_Mem_Read+0x28c>
				if (hi2c->XferSize == 1U) {
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d0b0      	beq.n	800adc0 <HAL_I2C_Mem_Read+0x14c>
				else if (hi2c->XferSize == 2U) {
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d0ca      	beq.n	800adf8 <HAL_I2C_Mem_Read+0x184>
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 800ae62:	9600      	str	r6, [sp, #0]
 800ae64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae66:	2200      	movs	r2, #0
 800ae68:	4924      	ldr	r1, [pc, #144]	; (800aefc <HAL_I2C_Mem_Read+0x288>)
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f7fe ffe0 	bl	8009e30 <I2C_WaitOnFlagUntilTimeout>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d17e      	bne.n	800af72 <HAL_I2C_Mem_Read+0x2fe>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800ae74:	6822      	ldr	r2, [r4, #0]
 800ae76:	6813      	ldr	r3, [r2, #0]
 800ae78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae7c:	6013      	str	r3, [r2, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800ae7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae80:	1c5a      	adds	r2, r3, #1
 800ae82:	6262      	str	r2, [r4, #36]	; 0x24
 800ae84:	6822      	ldr	r2, [r4, #0]
 800ae86:	6912      	ldr	r2, [r2, #16]
 800ae88:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 800ae8a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 800ae90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	3b01      	subs	r3, #1
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	8563      	strh	r3, [r4, #42]	; 0x2a
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 800ae9a:	9600      	str	r6, [sp, #0]
 800ae9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae9e:	2200      	movs	r2, #0
 800aea0:	4916      	ldr	r1, [pc, #88]	; (800aefc <HAL_I2C_Mem_Read+0x288>)
 800aea2:	4620      	mov	r0, r4
 800aea4:	f7fe ffc4 	bl	8009e30 <I2C_WaitOnFlagUntilTimeout>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	d164      	bne.n	800af76 <HAL_I2C_Mem_Read+0x302>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800aeac:	6822      	ldr	r2, [r4, #0]
 800aeae:	6813      	ldr	r3, [r2, #0]
 800aeb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aeb4:	6013      	str	r3, [r2, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800aeb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeb8:	1c5a      	adds	r2, r3, #1
 800aeba:	6262      	str	r2, [r4, #36]	; 0x24
 800aebc:	6822      	ldr	r2, [r4, #0]
 800aebe:	6912      	ldr	r2, [r2, #16]
 800aec0:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 800aec2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800aec4:	3b01      	subs	r3, #1
 800aec6:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 800aec8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	3b01      	subs	r3, #1
 800aece:	b29b      	uxth	r3, r3
 800aed0:	8563      	strh	r3, [r4, #42]	; 0x2a
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800aed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aed4:	1c5a      	adds	r2, r3, #1
 800aed6:	6262      	str	r2, [r4, #36]	; 0x24
 800aed8:	6822      	ldr	r2, [r4, #0]
 800aeda:	6912      	ldr	r2, [r2, #16]
 800aedc:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 800aede:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800aee0:	3b01      	subs	r3, #1
 800aee2:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 800aee4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	3b01      	subs	r3, #1
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	8563      	strh	r3, [r4, #42]	; 0x2a
 800aeee:	e7ae      	b.n	800ae4e <HAL_I2C_Mem_Read+0x1da>
 800aef0:	08021db4 	.word	0x08021db4
 800aef4:	00100002 	.word	0x00100002
 800aef8:	ffff0000 	.word	0xffff0000
 800aefc:	00010004 	.word	0x00010004
				if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 800af00:	4632      	mov	r2, r6
 800af02:	990e      	ldr	r1, [sp, #56]	; 0x38
 800af04:	4620      	mov	r0, r4
 800af06:	f7ff fa5a 	bl	800a3be <I2C_WaitOnRXNEFlagUntilTimeout>
 800af0a:	bb00      	cbnz	r0, 800af4e <HAL_I2C_Mem_Read+0x2da>
				(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800af0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af0e:	1c5a      	adds	r2, r3, #1
 800af10:	6262      	str	r2, [r4, #36]	; 0x24
 800af12:	6822      	ldr	r2, [r4, #0]
 800af14:	6912      	ldr	r2, [r2, #16]
 800af16:	701a      	strb	r2, [r3, #0]
				hi2c->XferSize--;
 800af18:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800af1a:	3b01      	subs	r3, #1
 800af1c:	8523      	strh	r3, [r4, #40]	; 0x28
				hi2c->XferCount--;
 800af1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800af20:	b29b      	uxth	r3, r3
 800af22:	3b01      	subs	r3, #1
 800af24:	b29b      	uxth	r3, r3
 800af26:	8563      	strh	r3, [r4, #42]	; 0x2a
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 800af28:	6823      	ldr	r3, [r4, #0]
 800af2a:	695a      	ldr	r2, [r3, #20]
 800af2c:	f012 0f04 	tst.w	r2, #4
 800af30:	d08d      	beq.n	800ae4e <HAL_I2C_Mem_Read+0x1da>
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800af32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800af34:	1c51      	adds	r1, r2, #1
 800af36:	6261      	str	r1, [r4, #36]	; 0x24
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	7013      	strb	r3, [r2, #0]
					hi2c->XferSize--;
 800af3c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800af3e:	3b01      	subs	r3, #1
 800af40:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 800af42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800af44:	b29b      	uxth	r3, r3
 800af46:	3b01      	subs	r3, #1
 800af48:	b29b      	uxth	r3, r3
 800af4a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800af4c:	e77f      	b.n	800ae4e <HAL_I2C_Mem_Read+0x1da>
					if (hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT) {
 800af4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af50:	2b20      	cmp	r3, #32
 800af52:	d112      	bne.n	800af7a <HAL_I2C_Mem_Read+0x306>
						return HAL_TIMEOUT;
 800af54:	2503      	movs	r5, #3
 800af56:	e6a6      	b.n	800aca6 <HAL_I2C_Mem_Read+0x32>
		hi2c->State = HAL_I2C_STATE_READY;
 800af58:	2320      	movs	r3, #32
 800af5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800af5e:	2300      	movs	r3, #0
 800af60:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		__HAL_UNLOCK(hi2c);
 800af64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		return HAL_OK;
 800af68:	e69d      	b.n	800aca6 <HAL_I2C_Mem_Read+0x32>
		__HAL_LOCK(hi2c);
 800af6a:	2502      	movs	r5, #2
 800af6c:	e69b      	b.n	800aca6 <HAL_I2C_Mem_Read+0x32>
						return HAL_TIMEOUT;
 800af6e:	2503      	movs	r5, #3
 800af70:	e699      	b.n	800aca6 <HAL_I2C_Mem_Read+0x32>
						return HAL_TIMEOUT;
 800af72:	2503      	movs	r5, #3
 800af74:	e697      	b.n	800aca6 <HAL_I2C_Mem_Read+0x32>
						return HAL_TIMEOUT;
 800af76:	2503      	movs	r5, #3
 800af78:	e695      	b.n	800aca6 <HAL_I2C_Mem_Read+0x32>
						return HAL_ERROR;
 800af7a:	2501      	movs	r5, #1
 800af7c:	e693      	b.n	800aca6 <HAL_I2C_Mem_Read+0x32>
 800af7e:	bf00      	nop

0800af80 <HAL_I2C_MasterTxCpltCallback>:
{
 800af80:	4770      	bx	lr

0800af82 <HAL_I2C_MasterRxCpltCallback>:
{
 800af82:	4770      	bx	lr

0800af84 <HAL_I2C_SlaveTxCpltCallback>:
{
 800af84:	4770      	bx	lr

0800af86 <I2C_SlaveTransmit_TXE>:
	uint32_t CurrentState = hi2c->State;
 800af86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800af8a:	b2da      	uxtb	r2, r3
	if (hi2c->XferCount != 0U) {
 800af8c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800af8e:	b29b      	uxth	r3, r3
 800af90:	b1fb      	cbz	r3, 800afd2 <I2C_SlaveTransmit_TXE+0x4c>
{
 800af92:	b510      	push	{r4, lr}
		hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800af94:	6801      	ldr	r1, [r0, #0]
 800af96:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800af98:	1c5c      	adds	r4, r3, #1
 800af9a:	6244      	str	r4, [r0, #36]	; 0x24
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	610b      	str	r3, [r1, #16]
		hi2c->XferCount--;
 800afa0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	3b01      	subs	r3, #1
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	8543      	strh	r3, [r0, #42]	; 0x2a
		if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)) {
 800afaa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800afac:	b29b      	uxth	r3, r3
 800afae:	b90b      	cbnz	r3, 800afb4 <I2C_SlaveTransmit_TXE+0x2e>
 800afb0:	2a29      	cmp	r2, #41	; 0x29
 800afb2:	d001      	beq.n	800afb8 <I2C_SlaveTransmit_TXE+0x32>
}
 800afb4:	2000      	movs	r0, #0
 800afb6:	bd10      	pop	{r4, pc}
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800afb8:	6802      	ldr	r2, [r0, #0]
 800afba:	6853      	ldr	r3, [r2, #4]
 800afbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800afc0:	6053      	str	r3, [r2, #4]
			hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800afc2:	2321      	movs	r3, #33	; 0x21
 800afc4:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_LISTEN;
 800afc6:	2328      	movs	r3, #40	; 0x28
 800afc8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			HAL_I2C_SlaveTxCpltCallback(hi2c);
 800afcc:	f7ff ffda 	bl	800af84 <HAL_I2C_SlaveTxCpltCallback>
 800afd0:	e7f0      	b.n	800afb4 <I2C_SlaveTransmit_TXE+0x2e>
}
 800afd2:	2000      	movs	r0, #0
 800afd4:	4770      	bx	lr

0800afd6 <HAL_I2C_SlaveRxCpltCallback>:
{
 800afd6:	4770      	bx	lr

0800afd8 <I2C_SlaveReceive_RXNE>:
{
 800afd8:	b508      	push	{r3, lr}
	uint32_t CurrentState = hi2c->State;
 800afda:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800afde:	b2da      	uxtb	r2, r3
	if (hi2c->XferCount != 0U) {
 800afe0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	b17b      	cbz	r3, 800b006 <I2C_SlaveReceive_RXNE+0x2e>
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800afe6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800afe8:	1c59      	adds	r1, r3, #1
 800afea:	6241      	str	r1, [r0, #36]	; 0x24
 800afec:	6801      	ldr	r1, [r0, #0]
 800afee:	6909      	ldr	r1, [r1, #16]
 800aff0:	7019      	strb	r1, [r3, #0]
		hi2c->XferCount--;
 800aff2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	3b01      	subs	r3, #1
 800aff8:	b29b      	uxth	r3, r3
 800affa:	8543      	strh	r3, [r0, #42]	; 0x2a
		if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 800affc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800affe:	b29b      	uxth	r3, r3
 800b000:	b90b      	cbnz	r3, 800b006 <I2C_SlaveReceive_RXNE+0x2e>
 800b002:	2a2a      	cmp	r2, #42	; 0x2a
 800b004:	d001      	beq.n	800b00a <I2C_SlaveReceive_RXNE+0x32>
}
 800b006:	2000      	movs	r0, #0
 800b008:	bd08      	pop	{r3, pc}
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b00a:	6802      	ldr	r2, [r0, #0]
 800b00c:	6853      	ldr	r3, [r2, #4]
 800b00e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b012:	6053      	str	r3, [r2, #4]
			hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b014:	2322      	movs	r3, #34	; 0x22
 800b016:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_LISTEN;
 800b018:	2328      	movs	r3, #40	; 0x28
 800b01a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b01e:	f7ff ffda 	bl	800afd6 <HAL_I2C_SlaveRxCpltCallback>
 800b022:	e7f0      	b.n	800b006 <I2C_SlaveReceive_RXNE+0x2e>

0800b024 <HAL_I2C_AddrCallback>:
{
 800b024:	4770      	bx	lr

0800b026 <I2C_Slave_ADDR>:
{
 800b026:	b508      	push	{r3, lr}
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET) {
 800b028:	6803      	ldr	r3, [r0, #0]
 800b02a:	699a      	ldr	r2, [r3, #24]
 800b02c:	f012 0f04 	tst.w	r2, #4
 800b030:	d009      	beq.n	800b046 <I2C_Slave_ADDR+0x20>
	uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800b032:	2100      	movs	r1, #0
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET) {
 800b034:	699b      	ldr	r3, [r3, #24]
 800b036:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b03a:	d006      	beq.n	800b04a <I2C_Slave_ADDR+0x24>
		SlaveAddrCode = hi2c->Init.OwnAddress2;
 800b03c:	8b02      	ldrh	r2, [r0, #24]
	HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800b03e:	f7ff fff1 	bl	800b024 <HAL_I2C_AddrCallback>
}
 800b042:	2000      	movs	r0, #0
 800b044:	bd08      	pop	{r3, pc}
		TransferDirection = I2C_DIRECTION_TRANSMIT;
 800b046:	2101      	movs	r1, #1
 800b048:	e7f4      	b.n	800b034 <I2C_Slave_ADDR+0xe>
		SlaveAddrCode = hi2c->Init.OwnAddress1;
 800b04a:	8982      	ldrh	r2, [r0, #12]
 800b04c:	e7f7      	b.n	800b03e <I2C_Slave_ADDR+0x18>

0800b04e <HAL_I2C_ListenCpltCallback>:
{
 800b04e:	4770      	bx	lr

0800b050 <I2C_Slave_AF>:
{
 800b050:	b508      	push	{r3, lr}
	uint32_t CurrentState = hi2c->State;
 800b052:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b056:	b2db      	uxtb	r3, r3
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b058:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800b05a:	2a04      	cmp	r2, #4
 800b05c:	d009      	beq.n	800b072 <I2C_Slave_AF+0x22>
 800b05e:	2a08      	cmp	r2, #8
 800b060:	d007      	beq.n	800b072 <I2C_Slave_AF+0x22>
	}else if (CurrentState == HAL_I2C_STATE_BUSY_TX) {
 800b062:	2b21      	cmp	r3, #33	; 0x21
 800b064:	d021      	beq.n	800b0aa <I2C_Slave_AF+0x5a>
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b066:	6803      	ldr	r3, [r0, #0]
 800b068:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b06c:	615a      	str	r2, [r3, #20]
}
 800b06e:	2000      	movs	r0, #0
 800b070:	bd08      	pop	{r3, pc}
	if (((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800b072:	2b28      	cmp	r3, #40	; 0x28
 800b074:	d1f5      	bne.n	800b062 <I2C_Slave_AF+0x12>
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b076:	4b1a      	ldr	r3, [pc, #104]	; (800b0e0 <I2C_Slave_AF+0x90>)
 800b078:	62c3      	str	r3, [r0, #44]	; 0x2c
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b07a:	6802      	ldr	r2, [r0, #0]
 800b07c:	6853      	ldr	r3, [r2, #4]
 800b07e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b082:	6053      	str	r3, [r2, #4]
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b084:	6803      	ldr	r3, [r0, #0]
 800b086:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b08a:	615a      	str	r2, [r3, #20]
		hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800b08c:	6802      	ldr	r2, [r0, #0]
 800b08e:	6813      	ldr	r3, [r2, #0]
 800b090:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b094:	6013      	str	r3, [r2, #0]
		hi2c->PreviousState = I2C_STATE_NONE;
 800b096:	2300      	movs	r3, #0
 800b098:	6303      	str	r3, [r0, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_READY;
 800b09a:	2220      	movs	r2, #32
 800b09c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0a0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		HAL_I2C_ListenCpltCallback(hi2c);
 800b0a4:	f7ff ffd3 	bl	800b04e <HAL_I2C_ListenCpltCallback>
 800b0a8:	e7e1      	b.n	800b06e <I2C_Slave_AF+0x1e>
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b0aa:	4b0d      	ldr	r3, [pc, #52]	; (800b0e0 <I2C_Slave_AF+0x90>)
 800b0ac:	62c3      	str	r3, [r0, #44]	; 0x2c
		hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b0ae:	2321      	movs	r3, #33	; 0x21
 800b0b0:	6303      	str	r3, [r0, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_READY;
 800b0b2:	2320      	movs	r3, #32
 800b0b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b0be:	6802      	ldr	r2, [r0, #0]
 800b0c0:	6853      	ldr	r3, [r2, #4]
 800b0c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b0c6:	6053      	str	r3, [r2, #4]
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0c8:	6803      	ldr	r3, [r0, #0]
 800b0ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b0ce:	615a      	str	r2, [r3, #20]
		hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800b0d0:	6802      	ldr	r2, [r0, #0]
 800b0d2:	6813      	ldr	r3, [r2, #0]
 800b0d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0d8:	6013      	str	r3, [r2, #0]
		HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b0da:	f7ff ff53 	bl	800af84 <HAL_I2C_SlaveTxCpltCallback>
 800b0de:	e7c6      	b.n	800b06e <I2C_Slave_AF+0x1e>
 800b0e0:	ffff0000 	.word	0xffff0000

0800b0e4 <HAL_I2C_MemTxCpltCallback>:
{
 800b0e4:	4770      	bx	lr

0800b0e6 <I2C_MasterTransmit_TXE>:
{
 800b0e6:	b510      	push	{r4, lr}
	uint32_t CurrentState = hi2c->State;
 800b0e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b0ec:	b2db      	uxtb	r3, r3
	uint32_t CurrentMode = hi2c->Mode;
 800b0ee:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800b0f2:	b2d2      	uxtb	r2, r2
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b0f4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
	if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX)) {
 800b0f6:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800b0f8:	b909      	cbnz	r1, 800b0fe <I2C_MasterTransmit_TXE+0x18>
 800b0fa:	2b21      	cmp	r3, #33	; 0x21
 800b0fc:	d005      	beq.n	800b10a <I2C_MasterTransmit_TXE+0x24>
	}else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800b0fe:	2b21      	cmp	r3, #33	; 0x21
 800b100:	d03c      	beq.n	800b17c <I2C_MasterTransmit_TXE+0x96>
 800b102:	2a40      	cmp	r2, #64	; 0x40
 800b104:	d038      	beq.n	800b178 <I2C_MasterTransmit_TXE+0x92>
}
 800b106:	2000      	movs	r0, #0
 800b108:	bd10      	pop	{r4, pc}
		if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME)) {
 800b10a:	2c04      	cmp	r4, #4
 800b10c:	d004      	beq.n	800b118 <I2C_MasterTransmit_TXE+0x32>
 800b10e:	2c08      	cmp	r4, #8
 800b110:	d002      	beq.n	800b118 <I2C_MasterTransmit_TXE+0x32>
 800b112:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 800b116:	d119      	bne.n	800b14c <I2C_MasterTransmit_TXE+0x66>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b118:	6802      	ldr	r2, [r0, #0]
 800b11a:	6853      	ldr	r3, [r2, #4]
 800b11c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b120:	6053      	str	r3, [r2, #4]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800b122:	6802      	ldr	r2, [r0, #0]
 800b124:	6813      	ldr	r3, [r2, #0]
 800b126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b12a:	6013      	str	r3, [r2, #0]
			hi2c->PreviousState = I2C_STATE_NONE;
 800b12c:	2300      	movs	r3, #0
 800b12e:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 800b130:	2320      	movs	r3, #32
 800b132:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 800b136:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	2b40      	cmp	r3, #64	; 0x40
 800b13e:	d015      	beq.n	800b16c <I2C_MasterTransmit_TXE+0x86>
				hi2c->Mode = HAL_I2C_MODE_NONE;
 800b140:	2300      	movs	r3, #0
 800b142:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
				HAL_I2C_MasterTxCpltCallback(hi2c);
 800b146:	f7ff ff1b 	bl	800af80 <HAL_I2C_MasterTxCpltCallback>
 800b14a:	e7dc      	b.n	800b106 <I2C_MasterTransmit_TXE+0x20>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b14c:	6802      	ldr	r2, [r0, #0]
 800b14e:	6853      	ldr	r3, [r2, #4]
 800b150:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b154:	6053      	str	r3, [r2, #4]
			hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b156:	2311      	movs	r3, #17
 800b158:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->Mode = HAL_I2C_MODE_NONE;
 800b15a:	2300      	movs	r3, #0
 800b15c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			hi2c->State = HAL_I2C_STATE_READY;
 800b160:	2320      	movs	r3, #32
 800b162:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			HAL_I2C_MasterTxCpltCallback(hi2c);
 800b166:	f7ff ff0b 	bl	800af80 <HAL_I2C_MasterTxCpltCallback>
 800b16a:	e7cc      	b.n	800b106 <I2C_MasterTransmit_TXE+0x20>
				hi2c->Mode = HAL_I2C_MODE_NONE;
 800b16c:	2300      	movs	r3, #0
 800b16e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
				HAL_I2C_MemTxCpltCallback(hi2c);
 800b172:	f7ff ffb7 	bl	800b0e4 <HAL_I2C_MemTxCpltCallback>
 800b176:	e7c6      	b.n	800b106 <I2C_MasterTransmit_TXE+0x20>
		  ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX))) {
 800b178:	2b22      	cmp	r3, #34	; 0x22
 800b17a:	d1c4      	bne.n	800b106 <I2C_MasterTransmit_TXE+0x20>
		if (hi2c->XferCount == 0U) {
 800b17c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b17e:	b29b      	uxth	r3, r3
 800b180:	b183      	cbz	r3, 800b1a4 <I2C_MasterTransmit_TXE+0xbe>
			if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 800b182:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b186:	b2db      	uxtb	r3, r3
 800b188:	2b40      	cmp	r3, #64	; 0x40
 800b18a:	d011      	beq.n	800b1b0 <I2C_MasterTransmit_TXE+0xca>
				hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800b18c:	6802      	ldr	r2, [r0, #0]
 800b18e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b190:	1c59      	adds	r1, r3, #1
 800b192:	6241      	str	r1, [r0, #36]	; 0x24
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	6113      	str	r3, [r2, #16]
				hi2c->XferCount--;
 800b198:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	3b01      	subs	r3, #1
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	8543      	strh	r3, [r0, #42]	; 0x2a
 800b1a2:	e7b0      	b.n	800b106 <I2C_MasterTransmit_TXE+0x20>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b1a4:	6802      	ldr	r2, [r0, #0]
 800b1a6:	6853      	ldr	r3, [r2, #4]
 800b1a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1ac:	6053      	str	r3, [r2, #4]
 800b1ae:	e7aa      	b.n	800b106 <I2C_MasterTransmit_TXE+0x20>
				if (hi2c->EventCount == 0) {
 800b1b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b1b2:	b99b      	cbnz	r3, 800b1dc <I2C_MasterTransmit_TXE+0xf6>
					if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT) {
 800b1b4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d008      	beq.n	800b1cc <I2C_MasterTransmit_TXE+0xe6>
						hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800b1ba:	6802      	ldr	r2, [r0, #0]
 800b1bc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b1be:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800b1c2:	6113      	str	r3, [r2, #16]
						hi2c->EventCount++;
 800b1c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	6503      	str	r3, [r0, #80]	; 0x50
 800b1ca:	e79c      	b.n	800b106 <I2C_MasterTransmit_TXE+0x20>
						hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b1cc:	6802      	ldr	r2, [r0, #0]
 800b1ce:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	6113      	str	r3, [r2, #16]
						hi2c->EventCount += 2;
 800b1d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b1d6:	3302      	adds	r3, #2
 800b1d8:	6503      	str	r3, [r0, #80]	; 0x50
 800b1da:	e794      	b.n	800b106 <I2C_MasterTransmit_TXE+0x20>
				}else if (hi2c->EventCount == 1) {
 800b1dc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d018      	beq.n	800b214 <I2C_MasterTransmit_TXE+0x12e>
				}else if (hi2c->EventCount == 2) {
 800b1e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d18e      	bne.n	800b106 <I2C_MasterTransmit_TXE+0x20>
					if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 800b1e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	2b22      	cmp	r3, #34	; 0x22
 800b1f0:	d018      	beq.n	800b224 <I2C_MasterTransmit_TXE+0x13e>
					}else if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 800b1f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	2b21      	cmp	r3, #33	; 0x21
 800b1fa:	d184      	bne.n	800b106 <I2C_MasterTransmit_TXE+0x20>
						hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800b1fc:	6802      	ldr	r2, [r0, #0]
 800b1fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b200:	1c59      	adds	r1, r3, #1
 800b202:	6241      	str	r1, [r0, #36]	; 0x24
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	6113      	str	r3, [r2, #16]
						hi2c->XferCount--;
 800b208:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	3b01      	subs	r3, #1
 800b20e:	b29b      	uxth	r3, r3
 800b210:	8543      	strh	r3, [r0, #42]	; 0x2a
 800b212:	e778      	b.n	800b106 <I2C_MasterTransmit_TXE+0x20>
					hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b214:	6802      	ldr	r2, [r0, #0]
 800b216:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	6113      	str	r3, [r2, #16]
					hi2c->EventCount++;
 800b21c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b21e:	3301      	adds	r3, #1
 800b220:	6503      	str	r3, [r0, #80]	; 0x50
 800b222:	e770      	b.n	800b106 <I2C_MasterTransmit_TXE+0x20>
						hi2c->Instance->CR1 |= I2C_CR1_START;
 800b224:	6802      	ldr	r2, [r0, #0]
 800b226:	6813      	ldr	r3, [r2, #0]
 800b228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b22c:	6013      	str	r3, [r2, #0]
 800b22e:	e76a      	b.n	800b106 <I2C_MasterTransmit_TXE+0x20>

0800b230 <I2C_MasterTransmit_BTF>:
{
 800b230:	b508      	push	{r3, lr}
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b232:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 800b234:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	2b21      	cmp	r3, #33	; 0x21
 800b23c:	d001      	beq.n	800b242 <I2C_MasterTransmit_BTF+0x12>
}
 800b23e:	2000      	movs	r0, #0
 800b240:	bd08      	pop	{r3, pc}
		if (hi2c->XferCount != 0U) {
 800b242:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b244:	b29b      	uxth	r3, r3
 800b246:	bb03      	cbnz	r3, 800b28a <I2C_MasterTransmit_BTF+0x5a>
			if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME)) {
 800b248:	2a04      	cmp	r2, #4
 800b24a:	d004      	beq.n	800b256 <I2C_MasterTransmit_BTF+0x26>
 800b24c:	2a08      	cmp	r2, #8
 800b24e:	d002      	beq.n	800b256 <I2C_MasterTransmit_BTF+0x26>
 800b250:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800b254:	d125      	bne.n	800b2a2 <I2C_MasterTransmit_BTF+0x72>
				__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b256:	6802      	ldr	r2, [r0, #0]
 800b258:	6853      	ldr	r3, [r2, #4]
 800b25a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b25e:	6053      	str	r3, [r2, #4]
				hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800b260:	6802      	ldr	r2, [r0, #0]
 800b262:	6813      	ldr	r3, [r2, #0]
 800b264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b268:	6013      	str	r3, [r2, #0]
				hi2c->PreviousState = I2C_STATE_NONE;
 800b26a:	2300      	movs	r3, #0
 800b26c:	6303      	str	r3, [r0, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 800b26e:	2320      	movs	r3, #32
 800b270:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
				if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 800b274:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b40      	cmp	r3, #64	; 0x40
 800b27c:	d021      	beq.n	800b2c2 <I2C_MasterTransmit_BTF+0x92>
					hi2c->Mode = HAL_I2C_MODE_NONE;
 800b27e:	2300      	movs	r3, #0
 800b280:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
					HAL_I2C_MasterTxCpltCallback(hi2c);
 800b284:	f7ff fe7c 	bl	800af80 <HAL_I2C_MasterTxCpltCallback>
 800b288:	e7d9      	b.n	800b23e <I2C_MasterTransmit_BTF+0xe>
			hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800b28a:	6802      	ldr	r2, [r0, #0]
 800b28c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b28e:	1c59      	adds	r1, r3, #1
 800b290:	6241      	str	r1, [r0, #36]	; 0x24
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	6113      	str	r3, [r2, #16]
			hi2c->XferCount--;
 800b296:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b298:	b29b      	uxth	r3, r3
 800b29a:	3b01      	subs	r3, #1
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	8543      	strh	r3, [r0, #42]	; 0x2a
 800b2a0:	e7cd      	b.n	800b23e <I2C_MasterTransmit_BTF+0xe>
				__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b2a2:	6802      	ldr	r2, [r0, #0]
 800b2a4:	6853      	ldr	r3, [r2, #4]
 800b2a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b2aa:	6053      	str	r3, [r2, #4]
				hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b2ac:	2311      	movs	r3, #17
 800b2ae:	6303      	str	r3, [r0, #48]	; 0x30
				hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
				hi2c->State = HAL_I2C_STATE_READY;
 800b2b6:	2320      	movs	r3, #32
 800b2b8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
				HAL_I2C_MasterTxCpltCallback(hi2c);
 800b2bc:	f7ff fe60 	bl	800af80 <HAL_I2C_MasterTxCpltCallback>
 800b2c0:	e7bd      	b.n	800b23e <I2C_MasterTransmit_BTF+0xe>
					hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
					HAL_I2C_MemTxCpltCallback(hi2c);
 800b2c8:	f7ff ff0c 	bl	800b0e4 <HAL_I2C_MemTxCpltCallback>
 800b2cc:	e7b7      	b.n	800b23e <I2C_MasterTransmit_BTF+0xe>

0800b2ce <HAL_I2C_MemRxCpltCallback>:
{
 800b2ce:	4770      	bx	lr

0800b2d0 <I2C_MasterReceive_RXNE>:
{
 800b2d0:	b508      	push	{r3, lr}
	if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 800b2d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	2b22      	cmp	r3, #34	; 0x22
 800b2da:	d001      	beq.n	800b2e0 <I2C_MasterReceive_RXNE+0x10>
}
 800b2dc:	2000      	movs	r0, #0
 800b2de:	bd08      	pop	{r3, pc}
		tmp = hi2c->XferCount;
 800b2e0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b2e2:	b29b      	uxth	r3, r3
		if (tmp > 3U) {
 800b2e4:	2b03      	cmp	r3, #3
 800b2e6:	d914      	bls.n	800b312 <I2C_MasterReceive_RXNE+0x42>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800b2e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	6242      	str	r2, [r0, #36]	; 0x24
 800b2ee:	6802      	ldr	r2, [r0, #0]
 800b2f0:	6912      	ldr	r2, [r2, #16]
 800b2f2:	701a      	strb	r2, [r3, #0]
			hi2c->XferCount--;
 800b2f4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	8543      	strh	r3, [r0, #42]	; 0x2a
			if (hi2c->XferCount == 3) {
 800b2fe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b300:	b29b      	uxth	r3, r3
 800b302:	2b03      	cmp	r3, #3
 800b304:	d1ea      	bne.n	800b2dc <I2C_MasterReceive_RXNE+0xc>
				__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b306:	6802      	ldr	r2, [r0, #0]
 800b308:	6853      	ldr	r3, [r2, #4]
 800b30a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b30e:	6053      	str	r3, [r2, #4]
 800b310:	e7e4      	b.n	800b2dc <I2C_MasterReceive_RXNE+0xc>
		}else if ((tmp == 1U) || (tmp == 0U)) {
 800b312:	2b01      	cmp	r3, #1
 800b314:	d8e2      	bhi.n	800b2dc <I2C_MasterReceive_RXNE+0xc>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800b316:	6802      	ldr	r2, [r0, #0]
 800b318:	6813      	ldr	r3, [r2, #0]
 800b31a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b31e:	6013      	str	r3, [r2, #0]
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b320:	6802      	ldr	r2, [r0, #0]
 800b322:	6853      	ldr	r3, [r2, #4]
 800b324:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b328:	6053      	str	r3, [r2, #4]
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800b32a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b32c:	1c5a      	adds	r2, r3, #1
 800b32e:	6242      	str	r2, [r0, #36]	; 0x24
 800b330:	6802      	ldr	r2, [r0, #0]
 800b332:	6912      	ldr	r2, [r2, #16]
 800b334:	701a      	strb	r2, [r3, #0]
			hi2c->XferCount--;
 800b336:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b338:	b29b      	uxth	r3, r3
 800b33a:	3b01      	subs	r3, #1
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	8543      	strh	r3, [r0, #42]	; 0x2a
			hi2c->State = HAL_I2C_STATE_READY;
 800b340:	2320      	movs	r3, #32
 800b342:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			hi2c->PreviousState = I2C_STATE_NONE;
 800b346:	2300      	movs	r3, #0
 800b348:	6303      	str	r3, [r0, #48]	; 0x30
			if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 800b34a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	2b40      	cmp	r3, #64	; 0x40
 800b352:	d005      	beq.n	800b360 <I2C_MasterReceive_RXNE+0x90>
				hi2c->Mode = HAL_I2C_MODE_NONE;
 800b354:	2300      	movs	r3, #0
 800b356:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
				HAL_I2C_MasterRxCpltCallback(hi2c);
 800b35a:	f7ff fe12 	bl	800af82 <HAL_I2C_MasterRxCpltCallback>
 800b35e:	e7bd      	b.n	800b2dc <I2C_MasterReceive_RXNE+0xc>
				hi2c->Mode = HAL_I2C_MODE_NONE;
 800b360:	2300      	movs	r3, #0
 800b362:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
				HAL_I2C_MemRxCpltCallback(hi2c);
 800b366:	f7ff ffb2 	bl	800b2ce <HAL_I2C_MemRxCpltCallback>
 800b36a:	e7b7      	b.n	800b2dc <I2C_MasterReceive_RXNE+0xc>

0800b36c <I2C_MasterReceive_BTF>:
{
 800b36c:	b508      	push	{r3, lr}
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b36e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (hi2c->XferCount == 4U) {
 800b370:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b372:	b29b      	uxth	r3, r3
 800b374:	2b04      	cmp	r3, #4
 800b376:	d014      	beq.n	800b3a2 <I2C_MasterReceive_BTF+0x36>
	}else if (hi2c->XferCount == 3U) {
 800b378:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	2b03      	cmp	r3, #3
 800b37e:	d021      	beq.n	800b3c4 <I2C_MasterReceive_BTF+0x58>
	}else if (hi2c->XferCount == 2U) {
 800b380:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b382:	b29b      	uxth	r3, r3
 800b384:	2b02      	cmp	r3, #2
 800b386:	d033      	beq.n	800b3f0 <I2C_MasterReceive_BTF+0x84>
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800b388:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b38a:	1c5a      	adds	r2, r3, #1
 800b38c:	6242      	str	r2, [r0, #36]	; 0x24
 800b38e:	6802      	ldr	r2, [r0, #0]
 800b390:	6912      	ldr	r2, [r2, #16]
 800b392:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 800b394:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b396:	b29b      	uxth	r3, r3
 800b398:	3b01      	subs	r3, #1
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800b39e:	2000      	movs	r0, #0
 800b3a0:	bd08      	pop	{r3, pc}
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b3a2:	6802      	ldr	r2, [r0, #0]
 800b3a4:	6853      	ldr	r3, [r2, #4]
 800b3a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3aa:	6053      	str	r3, [r2, #4]
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800b3ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b3ae:	1c5a      	adds	r2, r3, #1
 800b3b0:	6242      	str	r2, [r0, #36]	; 0x24
 800b3b2:	6802      	ldr	r2, [r0, #0]
 800b3b4:	6912      	ldr	r2, [r2, #16]
 800b3b6:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 800b3b8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	8543      	strh	r3, [r0, #42]	; 0x2a
 800b3c2:	e7ec      	b.n	800b39e <I2C_MasterReceive_BTF+0x32>
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b3c4:	6802      	ldr	r2, [r0, #0]
 800b3c6:	6853      	ldr	r3, [r2, #4]
 800b3c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3cc:	6053      	str	r3, [r2, #4]
		hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800b3ce:	6802      	ldr	r2, [r0, #0]
 800b3d0:	6813      	ldr	r3, [r2, #0]
 800b3d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3d6:	6013      	str	r3, [r2, #0]
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800b3d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b3da:	1c5a      	adds	r2, r3, #1
 800b3dc:	6242      	str	r2, [r0, #36]	; 0x24
 800b3de:	6802      	ldr	r2, [r0, #0]
 800b3e0:	6912      	ldr	r2, [r2, #16]
 800b3e2:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 800b3e4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	8543      	strh	r3, [r0, #42]	; 0x2a
 800b3ee:	e7d6      	b.n	800b39e <I2C_MasterReceive_BTF+0x32>
		if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)) {
 800b3f0:	3a01      	subs	r2, #1
 800b3f2:	2a01      	cmp	r2, #1
 800b3f4:	d92f      	bls.n	800b456 <I2C_MasterReceive_BTF+0xea>
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800b3f6:	6802      	ldr	r2, [r0, #0]
 800b3f8:	6813      	ldr	r3, [r2, #0]
 800b3fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b3fe:	6013      	str	r3, [r2, #0]
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800b400:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b402:	1c5a      	adds	r2, r3, #1
 800b404:	6242      	str	r2, [r0, #36]	; 0x24
 800b406:	6802      	ldr	r2, [r0, #0]
 800b408:	6912      	ldr	r2, [r2, #16]
 800b40a:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 800b40c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b40e:	b29b      	uxth	r3, r3
 800b410:	3b01      	subs	r3, #1
 800b412:	b29b      	uxth	r3, r3
 800b414:	8543      	strh	r3, [r0, #42]	; 0x2a
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800b416:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b418:	1c5a      	adds	r2, r3, #1
 800b41a:	6242      	str	r2, [r0, #36]	; 0x24
 800b41c:	6802      	ldr	r2, [r0, #0]
 800b41e:	6912      	ldr	r2, [r2, #16]
 800b420:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 800b422:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800b424:	b29b      	uxth	r3, r3
 800b426:	3b01      	subs	r3, #1
 800b428:	b29b      	uxth	r3, r3
 800b42a:	8543      	strh	r3, [r0, #42]	; 0x2a
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b42c:	6802      	ldr	r2, [r0, #0]
 800b42e:	6853      	ldr	r3, [r2, #4]
 800b430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b434:	6053      	str	r3, [r2, #4]
		hi2c->State = HAL_I2C_STATE_READY;
 800b436:	2320      	movs	r3, #32
 800b438:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		hi2c->PreviousState = I2C_STATE_NONE;
 800b43c:	2300      	movs	r3, #0
 800b43e:	6303      	str	r3, [r0, #48]	; 0x30
		if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 800b440:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b444:	b2db      	uxtb	r3, r3
 800b446:	2b40      	cmp	r3, #64	; 0x40
 800b448:	d010      	beq.n	800b46c <I2C_MasterReceive_BTF+0x100>
			hi2c->Mode = HAL_I2C_MODE_NONE;
 800b44a:	2300      	movs	r3, #0
 800b44c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			HAL_I2C_MasterRxCpltCallback(hi2c);
 800b450:	f7ff fd97 	bl	800af82 <HAL_I2C_MasterRxCpltCallback>
 800b454:	e7a3      	b.n	800b39e <I2C_MasterReceive_BTF+0x32>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800b456:	6802      	ldr	r2, [r0, #0]
 800b458:	6813      	ldr	r3, [r2, #0]
 800b45a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b45e:	6013      	str	r3, [r2, #0]
			hi2c->Instance->CR1 |= I2C_CR1_START;
 800b460:	6802      	ldr	r2, [r0, #0]
 800b462:	6813      	ldr	r3, [r2, #0]
 800b464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b468:	6013      	str	r3, [r2, #0]
 800b46a:	e7c9      	b.n	800b400 <I2C_MasterReceive_BTF+0x94>
			hi2c->Mode = HAL_I2C_MODE_NONE;
 800b46c:	2300      	movs	r3, #0
 800b46e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			HAL_I2C_MemRxCpltCallback(hi2c);
 800b472:	f7ff ff2c 	bl	800b2ce <HAL_I2C_MemRxCpltCallback>
 800b476:	e792      	b.n	800b39e <I2C_MasterReceive_BTF+0x32>

0800b478 <HAL_I2C_ErrorCallback>:
{
 800b478:	4770      	bx	lr

0800b47a <HAL_I2C_AbortCpltCallback>:
{
 800b47a:	4770      	bx	lr

0800b47c <I2C_ITError>:
{
 800b47c:	b510      	push	{r4, lr}
 800b47e:	4604      	mov	r4, r0
	uint32_t CurrentState = hi2c->State;
 800b480:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
	if ((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 800b484:	3b29      	subs	r3, #41	; 0x29
 800b486:	2b01      	cmp	r3, #1
 800b488:	d937      	bls.n	800b4fa <I2C_ITError+0x7e>
		if ((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN)) {
 800b48a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	2b60      	cmp	r3, #96	; 0x60
 800b492:	d007      	beq.n	800b4a4 <I2C_ITError+0x28>
 800b494:	6803      	ldr	r3, [r0, #0]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800b49c:	d102      	bne.n	800b4a4 <I2C_ITError+0x28>
			hi2c->State = HAL_I2C_STATE_READY;
 800b49e:	2320      	movs	r3, #32
 800b4a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		hi2c->PreviousState = I2C_STATE_NONE;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	6323      	str	r3, [r4, #48]	; 0x30
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800b4ac:	6822      	ldr	r2, [r4, #0]
 800b4ae:	6813      	ldr	r3, [r2, #0]
 800b4b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4b4:	6013      	str	r3, [r2, #0]
	if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	685a      	ldr	r2, [r3, #4]
 800b4ba:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800b4be:	d03f      	beq.n	800b540 <I2C_ITError+0xc4>
		hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800b4c0:	685a      	ldr	r2, [r3, #4]
 800b4c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b4c6:	605a      	str	r2, [r3, #4]
		if (hi2c->hdmatx->State != HAL_DMA_STATE_READY) {
 800b4c8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b4ca:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d018      	beq.n	800b506 <I2C_ITError+0x8a>
			hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b4d4:	4b3a      	ldr	r3, [pc, #232]	; (800b5c0 <I2C_ITError+0x144>)
 800b4d6:	6513      	str	r3, [r2, #80]	; 0x50
			if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK) {
 800b4d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b4da:	f7fe f811 	bl	8009500 <HAL_DMA_Abort_IT>
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	d03f      	beq.n	800b562 <I2C_ITError+0xe6>
				__HAL_I2C_DISABLE(hi2c);
 800b4e2:	6822      	ldr	r2, [r4, #0]
 800b4e4:	6813      	ldr	r3, [r2, #0]
 800b4e6:	f023 0301 	bic.w	r3, r3, #1
 800b4ea:	6013      	str	r3, [r2, #0]
				hi2c->State = HAL_I2C_STATE_READY;
 800b4ec:	2320      	movs	r3, #32
 800b4ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
				hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b4f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b4f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b4f6:	4798      	blx	r3
 800b4f8:	e033      	b.n	800b562 <I2C_ITError+0xe6>
		hi2c->PreviousState = I2C_STATE_NONE;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	6303      	str	r3, [r0, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_LISTEN;
 800b4fe:	2328      	movs	r3, #40	; 0x28
 800b500:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800b504:	e7d2      	b.n	800b4ac <I2C_ITError+0x30>
			hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b506:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b508:	4a2d      	ldr	r2, [pc, #180]	; (800b5c0 <I2C_ITError+0x144>)
 800b50a:	651a      	str	r2, [r3, #80]	; 0x50
			if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK) {
 800b50c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b50e:	f7fd fff7 	bl	8009500 <HAL_DMA_Abort_IT>
 800b512:	b330      	cbz	r0, 800b562 <I2C_ITError+0xe6>
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 800b514:	6823      	ldr	r3, [r4, #0]
 800b516:	695a      	ldr	r2, [r3, #20]
 800b518:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b51c:	d004      	beq.n	800b528 <I2C_ITError+0xac>
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800b51e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b520:	1c51      	adds	r1, r2, #1
 800b522:	6261      	str	r1, [r4, #36]	; 0x24
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	7013      	strb	r3, [r2, #0]
				__HAL_I2C_DISABLE(hi2c);
 800b528:	6822      	ldr	r2, [r4, #0]
 800b52a:	6813      	ldr	r3, [r2, #0]
 800b52c:	f023 0301 	bic.w	r3, r3, #1
 800b530:	6013      	str	r3, [r2, #0]
				hi2c->State = HAL_I2C_STATE_READY;
 800b532:	2320      	movs	r3, #32
 800b534:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
				hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b538:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b53a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b53c:	4798      	blx	r3
 800b53e:	e010      	b.n	800b562 <I2C_ITError+0xe6>
	}else if (hi2c->State == HAL_I2C_STATE_ABORT) {
 800b540:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800b544:	b2d2      	uxtb	r2, r2
 800b546:	2a60      	cmp	r2, #96	; 0x60
 800b548:	d011      	beq.n	800b56e <I2C_ITError+0xf2>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 800b54a:	695a      	ldr	r2, [r3, #20]
 800b54c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b550:	d004      	beq.n	800b55c <I2C_ITError+0xe0>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800b552:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b554:	1c51      	adds	r1, r2, #1
 800b556:	6261      	str	r1, [r4, #36]	; 0x24
 800b558:	691b      	ldr	r3, [r3, #16]
 800b55a:	7013      	strb	r3, [r2, #0]
		HAL_I2C_ErrorCallback(hi2c);
 800b55c:	4620      	mov	r0, r4
 800b55e:	f7ff ff8b 	bl	800b478 <HAL_I2C_ErrorCallback>
	if ((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)) {
 800b562:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800b566:	b2db      	uxtb	r3, r3
 800b568:	2b28      	cmp	r3, #40	; 0x28
 800b56a:	d017      	beq.n	800b59c <I2C_ITError+0x120>
 800b56c:	bd10      	pop	{r4, pc}
		hi2c->State = HAL_I2C_STATE_READY;
 800b56e:	2220      	movs	r2, #32
 800b570:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b574:	2200      	movs	r2, #0
 800b576:	6422      	str	r2, [r4, #64]	; 0x40
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 800b578:	695a      	ldr	r2, [r3, #20]
 800b57a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b57e:	d004      	beq.n	800b58a <I2C_ITError+0x10e>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800b580:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b582:	1c51      	adds	r1, r2, #1
 800b584:	6261      	str	r1, [r4, #36]	; 0x24
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	7013      	strb	r3, [r2, #0]
		__HAL_I2C_DISABLE(hi2c);
 800b58a:	6822      	ldr	r2, [r4, #0]
 800b58c:	6813      	ldr	r3, [r2, #0]
 800b58e:	f023 0301 	bic.w	r3, r3, #1
 800b592:	6013      	str	r3, [r2, #0]
		HAL_I2C_AbortCpltCallback(hi2c);
 800b594:	4620      	mov	r0, r4
 800b596:	f7ff ff70 	bl	800b47a <HAL_I2C_AbortCpltCallback>
 800b59a:	e7e2      	b.n	800b562 <I2C_ITError+0xe6>
	if ((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)) {
 800b59c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b59e:	f013 0f04 	tst.w	r3, #4
 800b5a2:	d0e3      	beq.n	800b56c <I2C_ITError+0xf0>
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b5a4:	4b07      	ldr	r3, [pc, #28]	; (800b5c4 <I2C_ITError+0x148>)
 800b5a6:	62e3      	str	r3, [r4, #44]	; 0x2c
		hi2c->PreviousState = I2C_STATE_NONE;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	6323      	str	r3, [r4, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_READY;
 800b5ac:	2220      	movs	r2, #32
 800b5ae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		HAL_I2C_ListenCpltCallback(hi2c);
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f7ff fd49 	bl	800b04e <HAL_I2C_ListenCpltCallback>
}
 800b5bc:	e7d6      	b.n	800b56c <I2C_ITError+0xf0>
 800b5be:	bf00      	nop
 800b5c0:	0800b909 	.word	0x0800b909
 800b5c4:	ffff0000 	.word	0xffff0000

0800b5c8 <I2C_Slave_STOPF>:
{
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	b082      	sub	sp, #8
	uint32_t CurrentState = hi2c->State;
 800b5cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b5d0:	b2db      	uxtb	r3, r3
	__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b5d2:	6801      	ldr	r1, [r0, #0]
 800b5d4:	684a      	ldr	r2, [r1, #4]
 800b5d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b5da:	604a      	str	r2, [r1, #4]
	__HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b5dc:	2200      	movs	r2, #0
 800b5de:	9201      	str	r2, [sp, #4]
 800b5e0:	6802      	ldr	r2, [r0, #0]
 800b5e2:	6951      	ldr	r1, [r2, #20]
 800b5e4:	9101      	str	r1, [sp, #4]
 800b5e6:	6811      	ldr	r1, [r2, #0]
 800b5e8:	f041 0101 	orr.w	r1, r1, #1
 800b5ec:	6011      	str	r1, [r2, #0]
 800b5ee:	9a01      	ldr	r2, [sp, #4]
	hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800b5f0:	6801      	ldr	r1, [r0, #0]
 800b5f2:	680a      	ldr	r2, [r1, #0]
 800b5f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5f8:	600a      	str	r2, [r1, #0]
	if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 800b5fa:	6801      	ldr	r1, [r0, #0]
 800b5fc:	684a      	ldr	r2, [r1, #4]
 800b5fe:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800b602:	d00e      	beq.n	800b622 <I2C_Slave_STOPF+0x5a>
		if ((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 800b604:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800b608:	b2d2      	uxtb	r2, r2
 800b60a:	2a22      	cmp	r2, #34	; 0x22
 800b60c:	d044      	beq.n	800b698 <I2C_Slave_STOPF+0xd0>
 800b60e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800b612:	b2d2      	uxtb	r2, r2
 800b614:	2a2a      	cmp	r2, #42	; 0x2a
 800b616:	d03f      	beq.n	800b698 <I2C_Slave_STOPF+0xd0>
			hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800b618:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b61a:	6812      	ldr	r2, [r2, #0]
 800b61c:	6852      	ldr	r2, [r2, #4]
 800b61e:	b292      	uxth	r2, r2
 800b620:	8542      	strh	r2, [r0, #42]	; 0x2a
	if (hi2c->XferCount != 0U) {
 800b622:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800b624:	b292      	uxth	r2, r2
 800b626:	b302      	cbz	r2, 800b66a <I2C_Slave_STOPF+0xa2>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 800b628:	694a      	ldr	r2, [r1, #20]
 800b62a:	f012 0f04 	tst.w	r2, #4
 800b62e:	d009      	beq.n	800b644 <I2C_Slave_STOPF+0x7c>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800b630:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800b632:	1c54      	adds	r4, r2, #1
 800b634:	6244      	str	r4, [r0, #36]	; 0x24
 800b636:	6909      	ldr	r1, [r1, #16]
 800b638:	7011      	strb	r1, [r2, #0]
			hi2c->XferCount--;
 800b63a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800b63c:	b292      	uxth	r2, r2
 800b63e:	3a01      	subs	r2, #1
 800b640:	b292      	uxth	r2, r2
 800b642:	8542      	strh	r2, [r0, #42]	; 0x2a
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 800b644:	6802      	ldr	r2, [r0, #0]
 800b646:	6951      	ldr	r1, [r2, #20]
 800b648:	f011 0f40 	tst.w	r1, #64	; 0x40
 800b64c:	d009      	beq.n	800b662 <I2C_Slave_STOPF+0x9a>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800b64e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800b650:	1c4c      	adds	r4, r1, #1
 800b652:	6244      	str	r4, [r0, #36]	; 0x24
 800b654:	6912      	ldr	r2, [r2, #16]
 800b656:	700a      	strb	r2, [r1, #0]
			hi2c->XferCount--;
 800b658:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800b65a:	b292      	uxth	r2, r2
 800b65c:	3a01      	subs	r2, #1
 800b65e:	b292      	uxth	r2, r2
 800b660:	8542      	strh	r2, [r0, #42]	; 0x2a
		hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b662:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b664:	f042 0204 	orr.w	r2, r2, #4
 800b668:	6402      	str	r2, [r0, #64]	; 0x40
	if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE) {
 800b66a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b66c:	b9d2      	cbnz	r2, 800b6a4 <I2C_Slave_STOPF+0xdc>
		if ((CurrentState == HAL_I2C_STATE_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 800b66e:	2b28      	cmp	r3, #40	; 0x28
 800b670:	d01b      	beq.n	800b6aa <I2C_Slave_STOPF+0xe2>
 800b672:	2b2a      	cmp	r3, #42	; 0x2a
 800b674:	d019      	beq.n	800b6aa <I2C_Slave_STOPF+0xe2>
 800b676:	2b29      	cmp	r3, #41	; 0x29
 800b678:	d017      	beq.n	800b6aa <I2C_Slave_STOPF+0xe2>
			if ((hi2c->PreviousState == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX)) {
 800b67a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800b67c:	2a22      	cmp	r2, #34	; 0x22
 800b67e:	d001      	beq.n	800b684 <I2C_Slave_STOPF+0xbc>
 800b680:	2b22      	cmp	r3, #34	; 0x22
 800b682:	d11d      	bne.n	800b6c0 <I2C_Slave_STOPF+0xf8>
				hi2c->PreviousState = I2C_STATE_NONE;
 800b684:	2300      	movs	r3, #0
 800b686:	6303      	str	r3, [r0, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 800b688:	2220      	movs	r2, #32
 800b68a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
				hi2c->Mode = HAL_I2C_MODE_NONE;
 800b68e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
				HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b692:	f7ff fca0 	bl	800afd6 <HAL_I2C_SlaveRxCpltCallback>
 800b696:	e013      	b.n	800b6c0 <I2C_Slave_STOPF+0xf8>
			hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800b698:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800b69a:	6812      	ldr	r2, [r2, #0]
 800b69c:	6852      	ldr	r2, [r2, #4]
 800b69e:	b292      	uxth	r2, r2
 800b6a0:	8542      	strh	r2, [r0, #42]	; 0x2a
 800b6a2:	e7be      	b.n	800b622 <I2C_Slave_STOPF+0x5a>
		I2C_ITError(hi2c);
 800b6a4:	f7ff feea 	bl	800b47c <I2C_ITError>
 800b6a8:	e00a      	b.n	800b6c0 <I2C_Slave_STOPF+0xf8>
			hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b6aa:	4b07      	ldr	r3, [pc, #28]	; (800b6c8 <I2C_Slave_STOPF+0x100>)
 800b6ac:	62c3      	str	r3, [r0, #44]	; 0x2c
			hi2c->PreviousState = I2C_STATE_NONE;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 800b6b2:	2220      	movs	r2, #32
 800b6b4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
			hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6b8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			HAL_I2C_ListenCpltCallback(hi2c);
 800b6bc:	f7ff fcc7 	bl	800b04e <HAL_I2C_ListenCpltCallback>
}
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	b002      	add	sp, #8
 800b6c4:	bd10      	pop	{r4, pc}
 800b6c6:	bf00      	nop
 800b6c8:	ffff0000 	.word	0xffff0000

0800b6cc <HAL_I2C_EV_IRQHandler>:
{
 800b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ce:	4605      	mov	r5, r0
	uint32_t sr2itflags = READ_REG(hi2c->Instance->SR2);
 800b6d0:	6803      	ldr	r3, [r0, #0]
 800b6d2:	699f      	ldr	r7, [r3, #24]
	uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800b6d4:	695c      	ldr	r4, [r3, #20]
	uint32_t itsources = READ_REG(hi2c->Instance->CR2);
 800b6d6:	685e      	ldr	r6, [r3, #4]
	uint32_t CurrentMode = hi2c->Mode;
 800b6d8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b6dc:	b2db      	uxtb	r3, r3
	if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) {
 800b6de:	2b10      	cmp	r3, #16
 800b6e0:	d025      	beq.n	800b72e <HAL_I2C_EV_IRQHandler+0x62>
 800b6e2:	2b40      	cmp	r3, #64	; 0x40
 800b6e4:	d023      	beq.n	800b72e <HAL_I2C_EV_IRQHandler+0x62>
		if (((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 800b6e6:	4b4c      	ldr	r3, [pc, #304]	; (800b818 <HAL_I2C_EV_IRQHandler+0x14c>)
 800b6e8:	4023      	ands	r3, r4
 800b6ea:	b113      	cbz	r3, 800b6f2 <HAL_I2C_EV_IRQHandler+0x26>
 800b6ec:	f416 7f00 	tst.w	r6, #512	; 0x200
 800b6f0:	d16e      	bne.n	800b7d0 <HAL_I2C_EV_IRQHandler+0x104>
		else if (((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 800b6f2:	4b4a      	ldr	r3, [pc, #296]	; (800b81c <HAL_I2C_EV_IRQHandler+0x150>)
 800b6f4:	4023      	ands	r3, r4
 800b6f6:	b113      	cbz	r3, 800b6fe <HAL_I2C_EV_IRQHandler+0x32>
 800b6f8:	f416 7f00 	tst.w	r6, #512	; 0x200
 800b6fc:	d16b      	bne.n	800b7d6 <HAL_I2C_EV_IRQHandler+0x10a>
		else if ((sr2itflags & I2C_FLAG_TRA) != RESET) {
 800b6fe:	4b48      	ldr	r3, [pc, #288]	; (800b820 <HAL_I2C_EV_IRQHandler+0x154>)
 800b700:	403b      	ands	r3, r7
 800b702:	2b00      	cmp	r3, #0
 800b704:	d06f      	beq.n	800b7e6 <HAL_I2C_EV_IRQHandler+0x11a>
			if (((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 800b706:	4b47      	ldr	r3, [pc, #284]	; (800b824 <HAL_I2C_EV_IRQHandler+0x158>)
 800b708:	4023      	ands	r3, r4
 800b70a:	b133      	cbz	r3, 800b71a <HAL_I2C_EV_IRQHandler+0x4e>
 800b70c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800b710:	d003      	beq.n	800b71a <HAL_I2C_EV_IRQHandler+0x4e>
 800b712:	4b45      	ldr	r3, [pc, #276]	; (800b828 <HAL_I2C_EV_IRQHandler+0x15c>)
 800b714:	4023      	ands	r3, r4
 800b716:	2b00      	cmp	r3, #0
 800b718:	d061      	beq.n	800b7de <HAL_I2C_EV_IRQHandler+0x112>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 800b71a:	4b43      	ldr	r3, [pc, #268]	; (800b828 <HAL_I2C_EV_IRQHandler+0x15c>)
 800b71c:	4023      	ands	r3, r4
 800b71e:	b353      	cbz	r3, 800b776 <HAL_I2C_EV_IRQHandler+0xaa>
 800b720:	f416 7f00 	tst.w	r6, #512	; 0x200
 800b724:	d027      	beq.n	800b776 <HAL_I2C_EV_IRQHandler+0xaa>
				I2C_SlaveTransmit_BTF(hi2c);
 800b726:	4628      	mov	r0, r5
 800b728:	f7fe fb4d 	bl	8009dc6 <I2C_SlaveTransmit_BTF>
 800b72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 800b72e:	f014 1f01 	tst.w	r4, #65537	; 0x10001
 800b732:	d002      	beq.n	800b73a <HAL_I2C_EV_IRQHandler+0x6e>
 800b734:	f416 7f00 	tst.w	r6, #512	; 0x200
 800b738:	d11e      	bne.n	800b778 <HAL_I2C_EV_IRQHandler+0xac>
		else if (((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 800b73a:	4b3c      	ldr	r3, [pc, #240]	; (800b82c <HAL_I2C_EV_IRQHandler+0x160>)
 800b73c:	4023      	ands	r3, r4
 800b73e:	b113      	cbz	r3, 800b746 <HAL_I2C_EV_IRQHandler+0x7a>
 800b740:	f416 7f00 	tst.w	r6, #512	; 0x200
 800b744:	d11c      	bne.n	800b780 <HAL_I2C_EV_IRQHandler+0xb4>
		else if (((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 800b746:	4b34      	ldr	r3, [pc, #208]	; (800b818 <HAL_I2C_EV_IRQHandler+0x14c>)
 800b748:	4023      	ands	r3, r4
 800b74a:	b113      	cbz	r3, 800b752 <HAL_I2C_EV_IRQHandler+0x86>
 800b74c:	f416 7f00 	tst.w	r6, #512	; 0x200
 800b750:	d11a      	bne.n	800b788 <HAL_I2C_EV_IRQHandler+0xbc>
		if ((sr2itflags & I2C_FLAG_TRA) != RESET) {
 800b752:	4b33      	ldr	r3, [pc, #204]	; (800b820 <HAL_I2C_EV_IRQHandler+0x154>)
 800b754:	403b      	ands	r3, r7
 800b756:	b31b      	cbz	r3, 800b7a0 <HAL_I2C_EV_IRQHandler+0xd4>
			if (((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 800b758:	4b32      	ldr	r3, [pc, #200]	; (800b824 <HAL_I2C_EV_IRQHandler+0x158>)
 800b75a:	4023      	ands	r3, r4
 800b75c:	b12b      	cbz	r3, 800b76a <HAL_I2C_EV_IRQHandler+0x9e>
 800b75e:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800b762:	d002      	beq.n	800b76a <HAL_I2C_EV_IRQHandler+0x9e>
 800b764:	4b30      	ldr	r3, [pc, #192]	; (800b828 <HAL_I2C_EV_IRQHandler+0x15c>)
 800b766:	4023      	ands	r3, r4
 800b768:	b193      	cbz	r3, 800b790 <HAL_I2C_EV_IRQHandler+0xc4>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 800b76a:	4b2f      	ldr	r3, [pc, #188]	; (800b828 <HAL_I2C_EV_IRQHandler+0x15c>)
 800b76c:	4023      	ands	r3, r4
 800b76e:	b113      	cbz	r3, 800b776 <HAL_I2C_EV_IRQHandler+0xaa>
 800b770:	f416 7f00 	tst.w	r6, #512	; 0x200
 800b774:	d110      	bne.n	800b798 <HAL_I2C_EV_IRQHandler+0xcc>
 800b776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			I2C_Master_SB(hi2c);
 800b778:	4628      	mov	r0, r5
 800b77a:	f7fe f9f3 	bl	8009b64 <I2C_Master_SB>
 800b77e:	e7e8      	b.n	800b752 <HAL_I2C_EV_IRQHandler+0x86>
			I2C_Master_ADD10(hi2c);
 800b780:	4628      	mov	r0, r5
 800b782:	f7fe fa34 	bl	8009bee <I2C_Master_ADD10>
 800b786:	e7e4      	b.n	800b752 <HAL_I2C_EV_IRQHandler+0x86>
			I2C_Master_ADDR(hi2c);
 800b788:	4628      	mov	r0, r5
 800b78a:	f7fe fa36 	bl	8009bfa <I2C_Master_ADDR>
 800b78e:	e7e0      	b.n	800b752 <HAL_I2C_EV_IRQHandler+0x86>
				I2C_MasterTransmit_TXE(hi2c);
 800b790:	4628      	mov	r0, r5
 800b792:	f7ff fca8 	bl	800b0e6 <I2C_MasterTransmit_TXE>
 800b796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				I2C_MasterTransmit_BTF(hi2c);
 800b798:	4628      	mov	r0, r5
 800b79a:	f7ff fd49 	bl	800b230 <I2C_MasterTransmit_BTF>
 800b79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 800b7a0:	4b23      	ldr	r3, [pc, #140]	; (800b830 <HAL_I2C_EV_IRQHandler+0x164>)
 800b7a2:	4023      	ands	r3, r4
 800b7a4:	b12b      	cbz	r3, 800b7b2 <HAL_I2C_EV_IRQHandler+0xe6>
 800b7a6:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800b7aa:	d002      	beq.n	800b7b2 <HAL_I2C_EV_IRQHandler+0xe6>
 800b7ac:	4b1e      	ldr	r3, [pc, #120]	; (800b828 <HAL_I2C_EV_IRQHandler+0x15c>)
 800b7ae:	4023      	ands	r3, r4
 800b7b0:	b153      	cbz	r3, 800b7c8 <HAL_I2C_EV_IRQHandler+0xfc>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 800b7b2:	4b1d      	ldr	r3, [pc, #116]	; (800b828 <HAL_I2C_EV_IRQHandler+0x15c>)
 800b7b4:	4023      	ands	r3, r4
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d0dd      	beq.n	800b776 <HAL_I2C_EV_IRQHandler+0xaa>
 800b7ba:	f416 7f00 	tst.w	r6, #512	; 0x200
 800b7be:	d0da      	beq.n	800b776 <HAL_I2C_EV_IRQHandler+0xaa>
				I2C_MasterReceive_BTF(hi2c);
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	f7ff fdd3 	bl	800b36c <I2C_MasterReceive_BTF>
 800b7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				I2C_MasterReceive_RXNE(hi2c);
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	f7ff fd81 	bl	800b2d0 <I2C_MasterReceive_RXNE>
 800b7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			I2C_Slave_ADDR(hi2c);
 800b7d0:	f7ff fc29 	bl	800b026 <I2C_Slave_ADDR>
 800b7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			I2C_Slave_STOPF(hi2c);
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	f7ff fef6 	bl	800b5c8 <I2C_Slave_STOPF>
 800b7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				I2C_SlaveTransmit_TXE(hi2c);
 800b7de:	4628      	mov	r0, r5
 800b7e0:	f7ff fbd1 	bl	800af86 <I2C_SlaveTransmit_TXE>
 800b7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 800b7e6:	4b12      	ldr	r3, [pc, #72]	; (800b830 <HAL_I2C_EV_IRQHandler+0x164>)
 800b7e8:	4023      	ands	r3, r4
 800b7ea:	b12b      	cbz	r3, 800b7f8 <HAL_I2C_EV_IRQHandler+0x12c>
 800b7ec:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800b7f0:	d002      	beq.n	800b7f8 <HAL_I2C_EV_IRQHandler+0x12c>
 800b7f2:	4b0d      	ldr	r3, [pc, #52]	; (800b828 <HAL_I2C_EV_IRQHandler+0x15c>)
 800b7f4:	4023      	ands	r3, r4
 800b7f6:	b153      	cbz	r3, 800b80e <HAL_I2C_EV_IRQHandler+0x142>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 800b7f8:	4b0b      	ldr	r3, [pc, #44]	; (800b828 <HAL_I2C_EV_IRQHandler+0x15c>)
 800b7fa:	4023      	ands	r3, r4
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d0ba      	beq.n	800b776 <HAL_I2C_EV_IRQHandler+0xaa>
 800b800:	f416 7f00 	tst.w	r6, #512	; 0x200
 800b804:	d0b7      	beq.n	800b776 <HAL_I2C_EV_IRQHandler+0xaa>
				I2C_SlaveReceive_BTF(hi2c);
 800b806:	4628      	mov	r0, r5
 800b808:	f7fe faed 	bl	8009de6 <I2C_SlaveReceive_BTF>
}
 800b80c:	e7b3      	b.n	800b776 <HAL_I2C_EV_IRQHandler+0xaa>
				I2C_SlaveReceive_RXNE(hi2c);
 800b80e:	4628      	mov	r0, r5
 800b810:	f7ff fbe2 	bl	800afd8 <I2C_SlaveReceive_RXNE>
 800b814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b816:	bf00      	nop
 800b818:	00010002 	.word	0x00010002
 800b81c:	00010010 	.word	0x00010010
 800b820:	00100004 	.word	0x00100004
 800b824:	00010080 	.word	0x00010080
 800b828:	00010004 	.word	0x00010004
 800b82c:	00010008 	.word	0x00010008
 800b830:	00010040 	.word	0x00010040

0800b834 <HAL_I2C_ER_IRQHandler>:
{
 800b834:	b570      	push	{r4, r5, r6, lr}
 800b836:	4604      	mov	r4, r0
	uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800b838:	6803      	ldr	r3, [r0, #0]
 800b83a:	695d      	ldr	r5, [r3, #20]
	uint32_t itsources = READ_REG(hi2c->Instance->CR2);
 800b83c:	685e      	ldr	r6, [r3, #4]
	if (((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 800b83e:	4a31      	ldr	r2, [pc, #196]	; (800b904 <HAL_I2C_ER_IRQHandler+0xd0>)
 800b840:	4215      	tst	r5, r2
 800b842:	d009      	beq.n	800b858 <HAL_I2C_ER_IRQHandler+0x24>
 800b844:	f416 7f80 	tst.w	r6, #256	; 0x100
 800b848:	d006      	beq.n	800b858 <HAL_I2C_ER_IRQHandler+0x24>
		hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b84a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b84c:	f042 0201 	orr.w	r2, r2, #1
 800b850:	6402      	str	r2, [r0, #64]	; 0x40
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b852:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b856:	615a      	str	r2, [r3, #20]
	if (((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 800b858:	f415 3f81 	tst.w	r5, #66048	; 0x10200
 800b85c:	d00a      	beq.n	800b874 <HAL_I2C_ER_IRQHandler+0x40>
 800b85e:	f416 7f80 	tst.w	r6, #256	; 0x100
 800b862:	d007      	beq.n	800b874 <HAL_I2C_ER_IRQHandler+0x40>
		hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b866:	f043 0302 	orr.w	r3, r3, #2
 800b86a:	6423      	str	r3, [r4, #64]	; 0x40
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b86c:	6823      	ldr	r3, [r4, #0]
 800b86e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800b872:	615a      	str	r2, [r3, #20]
	if (((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 800b874:	f415 3f82 	tst.w	r5, #66560	; 0x10400
 800b878:	d01a      	beq.n	800b8b0 <HAL_I2C_ER_IRQHandler+0x7c>
 800b87a:	f416 7f80 	tst.w	r6, #256	; 0x100
 800b87e:	d017      	beq.n	800b8b0 <HAL_I2C_ER_IRQHandler+0x7c>
		tmp1 = hi2c->Mode;
 800b880:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800b884:	b2db      	uxtb	r3, r3
		tmp2 = hi2c->XferCount;
 800b886:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b888:	b291      	uxth	r1, r2
		tmp3 = hi2c->State;
 800b88a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800b88e:	b2d2      	uxtb	r2, r2
		tmp4 = hi2c->PreviousState;
 800b890:	6b20      	ldr	r0, [r4, #48]	; 0x30
		if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800b892:	2b20      	cmp	r3, #32
 800b894:	d01d      	beq.n	800b8d2 <HAL_I2C_ER_IRQHandler+0x9e>
			hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b896:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b898:	f043 0304 	orr.w	r3, r3, #4
 800b89c:	6423      	str	r3, [r4, #64]	; 0x40
			if (hi2c->Mode == HAL_I2C_MODE_MASTER) {
 800b89e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	2b10      	cmp	r3, #16
 800b8a6:	d022      	beq.n	800b8ee <HAL_I2C_ER_IRQHandler+0xba>
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b8ae:	615a      	str	r2, [r3, #20]
	if (((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 800b8b0:	f415 3f84 	tst.w	r5, #67584	; 0x10800
 800b8b4:	d00a      	beq.n	800b8cc <HAL_I2C_ER_IRQHandler+0x98>
 800b8b6:	f416 7f80 	tst.w	r6, #256	; 0x100
 800b8ba:	d007      	beq.n	800b8cc <HAL_I2C_ER_IRQHandler+0x98>
		hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b8bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8be:	f043 0308 	orr.w	r3, r3, #8
 800b8c2:	6423      	str	r3, [r4, #64]	; 0x40
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b8c4:	6823      	ldr	r3, [r4, #0]
 800b8c6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800b8ca:	615a      	str	r2, [r3, #20]
	if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE) {
 800b8cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8ce:	b9a3      	cbnz	r3, 800b8fa <HAL_I2C_ER_IRQHandler+0xc6>
 800b8d0:	bd70      	pop	{r4, r5, r6, pc}
		if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800b8d2:	2900      	cmp	r1, #0
 800b8d4:	d1df      	bne.n	800b896 <HAL_I2C_ER_IRQHandler+0x62>
 800b8d6:	2a21      	cmp	r2, #33	; 0x21
 800b8d8:	d005      	beq.n	800b8e6 <HAL_I2C_ER_IRQHandler+0xb2>
		    ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800b8da:	2a29      	cmp	r2, #41	; 0x29
 800b8dc:	d003      	beq.n	800b8e6 <HAL_I2C_ER_IRQHandler+0xb2>
 800b8de:	2a28      	cmp	r2, #40	; 0x28
 800b8e0:	d1d9      	bne.n	800b896 <HAL_I2C_ER_IRQHandler+0x62>
		     ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX)))) {
 800b8e2:	2821      	cmp	r0, #33	; 0x21
 800b8e4:	d1d7      	bne.n	800b896 <HAL_I2C_ER_IRQHandler+0x62>
			I2C_Slave_AF(hi2c);
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f7ff fbb2 	bl	800b050 <I2C_Slave_AF>
 800b8ec:	e7e0      	b.n	800b8b0 <HAL_I2C_ER_IRQHandler+0x7c>
				SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8ee:	6822      	ldr	r2, [r4, #0]
 800b8f0:	6813      	ldr	r3, [r2, #0]
 800b8f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b8f6:	6013      	str	r3, [r2, #0]
 800b8f8:	e7d6      	b.n	800b8a8 <HAL_I2C_ER_IRQHandler+0x74>
		I2C_ITError(hi2c);
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f7ff fdbe 	bl	800b47c <I2C_ITError>
}
 800b900:	e7e6      	b.n	800b8d0 <HAL_I2C_ER_IRQHandler+0x9c>
 800b902:	bf00      	nop
 800b904:	00010100 	.word	0x00010100

0800b908 <I2C_DMAAbort>:
{
 800b908:	b508      	push	{r3, lr}
	I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b90a:	6b80      	ldr	r0, [r0, #56]	; 0x38
	hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800b90c:	6802      	ldr	r2, [r0, #0]
 800b90e:	6813      	ldr	r3, [r2, #0]
 800b910:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b914:	6013      	str	r3, [r2, #0]
	hi2c->XferCount = 0U;
 800b916:	2300      	movs	r3, #0
 800b918:	8543      	strh	r3, [r0, #42]	; 0x2a
	hi2c->hdmatx->XferAbortCallback = NULL;
 800b91a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b91c:	6513      	str	r3, [r2, #80]	; 0x50
	hi2c->hdmarx->XferAbortCallback = NULL;
 800b91e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800b920:	6513      	str	r3, [r2, #80]	; 0x50
	if (hi2c->State == HAL_I2C_STATE_ABORT) {
 800b922:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b926:	b2db      	uxtb	r3, r3
 800b928:	2b60      	cmp	r3, #96	; 0x60
 800b92a:	d00d      	beq.n	800b948 <I2C_DMAAbort+0x40>
		hi2c->State = HAL_I2C_STATE_READY;
 800b92c:	2320      	movs	r3, #32
 800b92e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800b932:	2300      	movs	r3, #0
 800b934:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		__HAL_I2C_DISABLE(hi2c);
 800b938:	6802      	ldr	r2, [r0, #0]
 800b93a:	6813      	ldr	r3, [r2, #0]
 800b93c:	f023 0301 	bic.w	r3, r3, #1
 800b940:	6013      	str	r3, [r2, #0]
		HAL_I2C_ErrorCallback(hi2c);
 800b942:	f7ff fd99 	bl	800b478 <HAL_I2C_ErrorCallback>
 800b946:	bd08      	pop	{r3, pc}
		hi2c->State = HAL_I2C_STATE_READY;
 800b948:	2320      	movs	r3, #32
 800b94a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800b94e:	2300      	movs	r3, #0
 800b950:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b954:	6403      	str	r3, [r0, #64]	; 0x40
		__HAL_I2C_DISABLE(hi2c);
 800b956:	6802      	ldr	r2, [r0, #0]
 800b958:	6813      	ldr	r3, [r2, #0]
 800b95a:	f023 0301 	bic.w	r3, r3, #1
 800b95e:	6013      	str	r3, [r2, #0]
		HAL_I2C_AbortCpltCallback(hi2c);
 800b960:	f7ff fd8b 	bl	800b47a <HAL_I2C_AbortCpltCallback>
 800b964:	bd08      	pop	{r3, pc}
	...

0800b968 <HAL_PWR_EnableBkUpAccess>:
 *         Backup Domain Access should be kept enabled.
 * @retval None
 */
void HAL_PWR_EnableBkUpAccess(void)
{
	*(__IO uint32_t *)CR_DBP_BB = (uint32_t)ENABLE;
 800b968:	2201      	movs	r2, #1
 800b96a:	4b01      	ldr	r3, [pc, #4]	; (800b970 <HAL_PWR_EnableBkUpAccess+0x8>)
 800b96c:	601a      	str	r2, [r3, #0]
 800b96e:	4770      	bx	lr
 800b970:	420e0020 	.word	0x420e0020

0800b974 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 800b974:	2800      	cmp	r0, #0
 800b976:	f000 8235 	beq.w	800bde4 <HAL_RCC_OscConfig+0x470>
{
 800b97a:	b570      	push	{r4, r5, r6, lr}
 800b97c:	b082      	sub	sp, #8
 800b97e:	4604      	mov	r4, r0
		return HAL_ERROR;
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800b980:	6803      	ldr	r3, [r0, #0]
 800b982:	2b0f      	cmp	r3, #15
 800b984:	d83d      	bhi.n	800ba02 <HAL_RCC_OscConfig+0x8e>
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) {
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	f013 0f01 	tst.w	r3, #1
 800b98c:	d04c      	beq.n	800ba28 <HAL_RCC_OscConfig+0xb4>
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800b98e:	6863      	ldr	r3, [r4, #4]
 800b990:	b14b      	cbz	r3, 800b9a6 <HAL_RCC_OscConfig+0x32>
 800b992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b996:	d006      	beq.n	800b9a6 <HAL_RCC_OscConfig+0x32>
 800b998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b99c:	d003      	beq.n	800b9a6 <HAL_RCC_OscConfig+0x32>
 800b99e:	21fb      	movs	r1, #251	; 0xfb
 800b9a0:	48a2      	ldr	r0, [pc, #648]	; (800bc2c <HAL_RCC_OscConfig+0x2b8>)
 800b9a2:	f004 f8e9 	bl	800fb78 <assert_failed>
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b9a6:	4ba2      	ldr	r3, [pc, #648]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	f003 030c 	and.w	r3, r3, #12
 800b9ae:	2b04      	cmp	r3, #4
 800b9b0:	d031      	beq.n	800ba16 <HAL_RCC_OscConfig+0xa2>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 800b9b2:	4b9f      	ldr	r3, [pc, #636]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	f003 030c 	and.w	r3, r3, #12
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b9ba:	2b08      	cmp	r3, #8
 800b9bc:	d026      	beq.n	800ba0c <HAL_RCC_OscConfig+0x98>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
				return HAL_ERROR;
			}
		}else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b9be:	6863      	ldr	r3, [r4, #4]
 800b9c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9c4:	d05f      	beq.n	800ba86 <HAL_RCC_OscConfig+0x112>
 800b9c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9ca:	d062      	beq.n	800ba92 <HAL_RCC_OscConfig+0x11e>
 800b9cc:	4b98      	ldr	r3, [pc, #608]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b9d4:	601a      	str	r2, [r3, #0]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b9dc:	601a      	str	r2, [r3, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 800b9de:	6863      	ldr	r3, [r4, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d060      	beq.n	800baa6 <HAL_RCC_OscConfig+0x132>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800b9e4:	f7fc ff00 	bl	80087e8 <HAL_GetTick>
 800b9e8:	4605      	mov	r5, r0

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800b9ea:	4b91      	ldr	r3, [pc, #580]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b9f2:	d119      	bne.n	800ba28 <HAL_RCC_OscConfig+0xb4>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800b9f4:	f7fc fef8 	bl	80087e8 <HAL_GetTick>
 800b9f8:	1b40      	subs	r0, r0, r5
 800b9fa:	2864      	cmp	r0, #100	; 0x64
 800b9fc:	d9f5      	bls.n	800b9ea <HAL_RCC_OscConfig+0x76>
						return HAL_TIMEOUT;
 800b9fe:	2003      	movs	r0, #3
 800ba00:	e1f5      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800ba02:	21f7      	movs	r1, #247	; 0xf7
 800ba04:	4889      	ldr	r0, [pc, #548]	; (800bc2c <HAL_RCC_OscConfig+0x2b8>)
 800ba06:	f004 f8b7 	bl	800fb78 <assert_failed>
 800ba0a:	e7bc      	b.n	800b986 <HAL_RCC_OscConfig+0x12>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 800ba0c:	4b88      	ldr	r3, [pc, #544]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800ba14:	d0d3      	beq.n	800b9be <HAL_RCC_OscConfig+0x4a>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 800ba16:	4b86      	ldr	r3, [pc, #536]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800ba1e:	d003      	beq.n	800ba28 <HAL_RCC_OscConfig+0xb4>
 800ba20:	6863      	ldr	r3, [r4, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	f000 81e0 	beq.w	800bde8 <HAL_RCC_OscConfig+0x474>
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) {
 800ba28:	6823      	ldr	r3, [r4, #0]
 800ba2a:	f013 0f02 	tst.w	r3, #2
 800ba2e:	d066      	beq.n	800bafe <HAL_RCC_OscConfig+0x18a>
		/* Check the parameters */
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800ba30:	68e3      	ldr	r3, [r4, #12]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d904      	bls.n	800ba40 <HAL_RCC_OscConfig+0xcc>
 800ba36:	f240 1121 	movw	r1, #289	; 0x121
 800ba3a:	487c      	ldr	r0, [pc, #496]	; (800bc2c <HAL_RCC_OscConfig+0x2b8>)
 800ba3c:	f004 f89c 	bl	800fb78 <assert_failed>
		assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800ba40:	6923      	ldr	r3, [r4, #16]
 800ba42:	2b1f      	cmp	r3, #31
 800ba44:	d83e      	bhi.n	800bac4 <HAL_RCC_OscConfig+0x150>

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ba46:	4b7a      	ldr	r3, [pc, #488]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	f013 0f0c 	tst.w	r3, #12
 800ba4e:	d044      	beq.n	800bada <HAL_RCC_OscConfig+0x166>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 800ba50:	4b77      	ldr	r3, [pc, #476]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	f003 030c 	and.w	r3, r3, #12
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ba58:	2b08      	cmp	r3, #8
 800ba5a:	d039      	beq.n	800bad0 <HAL_RCC_OscConfig+0x15c>
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
			}
		}else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 800ba5c:	68e3      	ldr	r3, [r4, #12]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d076      	beq.n	800bb50 <HAL_RCC_OscConfig+0x1dc>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 800ba62:	2201      	movs	r2, #1
 800ba64:	4b73      	ldr	r3, [pc, #460]	; (800bc34 <HAL_RCC_OscConfig+0x2c0>)
 800ba66:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 800ba68:	f7fc febe 	bl	80087e8 <HAL_GetTick>
 800ba6c:	4605      	mov	r5, r0

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800ba6e:	4b70      	ldr	r3, [pc, #448]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f013 0f02 	tst.w	r3, #2
 800ba76:	d162      	bne.n	800bb3e <HAL_RCC_OscConfig+0x1ca>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800ba78:	f7fc feb6 	bl	80087e8 <HAL_GetTick>
 800ba7c:	1b40      	subs	r0, r0, r5
 800ba7e:	2802      	cmp	r0, #2
 800ba80:	d9f5      	bls.n	800ba6e <HAL_RCC_OscConfig+0xfa>
						return HAL_TIMEOUT;
 800ba82:	2003      	movs	r0, #3
 800ba84:	e1b3      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ba86:	4a6a      	ldr	r2, [pc, #424]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800ba88:	6813      	ldr	r3, [r2, #0]
 800ba8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba8e:	6013      	str	r3, [r2, #0]
 800ba90:	e7a5      	b.n	800b9de <HAL_RCC_OscConfig+0x6a>
 800ba92:	4b67      	ldr	r3, [pc, #412]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ba9a:	601a      	str	r2, [r3, #0]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800baa2:	601a      	str	r2, [r3, #0]
 800baa4:	e79b      	b.n	800b9de <HAL_RCC_OscConfig+0x6a>
				tickstart = HAL_GetTick();
 800baa6:	f7fc fe9f 	bl	80087e8 <HAL_GetTick>
 800baaa:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800baac:	4b60      	ldr	r3, [pc, #384]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800bab4:	d0b8      	beq.n	800ba28 <HAL_RCC_OscConfig+0xb4>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800bab6:	f7fc fe97 	bl	80087e8 <HAL_GetTick>
 800baba:	1b40      	subs	r0, r0, r5
 800babc:	2864      	cmp	r0, #100	; 0x64
 800babe:	d9f5      	bls.n	800baac <HAL_RCC_OscConfig+0x138>
						return HAL_TIMEOUT;
 800bac0:	2003      	movs	r0, #3
 800bac2:	e194      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
		assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800bac4:	f44f 7191 	mov.w	r1, #290	; 0x122
 800bac8:	4858      	ldr	r0, [pc, #352]	; (800bc2c <HAL_RCC_OscConfig+0x2b8>)
 800baca:	f004 f855 	bl	800fb78 <assert_failed>
 800bace:	e7ba      	b.n	800ba46 <HAL_RCC_OscConfig+0xd2>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 800bad0:	4b57      	ldr	r3, [pc, #348]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800bad8:	d1c0      	bne.n	800ba5c <HAL_RCC_OscConfig+0xe8>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 800bada:	4b55      	ldr	r3, [pc, #340]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f013 0f02 	tst.w	r3, #2
 800bae2:	d004      	beq.n	800baee <HAL_RCC_OscConfig+0x17a>
 800bae4:	68e3      	ldr	r3, [r4, #12]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d001      	beq.n	800baee <HAL_RCC_OscConfig+0x17a>
				return HAL_ERROR;
 800baea:	2001      	movs	r0, #1
 800baec:	e17f      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800baee:	4a50      	ldr	r2, [pc, #320]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800baf0:	6813      	ldr	r3, [r2, #0]
 800baf2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800baf6:	6921      	ldr	r1, [r4, #16]
 800baf8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800bafc:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) {
 800bafe:	6823      	ldr	r3, [r4, #0]
 800bb00:	f013 0f08 	tst.w	r3, #8
 800bb04:	d048      	beq.n	800bb98 <HAL_RCC_OscConfig+0x224>
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800bb06:	6963      	ldr	r3, [r4, #20]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d904      	bls.n	800bb16 <HAL_RCC_OscConfig+0x1a2>
 800bb0c:	f240 1155 	movw	r1, #341	; 0x155
 800bb10:	4846      	ldr	r0, [pc, #280]	; (800bc2c <HAL_RCC_OscConfig+0x2b8>)
 800bb12:	f004 f831 	bl	800fb78 <assert_failed>

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 800bb16:	6963      	ldr	r3, [r4, #20]
 800bb18:	b363      	cbz	r3, 800bb74 <HAL_RCC_OscConfig+0x200>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	4b46      	ldr	r3, [pc, #280]	; (800bc38 <HAL_RCC_OscConfig+0x2c4>)
 800bb1e:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800bb20:	f7fc fe62 	bl	80087e8 <HAL_GetTick>
 800bb24:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800bb26:	4b42      	ldr	r3, [pc, #264]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800bb28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb2a:	f013 0f02 	tst.w	r3, #2
 800bb2e:	d133      	bne.n	800bb98 <HAL_RCC_OscConfig+0x224>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800bb30:	f7fc fe5a 	bl	80087e8 <HAL_GetTick>
 800bb34:	1b40      	subs	r0, r0, r5
 800bb36:	2802      	cmp	r0, #2
 800bb38:	d9f5      	bls.n	800bb26 <HAL_RCC_OscConfig+0x1b2>
					return HAL_TIMEOUT;
 800bb3a:	2003      	movs	r0, #3
 800bb3c:	e157      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb3e:	4a3c      	ldr	r2, [pc, #240]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800bb40:	6813      	ldr	r3, [r2, #0]
 800bb42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800bb46:	6921      	ldr	r1, [r4, #16]
 800bb48:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800bb4c:	6013      	str	r3, [r2, #0]
 800bb4e:	e7d6      	b.n	800bafe <HAL_RCC_OscConfig+0x18a>
				__HAL_RCC_HSI_DISABLE();
 800bb50:	2200      	movs	r2, #0
 800bb52:	4b38      	ldr	r3, [pc, #224]	; (800bc34 <HAL_RCC_OscConfig+0x2c0>)
 800bb54:	601a      	str	r2, [r3, #0]
				tickstart = HAL_GetTick();
 800bb56:	f7fc fe47 	bl	80087e8 <HAL_GetTick>
 800bb5a:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800bb5c:	4b34      	ldr	r3, [pc, #208]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f013 0f02 	tst.w	r3, #2
 800bb64:	d0cb      	beq.n	800bafe <HAL_RCC_OscConfig+0x18a>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800bb66:	f7fc fe3f 	bl	80087e8 <HAL_GetTick>
 800bb6a:	1b40      	subs	r0, r0, r5
 800bb6c:	2802      	cmp	r0, #2
 800bb6e:	d9f5      	bls.n	800bb5c <HAL_RCC_OscConfig+0x1e8>
						return HAL_TIMEOUT;
 800bb70:	2003      	movs	r0, #3
 800bb72:	e13c      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
				}
			}
		}else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 800bb74:	2200      	movs	r2, #0
 800bb76:	4b30      	ldr	r3, [pc, #192]	; (800bc38 <HAL_RCC_OscConfig+0x2c4>)
 800bb78:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 800bb7a:	f7fc fe35 	bl	80087e8 <HAL_GetTick>
 800bb7e:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 800bb80:	4b2b      	ldr	r3, [pc, #172]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800bb82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb84:	f013 0f02 	tst.w	r3, #2
 800bb88:	d006      	beq.n	800bb98 <HAL_RCC_OscConfig+0x224>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800bb8a:	f7fc fe2d 	bl	80087e8 <HAL_GetTick>
 800bb8e:	1b40      	subs	r0, r0, r5
 800bb90:	2802      	cmp	r0, #2
 800bb92:	d9f5      	bls.n	800bb80 <HAL_RCC_OscConfig+0x20c>
					return HAL_TIMEOUT;
 800bb94:	2003      	movs	r0, #3
 800bb96:	e12a      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) {
 800bb98:	6823      	ldr	r3, [r4, #0]
 800bb9a:	f013 0f04 	tst.w	r3, #4
 800bb9e:	f000 8085 	beq.w	800bcac <HAL_RCC_OscConfig+0x338>
		FlagStatus pwrclkchanged = RESET;

		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800bba2:	68a3      	ldr	r3, [r4, #8]
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d906      	bls.n	800bbb6 <HAL_RCC_OscConfig+0x242>
 800bba8:	2b05      	cmp	r3, #5
 800bbaa:	d004      	beq.n	800bbb6 <HAL_RCC_OscConfig+0x242>
 800bbac:	f240 1179 	movw	r1, #377	; 0x179
 800bbb0:	481e      	ldr	r0, [pc, #120]	; (800bc2c <HAL_RCC_OscConfig+0x2b8>)
 800bbb2:	f003 ffe1 	bl	800fb78 <assert_failed>

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 800bbb6:	4b1e      	ldr	r3, [pc, #120]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800bbb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbba:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800bbbe:	d133      	bne.n	800bc28 <HAL_RCC_OscConfig+0x2b4>
			__HAL_RCC_PWR_CLK_ENABLE();
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	9301      	str	r3, [sp, #4]
 800bbc4:	4b1a      	ldr	r3, [pc, #104]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800bbc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bbc8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bbcc:	641a      	str	r2, [r3, #64]	; 0x40
 800bbce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbd4:	9301      	str	r3, [sp, #4]
 800bbd6:	9b01      	ldr	r3, [sp, #4]
			pwrclkchanged = SET;
 800bbd8:	2501      	movs	r5, #1
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 800bbda:	4b18      	ldr	r3, [pc, #96]	; (800bc3c <HAL_RCC_OscConfig+0x2c8>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f413 7f80 	tst.w	r3, #256	; 0x100
 800bbe2:	d02d      	beq.n	800bc40 <HAL_RCC_OscConfig+0x2cc>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bbe4:	68a3      	ldr	r3, [r4, #8]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d03e      	beq.n	800bc68 <HAL_RCC_OscConfig+0x2f4>
 800bbea:	2b05      	cmp	r3, #5
 800bbec:	d042      	beq.n	800bc74 <HAL_RCC_OscConfig+0x300>
 800bbee:	4b10      	ldr	r3, [pc, #64]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800bbf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bbf2:	f022 0201 	bic.w	r2, r2, #1
 800bbf6:	671a      	str	r2, [r3, #112]	; 0x70
 800bbf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bbfa:	f022 0204 	bic.w	r2, r2, #4
 800bbfe:	671a      	str	r2, [r3, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 800bc00:	68a3      	ldr	r3, [r4, #8]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d040      	beq.n	800bc88 <HAL_RCC_OscConfig+0x314>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800bc06:	f7fc fdef 	bl	80087e8 <HAL_GetTick>
 800bc0a:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800bc0c:	4b08      	ldr	r3, [pc, #32]	; (800bc30 <HAL_RCC_OscConfig+0x2bc>)
 800bc0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc10:	f013 0f02 	tst.w	r3, #2
 800bc14:	d149      	bne.n	800bcaa <HAL_RCC_OscConfig+0x336>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800bc16:	f7fc fde7 	bl	80087e8 <HAL_GetTick>
 800bc1a:	1b80      	subs	r0, r0, r6
 800bc1c:	f241 3388 	movw	r3, #5000	; 0x1388
 800bc20:	4298      	cmp	r0, r3
 800bc22:	d9f3      	bls.n	800bc0c <HAL_RCC_OscConfig+0x298>
					return HAL_TIMEOUT;
 800bc24:	2003      	movs	r0, #3
 800bc26:	e0e2      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
		FlagStatus pwrclkchanged = RESET;
 800bc28:	2500      	movs	r5, #0
 800bc2a:	e7d6      	b.n	800bbda <HAL_RCC_OscConfig+0x266>
 800bc2c:	08021dec 	.word	0x08021dec
 800bc30:	40023800 	.word	0x40023800
 800bc34:	42470000 	.word	0x42470000
 800bc38:	42470e80 	.word	0x42470e80
 800bc3c:	40007000 	.word	0x40007000
			SET_BIT(PWR->CR, PWR_CR_DBP);
 800bc40:	4a6d      	ldr	r2, [pc, #436]	; (800bdf8 <HAL_RCC_OscConfig+0x484>)
 800bc42:	6813      	ldr	r3, [r2, #0]
 800bc44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc48:	6013      	str	r3, [r2, #0]
			tickstart = HAL_GetTick();
 800bc4a:	f7fc fdcd 	bl	80087e8 <HAL_GetTick>
 800bc4e:	4606      	mov	r6, r0
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 800bc50:	4b69      	ldr	r3, [pc, #420]	; (800bdf8 <HAL_RCC_OscConfig+0x484>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f413 7f80 	tst.w	r3, #256	; 0x100
 800bc58:	d1c4      	bne.n	800bbe4 <HAL_RCC_OscConfig+0x270>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800bc5a:	f7fc fdc5 	bl	80087e8 <HAL_GetTick>
 800bc5e:	1b80      	subs	r0, r0, r6
 800bc60:	2802      	cmp	r0, #2
 800bc62:	d9f5      	bls.n	800bc50 <HAL_RCC_OscConfig+0x2dc>
					return HAL_TIMEOUT;
 800bc64:	2003      	movs	r0, #3
 800bc66:	e0c2      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc68:	4a64      	ldr	r2, [pc, #400]	; (800bdfc <HAL_RCC_OscConfig+0x488>)
 800bc6a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800bc6c:	f043 0301 	orr.w	r3, r3, #1
 800bc70:	6713      	str	r3, [r2, #112]	; 0x70
 800bc72:	e7c5      	b.n	800bc00 <HAL_RCC_OscConfig+0x28c>
 800bc74:	4b61      	ldr	r3, [pc, #388]	; (800bdfc <HAL_RCC_OscConfig+0x488>)
 800bc76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc78:	f042 0204 	orr.w	r2, r2, #4
 800bc7c:	671a      	str	r2, [r3, #112]	; 0x70
 800bc7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc80:	f042 0201 	orr.w	r2, r2, #1
 800bc84:	671a      	str	r2, [r3, #112]	; 0x70
 800bc86:	e7bb      	b.n	800bc00 <HAL_RCC_OscConfig+0x28c>
				}
			}
		}else {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 800bc88:	f7fc fdae 	bl	80087e8 <HAL_GetTick>
 800bc8c:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 800bc8e:	4b5b      	ldr	r3, [pc, #364]	; (800bdfc <HAL_RCC_OscConfig+0x488>)
 800bc90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc92:	f013 0f02 	tst.w	r3, #2
 800bc96:	d008      	beq.n	800bcaa <HAL_RCC_OscConfig+0x336>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800bc98:	f7fc fda6 	bl	80087e8 <HAL_GetTick>
 800bc9c:	1b80      	subs	r0, r0, r6
 800bc9e:	f241 3388 	movw	r3, #5000	; 0x1388
 800bca2:	4298      	cmp	r0, r3
 800bca4:	d9f3      	bls.n	800bc8e <HAL_RCC_OscConfig+0x31a>
					return HAL_TIMEOUT;
 800bca6:	2003      	movs	r0, #3
 800bca8:	e0a1      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 800bcaa:	bb0d      	cbnz	r5, 800bcf0 <HAL_RCC_OscConfig+0x37c>
			__HAL_RCC_PWR_CLK_DISABLE();
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800bcac:	69a3      	ldr	r3, [r4, #24]
 800bcae:	2b02      	cmp	r3, #2
 800bcb0:	d824      	bhi.n	800bcfc <HAL_RCC_OscConfig+0x388>
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 800bcb2:	69a3      	ldr	r3, [r4, #24]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f000 8099 	beq.w	800bdec <HAL_RCC_OscConfig+0x478>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 800bcba:	4a50      	ldr	r2, [pc, #320]	; (800bdfc <HAL_RCC_OscConfig+0x488>)
 800bcbc:	6892      	ldr	r2, [r2, #8]
 800bcbe:	f002 020c 	and.w	r2, r2, #12
 800bcc2:	2a08      	cmp	r2, #8
 800bcc4:	f000 8095 	beq.w	800bdf2 <HAL_RCC_OscConfig+0x47e>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d01d      	beq.n	800bd08 <HAL_RCC_OscConfig+0x394>
						return HAL_TIMEOUT;
					}
				}
			}else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 800bccc:	2200      	movs	r2, #0
 800bcce:	4b4c      	ldr	r3, [pc, #304]	; (800be00 <HAL_RCC_OscConfig+0x48c>)
 800bcd0:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800bcd2:	f7fc fd89 	bl	80087e8 <HAL_GetTick>
 800bcd6:	4604      	mov	r4, r0

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800bcd8:	4b48      	ldr	r3, [pc, #288]	; (800bdfc <HAL_RCC_OscConfig+0x488>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800bce0:	d07e      	beq.n	800bde0 <HAL_RCC_OscConfig+0x46c>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800bce2:	f7fc fd81 	bl	80087e8 <HAL_GetTick>
 800bce6:	1b00      	subs	r0, r0, r4
 800bce8:	2802      	cmp	r0, #2
 800bcea:	d9f5      	bls.n	800bcd8 <HAL_RCC_OscConfig+0x364>
						return HAL_TIMEOUT;
 800bcec:	2003      	movs	r0, #3
 800bcee:	e07e      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
			__HAL_RCC_PWR_CLK_DISABLE();
 800bcf0:	4a42      	ldr	r2, [pc, #264]	; (800bdfc <HAL_RCC_OscConfig+0x488>)
 800bcf2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800bcf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bcf8:	6413      	str	r3, [r2, #64]	; 0x40
 800bcfa:	e7d7      	b.n	800bcac <HAL_RCC_OscConfig+0x338>
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800bcfc:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800bd00:	4840      	ldr	r0, [pc, #256]	; (800be04 <HAL_RCC_OscConfig+0x490>)
 800bd02:	f003 ff39 	bl	800fb78 <assert_failed>
 800bd06:	e7d4      	b.n	800bcb2 <HAL_RCC_OscConfig+0x33e>
				assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800bd08:	69e3      	ldr	r3, [r4, #28]
 800bd0a:	b13b      	cbz	r3, 800bd1c <HAL_RCC_OscConfig+0x3a8>
 800bd0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd10:	d004      	beq.n	800bd1c <HAL_RCC_OscConfig+0x3a8>
 800bd12:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800bd16:	483b      	ldr	r0, [pc, #236]	; (800be04 <HAL_RCC_OscConfig+0x490>)
 800bd18:	f003 ff2e 	bl	800fb78 <assert_failed>
				assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800bd1c:	6a23      	ldr	r3, [r4, #32]
 800bd1e:	2b3f      	cmp	r3, #63	; 0x3f
 800bd20:	d828      	bhi.n	800bd74 <HAL_RCC_OscConfig+0x400>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800bd22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd24:	3b32      	subs	r3, #50	; 0x32
 800bd26:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800bd2a:	d829      	bhi.n	800bd80 <HAL_RCC_OscConfig+0x40c>
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800bd2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd2e:	2b02      	cmp	r3, #2
 800bd30:	d00a      	beq.n	800bd48 <HAL_RCC_OscConfig+0x3d4>
 800bd32:	2b04      	cmp	r3, #4
 800bd34:	d008      	beq.n	800bd48 <HAL_RCC_OscConfig+0x3d4>
 800bd36:	2b06      	cmp	r3, #6
 800bd38:	d006      	beq.n	800bd48 <HAL_RCC_OscConfig+0x3d4>
 800bd3a:	2b08      	cmp	r3, #8
 800bd3c:	d004      	beq.n	800bd48 <HAL_RCC_OscConfig+0x3d4>
 800bd3e:	f240 11b9 	movw	r1, #441	; 0x1b9
 800bd42:	4830      	ldr	r0, [pc, #192]	; (800be04 <HAL_RCC_OscConfig+0x490>)
 800bd44:	f003 ff18 	bl	800fb78 <assert_failed>
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800bd48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bd4a:	3b02      	subs	r3, #2
 800bd4c:	2b0d      	cmp	r3, #13
 800bd4e:	d81d      	bhi.n	800bd8c <HAL_RCC_OscConfig+0x418>
				__HAL_RCC_PLL_DISABLE();
 800bd50:	2200      	movs	r2, #0
 800bd52:	4b2b      	ldr	r3, [pc, #172]	; (800be00 <HAL_RCC_OscConfig+0x48c>)
 800bd54:	601a      	str	r2, [r3, #0]
				tickstart = HAL_GetTick();
 800bd56:	f7fc fd47 	bl	80087e8 <HAL_GetTick>
 800bd5a:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800bd5c:	4b27      	ldr	r3, [pc, #156]	; (800bdfc <HAL_RCC_OscConfig+0x488>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800bd64:	d018      	beq.n	800bd98 <HAL_RCC_OscConfig+0x424>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800bd66:	f7fc fd3f 	bl	80087e8 <HAL_GetTick>
 800bd6a:	1b40      	subs	r0, r0, r5
 800bd6c:	2802      	cmp	r0, #2
 800bd6e:	d9f5      	bls.n	800bd5c <HAL_RCC_OscConfig+0x3e8>
						return HAL_TIMEOUT;
 800bd70:	2003      	movs	r0, #3
 800bd72:	e03c      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
				assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800bd74:	f240 11b7 	movw	r1, #439	; 0x1b7
 800bd78:	4822      	ldr	r0, [pc, #136]	; (800be04 <HAL_RCC_OscConfig+0x490>)
 800bd7a:	f003 fefd 	bl	800fb78 <assert_failed>
 800bd7e:	e7d0      	b.n	800bd22 <HAL_RCC_OscConfig+0x3ae>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800bd80:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800bd84:	481f      	ldr	r0, [pc, #124]	; (800be04 <HAL_RCC_OscConfig+0x490>)
 800bd86:	f003 fef7 	bl	800fb78 <assert_failed>
 800bd8a:	e7cf      	b.n	800bd2c <HAL_RCC_OscConfig+0x3b8>
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800bd8c:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 800bd90:	481c      	ldr	r0, [pc, #112]	; (800be04 <HAL_RCC_OscConfig+0x490>)
 800bd92:	f003 fef1 	bl	800fb78 <assert_failed>
 800bd96:	e7db      	b.n	800bd50 <HAL_RCC_OscConfig+0x3dc>
				WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource | \
 800bd98:	69e3      	ldr	r3, [r4, #28]
 800bd9a:	6a22      	ldr	r2, [r4, #32]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bda0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800bda4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bda6:	0852      	lsrs	r2, r2, #1
 800bda8:	3a01      	subs	r2, #1
 800bdaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bdb0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bdb4:	4a11      	ldr	r2, [pc, #68]	; (800bdfc <HAL_RCC_OscConfig+0x488>)
 800bdb6:	6053      	str	r3, [r2, #4]
				__HAL_RCC_PLL_ENABLE();
 800bdb8:	2201      	movs	r2, #1
 800bdba:	4b11      	ldr	r3, [pc, #68]	; (800be00 <HAL_RCC_OscConfig+0x48c>)
 800bdbc:	601a      	str	r2, [r3, #0]
				tickstart = HAL_GetTick();
 800bdbe:	f7fc fd13 	bl	80087e8 <HAL_GetTick>
 800bdc2:	4604      	mov	r4, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800bdc4:	4b0d      	ldr	r3, [pc, #52]	; (800bdfc <HAL_RCC_OscConfig+0x488>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800bdcc:	d106      	bne.n	800bddc <HAL_RCC_OscConfig+0x468>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800bdce:	f7fc fd0b 	bl	80087e8 <HAL_GetTick>
 800bdd2:	1b00      	subs	r0, r0, r4
 800bdd4:	2802      	cmp	r0, #2
 800bdd6:	d9f5      	bls.n	800bdc4 <HAL_RCC_OscConfig+0x450>
						return HAL_TIMEOUT;
 800bdd8:	2003      	movs	r0, #3
 800bdda:	e008      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
			}
		}else {
			return HAL_ERROR;
		}
	}
	return HAL_OK;
 800bddc:	2000      	movs	r0, #0
 800bdde:	e006      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
 800bde0:	2000      	movs	r0, #0
 800bde2:	e004      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
		return HAL_ERROR;
 800bde4:	2001      	movs	r0, #1
 800bde6:	4770      	bx	lr
				return HAL_ERROR;
 800bde8:	2001      	movs	r0, #1
 800bdea:	e000      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
	return HAL_OK;
 800bdec:	2000      	movs	r0, #0
}
 800bdee:	b002      	add	sp, #8
 800bdf0:	bd70      	pop	{r4, r5, r6, pc}
			return HAL_ERROR;
 800bdf2:	2001      	movs	r0, #1
 800bdf4:	e7fb      	b.n	800bdee <HAL_RCC_OscConfig+0x47a>
 800bdf6:	bf00      	nop
 800bdf8:	40007000 	.word	0x40007000
 800bdfc:	40023800 	.word	0x40023800
 800be00:	42470060 	.word	0x42470060
 800be04:	08021dec 	.word	0x08021dec

0800be08 <HAL_RCC_GetSysClockFreq>:
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
	uint32_t sysclockfreq = 0U;

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 800be0a:	4b31      	ldr	r3, [pc, #196]	; (800bed0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800be0c:	689b      	ldr	r3, [r3, #8]
 800be0e:	f003 030c 	and.w	r3, r3, #12
 800be12:	2b04      	cmp	r3, #4
 800be14:	d059      	beq.n	800beca <HAL_RCC_GetSysClockFreq+0xc2>
 800be16:	2b08      	cmp	r3, #8
 800be18:	d001      	beq.n	800be1e <HAL_RCC_GetSysClockFreq+0x16>
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 800be1a:	482e      	ldr	r0, [pc, #184]	; (800bed4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800be1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		   SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800be1e:	4b2c      	ldr	r3, [pc, #176]	; (800bed0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800be20:	685a      	ldr	r2, [r3, #4]
 800be22:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800be2c:	d02a      	beq.n	800be84 <HAL_RCC_GetSysClockFreq+0x7c>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800be2e:	4b28      	ldr	r3, [pc, #160]	; (800bed0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800be36:	461e      	mov	r6, r3
 800be38:	2700      	movs	r7, #0
 800be3a:	015c      	lsls	r4, r3, #5
 800be3c:	2500      	movs	r5, #0
 800be3e:	1ae4      	subs	r4, r4, r3
 800be40:	eb65 0507 	sbc.w	r5, r5, r7
 800be44:	01a9      	lsls	r1, r5, #6
 800be46:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800be4a:	01a0      	lsls	r0, r4, #6
 800be4c:	1b00      	subs	r0, r0, r4
 800be4e:	eb61 0105 	sbc.w	r1, r1, r5
 800be52:	00cb      	lsls	r3, r1, #3
 800be54:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800be58:	00c4      	lsls	r4, r0, #3
 800be5a:	19a0      	adds	r0, r4, r6
 800be5c:	eb43 0107 	adc.w	r1, r3, r7
 800be60:	024b      	lsls	r3, r1, #9
 800be62:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800be66:	0244      	lsls	r4, r0, #9
 800be68:	4620      	mov	r0, r4
 800be6a:	4619      	mov	r1, r3
 800be6c:	2300      	movs	r3, #0
 800be6e:	f7f4 ff0f 	bl	8000c90 <__aeabi_uldivmod>
		}else {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t)((((uint64_t)HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
		}
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800be72:	4b17      	ldr	r3, [pc, #92]	; (800bed0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800be7a:	3301      	adds	r3, #1
 800be7c:	005b      	lsls	r3, r3, #1

		sysclockfreq = pllvco / pllp;
 800be7e:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
 800be82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pllvco = (uint32_t)((((uint64_t)HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800be84:	4b12      	ldr	r3, [pc, #72]	; (800bed0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800be8c:	461e      	mov	r6, r3
 800be8e:	2700      	movs	r7, #0
 800be90:	015c      	lsls	r4, r3, #5
 800be92:	2500      	movs	r5, #0
 800be94:	1ae4      	subs	r4, r4, r3
 800be96:	eb65 0507 	sbc.w	r5, r5, r7
 800be9a:	01a9      	lsls	r1, r5, #6
 800be9c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800bea0:	01a0      	lsls	r0, r4, #6
 800bea2:	1b00      	subs	r0, r0, r4
 800bea4:	eb61 0105 	sbc.w	r1, r1, r5
 800bea8:	00cb      	lsls	r3, r1, #3
 800beaa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800beae:	00c4      	lsls	r4, r0, #3
 800beb0:	19a0      	adds	r0, r4, r6
 800beb2:	eb43 0107 	adc.w	r1, r3, r7
 800beb6:	028b      	lsls	r3, r1, #10
 800beb8:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800bebc:	0284      	lsls	r4, r0, #10
 800bebe:	4620      	mov	r0, r4
 800bec0:	4619      	mov	r1, r3
 800bec2:	2300      	movs	r3, #0
 800bec4:	f7f4 fee4 	bl	8000c90 <__aeabi_uldivmod>
 800bec8:	e7d3      	b.n	800be72 <HAL_RCC_GetSysClockFreq+0x6a>
		sysclockfreq = HSE_VALUE;
 800beca:	4803      	ldr	r0, [pc, #12]	; (800bed8 <HAL_RCC_GetSysClockFreq+0xd0>)
		sysclockfreq = HSI_VALUE;
		break;
	}
	}
	return sysclockfreq;
}
 800becc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bece:	bf00      	nop
 800bed0:	40023800 	.word	0x40023800
 800bed4:	00f42400 	.word	0x00f42400
 800bed8:	007a1200 	.word	0x007a1200

0800bedc <HAL_RCC_ClockConfig>:
	if (RCC_ClkInitStruct == NULL) {
 800bedc:	2800      	cmp	r0, #0
 800bede:	f000 80f6 	beq.w	800c0ce <HAL_RCC_ClockConfig+0x1f2>
{
 800bee2:	b570      	push	{r4, r5, r6, lr}
 800bee4:	4604      	mov	r4, r0
 800bee6:	460d      	mov	r5, r1
	assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800bee8:	6803      	ldr	r3, [r0, #0]
 800beea:	3b01      	subs	r3, #1
 800beec:	2b0e      	cmp	r3, #14
 800beee:	d811      	bhi.n	800bf14 <HAL_RCC_ClockConfig+0x38>
	assert_param(IS_FLASH_LATENCY(FLatency));
 800bef0:	2d07      	cmp	r5, #7
 800bef2:	d815      	bhi.n	800bf20 <HAL_RCC_ClockConfig+0x44>
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 800bef4:	4b78      	ldr	r3, [pc, #480]	; (800c0d8 <HAL_RCC_ClockConfig+0x1fc>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f003 030f 	and.w	r3, r3, #15
 800befc:	429d      	cmp	r5, r3
 800befe:	d915      	bls.n	800bf2c <HAL_RCC_ClockConfig+0x50>
		__HAL_FLASH_SET_LATENCY(FLatency);
 800bf00:	b2eb      	uxtb	r3, r5
 800bf02:	4a75      	ldr	r2, [pc, #468]	; (800c0d8 <HAL_RCC_ClockConfig+0x1fc>)
 800bf04:	7013      	strb	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800bf06:	6813      	ldr	r3, [r2, #0]
 800bf08:	f003 030f 	and.w	r3, r3, #15
 800bf0c:	429d      	cmp	r5, r3
 800bf0e:	d00d      	beq.n	800bf2c <HAL_RCC_ClockConfig+0x50>
			return HAL_ERROR;
 800bf10:	2001      	movs	r0, #1
 800bf12:	bd70      	pop	{r4, r5, r6, pc}
	assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800bf14:	f240 2113 	movw	r1, #531	; 0x213
 800bf18:	4870      	ldr	r0, [pc, #448]	; (800c0dc <HAL_RCC_ClockConfig+0x200>)
 800bf1a:	f003 fe2d 	bl	800fb78 <assert_failed>
 800bf1e:	e7e7      	b.n	800bef0 <HAL_RCC_ClockConfig+0x14>
	assert_param(IS_FLASH_LATENCY(FLatency));
 800bf20:	f44f 7105 	mov.w	r1, #532	; 0x214
 800bf24:	486d      	ldr	r0, [pc, #436]	; (800c0dc <HAL_RCC_ClockConfig+0x200>)
 800bf26:	f003 fe27 	bl	800fb78 <assert_failed>
 800bf2a:	e7e3      	b.n	800bef4 <HAL_RCC_ClockConfig+0x18>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 800bf2c:	6823      	ldr	r3, [r4, #0]
 800bf2e:	f013 0f02 	tst.w	r3, #2
 800bf32:	d02e      	beq.n	800bf92 <HAL_RCC_ClockConfig+0xb6>
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 800bf34:	f013 0f04 	tst.w	r3, #4
 800bf38:	d004      	beq.n	800bf44 <HAL_RCC_ClockConfig+0x68>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bf3a:	4a69      	ldr	r2, [pc, #420]	; (800c0e0 <HAL_RCC_ClockConfig+0x204>)
 800bf3c:	6893      	ldr	r3, [r2, #8]
 800bf3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bf42:	6093      	str	r3, [r2, #8]
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 800bf44:	6823      	ldr	r3, [r4, #0]
 800bf46:	f013 0f08 	tst.w	r3, #8
 800bf4a:	d004      	beq.n	800bf56 <HAL_RCC_ClockConfig+0x7a>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bf4c:	4a64      	ldr	r2, [pc, #400]	; (800c0e0 <HAL_RCC_ClockConfig+0x204>)
 800bf4e:	6893      	ldr	r3, [r2, #8]
 800bf50:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bf54:	6093      	str	r3, [r2, #8]
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800bf56:	68a3      	ldr	r3, [r4, #8]
 800bf58:	b1a3      	cbz	r3, 800bf84 <HAL_RCC_ClockConfig+0xa8>
 800bf5a:	2b80      	cmp	r3, #128	; 0x80
 800bf5c:	d012      	beq.n	800bf84 <HAL_RCC_ClockConfig+0xa8>
 800bf5e:	2b90      	cmp	r3, #144	; 0x90
 800bf60:	d010      	beq.n	800bf84 <HAL_RCC_ClockConfig+0xa8>
 800bf62:	2ba0      	cmp	r3, #160	; 0xa0
 800bf64:	d00e      	beq.n	800bf84 <HAL_RCC_ClockConfig+0xa8>
 800bf66:	2bb0      	cmp	r3, #176	; 0xb0
 800bf68:	d00c      	beq.n	800bf84 <HAL_RCC_ClockConfig+0xa8>
 800bf6a:	2bc0      	cmp	r3, #192	; 0xc0
 800bf6c:	d00a      	beq.n	800bf84 <HAL_RCC_ClockConfig+0xa8>
 800bf6e:	2bd0      	cmp	r3, #208	; 0xd0
 800bf70:	d008      	beq.n	800bf84 <HAL_RCC_ClockConfig+0xa8>
 800bf72:	2be0      	cmp	r3, #224	; 0xe0
 800bf74:	d006      	beq.n	800bf84 <HAL_RCC_ClockConfig+0xa8>
 800bf76:	2bf0      	cmp	r3, #240	; 0xf0
 800bf78:	d004      	beq.n	800bf84 <HAL_RCC_ClockConfig+0xa8>
 800bf7a:	f240 2132 	movw	r1, #562	; 0x232
 800bf7e:	4857      	ldr	r0, [pc, #348]	; (800c0dc <HAL_RCC_ClockConfig+0x200>)
 800bf80:	f003 fdfa 	bl	800fb78 <assert_failed>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf84:	4a56      	ldr	r2, [pc, #344]	; (800c0e0 <HAL_RCC_ClockConfig+0x204>)
 800bf86:	6893      	ldr	r3, [r2, #8]
 800bf88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf8c:	68a1      	ldr	r1, [r4, #8]
 800bf8e:	430b      	orrs	r3, r1
 800bf90:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 800bf92:	6823      	ldr	r3, [r4, #0]
 800bf94:	f013 0f01 	tst.w	r3, #1
 800bf98:	d03c      	beq.n	800c014 <HAL_RCC_ClockConfig+0x138>
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800bf9a:	6863      	ldr	r3, [r4, #4]
 800bf9c:	2b03      	cmp	r3, #3
 800bf9e:	d825      	bhi.n	800bfec <HAL_RCC_ClockConfig+0x110>
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 800bfa0:	6863      	ldr	r3, [r4, #4]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d028      	beq.n	800bff8 <HAL_RCC_ClockConfig+0x11c>
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) ||
 800bfa6:	1e9a      	subs	r2, r3, #2
 800bfa8:	2a01      	cmp	r2, #1
 800bfaa:	d92c      	bls.n	800c006 <HAL_RCC_ClockConfig+0x12a>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800bfac:	4a4c      	ldr	r2, [pc, #304]	; (800c0e0 <HAL_RCC_ClockConfig+0x204>)
 800bfae:	6812      	ldr	r2, [r2, #0]
 800bfb0:	f012 0f02 	tst.w	r2, #2
 800bfb4:	f000 808d 	beq.w	800c0d2 <HAL_RCC_ClockConfig+0x1f6>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bfb8:	4949      	ldr	r1, [pc, #292]	; (800c0e0 <HAL_RCC_ClockConfig+0x204>)
 800bfba:	688a      	ldr	r2, [r1, #8]
 800bfbc:	f022 0203 	bic.w	r2, r2, #3
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	608b      	str	r3, [r1, #8]
		tickstart = HAL_GetTick();
 800bfc4:	f7fc fc10 	bl	80087e8 <HAL_GetTick>
 800bfc8:	4606      	mov	r6, r0
		while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 800bfca:	4b45      	ldr	r3, [pc, #276]	; (800c0e0 <HAL_RCC_ClockConfig+0x204>)
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	f003 030c 	and.w	r3, r3, #12
 800bfd2:	6862      	ldr	r2, [r4, #4]
 800bfd4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800bfd8:	d01c      	beq.n	800c014 <HAL_RCC_ClockConfig+0x138>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 800bfda:	f7fc fc05 	bl	80087e8 <HAL_GetTick>
 800bfde:	1b80      	subs	r0, r0, r6
 800bfe0:	f241 3388 	movw	r3, #5000	; 0x1388
 800bfe4:	4298      	cmp	r0, r3
 800bfe6:	d9f0      	bls.n	800bfca <HAL_RCC_ClockConfig+0xee>
				return HAL_TIMEOUT;
 800bfe8:	2003      	movs	r0, #3
 800bfea:	bd70      	pop	{r4, r5, r6, pc}
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800bfec:	f44f 710e 	mov.w	r1, #568	; 0x238
 800bff0:	483a      	ldr	r0, [pc, #232]	; (800c0dc <HAL_RCC_ClockConfig+0x200>)
 800bff2:	f003 fdc1 	bl	800fb78 <assert_failed>
 800bff6:	e7d3      	b.n	800bfa0 <HAL_RCC_ClockConfig+0xc4>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800bff8:	4a39      	ldr	r2, [pc, #228]	; (800c0e0 <HAL_RCC_ClockConfig+0x204>)
 800bffa:	6812      	ldr	r2, [r2, #0]
 800bffc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800c000:	d1da      	bne.n	800bfb8 <HAL_RCC_ClockConfig+0xdc>
				return HAL_ERROR;
 800c002:	2001      	movs	r0, #1
 800c004:	bd70      	pop	{r4, r5, r6, pc}
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800c006:	4a36      	ldr	r2, [pc, #216]	; (800c0e0 <HAL_RCC_ClockConfig+0x204>)
 800c008:	6812      	ldr	r2, [r2, #0]
 800c00a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800c00e:	d1d3      	bne.n	800bfb8 <HAL_RCC_ClockConfig+0xdc>
				return HAL_ERROR;
 800c010:	2001      	movs	r0, #1
 800c012:	bd70      	pop	{r4, r5, r6, pc}
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 800c014:	4b30      	ldr	r3, [pc, #192]	; (800c0d8 <HAL_RCC_ClockConfig+0x1fc>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f003 030f 	and.w	r3, r3, #15
 800c01c:	429d      	cmp	r5, r3
 800c01e:	d209      	bcs.n	800c034 <HAL_RCC_ClockConfig+0x158>
		__HAL_FLASH_SET_LATENCY(FLatency);
 800c020:	b2ea      	uxtb	r2, r5
 800c022:	4b2d      	ldr	r3, [pc, #180]	; (800c0d8 <HAL_RCC_ClockConfig+0x1fc>)
 800c024:	701a      	strb	r2, [r3, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f003 030f 	and.w	r3, r3, #15
 800c02c:	429d      	cmp	r5, r3
 800c02e:	d001      	beq.n	800c034 <HAL_RCC_ClockConfig+0x158>
			return HAL_ERROR;
 800c030:	2001      	movs	r0, #1
}
 800c032:	bd70      	pop	{r4, r5, r6, pc}
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 800c034:	6823      	ldr	r3, [r4, #0]
 800c036:	f013 0f04 	tst.w	r3, #4
 800c03a:	d019      	beq.n	800c070 <HAL_RCC_ClockConfig+0x194>
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800c03c:	68e3      	ldr	r3, [r4, #12]
 800c03e:	b183      	cbz	r3, 800c062 <HAL_RCC_ClockConfig+0x186>
 800c040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c044:	d00d      	beq.n	800c062 <HAL_RCC_ClockConfig+0x186>
 800c046:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c04a:	d00a      	beq.n	800c062 <HAL_RCC_ClockConfig+0x186>
 800c04c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800c050:	d007      	beq.n	800c062 <HAL_RCC_ClockConfig+0x186>
 800c052:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800c056:	d004      	beq.n	800c062 <HAL_RCC_ClockConfig+0x186>
 800c058:	f240 216b 	movw	r1, #619	; 0x26b
 800c05c:	481f      	ldr	r0, [pc, #124]	; (800c0dc <HAL_RCC_ClockConfig+0x200>)
 800c05e:	f003 fd8b 	bl	800fb78 <assert_failed>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c062:	4a1f      	ldr	r2, [pc, #124]	; (800c0e0 <HAL_RCC_ClockConfig+0x204>)
 800c064:	6893      	ldr	r3, [r2, #8]
 800c066:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800c06a:	68e1      	ldr	r1, [r4, #12]
 800c06c:	430b      	orrs	r3, r1
 800c06e:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 800c070:	6823      	ldr	r3, [r4, #0]
 800c072:	f013 0f08 	tst.w	r3, #8
 800c076:	d01a      	beq.n	800c0ae <HAL_RCC_ClockConfig+0x1d2>
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800c078:	6923      	ldr	r3, [r4, #16]
 800c07a:	b183      	cbz	r3, 800c09e <HAL_RCC_ClockConfig+0x1c2>
 800c07c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c080:	d00d      	beq.n	800c09e <HAL_RCC_ClockConfig+0x1c2>
 800c082:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c086:	d00a      	beq.n	800c09e <HAL_RCC_ClockConfig+0x1c2>
 800c088:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800c08c:	d007      	beq.n	800c09e <HAL_RCC_ClockConfig+0x1c2>
 800c08e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800c092:	d004      	beq.n	800c09e <HAL_RCC_ClockConfig+0x1c2>
 800c094:	f240 2171 	movw	r1, #625	; 0x271
 800c098:	4810      	ldr	r0, [pc, #64]	; (800c0dc <HAL_RCC_ClockConfig+0x200>)
 800c09a:	f003 fd6d 	bl	800fb78 <assert_failed>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c09e:	4a10      	ldr	r2, [pc, #64]	; (800c0e0 <HAL_RCC_ClockConfig+0x204>)
 800c0a0:	6893      	ldr	r3, [r2, #8]
 800c0a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800c0a6:	6921      	ldr	r1, [r4, #16]
 800c0a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800c0ac:	6093      	str	r3, [r2, #8]
	SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c0ae:	f7ff feab 	bl	800be08 <HAL_RCC_GetSysClockFreq>
 800c0b2:	4b0b      	ldr	r3, [pc, #44]	; (800c0e0 <HAL_RCC_ClockConfig+0x204>)
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c0ba:	4a0a      	ldr	r2, [pc, #40]	; (800c0e4 <HAL_RCC_ClockConfig+0x208>)
 800c0bc:	5cd3      	ldrb	r3, [r2, r3]
 800c0be:	40d8      	lsrs	r0, r3
 800c0c0:	4b09      	ldr	r3, [pc, #36]	; (800c0e8 <HAL_RCC_ClockConfig+0x20c>)
 800c0c2:	6018      	str	r0, [r3, #0]
	HAL_InitTick(TICK_INT_PRIORITY);
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	f7fc fb43 	bl	8008750 <HAL_InitTick>
	return HAL_OK;
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_ERROR;
 800c0ce:	2001      	movs	r0, #1
 800c0d0:	4770      	bx	lr
				return HAL_ERROR;
 800c0d2:	2001      	movs	r0, #1
 800c0d4:	bd70      	pop	{r4, r5, r6, pc}
 800c0d6:	bf00      	nop
 800c0d8:	40023c00 	.word	0x40023c00
 800c0dc:	08021dec 	.word	0x08021dec
 800c0e0:	40023800 	.word	0x40023800
 800c0e4:	080222d0 	.word	0x080222d0
 800c0e8:	200014a0 	.word	0x200014a0

0800c0ec <HAL_RCC_GetHCLKFreq>:
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
	return SystemCoreClock;
}
 800c0ec:	4b01      	ldr	r3, [pc, #4]	; (800c0f4 <HAL_RCC_GetHCLKFreq+0x8>)
 800c0ee:	6818      	ldr	r0, [r3, #0]
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop
 800c0f4:	200014a0 	.word	0x200014a0

0800c0f8 <HAL_RCC_GetPCLK1Freq>:
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c0f8:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c0fa:	f7ff fff7 	bl	800c0ec <HAL_RCC_GetHCLKFreq>
 800c0fe:	4b04      	ldr	r3, [pc, #16]	; (800c110 <HAL_RCC_GetPCLK1Freq+0x18>)
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800c106:	4a03      	ldr	r2, [pc, #12]	; (800c114 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800c108:	5cd3      	ldrb	r3, [r2, r3]
}
 800c10a:	40d8      	lsrs	r0, r3
 800c10c:	bd08      	pop	{r3, pc}
 800c10e:	bf00      	nop
 800c110:	40023800 	.word	0x40023800
 800c114:	080222e0 	.word	0x080222e0

0800c118 <HAL_RCC_GetPCLK2Freq>:
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c118:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c11a:	f7ff ffe7 	bl	800c0ec <HAL_RCC_GetHCLKFreq>
 800c11e:	4b04      	ldr	r3, [pc, #16]	; (800c130 <HAL_RCC_GetPCLK2Freq+0x18>)
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800c126:	4a03      	ldr	r2, [pc, #12]	; (800c134 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800c128:	5cd3      	ldrb	r3, [r2, r3]
}
 800c12a:	40d8      	lsrs	r0, r3
 800c12c:	bd08      	pop	{r3, pc}
 800c12e:	bf00      	nop
 800c130:	40023800 	.word	0x40023800
 800c134:	080222e0 	.word	0x080222e0

0800c138 <HAL_RCCEx_PeriphCLKConfig>:
 *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c138:	b530      	push	{r4, r5, lr}
 800c13a:	b083      	sub	sp, #12
 800c13c:	4604      	mov	r4, r0
	uint32_t tickstart = 0U;
	uint32_t tmpreg1 = 0U;

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800c13e:	6803      	ldr	r3, [r0, #0]
 800c140:	3b01      	subs	r3, #1
 800c142:	2b0e      	cmp	r3, #14
 800c144:	d81e      	bhi.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0x4c>

	/*---------------------------- I2S configuration ---------------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c146:	6823      	ldr	r3, [r4, #0]
 800c148:	f013 0f05 	tst.w	r3, #5
 800c14c:	d046      	beq.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
	    (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)) {
		/* check for Parameters */
		assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800c14e:	68a3      	ldr	r3, [r4, #8]
 800c150:	3b02      	subs	r3, #2
 800c152:	2b05      	cmp	r3, #5
 800c154:	d81c      	bhi.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x58>
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800c156:	6863      	ldr	r3, [r4, #4]
 800c158:	3b32      	subs	r3, #50	; 0x32
 800c15a:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800c15e:	d81d      	bhi.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x64>
#if defined(STM32F411xE)
		assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
		/* Disable the PLLI2S */
		__HAL_RCC_PLLI2S_DISABLE();
 800c160:	2200      	movs	r2, #0
 800c162:	4b9b      	ldr	r3, [pc, #620]	; (800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800c164:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 800c166:	f7fc fb3f 	bl	80087e8 <HAL_GetTick>
 800c16a:	4605      	mov	r5, r0
		/* Wait till PLLI2S is disabled */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 800c16c:	4b99      	ldr	r3, [pc, #612]	; (800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800c174:	d018      	beq.n	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0x70>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 800c176:	f7fc fb37 	bl	80087e8 <HAL_GetTick>
 800c17a:	1b40      	subs	r0, r0, r5
 800c17c:	2802      	cmp	r0, #2
 800c17e:	d9f5      	bls.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x34>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 800c180:	2003      	movs	r0, #3
 800c182:	e105      	b.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x258>
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800c184:	f640 01f6 	movw	r1, #2294	; 0x8f6
 800c188:	4893      	ldr	r0, [pc, #588]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800c18a:	f003 fcf5 	bl	800fb78 <assert_failed>
 800c18e:	e7da      	b.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0xe>
		assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800c190:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800c194:	4890      	ldr	r0, [pc, #576]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800c196:	f003 fcef 	bl	800fb78 <assert_failed>
 800c19a:	e7dc      	b.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x1e>
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800c19c:	f640 01fd 	movw	r1, #2301	; 0x8fd
 800c1a0:	488d      	ldr	r0, [pc, #564]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800c1a2:	f003 fce9 	bl	800fb78 <assert_failed>
 800c1a6:	e7db      	b.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0x28>
		__HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
		/* Configure the PLLI2S division factors */
		/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
		/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
		__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800c1a8:	6862      	ldr	r2, [r4, #4]
 800c1aa:	68a3      	ldr	r3, [r4, #8]
 800c1ac:	071b      	lsls	r3, r3, #28
 800c1ae:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800c1b2:	4a88      	ldr	r2, [pc, #544]	; (800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800c1b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* STM32F411xE */

		/* Enable the PLLI2S */
		__HAL_RCC_PLLI2S_ENABLE();
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	4b85      	ldr	r3, [pc, #532]	; (800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800c1bc:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 800c1be:	f7fc fb13 	bl	80087e8 <HAL_GetTick>
 800c1c2:	4605      	mov	r5, r0
		/* Wait till PLLI2S is ready */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 800c1c4:	4b83      	ldr	r3, [pc, #524]	; (800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800c1cc:	d106      	bne.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 800c1ce:	f7fc fb0b 	bl	80087e8 <HAL_GetTick>
 800c1d2:	1b40      	subs	r0, r0, r5
 800c1d4:	2802      	cmp	r0, #2
 800c1d6:	d9f5      	bls.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 800c1d8:	2003      	movs	r0, #3
 800c1da:	e0d9      	b.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x258>
			}
		}
	}

	/*---------------------------- RTC configuration ---------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC)) {
 800c1dc:	6823      	ldr	r3, [r4, #0]
 800c1de:	f013 0f02 	tst.w	r3, #2
 800c1e2:	f000 80cd 	beq.w	800c380 <HAL_RCCEx_PeriphCLKConfig+0x248>
		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800c1e6:	68e3      	ldr	r3, [r4, #12]
 800c1e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ec:	d07e      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c1ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1f2:	d07b      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c1f4:	4a79      	ldr	r2, [pc, #484]	; (800c3dc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d078      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c1fa:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d074      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c202:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c206:	4293      	cmp	r3, r2
 800c208:	d070      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c20a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c20e:	4293      	cmp	r3, r2
 800c210:	d06c      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c212:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c216:	4293      	cmp	r3, r2
 800c218:	d068      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c21a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c21e:	4293      	cmp	r3, r2
 800c220:	d064      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c222:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c226:	4293      	cmp	r3, r2
 800c228:	d060      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c22a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c22e:	4293      	cmp	r3, r2
 800c230:	d05c      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c232:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c236:	4293      	cmp	r3, r2
 800c238:	d058      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c23a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c23e:	4293      	cmp	r3, r2
 800c240:	d054      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c242:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c246:	4293      	cmp	r3, r2
 800c248:	d050      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c24a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c24e:	4293      	cmp	r3, r2
 800c250:	d04c      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c252:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c256:	4293      	cmp	r3, r2
 800c258:	d048      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c25a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c25e:	4293      	cmp	r3, r2
 800c260:	d044      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c262:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c266:	4293      	cmp	r3, r2
 800c268:	d040      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c26a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c26e:	4293      	cmp	r3, r2
 800c270:	d03c      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c272:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c276:	4293      	cmp	r3, r2
 800c278:	d038      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c27a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c27e:	4293      	cmp	r3, r2
 800c280:	d034      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c282:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c286:	4293      	cmp	r3, r2
 800c288:	d030      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c28a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c28e:	4293      	cmp	r3, r2
 800c290:	d02c      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c292:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c296:	4293      	cmp	r3, r2
 800c298:	d028      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c29a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d024      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c2a2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d020      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c2aa:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d01c      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c2b2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d018      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c2ba:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d014      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c2c2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d010      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c2ca:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d00c      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c2d2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d008      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c2da:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d004      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c2e2:	f640 1129 	movw	r1, #2345	; 0x929
 800c2e6:	483c      	ldr	r0, [pc, #240]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800c2e8:	f003 fc46 	bl	800fb78 <assert_failed>

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	9301      	str	r3, [sp, #4]
 800c2f0:	4b38      	ldr	r3, [pc, #224]	; (800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800c2f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c2f8:	641a      	str	r2, [r3, #64]	; 0x40
 800c2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c300:	9301      	str	r3, [sp, #4]
 800c302:	9b01      	ldr	r3, [sp, #4]

		/* Enable write access to Backup domain */
		PWR->CR |= PWR_CR_DBP;
 800c304:	4a36      	ldr	r2, [pc, #216]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800c306:	6813      	ldr	r3, [r2, #0]
 800c308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c30c:	6013      	str	r3, [r2, #0]

		/* Get tick */
		tickstart = HAL_GetTick();
 800c30e:	f7fc fa6b 	bl	80087e8 <HAL_GetTick>
 800c312:	4605      	mov	r5, r0

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 800c314:	4b32      	ldr	r3, [pc, #200]	; (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f413 7f80 	tst.w	r3, #256	; 0x100
 800c31c:	d106      	bne.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800c31e:	f7fc fa63 	bl	80087e8 <HAL_GetTick>
 800c322:	1b40      	subs	r0, r0, r5
 800c324:	2802      	cmp	r0, #2
 800c326:	d9f5      	bls.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
				return HAL_TIMEOUT;
 800c328:	2003      	movs	r0, #3
 800c32a:	e031      	b.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x258>
			}
		}
		/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
		tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c32c:	4b29      	ldr	r3, [pc, #164]	; (800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800c32e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
		if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 800c330:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800c334:	d012      	beq.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x224>
 800c336:	68e2      	ldr	r2, [r4, #12]
 800c338:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d00d      	beq.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x224>
			/* Store the content of BDCR register before the reset of Backup Domain */
			tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c340:	4b24      	ldr	r3, [pc, #144]	; (800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800c342:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c344:	f422 7240 	bic.w	r2, r2, #768	; 0x300
			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 800c348:	4926      	ldr	r1, [pc, #152]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800c34a:	2001      	movs	r0, #1
 800c34c:	6008      	str	r0, [r1, #0]
			__HAL_RCC_BACKUPRESET_RELEASE();
 800c34e:	2000      	movs	r0, #0
 800c350:	6008      	str	r0, [r1, #0]
			/* Restore the Content of BDCR register */
			RCC->BDCR = tmpreg1;
 800c352:	671a      	str	r2, [r3, #112]	; 0x70

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON)) {
 800c354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c356:	f013 0f01 	tst.w	r3, #1
 800c35a:	d11b      	bne.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x25c>
						return HAL_TIMEOUT;
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c35c:	68e3      	ldr	r3, [r4, #12]
 800c35e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800c362:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800c366:	d026      	beq.n	800c3b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800c368:	4a1a      	ldr	r2, [pc, #104]	; (800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800c36a:	6893      	ldr	r3, [r2, #8]
 800c36c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c370:	6093      	str	r3, [r2, #8]
 800c372:	4918      	ldr	r1, [pc, #96]	; (800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800c374:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800c376:	68e2      	ldr	r2, [r4, #12]
 800c378:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800c37c:	4313      	orrs	r3, r2
 800c37e:	670b      	str	r3, [r1, #112]	; 0x70
	}
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
	/*---------------------------- TIM configuration ---------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM)) {
 800c380:	6823      	ldr	r3, [r4, #0]
 800c382:	f013 0f08 	tst.w	r3, #8
 800c386:	d021      	beq.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0x294>
		__HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c388:	7c22      	ldrb	r2, [r4, #16]
 800c38a:	4b17      	ldr	r3, [pc, #92]	; (800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800c38c:	601a      	str	r2, [r3, #0]
	}
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
	return HAL_OK;
 800c38e:	2000      	movs	r0, #0
}
 800c390:	b003      	add	sp, #12
 800c392:	bd30      	pop	{r4, r5, pc}
				tickstart = HAL_GetTick();
 800c394:	f7fc fa28 	bl	80087e8 <HAL_GetTick>
 800c398:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800c39a:	4b0e      	ldr	r3, [pc, #56]	; (800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800c39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c39e:	f013 0f02 	tst.w	r3, #2
 800c3a2:	d1db      	bne.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x224>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800c3a4:	f7fc fa20 	bl	80087e8 <HAL_GetTick>
 800c3a8:	1b40      	subs	r0, r0, r5
 800c3aa:	f241 3388 	movw	r3, #5000	; 0x1388
 800c3ae:	4298      	cmp	r0, r3
 800c3b0:	d9f3      	bls.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x262>
						return HAL_TIMEOUT;
 800c3b2:	2003      	movs	r0, #3
 800c3b4:	e7ec      	b.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x258>
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c3b6:	4907      	ldr	r1, [pc, #28]	; (800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800c3b8:	688a      	ldr	r2, [r1, #8]
 800c3ba:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800c3be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c3c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	608b      	str	r3, [r1, #8]
 800c3ca:	e7d2      	b.n	800c372 <HAL_RCCEx_PeriphCLKConfig+0x23a>
	return HAL_OK;
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	e7df      	b.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800c3d0:	42470068 	.word	0x42470068
 800c3d4:	40023800 	.word	0x40023800
 800c3d8:	08021e24 	.word	0x08021e24
 800c3dc:	00020300 	.word	0x00020300
 800c3e0:	40007000 	.word	0x40007000
 800c3e4:	42470e40 	.word	0x42470e40
 800c3e8:	424711e0 	.word	0x424711e0

0800c3ec <HAL_RTC_WaitForSynchro>:
 * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 *                the configuration information for RTC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c3ec:	b538      	push	{r3, r4, r5, lr}
 800c3ee:	4604      	mov	r4, r0
	uint32_t tickstart = 0U;

	/* Clear RSF flag */
	hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c3f0:	6802      	ldr	r2, [r0, #0]
 800c3f2:	68d3      	ldr	r3, [r2, #12]
 800c3f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c3f8:	60d3      	str	r3, [r2, #12]

	/* Get tick */
	tickstart = HAL_GetTick();
 800c3fa:	f7fc f9f5 	bl	80087e8 <HAL_GetTick>
 800c3fe:	4605      	mov	r5, r0

	/* Wait the registers to be synchronised */
	while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET) {
 800c400:	6823      	ldr	r3, [r4, #0]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	f013 0f20 	tst.w	r3, #32
 800c408:	d107      	bne.n	800c41a <HAL_RTC_WaitForSynchro+0x2e>
		if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE) {
 800c40a:	f7fc f9ed 	bl	80087e8 <HAL_GetTick>
 800c40e:	1b40      	subs	r0, r0, r5
 800c410:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c414:	d9f4      	bls.n	800c400 <HAL_RTC_WaitForSynchro+0x14>
			return HAL_TIMEOUT;
 800c416:	2003      	movs	r0, #3
		}
	}

	return HAL_OK;
}
 800c418:	bd38      	pop	{r3, r4, r5, pc}
	return HAL_OK;
 800c41a:	2000      	movs	r0, #0
 800c41c:	bd38      	pop	{r3, r4, r5, pc}

0800c41e <RTC_EnterInitMode>:
 * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 *                the configuration information for RTC.
 * @retval HAL status
 */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c41e:	b538      	push	{r3, r4, r5, lr}
	uint32_t tickstart = 0U;

	/* Check if the Initialization mode is set */
	if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET) {
 800c420:	6803      	ldr	r3, [r0, #0]
 800c422:	68da      	ldr	r2, [r3, #12]
 800c424:	f012 0f40 	tst.w	r2, #64	; 0x40
 800c428:	d001      	beq.n	800c42e <RTC_EnterInitMode+0x10>
				return HAL_TIMEOUT;
			}
		}
	}

	return HAL_OK;
 800c42a:	2000      	movs	r0, #0
 800c42c:	bd38      	pop	{r3, r4, r5, pc}
 800c42e:	4604      	mov	r4, r0
		hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c430:	f04f 32ff 	mov.w	r2, #4294967295
 800c434:	60da      	str	r2, [r3, #12]
		tickstart = HAL_GetTick();
 800c436:	f7fc f9d7 	bl	80087e8 <HAL_GetTick>
 800c43a:	4605      	mov	r5, r0
		while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET) {
 800c43c:	6823      	ldr	r3, [r4, #0]
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c444:	d107      	bne.n	800c456 <RTC_EnterInitMode+0x38>
			if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE) {
 800c446:	f7fc f9cf 	bl	80087e8 <HAL_GetTick>
 800c44a:	1b40      	subs	r0, r0, r5
 800c44c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c450:	d9f4      	bls.n	800c43c <RTC_EnterInitMode+0x1e>
				return HAL_TIMEOUT;
 800c452:	2003      	movs	r0, #3
}
 800c454:	bd38      	pop	{r3, r4, r5, pc}
	return HAL_OK;
 800c456:	2000      	movs	r0, #0
 800c458:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c45c <HAL_RTC_Init>:
{
 800c45c:	b538      	push	{r3, r4, r5, lr}
	if (hrtc == NULL) {
 800c45e:	2800      	cmp	r0, #0
 800c460:	f000 809a 	beq.w	800c598 <HAL_RTC_Init+0x13c>
 800c464:	4604      	mov	r4, r0
	assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800c466:	6843      	ldr	r3, [r0, #4]
 800c468:	2b40      	cmp	r3, #64	; 0x40
 800c46a:	d001      	beq.n	800c470 <HAL_RTC_Init+0x14>
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d16c      	bne.n	800c54a <HAL_RTC_Init+0xee>
	assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800c470:	68a3      	ldr	r3, [r4, #8]
 800c472:	2b7f      	cmp	r3, #127	; 0x7f
 800c474:	d86e      	bhi.n	800c554 <HAL_RTC_Init+0xf8>
	assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 800c476:	68e3      	ldr	r3, [r4, #12]
 800c478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c47c:	d26f      	bcs.n	800c55e <HAL_RTC_Init+0x102>
	assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800c47e:	6923      	ldr	r3, [r4, #16]
 800c480:	b163      	cbz	r3, 800c49c <HAL_RTC_Init+0x40>
 800c482:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c486:	d009      	beq.n	800c49c <HAL_RTC_Init+0x40>
 800c488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c48c:	d006      	beq.n	800c49c <HAL_RTC_Init+0x40>
 800c48e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c492:	d003      	beq.n	800c49c <HAL_RTC_Init+0x40>
 800c494:	21d4      	movs	r1, #212	; 0xd4
 800c496:	4841      	ldr	r0, [pc, #260]	; (800c59c <HAL_RTC_Init+0x140>)
 800c498:	f003 fb6e 	bl	800fb78 <assert_failed>
	assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800c49c:	6963      	ldr	r3, [r4, #20]
 800c49e:	b133      	cbz	r3, 800c4ae <HAL_RTC_Init+0x52>
 800c4a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4a4:	d003      	beq.n	800c4ae <HAL_RTC_Init+0x52>
 800c4a6:	21d5      	movs	r1, #213	; 0xd5
 800c4a8:	483c      	ldr	r0, [pc, #240]	; (800c59c <HAL_RTC_Init+0x140>)
 800c4aa:	f003 fb65 	bl	800fb78 <assert_failed>
	assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 800c4ae:	69a3      	ldr	r3, [r4, #24]
 800c4b0:	b133      	cbz	r3, 800c4c0 <HAL_RTC_Init+0x64>
 800c4b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c4b6:	d003      	beq.n	800c4c0 <HAL_RTC_Init+0x64>
 800c4b8:	21d6      	movs	r1, #214	; 0xd6
 800c4ba:	4838      	ldr	r0, [pc, #224]	; (800c59c <HAL_RTC_Init+0x140>)
 800c4bc:	f003 fb5c 	bl	800fb78 <assert_failed>
	if (hrtc->State == HAL_RTC_STATE_RESET) {
 800c4c0:	7f63      	ldrb	r3, [r4, #29]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d050      	beq.n	800c568 <HAL_RTC_Init+0x10c>
	hrtc->State = HAL_RTC_STATE_BUSY;
 800c4c6:	2302      	movs	r3, #2
 800c4c8:	7763      	strb	r3, [r4, #29]
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4ca:	6823      	ldr	r3, [r4, #0]
 800c4cc:	22ca      	movs	r2, #202	; 0xca
 800c4ce:	625a      	str	r2, [r3, #36]	; 0x24
 800c4d0:	6823      	ldr	r3, [r4, #0]
 800c4d2:	2253      	movs	r2, #83	; 0x53
 800c4d4:	625a      	str	r2, [r3, #36]	; 0x24
	if (RTC_EnterInitMode(hrtc) != HAL_OK) {
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	f7ff ffa1 	bl	800c41e <RTC_EnterInitMode>
 800c4dc:	4605      	mov	r5, r0
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d147      	bne.n	800c572 <HAL_RTC_Init+0x116>
		hrtc->Instance->CR &= ((uint32_t) ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c4e2:	6822      	ldr	r2, [r4, #0]
 800c4e4:	6893      	ldr	r3, [r2, #8]
 800c4e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c4ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4ee:	6093      	str	r3, [r2, #8]
		hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c4f0:	6821      	ldr	r1, [r4, #0]
 800c4f2:	688a      	ldr	r2, [r1, #8]
 800c4f4:	6863      	ldr	r3, [r4, #4]
 800c4f6:	6920      	ldr	r0, [r4, #16]
 800c4f8:	4303      	orrs	r3, r0
 800c4fa:	6960      	ldr	r0, [r4, #20]
 800c4fc:	4303      	orrs	r3, r0
 800c4fe:	4313      	orrs	r3, r2
 800c500:	608b      	str	r3, [r1, #8]
		hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	68e2      	ldr	r2, [r4, #12]
 800c506:	611a      	str	r2, [r3, #16]
		hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c508:	6822      	ldr	r2, [r4, #0]
 800c50a:	6913      	ldr	r3, [r2, #16]
 800c50c:	68a1      	ldr	r1, [r4, #8]
 800c50e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c512:	6113      	str	r3, [r2, #16]
		hrtc->Instance->ISR &= (uint32_t) ~RTC_ISR_INIT;
 800c514:	6822      	ldr	r2, [r4, #0]
 800c516:	68d3      	ldr	r3, [r2, #12]
 800c518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c51c:	60d3      	str	r3, [r2, #12]
		if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET) {
 800c51e:	6823      	ldr	r3, [r4, #0]
 800c520:	689b      	ldr	r3, [r3, #8]
 800c522:	f013 0f20 	tst.w	r3, #32
 800c526:	d02b      	beq.n	800c580 <HAL_RTC_Init+0x124>
		hrtc->Instance->TAFCR &= (uint32_t) ~RTC_TAFCR_ALARMOUTTYPE;
 800c528:	6822      	ldr	r2, [r4, #0]
 800c52a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c52c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c530:	6413      	str	r3, [r2, #64]	; 0x40
		hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c532:	6822      	ldr	r2, [r4, #0]
 800c534:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c536:	69a1      	ldr	r1, [r4, #24]
 800c538:	430b      	orrs	r3, r1
 800c53a:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c53c:	6823      	ldr	r3, [r4, #0]
 800c53e:	22ff      	movs	r2, #255	; 0xff
 800c540:	625a      	str	r2, [r3, #36]	; 0x24
		hrtc->State = HAL_RTC_STATE_READY;
 800c542:	2301      	movs	r3, #1
 800c544:	7763      	strb	r3, [r4, #29]
}
 800c546:	4628      	mov	r0, r5
 800c548:	bd38      	pop	{r3, r4, r5, pc}
	assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800c54a:	21d1      	movs	r1, #209	; 0xd1
 800c54c:	4813      	ldr	r0, [pc, #76]	; (800c59c <HAL_RTC_Init+0x140>)
 800c54e:	f003 fb13 	bl	800fb78 <assert_failed>
 800c552:	e78d      	b.n	800c470 <HAL_RTC_Init+0x14>
	assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800c554:	21d2      	movs	r1, #210	; 0xd2
 800c556:	4811      	ldr	r0, [pc, #68]	; (800c59c <HAL_RTC_Init+0x140>)
 800c558:	f003 fb0e 	bl	800fb78 <assert_failed>
 800c55c:	e78b      	b.n	800c476 <HAL_RTC_Init+0x1a>
	assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 800c55e:	21d3      	movs	r1, #211	; 0xd3
 800c560:	480e      	ldr	r0, [pc, #56]	; (800c59c <HAL_RTC_Init+0x140>)
 800c562:	f003 fb09 	bl	800fb78 <assert_failed>
 800c566:	e78a      	b.n	800c47e <HAL_RTC_Init+0x22>
		hrtc->Lock = HAL_UNLOCKED;
 800c568:	7723      	strb	r3, [r4, #28]
		HAL_RTC_MspInit(hrtc);
 800c56a:	4620      	mov	r0, r4
 800c56c:	f003 fc0c 	bl	800fd88 <HAL_RTC_MspInit>
 800c570:	e7a9      	b.n	800c4c6 <HAL_RTC_Init+0x6a>
		__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c572:	6823      	ldr	r3, [r4, #0]
 800c574:	22ff      	movs	r2, #255	; 0xff
 800c576:	625a      	str	r2, [r3, #36]	; 0x24
		hrtc->State = HAL_RTC_STATE_ERROR;
 800c578:	2304      	movs	r3, #4
 800c57a:	7763      	strb	r3, [r4, #29]
		return HAL_ERROR;
 800c57c:	2501      	movs	r5, #1
 800c57e:	e7e2      	b.n	800c546 <HAL_RTC_Init+0xea>
			if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK) {
 800c580:	4620      	mov	r0, r4
 800c582:	f7ff ff33 	bl	800c3ec <HAL_RTC_WaitForSynchro>
 800c586:	2800      	cmp	r0, #0
 800c588:	d0ce      	beq.n	800c528 <HAL_RTC_Init+0xcc>
				__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c58a:	6823      	ldr	r3, [r4, #0]
 800c58c:	22ff      	movs	r2, #255	; 0xff
 800c58e:	625a      	str	r2, [r3, #36]	; 0x24
				hrtc->State = HAL_RTC_STATE_ERROR;
 800c590:	2304      	movs	r3, #4
 800c592:	7763      	strb	r3, [r4, #29]
				return HAL_ERROR;
 800c594:	2501      	movs	r5, #1
 800c596:	e7d6      	b.n	800c546 <HAL_RTC_Init+0xea>
		return HAL_ERROR;
 800c598:	2501      	movs	r5, #1
 800c59a:	e7d4      	b.n	800c546 <HAL_RTC_Init+0xea>
 800c59c:	08021e60 	.word	0x08021e60

0800c5a0 <RTC_ByteToBcd2>:
 * @param  Value Byte to be converted
 * @retval Converted byte
 */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
	uint32_t bcdhigh = 0U;
 800c5a0:	2300      	movs	r3, #0

	while (Value >= 10U) {
 800c5a2:	e002      	b.n	800c5aa <RTC_ByteToBcd2+0xa>
		bcdhigh++;
 800c5a4:	3301      	adds	r3, #1
		Value -= 10U;
 800c5a6:	380a      	subs	r0, #10
 800c5a8:	b2c0      	uxtb	r0, r0
	while (Value >= 10U) {
 800c5aa:	2809      	cmp	r0, #9
 800c5ac:	d8fa      	bhi.n	800c5a4 <RTC_ByteToBcd2+0x4>
	}

	return((uint8_t)(bcdhigh << 4U) | Value);
 800c5ae:	011b      	lsls	r3, r3, #4
 800c5b0:	b2db      	uxtb	r3, r3
}
 800c5b2:	4318      	orrs	r0, r3
 800c5b4:	4770      	bx	lr

0800c5b6 <RTC_Bcd2ToByte>:
 * @retval Converted word
 */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
	uint32_t tmp = 0U;
	tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c5b6:	0903      	lsrs	r3, r0, #4
 800c5b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c5bc:	005a      	lsls	r2, r3, #1
	return(tmp + (Value & (uint8_t)0x0F));
 800c5be:	f000 000f 	and.w	r0, r0, #15
 800c5c2:	4410      	add	r0, r2
}
 800c5c4:	b2c0      	uxtb	r0, r0
 800c5c6:	4770      	bx	lr

0800c5c8 <HAL_RTC_SetTime>:
{
 800c5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	460d      	mov	r5, r1
 800c5ce:	4616      	mov	r6, r2
	assert_param(IS_RTC_FORMAT(Format));
 800c5d0:	2a01      	cmp	r2, #1
 800c5d2:	d904      	bls.n	800c5de <HAL_RTC_SetTime+0x16>
 800c5d4:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 800c5d8:	487f      	ldr	r0, [pc, #508]	; (800c7d8 <HAL_RTC_SetTime+0x210>)
 800c5da:	f003 facd 	bl	800fb78 <assert_failed>
	assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800c5de:	68eb      	ldr	r3, [r5, #12]
 800c5e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5e4:	d003      	beq.n	800c5ee <HAL_RTC_SetTime+0x26>
 800c5e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5ea:	d000      	beq.n	800c5ee <HAL_RTC_SetTime+0x26>
 800c5ec:	bb3b      	cbnz	r3, 800c63e <HAL_RTC_SetTime+0x76>
	assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 800c5ee:	692b      	ldr	r3, [r5, #16]
 800c5f0:	b13b      	cbz	r3, 800c602 <HAL_RTC_SetTime+0x3a>
 800c5f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c5f6:	d004      	beq.n	800c602 <HAL_RTC_SetTime+0x3a>
 800c5f8:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800c5fc:	4876      	ldr	r0, [pc, #472]	; (800c7d8 <HAL_RTC_SetTime+0x210>)
 800c5fe:	f003 fabb 	bl	800fb78 <assert_failed>
	__HAL_LOCK(hrtc);
 800c602:	7f23      	ldrb	r3, [r4, #28]
 800c604:	2b01      	cmp	r3, #1
 800c606:	f000 80e3 	beq.w	800c7d0 <HAL_RTC_SetTime+0x208>
 800c60a:	2301      	movs	r3, #1
 800c60c:	7723      	strb	r3, [r4, #28]
	hrtc->State = HAL_RTC_STATE_BUSY;
 800c60e:	2302      	movs	r3, #2
 800c610:	7763      	strb	r3, [r4, #29]
	if (Format == RTC_FORMAT_BIN) {
 800c612:	2e00      	cmp	r6, #0
 800c614:	d17c      	bne.n	800c710 <HAL_RTC_SetTime+0x148>
		if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET) {
 800c616:	6823      	ldr	r3, [r4, #0]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c61e:	d01a      	beq.n	800c656 <HAL_RTC_SetTime+0x8e>
			assert_param(IS_RTC_HOUR12(sTime->Hours));
 800c620:	782b      	ldrb	r3, [r5, #0]
 800c622:	3b01      	subs	r3, #1
 800c624:	b2db      	uxtb	r3, r3
 800c626:	2b0b      	cmp	r3, #11
 800c628:	d80f      	bhi.n	800c64a <HAL_RTC_SetTime+0x82>
			assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800c62a:	78eb      	ldrb	r3, [r5, #3]
 800c62c:	b1c3      	cbz	r3, 800c660 <HAL_RTC_SetTime+0x98>
 800c62e:	2b40      	cmp	r3, #64	; 0x40
 800c630:	d016      	beq.n	800c660 <HAL_RTC_SetTime+0x98>
 800c632:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800c636:	4868      	ldr	r0, [pc, #416]	; (800c7d8 <HAL_RTC_SetTime+0x210>)
 800c638:	f003 fa9e 	bl	800fb78 <assert_failed>
 800c63c:	e010      	b.n	800c660 <HAL_RTC_SetTime+0x98>
	assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800c63e:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c642:	4865      	ldr	r0, [pc, #404]	; (800c7d8 <HAL_RTC_SetTime+0x210>)
 800c644:	f003 fa98 	bl	800fb78 <assert_failed>
 800c648:	e7d1      	b.n	800c5ee <HAL_RTC_SetTime+0x26>
			assert_param(IS_RTC_HOUR12(sTime->Hours));
 800c64a:	f240 11bd 	movw	r1, #445	; 0x1bd
 800c64e:	4862      	ldr	r0, [pc, #392]	; (800c7d8 <HAL_RTC_SetTime+0x210>)
 800c650:	f003 fa92 	bl	800fb78 <assert_failed>
 800c654:	e7e9      	b.n	800c62a <HAL_RTC_SetTime+0x62>
			sTime->TimeFormat = 0x00U;
 800c656:	2300      	movs	r3, #0
 800c658:	70eb      	strb	r3, [r5, #3]
			assert_param(IS_RTC_HOUR24(sTime->Hours));
 800c65a:	782b      	ldrb	r3, [r5, #0]
 800c65c:	2b17      	cmp	r3, #23
 800c65e:	d845      	bhi.n	800c6ec <HAL_RTC_SetTime+0x124>
		assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800c660:	786b      	ldrb	r3, [r5, #1]
 800c662:	2b3b      	cmp	r3, #59	; 0x3b
 800c664:	d848      	bhi.n	800c6f8 <HAL_RTC_SetTime+0x130>
		assert_param(IS_RTC_SECONDS(sTime->Seconds));
 800c666:	78ab      	ldrb	r3, [r5, #2]
 800c668:	2b3b      	cmp	r3, #59	; 0x3b
 800c66a:	d84b      	bhi.n	800c704 <HAL_RTC_SetTime+0x13c>
		tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c66c:	7828      	ldrb	r0, [r5, #0]
 800c66e:	f7ff ff97 	bl	800c5a0 <RTC_ByteToBcd2>
 800c672:	0406      	lsls	r6, r0, #16
				    ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c674:	7868      	ldrb	r0, [r5, #1]
 800c676:	f7ff ff93 	bl	800c5a0 <RTC_ByteToBcd2>
		tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c67a:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
				    ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c67e:	78a8      	ldrb	r0, [r5, #2]
 800c680:	f7ff ff8e 	bl	800c5a0 <RTC_ByteToBcd2>
				    ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c684:	4330      	orrs	r0, r6
				    (((uint32_t)sTime->TimeFormat) << 16U));
 800c686:	78ee      	ldrb	r6, [r5, #3]
		tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c688:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c68c:	6823      	ldr	r3, [r4, #0]
 800c68e:	22ca      	movs	r2, #202	; 0xca
 800c690:	625a      	str	r2, [r3, #36]	; 0x24
 800c692:	6823      	ldr	r3, [r4, #0]
 800c694:	2253      	movs	r2, #83	; 0x53
 800c696:	625a      	str	r2, [r3, #36]	; 0x24
	if (RTC_EnterInitMode(hrtc) != HAL_OK) {
 800c698:	4620      	mov	r0, r4
 800c69a:	f7ff fec0 	bl	800c41e <RTC_EnterInitMode>
 800c69e:	4607      	mov	r7, r0
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	d17e      	bne.n	800c7a2 <HAL_RTC_SetTime+0x1da>
		hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c6a4:	6823      	ldr	r3, [r4, #0]
 800c6a6:	f006 367f 	and.w	r6, r6, #2139062143	; 0x7f7f7f7f
 800c6aa:	f026 46fe 	bic.w	r6, r6, #2130706432	; 0x7f000000
 800c6ae:	601e      	str	r6, [r3, #0]
		hrtc->Instance->CR &= (uint32_t) ~RTC_CR_BCK;
 800c6b0:	6822      	ldr	r2, [r4, #0]
 800c6b2:	6893      	ldr	r3, [r2, #8]
 800c6b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c6b8:	6093      	str	r3, [r2, #8]
		hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c6ba:	6821      	ldr	r1, [r4, #0]
 800c6bc:	688b      	ldr	r3, [r1, #8]
 800c6be:	68ea      	ldr	r2, [r5, #12]
 800c6c0:	6928      	ldr	r0, [r5, #16]
 800c6c2:	4302      	orrs	r2, r0
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	608b      	str	r3, [r1, #8]
		hrtc->Instance->ISR &= (uint32_t) ~RTC_ISR_INIT;
 800c6c8:	6822      	ldr	r2, [r4, #0]
 800c6ca:	68d3      	ldr	r3, [r2, #12]
 800c6cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6d0:	60d3      	str	r3, [r2, #12]
		if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET) {
 800c6d2:	6823      	ldr	r3, [r4, #0]
 800c6d4:	689b      	ldr	r3, [r3, #8]
 800c6d6:	f013 0f20 	tst.w	r3, #32
 800c6da:	d06b      	beq.n	800c7b4 <HAL_RTC_SetTime+0x1ec>
		__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	22ff      	movs	r2, #255	; 0xff
 800c6e0:	625a      	str	r2, [r3, #36]	; 0x24
		hrtc->State = HAL_RTC_STATE_READY;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	7763      	strb	r3, [r4, #29]
		__HAL_UNLOCK(hrtc);
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	7723      	strb	r3, [r4, #28]
		return HAL_OK;
 800c6ea:	e072      	b.n	800c7d2 <HAL_RTC_SetTime+0x20a>
			assert_param(IS_RTC_HOUR24(sTime->Hours));
 800c6ec:	f240 11c1 	movw	r1, #449	; 0x1c1
 800c6f0:	4839      	ldr	r0, [pc, #228]	; (800c7d8 <HAL_RTC_SetTime+0x210>)
 800c6f2:	f003 fa41 	bl	800fb78 <assert_failed>
 800c6f6:	e7b3      	b.n	800c660 <HAL_RTC_SetTime+0x98>
		assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800c6f8:	f240 11c3 	movw	r1, #451	; 0x1c3
 800c6fc:	4836      	ldr	r0, [pc, #216]	; (800c7d8 <HAL_RTC_SetTime+0x210>)
 800c6fe:	f003 fa3b 	bl	800fb78 <assert_failed>
 800c702:	e7b0      	b.n	800c666 <HAL_RTC_SetTime+0x9e>
		assert_param(IS_RTC_SECONDS(sTime->Seconds));
 800c704:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800c708:	4833      	ldr	r0, [pc, #204]	; (800c7d8 <HAL_RTC_SetTime+0x210>)
 800c70a:	f003 fa35 	bl	800fb78 <assert_failed>
 800c70e:	e7ad      	b.n	800c66c <HAL_RTC_SetTime+0xa4>
		if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET) {
 800c710:	6823      	ldr	r3, [r4, #0]
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c718:	d015      	beq.n	800c746 <HAL_RTC_SetTime+0x17e>
			tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 800c71a:	7828      	ldrb	r0, [r5, #0]
 800c71c:	f7ff ff4b 	bl	800c5b6 <RTC_Bcd2ToByte>
			assert_param(IS_RTC_HOUR12(tmpreg));
 800c720:	3801      	subs	r0, #1
 800c722:	280b      	cmp	r0, #11
 800c724:	d809      	bhi.n	800c73a <HAL_RTC_SetTime+0x172>
			assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800c726:	78eb      	ldrb	r3, [r5, #3]
 800c728:	b1a3      	cbz	r3, 800c754 <HAL_RTC_SetTime+0x18c>
 800c72a:	2b40      	cmp	r3, #64	; 0x40
 800c72c:	d012      	beq.n	800c754 <HAL_RTC_SetTime+0x18c>
 800c72e:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800c732:	4829      	ldr	r0, [pc, #164]	; (800c7d8 <HAL_RTC_SetTime+0x210>)
 800c734:	f003 fa20 	bl	800fb78 <assert_failed>
 800c738:	e00c      	b.n	800c754 <HAL_RTC_SetTime+0x18c>
			assert_param(IS_RTC_HOUR12(tmpreg));
 800c73a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800c73e:	4826      	ldr	r0, [pc, #152]	; (800c7d8 <HAL_RTC_SetTime+0x210>)
 800c740:	f003 fa1a 	bl	800fb78 <assert_failed>
 800c744:	e7ef      	b.n	800c726 <HAL_RTC_SetTime+0x15e>
			sTime->TimeFormat = 0x00U;
 800c746:	2300      	movs	r3, #0
 800c748:	70eb      	strb	r3, [r5, #3]
			assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800c74a:	7828      	ldrb	r0, [r5, #0]
 800c74c:	f7ff ff33 	bl	800c5b6 <RTC_Bcd2ToByte>
 800c750:	2817      	cmp	r0, #23
 800c752:	d814      	bhi.n	800c77e <HAL_RTC_SetTime+0x1b6>
		assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800c754:	7868      	ldrb	r0, [r5, #1]
 800c756:	f7ff ff2e 	bl	800c5b6 <RTC_Bcd2ToByte>
 800c75a:	283b      	cmp	r0, #59	; 0x3b
 800c75c:	d815      	bhi.n	800c78a <HAL_RTC_SetTime+0x1c2>
		assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800c75e:	78a8      	ldrb	r0, [r5, #2]
 800c760:	f7ff ff29 	bl	800c5b6 <RTC_Bcd2ToByte>
 800c764:	283b      	cmp	r0, #59	; 0x3b
 800c766:	d816      	bhi.n	800c796 <HAL_RTC_SetTime+0x1ce>
		tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c768:	782e      	ldrb	r6, [r5, #0]
			  ((uint32_t)(sTime->Minutes) << 8U) | \
 800c76a:	7868      	ldrb	r0, [r5, #1]
 800c76c:	0200      	lsls	r0, r0, #8
		tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c76e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
			  ((uint32_t)sTime->Seconds) | \
 800c772:	78ae      	ldrb	r6, [r5, #2]
			  ((uint32_t)(sTime->Minutes) << 8U) | \
 800c774:	4330      	orrs	r0, r6
			  ((uint32_t)(sTime->TimeFormat) << 16U));
 800c776:	78ee      	ldrb	r6, [r5, #3]
		tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c778:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c77c:	e786      	b.n	800c68c <HAL_RTC_SetTime+0xc4>
			assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800c77e:	f240 11d1 	movw	r1, #465	; 0x1d1
 800c782:	4815      	ldr	r0, [pc, #84]	; (800c7d8 <HAL_RTC_SetTime+0x210>)
 800c784:	f003 f9f8 	bl	800fb78 <assert_failed>
 800c788:	e7e4      	b.n	800c754 <HAL_RTC_SetTime+0x18c>
		assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800c78a:	f240 11d3 	movw	r1, #467	; 0x1d3
 800c78e:	4812      	ldr	r0, [pc, #72]	; (800c7d8 <HAL_RTC_SetTime+0x210>)
 800c790:	f003 f9f2 	bl	800fb78 <assert_failed>
 800c794:	e7e3      	b.n	800c75e <HAL_RTC_SetTime+0x196>
		assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800c796:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800c79a:	480f      	ldr	r0, [pc, #60]	; (800c7d8 <HAL_RTC_SetTime+0x210>)
 800c79c:	f003 f9ec 	bl	800fb78 <assert_failed>
 800c7a0:	e7e2      	b.n	800c768 <HAL_RTC_SetTime+0x1a0>
		__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7a2:	6823      	ldr	r3, [r4, #0]
 800c7a4:	22ff      	movs	r2, #255	; 0xff
 800c7a6:	625a      	str	r2, [r3, #36]	; 0x24
		hrtc->State = HAL_RTC_STATE_ERROR;
 800c7a8:	2304      	movs	r3, #4
 800c7aa:	7763      	strb	r3, [r4, #29]
		__HAL_UNLOCK(hrtc);
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	7723      	strb	r3, [r4, #28]
		return HAL_ERROR;
 800c7b0:	2701      	movs	r7, #1
 800c7b2:	e00e      	b.n	800c7d2 <HAL_RTC_SetTime+0x20a>
			if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK) {
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	f7ff fe19 	bl	800c3ec <HAL_RTC_WaitForSynchro>
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d08e      	beq.n	800c6dc <HAL_RTC_SetTime+0x114>
				__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7be:	6823      	ldr	r3, [r4, #0]
 800c7c0:	22ff      	movs	r2, #255	; 0xff
 800c7c2:	625a      	str	r2, [r3, #36]	; 0x24
				hrtc->State = HAL_RTC_STATE_ERROR;
 800c7c4:	2304      	movs	r3, #4
 800c7c6:	7763      	strb	r3, [r4, #29]
				__HAL_UNLOCK(hrtc);
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	7723      	strb	r3, [r4, #28]
				return HAL_ERROR;
 800c7cc:	2701      	movs	r7, #1
 800c7ce:	e000      	b.n	800c7d2 <HAL_RTC_SetTime+0x20a>
	__HAL_LOCK(hrtc);
 800c7d0:	2702      	movs	r7, #2
}
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	08021e60 	.word	0x08021e60

0800c7dc <HAL_RTC_GetTime>:
{
 800c7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7de:	4604      	mov	r4, r0
 800c7e0:	460d      	mov	r5, r1
 800c7e2:	4616      	mov	r6, r2
	assert_param(IS_RTC_FORMAT(Format));
 800c7e4:	2a01      	cmp	r2, #1
 800c7e6:	d904      	bls.n	800c7f2 <HAL_RTC_GetTime+0x16>
 800c7e8:	f44f 710a 	mov.w	r1, #552	; 0x228
 800c7ec:	4815      	ldr	r0, [pc, #84]	; (800c844 <HAL_RTC_GetTime+0x68>)
 800c7ee:	f003 f9c3 	bl	800fb78 <assert_failed>
	sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c7f2:	6823      	ldr	r3, [r4, #0]
 800c7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f6:	606b      	str	r3, [r5, #4]
	sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c7f8:	6823      	ldr	r3, [r4, #0]
 800c7fa:	691b      	ldr	r3, [r3, #16]
 800c7fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c800:	60ab      	str	r3, [r5, #8]
	tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c802:	6823      	ldr	r3, [r4, #0]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c80a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
	sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c80e:	0c1a      	lsrs	r2, r3, #16
 800c810:	f002 003f 	and.w	r0, r2, #63	; 0x3f
 800c814:	7028      	strb	r0, [r5, #0]
	sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c816:	f3c3 2706 	ubfx	r7, r3, #8, #7
 800c81a:	706f      	strb	r7, [r5, #1]
	sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c81c:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 800c820:	70ac      	strb	r4, [r5, #2]
	sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c822:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800c826:	70ea      	strb	r2, [r5, #3]
	if (Format == RTC_FORMAT_BIN) {
 800c828:	b956      	cbnz	r6, 800c840 <HAL_RTC_GetTime+0x64>
		sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c82a:	f7ff fec4 	bl	800c5b6 <RTC_Bcd2ToByte>
 800c82e:	7028      	strb	r0, [r5, #0]
		sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c830:	4638      	mov	r0, r7
 800c832:	f7ff fec0 	bl	800c5b6 <RTC_Bcd2ToByte>
 800c836:	7068      	strb	r0, [r5, #1]
		sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c838:	4620      	mov	r0, r4
 800c83a:	f7ff febc 	bl	800c5b6 <RTC_Bcd2ToByte>
 800c83e:	70a8      	strb	r0, [r5, #2]
}
 800c840:	2000      	movs	r0, #0
 800c842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c844:	08021e60 	.word	0x08021e60

0800c848 <HAL_RTC_SetDate>:
{
 800c848:	b570      	push	{r4, r5, r6, lr}
 800c84a:	4604      	mov	r4, r0
 800c84c:	460e      	mov	r6, r1
 800c84e:	4615      	mov	r5, r2
	assert_param(IS_RTC_FORMAT(Format));
 800c850:	2a01      	cmp	r2, #1
 800c852:	d904      	bls.n	800c85e <HAL_RTC_SetDate+0x16>
 800c854:	f44f 7115 	mov.w	r1, #596	; 0x254
 800c858:	4857      	ldr	r0, [pc, #348]	; (800c9b8 <HAL_RTC_SetDate+0x170>)
 800c85a:	f003 f98d 	bl	800fb78 <assert_failed>
	__HAL_LOCK(hrtc);
 800c85e:	7f23      	ldrb	r3, [r4, #28]
 800c860:	2b01      	cmp	r3, #1
 800c862:	f000 80a5 	beq.w	800c9b0 <HAL_RTC_SetDate+0x168>
 800c866:	2301      	movs	r3, #1
 800c868:	7723      	strb	r3, [r4, #28]
	hrtc->State = HAL_RTC_STATE_BUSY;
 800c86a:	2302      	movs	r3, #2
 800c86c:	7763      	strb	r3, [r4, #29]
	if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U)) {
 800c86e:	b93d      	cbnz	r5, 800c880 <HAL_RTC_SetDate+0x38>
 800c870:	7873      	ldrb	r3, [r6, #1]
 800c872:	f013 0f10 	tst.w	r3, #16
 800c876:	d003      	beq.n	800c880 <HAL_RTC_SetDate+0x38>
		sDate->Month = (uint8_t)((sDate->Month & (uint8_t) ~(0x10U)) + (uint8_t)0x0AU);
 800c878:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800c87c:	330a      	adds	r3, #10
 800c87e:	7073      	strb	r3, [r6, #1]
	assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800c880:	7833      	ldrb	r3, [r6, #0]
 800c882:	3b01      	subs	r3, #1
 800c884:	b2db      	uxtb	r3, r3
 800c886:	2b06      	cmp	r3, #6
 800c888:	d842      	bhi.n	800c910 <HAL_RTC_SetDate+0xc8>
	if (Format == RTC_FORMAT_BIN) {
 800c88a:	2d00      	cmp	r5, #0
 800c88c:	d158      	bne.n	800c940 <HAL_RTC_SetDate+0xf8>
		assert_param(IS_RTC_YEAR(sDate->Year));
 800c88e:	78f3      	ldrb	r3, [r6, #3]
 800c890:	2b63      	cmp	r3, #99	; 0x63
 800c892:	d843      	bhi.n	800c91c <HAL_RTC_SetDate+0xd4>
		assert_param(IS_RTC_MONTH(sDate->Month));
 800c894:	7873      	ldrb	r3, [r6, #1]
 800c896:	3b01      	subs	r3, #1
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	2b0b      	cmp	r3, #11
 800c89c:	d844      	bhi.n	800c928 <HAL_RTC_SetDate+0xe0>
		assert_param(IS_RTC_DATE(sDate->Date));
 800c89e:	78b3      	ldrb	r3, [r6, #2]
 800c8a0:	3b01      	subs	r3, #1
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	2b1e      	cmp	r3, #30
 800c8a6:	d845      	bhi.n	800c934 <HAL_RTC_SetDate+0xec>
		datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c8a8:	78f0      	ldrb	r0, [r6, #3]
 800c8aa:	f7ff fe79 	bl	800c5a0 <RTC_ByteToBcd2>
 800c8ae:	0405      	lsls	r5, r0, #16
			      ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c8b0:	7870      	ldrb	r0, [r6, #1]
 800c8b2:	f7ff fe75 	bl	800c5a0 <RTC_ByteToBcd2>
		datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c8b6:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
			      ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c8ba:	78b0      	ldrb	r0, [r6, #2]
 800c8bc:	f7ff fe70 	bl	800c5a0 <RTC_ByteToBcd2>
			      ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c8c0:	4328      	orrs	r0, r5
			      ((uint32_t)sDate->WeekDay << 13U));
 800c8c2:	7835      	ldrb	r5, [r6, #0]
		datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c8c4:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c8c8:	6823      	ldr	r3, [r4, #0]
 800c8ca:	22ca      	movs	r2, #202	; 0xca
 800c8cc:	625a      	str	r2, [r3, #36]	; 0x24
 800c8ce:	6823      	ldr	r3, [r4, #0]
 800c8d0:	2253      	movs	r2, #83	; 0x53
 800c8d2:	625a      	str	r2, [r3, #36]	; 0x24
	if (RTC_EnterInitMode(hrtc) != HAL_OK) {
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	f7ff fda2 	bl	800c41e <RTC_EnterInitMode>
 800c8da:	4606      	mov	r6, r0
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	d150      	bne.n	800c982 <HAL_RTC_SetDate+0x13a>
		hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c8e0:	6823      	ldr	r3, [r4, #0]
 800c8e2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800c8e6:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 800c8ea:	605d      	str	r5, [r3, #4]
		hrtc->Instance->ISR &= (uint32_t) ~RTC_ISR_INIT;
 800c8ec:	6822      	ldr	r2, [r4, #0]
 800c8ee:	68d3      	ldr	r3, [r2, #12]
 800c8f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8f4:	60d3      	str	r3, [r2, #12]
		if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET) {
 800c8f6:	6823      	ldr	r3, [r4, #0]
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	f013 0f20 	tst.w	r3, #32
 800c8fe:	d049      	beq.n	800c994 <HAL_RTC_SetDate+0x14c>
		__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c900:	6823      	ldr	r3, [r4, #0]
 800c902:	22ff      	movs	r2, #255	; 0xff
 800c904:	625a      	str	r2, [r3, #36]	; 0x24
		hrtc->State = HAL_RTC_STATE_READY;
 800c906:	2301      	movs	r3, #1
 800c908:	7763      	strb	r3, [r4, #29]
		__HAL_UNLOCK(hrtc);
 800c90a:	2300      	movs	r3, #0
 800c90c:	7723      	strb	r3, [r4, #28]
		return HAL_OK;
 800c90e:	e050      	b.n	800c9b2 <HAL_RTC_SetDate+0x16a>
	assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800c910:	f240 215f 	movw	r1, #607	; 0x25f
 800c914:	4828      	ldr	r0, [pc, #160]	; (800c9b8 <HAL_RTC_SetDate+0x170>)
 800c916:	f003 f92f 	bl	800fb78 <assert_failed>
 800c91a:	e7b6      	b.n	800c88a <HAL_RTC_SetDate+0x42>
		assert_param(IS_RTC_YEAR(sDate->Year));
 800c91c:	f240 2162 	movw	r1, #610	; 0x262
 800c920:	4825      	ldr	r0, [pc, #148]	; (800c9b8 <HAL_RTC_SetDate+0x170>)
 800c922:	f003 f929 	bl	800fb78 <assert_failed>
 800c926:	e7b5      	b.n	800c894 <HAL_RTC_SetDate+0x4c>
		assert_param(IS_RTC_MONTH(sDate->Month));
 800c928:	f240 2163 	movw	r1, #611	; 0x263
 800c92c:	4822      	ldr	r0, [pc, #136]	; (800c9b8 <HAL_RTC_SetDate+0x170>)
 800c92e:	f003 f923 	bl	800fb78 <assert_failed>
 800c932:	e7b4      	b.n	800c89e <HAL_RTC_SetDate+0x56>
		assert_param(IS_RTC_DATE(sDate->Date));
 800c934:	f44f 7119 	mov.w	r1, #612	; 0x264
 800c938:	481f      	ldr	r0, [pc, #124]	; (800c9b8 <HAL_RTC_SetDate+0x170>)
 800c93a:	f003 f91d 	bl	800fb78 <assert_failed>
 800c93e:	e7b3      	b.n	800c8a8 <HAL_RTC_SetDate+0x60>
		assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800c940:	78f0      	ldrb	r0, [r6, #3]
 800c942:	f7ff fe38 	bl	800c5b6 <RTC_Bcd2ToByte>
 800c946:	2863      	cmp	r0, #99	; 0x63
 800c948:	d815      	bhi.n	800c976 <HAL_RTC_SetDate+0x12e>
		assert_param(IS_RTC_MONTH(datetmpreg));
 800c94a:	4d1b      	ldr	r5, [pc, #108]	; (800c9b8 <HAL_RTC_SetDate+0x170>)
 800c94c:	f44f 711b 	mov.w	r1, #620	; 0x26c
 800c950:	4628      	mov	r0, r5
 800c952:	f003 f911 	bl	800fb78 <assert_failed>
		assert_param(IS_RTC_DATE(datetmpreg));
 800c956:	f240 216d 	movw	r1, #621	; 0x26d
 800c95a:	4628      	mov	r0, r5
 800c95c:	f003 f90c 	bl	800fb78 <assert_failed>
		datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c960:	78f5      	ldrb	r5, [r6, #3]
			      (((uint32_t)sDate->Month) << 8U) | \
 800c962:	7870      	ldrb	r0, [r6, #1]
 800c964:	0200      	lsls	r0, r0, #8
		datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c966:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
			      ((uint32_t)sDate->Date) | \
 800c96a:	78b5      	ldrb	r5, [r6, #2]
			      (((uint32_t)sDate->Month) << 8U) | \
 800c96c:	4328      	orrs	r0, r5
			      (((uint32_t)sDate->WeekDay) << 13U));
 800c96e:	7835      	ldrb	r5, [r6, #0]
		datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c970:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 800c974:	e7a8      	b.n	800c8c8 <HAL_RTC_SetDate+0x80>
		assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800c976:	f240 216b 	movw	r1, #619	; 0x26b
 800c97a:	480f      	ldr	r0, [pc, #60]	; (800c9b8 <HAL_RTC_SetDate+0x170>)
 800c97c:	f003 f8fc 	bl	800fb78 <assert_failed>
 800c980:	e7e3      	b.n	800c94a <HAL_RTC_SetDate+0x102>
		__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c982:	6823      	ldr	r3, [r4, #0]
 800c984:	22ff      	movs	r2, #255	; 0xff
 800c986:	625a      	str	r2, [r3, #36]	; 0x24
		hrtc->State = HAL_RTC_STATE_ERROR;
 800c988:	2304      	movs	r3, #4
 800c98a:	7763      	strb	r3, [r4, #29]
		__HAL_UNLOCK(hrtc);
 800c98c:	2300      	movs	r3, #0
 800c98e:	7723      	strb	r3, [r4, #28]
		return HAL_ERROR;
 800c990:	2601      	movs	r6, #1
 800c992:	e00e      	b.n	800c9b2 <HAL_RTC_SetDate+0x16a>
			if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK) {
 800c994:	4620      	mov	r0, r4
 800c996:	f7ff fd29 	bl	800c3ec <HAL_RTC_WaitForSynchro>
 800c99a:	2800      	cmp	r0, #0
 800c99c:	d0b0      	beq.n	800c900 <HAL_RTC_SetDate+0xb8>
				__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c99e:	6823      	ldr	r3, [r4, #0]
 800c9a0:	22ff      	movs	r2, #255	; 0xff
 800c9a2:	625a      	str	r2, [r3, #36]	; 0x24
				hrtc->State = HAL_RTC_STATE_ERROR;
 800c9a4:	2304      	movs	r3, #4
 800c9a6:	7763      	strb	r3, [r4, #29]
				__HAL_UNLOCK(hrtc);
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	7723      	strb	r3, [r4, #28]
				return HAL_ERROR;
 800c9ac:	2601      	movs	r6, #1
 800c9ae:	e000      	b.n	800c9b2 <HAL_RTC_SetDate+0x16a>
	__HAL_LOCK(hrtc);
 800c9b0:	2602      	movs	r6, #2
}
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	bd70      	pop	{r4, r5, r6, pc}
 800c9b6:	bf00      	nop
 800c9b8:	08021e60 	.word	0x08021e60

0800c9bc <HAL_RTC_GetDate>:
{
 800c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9be:	4606      	mov	r6, r0
 800c9c0:	460c      	mov	r4, r1
 800c9c2:	4615      	mov	r5, r2
	assert_param(IS_RTC_FORMAT(Format));
 800c9c4:	2a01      	cmp	r2, #1
 800c9c6:	d904      	bls.n	800c9d2 <HAL_RTC_GetDate+0x16>
 800c9c8:	f240 21b9 	movw	r1, #697	; 0x2b9
 800c9cc:	4810      	ldr	r0, [pc, #64]	; (800ca10 <HAL_RTC_GetDate+0x54>)
 800c9ce:	f003 f8d3 	bl	800fb78 <assert_failed>
	datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c9d2:	6833      	ldr	r3, [r6, #0]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c9da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
	sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c9de:	0c18      	lsrs	r0, r3, #16
 800c9e0:	70e0      	strb	r0, [r4, #3]
	sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c9e2:	f3c3 2704 	ubfx	r7, r3, #8, #5
 800c9e6:	7067      	strb	r7, [r4, #1]
	sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c9e8:	f003 063f 	and.w	r6, r3, #63	; 0x3f
 800c9ec:	70a6      	strb	r6, [r4, #2]
	sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c9ee:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800c9f2:	7023      	strb	r3, [r4, #0]
	if (Format == RTC_FORMAT_BIN) {
 800c9f4:	b955      	cbnz	r5, 800ca0c <HAL_RTC_GetDate+0x50>
		sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c9f6:	f7ff fdde 	bl	800c5b6 <RTC_Bcd2ToByte>
 800c9fa:	70e0      	strb	r0, [r4, #3]
		sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c9fc:	4638      	mov	r0, r7
 800c9fe:	f7ff fdda 	bl	800c5b6 <RTC_Bcd2ToByte>
 800ca02:	7060      	strb	r0, [r4, #1]
		sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ca04:	4630      	mov	r0, r6
 800ca06:	f7ff fdd6 	bl	800c5b6 <RTC_Bcd2ToByte>
 800ca0a:	70a0      	strb	r0, [r4, #2]
}
 800ca0c:	2000      	movs	r0, #0
 800ca0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca10:	08021e60 	.word	0x08021e60

0800ca14 <TIM_OC1_SetConfig>:
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca14:	b430      	push	{r4, r5}
	uint32_t tmpccmrx = 0U;
	uint32_t tmpccer = 0U;
	uint32_t tmpcr2 = 0U;

	/* Disable the Channel 1: Reset the CC1E Bit */
	TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca16:	6a03      	ldr	r3, [r0, #32]
 800ca18:	f023 0301 	bic.w	r3, r3, #1
 800ca1c:	6203      	str	r3, [r0, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 800ca1e:	6a03      	ldr	r3, [r0, #32]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 800ca20:	6844      	ldr	r4, [r0, #4]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 800ca22:	6982      	ldr	r2, [r0, #24]

	/* Reset the Output Compare Mode Bits */
	tmpccmrx &= ~TIM_CCMR1_OC1M;
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ca24:	f022 0273 	bic.w	r2, r2, #115	; 0x73
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 800ca28:	680d      	ldr	r5, [r1, #0]
 800ca2a:	432a      	orrs	r2, r5

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC1P;
 800ca2c:	f023 0302 	bic.w	r3, r3, #2
	/* Set the Output Compare Polarity */
	tmpccer |= OC_Config->OCPolarity;
 800ca30:	688d      	ldr	r5, [r1, #8]
 800ca32:	432b      	orrs	r3, r5


	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 800ca34:	4d0b      	ldr	r5, [pc, #44]	; (800ca64 <TIM_OC1_SetConfig+0x50>)
 800ca36:	42a8      	cmp	r0, r5
 800ca38:	d006      	beq.n	800ca48 <TIM_OC1_SetConfig+0x34>
		tmpcr2 |= OC_Config->OCIdleState;
		/* Set the Output N Idle state */
		tmpcr2 |= OC_Config->OCNIdleState;
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 800ca3a:	6044      	str	r4, [r0, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 800ca3c:	6182      	str	r2, [r0, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR1 = OC_Config->Pulse;
 800ca3e:	684a      	ldr	r2, [r1, #4]
 800ca40:	6342      	str	r2, [r0, #52]	; 0x34

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 800ca42:	6203      	str	r3, [r0, #32]
}
 800ca44:	bc30      	pop	{r4, r5}
 800ca46:	4770      	bx	lr
		tmpccer &= ~TIM_CCER_CC1NP;
 800ca48:	f023 0308 	bic.w	r3, r3, #8
		tmpccer |= OC_Config->OCNPolarity;
 800ca4c:	68cd      	ldr	r5, [r1, #12]
 800ca4e:	432b      	orrs	r3, r5
		tmpccer &= ~TIM_CCER_CC1NE;
 800ca50:	f023 0304 	bic.w	r3, r3, #4
		tmpcr2 &= ~TIM_CR2_OIS1N;
 800ca54:	f424 7440 	bic.w	r4, r4, #768	; 0x300
		tmpcr2 |= OC_Config->OCIdleState;
 800ca58:	694d      	ldr	r5, [r1, #20]
 800ca5a:	432c      	orrs	r4, r5
		tmpcr2 |= OC_Config->OCNIdleState;
 800ca5c:	698d      	ldr	r5, [r1, #24]
 800ca5e:	432c      	orrs	r4, r5
 800ca60:	e7eb      	b.n	800ca3a <TIM_OC1_SetConfig+0x26>
 800ca62:	bf00      	nop
 800ca64:	40010000 	.word	0x40010000

0800ca68 <TIM_TI1_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca68:	b410      	push	{r4}
	uint32_t tmpccmr1 = 0U;
	uint32_t tmpccer = 0U;

	/* Disable the Channel 1: Reset the CC1E Bit */
	tmpccer = TIMx->CCER;
 800ca6a:	6a03      	ldr	r3, [r0, #32]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca6c:	6a04      	ldr	r4, [r0, #32]
 800ca6e:	f024 0401 	bic.w	r4, r4, #1
 800ca72:	6204      	str	r4, [r0, #32]
	tmpccmr1 = TIMx->CCMR1;
 800ca74:	6984      	ldr	r4, [r0, #24]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca76:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
	tmpccmr1 |= (TIM_ICFilter << 4U);
 800ca7a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

	/* Select the Polarity and set the CC1E Bit */
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca7e:	f023 030a 	bic.w	r3, r3, #10
	tmpccer |= TIM_ICPolarity;
 800ca82:	430b      	orrs	r3, r1

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 800ca84:	6182      	str	r2, [r0, #24]
	TIMx->CCER = tmpccer;
 800ca86:	6203      	str	r3, [r0, #32]
}
 800ca88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca8c:	4770      	bx	lr

0800ca8e <TIM_TI2_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca8e:	b410      	push	{r4}
	uint32_t tmpccmr1 = 0U;
	uint32_t tmpccer = 0U;

	/* Disable the Channel 2: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca90:	6a03      	ldr	r3, [r0, #32]
 800ca92:	f023 0310 	bic.w	r3, r3, #16
 800ca96:	6203      	str	r3, [r0, #32]
	tmpccmr1 = TIMx->CCMR1;
 800ca98:	6984      	ldr	r4, [r0, #24]
	tmpccer = TIMx->CCER;
 800ca9a:	6a03      	ldr	r3, [r0, #32]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca9c:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
	tmpccmr1 |= (TIM_ICFilter << 12U);
 800caa0:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

	/* Select the Polarity and set the CC2E Bit */
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800caa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
	tmpccer |= (TIM_ICPolarity << 4U);
 800caa8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 800caac:	6182      	str	r2, [r0, #24]
	TIMx->CCER = tmpccer;
 800caae:	6203      	str	r3, [r0, #32]
}
 800cab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cab4:	4770      	bx	lr

0800cab6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
	uint32_t tmpsmcr = 0U;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 800cab6:	6883      	ldr	r3, [r0, #8]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 800cab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800cabc:	f041 0107 	orr.w	r1, r1, #7
 800cac0:	430b      	orrs	r3, r1
	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 800cac2:	6083      	str	r3, [r0, #8]
 800cac4:	4770      	bx	lr

0800cac6 <TIM_ETR_SetConfig>:
 *          This parameter must be a value between 0x00 and 0x0F
 * @retval None
 */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
			      uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cac6:	b410      	push	{r4}
	uint32_t tmpsmcr = 0U;

	tmpsmcr = TIMx->SMCR;
 800cac8:	6884      	ldr	r4, [r0, #8]

	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800caca:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800cace:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800cad2:	4319      	orrs	r1, r3
 800cad4:	430c      	orrs	r4, r1

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 800cad6:	6084      	str	r4, [r0, #8]
}
 800cad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cadc:	4770      	bx	lr
	...

0800cae0 <TIM_OC3_SetConfig>:
{
 800cae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cae4:	4604      	mov	r4, r0
 800cae6:	460f      	mov	r7, r1
	TIMx->CCER &= ~TIM_CCER_CC3E;
 800cae8:	6a03      	ldr	r3, [r0, #32]
 800caea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800caee:	6203      	str	r3, [r0, #32]
	tmpccer = TIMx->CCER;
 800caf0:	6a05      	ldr	r5, [r0, #32]
	tmpcr2 = TIMx->CR2;
 800caf2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	tmpccmrx = TIMx->CCMR2;
 800caf6:	69c6      	ldr	r6, [r0, #28]
	tmpccmrx &= ~TIM_CCMR2_CC3S;
 800caf8:	f026 0673 	bic.w	r6, r6, #115	; 0x73
	tmpccmrx |= OC_Config->OCMode;
 800cafc:	680b      	ldr	r3, [r1, #0]
 800cafe:	431e      	orrs	r6, r3
	tmpccer &= ~TIM_CCER_CC3P;
 800cb00:	f425 7500 	bic.w	r5, r5, #512	; 0x200
	tmpccer |= (OC_Config->OCPolarity << 8U);
 800cb04:	688b      	ldr	r3, [r1, #8]
 800cb06:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 800cb0a:	4b1d      	ldr	r3, [pc, #116]	; (800cb80 <TIM_OC3_SetConfig+0xa0>)
 800cb0c:	4298      	cmp	r0, r3
 800cb0e:	d007      	beq.n	800cb20 <TIM_OC3_SetConfig+0x40>
	TIMx->CR2 = tmpcr2;
 800cb10:	f8c4 8004 	str.w	r8, [r4, #4]
	TIMx->CCMR2 = tmpccmrx;
 800cb14:	61e6      	str	r6, [r4, #28]
	TIMx->CCR3 = OC_Config->Pulse;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	63e3      	str	r3, [r4, #60]	; 0x3c
	TIMx->CCER = tmpccer;
 800cb1a:	6225      	str	r5, [r4, #32]
 800cb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800cb20:	68cb      	ldr	r3, [r1, #12]
 800cb22:	b133      	cbz	r3, 800cb32 <TIM_OC3_SetConfig+0x52>
 800cb24:	2b08      	cmp	r3, #8
 800cb26:	d004      	beq.n	800cb32 <TIM_OC3_SetConfig+0x52>
 800cb28:	f241 2166 	movw	r1, #4710	; 0x1266
 800cb2c:	4815      	ldr	r0, [pc, #84]	; (800cb84 <TIM_OC3_SetConfig+0xa4>)
 800cb2e:	f003 f823 	bl	800fb78 <assert_failed>
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800cb32:	69bb      	ldr	r3, [r7, #24]
 800cb34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb38:	d000      	beq.n	800cb3c <TIM_OC3_SetConfig+0x5c>
 800cb3a:	b9a3      	cbnz	r3, 800cb66 <TIM_OC3_SetConfig+0x86>
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb42:	d000      	beq.n	800cb46 <TIM_OC3_SetConfig+0x66>
 800cb44:	b9ab      	cbnz	r3, 800cb72 <TIM_OC3_SetConfig+0x92>
		tmpccer &= ~TIM_CCER_CC3NP;
 800cb46:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
		tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
		tmpccer &= ~TIM_CCER_CC3NE;
 800cb50:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
		tmpcr2 &= ~TIM_CR2_OIS3N;
 800cb54:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
		tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cb5e:	69bb      	ldr	r3, [r7, #24]
 800cb60:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
 800cb64:	e7d4      	b.n	800cb10 <TIM_OC3_SetConfig+0x30>
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800cb66:	f241 2167 	movw	r1, #4711	; 0x1267
 800cb6a:	4806      	ldr	r0, [pc, #24]	; (800cb84 <TIM_OC3_SetConfig+0xa4>)
 800cb6c:	f003 f804 	bl	800fb78 <assert_failed>
 800cb70:	e7e4      	b.n	800cb3c <TIM_OC3_SetConfig+0x5c>
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800cb72:	f241 2168 	movw	r1, #4712	; 0x1268
 800cb76:	4803      	ldr	r0, [pc, #12]	; (800cb84 <TIM_OC3_SetConfig+0xa4>)
 800cb78:	f002 fffe 	bl	800fb78 <assert_failed>
 800cb7c:	e7e3      	b.n	800cb46 <TIM_OC3_SetConfig+0x66>
 800cb7e:	bf00      	nop
 800cb80:	40010000 	.word	0x40010000
 800cb84:	08021e98 	.word	0x08021e98

0800cb88 <TIM_OC4_SetConfig>:
{
 800cb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	460f      	mov	r7, r1
	TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb90:	6a03      	ldr	r3, [r0, #32]
 800cb92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb96:	6203      	str	r3, [r0, #32]
	tmpccer = TIMx->CCER;
 800cb98:	6a05      	ldr	r5, [r0, #32]
	tmpcr2 = TIMx->CR2;
 800cb9a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	tmpccmrx = TIMx->CCMR2;
 800cb9e:	69c6      	ldr	r6, [r0, #28]
	tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cba0:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
	tmpccmrx |= (OC_Config->OCMode << 8U);
 800cba4:	680b      	ldr	r3, [r1, #0]
 800cba6:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	tmpccer &= ~TIM_CCER_CC4P;
 800cbaa:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
	tmpccer |= (OC_Config->OCPolarity << 12U);
 800cbae:	688b      	ldr	r3, [r1, #8]
 800cbb0:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 800cbb4:	4b0d      	ldr	r3, [pc, #52]	; (800cbec <TIM_OC4_SetConfig+0x64>)
 800cbb6:	4298      	cmp	r0, r3
 800cbb8:	d007      	beq.n	800cbca <TIM_OC4_SetConfig+0x42>
	TIMx->CR2 = tmpcr2;
 800cbba:	f8c4 8004 	str.w	r8, [r4, #4]
	TIMx->CCMR2 = tmpccmrx;
 800cbbe:	61e6      	str	r6, [r4, #28]
	TIMx->CCR4 = OC_Config->Pulse;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6423      	str	r3, [r4, #64]	; 0x40
	TIMx->CCER = tmpccer;
 800cbc4:	6225      	str	r5, [r4, #32]
 800cbc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800cbca:	694b      	ldr	r3, [r1, #20]
 800cbcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbd0:	d000      	beq.n	800cbd4 <TIM_OC4_SetConfig+0x4c>
 800cbd2:	b92b      	cbnz	r3, 800cbe0 <TIM_OC4_SetConfig+0x58>
		tmpcr2 &= ~TIM_CR2_OIS4;
 800cbd4:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
		tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
 800cbde:	e7ec      	b.n	800cbba <TIM_OC4_SetConfig+0x32>
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800cbe0:	f241 21ab 	movw	r1, #4779	; 0x12ab
 800cbe4:	4802      	ldr	r0, [pc, #8]	; (800cbf0 <TIM_OC4_SetConfig+0x68>)
 800cbe6:	f002 ffc7 	bl	800fb78 <assert_failed>
 800cbea:	e7f3      	b.n	800cbd4 <TIM_OC4_SetConfig+0x4c>
 800cbec:	40010000 	.word	0x40010000
 800cbf0:	08021e98 	.word	0x08021e98

0800cbf4 <HAL_TIM_Base_Start_IT>:
{
 800cbf4:	b510      	push	{r4, lr}
 800cbf6:	4604      	mov	r4, r0
	assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cbf8:	6803      	ldr	r3, [r0, #0]
 800cbfa:	4a17      	ldr	r2, [pc, #92]	; (800cc58 <HAL_TIM_Base_Start_IT+0x64>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d01f      	beq.n	800cc40 <HAL_TIM_Base_Start_IT+0x4c>
 800cc00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc04:	d01c      	beq.n	800cc40 <HAL_TIM_Base_Start_IT+0x4c>
 800cc06:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d018      	beq.n	800cc40 <HAL_TIM_Base_Start_IT+0x4c>
 800cc0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d014      	beq.n	800cc40 <HAL_TIM_Base_Start_IT+0x4c>
 800cc16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d010      	beq.n	800cc40 <HAL_TIM_Base_Start_IT+0x4c>
 800cc1e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d00c      	beq.n	800cc40 <HAL_TIM_Base_Start_IT+0x4c>
 800cc26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d008      	beq.n	800cc40 <HAL_TIM_Base_Start_IT+0x4c>
 800cc2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d004      	beq.n	800cc40 <HAL_TIM_Base_Start_IT+0x4c>
 800cc36:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800cc3a:	4808      	ldr	r0, [pc, #32]	; (800cc5c <HAL_TIM_Base_Start_IT+0x68>)
 800cc3c:	f002 ff9c 	bl	800fb78 <assert_failed>
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cc40:	6822      	ldr	r2, [r4, #0]
 800cc42:	68d3      	ldr	r3, [r2, #12]
 800cc44:	f043 0301 	orr.w	r3, r3, #1
 800cc48:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE(htim);
 800cc4a:	6822      	ldr	r2, [r4, #0]
 800cc4c:	6813      	ldr	r3, [r2, #0]
 800cc4e:	f043 0301 	orr.w	r3, r3, #1
 800cc52:	6013      	str	r3, [r2, #0]
}
 800cc54:	2000      	movs	r0, #0
 800cc56:	bd10      	pop	{r4, pc}
 800cc58:	40010000 	.word	0x40010000
 800cc5c:	08021e98 	.word	0x08021e98

0800cc60 <HAL_TIM_PWM_MspInit>:
{
 800cc60:	4770      	bx	lr

0800cc62 <HAL_TIM_PWM_MspDeInit>:
{
 800cc62:	4770      	bx	lr

0800cc64 <HAL_TIM_PWM_DeInit>:
{
 800cc64:	b510      	push	{r4, lr}
 800cc66:	4604      	mov	r4, r0
	assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cc68:	6803      	ldr	r3, [r0, #0]
 800cc6a:	4a1f      	ldr	r2, [pc, #124]	; (800cce8 <HAL_TIM_PWM_DeInit+0x84>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d01f      	beq.n	800ccb0 <HAL_TIM_PWM_DeInit+0x4c>
 800cc70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc74:	d01c      	beq.n	800ccb0 <HAL_TIM_PWM_DeInit+0x4c>
 800cc76:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d018      	beq.n	800ccb0 <HAL_TIM_PWM_DeInit+0x4c>
 800cc7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d014      	beq.n	800ccb0 <HAL_TIM_PWM_DeInit+0x4c>
 800cc86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d010      	beq.n	800ccb0 <HAL_TIM_PWM_DeInit+0x4c>
 800cc8e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d00c      	beq.n	800ccb0 <HAL_TIM_PWM_DeInit+0x4c>
 800cc96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d008      	beq.n	800ccb0 <HAL_TIM_PWM_DeInit+0x4c>
 800cc9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d004      	beq.n	800ccb0 <HAL_TIM_PWM_DeInit+0x4c>
 800cca6:	f240 31f6 	movw	r1, #1014	; 0x3f6
 800ccaa:	4810      	ldr	r0, [pc, #64]	; (800ccec <HAL_TIM_PWM_DeInit+0x88>)
 800ccac:	f002 ff64 	bl	800fb78 <assert_failed>
	htim->State = HAL_TIM_STATE_BUSY;
 800ccb0:	2302      	movs	r3, #2
 800ccb2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	__HAL_TIM_DISABLE(htim);
 800ccb6:	6823      	ldr	r3, [r4, #0]
 800ccb8:	6a19      	ldr	r1, [r3, #32]
 800ccba:	f241 1211 	movw	r2, #4369	; 0x1111
 800ccbe:	4211      	tst	r1, r2
 800ccc0:	d108      	bne.n	800ccd4 <HAL_TIM_PWM_DeInit+0x70>
 800ccc2:	6a19      	ldr	r1, [r3, #32]
 800ccc4:	f240 4244 	movw	r2, #1092	; 0x444
 800ccc8:	4211      	tst	r1, r2
 800ccca:	d103      	bne.n	800ccd4 <HAL_TIM_PWM_DeInit+0x70>
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	f022 0201 	bic.w	r2, r2, #1
 800ccd2:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_MspDeInit(htim);
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f7ff ffc4 	bl	800cc62 <HAL_TIM_PWM_MspDeInit>
	htim->State = HAL_TIM_STATE_RESET;
 800ccda:	2000      	movs	r0, #0
 800ccdc:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
	__HAL_UNLOCK(htim);
 800cce0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800cce4:	bd10      	pop	{r4, pc}
 800cce6:	bf00      	nop
 800cce8:	40010000 	.word	0x40010000
 800ccec:	08021e98 	.word	0x08021e98

0800ccf0 <HAL_TIM_ConfigClockSource>:
{
 800ccf0:	b538      	push	{r3, r4, r5, lr}
	__HAL_LOCK(htim);
 800ccf2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	f000 8264 	beq.w	800d1c4 <HAL_TIM_ConfigClockSource+0x4d4>
 800ccfc:	460d      	mov	r5, r1
 800ccfe:	4604      	mov	r4, r0
 800cd00:	2301      	movs	r3, #1
 800cd02:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	htim->State = HAL_TIM_STATE_BUSY;
 800cd06:	2302      	movs	r3, #2
 800cd08:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800cd0c:	680b      	ldr	r3, [r1, #0]
 800cd0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd12:	d016      	beq.n	800cd42 <HAL_TIM_ConfigClockSource+0x52>
 800cd14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd18:	d013      	beq.n	800cd42 <HAL_TIM_ConfigClockSource+0x52>
 800cd1a:	b193      	cbz	r3, 800cd42 <HAL_TIM_ConfigClockSource+0x52>
 800cd1c:	2b10      	cmp	r3, #16
 800cd1e:	d010      	beq.n	800cd42 <HAL_TIM_ConfigClockSource+0x52>
 800cd20:	2b20      	cmp	r3, #32
 800cd22:	d00e      	beq.n	800cd42 <HAL_TIM_ConfigClockSource+0x52>
 800cd24:	2b30      	cmp	r3, #48	; 0x30
 800cd26:	d00c      	beq.n	800cd42 <HAL_TIM_ConfigClockSource+0x52>
 800cd28:	2b40      	cmp	r3, #64	; 0x40
 800cd2a:	d00a      	beq.n	800cd42 <HAL_TIM_ConfigClockSource+0x52>
 800cd2c:	2b50      	cmp	r3, #80	; 0x50
 800cd2e:	d008      	beq.n	800cd42 <HAL_TIM_ConfigClockSource+0x52>
 800cd30:	2b60      	cmp	r3, #96	; 0x60
 800cd32:	d006      	beq.n	800cd42 <HAL_TIM_ConfigClockSource+0x52>
 800cd34:	2b70      	cmp	r3, #112	; 0x70
 800cd36:	d004      	beq.n	800cd42 <HAL_TIM_ConfigClockSource+0x52>
 800cd38:	f640 61df 	movw	r1, #3807	; 0xedf
 800cd3c:	48b6      	ldr	r0, [pc, #728]	; (800d018 <HAL_TIM_ConfigClockSource+0x328>)
 800cd3e:	f002 ff1b 	bl	800fb78 <assert_failed>
	tmpsmcr = htim->Instance->SMCR;
 800cd42:	6822      	ldr	r2, [r4, #0]
 800cd44:	6893      	ldr	r3, [r2, #8]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
	htim->Instance->SMCR = tmpsmcr;
 800cd4e:	6093      	str	r3, [r2, #8]
	switch (sClockSourceConfig->ClockSource) {
 800cd50:	682b      	ldr	r3, [r5, #0]
 800cd52:	2b40      	cmp	r3, #64	; 0x40
 800cd54:	f000 81af 	beq.w	800d0b6 <HAL_TIM_ConfigClockSource+0x3c6>
 800cd58:	d942      	bls.n	800cde0 <HAL_TIM_ConfigClockSource+0xf0>
 800cd5a:	2b70      	cmp	r3, #112	; 0x70
 800cd5c:	f000 810b 	beq.w	800cf76 <HAL_TIM_ConfigClockSource+0x286>
 800cd60:	f200 808d 	bhi.w	800ce7e <HAL_TIM_ConfigClockSource+0x18e>
 800cd64:	2b50      	cmp	r3, #80	; 0x50
 800cd66:	f000 815b 	beq.w	800d020 <HAL_TIM_ConfigClockSource+0x330>
 800cd6a:	2b60      	cmp	r3, #96	; 0x60
 800cd6c:	f040 80fc 	bne.w	800cf68 <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800cd70:	6823      	ldr	r3, [r4, #0]
 800cd72:	4aaa      	ldr	r2, [pc, #680]	; (800d01c <HAL_TIM_ConfigClockSource+0x32c>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d017      	beq.n	800cda8 <HAL_TIM_ConfigClockSource+0xb8>
 800cd78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd7c:	d014      	beq.n	800cda8 <HAL_TIM_ConfigClockSource+0xb8>
 800cd7e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d010      	beq.n	800cda8 <HAL_TIM_ConfigClockSource+0xb8>
 800cd86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d00c      	beq.n	800cda8 <HAL_TIM_ConfigClockSource+0xb8>
 800cd8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d008      	beq.n	800cda8 <HAL_TIM_ConfigClockSource+0xb8>
 800cd96:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d004      	beq.n	800cda8 <HAL_TIM_ConfigClockSource+0xb8>
 800cd9e:	f640 712b 	movw	r1, #3883	; 0xf2b
 800cda2:	489d      	ldr	r0, [pc, #628]	; (800d018 <HAL_TIM_ConfigClockSource+0x328>)
 800cda4:	f002 fee8 	bl	800fb78 <assert_failed>
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cda8:	686b      	ldr	r3, [r5, #4]
 800cdaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cdae:	d009      	beq.n	800cdc4 <HAL_TIM_ConfigClockSource+0xd4>
 800cdb0:	b143      	cbz	r3, 800cdc4 <HAL_TIM_ConfigClockSource+0xd4>
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d006      	beq.n	800cdc4 <HAL_TIM_ConfigClockSource+0xd4>
 800cdb6:	2b0a      	cmp	r3, #10
 800cdb8:	d004      	beq.n	800cdc4 <HAL_TIM_ConfigClockSource+0xd4>
 800cdba:	f640 712e 	movw	r1, #3886	; 0xf2e
 800cdbe:	4896      	ldr	r0, [pc, #600]	; (800d018 <HAL_TIM_ConfigClockSource+0x328>)
 800cdc0:	f002 feda 	bl	800fb78 <assert_failed>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cdc4:	68eb      	ldr	r3, [r5, #12]
 800cdc6:	2b0f      	cmp	r3, #15
 800cdc8:	f200 816f 	bhi.w	800d0aa <HAL_TIM_ConfigClockSource+0x3ba>
		TIM_TI2_ConfigInputStage(htim->Instance,
 800cdcc:	68ea      	ldr	r2, [r5, #12]
 800cdce:	6869      	ldr	r1, [r5, #4]
 800cdd0:	6820      	ldr	r0, [r4, #0]
 800cdd2:	f7ff fe5c 	bl	800ca8e <TIM_TI2_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cdd6:	2160      	movs	r1, #96	; 0x60
 800cdd8:	6820      	ldr	r0, [r4, #0]
 800cdda:	f7ff fe6c 	bl	800cab6 <TIM_ITRx_SetConfig>
	break;
 800cdde:	e0c3      	b.n	800cf68 <HAL_TIM_ConfigClockSource+0x278>
	switch (sClockSourceConfig->ClockSource) {
 800cde0:	2b10      	cmp	r3, #16
 800cde2:	f000 81ad 	beq.w	800d140 <HAL_TIM_ConfigClockSource+0x450>
 800cde6:	d926      	bls.n	800ce36 <HAL_TIM_ConfigClockSource+0x146>
 800cde8:	2b20      	cmp	r3, #32
 800cdea:	f000 81ca 	beq.w	800d182 <HAL_TIM_ConfigClockSource+0x492>
 800cdee:	2b30      	cmp	r3, #48	; 0x30
 800cdf0:	f040 80ba 	bne.w	800cf68 <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800cdf4:	6823      	ldr	r3, [r4, #0]
 800cdf6:	4a89      	ldr	r2, [pc, #548]	; (800d01c <HAL_TIM_ConfigClockSource+0x32c>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d017      	beq.n	800ce2c <HAL_TIM_ConfigClockSource+0x13c>
 800cdfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce00:	d014      	beq.n	800ce2c <HAL_TIM_ConfigClockSource+0x13c>
 800ce02:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d010      	beq.n	800ce2c <HAL_TIM_ConfigClockSource+0x13c>
 800ce0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d00c      	beq.n	800ce2c <HAL_TIM_ConfigClockSource+0x13c>
 800ce12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d008      	beq.n	800ce2c <HAL_TIM_ConfigClockSource+0x13c>
 800ce1a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d004      	beq.n	800ce2c <HAL_TIM_ConfigClockSource+0x13c>
 800ce22:	f640 7159 	movw	r1, #3929	; 0xf59
 800ce26:	487c      	ldr	r0, [pc, #496]	; (800d018 <HAL_TIM_ConfigClockSource+0x328>)
 800ce28:	f002 fea6 	bl	800fb78 <assert_failed>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800ce2c:	2130      	movs	r1, #48	; 0x30
 800ce2e:	6820      	ldr	r0, [r4, #0]
 800ce30:	f7ff fe41 	bl	800cab6 <TIM_ITRx_SetConfig>
	break;
 800ce34:	e098      	b.n	800cf68 <HAL_TIM_ConfigClockSource+0x278>
	switch (sClockSourceConfig->ClockSource) {
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f040 8096 	bne.w	800cf68 <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ce3c:	6823      	ldr	r3, [r4, #0]
 800ce3e:	4a77      	ldr	r2, [pc, #476]	; (800d01c <HAL_TIM_ConfigClockSource+0x32c>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d017      	beq.n	800ce74 <HAL_TIM_ConfigClockSource+0x184>
 800ce44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce48:	d014      	beq.n	800ce74 <HAL_TIM_ConfigClockSource+0x184>
 800ce4a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d010      	beq.n	800ce74 <HAL_TIM_ConfigClockSource+0x184>
 800ce52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d00c      	beq.n	800ce74 <HAL_TIM_ConfigClockSource+0x184>
 800ce5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d008      	beq.n	800ce74 <HAL_TIM_ConfigClockSource+0x184>
 800ce62:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d004      	beq.n	800ce74 <HAL_TIM_ConfigClockSource+0x184>
 800ce6a:	f640 7147 	movw	r1, #3911	; 0xf47
 800ce6e:	486a      	ldr	r0, [pc, #424]	; (800d018 <HAL_TIM_ConfigClockSource+0x328>)
 800ce70:	f002 fe82 	bl	800fb78 <assert_failed>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800ce74:	2100      	movs	r1, #0
 800ce76:	6820      	ldr	r0, [r4, #0]
 800ce78:	f7ff fe1d 	bl	800cab6 <TIM_ITRx_SetConfig>
	break;
 800ce7c:	e074      	b.n	800cf68 <HAL_TIM_ConfigClockSource+0x278>
	switch (sClockSourceConfig->ClockSource) {
 800ce7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce82:	d048      	beq.n	800cf16 <HAL_TIM_ConfigClockSource+0x226>
 800ce84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce88:	d16e      	bne.n	800cf68 <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	4a63      	ldr	r2, [pc, #396]	; (800d01c <HAL_TIM_ConfigClockSource+0x32c>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d013      	beq.n	800ceba <HAL_TIM_ConfigClockSource+0x1ca>
 800ce92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce96:	d010      	beq.n	800ceba <HAL_TIM_ConfigClockSource+0x1ca>
 800ce98:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d00c      	beq.n	800ceba <HAL_TIM_ConfigClockSource+0x1ca>
 800cea0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d008      	beq.n	800ceba <HAL_TIM_ConfigClockSource+0x1ca>
 800cea8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d004      	beq.n	800ceba <HAL_TIM_ConfigClockSource+0x1ca>
 800ceb0:	f640 710b 	movw	r1, #3851	; 0xf0b
 800ceb4:	4858      	ldr	r0, [pc, #352]	; (800d018 <HAL_TIM_ConfigClockSource+0x328>)
 800ceb6:	f002 fe5f 	bl	800fb78 <assert_failed>
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ceba:	686b      	ldr	r3, [r5, #4]
 800cebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cec0:	d009      	beq.n	800ced6 <HAL_TIM_ConfigClockSource+0x1e6>
 800cec2:	b143      	cbz	r3, 800ced6 <HAL_TIM_ConfigClockSource+0x1e6>
 800cec4:	2b02      	cmp	r3, #2
 800cec6:	d006      	beq.n	800ced6 <HAL_TIM_ConfigClockSource+0x1e6>
 800cec8:	2b0a      	cmp	r3, #10
 800ceca:	d004      	beq.n	800ced6 <HAL_TIM_ConfigClockSource+0x1e6>
 800cecc:	f640 710d 	movw	r1, #3853	; 0xf0d
 800ced0:	4851      	ldr	r0, [pc, #324]	; (800d018 <HAL_TIM_ConfigClockSource+0x328>)
 800ced2:	f002 fe51 	bl	800fb78 <assert_failed>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800ced6:	68ab      	ldr	r3, [r5, #8]
 800ced8:	b16b      	cbz	r3, 800cef6 <HAL_TIM_ConfigClockSource+0x206>
 800ceda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cede:	d00a      	beq.n	800cef6 <HAL_TIM_ConfigClockSource+0x206>
 800cee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cee4:	d007      	beq.n	800cef6 <HAL_TIM_ConfigClockSource+0x206>
 800cee6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ceea:	d004      	beq.n	800cef6 <HAL_TIM_ConfigClockSource+0x206>
 800ceec:	f640 710e 	movw	r1, #3854	; 0xf0e
 800cef0:	4849      	ldr	r0, [pc, #292]	; (800d018 <HAL_TIM_ConfigClockSource+0x328>)
 800cef2:	f002 fe41 	bl	800fb78 <assert_failed>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cef6:	68eb      	ldr	r3, [r5, #12]
 800cef8:	2b0f      	cmp	r3, #15
 800cefa:	f200 8087 	bhi.w	800d00c <HAL_TIM_ConfigClockSource+0x31c>
		TIM_ETR_SetConfig(htim->Instance,
 800cefe:	68eb      	ldr	r3, [r5, #12]
 800cf00:	686a      	ldr	r2, [r5, #4]
 800cf02:	68a9      	ldr	r1, [r5, #8]
 800cf04:	6820      	ldr	r0, [r4, #0]
 800cf06:	f7ff fdde 	bl	800cac6 <TIM_ETR_SetConfig>
		htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cf0a:	6822      	ldr	r2, [r4, #0]
 800cf0c:	6893      	ldr	r3, [r2, #8]
 800cf0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cf12:	6093      	str	r3, [r2, #8]
	break;
 800cf14:	e028      	b.n	800cf68 <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cf16:	6823      	ldr	r3, [r4, #0]
 800cf18:	4a40      	ldr	r2, [pc, #256]	; (800d01c <HAL_TIM_ConfigClockSource+0x32c>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d01f      	beq.n	800cf5e <HAL_TIM_ConfigClockSource+0x26e>
 800cf1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf22:	d01c      	beq.n	800cf5e <HAL_TIM_ConfigClockSource+0x26e>
 800cf24:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d018      	beq.n	800cf5e <HAL_TIM_ConfigClockSource+0x26e>
 800cf2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d014      	beq.n	800cf5e <HAL_TIM_ConfigClockSource+0x26e>
 800cf34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d010      	beq.n	800cf5e <HAL_TIM_ConfigClockSource+0x26e>
 800cf3c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d00c      	beq.n	800cf5e <HAL_TIM_ConfigClockSource+0x26e>
 800cf44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d008      	beq.n	800cf5e <HAL_TIM_ConfigClockSource+0x26e>
 800cf4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d004      	beq.n	800cf5e <HAL_TIM_ConfigClockSource+0x26e>
 800cf54:	f640 61ea 	movw	r1, #3818	; 0xeea
 800cf58:	482f      	ldr	r0, [pc, #188]	; (800d018 <HAL_TIM_ConfigClockSource+0x328>)
 800cf5a:	f002 fe0d 	bl	800fb78 <assert_failed>
		htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800cf5e:	6822      	ldr	r2, [r4, #0]
 800cf60:	6893      	ldr	r3, [r2, #8]
 800cf62:	f023 0307 	bic.w	r3, r3, #7
 800cf66:	6093      	str	r3, [r2, #8]
	htim->State = HAL_TIM_STATE_READY;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	__HAL_UNLOCK(htim);
 800cf6e:	2000      	movs	r0, #0
 800cf70:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	return HAL_OK;
 800cf74:	bd38      	pop	{r3, r4, r5, pc}
		assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
 800cf76:	6823      	ldr	r3, [r4, #0]
 800cf78:	4a28      	ldr	r2, [pc, #160]	; (800d01c <HAL_TIM_ConfigClockSource+0x32c>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d013      	beq.n	800cfa6 <HAL_TIM_ConfigClockSource+0x2b6>
 800cf7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf82:	d010      	beq.n	800cfa6 <HAL_TIM_ConfigClockSource+0x2b6>
 800cf84:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d00c      	beq.n	800cfa6 <HAL_TIM_ConfigClockSource+0x2b6>
 800cf8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d008      	beq.n	800cfa6 <HAL_TIM_ConfigClockSource+0x2b6>
 800cf94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d004      	beq.n	800cfa6 <HAL_TIM_ConfigClockSource+0x2b6>
 800cf9c:	f640 61f3 	movw	r1, #3827	; 0xef3
 800cfa0:	481d      	ldr	r0, [pc, #116]	; (800d018 <HAL_TIM_ConfigClockSource+0x328>)
 800cfa2:	f002 fde9 	bl	800fb78 <assert_failed>
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cfa6:	686b      	ldr	r3, [r5, #4]
 800cfa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfac:	d009      	beq.n	800cfc2 <HAL_TIM_ConfigClockSource+0x2d2>
 800cfae:	b143      	cbz	r3, 800cfc2 <HAL_TIM_ConfigClockSource+0x2d2>
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	d006      	beq.n	800cfc2 <HAL_TIM_ConfigClockSource+0x2d2>
 800cfb4:	2b0a      	cmp	r3, #10
 800cfb6:	d004      	beq.n	800cfc2 <HAL_TIM_ConfigClockSource+0x2d2>
 800cfb8:	f640 61f5 	movw	r1, #3829	; 0xef5
 800cfbc:	4816      	ldr	r0, [pc, #88]	; (800d018 <HAL_TIM_ConfigClockSource+0x328>)
 800cfbe:	f002 fddb 	bl	800fb78 <assert_failed>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800cfc2:	68ab      	ldr	r3, [r5, #8]
 800cfc4:	b16b      	cbz	r3, 800cfe2 <HAL_TIM_ConfigClockSource+0x2f2>
 800cfc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfca:	d00a      	beq.n	800cfe2 <HAL_TIM_ConfigClockSource+0x2f2>
 800cfcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cfd0:	d007      	beq.n	800cfe2 <HAL_TIM_ConfigClockSource+0x2f2>
 800cfd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cfd6:	d004      	beq.n	800cfe2 <HAL_TIM_ConfigClockSource+0x2f2>
 800cfd8:	f640 61f6 	movw	r1, #3830	; 0xef6
 800cfdc:	480e      	ldr	r0, [pc, #56]	; (800d018 <HAL_TIM_ConfigClockSource+0x328>)
 800cfde:	f002 fdcb 	bl	800fb78 <assert_failed>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cfe2:	68eb      	ldr	r3, [r5, #12]
 800cfe4:	2b0f      	cmp	r3, #15
 800cfe6:	d80b      	bhi.n	800d000 <HAL_TIM_ConfigClockSource+0x310>
		TIM_ETR_SetConfig(htim->Instance,
 800cfe8:	68eb      	ldr	r3, [r5, #12]
 800cfea:	686a      	ldr	r2, [r5, #4]
 800cfec:	68a9      	ldr	r1, [r5, #8]
 800cfee:	6820      	ldr	r0, [r4, #0]
 800cff0:	f7ff fd69 	bl	800cac6 <TIM_ETR_SetConfig>
		tmpsmcr = htim->Instance->SMCR;
 800cff4:	6822      	ldr	r2, [r4, #0]
 800cff6:	6893      	ldr	r3, [r2, #8]
		tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cff8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
		htim->Instance->SMCR = tmpsmcr;
 800cffc:	6093      	str	r3, [r2, #8]
	break;
 800cffe:	e7b3      	b.n	800cf68 <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d000:	f640 61f7 	movw	r1, #3831	; 0xef7
 800d004:	4804      	ldr	r0, [pc, #16]	; (800d018 <HAL_TIM_ConfigClockSource+0x328>)
 800d006:	f002 fdb7 	bl	800fb78 <assert_failed>
 800d00a:	e7ed      	b.n	800cfe8 <HAL_TIM_ConfigClockSource+0x2f8>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d00c:	f640 710f 	movw	r1, #3855	; 0xf0f
 800d010:	4801      	ldr	r0, [pc, #4]	; (800d018 <HAL_TIM_ConfigClockSource+0x328>)
 800d012:	f002 fdb1 	bl	800fb78 <assert_failed>
 800d016:	e772      	b.n	800cefe <HAL_TIM_ConfigClockSource+0x20e>
 800d018:	08021e98 	.word	0x08021e98
 800d01c:	40010000 	.word	0x40010000
		assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d020:	6823      	ldr	r3, [r4, #0]
 800d022:	4a69      	ldr	r2, [pc, #420]	; (800d1c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d01f      	beq.n	800d068 <HAL_TIM_ConfigClockSource+0x378>
 800d028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d02c:	d01c      	beq.n	800d068 <HAL_TIM_ConfigClockSource+0x378>
 800d02e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d032:	4293      	cmp	r3, r2
 800d034:	d018      	beq.n	800d068 <HAL_TIM_ConfigClockSource+0x378>
 800d036:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d014      	beq.n	800d068 <HAL_TIM_ConfigClockSource+0x378>
 800d03e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d042:	4293      	cmp	r3, r2
 800d044:	d010      	beq.n	800d068 <HAL_TIM_ConfigClockSource+0x378>
 800d046:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d00c      	beq.n	800d068 <HAL_TIM_ConfigClockSource+0x378>
 800d04e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d052:	4293      	cmp	r3, r2
 800d054:	d008      	beq.n	800d068 <HAL_TIM_ConfigClockSource+0x378>
 800d056:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d004      	beq.n	800d068 <HAL_TIM_ConfigClockSource+0x378>
 800d05e:	f640 711d 	movw	r1, #3869	; 0xf1d
 800d062:	485a      	ldr	r0, [pc, #360]	; (800d1cc <HAL_TIM_ConfigClockSource+0x4dc>)
 800d064:	f002 fd88 	bl	800fb78 <assert_failed>
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d068:	686b      	ldr	r3, [r5, #4]
 800d06a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d06e:	d009      	beq.n	800d084 <HAL_TIM_ConfigClockSource+0x394>
 800d070:	b143      	cbz	r3, 800d084 <HAL_TIM_ConfigClockSource+0x394>
 800d072:	2b02      	cmp	r3, #2
 800d074:	d006      	beq.n	800d084 <HAL_TIM_ConfigClockSource+0x394>
 800d076:	2b0a      	cmp	r3, #10
 800d078:	d004      	beq.n	800d084 <HAL_TIM_ConfigClockSource+0x394>
 800d07a:	f44f 6172 	mov.w	r1, #3872	; 0xf20
 800d07e:	4853      	ldr	r0, [pc, #332]	; (800d1cc <HAL_TIM_ConfigClockSource+0x4dc>)
 800d080:	f002 fd7a 	bl	800fb78 <assert_failed>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d084:	68eb      	ldr	r3, [r5, #12]
 800d086:	2b0f      	cmp	r3, #15
 800d088:	d809      	bhi.n	800d09e <HAL_TIM_ConfigClockSource+0x3ae>
		TIM_TI1_ConfigInputStage(htim->Instance,
 800d08a:	68ea      	ldr	r2, [r5, #12]
 800d08c:	6869      	ldr	r1, [r5, #4]
 800d08e:	6820      	ldr	r0, [r4, #0]
 800d090:	f7ff fcea 	bl	800ca68 <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d094:	2150      	movs	r1, #80	; 0x50
 800d096:	6820      	ldr	r0, [r4, #0]
 800d098:	f7ff fd0d 	bl	800cab6 <TIM_ITRx_SetConfig>
	break;
 800d09c:	e764      	b.n	800cf68 <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d09e:	f640 7121 	movw	r1, #3873	; 0xf21
 800d0a2:	484a      	ldr	r0, [pc, #296]	; (800d1cc <HAL_TIM_ConfigClockSource+0x4dc>)
 800d0a4:	f002 fd68 	bl	800fb78 <assert_failed>
 800d0a8:	e7ef      	b.n	800d08a <HAL_TIM_ConfigClockSource+0x39a>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d0aa:	f640 712f 	movw	r1, #3887	; 0xf2f
 800d0ae:	4847      	ldr	r0, [pc, #284]	; (800d1cc <HAL_TIM_ConfigClockSource+0x4dc>)
 800d0b0:	f002 fd62 	bl	800fb78 <assert_failed>
 800d0b4:	e68a      	b.n	800cdcc <HAL_TIM_ConfigClockSource+0xdc>
		assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d0b6:	6823      	ldr	r3, [r4, #0]
 800d0b8:	4a43      	ldr	r2, [pc, #268]	; (800d1c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d01f      	beq.n	800d0fe <HAL_TIM_ConfigClockSource+0x40e>
 800d0be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0c2:	d01c      	beq.n	800d0fe <HAL_TIM_ConfigClockSource+0x40e>
 800d0c4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d018      	beq.n	800d0fe <HAL_TIM_ConfigClockSource+0x40e>
 800d0cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d014      	beq.n	800d0fe <HAL_TIM_ConfigClockSource+0x40e>
 800d0d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d010      	beq.n	800d0fe <HAL_TIM_ConfigClockSource+0x40e>
 800d0dc:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d00c      	beq.n	800d0fe <HAL_TIM_ConfigClockSource+0x40e>
 800d0e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	d008      	beq.n	800d0fe <HAL_TIM_ConfigClockSource+0x40e>
 800d0ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	d004      	beq.n	800d0fe <HAL_TIM_ConfigClockSource+0x40e>
 800d0f4:	f640 7139 	movw	r1, #3897	; 0xf39
 800d0f8:	4834      	ldr	r0, [pc, #208]	; (800d1cc <HAL_TIM_ConfigClockSource+0x4dc>)
 800d0fa:	f002 fd3d 	bl	800fb78 <assert_failed>
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d0fe:	686b      	ldr	r3, [r5, #4]
 800d100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d104:	d009      	beq.n	800d11a <HAL_TIM_ConfigClockSource+0x42a>
 800d106:	b143      	cbz	r3, 800d11a <HAL_TIM_ConfigClockSource+0x42a>
 800d108:	2b02      	cmp	r3, #2
 800d10a:	d006      	beq.n	800d11a <HAL_TIM_ConfigClockSource+0x42a>
 800d10c:	2b0a      	cmp	r3, #10
 800d10e:	d004      	beq.n	800d11a <HAL_TIM_ConfigClockSource+0x42a>
 800d110:	f640 713c 	movw	r1, #3900	; 0xf3c
 800d114:	482d      	ldr	r0, [pc, #180]	; (800d1cc <HAL_TIM_ConfigClockSource+0x4dc>)
 800d116:	f002 fd2f 	bl	800fb78 <assert_failed>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d11a:	68eb      	ldr	r3, [r5, #12]
 800d11c:	2b0f      	cmp	r3, #15
 800d11e:	d809      	bhi.n	800d134 <HAL_TIM_ConfigClockSource+0x444>
		TIM_TI1_ConfigInputStage(htim->Instance,
 800d120:	68ea      	ldr	r2, [r5, #12]
 800d122:	6869      	ldr	r1, [r5, #4]
 800d124:	6820      	ldr	r0, [r4, #0]
 800d126:	f7ff fc9f 	bl	800ca68 <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d12a:	2140      	movs	r1, #64	; 0x40
 800d12c:	6820      	ldr	r0, [r4, #0]
 800d12e:	f7ff fcc2 	bl	800cab6 <TIM_ITRx_SetConfig>
	break;
 800d132:	e719      	b.n	800cf68 <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d134:	f640 713d 	movw	r1, #3901	; 0xf3d
 800d138:	4824      	ldr	r0, [pc, #144]	; (800d1cc <HAL_TIM_ConfigClockSource+0x4dc>)
 800d13a:	f002 fd1d 	bl	800fb78 <assert_failed>
 800d13e:	e7ef      	b.n	800d120 <HAL_TIM_ConfigClockSource+0x430>
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d140:	6823      	ldr	r3, [r4, #0]
 800d142:	4a21      	ldr	r2, [pc, #132]	; (800d1c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800d144:	4293      	cmp	r3, r2
 800d146:	d017      	beq.n	800d178 <HAL_TIM_ConfigClockSource+0x488>
 800d148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d14c:	d014      	beq.n	800d178 <HAL_TIM_ConfigClockSource+0x488>
 800d14e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d152:	4293      	cmp	r3, r2
 800d154:	d010      	beq.n	800d178 <HAL_TIM_ConfigClockSource+0x488>
 800d156:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d00c      	beq.n	800d178 <HAL_TIM_ConfigClockSource+0x488>
 800d15e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d162:	4293      	cmp	r3, r2
 800d164:	d008      	beq.n	800d178 <HAL_TIM_ConfigClockSource+0x488>
 800d166:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d004      	beq.n	800d178 <HAL_TIM_ConfigClockSource+0x488>
 800d16e:	f640 714d 	movw	r1, #3917	; 0xf4d
 800d172:	4816      	ldr	r0, [pc, #88]	; (800d1cc <HAL_TIM_ConfigClockSource+0x4dc>)
 800d174:	f002 fd00 	bl	800fb78 <assert_failed>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800d178:	2110      	movs	r1, #16
 800d17a:	6820      	ldr	r0, [r4, #0]
 800d17c:	f7ff fc9b 	bl	800cab6 <TIM_ITRx_SetConfig>
	break;
 800d180:	e6f2      	b.n	800cf68 <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d182:	6823      	ldr	r3, [r4, #0]
 800d184:	4a10      	ldr	r2, [pc, #64]	; (800d1c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d017      	beq.n	800d1ba <HAL_TIM_ConfigClockSource+0x4ca>
 800d18a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d18e:	d014      	beq.n	800d1ba <HAL_TIM_ConfigClockSource+0x4ca>
 800d190:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d194:	4293      	cmp	r3, r2
 800d196:	d010      	beq.n	800d1ba <HAL_TIM_ConfigClockSource+0x4ca>
 800d198:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d00c      	beq.n	800d1ba <HAL_TIM_ConfigClockSource+0x4ca>
 800d1a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d008      	beq.n	800d1ba <HAL_TIM_ConfigClockSource+0x4ca>
 800d1a8:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d004      	beq.n	800d1ba <HAL_TIM_ConfigClockSource+0x4ca>
 800d1b0:	f640 7153 	movw	r1, #3923	; 0xf53
 800d1b4:	4805      	ldr	r0, [pc, #20]	; (800d1cc <HAL_TIM_ConfigClockSource+0x4dc>)
 800d1b6:	f002 fcdf 	bl	800fb78 <assert_failed>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800d1ba:	2120      	movs	r1, #32
 800d1bc:	6820      	ldr	r0, [r4, #0]
 800d1be:	f7ff fc7a 	bl	800cab6 <TIM_ITRx_SetConfig>
	break;
 800d1c2:	e6d1      	b.n	800cf68 <HAL_TIM_ConfigClockSource+0x278>
	__HAL_LOCK(htim);
 800d1c4:	2002      	movs	r0, #2
}
 800d1c6:	bd38      	pop	{r3, r4, r5, pc}
 800d1c8:	40010000 	.word	0x40010000
 800d1cc:	08021e98 	.word	0x08021e98

0800d1d0 <HAL_TIM_OC_DelayElapsedCallback>:
{
 800d1d0:	4770      	bx	lr

0800d1d2 <HAL_TIM_IC_CaptureCallback>:
{
 800d1d2:	4770      	bx	lr

0800d1d4 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 800d1d4:	4770      	bx	lr

0800d1d6 <HAL_TIM_TriggerCallback>:
{
 800d1d6:	4770      	bx	lr

0800d1d8 <HAL_TIM_IRQHandler>:
{
 800d1d8:	b510      	push	{r4, lr}
 800d1da:	4604      	mov	r4, r0
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 800d1dc:	6803      	ldr	r3, [r0, #0]
 800d1de:	691a      	ldr	r2, [r3, #16]
 800d1e0:	f012 0f02 	tst.w	r2, #2
 800d1e4:	d011      	beq.n	800d20a <HAL_TIM_IRQHandler+0x32>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET) {
 800d1e6:	68da      	ldr	r2, [r3, #12]
 800d1e8:	f012 0f02 	tst.w	r2, #2
 800d1ec:	d00d      	beq.n	800d20a <HAL_TIM_IRQHandler+0x32>
				__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d1ee:	f06f 0202 	mvn.w	r2, #2
 800d1f2:	611a      	str	r2, [r3, #16]
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	7603      	strb	r3, [r0, #24]
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 800d1f8:	6803      	ldr	r3, [r0, #0]
 800d1fa:	699b      	ldr	r3, [r3, #24]
 800d1fc:	f013 0f03 	tst.w	r3, #3
 800d200:	d070      	beq.n	800d2e4 <HAL_TIM_IRQHandler+0x10c>
					HAL_TIM_IC_CaptureCallback(htim);
 800d202:	f7ff ffe6 	bl	800d1d2 <HAL_TIM_IC_CaptureCallback>
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d206:	2300      	movs	r3, #0
 800d208:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET) {
 800d20a:	6823      	ldr	r3, [r4, #0]
 800d20c:	691a      	ldr	r2, [r3, #16]
 800d20e:	f012 0f04 	tst.w	r2, #4
 800d212:	d012      	beq.n	800d23a <HAL_TIM_IRQHandler+0x62>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET) {
 800d214:	68da      	ldr	r2, [r3, #12]
 800d216:	f012 0f04 	tst.w	r2, #4
 800d21a:	d00e      	beq.n	800d23a <HAL_TIM_IRQHandler+0x62>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d21c:	f06f 0204 	mvn.w	r2, #4
 800d220:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d222:	2302      	movs	r3, #2
 800d224:	7623      	strb	r3, [r4, #24]
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 800d226:	6823      	ldr	r3, [r4, #0]
 800d228:	699b      	ldr	r3, [r3, #24]
 800d22a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d22e:	d05f      	beq.n	800d2f0 <HAL_TIM_IRQHandler+0x118>
				HAL_TIM_IC_CaptureCallback(htim);
 800d230:	4620      	mov	r0, r4
 800d232:	f7ff ffce 	bl	800d1d2 <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d236:	2300      	movs	r3, #0
 800d238:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET) {
 800d23a:	6823      	ldr	r3, [r4, #0]
 800d23c:	691a      	ldr	r2, [r3, #16]
 800d23e:	f012 0f08 	tst.w	r2, #8
 800d242:	d012      	beq.n	800d26a <HAL_TIM_IRQHandler+0x92>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET) {
 800d244:	68da      	ldr	r2, [r3, #12]
 800d246:	f012 0f08 	tst.w	r2, #8
 800d24a:	d00e      	beq.n	800d26a <HAL_TIM_IRQHandler+0x92>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d24c:	f06f 0208 	mvn.w	r2, #8
 800d250:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d252:	2304      	movs	r3, #4
 800d254:	7623      	strb	r3, [r4, #24]
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 800d256:	6823      	ldr	r3, [r4, #0]
 800d258:	69db      	ldr	r3, [r3, #28]
 800d25a:	f013 0f03 	tst.w	r3, #3
 800d25e:	d04e      	beq.n	800d2fe <HAL_TIM_IRQHandler+0x126>
				HAL_TIM_IC_CaptureCallback(htim);
 800d260:	4620      	mov	r0, r4
 800d262:	f7ff ffb6 	bl	800d1d2 <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d266:	2300      	movs	r3, #0
 800d268:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET) {
 800d26a:	6823      	ldr	r3, [r4, #0]
 800d26c:	691a      	ldr	r2, [r3, #16]
 800d26e:	f012 0f10 	tst.w	r2, #16
 800d272:	d012      	beq.n	800d29a <HAL_TIM_IRQHandler+0xc2>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET) {
 800d274:	68da      	ldr	r2, [r3, #12]
 800d276:	f012 0f10 	tst.w	r2, #16
 800d27a:	d00e      	beq.n	800d29a <HAL_TIM_IRQHandler+0xc2>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d27c:	f06f 0210 	mvn.w	r2, #16
 800d280:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d282:	2308      	movs	r3, #8
 800d284:	7623      	strb	r3, [r4, #24]
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 800d286:	6823      	ldr	r3, [r4, #0]
 800d288:	69db      	ldr	r3, [r3, #28]
 800d28a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d28e:	d03d      	beq.n	800d30c <HAL_TIM_IRQHandler+0x134>
				HAL_TIM_IC_CaptureCallback(htim);
 800d290:	4620      	mov	r0, r4
 800d292:	f7ff ff9e 	bl	800d1d2 <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d296:	2300      	movs	r3, #0
 800d298:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET) {
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	691a      	ldr	r2, [r3, #16]
 800d29e:	f012 0f01 	tst.w	r2, #1
 800d2a2:	d003      	beq.n	800d2ac <HAL_TIM_IRQHandler+0xd4>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET) {
 800d2a4:	68da      	ldr	r2, [r3, #12]
 800d2a6:	f012 0f01 	tst.w	r2, #1
 800d2aa:	d136      	bne.n	800d31a <HAL_TIM_IRQHandler+0x142>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET) {
 800d2ac:	6823      	ldr	r3, [r4, #0]
 800d2ae:	691a      	ldr	r2, [r3, #16]
 800d2b0:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d2b4:	d003      	beq.n	800d2be <HAL_TIM_IRQHandler+0xe6>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET) {
 800d2b6:	68da      	ldr	r2, [r3, #12]
 800d2b8:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d2bc:	d134      	bne.n	800d328 <HAL_TIM_IRQHandler+0x150>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET) {
 800d2be:	6823      	ldr	r3, [r4, #0]
 800d2c0:	691a      	ldr	r2, [r3, #16]
 800d2c2:	f012 0f40 	tst.w	r2, #64	; 0x40
 800d2c6:	d003      	beq.n	800d2d0 <HAL_TIM_IRQHandler+0xf8>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET) {
 800d2c8:	68da      	ldr	r2, [r3, #12]
 800d2ca:	f012 0f40 	tst.w	r2, #64	; 0x40
 800d2ce:	d132      	bne.n	800d336 <HAL_TIM_IRQHandler+0x15e>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET) {
 800d2d0:	6823      	ldr	r3, [r4, #0]
 800d2d2:	691a      	ldr	r2, [r3, #16]
 800d2d4:	f012 0f20 	tst.w	r2, #32
 800d2d8:	d003      	beq.n	800d2e2 <HAL_TIM_IRQHandler+0x10a>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET) {
 800d2da:	68da      	ldr	r2, [r3, #12]
 800d2dc:	f012 0f20 	tst.w	r2, #32
 800d2e0:	d130      	bne.n	800d344 <HAL_TIM_IRQHandler+0x16c>
 800d2e2:	bd10      	pop	{r4, pc}
					HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2e4:	f7ff ff74 	bl	800d1d0 <HAL_TIM_OC_DelayElapsedCallback>
					HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f7ff ff73 	bl	800d1d4 <HAL_TIM_PWM_PulseFinishedCallback>
 800d2ee:	e78a      	b.n	800d206 <HAL_TIM_IRQHandler+0x2e>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f7ff ff6d 	bl	800d1d0 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	f7ff ff6c 	bl	800d1d4 <HAL_TIM_PWM_PulseFinishedCallback>
 800d2fc:	e79b      	b.n	800d236 <HAL_TIM_IRQHandler+0x5e>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2fe:	4620      	mov	r0, r4
 800d300:	f7ff ff66 	bl	800d1d0 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d304:	4620      	mov	r0, r4
 800d306:	f7ff ff65 	bl	800d1d4 <HAL_TIM_PWM_PulseFinishedCallback>
 800d30a:	e7ac      	b.n	800d266 <HAL_TIM_IRQHandler+0x8e>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 800d30c:	4620      	mov	r0, r4
 800d30e:	f7ff ff5f 	bl	800d1d0 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d312:	4620      	mov	r0, r4
 800d314:	f7ff ff5e 	bl	800d1d4 <HAL_TIM_PWM_PulseFinishedCallback>
 800d318:	e7bd      	b.n	800d296 <HAL_TIM_IRQHandler+0xbe>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d31a:	f06f 0201 	mvn.w	r2, #1
 800d31e:	611a      	str	r2, [r3, #16]
			HAL_TIM_PeriodElapsedCallback(htim);
 800d320:	4620      	mov	r0, r4
 800d322:	f001 ff2b 	bl	800f17c <HAL_TIM_PeriodElapsedCallback>
 800d326:	e7c1      	b.n	800d2ac <HAL_TIM_IRQHandler+0xd4>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d328:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d32c:	611a      	str	r2, [r3, #16]
			HAL_TIMEx_BreakCallback(htim);
 800d32e:	4620      	mov	r0, r4
 800d330:	f000 fbf5 	bl	800db1e <HAL_TIMEx_BreakCallback>
 800d334:	e7c3      	b.n	800d2be <HAL_TIM_IRQHandler+0xe6>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d336:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d33a:	611a      	str	r2, [r3, #16]
			HAL_TIM_TriggerCallback(htim);
 800d33c:	4620      	mov	r0, r4
 800d33e:	f7ff ff4a 	bl	800d1d6 <HAL_TIM_TriggerCallback>
 800d342:	e7c5      	b.n	800d2d0 <HAL_TIM_IRQHandler+0xf8>
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d344:	f06f 0220 	mvn.w	r2, #32
 800d348:	611a      	str	r2, [r3, #16]
			HAL_TIMEx_CommutationCallback(htim);
 800d34a:	4620      	mov	r0, r4
 800d34c:	f000 fbe6 	bl	800db1c <HAL_TIMEx_CommutationCallback>
}
 800d350:	e7c7      	b.n	800d2e2 <HAL_TIM_IRQHandler+0x10a>
	...

0800d354 <TIM_Base_SetConfig>:
	tmpcr1 = TIMx->CR1;
 800d354:	6803      	ldr	r3, [r0, #0]
	if (IS_TIM_CC3_INSTANCE(TIMx) != RESET) {
 800d356:	4a32      	ldr	r2, [pc, #200]	; (800d420 <TIM_Base_SetConfig+0xcc>)
 800d358:	4290      	cmp	r0, r2
 800d35a:	d045      	beq.n	800d3e8 <TIM_Base_SetConfig+0x94>
 800d35c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d360:	d044      	beq.n	800d3ec <TIM_Base_SetConfig+0x98>
 800d362:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d366:	4290      	cmp	r0, r2
 800d368:	d042      	beq.n	800d3f0 <TIM_Base_SetConfig+0x9c>
 800d36a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d36e:	4290      	cmp	r0, r2
 800d370:	d040      	beq.n	800d3f4 <TIM_Base_SetConfig+0xa0>
 800d372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d376:	4290      	cmp	r0, r2
 800d378:	d034      	beq.n	800d3e4 <TIM_Base_SetConfig+0x90>
 800d37a:	2200      	movs	r2, #0
 800d37c:	b11a      	cbz	r2, 800d386 <TIM_Base_SetConfig+0x32>
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d37e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		tmpcr1 |= Structure->CounterMode;
 800d382:	684a      	ldr	r2, [r1, #4]
 800d384:	4313      	orrs	r3, r2
	if (IS_TIM_CC1_INSTANCE(TIMx) != RESET) {
 800d386:	4a26      	ldr	r2, [pc, #152]	; (800d420 <TIM_Base_SetConfig+0xcc>)
 800d388:	4290      	cmp	r0, r2
 800d38a:	d037      	beq.n	800d3fc <TIM_Base_SetConfig+0xa8>
 800d38c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d390:	d036      	beq.n	800d400 <TIM_Base_SetConfig+0xac>
 800d392:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d396:	4290      	cmp	r0, r2
 800d398:	d034      	beq.n	800d404 <TIM_Base_SetConfig+0xb0>
 800d39a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d39e:	4290      	cmp	r0, r2
 800d3a0:	d032      	beq.n	800d408 <TIM_Base_SetConfig+0xb4>
 800d3a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d3a6:	4290      	cmp	r0, r2
 800d3a8:	d030      	beq.n	800d40c <TIM_Base_SetConfig+0xb8>
 800d3aa:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d3ae:	4290      	cmp	r0, r2
 800d3b0:	d02e      	beq.n	800d410 <TIM_Base_SetConfig+0xbc>
 800d3b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d3b6:	4290      	cmp	r0, r2
 800d3b8:	d02c      	beq.n	800d414 <TIM_Base_SetConfig+0xc0>
 800d3ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d3be:	4290      	cmp	r0, r2
 800d3c0:	d01a      	beq.n	800d3f8 <TIM_Base_SetConfig+0xa4>
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	b11a      	cbz	r2, 800d3ce <TIM_Base_SetConfig+0x7a>
		tmpcr1 &= ~TIM_CR1_CKD;
 800d3c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
		tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d3ca:	68ca      	ldr	r2, [r1, #12]
 800d3cc:	4313      	orrs	r3, r2
	TIMx->CR1 = tmpcr1;
 800d3ce:	6003      	str	r3, [r0, #0]
	TIMx->ARR = (uint32_t)Structure->Period;
 800d3d0:	688b      	ldr	r3, [r1, #8]
 800d3d2:	62c3      	str	r3, [r0, #44]	; 0x2c
	TIMx->PSC = (uint32_t)Structure->Prescaler;
 800d3d4:	680b      	ldr	r3, [r1, #0]
 800d3d6:	6283      	str	r3, [r0, #40]	; 0x28
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 800d3d8:	4b11      	ldr	r3, [pc, #68]	; (800d420 <TIM_Base_SetConfig+0xcc>)
 800d3da:	4298      	cmp	r0, r3
 800d3dc:	d01c      	beq.n	800d418 <TIM_Base_SetConfig+0xc4>
	TIMx->EGR = TIM_EGR_UG;
 800d3de:	2301      	movs	r3, #1
 800d3e0:	6143      	str	r3, [r0, #20]
 800d3e2:	4770      	bx	lr
	if (IS_TIM_CC3_INSTANCE(TIMx) != RESET) {
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	e7c9      	b.n	800d37c <TIM_Base_SetConfig+0x28>
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	e7c7      	b.n	800d37c <TIM_Base_SetConfig+0x28>
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	e7c5      	b.n	800d37c <TIM_Base_SetConfig+0x28>
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	e7c3      	b.n	800d37c <TIM_Base_SetConfig+0x28>
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	e7c1      	b.n	800d37c <TIM_Base_SetConfig+0x28>
	if (IS_TIM_CC1_INSTANCE(TIMx) != RESET) {
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	e7e3      	b.n	800d3c4 <TIM_Base_SetConfig+0x70>
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	e7e1      	b.n	800d3c4 <TIM_Base_SetConfig+0x70>
 800d400:	2201      	movs	r2, #1
 800d402:	e7df      	b.n	800d3c4 <TIM_Base_SetConfig+0x70>
 800d404:	2201      	movs	r2, #1
 800d406:	e7dd      	b.n	800d3c4 <TIM_Base_SetConfig+0x70>
 800d408:	2201      	movs	r2, #1
 800d40a:	e7db      	b.n	800d3c4 <TIM_Base_SetConfig+0x70>
 800d40c:	2201      	movs	r2, #1
 800d40e:	e7d9      	b.n	800d3c4 <TIM_Base_SetConfig+0x70>
 800d410:	2201      	movs	r2, #1
 800d412:	e7d7      	b.n	800d3c4 <TIM_Base_SetConfig+0x70>
 800d414:	2201      	movs	r2, #1
 800d416:	e7d5      	b.n	800d3c4 <TIM_Base_SetConfig+0x70>
		TIMx->RCR = Structure->RepetitionCounter;
 800d418:	690b      	ldr	r3, [r1, #16]
 800d41a:	6303      	str	r3, [r0, #48]	; 0x30
 800d41c:	e7df      	b.n	800d3de <TIM_Base_SetConfig+0x8a>
 800d41e:	bf00      	nop
 800d420:	40010000 	.word	0x40010000

0800d424 <HAL_TIM_Base_Init>:
	if (htim == NULL) {
 800d424:	2800      	cmp	r0, #0
 800d426:	d053      	beq.n	800d4d0 <HAL_TIM_Base_Init+0xac>
{
 800d428:	b510      	push	{r4, lr}
 800d42a:	4604      	mov	r4, r0
	assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d42c:	6803      	ldr	r3, [r0, #0]
 800d42e:	4a29      	ldr	r2, [pc, #164]	; (800d4d4 <HAL_TIM_Base_Init+0xb0>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d01e      	beq.n	800d472 <HAL_TIM_Base_Init+0x4e>
 800d434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d438:	d01b      	beq.n	800d472 <HAL_TIM_Base_Init+0x4e>
 800d43a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d43e:	4293      	cmp	r3, r2
 800d440:	d017      	beq.n	800d472 <HAL_TIM_Base_Init+0x4e>
 800d442:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d446:	4293      	cmp	r3, r2
 800d448:	d013      	beq.n	800d472 <HAL_TIM_Base_Init+0x4e>
 800d44a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d44e:	4293      	cmp	r3, r2
 800d450:	d00f      	beq.n	800d472 <HAL_TIM_Base_Init+0x4e>
 800d452:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d456:	4293      	cmp	r3, r2
 800d458:	d00b      	beq.n	800d472 <HAL_TIM_Base_Init+0x4e>
 800d45a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d45e:	4293      	cmp	r3, r2
 800d460:	d007      	beq.n	800d472 <HAL_TIM_Base_Init+0x4e>
 800d462:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d466:	4293      	cmp	r3, r2
 800d468:	d003      	beq.n	800d472 <HAL_TIM_Base_Init+0x4e>
 800d46a:	21d6      	movs	r1, #214	; 0xd6
 800d46c:	481a      	ldr	r0, [pc, #104]	; (800d4d8 <HAL_TIM_Base_Init+0xb4>)
 800d46e:	f002 fb83 	bl	800fb78 <assert_failed>
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800d472:	68a3      	ldr	r3, [r4, #8]
 800d474:	b15b      	cbz	r3, 800d48e <HAL_TIM_Base_Init+0x6a>
 800d476:	2b10      	cmp	r3, #16
 800d478:	d009      	beq.n	800d48e <HAL_TIM_Base_Init+0x6a>
 800d47a:	2b20      	cmp	r3, #32
 800d47c:	d007      	beq.n	800d48e <HAL_TIM_Base_Init+0x6a>
 800d47e:	2b40      	cmp	r3, #64	; 0x40
 800d480:	d005      	beq.n	800d48e <HAL_TIM_Base_Init+0x6a>
 800d482:	2b60      	cmp	r3, #96	; 0x60
 800d484:	d003      	beq.n	800d48e <HAL_TIM_Base_Init+0x6a>
 800d486:	21d7      	movs	r1, #215	; 0xd7
 800d488:	4813      	ldr	r0, [pc, #76]	; (800d4d8 <HAL_TIM_Base_Init+0xb4>)
 800d48a:	f002 fb75 	bl	800fb78 <assert_failed>
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800d48e:	6923      	ldr	r3, [r4, #16]
 800d490:	b14b      	cbz	r3, 800d4a6 <HAL_TIM_Base_Init+0x82>
 800d492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d496:	d006      	beq.n	800d4a6 <HAL_TIM_Base_Init+0x82>
 800d498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d49c:	d003      	beq.n	800d4a6 <HAL_TIM_Base_Init+0x82>
 800d49e:	21d8      	movs	r1, #216	; 0xd8
 800d4a0:	480d      	ldr	r0, [pc, #52]	; (800d4d8 <HAL_TIM_Base_Init+0xb4>)
 800d4a2:	f002 fb69 	bl	800fb78 <assert_failed>
	if (htim->State == HAL_TIM_STATE_RESET) {
 800d4a6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800d4aa:	b15b      	cbz	r3, 800d4c4 <HAL_TIM_Base_Init+0xa0>
	htim->State = HAL_TIM_STATE_BUSY;
 800d4ac:	2302      	movs	r3, #2
 800d4ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d4b2:	1d21      	adds	r1, r4, #4
 800d4b4:	6820      	ldr	r0, [r4, #0]
 800d4b6:	f7ff ff4d 	bl	800d354 <TIM_Base_SetConfig>
	htim->State = HAL_TIM_STATE_READY;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return HAL_OK;
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	bd10      	pop	{r4, pc}
		htim->Lock = HAL_UNLOCKED;
 800d4c4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		HAL_TIM_Base_MspInit(htim);
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f002 fdc9 	bl	8010060 <HAL_TIM_Base_MspInit>
 800d4ce:	e7ed      	b.n	800d4ac <HAL_TIM_Base_Init+0x88>
		return HAL_ERROR;
 800d4d0:	2001      	movs	r0, #1
 800d4d2:	4770      	bx	lr
 800d4d4:	40010000 	.word	0x40010000
 800d4d8:	08021e98 	.word	0x08021e98

0800d4dc <HAL_TIM_PWM_Init>:
	if (htim == NULL) {
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	d056      	beq.n	800d58e <HAL_TIM_PWM_Init+0xb2>
{
 800d4e0:	b510      	push	{r4, lr}
 800d4e2:	4604      	mov	r4, r0
	assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d4e4:	6803      	ldr	r3, [r0, #0]
 800d4e6:	4a2b      	ldr	r2, [pc, #172]	; (800d594 <HAL_TIM_PWM_Init+0xb8>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d01f      	beq.n	800d52c <HAL_TIM_PWM_Init+0x50>
 800d4ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4f0:	d01c      	beq.n	800d52c <HAL_TIM_PWM_Init+0x50>
 800d4f2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d018      	beq.n	800d52c <HAL_TIM_PWM_Init+0x50>
 800d4fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d014      	beq.n	800d52c <HAL_TIM_PWM_Init+0x50>
 800d502:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d506:	4293      	cmp	r3, r2
 800d508:	d010      	beq.n	800d52c <HAL_TIM_PWM_Init+0x50>
 800d50a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d50e:	4293      	cmp	r3, r2
 800d510:	d00c      	beq.n	800d52c <HAL_TIM_PWM_Init+0x50>
 800d512:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d516:	4293      	cmp	r3, r2
 800d518:	d008      	beq.n	800d52c <HAL_TIM_PWM_Init+0x50>
 800d51a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d51e:	4293      	cmp	r3, r2
 800d520:	d004      	beq.n	800d52c <HAL_TIM_PWM_Init+0x50>
 800d522:	f240 31d6 	movw	r1, #982	; 0x3d6
 800d526:	481c      	ldr	r0, [pc, #112]	; (800d598 <HAL_TIM_PWM_Init+0xbc>)
 800d528:	f002 fb26 	bl	800fb78 <assert_failed>
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800d52c:	68a3      	ldr	r3, [r4, #8]
 800d52e:	b163      	cbz	r3, 800d54a <HAL_TIM_PWM_Init+0x6e>
 800d530:	2b10      	cmp	r3, #16
 800d532:	d00a      	beq.n	800d54a <HAL_TIM_PWM_Init+0x6e>
 800d534:	2b20      	cmp	r3, #32
 800d536:	d008      	beq.n	800d54a <HAL_TIM_PWM_Init+0x6e>
 800d538:	2b40      	cmp	r3, #64	; 0x40
 800d53a:	d006      	beq.n	800d54a <HAL_TIM_PWM_Init+0x6e>
 800d53c:	2b60      	cmp	r3, #96	; 0x60
 800d53e:	d004      	beq.n	800d54a <HAL_TIM_PWM_Init+0x6e>
 800d540:	f240 31d7 	movw	r1, #983	; 0x3d7
 800d544:	4814      	ldr	r0, [pc, #80]	; (800d598 <HAL_TIM_PWM_Init+0xbc>)
 800d546:	f002 fb17 	bl	800fb78 <assert_failed>
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800d54a:	6923      	ldr	r3, [r4, #16]
 800d54c:	b153      	cbz	r3, 800d564 <HAL_TIM_PWM_Init+0x88>
 800d54e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d552:	d007      	beq.n	800d564 <HAL_TIM_PWM_Init+0x88>
 800d554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d558:	d004      	beq.n	800d564 <HAL_TIM_PWM_Init+0x88>
 800d55a:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 800d55e:	480e      	ldr	r0, [pc, #56]	; (800d598 <HAL_TIM_PWM_Init+0xbc>)
 800d560:	f002 fb0a 	bl	800fb78 <assert_failed>
	if (htim->State == HAL_TIM_STATE_RESET) {
 800d564:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800d568:	b15b      	cbz	r3, 800d582 <HAL_TIM_PWM_Init+0xa6>
	htim->State = HAL_TIM_STATE_BUSY;
 800d56a:	2302      	movs	r3, #2
 800d56c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d570:	1d21      	adds	r1, r4, #4
 800d572:	6820      	ldr	r0, [r4, #0]
 800d574:	f7ff feee 	bl	800d354 <TIM_Base_SetConfig>
	htim->State = HAL_TIM_STATE_READY;
 800d578:	2301      	movs	r3, #1
 800d57a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return HAL_OK;
 800d57e:	2000      	movs	r0, #0
 800d580:	bd10      	pop	{r4, pc}
		htim->Lock = HAL_UNLOCKED;
 800d582:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		HAL_TIM_PWM_MspInit(htim);
 800d586:	4620      	mov	r0, r4
 800d588:	f7ff fb6a 	bl	800cc60 <HAL_TIM_PWM_MspInit>
 800d58c:	e7ed      	b.n	800d56a <HAL_TIM_PWM_Init+0x8e>
		return HAL_ERROR;
 800d58e:	2001      	movs	r0, #1
 800d590:	4770      	bx	lr
 800d592:	bf00      	nop
 800d594:	40010000 	.word	0x40010000
 800d598:	08021e98 	.word	0x08021e98

0800d59c <TIM_OC2_SetConfig>:
{
 800d59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a0:	4604      	mov	r4, r0
 800d5a2:	460f      	mov	r7, r1
	TIMx->CCER &= ~TIM_CCER_CC2E;
 800d5a4:	6a03      	ldr	r3, [r0, #32]
 800d5a6:	f023 0310 	bic.w	r3, r3, #16
 800d5aa:	6203      	str	r3, [r0, #32]
	tmpccer = TIMx->CCER;
 800d5ac:	6a05      	ldr	r5, [r0, #32]
	tmpcr2 = TIMx->CR2;
 800d5ae:	f8d0 8004 	ldr.w	r8, [r0, #4]
	tmpccmrx = TIMx->CCMR1;
 800d5b2:	6986      	ldr	r6, [r0, #24]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d5b4:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
	tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5b8:	680b      	ldr	r3, [r1, #0]
 800d5ba:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	tmpccer &= ~TIM_CCER_CC2P;
 800d5be:	f025 0520 	bic.w	r5, r5, #32
	tmpccer |= (OC_Config->OCPolarity << 4U);
 800d5c2:	688b      	ldr	r3, [r1, #8]
 800d5c4:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 800d5c8:	4b11      	ldr	r3, [pc, #68]	; (800d610 <TIM_OC2_SetConfig+0x74>)
 800d5ca:	4298      	cmp	r0, r3
 800d5cc:	d007      	beq.n	800d5de <TIM_OC2_SetConfig+0x42>
	TIMx->CR2 = tmpcr2;
 800d5ce:	f8c4 8004 	str.w	r8, [r4, #4]
	TIMx->CCMR1 = tmpccmrx;
 800d5d2:	61a6      	str	r6, [r4, #24]
	TIMx->CCR2 = OC_Config->Pulse;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	63a3      	str	r3, [r4, #56]	; 0x38
	TIMx->CCER = tmpccer;
 800d5d8:	6225      	str	r5, [r4, #32]
 800d5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d5de:	68cb      	ldr	r3, [r1, #12]
 800d5e0:	b133      	cbz	r3, 800d5f0 <TIM_OC2_SetConfig+0x54>
 800d5e2:	2b08      	cmp	r3, #8
 800d5e4:	d004      	beq.n	800d5f0 <TIM_OC2_SetConfig+0x54>
 800d5e6:	f241 1164 	movw	r1, #4452	; 0x1164
 800d5ea:	480a      	ldr	r0, [pc, #40]	; (800d614 <TIM_OC2_SetConfig+0x78>)
 800d5ec:	f002 fac4 	bl	800fb78 <assert_failed>
		tmpccer &= ~TIM_CCER_CC2NP;
 800d5f0:	f025 0580 	bic.w	r5, r5, #128	; 0x80
		tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
		tmpccer &= ~TIM_CCER_CC2NE;
 800d5fa:	f025 0540 	bic.w	r5, r5, #64	; 0x40
		tmpcr2 &= ~TIM_CR2_OIS2N;
 800d5fe:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
		tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
 800d60e:	e7de      	b.n	800d5ce <TIM_OC2_SetConfig+0x32>
 800d610:	40010000 	.word	0x40010000
 800d614:	08021e98 	.word	0x08021e98

0800d618 <HAL_TIM_PWM_ConfigChannel>:
	__HAL_LOCK(htim);
 800d618:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	f000 8107 	beq.w	800d830 <HAL_TIM_PWM_ConfigChannel+0x218>
{
 800d622:	b570      	push	{r4, r5, r6, lr}
 800d624:	4616      	mov	r6, r2
 800d626:	460d      	mov	r5, r1
 800d628:	4604      	mov	r4, r0
	__HAL_LOCK(htim);
 800d62a:	2301      	movs	r3, #1
 800d62c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	assert_param(IS_TIM_CHANNELS(Channel));
 800d630:	b162      	cbz	r2, 800d64c <HAL_TIM_PWM_ConfigChannel+0x34>
 800d632:	2a04      	cmp	r2, #4
 800d634:	d00a      	beq.n	800d64c <HAL_TIM_PWM_ConfigChannel+0x34>
 800d636:	2a08      	cmp	r2, #8
 800d638:	d008      	beq.n	800d64c <HAL_TIM_PWM_ConfigChannel+0x34>
 800d63a:	2a0c      	cmp	r2, #12
 800d63c:	d006      	beq.n	800d64c <HAL_TIM_PWM_ConfigChannel+0x34>
 800d63e:	2a18      	cmp	r2, #24
 800d640:	d004      	beq.n	800d64c <HAL_TIM_PWM_ConfigChannel+0x34>
 800d642:	f640 31d4 	movw	r1, #3028	; 0xbd4
 800d646:	487b      	ldr	r0, [pc, #492]	; (800d834 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800d648:	f002 fa96 	bl	800fb78 <assert_failed>
	assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800d64c:	682b      	ldr	r3, [r5, #0]
 800d64e:	2b60      	cmp	r3, #96	; 0x60
 800d650:	d006      	beq.n	800d660 <HAL_TIM_PWM_ConfigChannel+0x48>
 800d652:	2b70      	cmp	r3, #112	; 0x70
 800d654:	d004      	beq.n	800d660 <HAL_TIM_PWM_ConfigChannel+0x48>
 800d656:	f640 31d5 	movw	r1, #3029	; 0xbd5
 800d65a:	4876      	ldr	r0, [pc, #472]	; (800d834 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800d65c:	f002 fa8c 	bl	800fb78 <assert_failed>
	assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800d660:	68ab      	ldr	r3, [r5, #8]
 800d662:	b133      	cbz	r3, 800d672 <HAL_TIM_PWM_ConfigChannel+0x5a>
 800d664:	2b02      	cmp	r3, #2
 800d666:	d004      	beq.n	800d672 <HAL_TIM_PWM_ConfigChannel+0x5a>
 800d668:	f640 31d6 	movw	r1, #3030	; 0xbd6
 800d66c:	4871      	ldr	r0, [pc, #452]	; (800d834 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800d66e:	f002 fa83 	bl	800fb78 <assert_failed>
	assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800d672:	692b      	ldr	r3, [r5, #16]
 800d674:	b133      	cbz	r3, 800d684 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800d676:	2b04      	cmp	r3, #4
 800d678:	d004      	beq.n	800d684 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800d67a:	f640 31d7 	movw	r1, #3031	; 0xbd7
 800d67e:	486d      	ldr	r0, [pc, #436]	; (800d834 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800d680:	f002 fa7a 	bl	800fb78 <assert_failed>
	htim->State = HAL_TIM_STATE_BUSY;
 800d684:	2302      	movs	r3, #2
 800d686:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	switch (Channel) {
 800d68a:	2e0c      	cmp	r6, #12
 800d68c:	d83f      	bhi.n	800d70e <HAL_TIM_PWM_ConfigChannel+0xf6>
 800d68e:	e8df f006 	tbb	[pc, r6]
 800d692:	3e07      	.short	0x3e07
 800d694:	3e453e3e 	.word	0x3e453e3e
 800d698:	3e763e3e 	.word	0x3e763e3e
 800d69c:	3e3e      	.short	0x3e3e
 800d69e:	a2          	.byte	0xa2
 800d69f:	00          	.byte	0x00
		assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d6a0:	6823      	ldr	r3, [r4, #0]
 800d6a2:	4a65      	ldr	r2, [pc, #404]	; (800d838 <HAL_TIM_PWM_ConfigChannel+0x220>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d01f      	beq.n	800d6e8 <HAL_TIM_PWM_ConfigChannel+0xd0>
 800d6a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6ac:	d01c      	beq.n	800d6e8 <HAL_TIM_PWM_ConfigChannel+0xd0>
 800d6ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d018      	beq.n	800d6e8 <HAL_TIM_PWM_ConfigChannel+0xd0>
 800d6b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d014      	beq.n	800d6e8 <HAL_TIM_PWM_ConfigChannel+0xd0>
 800d6be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d010      	beq.n	800d6e8 <HAL_TIM_PWM_ConfigChannel+0xd0>
 800d6c6:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d00c      	beq.n	800d6e8 <HAL_TIM_PWM_ConfigChannel+0xd0>
 800d6ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d008      	beq.n	800d6e8 <HAL_TIM_PWM_ConfigChannel+0xd0>
 800d6d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d004      	beq.n	800d6e8 <HAL_TIM_PWM_ConfigChannel+0xd0>
 800d6de:	f640 31de 	movw	r1, #3038	; 0xbde
 800d6e2:	4854      	ldr	r0, [pc, #336]	; (800d834 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800d6e4:	f002 fa48 	bl	800fb78 <assert_failed>
		TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d6e8:	4629      	mov	r1, r5
 800d6ea:	6820      	ldr	r0, [r4, #0]
 800d6ec:	f7ff f992 	bl	800ca14 <TIM_OC1_SetConfig>
		htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d6f0:	6822      	ldr	r2, [r4, #0]
 800d6f2:	6993      	ldr	r3, [r2, #24]
 800d6f4:	f043 0308 	orr.w	r3, r3, #8
 800d6f8:	6193      	str	r3, [r2, #24]
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d6fa:	6822      	ldr	r2, [r4, #0]
 800d6fc:	6993      	ldr	r3, [r2, #24]
 800d6fe:	f023 0304 	bic.w	r3, r3, #4
 800d702:	6193      	str	r3, [r2, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d704:	6822      	ldr	r2, [r4, #0]
 800d706:	6993      	ldr	r3, [r2, #24]
 800d708:	6929      	ldr	r1, [r5, #16]
 800d70a:	430b      	orrs	r3, r1
 800d70c:	6193      	str	r3, [r2, #24]
	htim->State = HAL_TIM_STATE_READY;
 800d70e:	2301      	movs	r3, #1
 800d710:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	__HAL_UNLOCK(htim);
 800d714:	2000      	movs	r0, #0
 800d716:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	return HAL_OK;
 800d71a:	bd70      	pop	{r4, r5, r6, pc}
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d71c:	6823      	ldr	r3, [r4, #0]
 800d71e:	4a46      	ldr	r2, [pc, #280]	; (800d838 <HAL_TIM_PWM_ConfigChannel+0x220>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d017      	beq.n	800d754 <HAL_TIM_PWM_ConfigChannel+0x13c>
 800d724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d728:	d014      	beq.n	800d754 <HAL_TIM_PWM_ConfigChannel+0x13c>
 800d72a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d72e:	4293      	cmp	r3, r2
 800d730:	d010      	beq.n	800d754 <HAL_TIM_PWM_ConfigChannel+0x13c>
 800d732:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d736:	4293      	cmp	r3, r2
 800d738:	d00c      	beq.n	800d754 <HAL_TIM_PWM_ConfigChannel+0x13c>
 800d73a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d73e:	4293      	cmp	r3, r2
 800d740:	d008      	beq.n	800d754 <HAL_TIM_PWM_ConfigChannel+0x13c>
 800d742:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d746:	4293      	cmp	r3, r2
 800d748:	d004      	beq.n	800d754 <HAL_TIM_PWM_ConfigChannel+0x13c>
 800d74a:	f640 31ed 	movw	r1, #3053	; 0xbed
 800d74e:	4839      	ldr	r0, [pc, #228]	; (800d834 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800d750:	f002 fa12 	bl	800fb78 <assert_failed>
		TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d754:	4629      	mov	r1, r5
 800d756:	6820      	ldr	r0, [r4, #0]
 800d758:	f7ff ff20 	bl	800d59c <TIM_OC2_SetConfig>
		htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d75c:	6822      	ldr	r2, [r4, #0]
 800d75e:	6993      	ldr	r3, [r2, #24]
 800d760:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d764:	6193      	str	r3, [r2, #24]
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d766:	6822      	ldr	r2, [r4, #0]
 800d768:	6993      	ldr	r3, [r2, #24]
 800d76a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d76e:	6193      	str	r3, [r2, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d770:	6822      	ldr	r2, [r4, #0]
 800d772:	6993      	ldr	r3, [r2, #24]
 800d774:	6929      	ldr	r1, [r5, #16]
 800d776:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d77a:	6193      	str	r3, [r2, #24]
	break;
 800d77c:	e7c7      	b.n	800d70e <HAL_TIM_PWM_ConfigChannel+0xf6>
		assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d77e:	6823      	ldr	r3, [r4, #0]
 800d780:	4a2d      	ldr	r2, [pc, #180]	; (800d838 <HAL_TIM_PWM_ConfigChannel+0x220>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d013      	beq.n	800d7ae <HAL_TIM_PWM_ConfigChannel+0x196>
 800d786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d78a:	d010      	beq.n	800d7ae <HAL_TIM_PWM_ConfigChannel+0x196>
 800d78c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d790:	4293      	cmp	r3, r2
 800d792:	d00c      	beq.n	800d7ae <HAL_TIM_PWM_ConfigChannel+0x196>
 800d794:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d798:	4293      	cmp	r3, r2
 800d79a:	d008      	beq.n	800d7ae <HAL_TIM_PWM_ConfigChannel+0x196>
 800d79c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d004      	beq.n	800d7ae <HAL_TIM_PWM_ConfigChannel+0x196>
 800d7a4:	f640 31fc 	movw	r1, #3068	; 0xbfc
 800d7a8:	4822      	ldr	r0, [pc, #136]	; (800d834 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800d7aa:	f002 f9e5 	bl	800fb78 <assert_failed>
		TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d7ae:	4629      	mov	r1, r5
 800d7b0:	6820      	ldr	r0, [r4, #0]
 800d7b2:	f7ff f995 	bl	800cae0 <TIM_OC3_SetConfig>
		htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d7b6:	6822      	ldr	r2, [r4, #0]
 800d7b8:	69d3      	ldr	r3, [r2, #28]
 800d7ba:	f043 0308 	orr.w	r3, r3, #8
 800d7be:	61d3      	str	r3, [r2, #28]
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d7c0:	6822      	ldr	r2, [r4, #0]
 800d7c2:	69d3      	ldr	r3, [r2, #28]
 800d7c4:	f023 0304 	bic.w	r3, r3, #4
 800d7c8:	61d3      	str	r3, [r2, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d7ca:	6822      	ldr	r2, [r4, #0]
 800d7cc:	69d3      	ldr	r3, [r2, #28]
 800d7ce:	6929      	ldr	r1, [r5, #16]
 800d7d0:	430b      	orrs	r3, r1
 800d7d2:	61d3      	str	r3, [r2, #28]
	break;
 800d7d4:	e79b      	b.n	800d70e <HAL_TIM_PWM_ConfigChannel+0xf6>
		assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d7d6:	6823      	ldr	r3, [r4, #0]
 800d7d8:	4a17      	ldr	r2, [pc, #92]	; (800d838 <HAL_TIM_PWM_ConfigChannel+0x220>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d013      	beq.n	800d806 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800d7de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7e2:	d010      	beq.n	800d806 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800d7e4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d00c      	beq.n	800d806 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800d7ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d008      	beq.n	800d806 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800d7f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d004      	beq.n	800d806 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800d7fc:	f640 410b 	movw	r1, #3083	; 0xc0b
 800d800:	480c      	ldr	r0, [pc, #48]	; (800d834 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800d802:	f002 f9b9 	bl	800fb78 <assert_failed>
		TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d806:	4629      	mov	r1, r5
 800d808:	6820      	ldr	r0, [r4, #0]
 800d80a:	f7ff f9bd 	bl	800cb88 <TIM_OC4_SetConfig>
		htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d80e:	6822      	ldr	r2, [r4, #0]
 800d810:	69d3      	ldr	r3, [r2, #28]
 800d812:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d816:	61d3      	str	r3, [r2, #28]
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d818:	6822      	ldr	r2, [r4, #0]
 800d81a:	69d3      	ldr	r3, [r2, #28]
 800d81c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d820:	61d3      	str	r3, [r2, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d822:	6822      	ldr	r2, [r4, #0]
 800d824:	69d3      	ldr	r3, [r2, #28]
 800d826:	6929      	ldr	r1, [r5, #16]
 800d828:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d82c:	61d3      	str	r3, [r2, #28]
	break;
 800d82e:	e76e      	b.n	800d70e <HAL_TIM_PWM_ConfigChannel+0xf6>
	__HAL_LOCK(htim);
 800d830:	2002      	movs	r0, #2
 800d832:	4770      	bx	lr
 800d834:	08021e98 	.word	0x08021e98
 800d838:	40010000 	.word	0x40010000

0800d83c <TIM_CCxChannelCmd>:
{
 800d83c:	b570      	push	{r4, r5, r6, lr}
 800d83e:	4604      	mov	r4, r0
 800d840:	460d      	mov	r5, r1
 800d842:	4616      	mov	r6, r2
	assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800d844:	4b1e      	ldr	r3, [pc, #120]	; (800d8c0 <TIM_CCxChannelCmd+0x84>)
 800d846:	4298      	cmp	r0, r3
 800d848:	d01f      	beq.n	800d88a <TIM_CCxChannelCmd+0x4e>
 800d84a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d84e:	d01c      	beq.n	800d88a <TIM_CCxChannelCmd+0x4e>
 800d850:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 800d854:	4298      	cmp	r0, r3
 800d856:	d018      	beq.n	800d88a <TIM_CCxChannelCmd+0x4e>
 800d858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d85c:	4298      	cmp	r0, r3
 800d85e:	d014      	beq.n	800d88a <TIM_CCxChannelCmd+0x4e>
 800d860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d864:	4298      	cmp	r0, r3
 800d866:	d010      	beq.n	800d88a <TIM_CCxChannelCmd+0x4e>
 800d868:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 800d86c:	4298      	cmp	r0, r3
 800d86e:	d00c      	beq.n	800d88a <TIM_CCxChannelCmd+0x4e>
 800d870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d874:	4298      	cmp	r0, r3
 800d876:	d008      	beq.n	800d88a <TIM_CCxChannelCmd+0x4e>
 800d878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d87c:	4298      	cmp	r0, r3
 800d87e:	d004      	beq.n	800d88a <TIM_CCxChannelCmd+0x4e>
 800d880:	f241 11d9 	movw	r1, #4569	; 0x11d9
 800d884:	480f      	ldr	r0, [pc, #60]	; (800d8c4 <TIM_CCxChannelCmd+0x88>)
 800d886:	f002 f977 	bl	800fb78 <assert_failed>
	assert_param(IS_TIM_CHANNELS(Channel));
 800d88a:	b165      	cbz	r5, 800d8a6 <TIM_CCxChannelCmd+0x6a>
 800d88c:	2d04      	cmp	r5, #4
 800d88e:	d00a      	beq.n	800d8a6 <TIM_CCxChannelCmd+0x6a>
 800d890:	2d08      	cmp	r5, #8
 800d892:	d008      	beq.n	800d8a6 <TIM_CCxChannelCmd+0x6a>
 800d894:	2d0c      	cmp	r5, #12
 800d896:	d006      	beq.n	800d8a6 <TIM_CCxChannelCmd+0x6a>
 800d898:	2d18      	cmp	r5, #24
 800d89a:	d004      	beq.n	800d8a6 <TIM_CCxChannelCmd+0x6a>
 800d89c:	f241 11da 	movw	r1, #4570	; 0x11da
 800d8a0:	4808      	ldr	r0, [pc, #32]	; (800d8c4 <TIM_CCxChannelCmd+0x88>)
 800d8a2:	f002 f969 	bl	800fb78 <assert_failed>
	tmp = TIM_CCER_CC1E << Channel;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	fa03 f205 	lsl.w	r2, r3, r5
	TIMx->CCER &= ~tmp;
 800d8ac:	6a23      	ldr	r3, [r4, #32]
 800d8ae:	ea23 0302 	bic.w	r3, r3, r2
 800d8b2:	6223      	str	r3, [r4, #32]
	TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800d8b4:	6a23      	ldr	r3, [r4, #32]
 800d8b6:	fa06 f505 	lsl.w	r5, r6, r5
 800d8ba:	431d      	orrs	r5, r3
 800d8bc:	6225      	str	r5, [r4, #32]
 800d8be:	bd70      	pop	{r4, r5, r6, pc}
 800d8c0:	40010000 	.word	0x40010000
 800d8c4:	08021e98 	.word	0x08021e98

0800d8c8 <HAL_TIM_PWM_Start>:
{
 800d8c8:	b538      	push	{r3, r4, r5, lr}
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	460d      	mov	r5, r1
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800d8ce:	6803      	ldr	r3, [r0, #0]
 800d8d0:	4a24      	ldr	r2, [pc, #144]	; (800d964 <HAL_TIM_PWM_Start+0x9c>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d02c      	beq.n	800d930 <HAL_TIM_PWM_Start+0x68>
 800d8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8da:	d029      	beq.n	800d930 <HAL_TIM_PWM_Start+0x68>
 800d8dc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d025      	beq.n	800d930 <HAL_TIM_PWM_Start+0x68>
 800d8e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d021      	beq.n	800d930 <HAL_TIM_PWM_Start+0x68>
 800d8ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d01d      	beq.n	800d930 <HAL_TIM_PWM_Start+0x68>
 800d8f4:	4a1c      	ldr	r2, [pc, #112]	; (800d968 <HAL_TIM_PWM_Start+0xa0>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d023      	beq.n	800d942 <HAL_TIM_PWM_Start+0x7a>
 800d8fa:	4a1c      	ldr	r2, [pc, #112]	; (800d96c <HAL_TIM_PWM_Start+0xa4>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d025      	beq.n	800d94c <HAL_TIM_PWM_Start+0x84>
 800d900:	4a1b      	ldr	r2, [pc, #108]	; (800d970 <HAL_TIM_PWM_Start+0xa8>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d025      	beq.n	800d952 <HAL_TIM_PWM_Start+0x8a>
 800d906:	f240 4136 	movw	r1, #1078	; 0x436
 800d90a:	481a      	ldr	r0, [pc, #104]	; (800d974 <HAL_TIM_PWM_Start+0xac>)
 800d90c:	f002 f934 	bl	800fb78 <assert_failed>
	TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d910:	2201      	movs	r2, #1
 800d912:	4629      	mov	r1, r5
 800d914:	6820      	ldr	r0, [r4, #0]
 800d916:	f7ff ff91 	bl	800d83c <TIM_CCxChannelCmd>
	if (IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET) {
 800d91a:	6823      	ldr	r3, [r4, #0]
 800d91c:	4a11      	ldr	r2, [pc, #68]	; (800d964 <HAL_TIM_PWM_Start+0x9c>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d01a      	beq.n	800d958 <HAL_TIM_PWM_Start+0x90>
	__HAL_TIM_ENABLE(htim);
 800d922:	6822      	ldr	r2, [r4, #0]
 800d924:	6813      	ldr	r3, [r2, #0]
 800d926:	f043 0301 	orr.w	r3, r3, #1
 800d92a:	6013      	str	r3, [r2, #0]
}
 800d92c:	2000      	movs	r0, #0
 800d92e:	bd38      	pop	{r3, r4, r5, pc}
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800d930:	2d00      	cmp	r5, #0
 800d932:	d0ed      	beq.n	800d910 <HAL_TIM_PWM_Start+0x48>
 800d934:	2d04      	cmp	r5, #4
 800d936:	d0eb      	beq.n	800d910 <HAL_TIM_PWM_Start+0x48>
 800d938:	2d08      	cmp	r5, #8
 800d93a:	d0e9      	beq.n	800d910 <HAL_TIM_PWM_Start+0x48>
 800d93c:	2d0c      	cmp	r5, #12
 800d93e:	d1d9      	bne.n	800d8f4 <HAL_TIM_PWM_Start+0x2c>
 800d940:	e7e6      	b.n	800d910 <HAL_TIM_PWM_Start+0x48>
 800d942:	2d00      	cmp	r5, #0
 800d944:	d0e4      	beq.n	800d910 <HAL_TIM_PWM_Start+0x48>
 800d946:	2d04      	cmp	r5, #4
 800d948:	d1d7      	bne.n	800d8fa <HAL_TIM_PWM_Start+0x32>
 800d94a:	e7e1      	b.n	800d910 <HAL_TIM_PWM_Start+0x48>
 800d94c:	2d00      	cmp	r5, #0
 800d94e:	d0df      	beq.n	800d910 <HAL_TIM_PWM_Start+0x48>
 800d950:	e7d6      	b.n	800d900 <HAL_TIM_PWM_Start+0x38>
 800d952:	2d00      	cmp	r5, #0
 800d954:	d0dc      	beq.n	800d910 <HAL_TIM_PWM_Start+0x48>
 800d956:	e7d6      	b.n	800d906 <HAL_TIM_PWM_Start+0x3e>
		__HAL_TIM_MOE_ENABLE(htim);
 800d958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d95a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d95e:	645a      	str	r2, [r3, #68]	; 0x44
 800d960:	e7df      	b.n	800d922 <HAL_TIM_PWM_Start+0x5a>
 800d962:	bf00      	nop
 800d964:	40010000 	.word	0x40010000
 800d968:	40014000 	.word	0x40014000
 800d96c:	40014400 	.word	0x40014400
 800d970:	40014800 	.word	0x40014800
 800d974:	08021e98 	.word	0x08021e98

0800d978 <HAL_TIM_PWM_Stop>:
{
 800d978:	b538      	push	{r3, r4, r5, lr}
 800d97a:	4604      	mov	r4, r0
 800d97c:	460d      	mov	r5, r1
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800d97e:	6803      	ldr	r3, [r0, #0]
 800d980:	4a2f      	ldr	r2, [pc, #188]	; (800da40 <HAL_TIM_PWM_Stop+0xc8>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d039      	beq.n	800d9fa <HAL_TIM_PWM_Stop+0x82>
 800d986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d98a:	d036      	beq.n	800d9fa <HAL_TIM_PWM_Stop+0x82>
 800d98c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d990:	4293      	cmp	r3, r2
 800d992:	d032      	beq.n	800d9fa <HAL_TIM_PWM_Stop+0x82>
 800d994:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d998:	4293      	cmp	r3, r2
 800d99a:	d02e      	beq.n	800d9fa <HAL_TIM_PWM_Stop+0x82>
 800d99c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d02a      	beq.n	800d9fa <HAL_TIM_PWM_Stop+0x82>
 800d9a4:	4a27      	ldr	r2, [pc, #156]	; (800da44 <HAL_TIM_PWM_Stop+0xcc>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d030      	beq.n	800da0c <HAL_TIM_PWM_Stop+0x94>
 800d9aa:	4a27      	ldr	r2, [pc, #156]	; (800da48 <HAL_TIM_PWM_Stop+0xd0>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d032      	beq.n	800da16 <HAL_TIM_PWM_Stop+0x9e>
 800d9b0:	4a26      	ldr	r2, [pc, #152]	; (800da4c <HAL_TIM_PWM_Stop+0xd4>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d032      	beq.n	800da1c <HAL_TIM_PWM_Stop+0xa4>
 800d9b6:	f240 4156 	movw	r1, #1110	; 0x456
 800d9ba:	4825      	ldr	r0, [pc, #148]	; (800da50 <HAL_TIM_PWM_Stop+0xd8>)
 800d9bc:	f002 f8dc 	bl	800fb78 <assert_failed>
	TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	4629      	mov	r1, r5
 800d9c4:	6820      	ldr	r0, [r4, #0]
 800d9c6:	f7ff ff39 	bl	800d83c <TIM_CCxChannelCmd>
	if (IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET) {
 800d9ca:	6823      	ldr	r3, [r4, #0]
 800d9cc:	4a1c      	ldr	r2, [pc, #112]	; (800da40 <HAL_TIM_PWM_Stop+0xc8>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d027      	beq.n	800da22 <HAL_TIM_PWM_Stop+0xaa>
	__HAL_TIM_DISABLE(htim);
 800d9d2:	6823      	ldr	r3, [r4, #0]
 800d9d4:	6a19      	ldr	r1, [r3, #32]
 800d9d6:	f241 1211 	movw	r2, #4369	; 0x1111
 800d9da:	4211      	tst	r1, r2
 800d9dc:	d108      	bne.n	800d9f0 <HAL_TIM_PWM_Stop+0x78>
 800d9de:	6a19      	ldr	r1, [r3, #32]
 800d9e0:	f240 4244 	movw	r2, #1092	; 0x444
 800d9e4:	4211      	tst	r1, r2
 800d9e6:	d103      	bne.n	800d9f0 <HAL_TIM_PWM_Stop+0x78>
 800d9e8:	681a      	ldr	r2, [r3, #0]
 800d9ea:	f022 0201 	bic.w	r2, r2, #1
 800d9ee:	601a      	str	r2, [r3, #0]
	htim->State = HAL_TIM_STATE_READY;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 800d9f6:	2000      	movs	r0, #0
 800d9f8:	bd38      	pop	{r3, r4, r5, pc}
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800d9fa:	2d00      	cmp	r5, #0
 800d9fc:	d0e0      	beq.n	800d9c0 <HAL_TIM_PWM_Stop+0x48>
 800d9fe:	2d04      	cmp	r5, #4
 800da00:	d0de      	beq.n	800d9c0 <HAL_TIM_PWM_Stop+0x48>
 800da02:	2d08      	cmp	r5, #8
 800da04:	d0dc      	beq.n	800d9c0 <HAL_TIM_PWM_Stop+0x48>
 800da06:	2d0c      	cmp	r5, #12
 800da08:	d1cc      	bne.n	800d9a4 <HAL_TIM_PWM_Stop+0x2c>
 800da0a:	e7d9      	b.n	800d9c0 <HAL_TIM_PWM_Stop+0x48>
 800da0c:	2d00      	cmp	r5, #0
 800da0e:	d0d7      	beq.n	800d9c0 <HAL_TIM_PWM_Stop+0x48>
 800da10:	2d04      	cmp	r5, #4
 800da12:	d1ca      	bne.n	800d9aa <HAL_TIM_PWM_Stop+0x32>
 800da14:	e7d4      	b.n	800d9c0 <HAL_TIM_PWM_Stop+0x48>
 800da16:	2d00      	cmp	r5, #0
 800da18:	d0d2      	beq.n	800d9c0 <HAL_TIM_PWM_Stop+0x48>
 800da1a:	e7c9      	b.n	800d9b0 <HAL_TIM_PWM_Stop+0x38>
 800da1c:	2d00      	cmp	r5, #0
 800da1e:	d0cf      	beq.n	800d9c0 <HAL_TIM_PWM_Stop+0x48>
 800da20:	e7c9      	b.n	800d9b6 <HAL_TIM_PWM_Stop+0x3e>
		__HAL_TIM_MOE_DISABLE(htim);
 800da22:	6a19      	ldr	r1, [r3, #32]
 800da24:	f241 1211 	movw	r2, #4369	; 0x1111
 800da28:	4211      	tst	r1, r2
 800da2a:	d1d2      	bne.n	800d9d2 <HAL_TIM_PWM_Stop+0x5a>
 800da2c:	6a19      	ldr	r1, [r3, #32]
 800da2e:	f240 4244 	movw	r2, #1092	; 0x444
 800da32:	4211      	tst	r1, r2
 800da34:	d1cd      	bne.n	800d9d2 <HAL_TIM_PWM_Stop+0x5a>
 800da36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800da3c:	645a      	str	r2, [r3, #68]	; 0x44
 800da3e:	e7c8      	b.n	800d9d2 <HAL_TIM_PWM_Stop+0x5a>
 800da40:	40010000 	.word	0x40010000
 800da44:	40014000 	.word	0x40014000
 800da48:	40014400 	.word	0x40014400
 800da4c:	40014800 	.word	0x40014800
 800da50:	08021e98 	.word	0x08021e98

0800da54 <HAL_TIMEx_MasterConfigSynchronization>:
 *         contains the selected trigger output (TRGO) and the Master/Slave
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800da54:	b538      	push	{r3, r4, r5, lr}
 800da56:	4604      	mov	r4, r0
 800da58:	460d      	mov	r5, r1
	/* Check the parameters */
	assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800da5a:	6803      	ldr	r3, [r0, #0]
 800da5c:	4a2d      	ldr	r2, [pc, #180]	; (800db14 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d013      	beq.n	800da8a <HAL_TIMEx_MasterConfigSynchronization+0x36>
 800da62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da66:	d010      	beq.n	800da8a <HAL_TIMEx_MasterConfigSynchronization+0x36>
 800da68:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d00c      	beq.n	800da8a <HAL_TIMEx_MasterConfigSynchronization+0x36>
 800da70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800da74:	4293      	cmp	r3, r2
 800da76:	d008      	beq.n	800da8a <HAL_TIMEx_MasterConfigSynchronization+0x36>
 800da78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d004      	beq.n	800da8a <HAL_TIMEx_MasterConfigSynchronization+0x36>
 800da80:	f240 6129 	movw	r1, #1577	; 0x629
 800da84:	4824      	ldr	r0, [pc, #144]	; (800db18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800da86:	f002 f877 	bl	800fb78 <assert_failed>
	assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800da8a:	682b      	ldr	r3, [r5, #0]
 800da8c:	b193      	cbz	r3, 800dab4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800da8e:	2b10      	cmp	r3, #16
 800da90:	d010      	beq.n	800dab4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800da92:	2b20      	cmp	r3, #32
 800da94:	d00e      	beq.n	800dab4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800da96:	2b30      	cmp	r3, #48	; 0x30
 800da98:	d00c      	beq.n	800dab4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800da9a:	2b40      	cmp	r3, #64	; 0x40
 800da9c:	d00a      	beq.n	800dab4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800da9e:	2b50      	cmp	r3, #80	; 0x50
 800daa0:	d008      	beq.n	800dab4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800daa2:	2b60      	cmp	r3, #96	; 0x60
 800daa4:	d006      	beq.n	800dab4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800daa6:	2b70      	cmp	r3, #112	; 0x70
 800daa8:	d004      	beq.n	800dab4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800daaa:	f240 612a 	movw	r1, #1578	; 0x62a
 800daae:	481a      	ldr	r0, [pc, #104]	; (800db18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800dab0:	f002 f862 	bl	800fb78 <assert_failed>
	assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800dab4:	686b      	ldr	r3, [r5, #4]
 800dab6:	2b80      	cmp	r3, #128	; 0x80
 800dab8:	d000      	beq.n	800dabc <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800daba:	bb1b      	cbnz	r3, 800db04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>

	__HAL_LOCK(htim);
 800dabc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d025      	beq.n	800db10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 800dac4:	2201      	movs	r2, #1
 800dac6:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38

	htim->State = HAL_TIM_STATE_BUSY;
 800daca:	2302      	movs	r3, #2
 800dacc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

	/* Reset the MMS Bits */
	htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800dad0:	6821      	ldr	r1, [r4, #0]
 800dad2:	684b      	ldr	r3, [r1, #4]
 800dad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dad8:	604b      	str	r3, [r1, #4]
	/* Select the TRGO source */
	htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800dada:	6821      	ldr	r1, [r4, #0]
 800dadc:	684b      	ldr	r3, [r1, #4]
 800dade:	6828      	ldr	r0, [r5, #0]
 800dae0:	4303      	orrs	r3, r0
 800dae2:	604b      	str	r3, [r1, #4]

	/* Reset the MSM Bit */
	htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800dae4:	6821      	ldr	r1, [r4, #0]
 800dae6:	688b      	ldr	r3, [r1, #8]
 800dae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800daec:	608b      	str	r3, [r1, #8]
	/* Set or Reset the MSM Bit */
	htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800daee:	6821      	ldr	r1, [r4, #0]
 800daf0:	688b      	ldr	r3, [r1, #8]
 800daf2:	6868      	ldr	r0, [r5, #4]
 800daf4:	4303      	orrs	r3, r0
 800daf6:	608b      	str	r3, [r1, #8]

	htim->State = HAL_TIM_STATE_READY;
 800daf8:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39

	__HAL_UNLOCK(htim);
 800dafc:	2000      	movs	r0, #0
 800dafe:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

	return HAL_OK;
 800db02:	bd38      	pop	{r3, r4, r5, pc}
	assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800db04:	f240 612b 	movw	r1, #1579	; 0x62b
 800db08:	4803      	ldr	r0, [pc, #12]	; (800db18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800db0a:	f002 f835 	bl	800fb78 <assert_failed>
 800db0e:	e7d5      	b.n	800dabc <HAL_TIMEx_MasterConfigSynchronization+0x68>
	__HAL_LOCK(htim);
 800db10:	2002      	movs	r0, #2
}
 800db12:	bd38      	pop	{r3, r4, r5, pc}
 800db14:	40010000 	.word	0x40010000
 800db18:	08021ed0 	.word	0x08021ed0

0800db1c <HAL_TIMEx_CommutationCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800db1c:	4770      	bx	lr

0800db1e <HAL_TIMEx_BreakCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db1e:	4770      	bx	lr

0800db20 <UART_EndTxTransfer>:
 * @retval None
 */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
	/* Disable TXEIE and TCIE interrupts */
	CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800db20:	6802      	ldr	r2, [r0, #0]
 800db22:	68d3      	ldr	r3, [r2, #12]
 800db24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800db28:	60d3      	str	r3, [r2, #12]

	/* At end of Tx process, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 800db2a:	2320      	movs	r3, #32
 800db2c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800db30:	4770      	bx	lr

0800db32 <UART_EndRxTransfer>:
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db32:	6802      	ldr	r2, [r0, #0]
 800db34:	68d3      	ldr	r3, [r2, #12]
 800db36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800db3a:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db3c:	6802      	ldr	r2, [r0, #0]
 800db3e:	6953      	ldr	r3, [r2, #20]
 800db40:	f023 0301 	bic.w	r3, r3, #1
 800db44:	6153      	str	r3, [r2, #20]

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 800db46:	2320      	movs	r3, #32
 800db48:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800db4c:	4770      	bx	lr

0800db4e <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
	uint16_t* tmp;

	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 800db4e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800db52:	b2db      	uxtb	r3, r3
 800db54:	2b21      	cmp	r3, #33	; 0x21
 800db56:	d001      	beq.n	800db5c <UART_Transmit_IT+0xe>
			/* Enable the UART Transmit Complete Interrupt */
			SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
		}
		return HAL_OK;
	}else {
		return HAL_BUSY;
 800db58:	2002      	movs	r0, #2
 800db5a:	4770      	bx	lr
		if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 800db5c:	6883      	ldr	r3, [r0, #8]
 800db5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db62:	d017      	beq.n	800db94 <UART_Transmit_IT+0x46>
			huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800db64:	6802      	ldr	r2, [r0, #0]
 800db66:	6a03      	ldr	r3, [r0, #32]
 800db68:	1c59      	adds	r1, r3, #1
 800db6a:	6201      	str	r1, [r0, #32]
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	6053      	str	r3, [r2, #4]
		if (--huart->TxXferCount == 0U) {
 800db70:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800db72:	b29b      	uxth	r3, r3
 800db74:	3b01      	subs	r3, #1
 800db76:	b29b      	uxth	r3, r3
 800db78:	84c3      	strh	r3, [r0, #38]	; 0x26
 800db7a:	b9db      	cbnz	r3, 800dbb4 <UART_Transmit_IT+0x66>
			CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800db7c:	6802      	ldr	r2, [r0, #0]
 800db7e:	68d3      	ldr	r3, [r2, #12]
 800db80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db84:	60d3      	str	r3, [r2, #12]
			SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db86:	6802      	ldr	r2, [r0, #0]
 800db88:	68d3      	ldr	r3, [r2, #12]
 800db8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db8e:	60d3      	str	r3, [r2, #12]
		return HAL_OK;
 800db90:	2000      	movs	r0, #0
 800db92:	4770      	bx	lr
			tmp = (uint16_t*)huart->pTxBuffPtr;
 800db94:	6a03      	ldr	r3, [r0, #32]
			huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800db96:	6802      	ldr	r2, [r0, #0]
 800db98:	881b      	ldrh	r3, [r3, #0]
 800db9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db9e:	6053      	str	r3, [r2, #4]
			if (huart->Init.Parity == UART_PARITY_NONE) {
 800dba0:	6903      	ldr	r3, [r0, #16]
 800dba2:	b91b      	cbnz	r3, 800dbac <UART_Transmit_IT+0x5e>
				huart->pTxBuffPtr += 2U;
 800dba4:	6a03      	ldr	r3, [r0, #32]
 800dba6:	3302      	adds	r3, #2
 800dba8:	6203      	str	r3, [r0, #32]
 800dbaa:	e7e1      	b.n	800db70 <UART_Transmit_IT+0x22>
				huart->pTxBuffPtr += 1U;
 800dbac:	6a03      	ldr	r3, [r0, #32]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	6203      	str	r3, [r0, #32]
 800dbb2:	e7dd      	b.n	800db70 <UART_Transmit_IT+0x22>
		return HAL_OK;
 800dbb4:	2000      	movs	r0, #0
	}
}
 800dbb6:	4770      	bx	lr

0800dbb8 <UART_SetConfig>:
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbbc:	4604      	mov	r4, r0
	uint32_t tmpreg = 0x00U;

	/* Check the parameters */
	assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800dbbe:	6842      	ldr	r2, [r0, #4]
 800dbc0:	4bb6      	ldr	r3, [pc, #728]	; (800de9c <UART_SetConfig+0x2e4>)
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	f200 80a6 	bhi.w	800dd14 <UART_SetConfig+0x15c>
	assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800dbc8:	68e3      	ldr	r3, [r4, #12]
 800dbca:	b13b      	cbz	r3, 800dbdc <UART_SetConfig+0x24>
 800dbcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dbd0:	d004      	beq.n	800dbdc <UART_SetConfig+0x24>
 800dbd2:	f44f 610e 	mov.w	r1, #2272	; 0x8e0
 800dbd6:	48b2      	ldr	r0, [pc, #712]	; (800dea0 <UART_SetConfig+0x2e8>)
 800dbd8:	f001 ffce 	bl	800fb78 <assert_failed>
	assert_param(IS_UART_PARITY(huart->Init.Parity));
 800dbdc:	6923      	ldr	r3, [r4, #16]
 800dbde:	b153      	cbz	r3, 800dbf6 <UART_SetConfig+0x3e>
 800dbe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbe4:	d007      	beq.n	800dbf6 <UART_SetConfig+0x3e>
 800dbe6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800dbea:	d004      	beq.n	800dbf6 <UART_SetConfig+0x3e>
 800dbec:	f640 01e1 	movw	r1, #2273	; 0x8e1
 800dbf0:	48ab      	ldr	r0, [pc, #684]	; (800dea0 <UART_SetConfig+0x2e8>)
 800dbf2:	f001 ffc1 	bl	800fb78 <assert_failed>
	assert_param(IS_UART_MODE(huart->Init.Mode));
 800dbf6:	6963      	ldr	r3, [r4, #20]
 800dbf8:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 800dbfc:	4213      	tst	r3, r2
 800dbfe:	d100      	bne.n	800dc02 <UART_SetConfig+0x4a>
 800dc00:	b923      	cbnz	r3, 800dc0c <UART_SetConfig+0x54>
 800dc02:	f640 01e2 	movw	r1, #2274	; 0x8e2
 800dc06:	48a6      	ldr	r0, [pc, #664]	; (800dea0 <UART_SetConfig+0x2e8>)
 800dc08:	f001 ffb6 	bl	800fb78 <assert_failed>

	/*-------------------------- USART CR2 Configuration -----------------------*/
	tmpreg = huart->Instance->CR2;
 800dc0c:	6822      	ldr	r2, [r4, #0]
 800dc0e:	6913      	ldr	r3, [r2, #16]

	/* Clear STOP[13:12] bits */
	tmpreg &= (uint32_t) ~((uint32_t)USART_CR2_STOP);
 800dc10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

	/* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
	tmpreg |= (uint32_t)huart->Init.StopBits;
 800dc14:	68e1      	ldr	r1, [r4, #12]
 800dc16:	430b      	orrs	r3, r1

	/* Write to USART CR2 */
	WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800dc18:	6113      	str	r3, [r2, #16]

	/*-------------------------- USART CR1 Configuration -----------------------*/
	tmpreg = huart->Instance->CR1;
 800dc1a:	6821      	ldr	r1, [r4, #0]
 800dc1c:	68cb      	ldr	r3, [r1, #12]

	/* Clear M, PCE, PS, TE and RE bits */
	tmpreg &= (uint32_t) ~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800dc1e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800dc22:	f023 030c 	bic.w	r3, r3, #12
	/* Configure the UART Word Length, Parity and mode:
	   Set the M bits according to huart->Init.WordLength value
	   Set PCE and PS bits according to huart->Init.Parity value
	   Set TE and RE bits according to huart->Init.Mode value
	   Set OVER8 bit according to huart->Init.OverSampling value */
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dc26:	68a2      	ldr	r2, [r4, #8]
 800dc28:	6920      	ldr	r0, [r4, #16]
 800dc2a:	4302      	orrs	r2, r0
 800dc2c:	6960      	ldr	r0, [r4, #20]
 800dc2e:	4302      	orrs	r2, r0
 800dc30:	69e0      	ldr	r0, [r4, #28]
 800dc32:	4302      	orrs	r2, r0
 800dc34:	4313      	orrs	r3, r2

	/* Write to USART CR1 */
	WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800dc36:	60cb      	str	r3, [r1, #12]

	/*-------------------------- USART CR3 Configuration -----------------------*/
	tmpreg = huart->Instance->CR3;
 800dc38:	6822      	ldr	r2, [r4, #0]
 800dc3a:	6953      	ldr	r3, [r2, #20]

	/* Clear CTSE and RTSE bits */
	tmpreg &= (uint32_t) ~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800dc3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300

	/* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
	tmpreg |= huart->Init.HwFlowCtl;
 800dc40:	69a1      	ldr	r1, [r4, #24]
 800dc42:	430b      	orrs	r3, r1

	/* Write to USART CR3 */
	WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800dc44:	6153      	str	r3, [r2, #20]

	/* Check the Over Sampling */
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 800dc46:	69e3      	ldr	r3, [r4, #28]
 800dc48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc4c:	d068      	beq.n	800dd20 <UART_SetConfig+0x168>
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
		}
	}else {
		/*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
		if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 800dc4e:	f8d4 8000 	ldr.w	r8, [r4]
 800dc52:	4b94      	ldr	r3, [pc, #592]	; (800dea4 <UART_SetConfig+0x2ec>)
 800dc54:	4598      	cmp	r8, r3
 800dc56:	f000 8129 	beq.w	800deac <UART_SetConfig+0x2f4>
 800dc5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc5e:	4598      	cmp	r8, r3
 800dc60:	f000 8124 	beq.w	800deac <UART_SetConfig+0x2f4>
		if (huart->Instance == USART1) {
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
		}
#endif /* USART6 */
		else{
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800dc64:	f7fe fa48 	bl	800c0f8 <HAL_RCC_GetPCLK1Freq>
 800dc68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dc6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dc70:	6865      	ldr	r5, [r4, #4]
 800dc72:	00ad      	lsls	r5, r5, #2
 800dc74:	fbb0 f5f5 	udiv	r5, r0, r5
 800dc78:	4f8b      	ldr	r7, [pc, #556]	; (800dea8 <UART_SetConfig+0x2f0>)
 800dc7a:	fba7 3505 	umull	r3, r5, r7, r5
 800dc7e:	096d      	lsrs	r5, r5, #5
 800dc80:	012e      	lsls	r6, r5, #4
 800dc82:	f7fe fa39 	bl	800c0f8 <HAL_RCC_GetPCLK1Freq>
 800dc86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dc8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dc8e:	6865      	ldr	r5, [r4, #4]
 800dc90:	00ad      	lsls	r5, r5, #2
 800dc92:	fbb0 faf5 	udiv	sl, r0, r5
 800dc96:	f7fe fa2f 	bl	800c0f8 <HAL_RCC_GetPCLK1Freq>
 800dc9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dc9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dca2:	6865      	ldr	r5, [r4, #4]
 800dca4:	00ad      	lsls	r5, r5, #2
 800dca6:	fbb0 f5f5 	udiv	r5, r0, r5
 800dcaa:	fba7 3505 	umull	r3, r5, r7, r5
 800dcae:	096d      	lsrs	r5, r5, #5
 800dcb0:	f04f 0964 	mov.w	r9, #100	; 0x64
 800dcb4:	fb09 a515 	mls	r5, r9, r5, sl
 800dcb8:	012d      	lsls	r5, r5, #4
 800dcba:	3532      	adds	r5, #50	; 0x32
 800dcbc:	fba7 3505 	umull	r3, r5, r7, r5
 800dcc0:	096d      	lsrs	r5, r5, #5
 800dcc2:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800dcc6:	4435      	add	r5, r6
 800dcc8:	f7fe fa16 	bl	800c0f8 <HAL_RCC_GetPCLK1Freq>
 800dccc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dcd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dcd4:	6866      	ldr	r6, [r4, #4]
 800dcd6:	00b6      	lsls	r6, r6, #2
 800dcd8:	fbb0 f6f6 	udiv	r6, r0, r6
 800dcdc:	f7fe fa0c 	bl	800c0f8 <HAL_RCC_GetPCLK1Freq>
 800dce0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dce4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dce8:	6863      	ldr	r3, [r4, #4]
 800dcea:	009b      	lsls	r3, r3, #2
 800dcec:	fbb0 f0f3 	udiv	r0, r0, r3
 800dcf0:	fba7 3000 	umull	r3, r0, r7, r0
 800dcf4:	0940      	lsrs	r0, r0, #5
 800dcf6:	fb09 6910 	mls	r9, r9, r0, r6
 800dcfa:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800dcfe:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800dd02:	fba7 3709 	umull	r3, r7, r7, r9
 800dd06:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800dd0a:	442f      	add	r7, r5
 800dd0c:	f8c8 7008 	str.w	r7, [r8, #8]
 800dd10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800dd14:	f640 01df 	movw	r1, #2271	; 0x8df
 800dd18:	4861      	ldr	r0, [pc, #388]	; (800dea0 <UART_SetConfig+0x2e8>)
 800dd1a:	f001 ff2d 	bl	800fb78 <assert_failed>
 800dd1e:	e753      	b.n	800dbc8 <UART_SetConfig+0x10>
		if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 800dd20:	f8d4 8000 	ldr.w	r8, [r4]
 800dd24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dd28:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800dd2c:	4598      	cmp	r8, r3
 800dd2e:	d05c      	beq.n	800ddea <UART_SetConfig+0x232>
 800dd30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dd34:	4598      	cmp	r8, r3
 800dd36:	d058      	beq.n	800ddea <UART_SetConfig+0x232>
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800dd38:	f7fe f9de 	bl	800c0f8 <HAL_RCC_GetPCLK1Freq>
 800dd3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dd40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dd44:	6865      	ldr	r5, [r4, #4]
 800dd46:	006d      	lsls	r5, r5, #1
 800dd48:	fbb0 f5f5 	udiv	r5, r0, r5
 800dd4c:	4f56      	ldr	r7, [pc, #344]	; (800dea8 <UART_SetConfig+0x2f0>)
 800dd4e:	fba7 3505 	umull	r3, r5, r7, r5
 800dd52:	096d      	lsrs	r5, r5, #5
 800dd54:	012e      	lsls	r6, r5, #4
 800dd56:	f7fe f9cf 	bl	800c0f8 <HAL_RCC_GetPCLK1Freq>
 800dd5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dd5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dd62:	6865      	ldr	r5, [r4, #4]
 800dd64:	006d      	lsls	r5, r5, #1
 800dd66:	fbb0 faf5 	udiv	sl, r0, r5
 800dd6a:	f7fe f9c5 	bl	800c0f8 <HAL_RCC_GetPCLK1Freq>
 800dd6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dd72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dd76:	6865      	ldr	r5, [r4, #4]
 800dd78:	006d      	lsls	r5, r5, #1
 800dd7a:	fbb0 f5f5 	udiv	r5, r0, r5
 800dd7e:	fba7 3505 	umull	r3, r5, r7, r5
 800dd82:	096d      	lsrs	r5, r5, #5
 800dd84:	f04f 0964 	mov.w	r9, #100	; 0x64
 800dd88:	fb09 a515 	mls	r5, r9, r5, sl
 800dd8c:	00ed      	lsls	r5, r5, #3
 800dd8e:	3532      	adds	r5, #50	; 0x32
 800dd90:	fba7 3505 	umull	r3, r5, r7, r5
 800dd94:	096d      	lsrs	r5, r5, #5
 800dd96:	006d      	lsls	r5, r5, #1
 800dd98:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800dd9c:	4435      	add	r5, r6
 800dd9e:	f7fe f9ab 	bl	800c0f8 <HAL_RCC_GetPCLK1Freq>
 800dda2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dda6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ddaa:	6866      	ldr	r6, [r4, #4]
 800ddac:	0076      	lsls	r6, r6, #1
 800ddae:	fbb0 f6f6 	udiv	r6, r0, r6
 800ddb2:	f7fe f9a1 	bl	800c0f8 <HAL_RCC_GetPCLK1Freq>
 800ddb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ddba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ddbe:	6863      	ldr	r3, [r4, #4]
 800ddc0:	005b      	lsls	r3, r3, #1
 800ddc2:	fbb0 f3f3 	udiv	r3, r0, r3
 800ddc6:	fba7 2303 	umull	r2, r3, r7, r3
 800ddca:	095b      	lsrs	r3, r3, #5
 800ddcc:	fb09 6913 	mls	r9, r9, r3, r6
 800ddd0:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800ddd4:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800ddd8:	fba7 3709 	umull	r3, r7, r7, r9
 800dddc:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800dde0:	442f      	add	r7, r5
 800dde2:	f8c8 7008 	str.w	r7, [r8, #8]
 800dde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800ddea:	f7fe f995 	bl	800c118 <HAL_RCC_GetPCLK2Freq>
 800ddee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ddf2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ddf6:	6865      	ldr	r5, [r4, #4]
 800ddf8:	006d      	lsls	r5, r5, #1
 800ddfa:	fbb0 f5f5 	udiv	r5, r0, r5
 800ddfe:	4f2a      	ldr	r7, [pc, #168]	; (800dea8 <UART_SetConfig+0x2f0>)
 800de00:	fba7 3505 	umull	r3, r5, r7, r5
 800de04:	096d      	lsrs	r5, r5, #5
 800de06:	012e      	lsls	r6, r5, #4
 800de08:	f7fe f986 	bl	800c118 <HAL_RCC_GetPCLK2Freq>
 800de0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800de10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800de14:	6865      	ldr	r5, [r4, #4]
 800de16:	006d      	lsls	r5, r5, #1
 800de18:	fbb0 faf5 	udiv	sl, r0, r5
 800de1c:	f7fe f97c 	bl	800c118 <HAL_RCC_GetPCLK2Freq>
 800de20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800de24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800de28:	6865      	ldr	r5, [r4, #4]
 800de2a:	006d      	lsls	r5, r5, #1
 800de2c:	fbb0 f5f5 	udiv	r5, r0, r5
 800de30:	fba7 3505 	umull	r3, r5, r7, r5
 800de34:	096d      	lsrs	r5, r5, #5
 800de36:	f04f 0964 	mov.w	r9, #100	; 0x64
 800de3a:	fb09 a515 	mls	r5, r9, r5, sl
 800de3e:	00ed      	lsls	r5, r5, #3
 800de40:	3532      	adds	r5, #50	; 0x32
 800de42:	fba7 3505 	umull	r3, r5, r7, r5
 800de46:	096d      	lsrs	r5, r5, #5
 800de48:	006d      	lsls	r5, r5, #1
 800de4a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800de4e:	4435      	add	r5, r6
 800de50:	f7fe f962 	bl	800c118 <HAL_RCC_GetPCLK2Freq>
 800de54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800de58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800de5c:	6866      	ldr	r6, [r4, #4]
 800de5e:	0076      	lsls	r6, r6, #1
 800de60:	fbb0 f6f6 	udiv	r6, r0, r6
 800de64:	f7fe f958 	bl	800c118 <HAL_RCC_GetPCLK2Freq>
 800de68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800de6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800de70:	6863      	ldr	r3, [r4, #4]
 800de72:	005b      	lsls	r3, r3, #1
 800de74:	fbb0 f3f3 	udiv	r3, r0, r3
 800de78:	fba7 2303 	umull	r2, r3, r7, r3
 800de7c:	095b      	lsrs	r3, r3, #5
 800de7e:	fb09 6913 	mls	r9, r9, r3, r6
 800de82:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800de86:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800de8a:	fba7 3709 	umull	r3, r7, r7, r9
 800de8e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800de92:	442f      	add	r7, r5
 800de94:	f8c8 7008 	str.w	r7, [r8, #8]
 800de98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de9c:	00a037a0 	.word	0x00a037a0
 800dea0:	08021f0c 	.word	0x08021f0c
 800dea4:	40011000 	.word	0x40011000
 800dea8:	51eb851f 	.word	0x51eb851f
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800deac:	f7fe f934 	bl	800c118 <HAL_RCC_GetPCLK2Freq>
 800deb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800deb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800deb8:	6865      	ldr	r5, [r4, #4]
 800deba:	00ad      	lsls	r5, r5, #2
 800debc:	fbb0 f5f5 	udiv	r5, r0, r5
 800dec0:	4f26      	ldr	r7, [pc, #152]	; (800df5c <UART_SetConfig+0x3a4>)
 800dec2:	fba7 3505 	umull	r3, r5, r7, r5
 800dec6:	096d      	lsrs	r5, r5, #5
 800dec8:	012e      	lsls	r6, r5, #4
 800deca:	f7fe f925 	bl	800c118 <HAL_RCC_GetPCLK2Freq>
 800dece:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ded2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ded6:	6865      	ldr	r5, [r4, #4]
 800ded8:	00ad      	lsls	r5, r5, #2
 800deda:	fbb0 faf5 	udiv	sl, r0, r5
 800dede:	f7fe f91b 	bl	800c118 <HAL_RCC_GetPCLK2Freq>
 800dee2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dee6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800deea:	6865      	ldr	r5, [r4, #4]
 800deec:	00ad      	lsls	r5, r5, #2
 800deee:	fbb0 f5f5 	udiv	r5, r0, r5
 800def2:	fba7 3505 	umull	r3, r5, r7, r5
 800def6:	096d      	lsrs	r5, r5, #5
 800def8:	f04f 0964 	mov.w	r9, #100	; 0x64
 800defc:	fb09 a515 	mls	r5, r9, r5, sl
 800df00:	012d      	lsls	r5, r5, #4
 800df02:	3532      	adds	r5, #50	; 0x32
 800df04:	fba7 3505 	umull	r3, r5, r7, r5
 800df08:	096d      	lsrs	r5, r5, #5
 800df0a:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800df0e:	4435      	add	r5, r6
 800df10:	f7fe f902 	bl	800c118 <HAL_RCC_GetPCLK2Freq>
 800df14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800df18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800df1c:	6866      	ldr	r6, [r4, #4]
 800df1e:	00b6      	lsls	r6, r6, #2
 800df20:	fbb0 f6f6 	udiv	r6, r0, r6
 800df24:	f7fe f8f8 	bl	800c118 <HAL_RCC_GetPCLK2Freq>
 800df28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800df2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800df30:	6863      	ldr	r3, [r4, #4]
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	fbb0 f3f3 	udiv	r3, r0, r3
 800df38:	fba7 2303 	umull	r2, r3, r7, r3
 800df3c:	095b      	lsrs	r3, r3, #5
 800df3e:	fb09 6913 	mls	r9, r9, r3, r6
 800df42:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800df46:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800df4a:	fba7 3709 	umull	r3, r7, r7, r9
 800df4e:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800df52:	442f      	add	r7, r5
 800df54:	f8c8 7008 	str.w	r7, [r8, #8]
 800df58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df5c:	51eb851f 	.word	0x51eb851f

0800df60 <HAL_MultiProcessor_Init>:
	if (huart == NULL) {
 800df60:	2800      	cmp	r0, #0
 800df62:	d077      	beq.n	800e054 <HAL_MultiProcessor_Init+0xf4>
{
 800df64:	b570      	push	{r4, r5, r6, lr}
 800df66:	4604      	mov	r4, r0
 800df68:	4615      	mov	r5, r2
 800df6a:	460e      	mov	r6, r1
	assert_param(IS_UART_INSTANCE(huart->Instance));
 800df6c:	6803      	ldr	r3, [r0, #0]
 800df6e:	4a3a      	ldr	r2, [pc, #232]	; (800e058 <HAL_MultiProcessor_Init+0xf8>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d00c      	beq.n	800df8e <HAL_MultiProcessor_Init+0x2e>
 800df74:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800df78:	4293      	cmp	r3, r2
 800df7a:	d008      	beq.n	800df8e <HAL_MultiProcessor_Init+0x2e>
 800df7c:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 800df80:	4293      	cmp	r3, r2
 800df82:	d004      	beq.n	800df8e <HAL_MultiProcessor_Init+0x2e>
 800df84:	f240 11af 	movw	r1, #431	; 0x1af
 800df88:	4834      	ldr	r0, [pc, #208]	; (800e05c <HAL_MultiProcessor_Init+0xfc>)
 800df8a:	f001 fdf5 	bl	800fb78 <assert_failed>
	assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800df8e:	b13d      	cbz	r5, 800dfa0 <HAL_MultiProcessor_Init+0x40>
 800df90:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800df94:	d004      	beq.n	800dfa0 <HAL_MultiProcessor_Init+0x40>
 800df96:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800df9a:	4830      	ldr	r0, [pc, #192]	; (800e05c <HAL_MultiProcessor_Init+0xfc>)
 800df9c:	f001 fdec 	bl	800fb78 <assert_failed>
	assert_param(IS_UART_ADDRESS(Address));
 800dfa0:	2e0f      	cmp	r6, #15
 800dfa2:	d84b      	bhi.n	800e03c <HAL_MultiProcessor_Init+0xdc>
	assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800dfa4:	68a3      	ldr	r3, [r4, #8]
 800dfa6:	b13b      	cbz	r3, 800dfb8 <HAL_MultiProcessor_Init+0x58>
 800dfa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfac:	d004      	beq.n	800dfb8 <HAL_MultiProcessor_Init+0x58>
 800dfae:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 800dfb2:	482a      	ldr	r0, [pc, #168]	; (800e05c <HAL_MultiProcessor_Init+0xfc>)
 800dfb4:	f001 fde0 	bl	800fb78 <assert_failed>
	assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800dfb8:	69e3      	ldr	r3, [r4, #28]
 800dfba:	b13b      	cbz	r3, 800dfcc <HAL_MultiProcessor_Init+0x6c>
 800dfbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfc0:	d004      	beq.n	800dfcc <HAL_MultiProcessor_Init+0x6c>
 800dfc2:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dfc6:	4825      	ldr	r0, [pc, #148]	; (800e05c <HAL_MultiProcessor_Init+0xfc>)
 800dfc8:	f001 fdd6 	bl	800fb78 <assert_failed>
	if (huart->gState == HAL_UART_STATE_RESET) {
 800dfcc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d039      	beq.n	800e048 <HAL_MultiProcessor_Init+0xe8>
	huart->gState = HAL_UART_STATE_BUSY;
 800dfd4:	2324      	movs	r3, #36	; 0x24
 800dfd6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	__HAL_UART_DISABLE(huart);
 800dfda:	6822      	ldr	r2, [r4, #0]
 800dfdc:	68d3      	ldr	r3, [r2, #12]
 800dfde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dfe2:	60d3      	str	r3, [r2, #12]
	UART_SetConfig(huart);
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	f7ff fde7 	bl	800dbb8 <UART_SetConfig>
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dfea:	6822      	ldr	r2, [r4, #0]
 800dfec:	6913      	ldr	r3, [r2, #16]
 800dfee:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800dff2:	6113      	str	r3, [r2, #16]
	CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dff4:	6822      	ldr	r2, [r4, #0]
 800dff6:	6953      	ldr	r3, [r2, #20]
 800dff8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800dffc:	6153      	str	r3, [r2, #20]
	CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 800dffe:	6822      	ldr	r2, [r4, #0]
 800e000:	6913      	ldr	r3, [r2, #16]
 800e002:	f023 030f 	bic.w	r3, r3, #15
 800e006:	6113      	str	r3, [r2, #16]
	SET_BIT(huart->Instance->CR2, Address);
 800e008:	6823      	ldr	r3, [r4, #0]
 800e00a:	6919      	ldr	r1, [r3, #16]
 800e00c:	430e      	orrs	r6, r1
 800e00e:	611e      	str	r6, [r3, #16]
	CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 800e010:	6822      	ldr	r2, [r4, #0]
 800e012:	68d3      	ldr	r3, [r2, #12]
 800e014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e018:	60d3      	str	r3, [r2, #12]
	SET_BIT(huart->Instance->CR1, WakeUpMethod);
 800e01a:	6823      	ldr	r3, [r4, #0]
 800e01c:	68da      	ldr	r2, [r3, #12]
 800e01e:	4315      	orrs	r5, r2
 800e020:	60dd      	str	r5, [r3, #12]
	__HAL_UART_ENABLE(huart);
 800e022:	6822      	ldr	r2, [r4, #0]
 800e024:	68d3      	ldr	r3, [r2, #12]
 800e026:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e02a:	60d3      	str	r3, [r2, #12]
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e02c:	2000      	movs	r0, #0
 800e02e:	63e0      	str	r0, [r4, #60]	; 0x3c
	huart->gState = HAL_UART_STATE_READY;
 800e030:	2320      	movs	r3, #32
 800e032:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	huart->RxState = HAL_UART_STATE_READY;
 800e036:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	return HAL_OK;
 800e03a:	bd70      	pop	{r4, r5, r6, pc}
	assert_param(IS_UART_ADDRESS(Address));
 800e03c:	f240 11b1 	movw	r1, #433	; 0x1b1
 800e040:	4806      	ldr	r0, [pc, #24]	; (800e05c <HAL_MultiProcessor_Init+0xfc>)
 800e042:	f001 fd99 	bl	800fb78 <assert_failed>
 800e046:	e7ad      	b.n	800dfa4 <HAL_MultiProcessor_Init+0x44>
		huart->Lock = HAL_UNLOCKED;
 800e048:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		HAL_UART_MspInit(huart);
 800e04c:	4620      	mov	r0, r4
 800e04e:	f002 f993 	bl	8010378 <HAL_UART_MspInit>
 800e052:	e7bf      	b.n	800dfd4 <HAL_MultiProcessor_Init+0x74>
		return HAL_ERROR;
 800e054:	2001      	movs	r0, #1
 800e056:	4770      	bx	lr
 800e058:	40011000 	.word	0x40011000
 800e05c:	08021f0c 	.word	0x08021f0c

0800e060 <HAL_UART_Transmit_DMA>:
{
 800e060:	b538      	push	{r3, r4, r5, lr}
	if (huart->gState == HAL_UART_STATE_READY) {
 800e062:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 800e066:	b2e4      	uxtb	r4, r4
 800e068:	2c20      	cmp	r4, #32
 800e06a:	d001      	beq.n	800e070 <HAL_UART_Transmit_DMA+0x10>
		return HAL_BUSY;
 800e06c:	2002      	movs	r0, #2
 800e06e:	bd38      	pop	{r3, r4, r5, pc}
		if ((pData == NULL) || (Size == 0)) {
 800e070:	2900      	cmp	r1, #0
 800e072:	d031      	beq.n	800e0d8 <HAL_UART_Transmit_DMA+0x78>
 800e074:	2a00      	cmp	r2, #0
 800e076:	d031      	beq.n	800e0dc <HAL_UART_Transmit_DMA+0x7c>
		__HAL_LOCK(huart);
 800e078:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d101      	bne.n	800e084 <HAL_UART_Transmit_DMA+0x24>
 800e080:	2002      	movs	r0, #2
}
 800e082:	bd38      	pop	{r3, r4, r5, pc}
 800e084:	4613      	mov	r3, r2
 800e086:	4604      	mov	r4, r0
		__HAL_LOCK(huart);
 800e088:	2201      	movs	r2, #1
 800e08a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		huart->pTxBuffPtr = pData;
 800e08e:	6201      	str	r1, [r0, #32]
		huart->TxXferSize = Size;
 800e090:	8483      	strh	r3, [r0, #36]	; 0x24
		huart->TxXferCount = Size;
 800e092:	84c3      	strh	r3, [r0, #38]	; 0x26
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e094:	2500      	movs	r5, #0
 800e096:	63c5      	str	r5, [r0, #60]	; 0x3c
		huart->gState = HAL_UART_STATE_BUSY_TX;
 800e098:	2221      	movs	r2, #33	; 0x21
 800e09a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
		huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e09e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800e0a0:	480f      	ldr	r0, [pc, #60]	; (800e0e0 <HAL_UART_Transmit_DMA+0x80>)
 800e0a2:	63d0      	str	r0, [r2, #60]	; 0x3c
		huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e0a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e0a6:	480f      	ldr	r0, [pc, #60]	; (800e0e4 <HAL_UART_Transmit_DMA+0x84>)
 800e0a8:	6410      	str	r0, [r2, #64]	; 0x40
		huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e0aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e0ac:	480e      	ldr	r0, [pc, #56]	; (800e0e8 <HAL_UART_Transmit_DMA+0x88>)
 800e0ae:	64d0      	str	r0, [r2, #76]	; 0x4c
		huart->hdmatx->XferAbortCallback = NULL;
 800e0b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e0b2:	6515      	str	r5, [r2, #80]	; 0x50
		HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e0b4:	6822      	ldr	r2, [r4, #0]
 800e0b6:	3204      	adds	r2, #4
 800e0b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e0ba:	f7fb f9cf 	bl	800945c <HAL_DMA_Start_IT>
		__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e0be:	6823      	ldr	r3, [r4, #0]
 800e0c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e0c4:	601a      	str	r2, [r3, #0]
		__HAL_UNLOCK(huart);
 800e0c6:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e0ca:	6822      	ldr	r2, [r4, #0]
 800e0cc:	6953      	ldr	r3, [r2, #20]
 800e0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0d2:	6153      	str	r3, [r2, #20]
		return HAL_OK;
 800e0d4:	4628      	mov	r0, r5
 800e0d6:	bd38      	pop	{r3, r4, r5, pc}
			return HAL_ERROR;
 800e0d8:	2001      	movs	r0, #1
 800e0da:	bd38      	pop	{r3, r4, r5, pc}
 800e0dc:	2001      	movs	r0, #1
 800e0de:	bd38      	pop	{r3, r4, r5, pc}
 800e0e0:	0800e195 	.word	0x0800e195
 800e0e4:	0800e1e1 	.word	0x0800e1e1
 800e0e8:	0800e2cb 	.word	0x0800e2cb

0800e0ec <HAL_UART_Receive_DMA>:
{
 800e0ec:	b530      	push	{r4, r5, lr}
 800e0ee:	b083      	sub	sp, #12
	if (huart->RxState == HAL_UART_STATE_READY) {
 800e0f0:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 800e0f4:	b2e4      	uxtb	r4, r4
 800e0f6:	2c20      	cmp	r4, #32
 800e0f8:	d002      	beq.n	800e100 <HAL_UART_Receive_DMA+0x14>
		return HAL_BUSY;
 800e0fa:	2002      	movs	r0, #2
}
 800e0fc:	b003      	add	sp, #12
 800e0fe:	bd30      	pop	{r4, r5, pc}
		if ((pData == NULL) || (Size == 0)) {
 800e100:	2900      	cmp	r1, #0
 800e102:	d03d      	beq.n	800e180 <HAL_UART_Receive_DMA+0x94>
 800e104:	2a00      	cmp	r2, #0
 800e106:	d03d      	beq.n	800e184 <HAL_UART_Receive_DMA+0x98>
		__HAL_LOCK(huart);
 800e108:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d101      	bne.n	800e114 <HAL_UART_Receive_DMA+0x28>
 800e110:	2002      	movs	r0, #2
 800e112:	e7f3      	b.n	800e0fc <HAL_UART_Receive_DMA+0x10>
 800e114:	4613      	mov	r3, r2
 800e116:	460a      	mov	r2, r1
 800e118:	4604      	mov	r4, r0
 800e11a:	2101      	movs	r1, #1
 800e11c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
		huart->pRxBuffPtr = pData;
 800e120:	6282      	str	r2, [r0, #40]	; 0x28
		huart->RxXferSize = Size;
 800e122:	8583      	strh	r3, [r0, #44]	; 0x2c
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e124:	2500      	movs	r5, #0
 800e126:	63c5      	str	r5, [r0, #60]	; 0x3c
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e128:	2122      	movs	r1, #34	; 0x22
 800e12a:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
		huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e12e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800e130:	4815      	ldr	r0, [pc, #84]	; (800e188 <HAL_UART_Receive_DMA+0x9c>)
 800e132:	63c8      	str	r0, [r1, #60]	; 0x3c
		huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e136:	4815      	ldr	r0, [pc, #84]	; (800e18c <HAL_UART_Receive_DMA+0xa0>)
 800e138:	6408      	str	r0, [r1, #64]	; 0x40
		huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e13a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e13c:	4814      	ldr	r0, [pc, #80]	; (800e190 <HAL_UART_Receive_DMA+0xa4>)
 800e13e:	64c8      	str	r0, [r1, #76]	; 0x4c
		huart->hdmarx->XferAbortCallback = NULL;
 800e140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e142:	650d      	str	r5, [r1, #80]	; 0x50
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 800e144:	6821      	ldr	r1, [r4, #0]
 800e146:	3104      	adds	r1, #4
 800e148:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e14a:	f7fb f987 	bl	800945c <HAL_DMA_Start_IT>
		__HAL_UART_CLEAR_OREFLAG(huart);
 800e14e:	9501      	str	r5, [sp, #4]
 800e150:	6823      	ldr	r3, [r4, #0]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	9201      	str	r2, [sp, #4]
 800e156:	685a      	ldr	r2, [r3, #4]
 800e158:	9201      	str	r2, [sp, #4]
 800e15a:	9a01      	ldr	r2, [sp, #4]
		__HAL_UNLOCK(huart);
 800e15c:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e160:	68da      	ldr	r2, [r3, #12]
 800e162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e166:	60da      	str	r2, [r3, #12]
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e168:	6822      	ldr	r2, [r4, #0]
 800e16a:	6953      	ldr	r3, [r2, #20]
 800e16c:	f043 0301 	orr.w	r3, r3, #1
 800e170:	6153      	str	r3, [r2, #20]
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e172:	6822      	ldr	r2, [r4, #0]
 800e174:	6953      	ldr	r3, [r2, #20]
 800e176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e17a:	6153      	str	r3, [r2, #20]
		return HAL_OK;
 800e17c:	4628      	mov	r0, r5
 800e17e:	e7bd      	b.n	800e0fc <HAL_UART_Receive_DMA+0x10>
			return HAL_ERROR;
 800e180:	2001      	movs	r0, #1
 800e182:	e7bb      	b.n	800e0fc <HAL_UART_Receive_DMA+0x10>
 800e184:	2001      	movs	r0, #1
 800e186:	e7b9      	b.n	800e0fc <HAL_UART_Receive_DMA+0x10>
 800e188:	0800e1eb 	.word	0x0800e1eb
 800e18c:	0800e2bf 	.word	0x0800e2bf
 800e190:	0800e2cb 	.word	0x0800e2cb

0800e194 <UART_DMATransmitCplt>:
{
 800e194:	b508      	push	{r3, lr}
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e196:	6b83      	ldr	r3, [r0, #56]	; 0x38
	if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 800e198:	6802      	ldr	r2, [r0, #0]
 800e19a:	6812      	ldr	r2, [r2, #0]
 800e19c:	f412 7f80 	tst.w	r2, #256	; 0x100
 800e1a0:	d10c      	bne.n	800e1bc <UART_DMATransmitCplt+0x28>
		huart->TxXferCount = 0U;
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	84da      	strh	r2, [r3, #38]	; 0x26
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e1a6:	6819      	ldr	r1, [r3, #0]
 800e1a8:	694a      	ldr	r2, [r1, #20]
 800e1aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e1ae:	614a      	str	r2, [r1, #20]
		SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	68d3      	ldr	r3, [r2, #12]
 800e1b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1b8:	60d3      	str	r3, [r2, #12]
 800e1ba:	bd08      	pop	{r3, pc}
		HAL_UART_TxCpltCallback(huart);
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f001 f8df 	bl	800f380 <HAL_UART_TxCpltCallback>
 800e1c2:	bd08      	pop	{r3, pc}

0800e1c4 <UART_EndTransmit_IT>:
{
 800e1c4:	b508      	push	{r3, lr}
	CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e1c6:	6801      	ldr	r1, [r0, #0]
 800e1c8:	68cb      	ldr	r3, [r1, #12]
 800e1ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1ce:	60cb      	str	r3, [r1, #12]
	huart->gState = HAL_UART_STATE_READY;
 800e1d0:	2320      	movs	r3, #32
 800e1d2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	HAL_UART_TxCpltCallback(huart);
 800e1d6:	f001 f8d3 	bl	800f380 <HAL_UART_TxCpltCallback>
}
 800e1da:	2000      	movs	r0, #0
 800e1dc:	bd08      	pop	{r3, pc}

0800e1de <HAL_UART_TxHalfCpltCallback>:
{
 800e1de:	4770      	bx	lr

0800e1e0 <UART_DMATxHalfCplt>:
{
 800e1e0:	b508      	push	{r3, lr}
	HAL_UART_TxHalfCpltCallback(huart);
 800e1e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e1e4:	f7ff fffb 	bl	800e1de <HAL_UART_TxHalfCpltCallback>
 800e1e8:	bd08      	pop	{r3, pc}

0800e1ea <UART_DMAReceiveCplt>:
{
 800e1ea:	b508      	push	{r3, lr}
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e1ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
	if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 800e1ee:	6802      	ldr	r2, [r0, #0]
 800e1f0:	6812      	ldr	r2, [r2, #0]
 800e1f2:	f412 7f80 	tst.w	r2, #256	; 0x100
 800e1f6:	d113      	bne.n	800e220 <UART_DMAReceiveCplt+0x36>
		huart->RxXferCount = 0U;
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	85da      	strh	r2, [r3, #46]	; 0x2e
		CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1fc:	6819      	ldr	r1, [r3, #0]
 800e1fe:	68ca      	ldr	r2, [r1, #12]
 800e200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e204:	60ca      	str	r2, [r1, #12]
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e206:	6819      	ldr	r1, [r3, #0]
 800e208:	694a      	ldr	r2, [r1, #20]
 800e20a:	f022 0201 	bic.w	r2, r2, #1
 800e20e:	614a      	str	r2, [r1, #20]
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e210:	6819      	ldr	r1, [r3, #0]
 800e212:	694a      	ldr	r2, [r1, #20]
 800e214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e218:	614a      	str	r2, [r1, #20]
		huart->RxState = HAL_UART_STATE_READY;
 800e21a:	2220      	movs	r2, #32
 800e21c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	HAL_UART_RxCpltCallback(huart);
 800e220:	4618      	mov	r0, r3
 800e222:	f001 f8c5 	bl	800f3b0 <HAL_UART_RxCpltCallback>
 800e226:	bd08      	pop	{r3, pc}

0800e228 <UART_Receive_IT>:
{
 800e228:	b508      	push	{r3, lr}
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 800e22a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	2b22      	cmp	r3, #34	; 0x22
 800e232:	d001      	beq.n	800e238 <UART_Receive_IT+0x10>
		return HAL_BUSY;
 800e234:	2002      	movs	r0, #2
 800e236:	bd08      	pop	{r3, pc}
		if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 800e238:	6883      	ldr	r3, [r0, #8]
 800e23a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e23e:	d00f      	beq.n	800e260 <UART_Receive_IT+0x38>
			if (huart->Init.Parity == UART_PARITY_NONE) {
 800e240:	6903      	ldr	r3, [r0, #16]
 800e242:	bb0b      	cbnz	r3, 800e288 <UART_Receive_IT+0x60>
				*huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e244:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e246:	1c5a      	adds	r2, r3, #1
 800e248:	6282      	str	r2, [r0, #40]	; 0x28
 800e24a:	6802      	ldr	r2, [r0, #0]
 800e24c:	6852      	ldr	r2, [r2, #4]
 800e24e:	701a      	strb	r2, [r3, #0]
		if (--huart->RxXferCount == 0U) {
 800e250:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800e252:	b29b      	uxth	r3, r3
 800e254:	3b01      	subs	r3, #1
 800e256:	b29b      	uxth	r3, r3
 800e258:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800e25a:	b1f3      	cbz	r3, 800e29a <UART_Receive_IT+0x72>
		return HAL_OK;
 800e25c:	2000      	movs	r0, #0
}
 800e25e:	bd08      	pop	{r3, pc}
			tmp = (uint16_t*)huart->pRxBuffPtr;
 800e260:	6a82      	ldr	r2, [r0, #40]	; 0x28
			if (huart->Init.Parity == UART_PARITY_NONE) {
 800e262:	6903      	ldr	r3, [r0, #16]
 800e264:	b943      	cbnz	r3, 800e278 <UART_Receive_IT+0x50>
				*tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e266:	6803      	ldr	r3, [r0, #0]
 800e268:	685b      	ldr	r3, [r3, #4]
 800e26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e26e:	8013      	strh	r3, [r2, #0]
				huart->pRxBuffPtr += 2U;
 800e270:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e272:	3302      	adds	r3, #2
 800e274:	6283      	str	r3, [r0, #40]	; 0x28
 800e276:	e7eb      	b.n	800e250 <UART_Receive_IT+0x28>
				*tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800e278:	6803      	ldr	r3, [r0, #0]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	8013      	strh	r3, [r2, #0]
				huart->pRxBuffPtr += 1U;
 800e280:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e282:	3301      	adds	r3, #1
 800e284:	6283      	str	r3, [r0, #40]	; 0x28
 800e286:	e7e3      	b.n	800e250 <UART_Receive_IT+0x28>
				*huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e288:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e28a:	1c53      	adds	r3, r2, #1
 800e28c:	6283      	str	r3, [r0, #40]	; 0x28
 800e28e:	6803      	ldr	r3, [r0, #0]
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e296:	7013      	strb	r3, [r2, #0]
 800e298:	e7da      	b.n	800e250 <UART_Receive_IT+0x28>
			CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e29a:	6802      	ldr	r2, [r0, #0]
 800e29c:	68d3      	ldr	r3, [r2, #12]
 800e29e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e2a2:	60d3      	str	r3, [r2, #12]
			CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2a4:	6802      	ldr	r2, [r0, #0]
 800e2a6:	6953      	ldr	r3, [r2, #20]
 800e2a8:	f023 0301 	bic.w	r3, r3, #1
 800e2ac:	6153      	str	r3, [r2, #20]
			huart->RxState = HAL_UART_STATE_READY;
 800e2ae:	2320      	movs	r3, #32
 800e2b0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
			HAL_UART_RxCpltCallback(huart);
 800e2b4:	f001 f87c 	bl	800f3b0 <HAL_UART_RxCpltCallback>
			return HAL_OK;
 800e2b8:	2000      	movs	r0, #0
 800e2ba:	bd08      	pop	{r3, pc}

0800e2bc <HAL_UART_RxHalfCpltCallback>:
{
 800e2bc:	4770      	bx	lr

0800e2be <UART_DMARxHalfCplt>:
{
 800e2be:	b508      	push	{r3, lr}
	HAL_UART_RxHalfCpltCallback(huart);
 800e2c0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e2c2:	f7ff fffb 	bl	800e2bc <HAL_UART_RxHalfCpltCallback>
 800e2c6:	bd08      	pop	{r3, pc}

0800e2c8 <HAL_UART_ErrorCallback>:
{
 800e2c8:	4770      	bx	lr

0800e2ca <UART_DMAError>:
{
 800e2ca:	b510      	push	{r4, lr}
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e2cc:	6b84      	ldr	r4, [r0, #56]	; 0x38
	dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e2ce:	6823      	ldr	r3, [r4, #0]
 800e2d0:	695a      	ldr	r2, [r3, #20]
	if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest) {
 800e2d2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	2b21      	cmp	r3, #33	; 0x21
 800e2da:	d010      	beq.n	800e2fe <UART_DMAError+0x34>
	dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e2dc:	6823      	ldr	r3, [r4, #0]
 800e2de:	695a      	ldr	r2, [r3, #20]
 800e2e0:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest) {
 800e2e4:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	2b22      	cmp	r3, #34	; 0x22
 800e2ec:	d011      	beq.n	800e312 <UART_DMAError+0x48>
	huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e2ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e2f0:	f043 0310 	orr.w	r3, r3, #16
 800e2f4:	63e3      	str	r3, [r4, #60]	; 0x3c
	HAL_UART_ErrorCallback(huart);
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f7ff ffe6 	bl	800e2c8 <HAL_UART_ErrorCallback>
 800e2fc:	bd10      	pop	{r4, pc}
 800e2fe:	f002 0280 	and.w	r2, r2, #128	; 0x80
	if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest) {
 800e302:	2a00      	cmp	r2, #0
 800e304:	d0ea      	beq.n	800e2dc <UART_DMAError+0x12>
		huart->TxXferCount = 0U;
 800e306:	2300      	movs	r3, #0
 800e308:	84e3      	strh	r3, [r4, #38]	; 0x26
		UART_EndTxTransfer(huart);
 800e30a:	4620      	mov	r0, r4
 800e30c:	f7ff fc08 	bl	800db20 <UART_EndTxTransfer>
 800e310:	e7e4      	b.n	800e2dc <UART_DMAError+0x12>
	if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest) {
 800e312:	2a00      	cmp	r2, #0
 800e314:	d0eb      	beq.n	800e2ee <UART_DMAError+0x24>
		huart->RxXferCount = 0U;
 800e316:	2300      	movs	r3, #0
 800e318:	85e3      	strh	r3, [r4, #46]	; 0x2e
		UART_EndRxTransfer(huart);
 800e31a:	4620      	mov	r0, r4
 800e31c:	f7ff fc09 	bl	800db32 <UART_EndRxTransfer>
 800e320:	e7e5      	b.n	800e2ee <UART_DMAError+0x24>
	...

0800e324 <HAL_UART_IRQHandler>:
{
 800e324:	b510      	push	{r4, lr}
 800e326:	4604      	mov	r4, r0
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 800e328:	6802      	ldr	r2, [r0, #0]
 800e32a:	6813      	ldr	r3, [r2, #0]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 800e32c:	68d1      	ldr	r1, [r2, #12]
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 800e32e:	6952      	ldr	r2, [r2, #20]
	if (errorflags == RESET) {
 800e330:	f013 000f 	ands.w	r0, r3, #15
 800e334:	d105      	bne.n	800e342 <HAL_UART_IRQHandler+0x1e>
		if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 800e336:	f013 0f20 	tst.w	r3, #32
 800e33a:	d002      	beq.n	800e342 <HAL_UART_IRQHandler+0x1e>
 800e33c:	f011 0f20 	tst.w	r1, #32
 800e340:	d153      	bne.n	800e3ea <HAL_UART_IRQHandler+0xc6>
	if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET))) {
 800e342:	2800      	cmp	r0, #0
 800e344:	d067      	beq.n	800e416 <HAL_UART_IRQHandler+0xf2>
 800e346:	f012 0201 	ands.w	r2, r2, #1
 800e34a:	d102      	bne.n	800e352 <HAL_UART_IRQHandler+0x2e>
 800e34c:	f411 7f90 	tst.w	r1, #288	; 0x120
 800e350:	d061      	beq.n	800e416 <HAL_UART_IRQHandler+0xf2>
		if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET)) {
 800e352:	f013 0f01 	tst.w	r3, #1
 800e356:	d006      	beq.n	800e366 <HAL_UART_IRQHandler+0x42>
 800e358:	f411 7f80 	tst.w	r1, #256	; 0x100
 800e35c:	d003      	beq.n	800e366 <HAL_UART_IRQHandler+0x42>
			huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e35e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e360:	f040 0001 	orr.w	r0, r0, #1
 800e364:	63e0      	str	r0, [r4, #60]	; 0x3c
		if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 800e366:	f013 0f04 	tst.w	r3, #4
 800e36a:	d004      	beq.n	800e376 <HAL_UART_IRQHandler+0x52>
 800e36c:	b11a      	cbz	r2, 800e376 <HAL_UART_IRQHandler+0x52>
			huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e36e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e370:	f040 0002 	orr.w	r0, r0, #2
 800e374:	63e0      	str	r0, [r4, #60]	; 0x3c
		if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 800e376:	f013 0f02 	tst.w	r3, #2
 800e37a:	d004      	beq.n	800e386 <HAL_UART_IRQHandler+0x62>
 800e37c:	b11a      	cbz	r2, 800e386 <HAL_UART_IRQHandler+0x62>
			huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e37e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e380:	f040 0004 	orr.w	r0, r0, #4
 800e384:	63e0      	str	r0, [r4, #60]	; 0x3c
		if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 800e386:	f013 0f08 	tst.w	r3, #8
 800e38a:	d004      	beq.n	800e396 <HAL_UART_IRQHandler+0x72>
 800e38c:	b11a      	cbz	r2, 800e396 <HAL_UART_IRQHandler+0x72>
			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e38e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e390:	f042 0208 	orr.w	r2, r2, #8
 800e394:	63e2      	str	r2, [r4, #60]	; 0x3c
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 800e396:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e398:	2a00      	cmp	r2, #0
 800e39a:	d048      	beq.n	800e42e <HAL_UART_IRQHandler+0x10a>
			if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 800e39c:	f013 0f20 	tst.w	r3, #32
 800e3a0:	d002      	beq.n	800e3a8 <HAL_UART_IRQHandler+0x84>
 800e3a2:	f011 0f20 	tst.w	r1, #32
 800e3a6:	d124      	bne.n	800e3f2 <HAL_UART_IRQHandler+0xce>
			dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e3a8:	6823      	ldr	r3, [r4, #0]
 800e3aa:	695b      	ldr	r3, [r3, #20]
 800e3ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
			if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest) {
 800e3b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e3b2:	f012 0f08 	tst.w	r2, #8
 800e3b6:	d100      	bne.n	800e3ba <HAL_UART_IRQHandler+0x96>
 800e3b8:	b33b      	cbz	r3, 800e40a <HAL_UART_IRQHandler+0xe6>
				UART_EndRxTransfer(huart);
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f7ff fbb9 	bl	800db32 <UART_EndRxTransfer>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 800e3c0:	6823      	ldr	r3, [r4, #0]
 800e3c2:	695a      	ldr	r2, [r3, #20]
 800e3c4:	f012 0f40 	tst.w	r2, #64	; 0x40
 800e3c8:	d01b      	beq.n	800e402 <HAL_UART_IRQHandler+0xde>
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3ca:	695a      	ldr	r2, [r3, #20]
 800e3cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3d0:	615a      	str	r2, [r3, #20]
					if (huart->hdmarx != NULL) {
 800e3d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3d4:	b18b      	cbz	r3, 800e3fa <HAL_UART_IRQHandler+0xd6>
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e3d6:	4a1a      	ldr	r2, [pc, #104]	; (800e440 <HAL_UART_IRQHandler+0x11c>)
 800e3d8:	651a      	str	r2, [r3, #80]	; 0x50
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 800e3da:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e3dc:	f7fb f890 	bl	8009500 <HAL_DMA_Abort_IT>
 800e3e0:	b328      	cbz	r0, 800e42e <HAL_UART_IRQHandler+0x10a>
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e3e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e3e4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e3e6:	4798      	blx	r3
 800e3e8:	bd10      	pop	{r4, pc}
			UART_Receive_IT(huart);
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	f7ff ff1c 	bl	800e228 <UART_Receive_IT>
			return;
 800e3f0:	bd10      	pop	{r4, pc}
				UART_Receive_IT(huart);
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	f7ff ff18 	bl	800e228 <UART_Receive_IT>
 800e3f8:	e7d6      	b.n	800e3a8 <HAL_UART_IRQHandler+0x84>
						HAL_UART_ErrorCallback(huart);
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f7ff ff64 	bl	800e2c8 <HAL_UART_ErrorCallback>
 800e400:	bd10      	pop	{r4, pc}
					HAL_UART_ErrorCallback(huart);
 800e402:	4620      	mov	r0, r4
 800e404:	f7ff ff60 	bl	800e2c8 <HAL_UART_ErrorCallback>
 800e408:	bd10      	pop	{r4, pc}
				HAL_UART_ErrorCallback(huart);
 800e40a:	4620      	mov	r0, r4
 800e40c:	f7ff ff5c 	bl	800e2c8 <HAL_UART_ErrorCallback>
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e410:	2300      	movs	r3, #0
 800e412:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e414:	bd10      	pop	{r4, pc}
	if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET)) {
 800e416:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e41a:	d002      	beq.n	800e422 <HAL_UART_IRQHandler+0xfe>
 800e41c:	f011 0f80 	tst.w	r1, #128	; 0x80
 800e420:	d106      	bne.n	800e430 <HAL_UART_IRQHandler+0x10c>
	if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET)) {
 800e422:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e426:	d002      	beq.n	800e42e <HAL_UART_IRQHandler+0x10a>
 800e428:	f011 0f40 	tst.w	r1, #64	; 0x40
 800e42c:	d104      	bne.n	800e438 <HAL_UART_IRQHandler+0x114>
 800e42e:	bd10      	pop	{r4, pc}
		UART_Transmit_IT(huart);
 800e430:	4620      	mov	r0, r4
 800e432:	f7ff fb8c 	bl	800db4e <UART_Transmit_IT>
		return;
 800e436:	bd10      	pop	{r4, pc}
		UART_EndTransmit_IT(huart);
 800e438:	4620      	mov	r0, r4
 800e43a:	f7ff fec3 	bl	800e1c4 <UART_EndTransmit_IT>
		return;
 800e43e:	e7f6      	b.n	800e42e <HAL_UART_IRQHandler+0x10a>
 800e440:	0800e445 	.word	0x0800e445

0800e444 <UART_DMAAbortOnError>:
{
 800e444:	b508      	push	{r3, lr}
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e446:	6b80      	ldr	r0, [r0, #56]	; 0x38
	huart->RxXferCount = 0U;
 800e448:	2300      	movs	r3, #0
 800e44a:	85c3      	strh	r3, [r0, #46]	; 0x2e
	huart->TxXferCount = 0U;
 800e44c:	84c3      	strh	r3, [r0, #38]	; 0x26
	HAL_UART_ErrorCallback(huart);
 800e44e:	f7ff ff3b 	bl	800e2c8 <HAL_UART_ErrorCallback>
 800e452:	bd08      	pop	{r3, pc}

0800e454 <HAL_UART_GetState>:
	temp1 = huart->gState;
 800e454:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
	temp2 = huart->RxState;
 800e458:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
}
 800e45c:	4318      	orrs	r0, r3
 800e45e:	4770      	bx	lr

0800e460 <MotionFX_manager_init>:
 * @brief  Initialises MotionFX algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 800e460:	b510      	push	{r4, lr}
 800e462:	b084      	sub	sp, #16
	char acc_orientation[4];
	char gyro_orientation[4];
	char mag_orientation[4];

	acc_orientation[0] = 'n';
 800e464:	226e      	movs	r2, #110	; 0x6e
 800e466:	f88d 200c 	strb.w	r2, [sp, #12]
	acc_orientation[1] = 'w';
 800e46a:	2177      	movs	r1, #119	; 0x77
 800e46c:	f88d 100d 	strb.w	r1, [sp, #13]
	acc_orientation[2] = 'u';
 800e470:	2375      	movs	r3, #117	; 0x75
 800e472:	f88d 300e 	strb.w	r3, [sp, #14]

	gyro_orientation[0] = 'n';
 800e476:	f88d 2008 	strb.w	r2, [sp, #8]
	gyro_orientation[1] = 'w';
 800e47a:	f88d 1009 	strb.w	r1, [sp, #9]
	gyro_orientation[2] = 'u';
 800e47e:	f88d 300a 	strb.w	r3, [sp, #10]

	mag_orientation[0] = 'n';
 800e482:	f88d 2004 	strb.w	r2, [sp, #4]
	mag_orientation[1] = 'e';
 800e486:	2265      	movs	r2, #101	; 0x65
 800e488:	f88d 2005 	strb.w	r2, [sp, #5]
	mag_orientation[2] = 'u';
 800e48c:	f88d 3006 	strb.w	r3, [sp, #6]

#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
	MotionFX_initialize();
 800e490:	f00b fdf6 	bl	801a080 <MotionFX_initialize>

	MotionFX_getKnobs(ipKnobs);
 800e494:	4c16      	ldr	r4, [pc, #88]	; (800e4f0 <MotionFX_manager_init+0x90>)
 800e496:	4620      	mov	r0, r4
 800e498:	f00c f880 	bl	801a59c <MotionFX_getKnobs>

	(void)strcpy(ipKnobs->acc_orientation, acc_orientation);
 800e49c:	a903      	add	r1, sp, #12
 800e49e:	f104 0029 	add.w	r0, r4, #41	; 0x29
 800e4a2:	f011 fb0b 	bl	801fabc <strcpy>
	(void)strcpy(ipKnobs->gyro_orientation, gyro_orientation);
 800e4a6:	a902      	add	r1, sp, #8
 800e4a8:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 800e4ac:	f011 fb06 	bl	801fabc <strcpy>
	(void)strcpy(ipKnobs->mag_orientation, mag_orientation);
 800e4b0:	a901      	add	r1, sp, #4
 800e4b2:	f104 0031 	add.w	r0, r4, #49	; 0x31
 800e4b6:	f011 fb01 	bl	801fabc <strcpy>

	ipKnobs->gbias_acc_th_sc_6X = GBIAS_ACC_TH_SC_6X;
 800e4ba:	490e      	ldr	r1, [pc, #56]	; (800e4f4 <MotionFX_manager_init+0x94>)
 800e4bc:	6161      	str	r1, [r4, #20]
	ipKnobs->gbias_gyro_th_sc_6X = GBIAS_GYRO_TH_SC_6X;
 800e4be:	4a0e      	ldr	r2, [pc, #56]	; (800e4f8 <MotionFX_manager_init+0x98>)
 800e4c0:	61a2      	str	r2, [r4, #24]
	ipKnobs->gbias_mag_th_sc_6X = GBIAS_MAG_TH_SC_6X;
 800e4c2:	4b0e      	ldr	r3, [pc, #56]	; (800e4fc <MotionFX_manager_init+0x9c>)
 800e4c4:	6123      	str	r3, [r4, #16]

	ipKnobs->gbias_acc_th_sc_9X = GBIAS_ACC_TH_SC_9X;
 800e4c6:	6221      	str	r1, [r4, #32]
	ipKnobs->gbias_gyro_th_sc_9X = GBIAS_GYRO_TH_SC_9X;
 800e4c8:	6262      	str	r2, [r4, #36]	; 0x24
	ipKnobs->gbias_mag_th_sc_9X = GBIAS_MAG_TH_SC_9X;
 800e4ca:	61e3      	str	r3, [r4, #28]

	ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	ipKnobs->LMode = 1;
 800e4d2:	7323      	strb	r3, [r4, #12]
	ipKnobs->modx = DECIMATION;
 800e4d4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

	MotionFX_setKnobs(ipKnobs);
 800e4d8:	4620      	mov	r0, r4
 800e4da:	f00b fffb 	bl	801a4d4 <MotionFX_setKnobs>

	MotionFX_enable_6X(MFX_ENGINE_DISABLE);
 800e4de:	2000      	movs	r0, #0
 800e4e0:	f00c f8b2 	bl	801a648 <MotionFX_enable_6X>
	MotionFX_enable_9X(MFX_ENGINE_DISABLE);
 800e4e4:	2000      	movs	r0, #0
 800e4e6:	f00c f8d3 	bl	801a690 <MotionFX_enable_9X>
	MotionFX_CM0P_enable_gbias(MFX_CM0P_ENGINE_ENABLE);
	MotionFX_CM0P_enable_euler(MFX_CM0P_ENGINE_ENABLE);
	MotionFX_CM0P_enable_6X(MFX_CM0P_ENGINE_DISABLE);
	MotionFX_CM0P_enable_9X(MFX_CM0P_ENGINE_DISABLE);
#endif
}
 800e4ea:	b004      	add	sp, #16
 800e4ec:	bd10      	pop	{r4, pc}
 800e4ee:	bf00      	nop
 800e4f0:	200025e0 	.word	0x200025e0
 800e4f4:	3ac88a48 	.word	0x3ac88a48
 800e4f8:	3b83126f 	.word	0x3b83126f
 800e4fc:	3b449ba6 	.word	0x3b449ba6

0800e500 <MotionFX_manager_run>:
 * @param  None
 * @retval None
 */
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 800e500:	b538      	push	{r3, r4, r5, lr}
 800e502:	ed2d 8b02 	vpush	{d8}
	if (discardedCount == sampleToDiscard) {
 800e506:	4b0e      	ldr	r3, [pc, #56]	; (800e540 <MotionFX_manager_run+0x40>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4a0e      	ldr	r2, [pc, #56]	; (800e544 <MotionFX_manager_run+0x44>)
 800e50c:	6812      	ldr	r2, [r2, #0]
 800e50e:	4293      	cmp	r3, r2
 800e510:	d005      	beq.n	800e51e <MotionFX_manager_run+0x1e>
		MotionFX_propagate(data_out, data_in, delta_time);
		MotionFX_update(data_out, data_in, delta_time, NULL);
	}else  {
		discardedCount++;
 800e512:	3301      	adds	r3, #1
 800e514:	4a0a      	ldr	r2, [pc, #40]	; (800e540 <MotionFX_manager_run+0x40>)
 800e516:	6013      	str	r3, [r2, #0]
	}
}
 800e518:	ecbd 8b02 	vpop	{d8}
 800e51c:	bd38      	pop	{r3, r4, r5, pc}
 800e51e:	eeb0 8a40 	vmov.f32	s16, s0
 800e522:	460c      	mov	r4, r1
 800e524:	4605      	mov	r5, r0
		MotionFX_propagate(data_out, data_in, delta_time);
 800e526:	4601      	mov	r1, r0
 800e528:	4620      	mov	r0, r4
 800e52a:	f00c faad 	bl	801aa88 <MotionFX_propagate>
		MotionFX_update(data_out, data_in, delta_time, NULL);
 800e52e:	2200      	movs	r2, #0
 800e530:	eeb0 0a48 	vmov.f32	s0, s16
 800e534:	4629      	mov	r1, r5
 800e536:	4620      	mov	r0, r4
 800e538:	f00c f8d6 	bl	801a6e8 <MotionFX_update>
 800e53c:	e7ec      	b.n	800e518 <MotionFX_manager_run+0x18>
 800e53e:	bf00      	nop
 800e540:	200025dc 	.word	0x200025dc
 800e544:	20001488 	.word	0x20001488

0800e548 <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 800e548:	b508      	push	{r3, lr}
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
	MotionFX_enable_6X(MFX_ENGINE_ENABLE);
 800e54a:	2001      	movs	r0, #1
 800e54c:	f00c f87c 	bl	801a648 <MotionFX_enable_6X>
 800e550:	bd08      	pop	{r3, pc}

0800e552 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 800e552:	b508      	push	{r3, lr}
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
	MotionFX_enable_6X(MFX_ENGINE_DISABLE);
 800e554:	2000      	movs	r0, #0
 800e556:	f00c f877 	bl	801a648 <MotionFX_enable_6X>
 800e55a:	bd08      	pop	{r3, pc}

0800e55c <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 800e55c:	b508      	push	{r3, lr}
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
	MotionFX_enable_9X(MFX_ENGINE_ENABLE);
 800e55e:	2001      	movs	r0, #1
 800e560:	f00c f896 	bl	801a690 <MotionFX_enable_9X>
 800e564:	bd08      	pop	{r3, pc}

0800e566 <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 800e566:	b508      	push	{r3, lr}
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
	MotionFX_enable_9X(MFX_ENGINE_DISABLE);
 800e568:	2000      	movs	r0, #0
 800e56a:	f00c f891 	bl	801a690 <MotionFX_enable_9X>
 800e56e:	bd08      	pop	{r3, pc}

0800e570 <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 800e570:	b510      	push	{r4, lr}
 800e572:	460c      	mov	r4, r1
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
	*length = (int)MotionFX_GetLibVersion(version);
 800e574:	f00d fc6a 	bl	801be4c <MotionFX_GetLibVersion>
 800e578:	6020      	str	r0, [r4, #0]
 800e57a:	bd10      	pop	{r4, pc}

0800e57c <MotionFX_manager_MagCal_run>:
 * @param  None
 * @retval None
 */
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 800e57c:	b510      	push	{r4, lr}
 800e57e:	460c      	mov	r4, r1
	MotionFX_MagCal_run(data_in);
 800e580:	f00d fb18 	bl	801bbb4 <MotionFX_MagCal_run>
	MotionFX_MagCal_getParams(data_out);
 800e584:	4620      	mov	r0, r4
 800e586:	f00d fc33 	bl	801bdf0 <MotionFX_MagCal_getParams>
 800e58a:	bd10      	pop	{r4, pc}

0800e58c <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 800e58c:	b508      	push	{r3, lr}
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
	MotionFX_MagCal_init(sampletime, 1);
 800e58e:	2101      	movs	r1, #1
 800e590:	f00d fa12 	bl	801b9b8 <MotionFX_MagCal_init>
 800e594:	bd08      	pop	{r3, pc}

0800e596 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 800e596:	b508      	push	{r3, lr}
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
	MotionFX_MagCal_init(sampletime, 0);
 800e598:	2100      	movs	r1, #0
 800e59a:	f00d fa0d 	bl	801b9b8 <MotionFX_MagCal_init>
 800e59e:	bd08      	pop	{r3, pc}

0800e5a0 <MotionFX_LoadMagCalFromNVM>:
	RecallCalibrationFromMemory(dataSize / 4, (uint32_t *)data);
	return (char)0;
#else
	return (char)1;
#endif
}
 800e5a0:	2001      	movs	r0, #1
 800e5a2:	4770      	bx	lr

0800e5a4 <MotionFX_SaveMagCalInNVM>:
	SaveCalibrationToMemory(dataSize / 4, (uint32_t *)data);
	return (char)0;
#else
	return (char)1;
#endif
}
 800e5a4:	2001      	movs	r0, #1
 800e5a6:	4770      	bx	lr

0800e5a8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800e5a8:	b500      	push	{lr}
 800e5aa:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	9300      	str	r3, [sp, #0]
 800e5b0:	9301      	str	r3, [sp, #4]
 800e5b2:	9302      	str	r3, [sp, #8]
 800e5b4:	9303      	str	r3, [sp, #12]

	/**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800e5b6:	4814      	ldr	r0, [pc, #80]	; (800e608 <MX_ADC1_Init+0x60>)
 800e5b8:	4a14      	ldr	r2, [pc, #80]	; (800e60c <MX_ADC1_Init+0x64>)
 800e5ba:	6002      	str	r2, [r0, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800e5bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e5c0:	6042      	str	r2, [r0, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e5c2:	6083      	str	r3, [r0, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800e5c4:	6103      	str	r3, [r0, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800e5c6:	6183      	str	r3, [r0, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e5c8:	6203      	str	r3, [r0, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e5ca:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e5cc:	4a10      	ldr	r2, [pc, #64]	; (800e610 <MX_ADC1_Init+0x68>)
 800e5ce:	6282      	str	r2, [r0, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e5d0:	60c3      	str	r3, [r0, #12]
	hadc1.Init.NbrOfConversion = 1;
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	61c2      	str	r2, [r0, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800e5d6:	6303      	str	r3, [r0, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e5d8:	6142      	str	r2, [r0, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800e5da:	f7fa f9c5 	bl	8008968 <HAL_ADC_Init>
 800e5de:	b968      	cbnz	r0, 800e5fc <MX_ADC1_Init+0x54>
		Error_Handler();
	}
	/**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 800e5e0:	2306      	movs	r3, #6
 800e5e2:	9300      	str	r3, [sp, #0]
	sConfig.Rank = 1;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	9301      	str	r3, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800e5ec:	4669      	mov	r1, sp
 800e5ee:	4806      	ldr	r0, [pc, #24]	; (800e608 <MX_ADC1_Init+0x60>)
 800e5f0:	f7fa fb68 	bl	8008cc4 <HAL_ADC_ConfigChannel>
 800e5f4:	b928      	cbnz	r0, 800e602 <MX_ADC1_Init+0x5a>
		Error_Handler();
	}
}
 800e5f6:	b005      	add	sp, #20
 800e5f8:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800e5fc:	f000 fede 	bl	800f3bc <Error_Handler>
 800e600:	e7ee      	b.n	800e5e0 <MX_ADC1_Init+0x38>
		Error_Handler();
 800e602:	f000 fedb 	bl	800f3bc <Error_Handler>
}
 800e606:	e7f6      	b.n	800e5f6 <MX_ADC1_Init+0x4e>
 800e608:	20002a78 	.word	0x20002a78
 800e60c:	40012000 	.word	0x40012000
 800e610:	0f000001 	.word	0x0f000001

0800e614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800e614:	b510      	push	{r4, lr}
 800e616:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800e618:	2300      	movs	r3, #0
 800e61a:	9303      	str	r3, [sp, #12]
 800e61c:	9304      	str	r3, [sp, #16]
 800e61e:	9305      	str	r3, [sp, #20]
 800e620:	9306      	str	r3, [sp, #24]
 800e622:	9307      	str	r3, [sp, #28]
	if (adcHandle->Instance == ADC1) {
 800e624:	6802      	ldr	r2, [r0, #0]
 800e626:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e62a:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800e62e:	429a      	cmp	r2, r3
 800e630:	d001      	beq.n	800e636 <HAL_ADC_MspInit+0x22>
		HAL_NVIC_EnableIRQ(ADC_IRQn);
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 800e632:	b008      	add	sp, #32
 800e634:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 800e636:	2400      	movs	r4, #0
 800e638:	9401      	str	r4, [sp, #4]
 800e63a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800e63e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e644:	645a      	str	r2, [r3, #68]	; 0x44
 800e646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e648:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800e64c:	9201      	str	r2, [sp, #4]
 800e64e:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800e650:	9402      	str	r4, [sp, #8]
 800e652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e654:	f042 0201 	orr.w	r2, r2, #1
 800e658:	631a      	str	r2, [r3, #48]	; 0x30
 800e65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e65c:	f003 0301 	and.w	r3, r3, #1
 800e660:	9302      	str	r3, [sp, #8]
 800e662:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = ADC6_Pin;
 800e664:	2340      	movs	r3, #64	; 0x40
 800e666:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e668:	2303      	movs	r3, #3
 800e66a:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 800e66c:	a903      	add	r1, sp, #12
 800e66e:	4806      	ldr	r0, [pc, #24]	; (800e688 <HAL_ADC_MspInit+0x74>)
 800e670:	f7fb f848 	bl	8009704 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800e674:	4622      	mov	r2, r4
 800e676:	4621      	mov	r1, r4
 800e678:	2012      	movs	r0, #18
 800e67a:	f7fa fc29 	bl	8008ed0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ADC_IRQn);
 800e67e:	2012      	movs	r0, #18
 800e680:	f7fa fc6a 	bl	8008f58 <HAL_NVIC_EnableIRQ>
}
 800e684:	e7d5      	b.n	800e632 <HAL_ADC_MspInit+0x1e>
 800e686:	bf00      	nop
 800e688:	40020000 	.word	0x40020000
 800e68c:	00000000 	.word	0x00000000

0800e690 <floatToInt>:
 * @param  out_value the pointer to the output integer structure
 * @param  dec_prec the decimal precision to be used
 * @retval None
 */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 800e690:	b5d0      	push	{r4, r6, r7, lr}
 800e692:	ed2d 8b02 	vpush	{d8}
 800e696:	4604      	mov	r4, r0
	if (in >= 0.0f) {
 800e698:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6a0:	db22      	blt.n	800e6e8 <floatToInt+0x58>
		out_value->sign = 0;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	7003      	strb	r3, [r0, #0]
	}else{
		out_value->sign = 1;
		in = -in;
	}

	out_value->out_int = (int32_t)in;
 800e6a6:	eebd 8ac0 	vcvt.s32.f32	s16, s0
 800e6aa:	ed84 8a01 	vstr	s16, [r4, #4]
	in = in - (float)(out_value->out_int);
 800e6ae:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 800e6b2:	ee30 8a48 	vsub.f32	s16, s0, s16
	out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 800e6b6:	4608      	mov	r0, r1
 800e6b8:	f7f1 ff3c 	bl	8000534 <__aeabi_i2d>
 800e6bc:	ec41 0b11 	vmov	d1, r0, r1
 800e6c0:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800e6f8 <floatToInt+0x68>
 800e6c4:	f00d fe10 	bl	801c2e8 <pow>
 800e6c8:	ec57 6b10 	vmov	r6, r7, d0
 800e6cc:	ee18 0a10 	vmov	r0, s16
 800e6d0:	f7f1 ff42 	bl	8000558 <__aeabi_f2d>
 800e6d4:	4632      	mov	r2, r6
 800e6d6:	463b      	mov	r3, r7
 800e6d8:	f7f1 ff92 	bl	8000600 <__aeabi_dmul>
 800e6dc:	f7f2 fa40 	bl	8000b60 <__aeabi_d2iz>
 800e6e0:	60a0      	str	r0, [r4, #8]
}
 800e6e2:	ecbd 8b02 	vpop	{d8}
 800e6e6:	bdd0      	pop	{r4, r6, r7, pc}
		out_value->sign = 1;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	7003      	strb	r3, [r0, #0]
		in = -in;
 800e6ec:	eeb1 0a40 	vneg.f32	s0, s0
 800e6f0:	e7d9      	b.n	800e6a6 <floatToInt+0x16>
 800e6f2:	bf00      	nop
 800e6f4:	f3af 8000 	nop.w
 800e6f8:	00000000 	.word	0x00000000
 800e6fc:	40240000 	.word	0x40240000

0800e700 <MX_IKS01A2_DataLogTerminal_Init>:
{
 800e700:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e702:	b089      	sub	sp, #36	; 0x24
	BSP_LED_Init(LED2);
 800e704:	2000      	movs	r0, #0
 800e706:	f7f9 fb35 	bl	8007d74 <BSP_LED_Init>
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800e70a:	2101      	movs	r1, #1
 800e70c:	2000      	movs	r0, #0
 800e70e:	f7f9 fb71 	bl	8007df4 <BSP_PB_Init>
	IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 800e712:	2101      	movs	r1, #1
 800e714:	2000      	movs	r0, #0
 800e716:	f7f9 f97f 	bl	8007a18 <IKS01A2_MOTION_SENSOR_Init>
	IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_ACC_0, MOTION_ACCELERO);
 800e71a:	2102      	movs	r1, #2
 800e71c:	2001      	movs	r0, #1
 800e71e:	f7f9 f97b 	bl	8007a18 <IKS01A2_MOTION_SENSOR_Init>
	IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800e722:	2104      	movs	r1, #4
 800e724:	2002      	movs	r0, #2
 800e726:	f7f9 f977 	bl	8007a18 <IKS01A2_MOTION_SENSOR_Init>
	for (i = 0; i < IKS01A2_MOTION_INSTANCES_NBR; i++) {
 800e72a:	2600      	movs	r6, #0
 800e72c:	e05d      	b.n	800e7ea <MX_IKS01A2_DataLogTerminal_Init+0xea>
		IKS01A2_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 800e72e:	4f62      	ldr	r7, [pc, #392]	; (800e8b8 <MX_IKS01A2_DataLogTerminal_Init+0x1b8>)
 800e730:	00f3      	lsls	r3, r6, #3
 800e732:	1b9b      	subs	r3, r3, r6
 800e734:	009d      	lsls	r5, r3, #2
 800e736:	197c      	adds	r4, r7, r5
 800e738:	4621      	mov	r1, r4
 800e73a:	4630      	mov	r0, r6
 800e73c:	f7f9 fa34 	bl	8007ba8 <IKS01A2_MOTION_SENSOR_GetCapabilities>
			 i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800e740:	5d7b      	ldrb	r3, [r7, r5]
 800e742:	7862      	ldrb	r2, [r4, #1]
 800e744:	78a1      	ldrb	r1, [r4, #2]
 800e746:	78e0      	ldrb	r0, [r4, #3]
		snprintf(dataOut, MAX_BUF_SIZE,
 800e748:	4d5c      	ldr	r5, [pc, #368]	; (800e8bc <MX_IKS01A2_DataLogTerminal_Init+0x1bc>)
 800e74a:	9003      	str	r0, [sp, #12]
 800e74c:	9102      	str	r1, [sp, #8]
 800e74e:	9201      	str	r2, [sp, #4]
 800e750:	9300      	str	r3, [sp, #0]
 800e752:	4633      	mov	r3, r6
 800e754:	4a5a      	ldr	r2, [pc, #360]	; (800e8c0 <MX_IKS01A2_DataLogTerminal_Init+0x1c0>)
 800e756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e75a:	4628      	mov	r0, r5
 800e75c:	f011 f97a 	bl	801fa54 <sniprintf>
		printf("%s", dataOut);
 800e760:	4f58      	ldr	r7, [pc, #352]	; (800e8c4 <MX_IKS01A2_DataLogTerminal_Init+0x1c4>)
 800e762:	4629      	mov	r1, r5
 800e764:	4638      	mov	r0, r7
 800e766:	f011 f827 	bl	801f7b8 <iprintf>
		floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 800e76a:	2103      	movs	r1, #3
 800e76c:	a805      	add	r0, sp, #20
 800e76e:	ed94 0a05 	vldr	s0, [r4, #20]
 800e772:	f7ff ff8d 	bl	800e690 <floatToInt>
			 (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800e776:	68a3      	ldr	r3, [r4, #8]
		snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800e778:	9301      	str	r3, [sp, #4]
 800e77a:	9b07      	ldr	r3, [sp, #28]
 800e77c:	9300      	str	r3, [sp, #0]
 800e77e:	9b06      	ldr	r3, [sp, #24]
 800e780:	4a51      	ldr	r2, [pc, #324]	; (800e8c8 <MX_IKS01A2_DataLogTerminal_Init+0x1c8>)
 800e782:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e786:	4628      	mov	r0, r5
 800e788:	f011 f964 	bl	801fa54 <sniprintf>
		printf("%s", dataOut);
 800e78c:	4629      	mov	r1, r5
 800e78e:	4638      	mov	r0, r7
 800e790:	f011 f812 	bl	801f7b8 <iprintf>
		floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 800e794:	2103      	movs	r1, #3
 800e796:	a805      	add	r0, sp, #20
 800e798:	ed94 0a04 	vldr	s0, [r4, #16]
 800e79c:	f7ff ff78 	bl	800e690 <floatToInt>
			 (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800e7a0:	6863      	ldr	r3, [r4, #4]
		snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800e7a2:	9301      	str	r3, [sp, #4]
 800e7a4:	9b07      	ldr	r3, [sp, #28]
 800e7a6:	9300      	str	r3, [sp, #0]
 800e7a8:	9b06      	ldr	r3, [sp, #24]
 800e7aa:	4a48      	ldr	r2, [pc, #288]	; (800e8cc <MX_IKS01A2_DataLogTerminal_Init+0x1cc>)
 800e7ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	f011 f94f 	bl	801fa54 <sniprintf>
		printf("%s", dataOut);
 800e7b6:	4629      	mov	r1, r5
 800e7b8:	4638      	mov	r0, r7
 800e7ba:	f010 fffd 	bl	801f7b8 <iprintf>
		floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 800e7be:	2103      	movs	r1, #3
 800e7c0:	a805      	add	r0, sp, #20
 800e7c2:	ed94 0a06 	vldr	s0, [r4, #24]
 800e7c6:	f7ff ff63 	bl	800e690 <floatToInt>
			 (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800e7ca:	68e3      	ldr	r3, [r4, #12]
		snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800e7cc:	9301      	str	r3, [sp, #4]
 800e7ce:	9b07      	ldr	r3, [sp, #28]
 800e7d0:	9300      	str	r3, [sp, #0]
 800e7d2:	9b06      	ldr	r3, [sp, #24]
 800e7d4:	4a3e      	ldr	r2, [pc, #248]	; (800e8d0 <MX_IKS01A2_DataLogTerminal_Init+0x1d0>)
 800e7d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e7da:	4628      	mov	r0, r5
 800e7dc:	f011 f93a 	bl	801fa54 <sniprintf>
		printf("%s", dataOut);
 800e7e0:	4629      	mov	r1, r5
 800e7e2:	4638      	mov	r0, r7
 800e7e4:	f010 ffe8 	bl	801f7b8 <iprintf>
	for (i = 0; i < IKS01A2_MOTION_INSTANCES_NBR; i++) {
 800e7e8:	3601      	adds	r6, #1
 800e7ea:	2e02      	cmp	r6, #2
 800e7ec:	d99f      	bls.n	800e72e <MX_IKS01A2_DataLogTerminal_Init+0x2e>
	IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 800e7ee:	2105      	movs	r1, #5
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	f7f8 fe75 	bl	80074e0 <IKS01A2_ENV_SENSOR_Init>
	IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_TEMPERATURE | ENV_PRESSURE);
 800e7f6:	2103      	movs	r1, #3
 800e7f8:	2001      	movs	r0, #1
 800e7fa:	f7f8 fe71 	bl	80074e0 <IKS01A2_ENV_SENSOR_Init>
	for (i = 0; i < IKS01A2_ENV_INSTANCES_NBR; i++) {
 800e7fe:	2600      	movs	r6, #0
 800e800:	e055      	b.n	800e8ae <MX_IKS01A2_DataLogTerminal_Init+0x1ae>
		IKS01A2_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 800e802:	4f34      	ldr	r7, [pc, #208]	; (800e8d4 <MX_IKS01A2_DataLogTerminal_Init+0x1d4>)
 800e804:	0134      	lsls	r4, r6, #4
 800e806:	193d      	adds	r5, r7, r4
 800e808:	4629      	mov	r1, r5
 800e80a:	4630      	mov	r0, r6
 800e80c:	f7f8 fefc 	bl	8007608 <IKS01A2_ENV_SENSOR_GetCapabilities>
			 i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800e810:	5d3b      	ldrb	r3, [r7, r4]
 800e812:	786a      	ldrb	r2, [r5, #1]
 800e814:	78a9      	ldrb	r1, [r5, #2]
 800e816:	78e8      	ldrb	r0, [r5, #3]
		snprintf(dataOut, MAX_BUF_SIZE,
 800e818:	4c28      	ldr	r4, [pc, #160]	; (800e8bc <MX_IKS01A2_DataLogTerminal_Init+0x1bc>)
 800e81a:	9003      	str	r0, [sp, #12]
 800e81c:	9102      	str	r1, [sp, #8]
 800e81e:	9201      	str	r2, [sp, #4]
 800e820:	9300      	str	r3, [sp, #0]
 800e822:	4633      	mov	r3, r6
 800e824:	4a2c      	ldr	r2, [pc, #176]	; (800e8d8 <MX_IKS01A2_DataLogTerminal_Init+0x1d8>)
 800e826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e82a:	4620      	mov	r0, r4
 800e82c:	f011 f912 	bl	801fa54 <sniprintf>
		printf("%s", dataOut);
 800e830:	4f24      	ldr	r7, [pc, #144]	; (800e8c4 <MX_IKS01A2_DataLogTerminal_Init+0x1c4>)
 800e832:	4621      	mov	r1, r4
 800e834:	4638      	mov	r0, r7
 800e836:	f010 ffbf 	bl	801f7b8 <iprintf>
		floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 800e83a:	2103      	movs	r1, #3
 800e83c:	a805      	add	r0, sp, #20
 800e83e:	ed95 0a02 	vldr	s0, [r5, #8]
 800e842:	f7ff ff25 	bl	800e690 <floatToInt>
		snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800e846:	9b07      	ldr	r3, [sp, #28]
 800e848:	9300      	str	r3, [sp, #0]
 800e84a:	9b06      	ldr	r3, [sp, #24]
 800e84c:	4a23      	ldr	r2, [pc, #140]	; (800e8dc <MX_IKS01A2_DataLogTerminal_Init+0x1dc>)
 800e84e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e852:	4620      	mov	r0, r4
 800e854:	f011 f8fe 	bl	801fa54 <sniprintf>
		printf("%s", dataOut);
 800e858:	4621      	mov	r1, r4
 800e85a:	4638      	mov	r0, r7
 800e85c:	f010 ffac 	bl	801f7b8 <iprintf>
		floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 800e860:	2103      	movs	r1, #3
 800e862:	a805      	add	r0, sp, #20
 800e864:	ed95 0a03 	vldr	s0, [r5, #12]
 800e868:	f7ff ff12 	bl	800e690 <floatToInt>
		snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800e86c:	9b07      	ldr	r3, [sp, #28]
 800e86e:	9300      	str	r3, [sp, #0]
 800e870:	9b06      	ldr	r3, [sp, #24]
 800e872:	4a1b      	ldr	r2, [pc, #108]	; (800e8e0 <MX_IKS01A2_DataLogTerminal_Init+0x1e0>)
 800e874:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e878:	4620      	mov	r0, r4
 800e87a:	f011 f8eb 	bl	801fa54 <sniprintf>
		printf("%s", dataOut);
 800e87e:	4621      	mov	r1, r4
 800e880:	4638      	mov	r0, r7
 800e882:	f010 ff99 	bl	801f7b8 <iprintf>
		floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 800e886:	2103      	movs	r1, #3
 800e888:	a805      	add	r0, sp, #20
 800e88a:	ed95 0a01 	vldr	s0, [r5, #4]
 800e88e:	f7ff feff 	bl	800e690 <floatToInt>
		snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 800e892:	9b07      	ldr	r3, [sp, #28]
 800e894:	9300      	str	r3, [sp, #0]
 800e896:	9b06      	ldr	r3, [sp, #24]
 800e898:	4a12      	ldr	r2, [pc, #72]	; (800e8e4 <MX_IKS01A2_DataLogTerminal_Init+0x1e4>)
 800e89a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e89e:	4620      	mov	r0, r4
 800e8a0:	f011 f8d8 	bl	801fa54 <sniprintf>
		printf("%s", dataOut);
 800e8a4:	4621      	mov	r1, r4
 800e8a6:	4638      	mov	r0, r7
 800e8a8:	f010 ff86 	bl	801f7b8 <iprintf>
	for (i = 0; i < IKS01A2_ENV_INSTANCES_NBR; i++) {
 800e8ac:	3601      	adds	r6, #1
 800e8ae:	2e01      	cmp	r6, #1
 800e8b0:	d9a7      	bls.n	800e802 <MX_IKS01A2_DataLogTerminal_Init+0x102>
}
 800e8b2:	b009      	add	sp, #36	; 0x24
 800e8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	2000263c 	.word	0x2000263c
 800e8bc:	20002690 	.word	0x20002690
 800e8c0:	08021f48 	.word	0x08021f48
 800e8c4:	08021fbc 	.word	0x08021fbc
 800e8c8:	08021fc0 	.word	0x08021fc0
 800e8cc:	08021fec 	.word	0x08021fec
 800e8d0:	0802201c 	.word	0x0802201c
 800e8d4:	2000261c 	.word	0x2000261c
 800e8d8:	08022048 	.word	0x08022048
 800e8dc:	080220bc 	.word	0x080220bc
 800e8e0:	080220d8 	.word	0x080220d8
 800e8e4:	080220f8 	.word	0x080220f8

0800e8e8 <MX_X_CUBE_MEMS1_Init>:
{
 800e8e8:	b508      	push	{r3, lr}
	MX_IKS01A2_DataLogTerminal_Init();
 800e8ea:	f7ff ff09 	bl	800e700 <MX_IKS01A2_DataLogTerminal_Init>
 800e8ee:	bd08      	pop	{r3, pc}

0800e8f0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
void MX_DMA_Init(void)
{
 800e8f0:	b510      	push	{r4, lr}
 800e8f2:	b082      	sub	sp, #8
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800e8f4:	2400      	movs	r4, #0
 800e8f6:	9400      	str	r4, [sp, #0]
 800e8f8:	4b22      	ldr	r3, [pc, #136]	; (800e984 <MX_DMA_Init+0x94>)
 800e8fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8fc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800e900:	631a      	str	r2, [r3, #48]	; 0x30
 800e902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e904:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800e908:	9200      	str	r2, [sp, #0]
 800e90a:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_DMA2_CLK_ENABLE();
 800e90c:	9401      	str	r4, [sp, #4]
 800e90e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e910:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800e914:	631a      	str	r2, [r3, #48]	; 0x30
 800e916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e91c:	9301      	str	r3, [sp, #4]
 800e91e:	9b01      	ldr	r3, [sp, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800e920:	4622      	mov	r2, r4
 800e922:	4621      	mov	r1, r4
 800e924:	200b      	movs	r0, #11
 800e926:	f7fa fad3 	bl	8008ed0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800e92a:	200b      	movs	r0, #11
 800e92c:	f7fa fb14 	bl	8008f58 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800e930:	4622      	mov	r2, r4
 800e932:	4621      	mov	r1, r4
 800e934:	2010      	movs	r0, #16
 800e936:	f7fa facb 	bl	8008ed0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800e93a:	2010      	movs	r0, #16
 800e93c:	f7fa fb0c 	bl	8008f58 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800e940:	4622      	mov	r2, r4
 800e942:	4621      	mov	r1, r4
 800e944:	2011      	movs	r0, #17
 800e946:	f7fa fac3 	bl	8008ed0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800e94a:	2011      	movs	r0, #17
 800e94c:	f7fa fb04 	bl	8008f58 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800e950:	4622      	mov	r2, r4
 800e952:	4621      	mov	r1, r4
 800e954:	202f      	movs	r0, #47	; 0x2f
 800e956:	f7fa fabb 	bl	8008ed0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800e95a:	202f      	movs	r0, #47	; 0x2f
 800e95c:	f7fa fafc 	bl	8008f58 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800e960:	4622      	mov	r2, r4
 800e962:	4621      	mov	r1, r4
 800e964:	2039      	movs	r0, #57	; 0x39
 800e966:	f7fa fab3 	bl	8008ed0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800e96a:	2039      	movs	r0, #57	; 0x39
 800e96c:	f7fa faf4 	bl	8008f58 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800e970:	4622      	mov	r2, r4
 800e972:	4621      	mov	r1, r4
 800e974:	2045      	movs	r0, #69	; 0x45
 800e976:	f7fa faab 	bl	8008ed0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800e97a:	2045      	movs	r0, #69	; 0x45
 800e97c:	f7fa faec 	bl	8008f58 <HAL_NVIC_EnableIRQ>
}
 800e980:	b002      	add	sp, #8
 800e982:	bd10      	pop	{r4, pc}
 800e984:	40023800 	.word	0x40023800

0800e988 <MX_GPIO_Init>:
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void)
{
 800e988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e98a:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800e98c:	2400      	movs	r4, #0
 800e98e:	9405      	str	r4, [sp, #20]
 800e990:	9406      	str	r4, [sp, #24]
 800e992:	9407      	str	r4, [sp, #28]
 800e994:	9408      	str	r4, [sp, #32]
 800e996:	9409      	str	r4, [sp, #36]	; 0x24

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800e998:	9401      	str	r4, [sp, #4]
 800e99a:	4b2e      	ldr	r3, [pc, #184]	; (800ea54 <MX_GPIO_Init+0xcc>)
 800e99c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e99e:	f042 0204 	orr.w	r2, r2, #4
 800e9a2:	631a      	str	r2, [r3, #48]	; 0x30
 800e9a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9a6:	f002 0204 	and.w	r2, r2, #4
 800e9aa:	9201      	str	r2, [sp, #4]
 800e9ac:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800e9ae:	9402      	str	r4, [sp, #8]
 800e9b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e9b6:	631a      	str	r2, [r3, #48]	; 0x30
 800e9b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9ba:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800e9be:	9202      	str	r2, [sp, #8]
 800e9c0:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800e9c2:	9403      	str	r4, [sp, #12]
 800e9c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9c6:	f042 0201 	orr.w	r2, r2, #1
 800e9ca:	631a      	str	r2, [r3, #48]	; 0x30
 800e9cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9ce:	f002 0201 	and.w	r2, r2, #1
 800e9d2:	9203      	str	r2, [sp, #12]
 800e9d4:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800e9d6:	9404      	str	r4, [sp, #16]
 800e9d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9da:	f042 0202 	orr.w	r2, r2, #2
 800e9de:	631a      	str	r2, [r3, #48]	; 0x30
 800e9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9e2:	f003 0302 	and.w	r3, r3, #2
 800e9e6:	9304      	str	r3, [sp, #16]
 800e9e8:	9b04      	ldr	r3, [sp, #16]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 800e9ea:	4e1b      	ldr	r6, [pc, #108]	; (800ea58 <MX_GPIO_Init+0xd0>)
 800e9ec:	4622      	mov	r2, r4
 800e9ee:	2102      	movs	r1, #2
 800e9f0:	4630      	mov	r0, r6
 800e9f2:	f7fb f88f 	bl	8009b14 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | MOTOR_ENA_Pin, GPIO_PIN_RESET);
 800e9f6:	4f19      	ldr	r7, [pc, #100]	; (800ea5c <MX_GPIO_Init+0xd4>)
 800e9f8:	4622      	mov	r2, r4
 800e9fa:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800e9fe:	4638      	mov	r0, r7
 800ea00:	f7fb f888 	bl	8009b14 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 800ea04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ea08:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ea0a:	4b15      	ldr	r3, [pc, #84]	; (800ea60 <MX_GPIO_Init+0xd8>)
 800ea0c:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea0e:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ea10:	a905      	add	r1, sp, #20
 800ea12:	4630      	mov	r0, r6
 800ea14:	f7fa fe76 	bl	8009704 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
 800ea18:	2302      	movs	r3, #2
 800ea1a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ea1c:	2501      	movs	r5, #1
 800ea1e:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea20:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea22:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(MOTOR_ENB_GPIO_Port, &GPIO_InitStruct);
 800ea24:	a905      	add	r1, sp, #20
 800ea26:	4630      	mov	r0, r6
 800ea28:	f7fa fe6c 	bl	8009704 <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin */
	GPIO_InitStruct.Pin = LD2_Pin | MOTOR_ENA_Pin;
 800ea2c:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800ea30:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ea32:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea34:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea36:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ea38:	a905      	add	r1, sp, #20
 800ea3a:	4638      	mov	r0, r7
 800ea3c:	f7fa fe62 	bl	8009704 <HAL_GPIO_Init>

	/* Initialize LED */
	BSP_LED_Init(LED2);
 800ea40:	4620      	mov	r0, r4
 800ea42:	f7f9 f997 	bl	8007d74 <BSP_LED_Init>

	/* Initialize push button */
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800ea46:	4629      	mov	r1, r5
 800ea48:	4620      	mov	r0, r4
 800ea4a:	f7f9 f9d3 	bl	8007df4 <BSP_PB_Init>
}
 800ea4e:	b00b      	add	sp, #44	; 0x2c
 800ea50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea52:	bf00      	nop
 800ea54:	40023800 	.word	0x40023800
 800ea58:	40020800 	.word	0x40020800
 800ea5c:	40020000 	.word	0x40020000
 800ea60:	10210000 	.word	0x10210000

0800ea64 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800ea64:	b508      	push	{r3, lr}
	hi2c1.Instance = I2C1;
 800ea66:	480b      	ldr	r0, [pc, #44]	; (800ea94 <MX_I2C1_Init+0x30>)
 800ea68:	4b0b      	ldr	r3, [pc, #44]	; (800ea98 <MX_I2C1_Init+0x34>)
 800ea6a:	6003      	str	r3, [r0, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800ea6c:	4b0b      	ldr	r3, [pc, #44]	; (800ea9c <MX_I2C1_Init+0x38>)
 800ea6e:	6043      	str	r3, [r0, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800ea70:	2300      	movs	r3, #0
 800ea72:	6083      	str	r3, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800ea74:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ea76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ea7a:	6102      	str	r2, [r0, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ea7c:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800ea7e:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ea80:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ea82:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800ea84:	f7fb fcca 	bl	800a41c <HAL_I2C_Init>
 800ea88:	b900      	cbnz	r0, 800ea8c <MX_I2C1_Init+0x28>
 800ea8a:	bd08      	pop	{r3, pc}
		Error_Handler();
 800ea8c:	f000 fc96 	bl	800f3bc <Error_Handler>
	}
}
 800ea90:	e7fb      	b.n	800ea8a <MX_I2C1_Init+0x26>
 800ea92:	bf00      	nop
 800ea94:	20002b20 	.word	0x20002b20
 800ea98:	40005400 	.word	0x40005400
 800ea9c:	00061a80 	.word	0x00061a80

0800eaa0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800eaa0:	b570      	push	{r4, r5, r6, lr}
 800eaa2:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	9303      	str	r3, [sp, #12]
 800eaa8:	9304      	str	r3, [sp, #16]
 800eaaa:	9305      	str	r3, [sp, #20]
 800eaac:	9306      	str	r3, [sp, #24]
 800eaae:	9307      	str	r3, [sp, #28]
	if (i2cHandle->Instance == I2C1) {
 800eab0:	6802      	ldr	r2, [r0, #0]
 800eab2:	4b38      	ldr	r3, [pc, #224]	; (800eb94 <HAL_I2C_MspInit+0xf4>)
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d001      	beq.n	800eabc <HAL_I2C_MspInit+0x1c>
		HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 800eab8:	b008      	add	sp, #32
 800eaba:	bd70      	pop	{r4, r5, r6, pc}
 800eabc:	4604      	mov	r4, r0
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800eabe:	2500      	movs	r5, #0
 800eac0:	9501      	str	r5, [sp, #4]
 800eac2:	4e35      	ldr	r6, [pc, #212]	; (800eb98 <HAL_I2C_MspInit+0xf8>)
 800eac4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800eac6:	f043 0302 	orr.w	r3, r3, #2
 800eaca:	6333      	str	r3, [r6, #48]	; 0x30
 800eacc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800eace:	f003 0302 	and.w	r3, r3, #2
 800ead2:	9301      	str	r3, [sp, #4]
 800ead4:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800ead6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800eada:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800eadc:	2312      	movs	r3, #18
 800eade:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eae0:	2301      	movs	r3, #1
 800eae2:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eae4:	2303      	movs	r3, #3
 800eae6:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800eae8:	2304      	movs	r3, #4
 800eaea:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eaec:	a903      	add	r1, sp, #12
 800eaee:	482b      	ldr	r0, [pc, #172]	; (800eb9c <HAL_I2C_MspInit+0xfc>)
 800eaf0:	f7fa fe08 	bl	8009704 <HAL_GPIO_Init>
		__HAL_RCC_I2C1_CLK_ENABLE();
 800eaf4:	9502      	str	r5, [sp, #8]
 800eaf6:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800eaf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800eafc:	6433      	str	r3, [r6, #64]	; 0x40
 800eafe:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800eb00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eb04:	9302      	str	r3, [sp, #8]
 800eb06:	9b02      	ldr	r3, [sp, #8]
		hdma_i2c1_rx.Instance = DMA1_Stream0;
 800eb08:	4825      	ldr	r0, [pc, #148]	; (800eba0 <HAL_I2C_MspInit+0x100>)
 800eb0a:	4b26      	ldr	r3, [pc, #152]	; (800eba4 <HAL_I2C_MspInit+0x104>)
 800eb0c:	6003      	str	r3, [r0, #0]
		hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800eb0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800eb12:	6043      	str	r3, [r0, #4]
		hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800eb14:	6085      	str	r5, [r0, #8]
		hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800eb16:	60c5      	str	r5, [r0, #12]
		hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800eb18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb1c:	6103      	str	r3, [r0, #16]
		hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800eb1e:	6145      	str	r5, [r0, #20]
		hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800eb20:	6185      	str	r5, [r0, #24]
		hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800eb22:	61c5      	str	r5, [r0, #28]
		hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800eb24:	6205      	str	r5, [r0, #32]
		hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800eb26:	6245      	str	r5, [r0, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK) {
 800eb28:	f7fa faee 	bl	8009108 <HAL_DMA_Init>
 800eb2c:	bb58      	cbnz	r0, 800eb86 <HAL_I2C_MspInit+0xe6>
		__HAL_LINKDMA(i2cHandle, hdmarx, hdma_i2c1_rx);
 800eb2e:	4b1c      	ldr	r3, [pc, #112]	; (800eba0 <HAL_I2C_MspInit+0x100>)
 800eb30:	63a3      	str	r3, [r4, #56]	; 0x38
 800eb32:	639c      	str	r4, [r3, #56]	; 0x38
		hdma_i2c1_tx.Instance = DMA1_Stream7;
 800eb34:	481c      	ldr	r0, [pc, #112]	; (800eba8 <HAL_I2C_MspInit+0x108>)
 800eb36:	4b1d      	ldr	r3, [pc, #116]	; (800ebac <HAL_I2C_MspInit+0x10c>)
 800eb38:	6003      	str	r3, [r0, #0]
		hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800eb3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800eb3e:	6043      	str	r3, [r0, #4]
		hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800eb40:	2340      	movs	r3, #64	; 0x40
 800eb42:	6083      	str	r3, [r0, #8]
		hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800eb44:	2300      	movs	r3, #0
 800eb46:	60c3      	str	r3, [r0, #12]
		hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800eb48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eb4c:	6102      	str	r2, [r0, #16]
		hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800eb4e:	6143      	str	r3, [r0, #20]
		hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800eb50:	6183      	str	r3, [r0, #24]
		hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800eb52:	61c3      	str	r3, [r0, #28]
		hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800eb54:	6203      	str	r3, [r0, #32]
		hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800eb56:	6243      	str	r3, [r0, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK) {
 800eb58:	f7fa fad6 	bl	8009108 <HAL_DMA_Init>
 800eb5c:	b9b0      	cbnz	r0, 800eb8c <HAL_I2C_MspInit+0xec>
		__HAL_LINKDMA(i2cHandle, hdmatx, hdma_i2c1_tx);
 800eb5e:	4b12      	ldr	r3, [pc, #72]	; (800eba8 <HAL_I2C_MspInit+0x108>)
 800eb60:	6363      	str	r3, [r4, #52]	; 0x34
 800eb62:	639c      	str	r4, [r3, #56]	; 0x38
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800eb64:	2200      	movs	r2, #0
 800eb66:	4611      	mov	r1, r2
 800eb68:	201f      	movs	r0, #31
 800eb6a:	f7fa f9b1 	bl	8008ed0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800eb6e:	201f      	movs	r0, #31
 800eb70:	f7fa f9f2 	bl	8008f58 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800eb74:	2200      	movs	r2, #0
 800eb76:	4611      	mov	r1, r2
 800eb78:	2020      	movs	r0, #32
 800eb7a:	f7fa f9a9 	bl	8008ed0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800eb7e:	2020      	movs	r0, #32
 800eb80:	f7fa f9ea 	bl	8008f58 <HAL_NVIC_EnableIRQ>
}
 800eb84:	e798      	b.n	800eab8 <HAL_I2C_MspInit+0x18>
			Error_Handler();
 800eb86:	f000 fc19 	bl	800f3bc <Error_Handler>
 800eb8a:	e7d0      	b.n	800eb2e <HAL_I2C_MspInit+0x8e>
			Error_Handler();
 800eb8c:	f000 fc16 	bl	800f3bc <Error_Handler>
 800eb90:	e7e5      	b.n	800eb5e <HAL_I2C_MspInit+0xbe>
 800eb92:	bf00      	nop
 800eb94:	40005400 	.word	0x40005400
 800eb98:	40023800 	.word	0x40023800
 800eb9c:	40020400 	.word	0x40020400
 800eba0:	20002b74 	.word	0x20002b74
 800eba4:	40026010 	.word	0x40026010
 800eba8:	20002ac0 	.word	0x20002ac0
 800ebac:	400260b8 	.word	0x400260b8

0800ebb0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
	if (i2cHandle->Instance == I2C1) {
 800ebb0:	6802      	ldr	r2, [r0, #0]
 800ebb2:	4b0e      	ldr	r3, [pc, #56]	; (800ebec <HAL_I2C_MspDeInit+0x3c>)
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d000      	beq.n	800ebba <HAL_I2C_MspDeInit+0xa>
 800ebb8:	4770      	bx	lr
{
 800ebba:	b510      	push	{r4, lr}
 800ebbc:	4604      	mov	r4, r0
		/* USER CODE BEGIN I2C1_MspDeInit 0 */

		/* USER CODE END I2C1_MspDeInit 0 */
		/* Peripheral clock disable */
		__HAL_RCC_I2C1_CLK_DISABLE();
 800ebbe:	4a0c      	ldr	r2, [pc, #48]	; (800ebf0 <HAL_I2C_MspDeInit+0x40>)
 800ebc0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ebc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ebc6:	6413      	str	r3, [r2, #64]	; 0x40

		/**I2C1 GPIO Configuration
		   PB8     ------> I2C1_SCL
		   PB9     ------> I2C1_SDA
		 */
		HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8 | GPIO_PIN_9);
 800ebc8:	f44f 7140 	mov.w	r1, #768	; 0x300
 800ebcc:	4809      	ldr	r0, [pc, #36]	; (800ebf4 <HAL_I2C_MspDeInit+0x44>)
 800ebce:	f7fa fef3 	bl	80099b8 <HAL_GPIO_DeInit>

		/* I2C1 DMA DeInit */
		HAL_DMA_DeInit(i2cHandle->hdmarx);
 800ebd2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ebd4:	f7fa fbd8 	bl	8009388 <HAL_DMA_DeInit>
		HAL_DMA_DeInit(i2cHandle->hdmatx);
 800ebd8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ebda:	f7fa fbd5 	bl	8009388 <HAL_DMA_DeInit>

		/* I2C1 interrupt Deinit */
		HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800ebde:	201f      	movs	r0, #31
 800ebe0:	f7fa f9d0 	bl	8008f84 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800ebe4:	2020      	movs	r0, #32
 800ebe6:	f7fa f9cd 	bl	8008f84 <HAL_NVIC_DisableIRQ>
 800ebea:	bd10      	pop	{r4, pc}
 800ebec:	40005400 	.word	0x40005400
 800ebf0:	40023800 	.word	0x40023800
 800ebf4:	40020400 	.word	0x40020400

0800ebf8 <MX_CRC_Init>:
		/**
		 * @brief  CRC init function.
		 * @param  None
		 * @retval None
		 */
		static void MX_CRC_Init(void) {
 800ebf8:	b082      	sub	sp, #8
			__CRC_CLK_ENABLE()
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	9301      	str	r3, [sp, #4]
 800ebfe:	4b06      	ldr	r3, [pc, #24]	; (800ec18 <MX_CRC_Init+0x20>)
 800ec00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ec06:	631a      	str	r2, [r3, #48]	; 0x30
 800ec08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ec0e:	9301      	str	r3, [sp, #4]
 800ec10:	9b01      	ldr	r3, [sp, #4]
			;
		}
 800ec12:	b002      	add	sp, #8
 800ec14:	4770      	bx	lr
 800ec16:	bf00      	nop
 800ec18:	40023800 	.word	0x40023800

0800ec1c <MX_TIM_ALGO_Init>:
		 * @brief  TIM_ALGO init function.
		 * @param  None
		 * @retval None
		 * @details This function intializes the Timer used to synchronize the algorithm.
		 */
		static void MX_TIM_ALGO_Init(void) {
 800ec1c:	b530      	push	{r4, r5, lr}
 800ec1e:	b087      	sub	sp, #28
			const uint32_t tim_period = TIM_CLOCK / ALGO_FREQ - 1U;

			TIM_ClockConfigTypeDef s_clock_source_config;
			TIM_MasterConfigTypeDef s_master_config;

			AlgoTimHandle.Instance = TIM_ALGO;
 800ec20:	4c0e      	ldr	r4, [pc, #56]	; (800ec5c <MX_TIM_ALGO_Init+0x40>)
 800ec22:	4b0f      	ldr	r3, [pc, #60]	; (800ec60 <MX_TIM_ALGO_Init+0x44>)
 800ec24:	6023      	str	r3, [r4, #0]
			AlgoTimHandle.Init.Prescaler = prescaler;
 800ec26:	f24a 430f 	movw	r3, #41999	; 0xa40f
 800ec2a:	6063      	str	r3, [r4, #4]
			AlgoTimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ec2c:	2500      	movs	r5, #0
 800ec2e:	60a5      	str	r5, [r4, #8]
			AlgoTimHandle.Init.Period = tim_period;
 800ec30:	2313      	movs	r3, #19
 800ec32:	60e3      	str	r3, [r4, #12]
			AlgoTimHandle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ec34:	6125      	str	r5, [r4, #16]
			(void) HAL_TIM_Base_Init(&AlgoTimHandle);
 800ec36:	4620      	mov	r0, r4
 800ec38:	f7fe fbf4 	bl	800d424 <HAL_TIM_Base_Init>

			s_clock_source_config.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ec3c:	a906      	add	r1, sp, #24
 800ec3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec42:	f841 3d10 	str.w	r3, [r1, #-16]!
			(void) HAL_TIM_ConfigClockSource(&AlgoTimHandle,
 800ec46:	4620      	mov	r0, r4
 800ec48:	f7fe f852 	bl	800ccf0 <HAL_TIM_ConfigClockSource>
					&s_clock_source_config);

			s_master_config.MasterOutputTrigger = TIM_TRGO_RESET;
 800ec4c:	9500      	str	r5, [sp, #0]
			s_master_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ec4e:	9501      	str	r5, [sp, #4]
			(void) HAL_TIMEx_MasterConfigSynchronization(&AlgoTimHandle,
 800ec50:	4669      	mov	r1, sp
 800ec52:	4620      	mov	r0, r4
 800ec54:	f7fe fefe 	bl	800da54 <HAL_TIMEx_MasterConfigSynchronization>
					&s_master_config);
		}
 800ec58:	b007      	add	sp, #28
 800ec5a:	bd30      	pop	{r4, r5, pc}
 800ec5c:	200036d8 	.word	0x200036d8
 800ec60:	40000c00 	.word	0x40000c00

0800ec64 <Init_Sensors>:
		static void Init_Sensors(void) {
 800ec64:	b508      	push	{r3, lr}
			(void) IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0,
 800ec66:	2103      	movs	r1, #3
 800ec68:	2000      	movs	r0, #0
 800ec6a:	f7f8 fed5 	bl	8007a18 <IKS01A2_MOTION_SENSOR_Init>
			(void) IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0,
 800ec6e:	2104      	movs	r1, #4
 800ec70:	2002      	movs	r0, #2
 800ec72:	f7f8 fed1 	bl	8007a18 <IKS01A2_MOTION_SENSOR_Init>
			(void) IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0,
 800ec76:	2105      	movs	r1, #5
 800ec78:	2000      	movs	r0, #0
 800ec7a:	f7f8 fc31 	bl	80074e0 <IKS01A2_ENV_SENSOR_Init>
			(void) IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800ec7e:	2102      	movs	r1, #2
 800ec80:	2001      	movs	r0, #1
 800ec82:	f7f8 fc2d 	bl	80074e0 <IKS01A2_ENV_SENSOR_Init>
			if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR) {
 800ec86:	4b21      	ldr	r3, [pc, #132]	; (800ed0c <Init_Sensors+0xa8>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f013 0f01 	tst.w	r3, #1
 800ec8e:	d11f      	bne.n	800ecd0 <Init_Sensors+0x6c>
			if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR) {
 800ec90:	4b1e      	ldr	r3, [pc, #120]	; (800ed0c <Init_Sensors+0xa8>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f013 0f02 	tst.w	r3, #2
 800ec98:	d11f      	bne.n	800ecda <Init_Sensors+0x76>
			if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR) {
 800ec9a:	4b1c      	ldr	r3, [pc, #112]	; (800ed0c <Init_Sensors+0xa8>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f013 0f04 	tst.w	r3, #4
 800eca2:	d11f      	bne.n	800ece4 <Init_Sensors+0x80>
			if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR) {
 800eca4:	4b19      	ldr	r3, [pc, #100]	; (800ed0c <Init_Sensors+0xa8>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f013 0f10 	tst.w	r3, #16
 800ecac:	d11f      	bne.n	800ecee <Init_Sensors+0x8a>
			if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR) {
 800ecae:	4b17      	ldr	r3, [pc, #92]	; (800ed0c <Init_Sensors+0xa8>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f013 0f20 	tst.w	r3, #32
 800ecb6:	d11f      	bne.n	800ecf8 <Init_Sensors+0x94>
			if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR) {
 800ecb8:	4b14      	ldr	r3, [pc, #80]	; (800ed0c <Init_Sensors+0xa8>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ecc0:	d11f      	bne.n	800ed02 <Init_Sensors+0x9e>
			(void) HAL_TIM_Base_Start_IT(&AlgoTimHandle);
 800ecc2:	4813      	ldr	r0, [pc, #76]	; (800ed10 <Init_Sensors+0xac>)
 800ecc4:	f7fd ff96 	bl	800cbf4 <HAL_TIM_Base_Start_IT>
			DataLoggerActive = 1;
 800ecc8:	2201      	movs	r2, #1
 800ecca:	4b12      	ldr	r3, [pc, #72]	; (800ed14 <Init_Sensors+0xb0>)
 800eccc:	701a      	strb	r2, [r3, #0]
 800ecce:	bd08      	pop	{r3, pc}
				(void) IKS01A2_ENV_SENSOR_Enable(IKS01A2_LPS22HB_0,
 800ecd0:	2102      	movs	r1, #2
 800ecd2:	2001      	movs	r0, #1
 800ecd4:	f7f8 fcb2 	bl	800763c <IKS01A2_ENV_SENSOR_Enable>
 800ecd8:	e7da      	b.n	800ec90 <Init_Sensors+0x2c>
				(void) IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0,
 800ecda:	2101      	movs	r1, #1
 800ecdc:	2000      	movs	r0, #0
 800ecde:	f7f8 fcad 	bl	800763c <IKS01A2_ENV_SENSOR_Enable>
 800ece2:	e7da      	b.n	800ec9a <Init_Sensors+0x36>
				(void) IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0,
 800ece4:	2104      	movs	r1, #4
 800ece6:	2000      	movs	r0, #0
 800ece8:	f7f8 fca8 	bl	800763c <IKS01A2_ENV_SENSOR_Enable>
 800ecec:	e7da      	b.n	800eca4 <Init_Sensors+0x40>
				(void) IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0,
 800ecee:	2102      	movs	r1, #2
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	f7f8 ff73 	bl	8007bdc <IKS01A2_MOTION_SENSOR_Enable>
 800ecf6:	e7da      	b.n	800ecae <Init_Sensors+0x4a>
				(void) IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0,
 800ecf8:	2101      	movs	r1, #1
 800ecfa:	2000      	movs	r0, #0
 800ecfc:	f7f8 ff6e 	bl	8007bdc <IKS01A2_MOTION_SENSOR_Enable>
 800ed00:	e7da      	b.n	800ecb8 <Init_Sensors+0x54>
				(void) IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0,
 800ed02:	2104      	movs	r1, #4
 800ed04:	2002      	movs	r0, #2
 800ed06:	f7f8 ff69 	bl	8007bdc <IKS01A2_MOTION_SENSOR_Enable>
 800ed0a:	e7da      	b.n	800ecc2 <Init_Sensors+0x5e>
 800ed0c:	20001490 	.word	0x20001490
 800ed10:	200036d8 	.word	0x200036d8
 800ed14:	2000279c 	.word	0x2000279c

0800ed18 <RTC_Handler>:
		/**
		 * @brief  Handles the time+date getting/sending
		 * @param  Msg the time+date part of the stream
		 * @retval None
		 */
		static RTC_TimeTypeDef RTC_Handler(TMsg *Msg) {
 800ed18:	b570      	push	{r4, r5, r6, lr}
 800ed1a:	b086      	sub	sp, #24
 800ed1c:	4606      	mov	r6, r0
 800ed1e:	460c      	mov	r4, r1
			uint32_t ans_uint32;
			int32_t ans_int32;
			RTC_DateTypeDef sdatestructureget;
			RTC_TimeTypeDef stimestructure;

			(void) HAL_RTC_GetTime(&RtcHandle, &stimestructure, FORMAT_BIN);
 800ed20:	4d14      	ldr	r5, [pc, #80]	; (800ed74 <RTC_Handler+0x5c>)
 800ed22:	2200      	movs	r2, #0
 800ed24:	4669      	mov	r1, sp
 800ed26:	4628      	mov	r0, r5
 800ed28:	f7fd fd58 	bl	800c7dc <HAL_RTC_GetTime>
			(void) HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, FORMAT_BIN);
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	a905      	add	r1, sp, #20
 800ed30:	4628      	mov	r0, r5
 800ed32:	f7fd fe43 	bl	800c9bc <HAL_RTC_GetDate>

			/* To be MISRA C-2012 compliant the original calculation:
			 sub_sec = ((((((int)RtcSynchPrediv) - ((int)stimestructure.SubSeconds)) * 100) / (RtcSynchPrediv + 1)) & 0xFF);
			 has been split to separate expressions */
			ans_int32 = (RtcSynchPrediv - (int32_t) stimestructure.SubSeconds)
 800ed36:	4b10      	ldr	r3, [pc, #64]	; (800ed78 <RTC_Handler+0x60>)
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	9b01      	ldr	r3, [sp, #4]
 800ed3c:	1ad1      	subs	r1, r2, r3
 800ed3e:	2364      	movs	r3, #100	; 0x64
 800ed40:	fb03 f301 	mul.w	r3, r3, r1
					* 100;
			ans_int32 /= RtcSynchPrediv + 1;
 800ed44:	3201      	adds	r2, #1
 800ed46:	fb93 f3f2 	sdiv	r3, r3, r2
			ans_uint32 = (uint32_t) ans_int32 & 0xFFU;
			sub_sec = (uint8_t) ans_uint32;
 800ed4a:	b2db      	uxtb	r3, r3

			Msg->Data[3] = (uint8_t) stimestructure.Hours;
 800ed4c:	f89d 2000 	ldrb.w	r2, [sp]
 800ed50:	71e2      	strb	r2, [r4, #7]
			Msg->Data[4] = (uint8_t) stimestructure.Minutes;
 800ed52:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ed56:	7222      	strb	r2, [r4, #8]
			Msg->Data[5] = (uint8_t) stimestructure.Seconds;
 800ed58:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ed5c:	7262      	strb	r2, [r4, #9]
			Msg->Data[6] = sub_sec;
 800ed5e:	72a3      	strb	r3, [r4, #10]

			stimestructure.SubSeconds = sub_sec;
 800ed60:	9301      	str	r3, [sp, #4]

			return stimestructure;
 800ed62:	4635      	mov	r5, r6
 800ed64:	466c      	mov	r4, sp
 800ed66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed6a:	6823      	ldr	r3, [r4, #0]
 800ed6c:	602b      	str	r3, [r5, #0]
		}
 800ed6e:	4630      	mov	r0, r6
 800ed70:	b006      	add	sp, #24
 800ed72:	bd70      	pop	{r4, r5, r6, pc}
 800ed74:	2000283c 	.word	0x2000283c
 800ed78:	2000285c 	.word	0x2000285c

0800ed7c <Accelero_Sensor_Handler>:
		 * @brief  Handles the ACC axes data getting/sending
		 * @param  Msg the ACC part of the stream
		 * @param  Instance the device instance
		 * @retval None
		 */
		static void Accelero_Sensor_Handler(TMsg *Msg, uint32_t Instance) {
 800ed7c:	b538      	push	{r3, r4, r5, lr}
			if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR) {
 800ed7e:	4b10      	ldr	r3, [pc, #64]	; (800edc0 <Accelero_Sensor_Handler+0x44>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f013 0f10 	tst.w	r3, #16
 800ed86:	d100      	bne.n	800ed8a <Accelero_Sensor_Handler+0xe>
 800ed88:	bd38      	pop	{r3, r4, r5, pc}
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	4604      	mov	r4, r0

				(void) IKS01A2_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO,
 800ed8e:	4d0d      	ldr	r5, [pc, #52]	; (800edc4 <Accelero_Sensor_Handler+0x48>)
 800ed90:	462a      	mov	r2, r5
 800ed92:	2102      	movs	r1, #2
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7f8 ff4d 	bl	8007c34 <IKS01A2_MOTION_SENSOR_GetAxes>
						&AccValue);
				Serialize_s32(&Msg->Data[19], (int32_t) AccValue.x, 4);
 800ed9a:	2204      	movs	r2, #4
 800ed9c:	6829      	ldr	r1, [r5, #0]
 800ed9e:	f104 0017 	add.w	r0, r4, #23
 800eda2:	f000 ffe9 	bl	800fd78 <Serialize_s32>
				Serialize_s32(&Msg->Data[23], (int32_t) AccValue.y, 4);
 800eda6:	2204      	movs	r2, #4
 800eda8:	6869      	ldr	r1, [r5, #4]
 800edaa:	f104 001b 	add.w	r0, r4, #27
 800edae:	f000 ffe3 	bl	800fd78 <Serialize_s32>
				Serialize_s32(&Msg->Data[27], (int32_t) AccValue.z, 4);
 800edb2:	2204      	movs	r2, #4
 800edb4:	68a9      	ldr	r1, [r5, #8]
 800edb6:	f104 001f 	add.w	r0, r4, #31
 800edba:	f000 ffdd 	bl	800fd78 <Serialize_s32>
			}
		}
 800edbe:	e7e3      	b.n	800ed88 <Accelero_Sensor_Handler+0xc>
 800edc0:	20001490 	.word	0x20001490
 800edc4:	20002790 	.word	0x20002790

0800edc8 <Gyro_Sensor_Handler>:
		 * @brief  Handles the GYR axes data getting/sending
		 * @param  Msg the GYR part of the stream
		 * @param  Instance the device instance
		 * @retval None
		 */
		static void Gyro_Sensor_Handler(TMsg *Msg, uint32_t Instance) {
 800edc8:	b538      	push	{r3, r4, r5, lr}
			if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR) {
 800edca:	4b10      	ldr	r3, [pc, #64]	; (800ee0c <Gyro_Sensor_Handler+0x44>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f013 0f20 	tst.w	r3, #32
 800edd2:	d100      	bne.n	800edd6 <Gyro_Sensor_Handler+0xe>
 800edd4:	bd38      	pop	{r3, r4, r5, pc}
 800edd6:	460b      	mov	r3, r1
 800edd8:	4604      	mov	r4, r0
				(void) IKS01A2_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO,
 800edda:	4d0d      	ldr	r5, [pc, #52]	; (800ee10 <Gyro_Sensor_Handler+0x48>)
 800eddc:	462a      	mov	r2, r5
 800edde:	2101      	movs	r1, #1
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7f8 ff27 	bl	8007c34 <IKS01A2_MOTION_SENSOR_GetAxes>
						&GyrValue);

				Serialize_s32(&Msg->Data[31], GyrValue.x, 4);
 800ede6:	2204      	movs	r2, #4
 800ede8:	6829      	ldr	r1, [r5, #0]
 800edea:	f104 0023 	add.w	r0, r4, #35	; 0x23
 800edee:	f000 ffc3 	bl	800fd78 <Serialize_s32>
				Serialize_s32(&Msg->Data[35], GyrValue.y, 4);
 800edf2:	2204      	movs	r2, #4
 800edf4:	6869      	ldr	r1, [r5, #4]
 800edf6:	f104 0027 	add.w	r0, r4, #39	; 0x27
 800edfa:	f000 ffbd 	bl	800fd78 <Serialize_s32>
				Serialize_s32(&Msg->Data[39], GyrValue.z, 4);
 800edfe:	2204      	movs	r2, #4
 800ee00:	68a9      	ldr	r1, [r5, #8]
 800ee02:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 800ee06:	f000 ffb7 	bl	800fd78 <Serialize_s32>
			}
		}
 800ee0a:	e7e3      	b.n	800edd4 <Gyro_Sensor_Handler+0xc>
 800ee0c:	20001490 	.word	0x20001490
 800ee10:	200027a0 	.word	0x200027a0

0800ee14 <Magneto_Sensor_Handler>:
			MFX_CM0P_MagCal_output_t mag_data_out;
#else
#error Not supported platform
#endif

			if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR) {
 800ee14:	4b3e      	ldr	r3, [pc, #248]	; (800ef10 <Magneto_Sensor_Handler+0xfc>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ee1c:	d100      	bne.n	800ee20 <Magneto_Sensor_Handler+0xc>
 800ee1e:	4770      	bx	lr
		static void Magneto_Sensor_Handler(TMsg *Msg, uint32_t Instance) {
 800ee20:	b530      	push	{r4, r5, lr}
 800ee22:	b089      	sub	sp, #36	; 0x24
 800ee24:	460b      	mov	r3, r1
 800ee26:	4605      	mov	r5, r0
				(void) IKS01A2_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO,
 800ee28:	4a3a      	ldr	r2, [pc, #232]	; (800ef14 <Magneto_Sensor_Handler+0x100>)
 800ee2a:	2104      	movs	r1, #4
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7f8 ff01 	bl	8007c34 <IKS01A2_MOTION_SENSOR_GetAxes>
						&MagValue);

				if (MagCalStatus == 0U) {
 800ee32:	4b39      	ldr	r3, [pc, #228]	; (800ef18 <Magneto_Sensor_Handler+0x104>)
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	b303      	cbz	r3, 800ee7a <Magneto_Sensor_Handler+0x66>
						/* Disable magnetometer calibration */
						MotionFX_manager_MagCal_stop(ALGO_PERIOD);
					}
				}

				MagValue.x = (int32_t) (MagValue.x - MagOffset.x);
 800ee38:	4c36      	ldr	r4, [pc, #216]	; (800ef14 <Magneto_Sensor_Handler+0x100>)
 800ee3a:	6821      	ldr	r1, [r4, #0]
 800ee3c:	4a37      	ldr	r2, [pc, #220]	; (800ef1c <Magneto_Sensor_Handler+0x108>)
 800ee3e:	6813      	ldr	r3, [r2, #0]
 800ee40:	1ac9      	subs	r1, r1, r3
 800ee42:	6021      	str	r1, [r4, #0]
				MagValue.y = (int32_t) (MagValue.y - MagOffset.y);
 800ee44:	6863      	ldr	r3, [r4, #4]
 800ee46:	6850      	ldr	r0, [r2, #4]
 800ee48:	1a1b      	subs	r3, r3, r0
 800ee4a:	6063      	str	r3, [r4, #4]
				MagValue.z = (int32_t) (MagValue.z - MagOffset.z);
 800ee4c:	68a3      	ldr	r3, [r4, #8]
 800ee4e:	6892      	ldr	r2, [r2, #8]
 800ee50:	1a9b      	subs	r3, r3, r2
 800ee52:	60a3      	str	r3, [r4, #8]

				Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 800ee54:	2204      	movs	r2, #4
 800ee56:	f105 002f 	add.w	r0, r5, #47	; 0x2f
 800ee5a:	f000 ff8d 	bl	800fd78 <Serialize_s32>
				Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 800ee5e:	2204      	movs	r2, #4
 800ee60:	6861      	ldr	r1, [r4, #4]
 800ee62:	f105 0033 	add.w	r0, r5, #51	; 0x33
 800ee66:	f000 ff87 	bl	800fd78 <Serialize_s32>
				Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 800ee6a:	2204      	movs	r2, #4
 800ee6c:	68a1      	ldr	r1, [r4, #8]
 800ee6e:	f105 0037 	add.w	r0, r5, #55	; 0x37
 800ee72:	f000 ff81 	bl	800fd78 <Serialize_s32>
			}
		}
 800ee76:	b009      	add	sp, #36	; 0x24
 800ee78:	bd30      	pop	{r4, r5, pc}
					mag_data_in.mag[0] = (float) MagValue.x
 800ee7a:	4b26      	ldr	r3, [pc, #152]	; (800ef14 <Magneto_Sensor_Handler+0x100>)
 800ee7c:	edd3 7a00 	vldr	s15, [r3]
 800ee80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
							* FROM_MGAUSS_TO_UT50;
 800ee84:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ef20 <Magneto_Sensor_Handler+0x10c>
 800ee88:	ee27 7a26 	vmul.f32	s14, s14, s13
					mag_data_in.mag[0] = (float) MagValue.x
 800ee8c:	ed8d 7a04 	vstr	s14, [sp, #16]
					mag_data_in.mag[1] = (float) MagValue.y
 800ee90:	edd3 7a01 	vldr	s15, [r3, #4]
 800ee94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
							* FROM_MGAUSS_TO_UT50;
 800ee98:	ee27 7a26 	vmul.f32	s14, s14, s13
					mag_data_in.mag[1] = (float) MagValue.y
 800ee9c:	ed8d 7a05 	vstr	s14, [sp, #20]
					mag_data_in.mag[2] = (float) MagValue.z
 800eea0:	edd3 7a02 	vldr	s15, [r3, #8]
 800eea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							* FROM_MGAUSS_TO_UT50;
 800eea8:	ee67 7aa6 	vmul.f32	s15, s15, s13
					mag_data_in.mag[2] = (float) MagValue.z
 800eeac:	edcd 7a06 	vstr	s15, [sp, #24]
					mag_data_in.time_stamp = (int) MagTimeStamp;
 800eeb0:	4a1c      	ldr	r2, [pc, #112]	; (800ef24 <Magneto_Sensor_Handler+0x110>)
 800eeb2:	6813      	ldr	r3, [r2, #0]
 800eeb4:	9307      	str	r3, [sp, #28]
					MagTimeStamp += (uint32_t) ALGO_PERIOD;
 800eeb6:	330a      	adds	r3, #10
 800eeb8:	6013      	str	r3, [r2, #0]
					MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 800eeba:	4669      	mov	r1, sp
 800eebc:	a804      	add	r0, sp, #16
 800eebe:	f7ff fb5d 	bl	800e57c <MotionFX_manager_MagCal_run>
					if (mag_data_out.cal_quality
 800eec2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800eec6:	2b03      	cmp	r3, #3
 800eec8:	d1b6      	bne.n	800ee38 <Magneto_Sensor_Handler+0x24>
						MagCalStatus = 1;
 800eeca:	2201      	movs	r2, #1
 800eecc:	4b12      	ldr	r3, [pc, #72]	; (800ef18 <Magneto_Sensor_Handler+0x104>)
 800eece:	701a      	strb	r2, [r3, #0]
						ans_float = (mag_data_out.hi_bias[0]
 800eed0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800ef28 <Magneto_Sensor_Handler+0x114>
 800eed4:	eddd 7a00 	vldr	s15, [sp]
 800eed8:	ee67 7a87 	vmul.f32	s15, s15, s14
						MagOffset.x = (int32_t) ans_float;
 800eedc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eee0:	4b0e      	ldr	r3, [pc, #56]	; (800ef1c <Magneto_Sensor_Handler+0x108>)
 800eee2:	edc3 7a00 	vstr	s15, [r3]
						ans_float = (mag_data_out.hi_bias[1]
 800eee6:	eddd 7a01 	vldr	s15, [sp, #4]
 800eeea:	ee67 7a87 	vmul.f32	s15, s15, s14
						MagOffset.y = (int32_t) ans_float;
 800eeee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eef2:	edc3 7a01 	vstr	s15, [r3, #4]
						ans_float = (mag_data_out.hi_bias[2]
 800eef6:	eddd 7a02 	vldr	s15, [sp, #8]
 800eefa:	ee67 7a87 	vmul.f32	s15, s15, s14
						MagOffset.z = (int32_t) ans_float;
 800eefe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef02:	edc3 7a02 	vstr	s15, [r3, #8]
						MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 800ef06:	200a      	movs	r0, #10
 800ef08:	f7ff fb45 	bl	800e596 <MotionFX_manager_MagCal_stop>
 800ef0c:	e794      	b.n	800ee38 <Magneto_Sensor_Handler+0x24>
 800ef0e:	bf00      	nop
 800ef10:	20001490 	.word	0x20001490
 800ef14:	200027c0 	.word	0x200027c0
 800ef18:	200027ac 	.word	0x200027ac
 800ef1c:	200027b0 	.word	0x200027b0
 800ef20:	3b03126f 	.word	0x3b03126f
 800ef24:	200027bc 	.word	0x200027bc
 800ef28:	43fa0000 	.word	0x43fa0000

0800ef2c <Humidity_Sensor_Handler>:
		 * @retval None
		 */
		static void Humidity_Sensor_Handler(TMsg *Msg, uint32_t Instance) {
			float hum_value;

			if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR) {
 800ef2c:	4b09      	ldr	r3, [pc, #36]	; (800ef54 <Humidity_Sensor_Handler+0x28>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f013 0f04 	tst.w	r3, #4
 800ef34:	d100      	bne.n	800ef38 <Humidity_Sensor_Handler+0xc>
 800ef36:	4770      	bx	lr
		static void Humidity_Sensor_Handler(TMsg *Msg, uint32_t Instance) {
 800ef38:	b510      	push	{r4, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	4604      	mov	r4, r0
				(void) IKS01A2_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY,
 800ef40:	aa01      	add	r2, sp, #4
 800ef42:	2104      	movs	r1, #4
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7f8 fbd1 	bl	80076ec <IKS01A2_ENV_SENSOR_GetValue>
						&hum_value);
				(void) memcpy(&Msg->Data[15], (void *) &hum_value,
 800ef4a:	9b01      	ldr	r3, [sp, #4]
 800ef4c:	f8c4 3013 	str.w	r3, [r4, #19]
						sizeof(float));
				;
			}
		}
 800ef50:	b002      	add	sp, #8
 800ef52:	bd10      	pop	{r4, pc}
 800ef54:	20001490 	.word	0x20001490

0800ef58 <Temperature_Sensor_Handler>:
			if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR) {
 800ef58:	4b09      	ldr	r3, [pc, #36]	; (800ef80 <Temperature_Sensor_Handler+0x28>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f013 0f02 	tst.w	r3, #2
 800ef60:	d100      	bne.n	800ef64 <Temperature_Sensor_Handler+0xc>
 800ef62:	4770      	bx	lr
		static void Temperature_Sensor_Handler(TMsg *Msg, uint32_t Instance) {
 800ef64:	b510      	push	{r4, lr}
 800ef66:	b082      	sub	sp, #8
 800ef68:	460b      	mov	r3, r1
 800ef6a:	4604      	mov	r4, r0
				(void) IKS01A2_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE,
 800ef6c:	aa01      	add	r2, sp, #4
 800ef6e:	2101      	movs	r1, #1
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7f8 fbbb 	bl	80076ec <IKS01A2_ENV_SENSOR_GetValue>
				(void) memcpy(&Msg->Data[11], (void *) &temp_value,
 800ef76:	9b01      	ldr	r3, [sp, #4]
 800ef78:	f8c4 300f 	str.w	r3, [r4, #15]
		}
 800ef7c:	b002      	add	sp, #8
 800ef7e:	bd10      	pop	{r4, pc}
 800ef80:	20001490 	.word	0x20001490

0800ef84 <Pressure_Sensor_Handler>:
			if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR) {
 800ef84:	4b09      	ldr	r3, [pc, #36]	; (800efac <Pressure_Sensor_Handler+0x28>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f013 0f01 	tst.w	r3, #1
 800ef8c:	d100      	bne.n	800ef90 <Pressure_Sensor_Handler+0xc>
 800ef8e:	4770      	bx	lr
		static void Pressure_Sensor_Handler(TMsg *Msg, uint32_t Instance) {
 800ef90:	b510      	push	{r4, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	460b      	mov	r3, r1
 800ef96:	4604      	mov	r4, r0
				(void) IKS01A2_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE,
 800ef98:	aa01      	add	r2, sp, #4
 800ef9a:	2102      	movs	r1, #2
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7f8 fba5 	bl	80076ec <IKS01A2_ENV_SENSOR_GetValue>
				(void) memcpy(&Msg->Data[7], (void *) &press_value,
 800efa2:	9b01      	ldr	r3, [sp, #4]
 800efa4:	f8c4 300b 	str.w	r3, [r4, #11]
		}
 800efa8:	b002      	add	sp, #8
 800efaa:	bd10      	pop	{r4, pc}
 800efac:	20001490 	.word	0x20001490

0800efb0 <FX_Data_Handler>:
		static MFX_output_t FX_Data_Handler(TMsg *Msg) {
 800efb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efb2:	b0a9      	sub	sp, #164	; 0xa4
 800efb4:	4604      	mov	r4, r0
			if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR) {
 800efb6:	4b64      	ldr	r3, [pc, #400]	; (800f148 <FX_Data_Handler+0x198>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f013 0f10 	tst.w	r3, #16
 800efbe:	d00a      	beq.n	800efd6 <FX_Data_Handler+0x26>
 800efc0:	460d      	mov	r5, r1
				if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR) {
 800efc2:	4b61      	ldr	r3, [pc, #388]	; (800f148 <FX_Data_Handler+0x198>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f013 0f20 	tst.w	r3, #32
 800efca:	d004      	beq.n	800efd6 <FX_Data_Handler+0x26>
					if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR) {
 800efcc:	4b5e      	ldr	r3, [pc, #376]	; (800f148 <FX_Data_Handler+0x198>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800efd4:	d107      	bne.n	800efe6 <FX_Data_Handler+0x36>
			return data_out;
 800efd6:	2278      	movs	r2, #120	; 0x78
 800efd8:	a901      	add	r1, sp, #4
 800efda:	4620      	mov	r0, r4
 800efdc:	f00f fec0 	bl	801ed60 <memcpy>
		}
 800efe0:	4620      	mov	r0, r4
 800efe2:	b029      	add	sp, #164	; 0xa4
 800efe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
						data_in.gyro[0] = (float) GyrValue.x * FROM_MDPS_TO_DPS;
 800efe6:	4b59      	ldr	r3, [pc, #356]	; (800f14c <FX_Data_Handler+0x19c>)
 800efe8:	edd3 7a00 	vldr	s15, [r3]
 800efec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eff0:	eddf 7a57 	vldr	s15, [pc, #348]	; 800f150 <FX_Data_Handler+0x1a0>
 800eff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eff8:	ed8d 7a25 	vstr	s14, [sp, #148]	; 0x94
						data_in.gyro[1] = (float) GyrValue.y * FROM_MDPS_TO_DPS;
 800effc:	ed93 7a01 	vldr	s14, [r3, #4]
 800f000:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f004:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f008:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
						data_in.gyro[2] = (float) GyrValue.z * FROM_MDPS_TO_DPS;
 800f00c:	ed93 7a02 	vldr	s14, [r3, #8]
 800f010:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f014:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f018:	ed8d 7a27 	vstr	s14, [sp, #156]	; 0x9c
						data_in.acc[0] = (float) AccValue.x * FROM_MG_TO_G;
 800f01c:	4b4d      	ldr	r3, [pc, #308]	; (800f154 <FX_Data_Handler+0x1a4>)
 800f01e:	ed93 7a00 	vldr	s14, [r3]
 800f022:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f026:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f02a:	ed8d 7a22 	vstr	s14, [sp, #136]	; 0x88
						data_in.acc[1] = (float) AccValue.y * FROM_MG_TO_G;
 800f02e:	ed93 7a01 	vldr	s14, [r3, #4]
 800f032:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f036:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f03a:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
						data_in.acc[2] = (float) AccValue.z * FROM_MG_TO_G;
 800f03e:	ed93 7a02 	vldr	s14, [r3, #8]
 800f042:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f04a:	edcd 7a24 	vstr	s15, [sp, #144]	; 0x90
						data_in.mag[0] = (float) MagValue.x
 800f04e:	4b42      	ldr	r3, [pc, #264]	; (800f158 <FX_Data_Handler+0x1a8>)
 800f050:	edd3 7a00 	vldr	s15, [r3]
 800f054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
								* FROM_MGAUSS_TO_UT50;
 800f058:	eddf 6a40 	vldr	s13, [pc, #256]	; 800f15c <FX_Data_Handler+0x1ac>
 800f05c:	ee27 7a26 	vmul.f32	s14, s14, s13
						data_in.mag[0] = (float) MagValue.x
 800f060:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
						data_in.mag[1] = (float) MagValue.y
 800f064:	edd3 7a01 	vldr	s15, [r3, #4]
 800f068:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
								* FROM_MGAUSS_TO_UT50;
 800f06c:	ee27 7a26 	vmul.f32	s14, s14, s13
						data_in.mag[1] = (float) MagValue.y
 800f070:	ed8d 7a20 	vstr	s14, [sp, #128]	; 0x80
						data_in.mag[2] = (float) MagValue.z
 800f074:	edd3 7a02 	vldr	s15, [r3, #8]
 800f078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
								* FROM_MGAUSS_TO_UT50;
 800f07c:	ee67 7aa6 	vmul.f32	s15, s15, s13
						data_in.mag[2] = (float) MagValue.z
 800f080:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
						BSP_LED_On(LED2);
 800f084:	2000      	movs	r0, #0
 800f086:	f7f8 fe9d 	bl	8007dc4 <BSP_LED_On>
						MotionFX_manager_run(pdata_in, pdata_out,
 800f08a:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800f160 <FX_Data_Handler+0x1b0>
 800f08e:	a901      	add	r1, sp, #4
 800f090:	a81f      	add	r0, sp, #124	; 0x7c
 800f092:	f7ff fa35 	bl	800e500 <MotionFX_manager_run>
						BSP_LED_Off(LED2);
 800f096:	2000      	movs	r0, #0
 800f098:	f7f8 fea0 	bl	8007ddc <BSP_LED_Off>
						if (Enabled6X == 1U) {
 800f09c:	4b31      	ldr	r3, [pc, #196]	; (800f164 <FX_Data_Handler+0x1b4>)
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	d028      	beq.n	800f0f6 <FX_Data_Handler+0x146>
							(void) memcpy(&Msg->Data[55],
 800f0a4:	ae04      	add	r6, sp, #16
 800f0a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f0a8:	f8c5 003b 	str.w	r0, [r5, #59]	; 0x3b
 800f0ac:	f8c5 103f 	str.w	r1, [r5, #63]	; 0x3f
 800f0b0:	f8c5 2043 	str.w	r2, [r5, #67]	; 0x43
 800f0b4:	f8c5 3047 	str.w	r3, [r5, #71]	; 0x47
							(void) memcpy(&Msg->Data[71],
 800f0b8:	ab01      	add	r3, sp, #4
 800f0ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f0bc:	f8c5 004b 	str.w	r0, [r5, #75]	; 0x4b
 800f0c0:	f8c5 104f 	str.w	r1, [r5, #79]	; 0x4f
 800f0c4:	f8c5 2053 	str.w	r2, [r5, #83]	; 0x53
							(void) memcpy(&Msg->Data[83],
 800f0c8:	ab08      	add	r3, sp, #32
 800f0ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f0cc:	f8c5 0057 	str.w	r0, [r5, #87]	; 0x57
 800f0d0:	f8c5 105b 	str.w	r1, [r5, #91]	; 0x5b
 800f0d4:	f8c5 205f 	str.w	r2, [r5, #95]	; 0x5f
							(void) memcpy(&Msg->Data[95],
 800f0d8:	ab0b      	add	r3, sp, #44	; 0x2c
 800f0da:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f0dc:	f8c5 0063 	str.w	r0, [r5, #99]	; 0x63
 800f0e0:	f8c5 1067 	str.w	r1, [r5, #103]	; 0x67
 800f0e4:	f8c5 206b 	str.w	r2, [r5, #107]	; 0x6b
							(void) memcpy(&Msg->Data[107],
 800f0e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0ea:	f8c5 306f 	str.w	r3, [r5, #111]	; 0x6f
							(void) memcpy(&Msg->Data[111],
 800f0ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f0f0:	f8c5 3073 	str.w	r3, [r5, #115]	; 0x73
 800f0f4:	e76f      	b.n	800efd6 <FX_Data_Handler+0x26>
							(void) memcpy(&Msg->Data[55],
 800f0f6:	ae13      	add	r6, sp, #76	; 0x4c
 800f0f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f0fa:	f8c5 003b 	str.w	r0, [r5, #59]	; 0x3b
 800f0fe:	f8c5 103f 	str.w	r1, [r5, #63]	; 0x3f
 800f102:	f8c5 2043 	str.w	r2, [r5, #67]	; 0x43
 800f106:	f8c5 3047 	str.w	r3, [r5, #71]	; 0x47
							(void) memcpy(&Msg->Data[71],
 800f10a:	ab10      	add	r3, sp, #64	; 0x40
 800f10c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f10e:	f8c5 004b 	str.w	r0, [r5, #75]	; 0x4b
 800f112:	f8c5 104f 	str.w	r1, [r5, #79]	; 0x4f
 800f116:	f8c5 2053 	str.w	r2, [r5, #83]	; 0x53
							(void) memcpy(&Msg->Data[83],
 800f11a:	ab17      	add	r3, sp, #92	; 0x5c
 800f11c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f11e:	f8c5 0057 	str.w	r0, [r5, #87]	; 0x57
 800f122:	f8c5 105b 	str.w	r1, [r5, #91]	; 0x5b
 800f126:	f8c5 205f 	str.w	r2, [r5, #95]	; 0x5f
							(void) memcpy(&Msg->Data[95],
 800f12a:	ab1a      	add	r3, sp, #104	; 0x68
 800f12c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f12e:	f8c5 0063 	str.w	r0, [r5, #99]	; 0x63
 800f132:	f8c5 1067 	str.w	r1, [r5, #103]	; 0x67
 800f136:	f8c5 206b 	str.w	r2, [r5, #107]	; 0x6b
							(void) memcpy(&Msg->Data[107],
 800f13a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f13c:	f8c5 306f 	str.w	r3, [r5, #111]	; 0x6f
							(void) memcpy(&Msg->Data[111],
 800f140:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f142:	f8c5 3073 	str.w	r3, [r5, #115]	; 0x73
 800f146:	e746      	b.n	800efd6 <FX_Data_Handler+0x26>
 800f148:	20001490 	.word	0x20001490
 800f14c:	200027a0 	.word	0x200027a0
 800f150:	3a83126f 	.word	0x3a83126f
 800f154:	20002790 	.word	0x20002790
 800f158:	200027c0 	.word	0x200027c0
 800f15c:	3b03126f 	.word	0x3b03126f
 800f160:	3c23d70a 	.word	0x3c23d70a
 800f164:	20001484 	.word	0x20001484

0800f168 <HAL_GPIO_EXTI_Callback>:
	if (GPIO_Pin == VL53L1X_INT_Pin) {
 800f168:	2810      	cmp	r0, #16
 800f16a:	d000      	beq.n	800f16e <HAL_GPIO_EXTI_Callback+0x6>
 800f16c:	4770      	bx	lr
		IntCount++;
 800f16e:	4a02      	ldr	r2, [pc, #8]	; (800f178 <HAL_GPIO_EXTI_Callback+0x10>)
 800f170:	6813      	ldr	r3, [r2, #0]
 800f172:	3301      	adds	r3, #1
 800f174:	6013      	str	r3, [r2, #0]
}
 800f176:	e7f9      	b.n	800f16c <HAL_GPIO_EXTI_Callback+0x4>
 800f178:	20003330 	.word	0x20003330

0800f17c <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM_ALGO) {
 800f17c:	6802      	ldr	r2, [r0, #0]
 800f17e:	4b04      	ldr	r3, [pc, #16]	; (800f190 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800f180:	429a      	cmp	r2, r3
 800f182:	d000      	beq.n	800f186 <HAL_TIM_PeriodElapsedCallback+0xa>
 800f184:	4770      	bx	lr
		SensorReadRequest = 1;
 800f186:	2201      	movs	r2, #1
 800f188:	4b02      	ldr	r3, [pc, #8]	; (800f194 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800f18a:	701a      	strb	r2, [r3, #0]
}
 800f18c:	e7fa      	b.n	800f184 <HAL_TIM_PeriodElapsedCallback+0x8>
 800f18e:	bf00      	nop
 800f190:	40000c00 	.word	0x40000c00
 800f194:	20002860 	.word	0x20002860

0800f198 <printf_rtc_timestamp>:
		void printf_rtc_timestamp(void) {
 800f198:	b500      	push	{lr}
 800f19a:	b0c9      	sub	sp, #292	; 0x124
			stimestructure = RTC_Handler(&msg_dat);
 800f19c:	a902      	add	r1, sp, #8
 800f19e:	a843      	add	r0, sp, #268	; 0x10c
 800f1a0:	f7ff fdba 	bl	800ed18 <RTC_Handler>
			printf("T %d:%d:%d:%lu ", stimestructure.Hours,
 800f1a4:	f89d 110c 	ldrb.w	r1, [sp, #268]	; 0x10c
					stimestructure.Minutes, stimestructure.Seconds,
 800f1a8:	f89d 210d 	ldrb.w	r2, [sp, #269]	; 0x10d
 800f1ac:	f89d 310e 	ldrb.w	r3, [sp, #270]	; 0x10e
			printf("T %d:%d:%d:%lu ", stimestructure.Hours,
 800f1b0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f1b2:	9000      	str	r0, [sp, #0]
 800f1b4:	4802      	ldr	r0, [pc, #8]	; (800f1c0 <printf_rtc_timestamp+0x28>)
 800f1b6:	f010 faff 	bl	801f7b8 <iprintf>
		}
 800f1ba:	b049      	add	sp, #292	; 0x124
 800f1bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f1c0:	080222c0 	.word	0x080222c0

0800f1c4 <run_mems_process>:
		MFX_output_t run_mems_process() {
 800f1c4:	b570      	push	{r4, r5, r6, lr}
 800f1c6:	b0e6      	sub	sp, #408	; 0x198
 800f1c8:	4604      	mov	r4, r0
			RTC_Handler(&msg_dat);
 800f1ca:	a925      	add	r1, sp, #148	; 0x94
 800f1cc:	a81e      	add	r0, sp, #120	; 0x78
 800f1ce:	f7ff fda3 	bl	800ed18 <RTC_Handler>
			Accelero_Sensor_Handler(&msg_dat, IKS01A2_LSM6DSL_0);
 800f1d2:	2100      	movs	r1, #0
 800f1d4:	a825      	add	r0, sp, #148	; 0x94
 800f1d6:	f7ff fdd1 	bl	800ed7c <Accelero_Sensor_Handler>
			Gyro_Sensor_Handler(&msg_dat, IKS01A2_LSM6DSL_0);
 800f1da:	2100      	movs	r1, #0
 800f1dc:	a825      	add	r0, sp, #148	; 0x94
 800f1de:	f7ff fdf3 	bl	800edc8 <Gyro_Sensor_Handler>
			Magneto_Sensor_Handler(&msg_dat, IKS01A2_LSM303AGR_MAG_0);
 800f1e2:	2102      	movs	r1, #2
 800f1e4:	a825      	add	r0, sp, #148	; 0x94
 800f1e6:	f7ff fe15 	bl	800ee14 <Magneto_Sensor_Handler>
			Humidity_Sensor_Handler(&msg_dat, IKS01A2_HTS221_0);
 800f1ea:	2100      	movs	r1, #0
 800f1ec:	a825      	add	r0, sp, #148	; 0x94
 800f1ee:	f7ff fe9d 	bl	800ef2c <Humidity_Sensor_Handler>
			Temperature_Sensor_Handler(&msg_dat, IKS01A2_HTS221_0);
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	a825      	add	r0, sp, #148	; 0x94
 800f1f6:	f7ff feaf 	bl	800ef58 <Temperature_Sensor_Handler>
			Pressure_Sensor_Handler(&msg_dat, IKS01A2_LPS22HB_0);
 800f1fa:	2101      	movs	r1, #1
 800f1fc:	a825      	add	r0, sp, #148	; 0x94
 800f1fe:	f7ff fec1 	bl	800ef84 <Pressure_Sensor_Handler>
			data_out = FX_Data_Handler(&msg_dat);
 800f202:	4d09      	ldr	r5, [pc, #36]	; (800f228 <run_mems_process+0x64>)
 800f204:	a925      	add	r1, sp, #148	; 0x94
 800f206:	4668      	mov	r0, sp
 800f208:	f7ff fed2 	bl	800efb0 <FX_Data_Handler>
 800f20c:	2678      	movs	r6, #120	; 0x78
 800f20e:	4632      	mov	r2, r6
 800f210:	4669      	mov	r1, sp
 800f212:	4628      	mov	r0, r5
 800f214:	f00f fda4 	bl	801ed60 <memcpy>
			return data_out;
 800f218:	4632      	mov	r2, r6
 800f21a:	4629      	mov	r1, r5
 800f21c:	4620      	mov	r0, r4
 800f21e:	f00f fd9f 	bl	801ed60 <memcpy>
		}
 800f222:	4620      	mov	r0, r4
 800f224:	b066      	add	sp, #408	; 0x198
 800f226:	bd70      	pop	{r4, r5, r6, pc}
 800f228:	20002864 	.word	0x20002864

0800f22c <MeasureSensors>:
		VL53L1_RangingMeasurementData_t* MeasureSensors(void) {
 800f22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800f230:	2400      	movs	r4, #0
 800f232:	e00f      	b.n	800f254 <MeasureSensors+0x28>
					Dev = &devLeft;
 800f234:	4a1f      	ldr	r2, [pc, #124]	; (800f2b4 <MeasureSensors+0x88>)
 800f236:	4b20      	ldr	r3, [pc, #128]	; (800f2b8 <MeasureSensors+0x8c>)
 800f238:	601a      	str	r2, [r3, #0]
				status = VL53L1_StartMeasurement(Dev);
 800f23a:	4e1f      	ldr	r6, [pc, #124]	; (800f2b8 <MeasureSensors+0x8c>)
 800f23c:	6830      	ldr	r0, [r6, #0]
 800f23e:	f7f5 fe83 	bl	8004f48 <VL53L1_StartMeasurement>
 800f242:	4d1e      	ldr	r5, [pc, #120]	; (800f2bc <MeasureSensors+0x90>)
 800f244:	6028      	str	r0, [r5, #0]
				status = VL53L1_WaitMeasurementDataReady(Dev);
 800f246:	6830      	ldr	r0, [r6, #0]
 800f248:	f7f5 fecc 	bl	8004fe4 <VL53L1_WaitMeasurementDataReady>
 800f24c:	6028      	str	r0, [r5, #0]
				if (!status) {
 800f24e:	b190      	cbz	r0, 800f276 <MeasureSensors+0x4a>
			for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800f250:	3401      	adds	r4, #1
 800f252:	b2e4      	uxtb	r4, r4
 800f254:	2c02      	cmp	r4, #2
 800f256:	d82a      	bhi.n	800f2ae <MeasureSensors+0x82>
				switch (ToFSensor) {
 800f258:	4627      	mov	r7, r4
 800f25a:	2c01      	cmp	r4, #1
 800f25c:	d007      	beq.n	800f26e <MeasureSensors+0x42>
 800f25e:	2c00      	cmp	r4, #0
 800f260:	d0e8      	beq.n	800f234 <MeasureSensors+0x8>
 800f262:	2c02      	cmp	r4, #2
 800f264:	d1e9      	bne.n	800f23a <MeasureSensors+0xe>
					Dev = &devRight;
 800f266:	4a16      	ldr	r2, [pc, #88]	; (800f2c0 <MeasureSensors+0x94>)
 800f268:	4b13      	ldr	r3, [pc, #76]	; (800f2b8 <MeasureSensors+0x8c>)
 800f26a:	601a      	str	r2, [r3, #0]
					break;
 800f26c:	e7e5      	b.n	800f23a <MeasureSensors+0xe>
					Dev = &devCenter;
 800f26e:	4a15      	ldr	r2, [pc, #84]	; (800f2c4 <MeasureSensors+0x98>)
 800f270:	4b11      	ldr	r3, [pc, #68]	; (800f2b8 <MeasureSensors+0x8c>)
 800f272:	601a      	str	r2, [r3, #0]
					break;
 800f274:	e7e1      	b.n	800f23a <MeasureSensors+0xe>
					status = VL53L1_GetRangingMeasurementData(Dev,
 800f276:	4d14      	ldr	r5, [pc, #80]	; (800f2c8 <MeasureSensors+0x9c>)
 800f278:	46b1      	mov	r9, r6
 800f27a:	4629      	mov	r1, r5
 800f27c:	6830      	ldr	r0, [r6, #0]
 800f27e:	f7f5 feb7 	bl	8004ff0 <VL53L1_GetRangingMeasurementData>
 800f282:	f8df 8038 	ldr.w	r8, [pc, #56]	; 800f2bc <MeasureSensors+0x90>
 800f286:	f8c8 0000 	str.w	r0, [r8]
					RangeData[ToFSensor] = RangingData;
 800f28a:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 800f28e:	00bb      	lsls	r3, r7, #2
 800f290:	4e0e      	ldr	r6, [pc, #56]	; (800f2cc <MeasureSensors+0xa0>)
 800f292:	441e      	add	r6, r3
 800f294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f296:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f298:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f29c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
					status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 800f2a0:	f8d9 0000 	ldr.w	r0, [r9]
 800f2a4:	f7f5 fe90 	bl	8004fc8 <VL53L1_ClearInterruptAndStartMeasurement>
 800f2a8:	f8c8 0000 	str.w	r0, [r8]
 800f2ac:	e7d0      	b.n	800f250 <MeasureSensors+0x24>
		}
 800f2ae:	4807      	ldr	r0, [pc, #28]	; (800f2cc <MeasureSensors+0xa0>)
 800f2b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2b4:	20002bd4 	.word	0x20002bd4
 800f2b8:	2000148c 	.word	0x2000148c
 800f2bc:	20003714 	.word	0x20003714
 800f2c0:	20003334 	.word	0x20003334
 800f2c4:	20002f8c 	.word	0x20002f8c
 800f2c8:	20002820 	.word	0x20002820
 800f2cc:	200027cc 	.word	0x200027cc

0800f2d0 <uartSendChar>:

		/** @brief Sends a character to serial port
		 * @param ch Character to send
		 * @retval Character sent
		 */
		int uartSendChar(int ch) {
 800f2d0:	b500      	push	{lr}
 800f2d2:	b083      	sub	sp, #12
 800f2d4:	9001      	str	r0, [sp, #4]

//	while ((uart2TXReady == 0)) {
//		;
//	}

			uart2TXReady = 0;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	4a0b      	ldr	r2, [pc, #44]	; (800f308 <uartSendChar+0x38>)
 800f2da:	6013      	str	r3, [r2, #0]
			uart6TXReady = 0;
 800f2dc:	4a0b      	ldr	r2, [pc, #44]	; (800f30c <uartSendChar+0x3c>)
 800f2de:	6013      	str	r3, [r2, #0]

//	while (uart6TXReady == 0) {
//		;
//	}

			while (HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY) {
 800f2e0:	480b      	ldr	r0, [pc, #44]	; (800f310 <uartSendChar+0x40>)
 800f2e2:	f7ff f8b7 	bl	800e454 <HAL_UART_GetState>
 800f2e6:	2820      	cmp	r0, #32
 800f2e8:	d1fa      	bne.n	800f2e0 <uartSendChar+0x10>

			}

			HAL_UART_Transmit_DMA(&huart2, (uint8_t *) &ch, 1);
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	a901      	add	r1, sp, #4
 800f2ee:	4808      	ldr	r0, [pc, #32]	; (800f310 <uartSendChar+0x40>)
 800f2f0:	f7fe feb6 	bl	800e060 <HAL_UART_Transmit_DMA>

			// HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 100);

			while (HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY) {
 800f2f4:	4806      	ldr	r0, [pc, #24]	; (800f310 <uartSendChar+0x40>)
 800f2f6:	f7ff f8ad 	bl	800e454 <HAL_UART_GetState>
 800f2fa:	2820      	cmp	r0, #32
 800f2fc:	d1fa      	bne.n	800f2f4 <uartSendChar+0x24>
//	while (uart2TXReady == 0) {
//		;
//	}

			return ch;
		}
 800f2fe:	9801      	ldr	r0, [sp, #4]
 800f300:	b003      	add	sp, #12
 800f302:	f85d fb04 	ldr.w	pc, [sp], #4
 800f306:	bf00      	nop
 800f308:	20001494 	.word	0x20001494
 800f30c:	20001498 	.word	0x20001498
 800f310:	2000398c 	.word	0x2000398c

0800f314 <uartReceiveChar>:

		/** @brief Receives a character from serial port
		 * @param None
		 * @retval Character received
		 */
		int uartReceiveChar(void) {
 800f314:	b500      	push	{lr}
 800f316:	b0a1      	sub	sp, #132	; 0x84

//	while (uartRXReady == 0) {
//		;
//	}

			uartRXReady = 0;
 800f318:	2200      	movs	r2, #0
 800f31a:	4b11      	ldr	r3, [pc, #68]	; (800f360 <uartReceiveChar+0x4c>)
 800f31c:	601a      	str	r2, [r3, #0]

			while (HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY) {
 800f31e:	4811      	ldr	r0, [pc, #68]	; (800f364 <uartReceiveChar+0x50>)
 800f320:	f7ff f898 	bl	800e454 <HAL_UART_GetState>
 800f324:	2820      	cmp	r0, #32
 800f326:	d1fa      	bne.n	800f31e <uartReceiveChar+0xa>

			}

			HAL_UART_Receive_DMA(&huart2, &ch, 1);
 800f328:	2201      	movs	r2, #1
 800f32a:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 800f32e:	480d      	ldr	r0, [pc, #52]	; (800f364 <uartReceiveChar+0x50>)
 800f330:	f7fe fedc 	bl	800e0ec <HAL_UART_Receive_DMA>

//	while (uartRXReady == 0) {
//
//		// Most of time is spend here, so
//		// run MEMS updates
			while (HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY) {
 800f334:	480b      	ldr	r0, [pc, #44]	; (800f364 <uartReceiveChar+0x50>)
 800f336:	f7ff f88d 	bl	800e454 <HAL_UART_GetState>
 800f33a:	2820      	cmp	r0, #32
 800f33c:	d00b      	beq.n	800f356 <uartReceiveChar+0x42>
				if (SensorReadRequest == 1U) {
 800f33e:	4b0a      	ldr	r3, [pc, #40]	; (800f368 <uartReceiveChar+0x54>)
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	b2db      	uxtb	r3, r3
 800f344:	2b01      	cmp	r3, #1
 800f346:	d1f5      	bne.n	800f334 <uartReceiveChar+0x20>
					SensorReadRequest = 0;
 800f348:	2200      	movs	r2, #0
 800f34a:	4b07      	ldr	r3, [pc, #28]	; (800f368 <uartReceiveChar+0x54>)
 800f34c:	701a      	strb	r2, [r3, #0]
					run_mems_process();
 800f34e:	4668      	mov	r0, sp
 800f350:	f7ff ff38 	bl	800f1c4 <run_mems_process>
 800f354:	e7ee      	b.n	800f334 <uartReceiveChar+0x20>
			//HAL_UART_DMAStop()

//	}

			return ch;
		}
 800f356:	f89d 007f 	ldrb.w	r0, [sp, #127]	; 0x7f
 800f35a:	b021      	add	sp, #132	; 0x84
 800f35c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f360:	2000149c 	.word	0x2000149c
 800f364:	2000398c 	.word	0x2000398c
 800f368:	20002860 	.word	0x20002860

0800f36c <__io_putchar>:

		/** @brief putchar call for standard output implementation
		 * @param ch Character to print
		 * @retval Character printed
		 */
		int __io_putchar(int ch) {
 800f36c:	b508      	push	{r3, lr}
			uartSendChar(ch);
 800f36e:	f7ff ffaf 	bl	800f2d0 <uartSendChar>

			return 0;
		}
 800f372:	2000      	movs	r0, #0
 800f374:	bd08      	pop	{r3, pc}

0800f376 <__io_getchar>:

		/** @brief getchar call for standard input implementation
		 * @param None
		 * @retval Character acquired from standard input
		 */
		int __io_getchar(void) {
 800f376:	b508      	push	{r3, lr}
			return uartReceiveChar();
 800f378:	f7ff ffcc 	bl	800f314 <uartReceiveChar>
		}
 800f37c:	bd08      	pop	{r3, pc}
	...

0800f380 <HAL_UART_TxCpltCallback>:
		 * @retval None
		 */
		void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
			/* Set transmission flag: trasfer complete*/

			if (UartHandle->Instance == USART2)
 800f380:	6803      	ldr	r3, [r0, #0]
 800f382:	4a07      	ldr	r2, [pc, #28]	; (800f3a0 <HAL_UART_TxCpltCallback+0x20>)
 800f384:	4293      	cmp	r3, r2
 800f386:	d003      	beq.n	800f390 <HAL_UART_TxCpltCallback+0x10>
				uart2TXReady = 1;
			if (UartHandle->Instance == USART6)
 800f388:	4a06      	ldr	r2, [pc, #24]	; (800f3a4 <HAL_UART_TxCpltCallback+0x24>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d004      	beq.n	800f398 <HAL_UART_TxCpltCallback+0x18>
 800f38e:	4770      	bx	lr
				uart2TXReady = 1;
 800f390:	2101      	movs	r1, #1
 800f392:	4a05      	ldr	r2, [pc, #20]	; (800f3a8 <HAL_UART_TxCpltCallback+0x28>)
 800f394:	6011      	str	r1, [r2, #0]
 800f396:	e7f7      	b.n	800f388 <HAL_UART_TxCpltCallback+0x8>
				uart6TXReady = 1;
 800f398:	2201      	movs	r2, #1
 800f39a:	4b04      	ldr	r3, [pc, #16]	; (800f3ac <HAL_UART_TxCpltCallback+0x2c>)
 800f39c:	601a      	str	r2, [r3, #0]
		}
 800f39e:	e7f6      	b.n	800f38e <HAL_UART_TxCpltCallback+0xe>
 800f3a0:	40004400 	.word	0x40004400
 800f3a4:	40011400 	.word	0x40011400
 800f3a8:	20001494 	.word	0x20001494
 800f3ac:	20001498 	.word	0x20001498

0800f3b0 <HAL_UART_RxCpltCallback>:
		 *         you can add your own implementation.
		 * @retval None
		 */
		void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
			/* Set transmission flag: transfer complete*/
			uartRXReady = 1;
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	4b01      	ldr	r3, [pc, #4]	; (800f3b8 <HAL_UART_RxCpltCallback+0x8>)
 800f3b4:	601a      	str	r2, [r3, #0]
 800f3b6:	4770      	bx	lr
 800f3b8:	2000149c 	.word	0x2000149c

0800f3bc <Error_Handler>:

		/**
		 * @brief  This function is executed in case of error occurrence.
		 * @retval None
		 */
		void Error_Handler(void) {
 800f3bc:	b508      	push	{r3, lr}
			/* USER CODE BEGIN Error_Handler_Debug */

			for (;;) {
				BSP_LED_On(LED2);
 800f3be:	2000      	movs	r0, #0
 800f3c0:	f7f8 fd00 	bl	8007dc4 <BSP_LED_On>
				HAL_Delay(100);
 800f3c4:	2064      	movs	r0, #100	; 0x64
 800f3c6:	f7f9 fa15 	bl	80087f4 <HAL_Delay>
				BSP_LED_Off(LED2);
 800f3ca:	2000      	movs	r0, #0
 800f3cc:	f7f8 fd06 	bl	8007ddc <BSP_LED_Off>
				HAL_Delay(100);
 800f3d0:	2064      	movs	r0, #100	; 0x64
 800f3d2:	f7f9 fa0f 	bl	80087f4 <HAL_Delay>
 800f3d6:	e7f2      	b.n	800f3be <Error_Handler+0x2>

0800f3d8 <RTC_Config>:
		static void RTC_Config(void) {
 800f3d8:	b500      	push	{lr}
 800f3da:	b08d      	sub	sp, #52	; 0x34
			rcc_osc_init_struct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 800f3dc:	230c      	movs	r3, #12
 800f3de:	9300      	str	r3, [sp, #0]
			rcc_osc_init_struct.PLL.PLLState = RCC_PLL_NONE;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	9306      	str	r3, [sp, #24]
			rcc_osc_init_struct.LSEState = RCC_LSE_ON;
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	9202      	str	r2, [sp, #8]
			rcc_osc_init_struct.LSIState = RCC_LSI_OFF;
 800f3e8:	9305      	str	r3, [sp, #20]
			if (HAL_RCC_OscConfig(&rcc_osc_init_struct) != HAL_OK) {
 800f3ea:	4668      	mov	r0, sp
 800f3ec:	f7fc fac2 	bl	800b974 <HAL_RCC_OscConfig>
 800f3f0:	b1b8      	cbz	r0, 800f422 <RTC_Config+0x4a>
				UseLSI = 1;
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	4b11      	ldr	r3, [pc, #68]	; (800f43c <RTC_Config+0x64>)
 800f3f6:	601a      	str	r2, [r3, #0]
				RtcHandle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV_LSI;
 800f3f8:	4a11      	ldr	r2, [pc, #68]	; (800f440 <RTC_Config+0x68>)
 800f3fa:	237f      	movs	r3, #127	; 0x7f
 800f3fc:	6093      	str	r3, [r2, #8]
				RtcHandle.Init.SynchPrediv = RTC_SYNCH_PREDIV_LSI;
 800f3fe:	23f9      	movs	r3, #249	; 0xf9
 800f400:	60d3      	str	r3, [r2, #12]
				RtcSynchPrediv = RTC_SYNCH_PREDIV_LSI;
 800f402:	4a10      	ldr	r2, [pc, #64]	; (800f444 <RTC_Config+0x6c>)
 800f404:	6013      	str	r3, [r2, #0]
			RtcHandle.Instance = RTC;
 800f406:	480e      	ldr	r0, [pc, #56]	; (800f440 <RTC_Config+0x68>)
 800f408:	4b0f      	ldr	r3, [pc, #60]	; (800f448 <RTC_Config+0x70>)
 800f40a:	6003      	str	r3, [r0, #0]
			RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800f40c:	2300      	movs	r3, #0
 800f40e:	6043      	str	r3, [r0, #4]
			RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800f410:	6103      	str	r3, [r0, #16]
			RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800f412:	6143      	str	r3, [r0, #20]
			RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800f414:	6183      	str	r3, [r0, #24]
			if (HAL_RTC_Init(&RtcHandle) != HAL_OK) {
 800f416:	f7fd f821 	bl	800c45c <HAL_RTC_Init>
 800f41a:	b968      	cbnz	r0, 800f438 <RTC_Config+0x60>
		}
 800f41c:	b00d      	add	sp, #52	; 0x34
 800f41e:	f85d fb04 	ldr.w	pc, [sp], #4
				UseLSI = 0;
 800f422:	2200      	movs	r2, #0
 800f424:	4b05      	ldr	r3, [pc, #20]	; (800f43c <RTC_Config+0x64>)
 800f426:	601a      	str	r2, [r3, #0]
				RtcHandle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV_LSE;
 800f428:	4a05      	ldr	r2, [pc, #20]	; (800f440 <RTC_Config+0x68>)
 800f42a:	237f      	movs	r3, #127	; 0x7f
 800f42c:	6093      	str	r3, [r2, #8]
				RtcHandle.Init.SynchPrediv = RTC_SYNCH_PREDIV_LSE;
 800f42e:	23ff      	movs	r3, #255	; 0xff
 800f430:	60d3      	str	r3, [r2, #12]
				RtcSynchPrediv = RTC_SYNCH_PREDIV_LSE;
 800f432:	4a04      	ldr	r2, [pc, #16]	; (800f444 <RTC_Config+0x6c>)
 800f434:	6013      	str	r3, [r2, #0]
 800f436:	e7e6      	b.n	800f406 <RTC_Config+0x2e>
				Error_Handler();
 800f438:	f7ff ffc0 	bl	800f3bc <Error_Handler>
 800f43c:	200028dc 	.word	0x200028dc
 800f440:	2000283c 	.word	0x2000283c
 800f444:	2000285c 	.word	0x2000285c
 800f448:	40002800 	.word	0x40002800

0800f44c <RTC_TimeStampConfig>:
		static void RTC_TimeStampConfig(void) {
 800f44c:	b500      	push	{lr}
 800f44e:	b087      	sub	sp, #28
			sdatestructure.Year = 0x01;
 800f450:	2201      	movs	r2, #1
 800f452:	f88d 2017 	strb.w	r2, [sp, #23]
			sdatestructure.Month = RTC_MONTH_JANUARY;
 800f456:	f88d 2015 	strb.w	r2, [sp, #21]
			sdatestructure.Date = 0x01;
 800f45a:	f88d 2016 	strb.w	r2, [sp, #22]
			sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;
 800f45e:	a906      	add	r1, sp, #24
 800f460:	f801 2d04 	strb.w	r2, [r1, #-4]!
			if (HAL_RTC_SetDate(&RtcHandle, &sdatestructure, FORMAT_BCD)
 800f464:	480d      	ldr	r0, [pc, #52]	; (800f49c <RTC_TimeStampConfig+0x50>)
 800f466:	f7fd f9ef 	bl	800c848 <HAL_RTC_SetDate>
 800f46a:	b998      	cbnz	r0, 800f494 <RTC_TimeStampConfig+0x48>
			stimestructure.Hours = 0x00;
 800f46c:	2300      	movs	r3, #0
 800f46e:	f88d 3000 	strb.w	r3, [sp]
			stimestructure.Minutes = 0x00;
 800f472:	f88d 3001 	strb.w	r3, [sp, #1]
			stimestructure.Seconds = 0x00;
 800f476:	f88d 3002 	strb.w	r3, [sp, #2]
			stimestructure.TimeFormat = RTC_HOURFORMAT_24;
 800f47a:	f88d 3003 	strb.w	r3, [sp, #3]
			stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800f47e:	9303      	str	r3, [sp, #12]
			stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800f480:	9304      	str	r3, [sp, #16]
			if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, FORMAT_BCD)
 800f482:	2201      	movs	r2, #1
 800f484:	4669      	mov	r1, sp
 800f486:	4805      	ldr	r0, [pc, #20]	; (800f49c <RTC_TimeStampConfig+0x50>)
 800f488:	f7fd f89e 	bl	800c5c8 <HAL_RTC_SetTime>
 800f48c:	b920      	cbnz	r0, 800f498 <RTC_TimeStampConfig+0x4c>
		}
 800f48e:	b007      	add	sp, #28
 800f490:	f85d fb04 	ldr.w	pc, [sp], #4
				Error_Handler();
 800f494:	f7ff ff92 	bl	800f3bc <Error_Handler>
				Error_Handler();
 800f498:	f7ff ff90 	bl	800f3bc <Error_Handler>
 800f49c:	2000283c 	.word	0x2000283c

0800f4a0 <SystemClock_Config>:
		void SystemClock_Config(void) {
 800f4a0:	b500      	push	{lr}
 800f4a2:	b095      	sub	sp, #84	; 0x54
			RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800f4a4:	2230      	movs	r2, #48	; 0x30
 800f4a6:	2100      	movs	r1, #0
 800f4a8:	a808      	add	r0, sp, #32
 800f4aa:	f00f fc64 	bl	801ed76 <memset>
			RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	9303      	str	r3, [sp, #12]
 800f4b2:	9304      	str	r3, [sp, #16]
 800f4b4:	9305      	str	r3, [sp, #20]
 800f4b6:	9306      	str	r3, [sp, #24]
 800f4b8:	9307      	str	r3, [sp, #28]
			__HAL_RCC_PWR_CLK_ENABLE()
 800f4ba:	9301      	str	r3, [sp, #4]
 800f4bc:	4a21      	ldr	r2, [pc, #132]	; (800f544 <SystemClock_Config+0xa4>)
 800f4be:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800f4c0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800f4c4:	6411      	str	r1, [r2, #64]	; 0x40
 800f4c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f4c8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800f4cc:	9201      	str	r2, [sp, #4]
 800f4ce:	9a01      	ldr	r2, [sp, #4]
			__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800f4d0:	9302      	str	r3, [sp, #8]
 800f4d2:	4a1d      	ldr	r2, [pc, #116]	; (800f548 <SystemClock_Config+0xa8>)
 800f4d4:	6813      	ldr	r3, [r2, #0]
 800f4d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800f4da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4de:	6013      	str	r3, [r2, #0]
 800f4e0:	6813      	ldr	r3, [r2, #0]
 800f4e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f4e6:	9302      	str	r3, [sp, #8]
 800f4e8:	9b02      	ldr	r3, [sp, #8]
			RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	9308      	str	r3, [sp, #32]
			RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800f4ee:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800f4f2:	9309      	str	r3, [sp, #36]	; 0x24
			RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f4f4:	2302      	movs	r3, #2
 800f4f6:	930e      	str	r3, [sp, #56]	; 0x38
			RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f4f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f4fc:	930f      	str	r3, [sp, #60]	; 0x3c
			RCC_OscInitStruct.PLL.PLLM = 8;
 800f4fe:	2308      	movs	r3, #8
 800f500:	9310      	str	r3, [sp, #64]	; 0x40
			RCC_OscInitStruct.PLL.PLLN = 336;
 800f502:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800f506:	9311      	str	r3, [sp, #68]	; 0x44
			RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800f508:	2304      	movs	r3, #4
 800f50a:	9312      	str	r3, [sp, #72]	; 0x48
			RCC_OscInitStruct.PLL.PLLQ = 7;
 800f50c:	2307      	movs	r3, #7
 800f50e:	9313      	str	r3, [sp, #76]	; 0x4c
			if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800f510:	a808      	add	r0, sp, #32
 800f512:	f7fc fa2f 	bl	800b974 <HAL_RCC_OscConfig>
 800f516:	b980      	cbnz	r0, 800f53a <SystemClock_Config+0x9a>
			RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK
 800f518:	230f      	movs	r3, #15
 800f51a:	9303      	str	r3, [sp, #12]
			RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f51c:	2102      	movs	r1, #2
 800f51e:	9104      	str	r1, [sp, #16]
			RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f520:	2300      	movs	r3, #0
 800f522:	9305      	str	r3, [sp, #20]
			RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800f524:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f528:	9206      	str	r2, [sp, #24]
			RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800f52a:	9307      	str	r3, [sp, #28]
			if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)
 800f52c:	a803      	add	r0, sp, #12
 800f52e:	f7fc fcd5 	bl	800bedc <HAL_RCC_ClockConfig>
 800f532:	b920      	cbnz	r0, 800f53e <SystemClock_Config+0x9e>
		}
 800f534:	b015      	add	sp, #84	; 0x54
 800f536:	f85d fb04 	ldr.w	pc, [sp], #4
				Error_Handler();
 800f53a:	f7ff ff3f 	bl	800f3bc <Error_Handler>
				Error_Handler();
 800f53e:	f7ff ff3d 	bl	800f3bc <Error_Handler>
 800f542:	bf00      	nop
 800f544:	40023800 	.word	0x40023800
 800f548:	40007000 	.word	0x40007000

0800f54c <main>:
int main(void) {
 800f54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f550:	ed2d 8b04 	vpush	{d8-d9}
 800f554:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
	HAL_Init();
 800f558:	f7f9 f920 	bl	800879c <HAL_Init>
	SystemClock_Config();
 800f55c:	f7ff ffa0 	bl	800f4a0 <SystemClock_Config>
	MX_GPIO_Init();
 800f560:	f7ff fa12 	bl	800e988 <MX_GPIO_Init>
	MX_DMA_Init();
 800f564:	f7ff f9c4 	bl	800e8f0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800f568:	f000 fece 	bl	8010308 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800f56c:	f7ff fa7a 	bl	800ea64 <MX_I2C1_Init>
	MX_TIM2_Init();
 800f570:	f000 fe10 	bl	8010194 <MX_TIM2_Init>
	MX_TIM3_Init();
 800f574:	f000 fe6a 	bl	801024c <MX_TIM3_Init>
	MX_ADC1_Init();
 800f578:	f7ff f816 	bl	800e5a8 <MX_ADC1_Init>
	MX_USART6_UART_Init();
 800f57c:	f000 fee0 	bl	8010340 <MX_USART6_UART_Init>
	MX_CRC_Init();
 800f580:	f7ff fb3a 	bl	800ebf8 <MX_CRC_Init>
	MX_I2C1_Init();
 800f584:	f7ff fa6e 	bl	800ea64 <MX_I2C1_Init>
	__HAL_RCC_CRC_CLK_ENABLE()
 800f588:	2500      	movs	r5, #0
 800f58a:	952e      	str	r5, [sp, #184]	; 0xb8
 800f58c:	4bae      	ldr	r3, [pc, #696]	; (800f848 <main+0x2fc>)
 800f58e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f590:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f594:	631a      	str	r2, [r3, #48]	; 0x30
 800f596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f59c:	932e      	str	r3, [sp, #184]	; 0xb8
 800f59e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
	setvbuf(stdin, NULL, _IONBF, 0);
 800f5a0:	4eaa      	ldr	r6, [pc, #680]	; (800f84c <main+0x300>)
 800f5a2:	6830      	ldr	r0, [r6, #0]
 800f5a4:	462b      	mov	r3, r5
 800f5a6:	2202      	movs	r2, #2
 800f5a8:	4629      	mov	r1, r5
 800f5aa:	6840      	ldr	r0, [r0, #4]
 800f5ac:	f010 f9a4 	bl	801f8f8 <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 800f5b0:	6830      	ldr	r0, [r6, #0]
 800f5b2:	462b      	mov	r3, r5
 800f5b4:	2202      	movs	r2, #2
 800f5b6:	4629      	mov	r1, r5
 800f5b8:	6880      	ldr	r0, [r0, #8]
 800f5ba:	f010 f99d 	bl	801f8f8 <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0);
 800f5be:	6830      	ldr	r0, [r6, #0]
 800f5c0:	462b      	mov	r3, r5
 800f5c2:	2202      	movs	r2, #2
 800f5c4:	4629      	mov	r1, r5
 800f5c6:	68c0      	ldr	r0, [r0, #12]
 800f5c8:	f010 f996 	bl	801f8f8 <setvbuf>
	printf_rtc_timestamp();
 800f5cc:	f7ff fde4 	bl	800f198 <printf_rtc_timestamp>
	printf("Starting, initializing sensors ...\n");
 800f5d0:	489f      	ldr	r0, [pc, #636]	; (800f850 <main+0x304>)
 800f5d2:	f010 f979 	bl	801f8c8 <puts>
	XNUCLEO53L1A1_Init();
 800f5d6:	f7f8 fd6b 	bl	80080b0 <XNUCLEO53L1A1_Init>
	MX_TIM_ALGO_Init();
 800f5da:	f7ff fb1f 	bl	800ec1c <MX_TIM_ALGO_Init>
	Init_Sensors();
 800f5de:	f7ff fb41 	bl	800ec64 <Init_Sensors>
	MX_X_CUBE_MEMS1_Init();
 800f5e2:	f7ff f981 	bl	800e8e8 <MX_X_CUBE_MEMS1_Init>
	MotionFX_manager_init();
 800f5e6:	f7fe ff3b 	bl	800e460 <MotionFX_manager_init>
	if (Enabled6X == 1U) {
 800f5ea:	4b9a      	ldr	r3, [pc, #616]	; (800f854 <main+0x308>)
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	f040 80a6 	bne.w	800f740 <main+0x1f4>
		MotionFX_enable_6X(MFX_ENGINE_ENABLE);
 800f5f4:	2001      	movs	r0, #1
 800f5f6:	f00b f827 	bl	801a648 <MotionFX_enable_6X>
		MotionFX_enable_9X(MFX_ENGINE_DISABLE);
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	f00b f848 	bl	801a690 <MotionFX_enable_9X>
		MotionFX_manager_stop_9X();
 800f600:	f7fe ffb1 	bl	800e566 <MotionFX_manager_stop_9X>
		MotionFX_manager_start_6X();
 800f604:	f7fe ffa0 	bl	800e548 <MotionFX_manager_start_6X>
	MotionFX_manager_get_version(lib_version, &lib_version_len);
 800f608:	a999      	add	r1, sp, #612	; 0x264
 800f60a:	a89a      	add	r0, sp, #616	; 0x268
 800f60c:	f7fe ffb0 	bl	800e570 <MotionFX_manager_get_version>
	RTC_Config();
 800f610:	f7ff fee2 	bl	800f3d8 <RTC_Config>
	RTC_TimeStampConfig();
 800f614:	f7ff ff1a 	bl	800f44c <RTC_TimeStampConfig>
	BSP_LED_On(LED2);
 800f618:	2000      	movs	r0, #0
 800f61a:	f7f8 fbd3 	bl	8007dc4 <BSP_LED_On>
	HAL_Delay(500);
 800f61e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f622:	f7f9 f8e7 	bl	80087f4 <HAL_Delay>
	BSP_LED_Off(LED2);
 800f626:	2000      	movs	r0, #0
 800f628:	f7f8 fbd8 	bl	8007ddc <BSP_LED_Off>
	MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800f62c:	200a      	movs	r0, #10
 800f62e:	f7fe ffad 	bl	800e58c <MotionFX_manager_MagCal_start>
	MotionFX_MagCal_getParams(&mag_cal_test);
 800f632:	a854      	add	r0, sp, #336	; 0x150
 800f634:	f00c fbdc 	bl	801bdf0 <MotionFX_MagCal_getParams>
	if (mag_cal_test.cal_quality == MFX_MAGCALGOOD) {
 800f638:	f89d 315c 	ldrb.w	r3, [sp, #348]	; 0x15c
 800f63c:	2b03      	cmp	r3, #3
 800f63e:	d11d      	bne.n	800f67c <main+0x130>
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800f640:	eddd 7a54 	vldr	s15, [sp, #336]	; 0x150
 800f644:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800f858 <main+0x30c>
 800f648:	ee67 7a87 	vmul.f32	s15, s15, s14
		MagOffset.x = (int32_t) ans_float;
 800f64c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f650:	4b82      	ldr	r3, [pc, #520]	; (800f85c <main+0x310>)
 800f652:	edc3 7a00 	vstr	s15, [r3]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800f656:	eddd 7a55 	vldr	s15, [sp, #340]	; 0x154
 800f65a:	ee67 7a87 	vmul.f32	s15, s15, s14
		MagOffset.y = (int32_t) ans_float;
 800f65e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f662:	edc3 7a01 	vstr	s15, [r3, #4]
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800f666:	eddd 7a56 	vldr	s15, [sp, #344]	; 0x158
 800f66a:	ee67 7a87 	vmul.f32	s15, s15, s14
		MagOffset.z = (int32_t) ans_float;
 800f66e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f672:	edc3 7a02 	vstr	s15, [r3, #8]
		MagCalStatus = 1;
 800f676:	2201      	movs	r2, #1
 800f678:	4b79      	ldr	r3, [pc, #484]	; (800f860 <main+0x314>)
 800f67a:	701a      	strb	r2, [r3, #0]
int main(void) {
 800f67c:	2500      	movs	r5, #0
	for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800f67e:	2d02      	cmp	r5, #2
 800f680:	d969      	bls.n	800f756 <main+0x20a>
 800f682:	2500      	movs	r5, #0
	for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800f684:	2d02      	cmp	r5, #2
 800f686:	d96f      	bls.n	800f768 <main+0x21c>
	printf_rtc_timestamp();
 800f688:	f7ff fd86 	bl	800f198 <printf_rtc_timestamp>
	printf("Sensors initialized.\n");
 800f68c:	4875      	ldr	r0, [pc, #468]	; (800f864 <main+0x318>)
 800f68e:	f010 f91b 	bl	801f8c8 <puts>
	printf_rtc_timestamp();
 800f692:	f7ff fd81 	bl	800f198 <printf_rtc_timestamp>
	printf("Initialing motors ...\n");
 800f696:	4874      	ldr	r0, [pc, #464]	; (800f868 <main+0x31c>)
 800f698:	f010 f916 	bl	801f8c8 <puts>
	motor_init();
 800f69c:	f000 fa86 	bl	800fbac <motor_init>
	printf_rtc_timestamp();
 800f6a0:	f7ff fd7a 	bl	800f198 <printf_rtc_timestamp>
	printf("Motors initialized.\n");
 800f6a4:	4871      	ldr	r0, [pc, #452]	; (800f86c <main+0x320>)
 800f6a6:	f010 f90f 	bl	801f8c8 <puts>
	printf_rtc_timestamp();
 800f6aa:	f7ff fd75 	bl	800f198 <printf_rtc_timestamp>
	printf("Console ready.\n");
 800f6ae:	4870      	ldr	r0, [pc, #448]	; (800f870 <main+0x324>)
 800f6b0:	f010 f90a 	bl	801f8c8 <puts>
	IKS01A2_MOTION_SENSOR_Enable_6D_Orientation(0, 0);
 800f6b4:	2100      	movs	r1, #0
 800f6b6:	4608      	mov	r0, r1
 800f6b8:	f7f8 fb44 	bl	8007d44 <IKS01A2_MOTION_SENSOR_Enable_6D_Orientation>
	IKS01A2_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 416);
 800f6bc:	ed9f 8a6d 	vldr	s16, [pc, #436]	; 800f874 <main+0x328>
 800f6c0:	eeb0 0a48 	vmov.f32	s0, s16
 800f6c4:	2102      	movs	r1, #2
 800f6c6:	2000      	movs	r0, #0
 800f6c8:	f7f8 fae2 	bl	8007c90 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
	IKS01A2_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, LSM6DSL_2g);
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	2102      	movs	r1, #2
 800f6d0:	4610      	mov	r0, r2
 800f6d2:	f7f8 fb09 	bl	8007ce8 <IKS01A2_MOTION_SENSOR_SetFullScale>
	IKS01A2_MOTION_SENSOR_SetOutputDataRate(0, MOTION_GYRO, 416);
 800f6d6:	eeb0 0a48 	vmov.f32	s0, s16
 800f6da:	2101      	movs	r1, #1
 800f6dc:	2000      	movs	r0, #0
 800f6de:	f7f8 fad7 	bl	8007c90 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
	IKS01A2_MOTION_SENSOR_SetFullScale(0, MOTION_GYRO, LSM6DSL_500dps);
 800f6e2:	2202      	movs	r2, #2
 800f6e4:	2101      	movs	r1, #1
 800f6e6:	2000      	movs	r0, #0
 800f6e8:	f7f8 fafe 	bl	8007ce8 <IKS01A2_MOTION_SENSOR_SetFullScale>
	IKS01A2_MOTION_SENSOR_SetOutputDataRate(2, MOTION_MAGNETO, 416);
 800f6ec:	eeb0 0a48 	vmov.f32	s0, s16
 800f6f0:	2104      	movs	r1, #4
 800f6f2:	2002      	movs	r0, #2
 800f6f4:	f7f8 facc 	bl	8007c90 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
	IKS01A2_MOTION_SENSOR_SetFullScale(2, MOTION_MAGNETO,
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	2104      	movs	r1, #4
 800f6fc:	2002      	movs	r0, #2
 800f6fe:	f7f8 faf3 	bl	8007ce8 <IKS01A2_MOTION_SENSOR_SetFullScale>
	IKS01A2_ENV_SENSOR_SetOutputDataRate(0, ENV_TEMPERATURE, 0.1);
 800f702:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 800f878 <main+0x32c>
 800f706:	eeb0 0a48 	vmov.f32	s0, s16
 800f70a:	2101      	movs	r1, #1
 800f70c:	2000      	movs	r0, #0
 800f70e:	f7f7 ffc1 	bl	8007694 <IKS01A2_ENV_SENSOR_SetOutputDataRate>
	IKS01A2_ENV_SENSOR_SetOutputDataRate(0, ENV_HUMIDITY, 0.1);
 800f712:	eeb0 0a48 	vmov.f32	s0, s16
 800f716:	2104      	movs	r1, #4
 800f718:	2000      	movs	r0, #0
 800f71a:	f7f7 ffbb 	bl	8007694 <IKS01A2_ENV_SENSOR_SetOutputDataRate>
	IKS01A2_ENV_SENSOR_SetOutputDataRate(1, ENV_PRESSURE, 0.1);
 800f71e:	eeb0 0a48 	vmov.f32	s0, s16
 800f722:	2102      	movs	r1, #2
 800f724:	2001      	movs	r0, #1
 800f726:	f7f7 ffb5 	bl	8007694 <IKS01A2_ENV_SENSOR_SetOutputDataRate>
	char *readline = malloc(100 * sizeof(char));
 800f72a:	2064      	movs	r0, #100	; 0x64
 800f72c:	f00f fb10 	bl	801ed50 <malloc>
	start_data_out = run_mems_process();
 800f730:	a82f      	add	r0, sp, #188	; 0xbc
 800f732:	f7ff fd47 	bl	800f1c4 <run_mems_process>
	int rprint = 0;
 800f736:	2700      	movs	r7, #0
	int turning = 1;
 800f738:	2601      	movs	r6, #1
	int moving = 1;
 800f73a:	46b0      	mov	r8, r6
	uint8_t seconds = 0;
 800f73c:	46b9      	mov	r9, r7
 800f73e:	e121      	b.n	800f984 <main+0x438>
		MotionFX_enable_6X(MFX_ENGINE_DISABLE);
 800f740:	2000      	movs	r0, #0
 800f742:	f00a ff81 	bl	801a648 <MotionFX_enable_6X>
		MotionFX_enable_9X(MFX_ENGINE_ENABLE);
 800f746:	2001      	movs	r0, #1
 800f748:	f00a ffa2 	bl	801a690 <MotionFX_enable_9X>
		MotionFX_manager_stop_6X();
 800f74c:	f7fe ff01 	bl	800e552 <MotionFX_manager_stop_6X>
		MotionFX_manager_start_9X();
 800f750:	f7fe ff04 	bl	800e55c <MotionFX_manager_start_9X>
 800f754:	e758      	b.n	800f608 <main+0xbc>
		status = XNUCLEO53L1A1_ResetId(ToFSensor, 0);
 800f756:	2100      	movs	r1, #0
 800f758:	4628      	mov	r0, r5
 800f75a:	f7f8 fcfb 	bl	8008154 <XNUCLEO53L1A1_ResetId>
 800f75e:	4b47      	ldr	r3, [pc, #284]	; (800f87c <main+0x330>)
 800f760:	6018      	str	r0, [r3, #0]
	for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800f762:	3501      	adds	r5, #1
 800f764:	b2ed      	uxtb	r5, r5
 800f766:	e78a      	b.n	800f67e <main+0x132>
		switch (ToFSensor) {
 800f768:	46a8      	mov	r8, r5
 800f76a:	2d01      	cmp	r5, #1
 800f76c:	d064      	beq.n	800f838 <main+0x2ec>
 800f76e:	2d00      	cmp	r5, #0
 800f770:	d05e      	beq.n	800f830 <main+0x2e4>
 800f772:	2d02      	cmp	r5, #2
 800f774:	d064      	beq.n	800f840 <main+0x2f4>
		status = XNUCLEO53L1A1_ResetId(ToFSensor, 1);
 800f776:	2101      	movs	r1, #1
 800f778:	4640      	mov	r0, r8
 800f77a:	f7f8 fceb 	bl	8008154 <XNUCLEO53L1A1_ResetId>
 800f77e:	4f3f      	ldr	r7, [pc, #252]	; (800f87c <main+0x330>)
 800f780:	6038      	str	r0, [r7, #0]
		Dev->comms_speed_khz = 400;
 800f782:	4e3f      	ldr	r6, [pc, #252]	; (800f880 <main+0x334>)
 800f784:	6830      	ldr	r0, [r6, #0]
 800f786:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f78a:	f8a0 339a 	strh.w	r3, [r0, #922]	; 0x39a
		Dev->I2cHandle = &hi2c1;
 800f78e:	4b3d      	ldr	r3, [pc, #244]	; (800f884 <main+0x338>)
 800f790:	f8c0 33a0 	str.w	r3, [r0, #928]	; 0x3a0
		Dev->comms_type = 1;
 800f794:	2301      	movs	r3, #1
 800f796:	f880 3399 	strb.w	r3, [r0, #921]	; 0x399
		Dev->I2cDevAddr = 0x52; /* default ToF sensor I2C address*/
 800f79a:	2352      	movs	r3, #82	; 0x52
 800f79c:	f880 3398 	strb.w	r3, [r0, #920]	; 0x398
		VL53L1_RdWord(Dev, 0x010F, &wordData);
 800f7a0:	f20d 228e 	addw	r2, sp, #654	; 0x28e
 800f7a4:	f240 110f 	movw	r1, #271	; 0x10f
 800f7a8:	f000 ff72 	bl	8010690 <VL53L1_RdWord>
		printf("VL53L1X: %02X\n", wordData);
 800f7ac:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800f894 <main+0x348>
 800f7b0:	f8bd 128e 	ldrh.w	r1, [sp, #654]	; 0x28e
 800f7b4:	4648      	mov	r0, r9
 800f7b6:	f00f ffff 	bl	801f7b8 <iprintf>
		newI2C = Dev->I2cDevAddr + (ToFSensor + 1) * 2;
 800f7ba:	6830      	ldr	r0, [r6, #0]
 800f7bc:	f890 2398 	ldrb.w	r2, [r0, #920]	; 0x398
 800f7c0:	f108 0301 	add.w	r3, r8, #1
 800f7c4:	005b      	lsls	r3, r3, #1
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	4413      	add	r3, r2
 800f7ca:	fa5f f883 	uxtb.w	r8, r3
		status = VL53L1_SetDeviceAddress(Dev, newI2C);
 800f7ce:	4641      	mov	r1, r8
 800f7d0:	f7f5 f8bb 	bl	800494a <VL53L1_SetDeviceAddress>
 800f7d4:	6038      	str	r0, [r7, #0]
		Dev->I2cDevAddr = newI2C;
 800f7d6:	6830      	ldr	r0, [r6, #0]
 800f7d8:	f880 8398 	strb.w	r8, [r0, #920]	; 0x398
		VL53L1_RdWord(Dev, 0x010F, &wordData);
 800f7dc:	f20d 228e 	addw	r2, sp, #654	; 0x28e
 800f7e0:	f240 110f 	movw	r1, #271	; 0x10f
 800f7e4:	f000 ff54 	bl	8010690 <VL53L1_RdWord>
		printf("VL53L1X: %02X\n", wordData);
 800f7e8:	f8bd 128e 	ldrh.w	r1, [sp, #654]	; 0x28e
 800f7ec:	4648      	mov	r0, r9
 800f7ee:	f00f ffe3 	bl	801f7b8 <iprintf>
		status = VL53L1_WaitDeviceBooted(Dev);
 800f7f2:	6830      	ldr	r0, [r6, #0]
 800f7f4:	f7f5 f8af 	bl	8004956 <VL53L1_WaitDeviceBooted>
 800f7f8:	6038      	str	r0, [r7, #0]
		status = VL53L1_DataInit(Dev);
 800f7fa:	6830      	ldr	r0, [r6, #0]
 800f7fc:	f7f5 f962 	bl	8004ac4 <VL53L1_DataInit>
 800f800:	6038      	str	r0, [r7, #0]
		status = VL53L1_StaticInit(Dev);
 800f802:	6830      	ldr	r0, [r6, #0]
 800f804:	f7f5 fb1c 	bl	8004e40 <VL53L1_StaticInit>
 800f808:	6038      	str	r0, [r7, #0]
		status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 800f80a:	2103      	movs	r1, #3
 800f80c:	6830      	ldr	r0, [r6, #0]
 800f80e:	f7f5 f8a8 	bl	8004962 <VL53L1_SetDistanceMode>
 800f812:	6038      	str	r0, [r7, #0]
		status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 50000);
 800f814:	f24c 3150 	movw	r1, #50000	; 0xc350
 800f818:	6830      	ldr	r0, [r6, #0]
 800f81a:	f7f5 fa47 	bl	8004cac <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800f81e:	6038      	str	r0, [r7, #0]
		status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 100);
 800f820:	2164      	movs	r1, #100	; 0x64
 800f822:	6830      	ldr	r0, [r6, #0]
 800f824:	f7f5 f8e8 	bl	80049f8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800f828:	6038      	str	r0, [r7, #0]
	for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800f82a:	3501      	adds	r5, #1
 800f82c:	b2ed      	uxtb	r5, r5
 800f82e:	e729      	b.n	800f684 <main+0x138>
			Dev = &devLeft;
 800f830:	4a15      	ldr	r2, [pc, #84]	; (800f888 <main+0x33c>)
 800f832:	4b13      	ldr	r3, [pc, #76]	; (800f880 <main+0x334>)
 800f834:	601a      	str	r2, [r3, #0]
			break;
 800f836:	e79e      	b.n	800f776 <main+0x22a>
			Dev = &devCenter;
 800f838:	4a14      	ldr	r2, [pc, #80]	; (800f88c <main+0x340>)
 800f83a:	4b11      	ldr	r3, [pc, #68]	; (800f880 <main+0x334>)
 800f83c:	601a      	str	r2, [r3, #0]
			break;
 800f83e:	e79a      	b.n	800f776 <main+0x22a>
			Dev = &devRight;
 800f840:	4a13      	ldr	r2, [pc, #76]	; (800f890 <main+0x344>)
 800f842:	4b0f      	ldr	r3, [pc, #60]	; (800f880 <main+0x334>)
 800f844:	601a      	str	r2, [r3, #0]
			break;
 800f846:	e796      	b.n	800f776 <main+0x22a>
 800f848:	40023800 	.word	0x40023800
 800f84c:	200014a8 	.word	0x200014a8
 800f850:	08022144 	.word	0x08022144
 800f854:	20001484 	.word	0x20001484
 800f858:	43fa0000 	.word	0x43fa0000
 800f85c:	200027b0 	.word	0x200027b0
 800f860:	200027ac 	.word	0x200027ac
 800f864:	08022178 	.word	0x08022178
 800f868:	08022190 	.word	0x08022190
 800f86c:	080221a8 	.word	0x080221a8
 800f870:	080221bc 	.word	0x080221bc
 800f874:	43d00000 	.word	0x43d00000
 800f878:	3dcccccd 	.word	0x3dcccccd
 800f87c:	20003714 	.word	0x20003714
 800f880:	2000148c 	.word	0x2000148c
 800f884:	20002b20 	.word	0x20002b20
 800f888:	20002bd4 	.word	0x20002bd4
 800f88c:	20002f8c 	.word	0x20002f8c
 800f890:	20003334 	.word	0x20003334
 800f894:	08022168 	.word	0x08022168
										data_out.linear_acceleration_9X[0],
 800f898:	4ba7      	ldr	r3, [pc, #668]	; (800fb38 <main+0x5ec>)
 800f89a:	6a98      	ldr	r0, [r3, #40]	; 0x28
										data_out.linear_acceleration_9X[1],
 800f89c:	f8d3 a02c 	ldr.w	sl, [r3, #44]	; 0x2c
										data_out.linear_acceleration_9X[2],
 800f8a0:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
										data_out.rotation_9X[0], data_out.rotation_9X[1],
 800f8a4:	ed93 8a00 	vldr	s16, [r3]
 800f8a8:	edd3 8a01 	vldr	s17, [r3, #4]
										data_out.rotation_9X[2]);
 800f8ac:	ed93 9a02 	vldr	s18, [r3, #8]
								printf(
 800f8b0:	f7f0 fe52 	bl	8000558 <__aeabi_f2d>
 800f8b4:	4604      	mov	r4, r0
 800f8b6:	460d      	mov	r5, r1
 800f8b8:	ee19 0a10 	vmov	r0, s18
 800f8bc:	f7f0 fe4c 	bl	8000558 <__aeabi_f2d>
 800f8c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f8c4:	ee18 0a90 	vmov	r0, s17
 800f8c8:	f7f0 fe46 	bl	8000558 <__aeabi_f2d>
 800f8cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f8d0:	ee18 0a10 	vmov	r0, s16
 800f8d4:	f7f0 fe40 	bl	8000558 <__aeabi_f2d>
 800f8d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f8dc:	4658      	mov	r0, fp
 800f8de:	f7f0 fe3b 	bl	8000558 <__aeabi_f2d>
 800f8e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8e6:	4650      	mov	r0, sl
 800f8e8:	f7f0 fe36 	bl	8000558 <__aeabi_f2d>
 800f8ec:	e9cd 0100 	strd	r0, r1, [sp]
 800f8f0:	4622      	mov	r2, r4
 800f8f2:	462b      	mov	r3, r5
 800f8f4:	4891      	ldr	r0, [pc, #580]	; (800fb3c <main+0x5f0>)
 800f8f6:	f00f ff5f 	bl	801f7b8 <iprintf>
							printf("\n");
 800f8fa:	200a      	movs	r0, #10
 800f8fc:	f00f ff74 	bl	801f7e8 <putchar>
							RangeData = MeasureSensors();
 800f900:	f7ff fc94 	bl	800f22c <MeasureSensors>
 800f904:	4604      	mov	r4, r0
							for (ToFSensor = 2; ToFSensor < 3; ToFSensor = ToFSensor + 2) {
 800f906:	f04f 0a02 	mov.w	sl, #2
 800f90a:	f1ba 0f02 	cmp.w	sl, #2
 800f90e:	f240 8091 	bls.w	800fa34 <main+0x4e8>
							printf("\n");
 800f912:	200a      	movs	r0, #10
 800f914:	f00f ff68 	bl	801f7e8 <putchar>
							if (((*(RangeData + 2)).RangeMilliMeter > 400) && (moving)) {
 800f918:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 800f91c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800f920:	dd03      	ble.n	800f92a <main+0x3de>
 800f922:	f1b8 0f00 	cmp.w	r8, #0
 800f926:	f040 80a6 	bne.w	800fa76 <main+0x52a>
							if ((((*(RangeData + 2)).RangeMilliMeter < 400)) && (moving)) {
 800f92a:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 800f92e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800f932:	da03      	bge.n	800f93c <main+0x3f0>
 800f934:	f1b8 0f00 	cmp.w	r8, #0
 800f938:	f040 80b0 	bne.w	800fa9c <main+0x550>
							if ((fabsf(data_out.rotation_6X[0] - start_data_out.rotation_6X[0]) < 90) && (turning)) {
 800f93c:	4b7e      	ldr	r3, [pc, #504]	; (800fb38 <main+0x5ec>)
 800f93e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800f942:	ed9d 8a3e 	vldr	s16, [sp, #248]	; 0xf8
 800f946:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800f94a:	eef0 7ae7 	vabs.f32	s15, s15
 800f94e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800fb40 <main+0x5f4>
 800f952:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f95a:	d502      	bpl.n	800f962 <main+0x416>
 800f95c:	2e00      	cmp	r6, #0
 800f95e:	f040 80b1 	bne.w	800fac4 <main+0x578>
							if ((fabsf(data_out.rotation_6X[0] - start_data_out.rotation_6X[0]) > 90) && (turning)) {
 800f962:	4b75      	ldr	r3, [pc, #468]	; (800fb38 <main+0x5ec>)
 800f964:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800f968:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800f96c:	eef0 7ae7 	vabs.f32	s15, s15
 800f970:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800fb40 <main+0x5f4>
 800f974:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f97c:	dd02      	ble.n	800f984 <main+0x438>
 800f97e:	2e00      	cmp	r6, #0
 800f980:	f040 80c4 	bne.w	800fb0c <main+0x5c0>
	uint8_t seconds = 0;
 800f984:	464d      	mov	r5, r9
		uartRXReady = 1;
 800f986:	2201      	movs	r2, #1
 800f988:	4b6e      	ldr	r3, [pc, #440]	; (800fb44 <main+0x5f8>)
 800f98a:	601a      	str	r2, [r3, #0]
					if (SensorReadRequest == 1U) {
 800f98c:	4b6e      	ldr	r3, [pc, #440]	; (800fb48 <main+0x5fc>)
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	b2db      	uxtb	r3, r3
 800f992:	4293      	cmp	r3, r2
 800f994:	d1f7      	bne.n	800f986 <main+0x43a>
						stimestructure = RTC_Handler(&msg_dat);
 800f996:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 800fb74 <main+0x628>
 800f99a:	a958      	add	r1, sp, #352	; 0x160
 800f99c:	a828      	add	r0, sp, #160	; 0xa0
 800f99e:	f7ff f9bb 	bl	800ed18 <RTC_Handler>
 800f9a2:	46cc      	mov	ip, r9
 800f9a4:	f10d 0ea0 	add.w	lr, sp, #160	; 0xa0
 800f9a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f9ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f9b0:	f8de 3000 	ldr.w	r3, [lr]
 800f9b4:	f8cc 3000 	str.w	r3, [ip]
						Accelero_Sensor_Handler(&msg_dat, IKS01A2_LSM6DSL_0);
 800f9b8:	2100      	movs	r1, #0
 800f9ba:	a858      	add	r0, sp, #352	; 0x160
 800f9bc:	f7ff f9de 	bl	800ed7c <Accelero_Sensor_Handler>
						Gyro_Sensor_Handler(&msg_dat, IKS01A2_LSM6DSL_0);
 800f9c0:	2100      	movs	r1, #0
 800f9c2:	a858      	add	r0, sp, #352	; 0x160
 800f9c4:	f7ff fa00 	bl	800edc8 <Gyro_Sensor_Handler>
						Magneto_Sensor_Handler(&msg_dat, IKS01A2_LSM303AGR_MAG_0);
 800f9c8:	2102      	movs	r1, #2
 800f9ca:	a858      	add	r0, sp, #352	; 0x160
 800f9cc:	f7ff fa22 	bl	800ee14 <Magneto_Sensor_Handler>
						Humidity_Sensor_Handler(&msg_dat, IKS01A2_HTS221_0);
 800f9d0:	2100      	movs	r1, #0
 800f9d2:	a858      	add	r0, sp, #352	; 0x160
 800f9d4:	f7ff faaa 	bl	800ef2c <Humidity_Sensor_Handler>
						Temperature_Sensor_Handler(&msg_dat, IKS01A2_HTS221_0);
 800f9d8:	2100      	movs	r1, #0
 800f9da:	a858      	add	r0, sp, #352	; 0x160
 800f9dc:	f7ff fabc 	bl	800ef58 <Temperature_Sensor_Handler>
						Pressure_Sensor_Handler(&msg_dat, IKS01A2_LPS22HB_0);
 800f9e0:	2101      	movs	r1, #1
 800f9e2:	a858      	add	r0, sp, #352	; 0x160
 800f9e4:	f7ff face 	bl	800ef84 <Pressure_Sensor_Handler>
						data_out = FX_Data_Handler(&msg_dat);
 800f9e8:	a958      	add	r1, sp, #352	; 0x160
 800f9ea:	a80a      	add	r0, sp, #40	; 0x28
 800f9ec:	f7ff fae0 	bl	800efb0 <FX_Data_Handler>
 800f9f0:	2278      	movs	r2, #120	; 0x78
 800f9f2:	a90a      	add	r1, sp, #40	; 0x28
 800f9f4:	4850      	ldr	r0, [pc, #320]	; (800fb38 <main+0x5ec>)
 800f9f6:	f00f f9b3 	bl	801ed60 <memcpy>
						seconds = stimestructure.Seconds;
 800f9fa:	f899 9002 	ldrb.w	r9, [r9, #2]
						if (seconds > seconds_last) {
 800f9fe:	454d      	cmp	r5, r9
 800fa00:	d28a      	bcs.n	800f918 <main+0x3cc>
							printf_rtc_timestamp();
 800fa02:	f7ff fbc9 	bl	800f198 <printf_rtc_timestamp>
							printf(
 800fa06:	983e      	ldr	r0, [sp, #248]	; 0xf8
 800fa08:	f7f0 fda6 	bl	8000558 <__aeabi_f2d>
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	460b      	mov	r3, r1
 800fa10:	484e      	ldr	r0, [pc, #312]	; (800fb4c <main+0x600>)
 800fa12:	f00f fed1 	bl	801f7b8 <iprintf>
							if (Enabled6X) {
 800fa16:	4b4e      	ldr	r3, [pc, #312]	; (800fb50 <main+0x604>)
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	f43f af3c 	beq.w	800f898 <main+0x34c>
										"6X ROT X: %8.5f", data_out.rotation_6X[0]);
 800fa20:	4b45      	ldr	r3, [pc, #276]	; (800fb38 <main+0x5ec>)
 800fa22:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
								printf(
 800fa24:	f7f0 fd98 	bl	8000558 <__aeabi_f2d>
 800fa28:	4602      	mov	r2, r0
 800fa2a:	460b      	mov	r3, r1
 800fa2c:	4849      	ldr	r0, [pc, #292]	; (800fb54 <main+0x608>)
 800fa2e:	f00f fec3 	bl	801f7b8 <iprintf>
 800fa32:	e762      	b.n	800f8fa <main+0x3ae>
								RangeDataN = (*(RangeData + ToFSensor));
 800fa34:	ebca 03ca 	rsb	r3, sl, sl, lsl #3
 800fa38:	009d      	lsls	r5, r3, #2
 800fa3a:	f50d 7e9a 	add.w	lr, sp, #308	; 0x134
 800fa3e:	4425      	add	r5, r4
 800fa40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa42:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fa46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fa4a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
								printf_rtc_timestamp();
 800fa4e:	f7ff fba3 	bl	800f198 <printf_rtc_timestamp>
								if (RangeDataN.RangeStatus == 0) {
 800fa52:	f89d 214f 	ldrb.w	r2, [sp, #335]	; 0x14f
 800fa56:	b94a      	cbnz	r2, 800fa6c <main+0x520>
									printf(
 800fa58:	f9bd 114c 	ldrsh.w	r1, [sp, #332]	; 0x14c
 800fa5c:	483e      	ldr	r0, [pc, #248]	; (800fb58 <main+0x60c>)
 800fa5e:	f00f feab 	bl	801f7b8 <iprintf>
							for (ToFSensor = 2; ToFSensor < 3; ToFSensor = ToFSensor + 2) {
 800fa62:	f10a 0a02 	add.w	sl, sl, #2
 800fa66:	fa5f fa8a 	uxtb.w	sl, sl
 800fa6a:	e74e      	b.n	800f90a <main+0x3be>
									printf("TOFS = %d STAT = %d RNG = 0 SGN = 0.00 AMB = 0.00 ",
 800fa6c:	4651      	mov	r1, sl
 800fa6e:	483b      	ldr	r0, [pc, #236]	; (800fb5c <main+0x610>)
 800fa70:	f00f fea2 	bl	801f7b8 <iprintf>
 800fa74:	e7f5      	b.n	800fa62 <main+0x516>
								robot_move(FORWARD, 30);
 800fa76:	211e      	movs	r1, #30
 800fa78:	2001      	movs	r0, #1
 800fa7a:	f000 f8c9 	bl	800fc10 <robot_move>
								if (rprint++ == 1) {
 800fa7e:	1c7d      	adds	r5, r7, #1
 800fa80:	2f01      	cmp	r7, #1
 800fa82:	d002      	beq.n	800fa8a <main+0x53e>
 800fa84:	462f      	mov	r7, r5
								turning = 0;
 800fa86:	2600      	movs	r6, #0
 800fa88:	e74f      	b.n	800f92a <main+0x3de>
									printf_rtc_timestamp();
 800fa8a:	f7ff fb85 	bl	800f198 <printf_rtc_timestamp>
									printf("Running forward\n");
 800fa8e:	4834      	ldr	r0, [pc, #208]	; (800fb60 <main+0x614>)
 800fa90:	f00f ff1a 	bl	801f8c8 <puts>
								moving = 1;
 800fa94:	46b8      	mov	r8, r7
								if (rprint++ == 1) {
 800fa96:	462f      	mov	r7, r5
								turning = 0;
 800fa98:	2600      	movs	r6, #0
 800fa9a:	e746      	b.n	800f92a <main+0x3de>
								robot_stop();
 800fa9c:	f000 f907 	bl	800fcae <robot_stop>
								if (rprint++ == 2) {
 800faa0:	1c7d      	adds	r5, r7, #1
 800faa2:	2f02      	cmp	r7, #2
 800faa4:	d004      	beq.n	800fab0 <main+0x564>
 800faa6:	462f      	mov	r7, r5
								turning = 1;
 800faa8:	4646      	mov	r6, r8
								moving = 0;
 800faaa:	f04f 0800 	mov.w	r8, #0
 800faae:	e745      	b.n	800f93c <main+0x3f0>
									printf_rtc_timestamp();
 800fab0:	f7ff fb72 	bl	800f198 <printf_rtc_timestamp>
									printf("Too close - Stop\n");
 800fab4:	482b      	ldr	r0, [pc, #172]	; (800fb64 <main+0x618>)
 800fab6:	f00f ff07 	bl	801f8c8 <puts>
								if (rprint++ == 2) {
 800faba:	462f      	mov	r7, r5
								turning = 1;
 800fabc:	4646      	mov	r6, r8
								moving = 0;
 800fabe:	f04f 0800 	mov.w	r8, #0
 800fac2:	e73b      	b.n	800f93c <main+0x3f0>
								robot_turn(RIGHT, 40);
 800fac4:	2128      	movs	r1, #40	; 0x28
 800fac6:	2001      	movs	r0, #1
 800fac8:	f000 f8c9 	bl	800fc5e <robot_turn>
								printf(" - %f - \n", (fabsf(data_out.rotation_6X[0] - start_data_out.rotation_6X[0])));
 800facc:	4b1a      	ldr	r3, [pc, #104]	; (800fb38 <main+0x5ec>)
 800face:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800fad2:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800fad6:	eef0 7ae7 	vabs.f32	s15, s15
 800fada:	ee17 0a90 	vmov	r0, s15
 800fade:	f7f0 fd3b 	bl	8000558 <__aeabi_f2d>
 800fae2:	4602      	mov	r2, r0
 800fae4:	460b      	mov	r3, r1
 800fae6:	4820      	ldr	r0, [pc, #128]	; (800fb68 <main+0x61c>)
 800fae8:	f00f fe66 	bl	801f7b8 <iprintf>
								if (rprint++ == 3) {
 800faec:	1c7d      	adds	r5, r7, #1
 800faee:	2f03      	cmp	r7, #3
 800faf0:	d003      	beq.n	800fafa <main+0x5ae>
 800faf2:	462f      	mov	r7, r5
								moving = 0;
 800faf4:	f04f 0800 	mov.w	r8, #0
 800faf8:	e733      	b.n	800f962 <main+0x416>
								printf_rtc_timestamp();
 800fafa:	f7ff fb4d 	bl	800f198 <printf_rtc_timestamp>
								printf("Turning right\n");
 800fafe:	481b      	ldr	r0, [pc, #108]	; (800fb6c <main+0x620>)
 800fb00:	f00f fee2 	bl	801f8c8 <puts>
								if (rprint++ == 3) {
 800fb04:	462f      	mov	r7, r5
								moving = 0;
 800fb06:	f04f 0800 	mov.w	r8, #0
 800fb0a:	e72a      	b.n	800f962 <main+0x416>
								robot_stop();
 800fb0c:	f000 f8cf 	bl	800fcae <robot_stop>
								start_data_out = data_out;
 800fb10:	2278      	movs	r2, #120	; 0x78
 800fb12:	4909      	ldr	r1, [pc, #36]	; (800fb38 <main+0x5ec>)
 800fb14:	a82f      	add	r0, sp, #188	; 0xbc
 800fb16:	f00f f923 	bl	801ed60 <memcpy>
								if (rprint++ == 4) {
 800fb1a:	2f04      	cmp	r7, #4
 800fb1c:	d003      	beq.n	800fb26 <main+0x5da>
								rprint = 1;
 800fb1e:	4637      	mov	r7, r6
								moving = 1;
 800fb20:	46b0      	mov	r8, r6
								turning = 0;
 800fb22:	2600      	movs	r6, #0
 800fb24:	e72e      	b.n	800f984 <main+0x438>
								printf_rtc_timestamp();
 800fb26:	f7ff fb37 	bl	800f198 <printf_rtc_timestamp>
								printf("Turn finished - Stop\n");
 800fb2a:	4811      	ldr	r0, [pc, #68]	; (800fb70 <main+0x624>)
 800fb2c:	f00f fecc 	bl	801f8c8 <puts>
								rprint = 1;
 800fb30:	4637      	mov	r7, r6
								moving = 1;
 800fb32:	46b0      	mov	r8, r6
								turning = 0;
 800fb34:	2600      	movs	r6, #0
 800fb36:	e725      	b.n	800f984 <main+0x438>
 800fb38:	20002864 	.word	0x20002864
 800fb3c:	080221ec 	.word	0x080221ec
 800fb40:	42b40000 	.word	0x42b40000
 800fb44:	2000149c 	.word	0x2000149c
 800fb48:	20002860 	.word	0x20002860
 800fb4c:	080221cc 	.word	0x080221cc
 800fb50:	20001484 	.word	0x20001484
 800fb54:	080221dc 	.word	0x080221dc
 800fb58:	08022228 	.word	0x08022228
 800fb5c:	08022234 	.word	0x08022234
 800fb60:	08022268 	.word	0x08022268
 800fb64:	08022278 	.word	0x08022278
 800fb68:	0802228c 	.word	0x0802228c
 800fb6c:	08022298 	.word	0x08022298
 800fb70:	080222a8 	.word	0x080222a8
 800fb74:	20002f78 	.word	0x20002f78

0800fb78 <assert_failed>:
		 *         where the assert_param error has occurred.
		 * @param  file: pointer to the source file name
		 * @param  line: assert_param error line source number
		 * @retval None
		 */
		void assert_failed(uint8_t *file, uint32_t line) {
 800fb78:	b508      	push	{r3, lr}
			/* USER CODE BEGIN 6 */
			/* User can add his own implementation to report the file name and line number */
			printf("Wrong parameters value: file %s on line %lu\r\n", file,
 800fb7a:	460a      	mov	r2, r1
 800fb7c:	4601      	mov	r1, r0
 800fb7e:	4802      	ldr	r0, [pc, #8]	; (800fb88 <assert_failed+0x10>)
 800fb80:	f00f fe1a 	bl	801f7b8 <iprintf>
 800fb84:	bd08      	pop	{r3, pc}
 800fb86:	bf00      	nop
 800fb88:	08022114 	.word	0x08022114

0800fb8c <MyFlagInterruptHandler>:
 * @brief  This function is the User handler for the flag interrupt
 * @param  None
 * @retval None
 */
void MyFlagInterruptHandler(void)
{
 800fb8c:	b508      	push	{r3, lr}
	/* Code to be customised */
	/************************/
	/* Get the state of bridge A */
	uint16_t bridgeState = BSP_MotorControl_CmdGetStatus(0);
 800fb8e:	2000      	movs	r0, #0
 800fb90:	f7f8 fd46 	bl	8008620 <BSP_MotorControl_CmdGetStatus>

	if (bridgeState == 0) {
 800fb94:	b100      	cbz	r0, 800fb98 <MyFlagInterruptHandler+0xc>
 800fb96:	bd08      	pop	{r3, pc}
		if (BSP_MotorControl_GetDeviceState(0) != INACTIVE) {
 800fb98:	f7f8 fd12 	bl	80085c0 <BSP_MotorControl_GetDeviceState>
 800fb9c:	2808      	cmp	r0, #8
 800fb9e:	d0fa      	beq.n	800fb96 <MyFlagInterruptHandler+0xa>
			/* Bridge A was disabling due to overcurrent or over temperature */
			/* When  motor was running */
			Error_Handler(0XBAD0);
 800fba0:	f64b 20d0 	movw	r0, #47824	; 0xbad0
 800fba4:	f7ff fc0a 	bl	800f3bc <Error_Handler>
		}
	}
}
 800fba8:	e7f5      	b.n	800fb96 <MyFlagInterruptHandler+0xa>
	...

0800fbac <motor_init>:
{
 800fbac:	b530      	push	{r4, r5, lr}
 800fbae:	b08b      	sub	sp, #44	; 0x2c
	deviceParams_t initDeviceParameters =
 800fbb0:	466c      	mov	r4, sp
 800fbb2:	4d14      	ldr	r5, [pc, #80]	; (800fc04 <motor_init+0x58>)
 800fbb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbbc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fbc0:	e884 0003 	stmia.w	r4, {r0, r1}
	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_L6206, 2);
 800fbc4:	2102      	movs	r1, #2
 800fbc6:	f641 003e 	movw	r0, #6206	; 0x183e
 800fbca:	f7f8 fd5b 	bl	8008684 <BSP_MotorControl_SetNbDevices>
	BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6206, &initDeviceParameters);
 800fbce:	4669      	mov	r1, sp
 800fbd0:	f641 003e 	movw	r0, #6206	; 0x183e
 800fbd4:	f7f8 fce4 	bl	80085a0 <BSP_MotorControl_Init>
	BSP_MotorControl_SetDualFullBridgeConfig(PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B);
 800fbd8:	2000      	movs	r0, #0
 800fbda:	f7f8 fd33 	bl	8008644 <BSP_MotorControl_SetDualFullBridgeConfig>
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 800fbde:	480a      	ldr	r0, [pc, #40]	; (800fc08 <motor_init+0x5c>)
 800fbe0:	f7f8 fcce 	bl	8008580 <BSP_MotorControl_AttachFlagInterrupt>
	BSP_MotorControl_AttachErrorHandler(Error_Handler);
 800fbe4:	4809      	ldr	r0, [pc, #36]	; (800fc0c <motor_init+0x60>)
 800fbe6:	f7f8 fcbb 	bl	8008560 <BSP_MotorControl_AttachErrorHandler>
	BSP_MotorControl_SetBridgeInputPwmFreq(0, 10000);
 800fbea:	f242 7110 	movw	r1, #10000	; 0x2710
 800fbee:	2000      	movs	r0, #0
 800fbf0:	f7f8 fd38 	bl	8008664 <BSP_MotorControl_SetBridgeInputPwmFreq>
	BSP_MotorControl_SetBridgeInputPwmFreq(1, 10000);
 800fbf4:	f242 7110 	movw	r1, #10000	; 0x2710
 800fbf8:	2001      	movs	r0, #1
 800fbfa:	f7f8 fd33 	bl	8008664 <BSP_MotorControl_SetBridgeInputPwmFreq>
}
 800fbfe:	b00b      	add	sp, #44	; 0x2c
 800fc00:	bd30      	pop	{r4, r5, pc}
 800fc02:	bf00      	nop
 800fc04:	08021aa8 	.word	0x08021aa8
 800fc08:	0800fb8d 	.word	0x0800fb8d
 800fc0c:	0800f3bd 	.word	0x0800f3bd

0800fc10 <robot_move>:
void robot_move(motorDir_t dir, int speed) {
 800fc10:	b510      	push	{r4, lr}
	if (dir == FORWARD) {
 800fc12:	2801      	cmp	r0, #1
 800fc14:	d001      	beq.n	800fc1a <robot_move+0xa>
	} else if (dir == BACKWARD) {
 800fc16:	b190      	cbz	r0, 800fc3e <robot_move+0x2e>
 800fc18:	bd10      	pop	{r4, pc}
		BSP_MotorControl_SetMaxSpeed(0, speed);
 800fc1a:	b28c      	uxth	r4, r1
 800fc1c:	4621      	mov	r1, r4
 800fc1e:	2000      	movs	r0, #0
 800fc20:	f7f8 fcee 	bl	8008600 <BSP_MotorControl_SetMaxSpeed>
		BSP_MotorControl_Run(0, BACKWARD);
 800fc24:	2100      	movs	r1, #0
 800fc26:	4608      	mov	r0, r1
 800fc28:	f7f8 fcda 	bl	80085e0 <BSP_MotorControl_Run>
		BSP_MotorControl_SetMaxSpeed(1, speed);
 800fc2c:	4621      	mov	r1, r4
 800fc2e:	2001      	movs	r0, #1
 800fc30:	f7f8 fce6 	bl	8008600 <BSP_MotorControl_SetMaxSpeed>
		BSP_MotorControl_Run(1, FORWARD);
 800fc34:	2101      	movs	r1, #1
 800fc36:	4608      	mov	r0, r1
 800fc38:	f7f8 fcd2 	bl	80085e0 <BSP_MotorControl_Run>
 800fc3c:	bd10      	pop	{r4, pc}
		BSP_MotorControl_SetMaxSpeed(0, 20);
 800fc3e:	2114      	movs	r1, #20
 800fc40:	f7f8 fcde 	bl	8008600 <BSP_MotorControl_SetMaxSpeed>
		BSP_MotorControl_Run(0, FORWARD);
 800fc44:	2101      	movs	r1, #1
 800fc46:	2000      	movs	r0, #0
 800fc48:	f7f8 fcca 	bl	80085e0 <BSP_MotorControl_Run>
		BSP_MotorControl_SetMaxSpeed(1, 20);
 800fc4c:	2114      	movs	r1, #20
 800fc4e:	2001      	movs	r0, #1
 800fc50:	f7f8 fcd6 	bl	8008600 <BSP_MotorControl_SetMaxSpeed>
		BSP_MotorControl_Run(1, BACKWARD);
 800fc54:	2100      	movs	r1, #0
 800fc56:	2001      	movs	r0, #1
 800fc58:	f7f8 fcc2 	bl	80085e0 <BSP_MotorControl_Run>
}
 800fc5c:	e7dc      	b.n	800fc18 <robot_move+0x8>

0800fc5e <robot_turn>:
void robot_turn(turnDir_t turn, int speed) {
 800fc5e:	b510      	push	{r4, lr}
	if (turn == RIGHT) {
 800fc60:	2801      	cmp	r0, #1
 800fc62:	d001      	beq.n	800fc68 <robot_turn+0xa>
	} else if (turn == LEFT) {
 800fc64:	b190      	cbz	r0, 800fc8c <robot_turn+0x2e>
 800fc66:	bd10      	pop	{r4, pc}
		BSP_MotorControl_SetMaxSpeed(0, speed);
 800fc68:	b28c      	uxth	r4, r1
 800fc6a:	4621      	mov	r1, r4
 800fc6c:	2000      	movs	r0, #0
 800fc6e:	f7f8 fcc7 	bl	8008600 <BSP_MotorControl_SetMaxSpeed>
		BSP_MotorControl_Run(0, BACKWARD);
 800fc72:	2100      	movs	r1, #0
 800fc74:	4608      	mov	r0, r1
 800fc76:	f7f8 fcb3 	bl	80085e0 <BSP_MotorControl_Run>
		BSP_MotorControl_SetMaxSpeed(1, speed);
 800fc7a:	4621      	mov	r1, r4
 800fc7c:	2001      	movs	r0, #1
 800fc7e:	f7f8 fcbf 	bl	8008600 <BSP_MotorControl_SetMaxSpeed>
		BSP_MotorControl_Run(1, BACKWARD);
 800fc82:	2100      	movs	r1, #0
 800fc84:	2001      	movs	r0, #1
 800fc86:	f7f8 fcab 	bl	80085e0 <BSP_MotorControl_Run>
 800fc8a:	bd10      	pop	{r4, pc}
		BSP_MotorControl_SetMaxSpeed(0, speed);
 800fc8c:	b28c      	uxth	r4, r1
 800fc8e:	4621      	mov	r1, r4
 800fc90:	f7f8 fcb6 	bl	8008600 <BSP_MotorControl_SetMaxSpeed>
		BSP_MotorControl_Run(0, FORWARD);
 800fc94:	2101      	movs	r1, #1
 800fc96:	2000      	movs	r0, #0
 800fc98:	f7f8 fca2 	bl	80085e0 <BSP_MotorControl_Run>
		BSP_MotorControl_SetMaxSpeed(1, speed);
 800fc9c:	4621      	mov	r1, r4
 800fc9e:	2001      	movs	r0, #1
 800fca0:	f7f8 fcae 	bl	8008600 <BSP_MotorControl_SetMaxSpeed>
		BSP_MotorControl_Run(1, FORWARD);
 800fca4:	2101      	movs	r1, #1
 800fca6:	4608      	mov	r0, r1
 800fca8:	f7f8 fc9a 	bl	80085e0 <BSP_MotorControl_Run>
}
 800fcac:	e7db      	b.n	800fc66 <robot_turn+0x8>

0800fcae <robot_stop>:
void robot_stop(void) {
 800fcae:	b508      	push	{r3, lr}
	BSP_MotorControl_SetMaxSpeed(0, 0);
 800fcb0:	2100      	movs	r1, #0
 800fcb2:	4608      	mov	r0, r1
 800fcb4:	f7f8 fca4 	bl	8008600 <BSP_MotorControl_SetMaxSpeed>
	BSP_MotorControl_Run(0, FORWARD);
 800fcb8:	2101      	movs	r1, #1
 800fcba:	2000      	movs	r0, #0
 800fcbc:	f7f8 fc90 	bl	80085e0 <BSP_MotorControl_Run>
	BSP_MotorControl_SetMaxSpeed(1, 0);
 800fcc0:	2100      	movs	r1, #0
 800fcc2:	2001      	movs	r0, #1
 800fcc4:	f7f8 fc9c 	bl	8008600 <BSP_MotorControl_SetMaxSpeed>
	BSP_MotorControl_Run(1, BACKWARD);
 800fcc8:	2100      	movs	r1, #0
 800fcca:	2001      	movs	r0, #1
 800fccc:	f7f8 fc88 	bl	80085e0 <BSP_MotorControl_Run>
 800fcd0:	bd08      	pop	{r3, pc}
	...

0800fcd4 <I2C1_MspDeInit>:
//
//  /* USER CODE END I2C1_MspInit 1 */
}

static void I2C1_MspDeInit(I2C_HandleTypeDef *i2cHandle)
{
 800fcd4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN I2C1_MspDeInit 0 */

	/* USER CODE END I2C1_MspDeInit 0 */
	/* Peripheral clock disable */
	__HAL_RCC_I2C1_CLK_DISABLE();
 800fcd6:	4a05      	ldr	r2, [pc, #20]	; (800fcec <I2C1_MspDeInit+0x18>)
 800fcd8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fcda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fcde:	6413      	str	r3, [r2, #64]	; 0x40

	/**I2C1 GPIO Configuration
	   PB8     ------> I2C1_SCL
	   PB9     ------> I2C1_SDA
	 */
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8 | GPIO_PIN_9);
 800fce0:	f44f 7140 	mov.w	r1, #768	; 0x300
 800fce4:	4802      	ldr	r0, [pc, #8]	; (800fcf0 <I2C1_MspDeInit+0x1c>)
 800fce6:	f7f9 fe67 	bl	80099b8 <HAL_GPIO_DeInit>
 800fcea:	bd08      	pop	{r3, pc}
 800fcec:	40023800 	.word	0x40023800
 800fcf0:	40020400 	.word	0x40020400

0800fcf4 <BSP_I2C1_Init>:
}
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	4770      	bx	lr

0800fcf8 <BSP_I2C1_DeInit>:
{
 800fcf8:	b510      	push	{r4, lr}
	I2C1_MspDeInit(&hi2c1);
 800fcfa:	4c06      	ldr	r4, [pc, #24]	; (800fd14 <BSP_I2C1_DeInit+0x1c>)
 800fcfc:	4620      	mov	r0, r4
 800fcfe:	f7ff ffe9 	bl	800fcd4 <I2C1_MspDeInit>
	if (HAL_I2C_DeInit(&hi2c1) == HAL_OK) {
 800fd02:	4620      	mov	r0, r4
 800fd04:	f7fa fc82 	bl	800a60c <HAL_I2C_DeInit>
 800fd08:	b908      	cbnz	r0, 800fd0e <BSP_I2C1_DeInit+0x16>
		ret = BSP_ERROR_NONE;
 800fd0a:	2000      	movs	r0, #0
}
 800fd0c:	bd10      	pop	{r4, pc}
	int32_t ret = BSP_ERROR_BUS_FAILURE;
 800fd0e:	f06f 0007 	mvn.w	r0, #7
 800fd12:	bd10      	pop	{r4, pc}
 800fd14:	20002b20 	.word	0x20002b20

0800fd18 <BSP_I2C1_WriteReg>:
{
 800fd18:	b510      	push	{r4, lr}
 800fd1a:	b084      	sub	sp, #16
	if (HAL_I2C_Mem_Write(&hi2c1, (uint8_t)DevAddr,
 800fd1c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800fd20:	9402      	str	r4, [sp, #8]
 800fd22:	9301      	str	r3, [sp, #4]
 800fd24:	9200      	str	r2, [sp, #0]
 800fd26:	2301      	movs	r3, #1
 800fd28:	460a      	mov	r2, r1
 800fd2a:	b2c1      	uxtb	r1, r0
 800fd2c:	4804      	ldr	r0, [pc, #16]	; (800fd40 <BSP_I2C1_WriteReg+0x28>)
 800fd2e:	f7fa fed9 	bl	800aae4 <HAL_I2C_Mem_Write>
 800fd32:	b910      	cbnz	r0, 800fd3a <BSP_I2C1_WriteReg+0x22>
		ret = BSP_ERROR_NONE;
 800fd34:	2000      	movs	r0, #0
}
 800fd36:	b004      	add	sp, #16
 800fd38:	bd10      	pop	{r4, pc}
	int32_t ret = BSP_ERROR_BUS_FAILURE;
 800fd3a:	f06f 0007 	mvn.w	r0, #7
 800fd3e:	e7fa      	b.n	800fd36 <BSP_I2C1_WriteReg+0x1e>
 800fd40:	20002b20 	.word	0x20002b20

0800fd44 <BSP_I2C1_ReadReg>:
{
 800fd44:	b510      	push	{r4, lr}
 800fd46:	b084      	sub	sp, #16
	if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, (uint16_t)Reg,
 800fd48:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800fd4c:	9402      	str	r4, [sp, #8]
 800fd4e:	9301      	str	r3, [sp, #4]
 800fd50:	9200      	str	r2, [sp, #0]
 800fd52:	2301      	movs	r3, #1
 800fd54:	460a      	mov	r2, r1
 800fd56:	4601      	mov	r1, r0
 800fd58:	4804      	ldr	r0, [pc, #16]	; (800fd6c <BSP_I2C1_ReadReg+0x28>)
 800fd5a:	f7fa ff8b 	bl	800ac74 <HAL_I2C_Mem_Read>
 800fd5e:	b910      	cbnz	r0, 800fd66 <BSP_I2C1_ReadReg+0x22>
		ret = HAL_OK;
 800fd60:	2000      	movs	r0, #0
}
 800fd62:	b004      	add	sp, #16
 800fd64:	bd10      	pop	{r4, pc}
	int32_t ret = BSP_ERROR_BUS_FAILURE;
 800fd66:	f06f 0007 	mvn.w	r0, #7
 800fd6a:	e7fa      	b.n	800fd62 <BSP_I2C1_ReadReg+0x1e>
 800fd6c:	20002b20 	.word	0x20002b20

0800fd70 <BSP_GetTick>:
{
 800fd70:	b508      	push	{r3, lr}
	return HAL_GetTick();
 800fd72:	f7f8 fd39 	bl	80087e8 <HAL_GetTick>
}
 800fd76:	bd08      	pop	{r3, pc}

0800fd78 <Serialize_s32>:
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
	uint32_t i;
	uint32_t source_uint32;

	for (i = 0; i < Len; i++) {
 800fd78:	2300      	movs	r3, #0
 800fd7a:	e002      	b.n	800fd82 <Serialize_s32+0xa>
		source_uint32 = (uint32_t)Source;
		Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 800fd7c:	54c1      	strb	r1, [r0, r3]
		source_uint32 >>= 8;
 800fd7e:	0a09      	lsrs	r1, r1, #8
	for (i = 0; i < Len; i++) {
 800fd80:	3301      	adds	r3, #1
 800fd82:	4293      	cmp	r3, r2
 800fd84:	d3fa      	bcc.n	800fd7c <Serialize_s32+0x4>
		Source = (int32_t)source_uint32;
	}
}
 800fd86:	4770      	bx	lr

0800fd88 <HAL_RTC_MspInit>:
 *         the backup registers) and RCC_BDCR register are set to their reset values.
 *
 * @retval None
 */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800fd88:	b500      	push	{lr}
 800fd8a:	b093      	sub	sp, #76	; 0x4c
	   - Enable write access using HAL_PWR_EnableBkUpAccess() function before to
	     configure the RTC clock source (to be done once after reset).
	   - Reset the Back up Domain using __HAL_RCC_BACKUPRESET_FORCE() and
	     __HAL_RCC_BACKUPRESET_RELEASE().
	   - Configure the needed RTC clock source */
	__HAL_RCC_PWR_CLK_ENABLE();
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	9300      	str	r3, [sp, #0]
 800fd90:	4b28      	ldr	r3, [pc, #160]	; (800fe34 <HAL_RTC_MspInit+0xac>)
 800fd92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fd94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800fd98:	641a      	str	r2, [r3, #64]	; 0x40
 800fd9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fda0:	9300      	str	r3, [sp, #0]
 800fda2:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800fda4:	f7fb fde0 	bl	800b968 <HAL_PWR_EnableBkUpAccess>

	/*##-2- Configue LSE/LSI as RTC clock soucre ###############################*/
	if (UseLSI == 0) {
 800fda8:	4b23      	ldr	r3, [pc, #140]	; (800fe38 <HAL_RTC_MspInit+0xb0>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	bb3b      	cbnz	r3, 800fdfe <HAL_RTC_MspInit+0x76>
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 800fdae:	230c      	movs	r3, #12
 800fdb0:	9306      	str	r3, [sp, #24]
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	930c      	str	r3, [sp, #48]	; 0x30
		RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800fdb6:	2201      	movs	r2, #1
 800fdb8:	9208      	str	r2, [sp, #32]
		RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 800fdba:	930b      	str	r3, [sp, #44]	; 0x2c
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800fdbc:	a806      	add	r0, sp, #24
 800fdbe:	f7fb fdd9 	bl	800b974 <HAL_RCC_OscConfig>
 800fdc2:	b9b0      	cbnz	r0, 800fdf2 <HAL_RTC_MspInit+0x6a>
			Error_Handler();
		}

		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800fdc4:	2302      	movs	r3, #2
 800fdc6:	9301      	str	r3, [sp, #4]
		PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800fdc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fdcc:	9304      	str	r3, [sp, #16]
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800fdce:	a801      	add	r0, sp, #4
 800fdd0:	f7fc f9b2 	bl	800c138 <HAL_RCCEx_PeriphCLKConfig>
 800fdd4:	b980      	cbnz	r0, 800fdf8 <HAL_RTC_MspInit+0x70>
		}
	}

	/*##-2- Enable RTC peripheral Clocks #######################################*/
	/* Enable RTC Clock */
	__HAL_RCC_RTC_ENABLE();
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	4b18      	ldr	r3, [pc, #96]	; (800fe3c <HAL_RTC_MspInit+0xb4>)
 800fdda:	601a      	str	r2, [r3, #0]

	/*##-4- Configure the NVIC for RTC Alarm ###################################*/
	HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0F, 0);
 800fddc:	2200      	movs	r2, #0
 800fdde:	210f      	movs	r1, #15
 800fde0:	2029      	movs	r0, #41	; 0x29
 800fde2:	f7f9 f875 	bl	8008ed0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800fde6:	2029      	movs	r0, #41	; 0x29
 800fde8:	f7f9 f8b6 	bl	8008f58 <HAL_NVIC_EnableIRQ>
}
 800fdec:	b013      	add	sp, #76	; 0x4c
 800fdee:	f85d fb04 	ldr.w	pc, [sp], #4
			Error_Handler();
 800fdf2:	f7ff fae3 	bl	800f3bc <Error_Handler>
 800fdf6:	e7e5      	b.n	800fdc4 <HAL_RTC_MspInit+0x3c>
			Error_Handler();
 800fdf8:	f7ff fae0 	bl	800f3bc <Error_Handler>
 800fdfc:	e7eb      	b.n	800fdd6 <HAL_RTC_MspInit+0x4e>
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 800fdfe:	230c      	movs	r3, #12
 800fe00:	9306      	str	r3, [sp, #24]
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800fe02:	2300      	movs	r3, #0
 800fe04:	930c      	str	r3, [sp, #48]	; 0x30
		RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800fe06:	2201      	movs	r2, #1
 800fe08:	920b      	str	r2, [sp, #44]	; 0x2c
		RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800fe0a:	9308      	str	r3, [sp, #32]
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800fe0c:	a806      	add	r0, sp, #24
 800fe0e:	f7fb fdb1 	bl	800b974 <HAL_RCC_OscConfig>
 800fe12:	b960      	cbnz	r0, 800fe2e <HAL_RTC_MspInit+0xa6>
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800fe14:	2302      	movs	r3, #2
 800fe16:	9301      	str	r3, [sp, #4]
		PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800fe18:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe1c:	9304      	str	r3, [sp, #16]
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800fe1e:	a801      	add	r0, sp, #4
 800fe20:	f7fc f98a 	bl	800c138 <HAL_RCCEx_PeriphCLKConfig>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	d0d6      	beq.n	800fdd6 <HAL_RTC_MspInit+0x4e>
			Error_Handler();
 800fe28:	f7ff fac8 	bl	800f3bc <Error_Handler>
 800fe2c:	e7d3      	b.n	800fdd6 <HAL_RTC_MspInit+0x4e>
			Error_Handler();
 800fe2e:	f7ff fac5 	bl	800f3bc <Error_Handler>
 800fe32:	e7ef      	b.n	800fe14 <HAL_RTC_MspInit+0x8c>
 800fe34:	40023800 	.word	0x40023800
 800fe38:	200028dc 	.word	0x200028dc
 800fe3c:	42470e3c 	.word	0x42470e3c

0800fe40 <HAL_MspInit>:

/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 800fe40:	b500      	push	{lr}
 800fe42:	b083      	sub	sp, #12
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800fe44:	2100      	movs	r1, #0
 800fe46:	9100      	str	r1, [sp, #0]
 800fe48:	4b0c      	ldr	r3, [pc, #48]	; (800fe7c <HAL_MspInit+0x3c>)
 800fe4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fe50:	645a      	str	r2, [r3, #68]	; 0x44
 800fe52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe54:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800fe58:	9200      	str	r2, [sp, #0]
 800fe5a:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_PWR_CLK_ENABLE();
 800fe5c:	9101      	str	r1, [sp, #4]
 800fe5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fe60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800fe64:	641a      	str	r2, [r3, #64]	; 0x40
 800fe66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fe6c:	9301      	str	r3, [sp, #4]
 800fe6e:	9b01      	ldr	r3, [sp, #4]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800fe70:	2007      	movs	r0, #7
 800fe72:	f7f9 f80f 	bl	8008e94 <HAL_NVIC_SetPriorityGrouping>
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 800fe76:	b003      	add	sp, #12
 800fe78:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe7c:	40023800 	.word	0x40023800

0800fe80 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800fe80:	4770      	bx	lr

0800fe82 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800fe82:	e7fe      	b.n	800fe82 <HardFault_Handler>

0800fe84 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800fe84:	e7fe      	b.n	800fe84 <MemManage_Handler>

0800fe86 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800fe86:	e7fe      	b.n	800fe86 <BusFault_Handler>

0800fe88 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800fe88:	e7fe      	b.n	800fe88 <UsageFault_Handler>

0800fe8a <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800fe8a:	4770      	bx	lr

0800fe8c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800fe8c:	4770      	bx	lr

0800fe8e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800fe8e:	4770      	bx	lr

0800fe90 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 800fe90:	b508      	push	{r3, lr}
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800fe92:	f7f8 fc9d 	bl	80087d0 <HAL_IncTick>
 800fe96:	bd08      	pop	{r3, pc}

0800fe98 <TIM5_IRQHandler>:
 * @brief  This function handles TIM_ALGO global interrupt.
 * @param  None
 * @retval None
 */
void TIM_ALGO_IRQHandler(void)
{
 800fe98:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&AlgoTimHandle);
 800fe9a:	4802      	ldr	r0, [pc, #8]	; (800fea4 <TIM5_IRQHandler+0xc>)
 800fe9c:	f7fd f99c 	bl	800d1d8 <HAL_TIM_IRQHandler>
 800fea0:	bd08      	pop	{r3, pc}
 800fea2:	bf00      	nop
 800fea4:	200036d8 	.word	0x200036d8

0800fea8 <EXTI15_10_IRQHandler>:
}

void EXTI15_10_IRQHandler(void)
{
 800fea8:	b508      	push	{r3, lr}
	HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 800feaa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800feae:	f7f9 fe4b 	bl	8009b48 <HAL_GPIO_EXTI_IRQHandler>
 800feb2:	bd08      	pop	{r3, pc}

0800feb4 <DMA1_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void)
{
 800feb4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800feb6:	4802      	ldr	r0, [pc, #8]	; (800fec0 <DMA1_Stream0_IRQHandler+0xc>)
 800feb8:	f7f9 fb36 	bl	8009528 <HAL_DMA_IRQHandler>
 800febc:	bd08      	pop	{r3, pc}
 800febe:	bf00      	nop
 800fec0:	20002b74 	.word	0x20002b74

0800fec4 <DMA1_Stream5_IRQHandler>:

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void)
{
 800fec4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800fec6:	4802      	ldr	r0, [pc, #8]	; (800fed0 <DMA1_Stream5_IRQHandler+0xc>)
 800fec8:	f7f9 fb2e 	bl	8009528 <HAL_DMA_IRQHandler>
 800fecc:	bd08      	pop	{r3, pc}
 800fece:	bf00      	nop
 800fed0:	200037cc 	.word	0x200037cc

0800fed4 <DMA1_Stream6_IRQHandler>:

/**
 * @brief This function handles DMA1 stream6 global interrupt.
 */
void DMA1_Stream6_IRQHandler(void)
{
 800fed4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

	/* USER CODE END DMA1_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800fed6:	4802      	ldr	r0, [pc, #8]	; (800fee0 <DMA1_Stream6_IRQHandler+0xc>)
 800fed8:	f7f9 fb26 	bl	8009528 <HAL_DMA_IRQHandler>
 800fedc:	bd08      	pop	{r3, pc}
 800fede:	bf00      	nop
 800fee0:	200038ec 	.word	0x200038ec

0800fee4 <ADC_IRQHandler>:

/**
 * @brief This function handles ADC1 global interrupt.
 */
void ADC_IRQHandler(void)
{
 800fee4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN ADC_IRQn 0 */

	/* USER CODE END ADC_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 800fee6:	4802      	ldr	r0, [pc, #8]	; (800fef0 <ADC_IRQHandler+0xc>)
 800fee8:	f7f8 fe26 	bl	8008b38 <HAL_ADC_IRQHandler>
 800feec:	bd08      	pop	{r3, pc}
 800feee:	bf00      	nop
 800fef0:	20002a78 	.word	0x20002a78

0800fef4 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void)
{
 800fef4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 800fef6:	4802      	ldr	r0, [pc, #8]	; (800ff00 <TIM2_IRQHandler+0xc>)
 800fef8:	f7fd f96e 	bl	800d1d8 <HAL_TIM_IRQHandler>
 800fefc:	bd08      	pop	{r3, pc}
 800fefe:	bf00      	nop
 800ff00:	20003790 	.word	0x20003790

0800ff04 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 800ff04:	b508      	push	{r3, lr}
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 800ff06:	4802      	ldr	r0, [pc, #8]	; (800ff10 <TIM3_IRQHandler+0xc>)
 800ff08:	f7fd f966 	bl	800d1d8 <HAL_TIM_IRQHandler>
 800ff0c:	bd08      	pop	{r3, pc}
 800ff0e:	bf00      	nop
 800ff10:	20003718 	.word	0x20003718

0800ff14 <I2C1_EV_IRQHandler>:

/**
 * @brief This function handles I2C1 event interrupt.
 */
void I2C1_EV_IRQHandler(void)
{
 800ff14:	b508      	push	{r3, lr}
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */

	/* USER CODE END I2C1_EV_IRQn 0 */
	HAL_I2C_EV_IRQHandler(&hi2c1);
 800ff16:	4802      	ldr	r0, [pc, #8]	; (800ff20 <I2C1_EV_IRQHandler+0xc>)
 800ff18:	f7fb fbd8 	bl	800b6cc <HAL_I2C_EV_IRQHandler>
 800ff1c:	bd08      	pop	{r3, pc}
 800ff1e:	bf00      	nop
 800ff20:	20002b20 	.word	0x20002b20

0800ff24 <I2C1_ER_IRQHandler>:

/**
 * @brief This function handles I2C1 error interrupt.
 */
void I2C1_ER_IRQHandler(void)
{
 800ff24:	b508      	push	{r3, lr}
	/* USER CODE BEGIN I2C1_ER_IRQn 0 */

	/* USER CODE END I2C1_ER_IRQn 0 */
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800ff26:	4802      	ldr	r0, [pc, #8]	; (800ff30 <I2C1_ER_IRQHandler+0xc>)
 800ff28:	f7fb fc84 	bl	800b834 <HAL_I2C_ER_IRQHandler>
 800ff2c:	bd08      	pop	{r3, pc}
 800ff2e:	bf00      	nop
 800ff30:	20002b20 	.word	0x20002b20

0800ff34 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 800ff34:	b508      	push	{r3, lr}
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 800ff36:	4802      	ldr	r0, [pc, #8]	; (800ff40 <USART2_IRQHandler+0xc>)
 800ff38:	f7fe f9f4 	bl	800e324 <HAL_UART_IRQHandler>
 800ff3c:	bd08      	pop	{r3, pc}
 800ff3e:	bf00      	nop
 800ff40:	2000398c 	.word	0x2000398c

0800ff44 <DMA1_Stream7_IRQHandler>:

/**
 * @brief This function handles DMA1 stream7 global interrupt.
 */
void DMA1_Stream7_IRQHandler(void)
{
 800ff44:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

	/* USER CODE END DMA1_Stream7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800ff46:	4802      	ldr	r0, [pc, #8]	; (800ff50 <DMA1_Stream7_IRQHandler+0xc>)
 800ff48:	f7f9 faee 	bl	8009528 <HAL_DMA_IRQHandler>
 800ff4c:	bd08      	pop	{r3, pc}
 800ff4e:	bf00      	nop
 800ff50:	20002ac0 	.word	0x20002ac0

0800ff54 <DMA2_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA2 stream1 global interrupt.
 */
void DMA2_Stream1_IRQHandler(void)
{
 800ff54:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	/* USER CODE END DMA2_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800ff56:	4802      	ldr	r0, [pc, #8]	; (800ff60 <DMA2_Stream1_IRQHandler+0xc>)
 800ff58:	f7f9 fae6 	bl	8009528 <HAL_DMA_IRQHandler>
 800ff5c:	bd08      	pop	{r3, pc}
 800ff5e:	bf00      	nop
 800ff60:	2000382c 	.word	0x2000382c

0800ff64 <DMA2_Stream6_IRQHandler>:

/**
 * @brief This function handles DMA2 stream6 global interrupt.
 */
void DMA2_Stream6_IRQHandler(void)
{
 800ff64:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

	/* USER CODE END DMA2_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800ff66:	4802      	ldr	r0, [pc, #8]	; (800ff70 <DMA2_Stream6_IRQHandler+0xc>)
 800ff68:	f7f9 fade 	bl	8009528 <HAL_DMA_IRQHandler>
 800ff6c:	bd08      	pop	{r3, pc}
 800ff6e:	bf00      	nop
 800ff70:	2000388c 	.word	0x2000388c

0800ff74 <USART6_IRQHandler>:

/**
 * @brief This function handles USART6 global interrupt.
 */
void USART6_IRQHandler(void)
{
 800ff74:	b508      	push	{r3, lr}
	/* USER CODE BEGIN USART6_IRQn 0 */

	/* USER CODE END USART6_IRQn 0 */
	HAL_UART_IRQHandler(&huart6);
 800ff76:	4802      	ldr	r0, [pc, #8]	; (800ff80 <USART6_IRQHandler+0xc>)
 800ff78:	f7fe f9d4 	bl	800e324 <HAL_UART_IRQHandler>
 800ff7c:	bd08      	pop	{r3, pc}
 800ff7e:	bf00      	nop
 800ff80:	2000394c 	.word	0x2000394c

0800ff84 <_read>:
	while (1) {
	}                       /* Make sure we hang here */
}

int _read(int file, char *ptr, int len)
{
 800ff84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff86:	460d      	mov	r5, r1
 800ff88:	4617      	mov	r7, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800ff8a:	2400      	movs	r4, #0
 800ff8c:	e005      	b.n	800ff9a <_read+0x16>
		*ptr++ = __io_getchar();
 800ff8e:	1c6e      	adds	r6, r5, #1
 800ff90:	f7ff f9f1 	bl	800f376 <__io_getchar>
 800ff94:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800ff96:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 800ff98:	4635      	mov	r5, r6
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800ff9a:	42bc      	cmp	r4, r7
 800ff9c:	dbf7      	blt.n	800ff8e <_read+0xa>
	}

	return len;
}
 800ff9e:	4638      	mov	r0, r7
 800ffa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ffa2 <_write>:

int _write(int file, char *ptr, int len)
{
 800ffa2:	b570      	push	{r4, r5, r6, lr}
 800ffa4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800ffa6:	2400      	movs	r4, #0
 800ffa8:	e005      	b.n	800ffb6 <_write+0x14>
		__io_putchar(*ptr++);
 800ffaa:	1c4d      	adds	r5, r1, #1
 800ffac:	7808      	ldrb	r0, [r1, #0]
 800ffae:	f7ff f9dd 	bl	800f36c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800ffb2:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 800ffb4:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800ffb6:	42b4      	cmp	r4, r6
 800ffb8:	dbf7      	blt.n	800ffaa <_write+0x8>
	}
	return len;
}
 800ffba:	4630      	mov	r0, r6
 800ffbc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ffc0 <_sbrk>:

caddr_t _sbrk(int incr)
{
 800ffc0:	b508      	push	{r3, lr}
 800ffc2:	4603      	mov	r3, r0
	extern char end asm ("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ffc4:	4a0b      	ldr	r2, [pc, #44]	; (800fff4 <_sbrk+0x34>)
 800ffc6:	6812      	ldr	r2, [r2, #0]
 800ffc8:	b142      	cbz	r2, 800ffdc <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800ffca:	4a0a      	ldr	r2, [pc, #40]	; (800fff4 <_sbrk+0x34>)
 800ffcc:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr) {
 800ffce:	4403      	add	r3, r0
 800ffd0:	466a      	mov	r2, sp
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d806      	bhi.n	800ffe4 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t)-1;
	}

	heap_end += incr;
 800ffd6:	4a07      	ldr	r2, [pc, #28]	; (800fff4 <_sbrk+0x34>)
 800ffd8:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap_end;
}
 800ffda:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800ffdc:	4906      	ldr	r1, [pc, #24]	; (800fff8 <_sbrk+0x38>)
 800ffde:	4a05      	ldr	r2, [pc, #20]	; (800fff4 <_sbrk+0x34>)
 800ffe0:	6011      	str	r1, [r2, #0]
 800ffe2:	e7f2      	b.n	800ffca <_sbrk+0xa>
		errno = ENOMEM;
 800ffe4:	f00e fe8a 	bl	801ecfc <__errno>
 800ffe8:	230c      	movs	r3, #12
 800ffea:	6003      	str	r3, [r0, #0]
		return (caddr_t)-1;
 800ffec:	f04f 30ff 	mov.w	r0, #4294967295
 800fff0:	bd08      	pop	{r3, pc}
 800fff2:	bf00      	nop
 800fff4:	200028e0 	.word	0x200028e0
 800fff8:	20003ad0 	.word	0x20003ad0

0800fffc <_close>:

int _close(int file)
{
	return -1;
}
 800fffc:	f04f 30ff 	mov.w	r0, #4294967295
 8010000:	4770      	bx	lr

08010002 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8010002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010006:	604b      	str	r3, [r1, #4]
	return 0;
}
 8010008:	2000      	movs	r0, #0
 801000a:	4770      	bx	lr

0801000c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 801000c:	2001      	movs	r0, #1
 801000e:	4770      	bx	lr

08010010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8010010:	2000      	movs	r0, #0
 8010012:	4770      	bx	lr

08010014 <SystemInit>:
 */
void SystemInit(void)
{
	/* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8010014:	490f      	ldr	r1, [pc, #60]	; (8010054 <SystemInit+0x40>)
 8010016:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 801001a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801001e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t)0x00000001;
 8010022:	4b0d      	ldr	r3, [pc, #52]	; (8010058 <SystemInit+0x44>)
 8010024:	681a      	ldr	r2, [r3, #0]
 8010026:	f042 0201 	orr.w	r2, r2, #1
 801002a:	601a      	str	r2, [r3, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 801002c:	2000      	movs	r0, #0
 801002e:	6098      	str	r0, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010030:	681a      	ldr	r2, [r3, #0]
 8010032:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8010036:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801003a:	601a      	str	r2, [r3, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 801003c:	4a07      	ldr	r2, [pc, #28]	; (801005c <SystemInit+0x48>)
 801003e:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010040:	681a      	ldr	r2, [r3, #0]
 8010042:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010046:	601a      	str	r2, [r3, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8010048:	60d8      	str	r0, [r3, #12]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801004a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801004e:	608b      	str	r3, [r1, #8]
 8010050:	4770      	bx	lr
 8010052:	bf00      	nop
 8010054:	e000ed00 	.word	0xe000ed00
 8010058:	40023800 	.word	0x40023800
 801005c:	24003010 	.word	0x24003010

08010060 <HAL_TIM_Base_MspInit>:
	}
	HAL_TIM_MspPostInit(&htim3);
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8010060:	b500      	push	{lr}
 8010062:	b085      	sub	sp, #20
	if (tim_baseHandle->Instance == TIM2) {
 8010064:	6803      	ldr	r3, [r0, #0]
 8010066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801006a:	d008      	beq.n	801007e <HAL_TIM_Base_MspInit+0x1e>
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}else if (tim_baseHandle->Instance == TIM3) {
 801006c:	4a22      	ldr	r2, [pc, #136]	; (80100f8 <HAL_TIM_Base_MspInit+0x98>)
 801006e:	4293      	cmp	r3, r2
 8010070:	d01a      	beq.n	80100a8 <HAL_TIM_Base_MspInit+0x48>
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	} else if (tim_baseHandle->Instance == TIM_ALGO) {
 8010072:	4a22      	ldr	r2, [pc, #136]	; (80100fc <HAL_TIM_Base_MspInit+0x9c>)
 8010074:	4293      	cmp	r3, r2
 8010076:	d02b      	beq.n	80100d0 <HAL_TIM_Base_MspInit+0x70>

		/* System interrupt init*/
		HAL_NVIC_SetPriority(TIM_ALGO_IRQn, 0x0F, 0);
		HAL_NVIC_EnableIRQ(TIM_ALGO_IRQn);
	}
}
 8010078:	b005      	add	sp, #20
 801007a:	f85d fb04 	ldr.w	pc, [sp], #4
		__HAL_RCC_TIM2_CLK_ENABLE();
 801007e:	2100      	movs	r1, #0
 8010080:	9101      	str	r1, [sp, #4]
 8010082:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8010086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010088:	f042 0201 	orr.w	r2, r2, #1
 801008c:	641a      	str	r2, [r3, #64]	; 0x40
 801008e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010090:	f003 0301 	and.w	r3, r3, #1
 8010094:	9301      	str	r3, [sp, #4]
 8010096:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8010098:	460a      	mov	r2, r1
 801009a:	201c      	movs	r0, #28
 801009c:	f7f8 ff18 	bl	8008ed0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80100a0:	201c      	movs	r0, #28
 80100a2:	f7f8 ff59 	bl	8008f58 <HAL_NVIC_EnableIRQ>
 80100a6:	e7e7      	b.n	8010078 <HAL_TIM_Base_MspInit+0x18>
		__HAL_RCC_TIM3_CLK_ENABLE();
 80100a8:	2100      	movs	r1, #0
 80100aa:	9102      	str	r1, [sp, #8]
 80100ac:	4b14      	ldr	r3, [pc, #80]	; (8010100 <HAL_TIM_Base_MspInit+0xa0>)
 80100ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80100b0:	f042 0202 	orr.w	r2, r2, #2
 80100b4:	641a      	str	r2, [r3, #64]	; 0x40
 80100b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100b8:	f003 0302 	and.w	r3, r3, #2
 80100bc:	9302      	str	r3, [sp, #8]
 80100be:	9b02      	ldr	r3, [sp, #8]
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80100c0:	460a      	mov	r2, r1
 80100c2:	201d      	movs	r0, #29
 80100c4:	f7f8 ff04 	bl	8008ed0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80100c8:	201d      	movs	r0, #29
 80100ca:	f7f8 ff45 	bl	8008f58 <HAL_NVIC_EnableIRQ>
 80100ce:	e7d3      	b.n	8010078 <HAL_TIM_Base_MspInit+0x18>
		TIM_ALGO_CLK_ENABLE();
 80100d0:	2200      	movs	r2, #0
 80100d2:	9203      	str	r2, [sp, #12]
 80100d4:	4b0a      	ldr	r3, [pc, #40]	; (8010100 <HAL_TIM_Base_MspInit+0xa0>)
 80100d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80100d8:	f041 0108 	orr.w	r1, r1, #8
 80100dc:	6419      	str	r1, [r3, #64]	; 0x40
 80100de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100e0:	f003 0308 	and.w	r3, r3, #8
 80100e4:	9303      	str	r3, [sp, #12]
 80100e6:	9b03      	ldr	r3, [sp, #12]
		HAL_NVIC_SetPriority(TIM_ALGO_IRQn, 0x0F, 0);
 80100e8:	210f      	movs	r1, #15
 80100ea:	2032      	movs	r0, #50	; 0x32
 80100ec:	f7f8 fef0 	bl	8008ed0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM_ALGO_IRQn);
 80100f0:	2032      	movs	r0, #50	; 0x32
 80100f2:	f7f8 ff31 	bl	8008f58 <HAL_NVIC_EnableIRQ>
}
 80100f6:	e7bf      	b.n	8010078 <HAL_TIM_Base_MspInit+0x18>
 80100f8:	40000400 	.word	0x40000400
 80100fc:	40000c00 	.word	0x40000c00
 8010100:	40023800 	.word	0x40023800

08010104 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8010104:	b500      	push	{lr}
 8010106:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8010108:	2300      	movs	r3, #0
 801010a:	9303      	str	r3, [sp, #12]
 801010c:	9304      	str	r3, [sp, #16]
 801010e:	9305      	str	r3, [sp, #20]
 8010110:	9306      	str	r3, [sp, #24]
 8010112:	9307      	str	r3, [sp, #28]
	if (timHandle->Instance == TIM2) {
 8010114:	6803      	ldr	r3, [r0, #0]
 8010116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801011a:	d005      	beq.n	8010128 <HAL_TIM_MspPostInit+0x24>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

		/* USER CODE BEGIN TIM2_MspPostInit 1 */

		/* USER CODE END TIM2_MspPostInit 1 */
	}else if (timHandle->Instance == TIM3) {
 801011c:	4a19      	ldr	r2, [pc, #100]	; (8010184 <HAL_TIM_MspPostInit+0x80>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d019      	beq.n	8010156 <HAL_TIM_MspPostInit+0x52>

		/* USER CODE BEGIN TIM3_MspPostInit 1 */

		/* USER CODE END TIM3_MspPostInit 1 */
	}
}
 8010122:	b009      	add	sp, #36	; 0x24
 8010124:	f85d fb04 	ldr.w	pc, [sp], #4
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8010128:	2300      	movs	r3, #0
 801012a:	9301      	str	r3, [sp, #4]
 801012c:	4b16      	ldr	r3, [pc, #88]	; (8010188 <HAL_TIM_MspPostInit+0x84>)
 801012e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010130:	f042 0201 	orr.w	r2, r2, #1
 8010134:	631a      	str	r2, [r3, #48]	; 0x30
 8010136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010138:	f003 0301 	and.w	r3, r3, #1
 801013c:	9301      	str	r3, [sp, #4]
 801013e:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = PWM_IN1B_TIM2CH1_Pin | PWM_IN2B_TIM2CH2_Pin;
 8010140:	2303      	movs	r3, #3
 8010142:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010144:	2302      	movs	r3, #2
 8010146:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8010148:	2301      	movs	r3, #1
 801014a:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801014c:	a903      	add	r1, sp, #12
 801014e:	480f      	ldr	r0, [pc, #60]	; (801018c <HAL_TIM_MspPostInit+0x88>)
 8010150:	f7f9 fad8 	bl	8009704 <HAL_GPIO_Init>
 8010154:	e7e5      	b.n	8010122 <HAL_TIM_MspPostInit+0x1e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8010156:	2300      	movs	r3, #0
 8010158:	9302      	str	r3, [sp, #8]
 801015a:	4b0b      	ldr	r3, [pc, #44]	; (8010188 <HAL_TIM_MspPostInit+0x84>)
 801015c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801015e:	f042 0202 	orr.w	r2, r2, #2
 8010162:	631a      	str	r2, [r3, #48]	; 0x30
 8010164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010166:	f003 0302 	and.w	r3, r3, #2
 801016a:	9302      	str	r3, [sp, #8]
 801016c:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = PWM_IN1A_TIM3CH1_Pin | PWM_IN2A_TIM3CH2_Pin;
 801016e:	2330      	movs	r3, #48	; 0x30
 8010170:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010172:	2302      	movs	r3, #2
 8010174:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8010176:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010178:	a903      	add	r1, sp, #12
 801017a:	4805      	ldr	r0, [pc, #20]	; (8010190 <HAL_TIM_MspPostInit+0x8c>)
 801017c:	f7f9 fac2 	bl	8009704 <HAL_GPIO_Init>
}
 8010180:	e7cf      	b.n	8010122 <HAL_TIM_MspPostInit+0x1e>
 8010182:	bf00      	nop
 8010184:	40000400 	.word	0x40000400
 8010188:	40023800 	.word	0x40023800
 801018c:	40020000 	.word	0x40020000
 8010190:	40020400 	.word	0x40020400

08010194 <MX_TIM2_Init>:
{
 8010194:	b500      	push	{lr}
 8010196:	b08f      	sub	sp, #60	; 0x3c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8010198:	2300      	movs	r3, #0
 801019a:	930a      	str	r3, [sp, #40]	; 0x28
 801019c:	930b      	str	r3, [sp, #44]	; 0x2c
 801019e:	930c      	str	r3, [sp, #48]	; 0x30
 80101a0:	930d      	str	r3, [sp, #52]	; 0x34
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80101a2:	9308      	str	r3, [sp, #32]
 80101a4:	9309      	str	r3, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80101a6:	9301      	str	r3, [sp, #4]
 80101a8:	9302      	str	r3, [sp, #8]
 80101aa:	9303      	str	r3, [sp, #12]
 80101ac:	9304      	str	r3, [sp, #16]
 80101ae:	9305      	str	r3, [sp, #20]
 80101b0:	9306      	str	r3, [sp, #24]
 80101b2:	9307      	str	r3, [sp, #28]
	htim2.Instance = TIM2;
 80101b4:	4824      	ldr	r0, [pc, #144]	; (8010248 <MX_TIM2_Init+0xb4>)
 80101b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80101ba:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 0;
 80101bc:	6043      	str	r3, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80101be:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 0;
 80101c0:	60c3      	str	r3, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80101c2:	6103      	str	r3, [r0, #16]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80101c4:	f7fd f92e 	bl	800d424 <HAL_TIM_Base_Init>
 80101c8:	bb60      	cbnz	r0, 8010224 <MX_TIM2_Init+0x90>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80101ca:	a90e      	add	r1, sp, #56	; 0x38
 80101cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80101d0:	f841 3d10 	str.w	r3, [r1, #-16]!
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80101d4:	481c      	ldr	r0, [pc, #112]	; (8010248 <MX_TIM2_Init+0xb4>)
 80101d6:	f7fc fd8b 	bl	800ccf0 <HAL_TIM_ConfigClockSource>
 80101da:	bb30      	cbnz	r0, 801022a <MX_TIM2_Init+0x96>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80101dc:	481a      	ldr	r0, [pc, #104]	; (8010248 <MX_TIM2_Init+0xb4>)
 80101de:	f7fd f97d 	bl	800d4dc <HAL_TIM_PWM_Init>
 80101e2:	bb28      	cbnz	r0, 8010230 <MX_TIM2_Init+0x9c>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80101e4:	2300      	movs	r3, #0
 80101e6:	9308      	str	r3, [sp, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80101e8:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80101ea:	a908      	add	r1, sp, #32
 80101ec:	4816      	ldr	r0, [pc, #88]	; (8010248 <MX_TIM2_Init+0xb4>)
 80101ee:	f7fd fc31 	bl	800da54 <HAL_TIMEx_MasterConfigSynchronization>
 80101f2:	bb00      	cbnz	r0, 8010236 <MX_TIM2_Init+0xa2>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80101f4:	2360      	movs	r3, #96	; 0x60
 80101f6:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = 0;
 80101f8:	2200      	movs	r2, #0
 80101fa:	9202      	str	r2, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80101fc:	9203      	str	r2, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80101fe:	9205      	str	r2, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8010200:	a901      	add	r1, sp, #4
 8010202:	4811      	ldr	r0, [pc, #68]	; (8010248 <MX_TIM2_Init+0xb4>)
 8010204:	f7fd fa08 	bl	800d618 <HAL_TIM_PWM_ConfigChannel>
 8010208:	b9c0      	cbnz	r0, 801023c <MX_TIM2_Init+0xa8>
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 801020a:	2204      	movs	r2, #4
 801020c:	eb0d 0102 	add.w	r1, sp, r2
 8010210:	480d      	ldr	r0, [pc, #52]	; (8010248 <MX_TIM2_Init+0xb4>)
 8010212:	f7fd fa01 	bl	800d618 <HAL_TIM_PWM_ConfigChannel>
 8010216:	b9a0      	cbnz	r0, 8010242 <MX_TIM2_Init+0xae>
	HAL_TIM_MspPostInit(&htim2);
 8010218:	480b      	ldr	r0, [pc, #44]	; (8010248 <MX_TIM2_Init+0xb4>)
 801021a:	f7ff ff73 	bl	8010104 <HAL_TIM_MspPostInit>
}
 801021e:	b00f      	add	sp, #60	; 0x3c
 8010220:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8010224:	f7ff f8ca 	bl	800f3bc <Error_Handler>
 8010228:	e7cf      	b.n	80101ca <MX_TIM2_Init+0x36>
		Error_Handler();
 801022a:	f7ff f8c7 	bl	800f3bc <Error_Handler>
 801022e:	e7d5      	b.n	80101dc <MX_TIM2_Init+0x48>
		Error_Handler();
 8010230:	f7ff f8c4 	bl	800f3bc <Error_Handler>
 8010234:	e7d6      	b.n	80101e4 <MX_TIM2_Init+0x50>
		Error_Handler();
 8010236:	f7ff f8c1 	bl	800f3bc <Error_Handler>
 801023a:	e7db      	b.n	80101f4 <MX_TIM2_Init+0x60>
		Error_Handler();
 801023c:	f7ff f8be 	bl	800f3bc <Error_Handler>
 8010240:	e7e3      	b.n	801020a <MX_TIM2_Init+0x76>
		Error_Handler();
 8010242:	f7ff f8bb 	bl	800f3bc <Error_Handler>
 8010246:	e7e7      	b.n	8010218 <MX_TIM2_Init+0x84>
 8010248:	20003790 	.word	0x20003790

0801024c <MX_TIM3_Init>:
{
 801024c:	b500      	push	{lr}
 801024e:	b08f      	sub	sp, #60	; 0x3c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8010250:	2300      	movs	r3, #0
 8010252:	930a      	str	r3, [sp, #40]	; 0x28
 8010254:	930b      	str	r3, [sp, #44]	; 0x2c
 8010256:	930c      	str	r3, [sp, #48]	; 0x30
 8010258:	930d      	str	r3, [sp, #52]	; 0x34
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 801025a:	9308      	str	r3, [sp, #32]
 801025c:	9309      	str	r3, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 801025e:	9301      	str	r3, [sp, #4]
 8010260:	9302      	str	r3, [sp, #8]
 8010262:	9303      	str	r3, [sp, #12]
 8010264:	9304      	str	r3, [sp, #16]
 8010266:	9305      	str	r3, [sp, #20]
 8010268:	9306      	str	r3, [sp, #24]
 801026a:	9307      	str	r3, [sp, #28]
	htim3.Instance = TIM3;
 801026c:	4824      	ldr	r0, [pc, #144]	; (8010300 <MX_TIM3_Init+0xb4>)
 801026e:	4a25      	ldr	r2, [pc, #148]	; (8010304 <MX_TIM3_Init+0xb8>)
 8010270:	6002      	str	r2, [r0, #0]
	htim3.Init.Prescaler = 0;
 8010272:	6043      	str	r3, [r0, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010274:	6083      	str	r3, [r0, #8]
	htim3.Init.Period = 0;
 8010276:	60c3      	str	r3, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010278:	6103      	str	r3, [r0, #16]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 801027a:	f7fd f8d3 	bl	800d424 <HAL_TIM_Base_Init>
 801027e:	bb60      	cbnz	r0, 80102da <MX_TIM3_Init+0x8e>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010280:	a90e      	add	r1, sp, #56	; 0x38
 8010282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010286:	f841 3d10 	str.w	r3, [r1, #-16]!
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 801028a:	481d      	ldr	r0, [pc, #116]	; (8010300 <MX_TIM3_Init+0xb4>)
 801028c:	f7fc fd30 	bl	800ccf0 <HAL_TIM_ConfigClockSource>
 8010290:	bb30      	cbnz	r0, 80102e0 <MX_TIM3_Init+0x94>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8010292:	481b      	ldr	r0, [pc, #108]	; (8010300 <MX_TIM3_Init+0xb4>)
 8010294:	f7fd f922 	bl	800d4dc <HAL_TIM_PWM_Init>
 8010298:	bb28      	cbnz	r0, 80102e6 <MX_TIM3_Init+0x9a>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801029a:	2300      	movs	r3, #0
 801029c:	9308      	str	r3, [sp, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801029e:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80102a0:	a908      	add	r1, sp, #32
 80102a2:	4817      	ldr	r0, [pc, #92]	; (8010300 <MX_TIM3_Init+0xb4>)
 80102a4:	f7fd fbd6 	bl	800da54 <HAL_TIMEx_MasterConfigSynchronization>
 80102a8:	bb00      	cbnz	r0, 80102ec <MX_TIM3_Init+0xa0>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80102aa:	2360      	movs	r3, #96	; 0x60
 80102ac:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = 0;
 80102ae:	2200      	movs	r2, #0
 80102b0:	9202      	str	r2, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80102b2:	9203      	str	r2, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80102b4:	9205      	str	r2, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80102b6:	a901      	add	r1, sp, #4
 80102b8:	4811      	ldr	r0, [pc, #68]	; (8010300 <MX_TIM3_Init+0xb4>)
 80102ba:	f7fd f9ad 	bl	800d618 <HAL_TIM_PWM_ConfigChannel>
 80102be:	b9c0      	cbnz	r0, 80102f2 <MX_TIM3_Init+0xa6>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80102c0:	2204      	movs	r2, #4
 80102c2:	eb0d 0102 	add.w	r1, sp, r2
 80102c6:	480e      	ldr	r0, [pc, #56]	; (8010300 <MX_TIM3_Init+0xb4>)
 80102c8:	f7fd f9a6 	bl	800d618 <HAL_TIM_PWM_ConfigChannel>
 80102cc:	b9a0      	cbnz	r0, 80102f8 <MX_TIM3_Init+0xac>
	HAL_TIM_MspPostInit(&htim3);
 80102ce:	480c      	ldr	r0, [pc, #48]	; (8010300 <MX_TIM3_Init+0xb4>)
 80102d0:	f7ff ff18 	bl	8010104 <HAL_TIM_MspPostInit>
}
 80102d4:	b00f      	add	sp, #60	; 0x3c
 80102d6:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80102da:	f7ff f86f 	bl	800f3bc <Error_Handler>
 80102de:	e7cf      	b.n	8010280 <MX_TIM3_Init+0x34>
		Error_Handler();
 80102e0:	f7ff f86c 	bl	800f3bc <Error_Handler>
 80102e4:	e7d5      	b.n	8010292 <MX_TIM3_Init+0x46>
		Error_Handler();
 80102e6:	f7ff f869 	bl	800f3bc <Error_Handler>
 80102ea:	e7d6      	b.n	801029a <MX_TIM3_Init+0x4e>
		Error_Handler();
 80102ec:	f7ff f866 	bl	800f3bc <Error_Handler>
 80102f0:	e7db      	b.n	80102aa <MX_TIM3_Init+0x5e>
		Error_Handler();
 80102f2:	f7ff f863 	bl	800f3bc <Error_Handler>
 80102f6:	e7e3      	b.n	80102c0 <MX_TIM3_Init+0x74>
		Error_Handler();
 80102f8:	f7ff f860 	bl	800f3bc <Error_Handler>
 80102fc:	e7e7      	b.n	80102ce <MX_TIM3_Init+0x82>
 80102fe:	bf00      	nop
 8010300:	20003718 	.word	0x20003718
 8010304:	40000400 	.word	0x40000400

08010308 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8010308:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 801030a:	480b      	ldr	r0, [pc, #44]	; (8010338 <MX_USART2_UART_Init+0x30>)
 801030c:	4b0b      	ldr	r3, [pc, #44]	; (801033c <MX_USART2_UART_Init+0x34>)
 801030e:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 8010310:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8010314:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8010316:	2100      	movs	r1, #0
 8010318:	6081      	str	r1, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 801031a:	60c1      	str	r1, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 801031c:	6101      	str	r1, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 801031e:	230c      	movs	r3, #12
 8010320:	6143      	str	r3, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010322:	6181      	str	r1, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8010324:	61c1      	str	r1, [r0, #28]
	if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8010326:	460a      	mov	r2, r1
 8010328:	f7fd fe1a 	bl	800df60 <HAL_MultiProcessor_Init>
 801032c:	b900      	cbnz	r0, 8010330 <MX_USART2_UART_Init+0x28>
 801032e:	bd08      	pop	{r3, pc}
		Error_Handler();
 8010330:	f7ff f844 	bl	800f3bc <Error_Handler>
	}
}
 8010334:	e7fb      	b.n	801032e <MX_USART2_UART_Init+0x26>
 8010336:	bf00      	nop
 8010338:	2000398c 	.word	0x2000398c
 801033c:	40004400 	.word	0x40004400

08010340 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8010340:	b508      	push	{r3, lr}
	huart6.Instance = USART6;
 8010342:	480b      	ldr	r0, [pc, #44]	; (8010370 <MX_USART6_UART_Init+0x30>)
 8010344:	4b0b      	ldr	r3, [pc, #44]	; (8010374 <MX_USART6_UART_Init+0x34>)
 8010346:	6003      	str	r3, [r0, #0]
	huart6.Init.BaudRate = 115200;
 8010348:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 801034c:	6043      	str	r3, [r0, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 801034e:	2100      	movs	r1, #0
 8010350:	6081      	str	r1, [r0, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8010352:	60c1      	str	r1, [r0, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8010354:	6101      	str	r1, [r0, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8010356:	230c      	movs	r3, #12
 8010358:	6143      	str	r3, [r0, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801035a:	6181      	str	r1, [r0, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 801035c:	61c1      	str	r1, [r0, #28]
	if (HAL_MultiProcessor_Init(&huart6, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 801035e:	460a      	mov	r2, r1
 8010360:	f7fd fdfe 	bl	800df60 <HAL_MultiProcessor_Init>
 8010364:	b900      	cbnz	r0, 8010368 <MX_USART6_UART_Init+0x28>
 8010366:	bd08      	pop	{r3, pc}
		Error_Handler();
 8010368:	f7ff f828 	bl	800f3bc <Error_Handler>
	}
}
 801036c:	e7fb      	b.n	8010366 <MX_USART6_UART_Init+0x26>
 801036e:	bf00      	nop
 8010370:	2000394c 	.word	0x2000394c
 8010374:	40011400 	.word	0x40011400

08010378 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8010378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801037c:	b08a      	sub	sp, #40	; 0x28
 801037e:	4604      	mov	r4, r0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8010380:	2300      	movs	r3, #0
 8010382:	9305      	str	r3, [sp, #20]
 8010384:	9306      	str	r3, [sp, #24]
 8010386:	9307      	str	r3, [sp, #28]
 8010388:	9308      	str	r3, [sp, #32]
 801038a:	9309      	str	r3, [sp, #36]	; 0x24
	if (uartHandle->Instance == USART2) {
 801038c:	6803      	ldr	r3, [r0, #0]
 801038e:	4a6e      	ldr	r2, [pc, #440]	; (8010548 <HAL_UART_MspInit+0x1d0>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d005      	beq.n	80103a0 <HAL_UART_MspInit+0x28>
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(USART2_IRQn);
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}else if (uartHandle->Instance == USART6) {
 8010394:	4a6d      	ldr	r2, [pc, #436]	; (801054c <HAL_UART_MspInit+0x1d4>)
 8010396:	4293      	cmp	r3, r2
 8010398:	d05f      	beq.n	801045a <HAL_UART_MspInit+0xe2>
		HAL_NVIC_EnableIRQ(USART6_IRQn);
		/* USER CODE BEGIN USART6_MspInit 1 */

		/* USER CODE END USART6_MspInit 1 */
	}
}
 801039a:	b00a      	add	sp, #40	; 0x28
 801039c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__HAL_RCC_USART2_CLK_ENABLE();
 80103a0:	2500      	movs	r5, #0
 80103a2:	9500      	str	r5, [sp, #0]
 80103a4:	4b6a      	ldr	r3, [pc, #424]	; (8010550 <HAL_UART_MspInit+0x1d8>)
 80103a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80103a8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80103ac:	641a      	str	r2, [r3, #64]	; 0x40
 80103ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80103b0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80103b4:	9200      	str	r2, [sp, #0]
 80103b6:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80103b8:	9501      	str	r5, [sp, #4]
 80103ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80103bc:	f042 0201 	orr.w	r2, r2, #1
 80103c0:	631a      	str	r2, [r3, #48]	; 0x30
 80103c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103c4:	f003 0301 	and.w	r3, r3, #1
 80103c8:	9301      	str	r3, [sp, #4]
 80103ca:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 80103cc:	230c      	movs	r3, #12
 80103ce:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103d0:	2302      	movs	r3, #2
 80103d2:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80103d4:	2307      	movs	r3, #7
 80103d6:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103d8:	a905      	add	r1, sp, #20
 80103da:	485e      	ldr	r0, [pc, #376]	; (8010554 <HAL_UART_MspInit+0x1dc>)
 80103dc:	f7f9 f992 	bl	8009704 <HAL_GPIO_Init>
		hdma_usart2_rx.Instance = DMA1_Stream5;
 80103e0:	485d      	ldr	r0, [pc, #372]	; (8010558 <HAL_UART_MspInit+0x1e0>)
 80103e2:	4b5e      	ldr	r3, [pc, #376]	; (801055c <HAL_UART_MspInit+0x1e4>)
 80103e4:	6003      	str	r3, [r0, #0]
		hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80103e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80103ea:	6043      	str	r3, [r0, #4]
		hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80103ec:	6085      	str	r5, [r0, #8]
		hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80103ee:	60c5      	str	r5, [r0, #12]
		hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80103f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103f4:	6103      	str	r3, [r0, #16]
		hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80103f6:	6145      	str	r5, [r0, #20]
		hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80103f8:	6185      	str	r5, [r0, #24]
		hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80103fa:	61c5      	str	r5, [r0, #28]
		hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80103fc:	6205      	str	r5, [r0, #32]
		hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80103fe:	6245      	str	r5, [r0, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8010400:	f7f8 fe82 	bl	8009108 <HAL_DMA_Init>
 8010404:	bb18      	cbnz	r0, 801044e <HAL_UART_MspInit+0xd6>
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 8010406:	4b54      	ldr	r3, [pc, #336]	; (8010558 <HAL_UART_MspInit+0x1e0>)
 8010408:	6363      	str	r3, [r4, #52]	; 0x34
 801040a:	639c      	str	r4, [r3, #56]	; 0x38
		hdma_usart2_tx.Instance = DMA1_Stream6;
 801040c:	4854      	ldr	r0, [pc, #336]	; (8010560 <HAL_UART_MspInit+0x1e8>)
 801040e:	4b55      	ldr	r3, [pc, #340]	; (8010564 <HAL_UART_MspInit+0x1ec>)
 8010410:	6003      	str	r3, [r0, #0]
		hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8010412:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010416:	6043      	str	r3, [r0, #4]
		hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010418:	2340      	movs	r3, #64	; 0x40
 801041a:	6083      	str	r3, [r0, #8]
		hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801041c:	2300      	movs	r3, #0
 801041e:	60c3      	str	r3, [r0, #12]
		hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8010420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010424:	6102      	str	r2, [r0, #16]
		hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010426:	6143      	str	r3, [r0, #20]
		hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010428:	6183      	str	r3, [r0, #24]
		hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 801042a:	61c3      	str	r3, [r0, #28]
		hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 801042c:	6203      	str	r3, [r0, #32]
		hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801042e:	6243      	str	r3, [r0, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK) {
 8010430:	f7f8 fe6a 	bl	8009108 <HAL_DMA_Init>
 8010434:	b970      	cbnz	r0, 8010454 <HAL_UART_MspInit+0xdc>
		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 8010436:	4b4a      	ldr	r3, [pc, #296]	; (8010560 <HAL_UART_MspInit+0x1e8>)
 8010438:	6323      	str	r3, [r4, #48]	; 0x30
 801043a:	639c      	str	r4, [r3, #56]	; 0x38
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 801043c:	2200      	movs	r2, #0
 801043e:	4611      	mov	r1, r2
 8010440:	2026      	movs	r0, #38	; 0x26
 8010442:	f7f8 fd45 	bl	8008ed0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8010446:	2026      	movs	r0, #38	; 0x26
 8010448:	f7f8 fd86 	bl	8008f58 <HAL_NVIC_EnableIRQ>
 801044c:	e7a5      	b.n	801039a <HAL_UART_MspInit+0x22>
			Error_Handler();
 801044e:	f7fe ffb5 	bl	800f3bc <Error_Handler>
 8010452:	e7d8      	b.n	8010406 <HAL_UART_MspInit+0x8e>
			Error_Handler();
 8010454:	f7fe ffb2 	bl	800f3bc <Error_Handler>
 8010458:	e7ed      	b.n	8010436 <HAL_UART_MspInit+0xbe>
		__HAL_RCC_USART6_CLK_ENABLE();
 801045a:	2500      	movs	r5, #0
 801045c:	9502      	str	r5, [sp, #8]
 801045e:	4b3c      	ldr	r3, [pc, #240]	; (8010550 <HAL_UART_MspInit+0x1d8>)
 8010460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010462:	f042 0220 	orr.w	r2, r2, #32
 8010466:	645a      	str	r2, [r3, #68]	; 0x44
 8010468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801046a:	f002 0220 	and.w	r2, r2, #32
 801046e:	9202      	str	r2, [sp, #8]
 8010470:	9a02      	ldr	r2, [sp, #8]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8010472:	9503      	str	r5, [sp, #12]
 8010474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010476:	f042 0204 	orr.w	r2, r2, #4
 801047a:	631a      	str	r2, [r3, #48]	; 0x30
 801047c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801047e:	f002 0204 	and.w	r2, r2, #4
 8010482:	9203      	str	r2, [sp, #12]
 8010484:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8010486:	9504      	str	r5, [sp, #16]
 8010488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801048a:	f042 0201 	orr.w	r2, r2, #1
 801048e:	631a      	str	r2, [r3, #48]	; 0x30
 8010490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010492:	f003 0301 	and.w	r3, r3, #1
 8010496:	9304      	str	r3, [sp, #16]
 8010498:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Pin = RPI_USART6TX_Pin;
 801049a:	2340      	movs	r3, #64	; 0x40
 801049c:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801049e:	f04f 0802 	mov.w	r8, #2
 80104a2:	f8cd 8018 	str.w	r8, [sp, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80104a6:	2703      	movs	r7, #3
 80104a8:	9708      	str	r7, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80104aa:	2608      	movs	r6, #8
 80104ac:	9609      	str	r6, [sp, #36]	; 0x24
		HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 80104ae:	a905      	add	r1, sp, #20
 80104b0:	482d      	ldr	r0, [pc, #180]	; (8010568 <HAL_UART_MspInit+0x1f0>)
 80104b2:	f7f9 f927 	bl	8009704 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = RPI_USART6RX_Pin;
 80104b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104ba:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104bc:	f8cd 8018 	str.w	r8, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80104c0:	9507      	str	r5, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80104c2:	9708      	str	r7, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80104c4:	9609      	str	r6, [sp, #36]	; 0x24
		HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 80104c6:	a905      	add	r1, sp, #20
 80104c8:	4822      	ldr	r0, [pc, #136]	; (8010554 <HAL_UART_MspInit+0x1dc>)
 80104ca:	f7f9 f91b 	bl	8009704 <HAL_GPIO_Init>
		hdma_usart6_rx.Instance = DMA2_Stream1;
 80104ce:	4827      	ldr	r0, [pc, #156]	; (801056c <HAL_UART_MspInit+0x1f4>)
 80104d0:	4b27      	ldr	r3, [pc, #156]	; (8010570 <HAL_UART_MspInit+0x1f8>)
 80104d2:	6003      	str	r3, [r0, #0]
		hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80104d4:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 80104d8:	6043      	str	r3, [r0, #4]
		hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80104da:	6085      	str	r5, [r0, #8]
		hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80104dc:	60c5      	str	r5, [r0, #12]
		hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80104de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104e2:	6103      	str	r3, [r0, #16]
		hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80104e4:	6145      	str	r5, [r0, #20]
		hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80104e6:	6185      	str	r5, [r0, #24]
		hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80104e8:	61c5      	str	r5, [r0, #28]
		hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80104ea:	6205      	str	r5, [r0, #32]
		hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80104ec:	6245      	str	r5, [r0, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK) {
 80104ee:	f7f8 fe0b 	bl	8009108 <HAL_DMA_Init>
 80104f2:	bb18      	cbnz	r0, 801053c <HAL_UART_MspInit+0x1c4>
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart6_rx);
 80104f4:	4b1d      	ldr	r3, [pc, #116]	; (801056c <HAL_UART_MspInit+0x1f4>)
 80104f6:	6363      	str	r3, [r4, #52]	; 0x34
 80104f8:	639c      	str	r4, [r3, #56]	; 0x38
		hdma_usart6_tx.Instance = DMA2_Stream6;
 80104fa:	481e      	ldr	r0, [pc, #120]	; (8010574 <HAL_UART_MspInit+0x1fc>)
 80104fc:	4b1e      	ldr	r3, [pc, #120]	; (8010578 <HAL_UART_MspInit+0x200>)
 80104fe:	6003      	str	r3, [r0, #0]
		hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8010500:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8010504:	6043      	str	r3, [r0, #4]
		hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010506:	2340      	movs	r3, #64	; 0x40
 8010508:	6083      	str	r3, [r0, #8]
		hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801050a:	2300      	movs	r3, #0
 801050c:	60c3      	str	r3, [r0, #12]
		hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 801050e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010512:	6102      	str	r2, [r0, #16]
		hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010514:	6143      	str	r3, [r0, #20]
		hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010516:	6183      	str	r3, [r0, #24]
		hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8010518:	61c3      	str	r3, [r0, #28]
		hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 801051a:	6203      	str	r3, [r0, #32]
		hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801051c:	6243      	str	r3, [r0, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK) {
 801051e:	f7f8 fdf3 	bl	8009108 <HAL_DMA_Init>
 8010522:	b970      	cbnz	r0, 8010542 <HAL_UART_MspInit+0x1ca>
		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart6_tx);
 8010524:	4b13      	ldr	r3, [pc, #76]	; (8010574 <HAL_UART_MspInit+0x1fc>)
 8010526:	6323      	str	r3, [r4, #48]	; 0x30
 8010528:	639c      	str	r4, [r3, #56]	; 0x38
		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 801052a:	2200      	movs	r2, #0
 801052c:	4611      	mov	r1, r2
 801052e:	2047      	movs	r0, #71	; 0x47
 8010530:	f7f8 fcce 	bl	8008ed0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART6_IRQn);
 8010534:	2047      	movs	r0, #71	; 0x47
 8010536:	f7f8 fd0f 	bl	8008f58 <HAL_NVIC_EnableIRQ>
}
 801053a:	e72e      	b.n	801039a <HAL_UART_MspInit+0x22>
			Error_Handler();
 801053c:	f7fe ff3e 	bl	800f3bc <Error_Handler>
 8010540:	e7d8      	b.n	80104f4 <HAL_UART_MspInit+0x17c>
			Error_Handler();
 8010542:	f7fe ff3b 	bl	800f3bc <Error_Handler>
 8010546:	e7ed      	b.n	8010524 <HAL_UART_MspInit+0x1ac>
 8010548:	40004400 	.word	0x40004400
 801054c:	40011400 	.word	0x40011400
 8010550:	40023800 	.word	0x40023800
 8010554:	40020000 	.word	0x40020000
 8010558:	200037cc 	.word	0x200037cc
 801055c:	40026088 	.word	0x40026088
 8010560:	200038ec 	.word	0x200038ec
 8010564:	400260a0 	.word	0x400260a0
 8010568:	40020800 	.word	0x40020800
 801056c:	2000382c 	.word	0x2000382c
 8010570:	40026428 	.word	0x40026428
 8010574:	2000388c 	.word	0x2000388c
 8010578:	400264a0 	.word	0x400264a0

0801057c <_I2CWrite>:
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count)
{
 801057c:	b510      	push	{r4, lr}
 801057e:	b082      	sub	sp, #8
	int status;
	int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 8010580:	f102 030a 	add.w	r3, r2, #10

	status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8010584:	f890 4398 	ldrb.w	r4, [r0, #920]	; 0x398
 8010588:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
 801058c:	9300      	str	r3, [sp, #0]
 801058e:	b293      	uxth	r3, r2
 8010590:	460a      	mov	r2, r1
 8010592:	4621      	mov	r1, r4
 8010594:	f7fa f86a 	bl	800a66c <HAL_I2C_Master_Transmit>
	if (status) {
		//VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
		//XNUCLEO6180XA1_I2C1_Init(&hi2c1);
	}
	return status;
}
 8010598:	b002      	add	sp, #8
 801059a:	bd10      	pop	{r4, pc}

0801059c <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count)
{
 801059c:	b510      	push	{r4, lr}
 801059e:	b082      	sub	sp, #8
	int status;
	int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 80105a0:	f102 030a 	add.w	r3, r2, #10

	status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr | 1, pdata, count, i2c_time_out);
 80105a4:	f890 4398 	ldrb.w	r4, [r0, #920]	; 0x398
 80105a8:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
 80105ac:	9300      	str	r3, [sp, #0]
 80105ae:	b293      	uxth	r3, r2
 80105b0:	460a      	mov	r2, r1
 80105b2:	f044 0101 	orr.w	r1, r4, #1
 80105b6:	f7fa f91b 	bl	800a7f0 <HAL_I2C_Master_Receive>
	if (status) {
		//VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
		//XNUCLEO6180XA1_I2C1_Init(&hi2c1);
	}
	return status;
}
 80105ba:	b002      	add	sp, #8
 80105bc:	bd10      	pop	{r4, pc}
	...

080105c0 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count)
{
	int status_int;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	if (count > sizeof(_I2CBuffer) - 1) {
 80105c0:	2bff      	cmp	r3, #255	; 0xff
 80105c2:	d813      	bhi.n	80105ec <VL53L1_WriteMulti+0x2c>
{
 80105c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105c6:	460c      	mov	r4, r1
 80105c8:	461f      	mov	r7, r3
 80105ca:	4611      	mov	r1, r2
 80105cc:	4606      	mov	r6, r0
		return VL53L1_ERROR_INVALID_PARAMS;
	}
	_I2CBuffer[0] = index >> 8;
 80105ce:	4d0a      	ldr	r5, [pc, #40]	; (80105f8 <VL53L1_WriteMulti+0x38>)
 80105d0:	0a23      	lsrs	r3, r4, #8
 80105d2:	702b      	strb	r3, [r5, #0]
	_I2CBuffer[1] = index & 0xFF;
 80105d4:	706c      	strb	r4, [r5, #1]
	memcpy(&_I2CBuffer[2], pdata, count);
 80105d6:	463a      	mov	r2, r7
 80105d8:	1ca8      	adds	r0, r5, #2
 80105da:	f00e fbc1 	bl	801ed60 <memcpy>
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80105de:	1cba      	adds	r2, r7, #2
 80105e0:	4629      	mov	r1, r5
 80105e2:	4630      	mov	r0, r6
 80105e4:	f7ff ffca 	bl	801057c <_I2CWrite>
	if (status_int != 0) {
 80105e8:	b918      	cbnz	r0, 80105f2 <VL53L1_WriteMulti+0x32>
 80105ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return VL53L1_ERROR_INVALID_PARAMS;
 80105ec:	f06f 0003 	mvn.w	r0, #3
 80105f0:	4770      	bx	lr
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80105f2:	f06f 000c 	mvn.w	r0, #12
	}
	VL53L1_PutI2cBus();
	return Status;
}
 80105f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105f8:	200039cc 	.word	0x200039cc

080105fc <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count)
{
 80105fc:	b570      	push	{r4, r5, r6, lr}
 80105fe:	4604      	mov	r4, r0
 8010600:	4615      	mov	r5, r2
 8010602:	461e      	mov	r6, r3
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	int32_t status_int;

	_I2CBuffer[0] = index >> 8;
 8010604:	4b0a      	ldr	r3, [pc, #40]	; (8010630 <VL53L1_ReadMulti+0x34>)
 8010606:	0a0a      	lsrs	r2, r1, #8
 8010608:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index & 0xFF;
 801060a:	7059      	strb	r1, [r3, #1]
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 801060c:	2202      	movs	r2, #2
 801060e:	4619      	mov	r1, r3
 8010610:	f7ff ffb4 	bl	801057c <_I2CWrite>
	if (status_int != 0) {
 8010614:	b930      	cbnz	r0, 8010624 <VL53L1_ReadMulti+0x28>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
		goto done;
	}
	status_int = _I2CRead(Dev, pdata, count);
 8010616:	4632      	mov	r2, r6
 8010618:	4629      	mov	r1, r5
 801061a:	4620      	mov	r0, r4
 801061c:	f7ff ffbe 	bl	801059c <_I2CRead>
	if (status_int != 0) {
 8010620:	b918      	cbnz	r0, 801062a <VL53L1_ReadMulti+0x2e>
 8010622:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8010624:	f06f 000c 	mvn.w	r0, #12
 8010628:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801062a:	f06f 000c 	mvn.w	r0, #12
	}
 done:
	VL53L1_PutI2cBus();
	return Status;
}
 801062e:	bd70      	pop	{r4, r5, r6, pc}
 8010630:	200039cc 	.word	0x200039cc

08010634 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data)
{
 8010634:	b510      	push	{r4, lr}
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	int32_t status_int;

	_I2CBuffer[0] = index >> 8;
 8010636:	4b07      	ldr	r3, [pc, #28]	; (8010654 <VL53L1_WrByte+0x20>)
 8010638:	0a0c      	lsrs	r4, r1, #8
 801063a:	701c      	strb	r4, [r3, #0]
	_I2CBuffer[1] = index & 0xFF;
 801063c:	7059      	strb	r1, [r3, #1]
	_I2CBuffer[2] = data;
 801063e:	709a      	strb	r2, [r3, #2]

	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8010640:	2203      	movs	r2, #3
 8010642:	4619      	mov	r1, r3
 8010644:	f7ff ff9a 	bl	801057c <_I2CWrite>
	if (status_int != 0) {
 8010648:	b900      	cbnz	r0, 801064c <VL53L1_WrByte+0x18>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
	}
	VL53L1_PutI2cBus();
	return Status;
}
 801064a:	bd10      	pop	{r4, pc}
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801064c:	f06f 000c 	mvn.w	r0, #12
 8010650:	e7fb      	b.n	801064a <VL53L1_WrByte+0x16>
 8010652:	bf00      	nop
 8010654:	200039cc 	.word	0x200039cc

08010658 <VL53L1_RdByte>:
 done:
	return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data)
{
 8010658:	b538      	push	{r3, r4, r5, lr}
 801065a:	4604      	mov	r4, r0
 801065c:	4615      	mov	r5, r2
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	int32_t status_int;

	_I2CBuffer[0] = index >> 8;
 801065e:	4b0b      	ldr	r3, [pc, #44]	; (801068c <VL53L1_RdByte+0x34>)
 8010660:	0a0a      	lsrs	r2, r1, #8
 8010662:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index & 0xFF;
 8010664:	7059      	strb	r1, [r3, #1]
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010666:	2202      	movs	r2, #2
 8010668:	4619      	mov	r1, r3
 801066a:	f7ff ff87 	bl	801057c <_I2CWrite>
	if (status_int) {
 801066e:	b930      	cbnz	r0, 801067e <VL53L1_RdByte+0x26>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
		goto done;
	}
	status_int = _I2CRead(Dev, data, 1);
 8010670:	2201      	movs	r2, #1
 8010672:	4629      	mov	r1, r5
 8010674:	4620      	mov	r0, r4
 8010676:	f7ff ff91 	bl	801059c <_I2CRead>
	if (status_int != 0) {
 801067a:	b918      	cbnz	r0, 8010684 <VL53L1_RdByte+0x2c>
 801067c:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801067e:	f06f 000c 	mvn.w	r0, #12
 8010682:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8010684:	f06f 000c 	mvn.w	r0, #12
	}
 done:
	VL53L1_PutI2cBus();
	return Status;
}
 8010688:	bd38      	pop	{r3, r4, r5, pc}
 801068a:	bf00      	nop
 801068c:	200039cc 	.word	0x200039cc

08010690 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data)
{
 8010690:	b538      	push	{r3, r4, r5, lr}
 8010692:	4604      	mov	r4, r0
 8010694:	4615      	mov	r5, r2
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	int32_t status_int;

	_I2CBuffer[0] = index >> 8;
 8010696:	4b0e      	ldr	r3, [pc, #56]	; (80106d0 <VL53L1_RdWord+0x40>)
 8010698:	0a0a      	lsrs	r2, r1, #8
 801069a:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index & 0xFF;
 801069c:	7059      	strb	r1, [r3, #1]
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 801069e:	2202      	movs	r2, #2
 80106a0:	4619      	mov	r1, r3
 80106a2:	f7ff ff6b 	bl	801057c <_I2CWrite>

	if (status_int) {
 80106a6:	b960      	cbnz	r0, 80106c2 <VL53L1_RdWord+0x32>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
		goto done;
	}
	status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80106a8:	2202      	movs	r2, #2
 80106aa:	4909      	ldr	r1, [pc, #36]	; (80106d0 <VL53L1_RdWord+0x40>)
 80106ac:	4620      	mov	r0, r4
 80106ae:	f7ff ff75 	bl	801059c <_I2CRead>
	if (status_int != 0) {
 80106b2:	b948      	cbnz	r0, 80106c8 <VL53L1_RdWord+0x38>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
		goto done;
	}

	*data = ((uint16_t)_I2CBuffer[0] << 8) + (uint16_t)_I2CBuffer[1];
 80106b4:	4a06      	ldr	r2, [pc, #24]	; (80106d0 <VL53L1_RdWord+0x40>)
 80106b6:	7811      	ldrb	r1, [r2, #0]
 80106b8:	7853      	ldrb	r3, [r2, #1]
 80106ba:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80106be:	802b      	strh	r3, [r5, #0]
 80106c0:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80106c2:	f06f 000c 	mvn.w	r0, #12
 80106c6:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80106c8:	f06f 000c 	mvn.w	r0, #12
 done:
	VL53L1_PutI2cBus();
	return Status;
}
 80106cc:	bd38      	pop	{r3, r4, r5, pc}
 80106ce:	bf00      	nop
 80106d0:	200039cc 	.word	0x200039cc

080106d4 <VL53L1_GetTickCount>:
	/* Returns current tick count in [ms] */

	VL53L1_Error status = VL53L1_ERROR_NONE;

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 80106d4:	2300      	movs	r3, #0
 80106d6:	6003      	str	r3, [r0, #0]
		"VL53L1_GetTickCount() = %5u ms;\n",
		*ptick_count_ms);
#endif

	return status;
}
 80106d8:	4618      	mov	r0, r3
 80106da:	4770      	bx	lr

080106dc <VL53L1_WaitMs>:
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms)
{
 80106dc:	b508      	push	{r3, lr}
	(void)pdev;
	HAL_Delay(wait_ms);
 80106de:	4608      	mov	r0, r1
 80106e0:	f7f8 f888 	bl	80087f4 <HAL_Delay>
	return VL53L1_ERROR_NONE;
}
 80106e4:	2000      	movs	r0, #0
 80106e6:	bd08      	pop	{r3, pc}

080106e8 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us)
{
 80106e8:	b508      	push	{r3, lr}
	(void)pdev;
	HAL_Delay(wait_us / 1000);
 80106ea:	4805      	ldr	r0, [pc, #20]	; (8010700 <VL53L1_WaitUs+0x18>)
 80106ec:	fb80 3001 	smull	r3, r0, r0, r1
 80106f0:	17c9      	asrs	r1, r1, #31
 80106f2:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
 80106f6:	f7f8 f87d 	bl	80087f4 <HAL_Delay>
	return VL53L1_ERROR_NONE;
}
 80106fa:	2000      	movs	r0, #0
 80106fc:	bd08      	pop	{r3, pc}
 80106fe:	bf00      	nop
 8010700:	10624dd3 	.word	0x10624dd3

08010704 <VL53L1_WaitValueMaskEx>:
	uint32_t timeout_ms,
	uint16_t index,
	uint8_t value,
	uint8_t mask,
	uint32_t poll_delay_ms)
{
 8010704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010708:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 801070c:	4606      	mov	r6, r0
 801070e:	460f      	mov	r7, r1
 8010710:	4692      	mov	sl, r2
 8010712:	4699      	mov	r9, r3
 8010714:	f89d 8238 	ldrb.w	r8, [sp, #568]	; 0x238
 8010718:	f8dd b23c 	ldr.w	fp, [sp, #572]	; 0x23c
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
	uint32_t start_time_ms = 0;
 801071c:	2400      	movs	r4, #0
 801071e:	9483      	str	r4, [sp, #524]	; 0x20c
	uint32_t current_time_ms = 0;
 8010720:	9482      	str	r4, [sp, #520]	; 0x208
	uint32_t polling_time_ms = 0;
	uint8_t byte_value = 0;
 8010722:	f88d 4207 	strb.w	r4, [sp, #519]	; 0x207
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
		index,
		register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8010726:	f240 12ff 	movw	r2, #511	; 0x1ff
 801072a:	491d      	ldr	r1, [pc, #116]	; (80107a0 <VL53L1_WaitValueMaskEx+0x9c>)
 801072c:	a801      	add	r0, sp, #4
 801072e:	f00f f9cd 	bl	801facc <strncpy>
	trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
		  timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	VL53L1_GetTickCount(&start_time_ms);
 8010732:	a883      	add	r0, sp, #524	; 0x20c
 8010734:	f7ff ffce 	bl	80106d4 <VL53L1_GetTickCount>
	uint8_t found = 0;
 8010738:	4625      	mov	r5, r4
	uint32_t polling_time_ms = 0;
 801073a:	4623      	mov	r3, r4
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 801073c:	e007      	b.n	801074e <VL53L1_WaitValueMaskEx+0x4a>
				pdev,
				index,
				&byte_value);

		if ((byte_value & mask) == value)
			found = 1;
 801073e:	2501      	movs	r5, #1
 8010740:	e016      	b.n	8010770 <VL53L1_WaitValueMaskEx+0x6c>
				pdev,
				poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		   negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 8010742:	a882      	add	r0, sp, #520	; 0x208
 8010744:	f7ff ffc6 	bl	80106d4 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8010748:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 801074a:	9b82      	ldr	r3, [sp, #520]	; 0x208
 801074c:	1a9b      	subs	r3, r3, r2
	while ((status == VL53L1_ERROR_NONE) &&
 801074e:	b9e4      	cbnz	r4, 801078a <VL53L1_WaitValueMaskEx+0x86>
 8010750:	42bb      	cmp	r3, r7
 8010752:	d21a      	bcs.n	801078a <VL53L1_WaitValueMaskEx+0x86>
	       (polling_time_ms < timeout_ms) &&
 8010754:	b9cd      	cbnz	r5, 801078a <VL53L1_WaitValueMaskEx+0x86>
			status = VL53L1_RdByte(
 8010756:	f20d 2207 	addw	r2, sp, #519	; 0x207
 801075a:	4651      	mov	r1, sl
 801075c:	4630      	mov	r0, r6
 801075e:	f7ff ff7b 	bl	8010658 <VL53L1_RdByte>
 8010762:	4604      	mov	r4, r0
		if ((byte_value & mask) == value)
 8010764:	f89d 3207 	ldrb.w	r3, [sp, #519]	; 0x207
 8010768:	ea08 0303 	and.w	r3, r8, r3
 801076c:	454b      	cmp	r3, r9
 801076e:	d0e6      	beq.n	801073e <VL53L1_WaitValueMaskEx+0x3a>
		if (status == VL53L1_ERROR_NONE &&
 8010770:	2c00      	cmp	r4, #0
 8010772:	d1e6      	bne.n	8010742 <VL53L1_WaitValueMaskEx+0x3e>
 8010774:	2d00      	cmp	r5, #0
 8010776:	d1e4      	bne.n	8010742 <VL53L1_WaitValueMaskEx+0x3e>
		    found == 0 &&
 8010778:	f1bb 0f00 	cmp.w	fp, #0
 801077c:	d0e1      	beq.n	8010742 <VL53L1_WaitValueMaskEx+0x3e>
			status = VL53L1_WaitMs(
 801077e:	4659      	mov	r1, fp
 8010780:	4630      	mov	r0, r6
 8010782:	f7ff ffab 	bl	80106dc <VL53L1_WaitMs>
 8010786:	4604      	mov	r4, r0
 8010788:	e7db      	b.n	8010742 <VL53L1_WaitValueMaskEx+0x3e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 801078a:	b905      	cbnz	r5, 801078e <VL53L1_WaitValueMaskEx+0x8a>
 801078c:	b124      	cbz	r4, 8010798 <VL53L1_WaitValueMaskEx+0x94>
		status = VL53L1_ERROR_TIME_OUT;

	return status;
}
 801078e:	4620      	mov	r0, r4
 8010790:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8010794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_ERROR_TIME_OUT;
 8010798:	f06f 0406 	mvn.w	r4, #6
 801079c:	e7f7      	b.n	801078e <VL53L1_WaitValueMaskEx+0x8a>
 801079e:	bf00      	nop
 80107a0:	08022018 	.word	0x08022018

080107a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80107a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80107dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80107a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80107aa:	e003      	b.n	80107b4 <LoopCopyDataInit>

080107ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80107ac:	4b0c      	ldr	r3, [pc, #48]	; (80107e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80107ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80107b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80107b2:	3104      	adds	r1, #4

080107b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80107b4:	480b      	ldr	r0, [pc, #44]	; (80107e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80107b6:	4b0c      	ldr	r3, [pc, #48]	; (80107e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80107b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80107ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80107bc:	d3f6      	bcc.n	80107ac <CopyDataInit>
  ldr  r2, =_sbss
 80107be:	4a0b      	ldr	r2, [pc, #44]	; (80107ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80107c0:	e002      	b.n	80107c8 <LoopFillZerobss>

080107c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80107c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80107c4:	f842 3b04 	str.w	r3, [r2], #4

080107c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80107c8:	4b09      	ldr	r3, [pc, #36]	; (80107f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80107ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80107cc:	d3f9      	bcc.n	80107c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80107ce:	f7ff fc21 	bl	8010014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80107d2:	f00e fa99 	bl	801ed08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80107d6:	f7fe feb9 	bl	800f54c <main>
  bx  lr    
 80107da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80107dc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80107e0:	08022a28 	.word	0x08022a28
  ldr  r0, =_sdata
 80107e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80107e8:	20001678 	.word	0x20001678
  ldr  r2, =_sbss
 80107ec:	20001678 	.word	0x20001678
  ldr  r3, = _ebss
 80107f0:	20003ad0 	.word	0x20003ad0

080107f4 <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80107f4:	e7fe      	b.n	80107f4 <DMA1_Stream1_IRQHandler>
	...

080107f8 <m_mldivide>:
 80107f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107fc:	b097      	sub	sp, #92	; 0x5c
 80107fe:	4607      	mov	r7, r0
 8010800:	460d      	mov	r5, r1
 8010802:	4614      	mov	r4, r2
 8010804:	4606      	mov	r6, r0
 8010806:	f100 0820 	add.w	r8, r0, #32
 801080a:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 801080e:	6830      	ldr	r0, [r6, #0]
 8010810:	6871      	ldr	r1, [r6, #4]
 8010812:	68b2      	ldr	r2, [r6, #8]
 8010814:	68f3      	ldr	r3, [r6, #12]
 8010816:	46e6      	mov	lr, ip
 8010818:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801081c:	3610      	adds	r6, #16
 801081e:	4546      	cmp	r6, r8
 8010820:	46f4      	mov	ip, lr
 8010822:	d1f4      	bne.n	801080e <m_mldivide+0x16>
 8010824:	edd7 7a00 	vldr	s15, [r7]
 8010828:	ed97 7a01 	vldr	s14, [r7, #4]
 801082c:	6830      	ldr	r0, [r6, #0]
 801082e:	f8ce 0000 	str.w	r0, [lr]
 8010832:	eef0 7ae7 	vabs.f32	s15, s15
 8010836:	eeb0 7ac7 	vabs.f32	s14, s14
 801083a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801083e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010842:	f100 8184 	bmi.w	8010b4e <m_mldivide+0x356>
 8010846:	2304      	movs	r3, #4
 8010848:	9302      	str	r3, [sp, #8]
 801084a:	f04f 0b00 	mov.w	fp, #0
 801084e:	4618      	mov	r0, r3
 8010850:	2307      	movs	r3, #7
 8010852:	eeb0 7a67 	vmov.f32	s14, s15
 8010856:	46dc      	mov	ip, fp
 8010858:	2106      	movs	r1, #6
 801085a:	9303      	str	r3, [sp, #12]
 801085c:	f04f 0903 	mov.w	r9, #3
 8010860:	2601      	movs	r6, #1
 8010862:	edd7 7a02 	vldr	s15, [r7, #8]
 8010866:	eef0 7ae7 	vabs.f32	s15, s15
 801086a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801086e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010872:	f100 8179 	bmi.w	8010b68 <m_mldivide+0x370>
 8010876:	2202      	movs	r2, #2
 8010878:	2308      	movs	r3, #8
 801087a:	f04f 0e05 	mov.w	lr, #5
 801087e:	9200      	str	r2, [sp, #0]
 8010880:	4438      	add	r0, r7
 8010882:	4467      	add	r7, ip
 8010884:	edd0 6a00 	vldr	s13, [r0]
 8010888:	ed97 7a00 	vldr	s14, [r7]
 801088c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010890:	00b0      	lsls	r0, r6, #2
 8010892:	aa16      	add	r2, sp, #88	; 0x58
 8010894:	eb02 0c00 	add.w	ip, r2, r0
 8010898:	9a00      	ldr	r2, [sp, #0]
 801089a:	9006      	str	r0, [sp, #24]
 801089c:	ea4f 008b 	mov.w	r0, fp, lsl #2
 80108a0:	4607      	mov	r7, r0
 80108a2:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 80108a6:	aa16      	add	r2, sp, #88	; 0x58
 80108a8:	eb02 0807 	add.w	r8, r2, r7
 80108ac:	9004      	str	r0, [sp, #16]
 80108ae:	eb02 000a 	add.w	r0, r2, sl
 80108b2:	ea4f 0789 	mov.w	r7, r9, lsl #2
 80108b6:	970a      	str	r7, [sp, #40]	; 0x28
 80108b8:	ed4c 7a09 	vstr	s15, [ip, #-36]	; 0xffffffdc
 80108bc:	ed18 7a09 	vldr	s14, [r8, #-36]	; 0xffffffdc
 80108c0:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 80108c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80108c8:	19d7      	adds	r7, r2, r7
 80108ca:	9709      	str	r7, [sp, #36]	; 0x24
 80108cc:	9f02      	ldr	r7, [sp, #8]
 80108ce:	00bf      	lsls	r7, r7, #2
 80108d0:	9707      	str	r7, [sp, #28]
 80108d2:	19d7      	adds	r7, r2, r7
 80108d4:	ea4f 028e 	mov.w	r2, lr, lsl #2
 80108d8:	9701      	str	r7, [sp, #4]
 80108da:	0089      	lsls	r1, r1, #2
 80108dc:	4617      	mov	r7, r2
 80108de:	aa16      	add	r2, sp, #88	; 0x58
 80108e0:	eb02 0901 	add.w	r9, r2, r1
 80108e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80108e6:	9903      	ldr	r1, [sp, #12]
 80108e8:	ed40 7a09 	vstr	s15, [r0, #-36]	; 0xffffffdc
 80108ec:	0089      	lsls	r1, r1, #2
 80108ee:	009b      	lsls	r3, r3, #2
 80108f0:	eb02 0e07 	add.w	lr, r2, r7
 80108f4:	eb02 0803 	add.w	r8, r2, r3
 80108f8:	9108      	str	r1, [sp, #32]
 80108fa:	1851      	adds	r1, r2, r1
 80108fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108fe:	ed1c 7a09 	vldr	s14, [ip, #-36]	; 0xffffffdc
 8010902:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 8010906:	9705      	str	r7, [sp, #20]
 8010908:	9f01      	ldr	r7, [sp, #4]
 801090a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801090e:	ed57 7a09 	vldr	s15, [r7, #-36]	; 0xffffffdc
 8010912:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010916:	ed47 7a09 	vstr	s15, [r7, #-36]	; 0xffffffdc
 801091a:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 801091e:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 8010922:	ed5e 7a09 	vldr	s15, [lr, #-36]	; 0xffffffdc
 8010926:	ee27 7a26 	vmul.f32	s14, s14, s13
 801092a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801092e:	ed4e 7a09 	vstr	s15, [lr, #-36]	; 0xffffffdc
 8010932:	ed59 6a09 	vldr	s13, [r9, #-36]	; 0xffffffdc
 8010936:	ed1c 7a09 	vldr	s14, [ip, #-36]	; 0xffffffdc
 801093a:	ed51 7a09 	vldr	s15, [r1, #-36]	; 0xffffffdc
 801093e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010942:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010946:	ed41 7a09 	vstr	s15, [r1, #-36]	; 0xffffffdc
 801094a:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 801094e:	ed59 6a09 	vldr	s13, [r9, #-36]	; 0xffffffdc
 8010952:	ed58 7a09 	vldr	s15, [r8, #-36]	; 0xffffffdc
 8010956:	9a01      	ldr	r2, [sp, #4]
 8010958:	ee27 7a26 	vmul.f32	s14, s14, s13
 801095c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010960:	ed48 7a09 	vstr	s15, [r8, #-36]	; 0xffffffdc
 8010964:	ed1e 7a09 	vldr	s14, [lr, #-36]	; 0xffffffdc
 8010968:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 801096c:	eeb0 6ac7 	vabs.f32	s12, s14
 8010970:	eef0 7ae6 	vabs.f32	s15, s13
 8010974:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801097c:	dc15      	bgt.n	80109aa <m_mldivide+0x1b2>
 801097e:	9900      	ldr	r1, [sp, #0]
 8010980:	9f05      	ldr	r7, [sp, #20]
 8010982:	9707      	str	r7, [sp, #28]
 8010984:	9f02      	ldr	r7, [sp, #8]
 8010986:	9600      	str	r6, [sp, #0]
 8010988:	4630      	mov	r0, r6
 801098a:	460e      	mov	r6, r1
 801098c:	9903      	ldr	r1, [sp, #12]
 801098e:	9308      	str	r3, [sp, #32]
 8010990:	eef0 7a66 	vmov.f32	s15, s13
 8010994:	00bb      	lsls	r3, r7, #2
 8010996:	eef0 6a47 	vmov.f32	s13, s14
 801099a:	9305      	str	r3, [sp, #20]
 801099c:	f8cd a018 	str.w	sl, [sp, #24]
 80109a0:	eeb0 7a67 	vmov.f32	s14, s15
 80109a4:	008b      	lsls	r3, r1, #2
 80109a6:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 80109aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80109ae:	9a07      	ldr	r2, [sp, #28]
 80109b0:	9f04      	ldr	r7, [sp, #16]
 80109b2:	a916      	add	r1, sp, #88	; 0x58
 80109b4:	440a      	add	r2, r1
 80109b6:	4610      	mov	r0, r2
 80109b8:	9a08      	ldr	r2, [sp, #32]
 80109ba:	440a      	add	r2, r1
 80109bc:	440b      	add	r3, r1
 80109be:	4611      	mov	r1, r2
 80109c0:	9a05      	ldr	r2, [sp, #20]
 80109c2:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
 80109c6:	4472      	add	r2, lr
 80109c8:	ed40 7a09 	vstr	s15, [r0, #-36]	; 0xffffffdc
 80109cc:	4690      	mov	r8, r2
 80109ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80109d0:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 80109d4:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 80109d8:	4472      	add	r2, lr
 80109da:	4696      	mov	lr, r2
 80109dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80109e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109e2:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 80109e6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80109ea:	444a      	add	r2, r9
 80109ec:	eb05 0c07 	add.w	ip, r5, r7
 80109f0:	4691      	mov	r9, r2
 80109f2:	aa16      	add	r2, sp, #88	; 0x58
 80109f4:	ed9c 7a00 	vldr	s14, [ip]
 80109f8:	ed01 6a09 	vstr	s12, [r1, #-36]	; 0xffffffdc
 80109fc:	eb02 0c0a 	add.w	ip, r2, sl
 8010a00:	ed1c 2a09 	vldr	s4, [ip, #-36]	; 0xffffffdc
 8010a04:	ed84 7a00 	vstr	s14, [r4]
 8010a08:	44aa      	add	sl, r5
 8010a0a:	edda 6a00 	vldr	s13, [sl]
 8010a0e:	9906      	ldr	r1, [sp, #24]
 8010a10:	ed53 4a09 	vldr	s9, [r3, #-36]	; 0xffffffdc
 8010a14:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 8010a18:	ed1e 5a09 	vldr	s10, [lr, #-36]	; 0xffffffdc
 8010a1c:	ed58 2a09 	vldr	s5, [r8, #-36]	; 0xffffffdc
 8010a20:	ed59 5a09 	vldr	s11, [r9, #-36]	; 0xffffffdc
 8010a24:	ee67 7a02 	vmul.f32	s15, s14, s4
 8010a28:	1853      	adds	r3, r2, r1
 8010a2a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010a2e:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8010a32:	edc4 6a01 	vstr	s13, [r4, #4]
 8010a36:	186b      	adds	r3, r5, r1
 8010a38:	edd3 7a00 	vldr	s15, [r3]
 8010a3c:	ee27 1a23 	vmul.f32	s2, s14, s7
 8010a40:	ee64 1a26 	vmul.f32	s3, s8, s13
 8010a44:	ee77 7ac1 	vsub.f32	s15, s15, s2
 8010a48:	19d7      	adds	r7, r2, r7
 8010a4a:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8010a4e:	ed17 3a09 	vldr	s6, [r7, #-36]	; 0xffffffdc
 8010a52:	9a00      	ldr	r2, [sp, #0]
 8010a54:	eec7 1a86 	vdiv.f32	s3, s15, s12
 8010a58:	eb05 078b 	add.w	r7, r5, fp, lsl #2
 8010a5c:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 8010a60:	eb05 0186 	add.w	r1, r5, r6, lsl #2
 8010a64:	ee24 1aa1 	vmul.f32	s2, s9, s3
 8010a68:	ee65 7a21 	vmul.f32	s15, s10, s3
 8010a6c:	ee76 6ac1 	vsub.f32	s13, s13, s2
 8010a70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010a74:	eec6 7aa2 	vdiv.f32	s15, s13, s5
 8010a78:	edc4 1a02 	vstr	s3, [r4, #8]
 8010a7c:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8010a80:	edc4 7a01 	vstr	s15, [r4, #4]
 8010a84:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010a88:	eec7 7a03 	vdiv.f32	s15, s14, s6
 8010a8c:	edc4 7a00 	vstr	s15, [r4]
 8010a90:	ed97 7a03 	vldr	s14, [r7, #12]
 8010a94:	ed84 7a03 	vstr	s14, [r4, #12]
 8010a98:	edd0 6a03 	vldr	s13, [r0, #12]
 8010a9c:	ee67 7a02 	vmul.f32	s15, s14, s4
 8010aa0:	ee27 1a23 	vmul.f32	s2, s14, s7
 8010aa4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010aa8:	edc4 6a04 	vstr	s13, [r4, #16]
 8010aac:	edd1 7a03 	vldr	s15, [r1, #12]
 8010ab0:	ee66 1a84 	vmul.f32	s3, s13, s8
 8010ab4:	ee77 7ac1 	vsub.f32	s15, s15, s2
 8010ab8:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8010abc:	eec7 1a86 	vdiv.f32	s3, s15, s12
 8010ac0:	ee21 1aa4 	vmul.f32	s2, s3, s9
 8010ac4:	ee61 7a85 	vmul.f32	s15, s3, s10
 8010ac8:	ee76 6ac1 	vsub.f32	s13, s13, s2
 8010acc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010ad0:	eec6 7aa2 	vdiv.f32	s15, s13, s5
 8010ad4:	edc4 1a05 	vstr	s3, [r4, #20]
 8010ad8:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8010adc:	edc4 7a04 	vstr	s15, [r4, #16]
 8010ae0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010ae4:	eec7 7a03 	vdiv.f32	s15, s14, s6
 8010ae8:	edc4 7a03 	vstr	s15, [r4, #12]
 8010aec:	edd7 7a06 	vldr	s15, [r7, #24]
 8010af0:	edc4 7a06 	vstr	s15, [r4, #24]
 8010af4:	ed90 7a06 	vldr	s14, [r0, #24]
 8010af8:	ee27 2a82 	vmul.f32	s4, s15, s4
 8010afc:	ee67 3aa3 	vmul.f32	s7, s15, s7
 8010b00:	ee37 7a42 	vsub.f32	s14, s14, s4
 8010b04:	ed84 7a07 	vstr	s14, [r4, #28]
 8010b08:	edd1 6a06 	vldr	s13, [r1, #24]
 8010b0c:	ee27 4a04 	vmul.f32	s8, s14, s8
 8010b10:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8010b14:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8010b18:	ee86 4a86 	vdiv.f32	s8, s13, s12
 8010b1c:	ee64 4a24 	vmul.f32	s9, s8, s9
 8010b20:	ee24 5a05 	vmul.f32	s10, s8, s10
 8010b24:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010b28:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8010b2c:	eec7 6a22 	vdiv.f32	s13, s14, s5
 8010b30:	ed84 4a08 	vstr	s8, [r4, #32]
 8010b34:	ee66 5aa5 	vmul.f32	s11, s13, s11
 8010b38:	edc4 6a07 	vstr	s13, [r4, #28]
 8010b3c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010b40:	ee87 7a83 	vdiv.f32	s14, s15, s6
 8010b44:	ed84 7a06 	vstr	s14, [r4, #24]
 8010b48:	b017      	add	sp, #92	; 0x5c
 8010b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b4e:	2306      	movs	r3, #6
 8010b50:	f04f 0904 	mov.w	r9, #4
 8010b54:	2000      	movs	r0, #0
 8010b56:	9303      	str	r3, [sp, #12]
 8010b58:	2303      	movs	r3, #3
 8010b5a:	46cc      	mov	ip, r9
 8010b5c:	4606      	mov	r6, r0
 8010b5e:	2107      	movs	r1, #7
 8010b60:	9302      	str	r3, [sp, #8]
 8010b62:	f04f 0b01 	mov.w	fp, #1
 8010b66:	e67c      	b.n	8010862 <m_mldivide+0x6a>
 8010b68:	2207      	movs	r2, #7
 8010b6a:	2304      	movs	r3, #4
 8010b6c:	2108      	movs	r1, #8
 8010b6e:	9203      	str	r2, [sp, #12]
 8010b70:	2200      	movs	r2, #0
 8010b72:	9302      	str	r3, [sp, #8]
 8010b74:	4618      	mov	r0, r3
 8010b76:	468c      	mov	ip, r1
 8010b78:	2306      	movs	r3, #6
 8010b7a:	f04f 0e03 	mov.w	lr, #3
 8010b7e:	f04f 0905 	mov.w	r9, #5
 8010b82:	f04f 0b02 	mov.w	fp, #2
 8010b86:	9200      	str	r2, [sp, #0]
 8010b88:	2601      	movs	r6, #1
 8010b8a:	e679      	b.n	8010880 <m_mldivide+0x88>

08010b8c <m_qmult_eml>:
 8010b8c:	edd1 3a02 	vldr	s7, [r1, #8]
 8010b90:	ed91 3a00 	vldr	s6, [r1]
 8010b94:	edd0 7a00 	vldr	s15, [r0]
 8010b98:	edd1 2a03 	vldr	s5, [r1, #12]
 8010b9c:	ed91 4a01 	vldr	s8, [r1, #4]
 8010ba0:	edd0 4a01 	vldr	s9, [r0, #4]
 8010ba4:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8010c58 <m_qmult_eml+0xcc>
 8010ba8:	ed90 5a02 	vldr	s10, [r0, #8]
 8010bac:	edd0 5a03 	vldr	s11, [r0, #12]
 8010bb0:	eeb1 1a43 	vneg.f32	s2, s6
 8010bb4:	eeb1 2a63 	vneg.f32	s4, s7
 8010bb8:	ee27 7a81 	vmul.f32	s14, s15, s2
 8010bbc:	ee67 6a82 	vmul.f32	s13, s15, s4
 8010bc0:	ee27 6aa2 	vmul.f32	s12, s15, s5
 8010bc4:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010bc8:	eef1 1a44 	vneg.f32	s3, s8
 8010bcc:	ee24 0aa1 	vmul.f32	s0, s9, s3
 8010bd0:	ed2d 8b02 	vpush	{d8}
 8010bd4:	ee36 6a20 	vadd.f32	s12, s12, s1
 8010bd8:	ee24 8aa3 	vmul.f32	s16, s9, s7
 8010bdc:	ee37 7a20 	vadd.f32	s14, s14, s1
 8010be0:	ee24 1a81 	vmul.f32	s2, s9, s2
 8010be4:	ee76 6aa0 	vadd.f32	s13, s13, s1
 8010be8:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010bec:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8010bf0:	ee65 0a03 	vmul.f32	s1, s10, s6
 8010bf4:	ee36 6a08 	vadd.f32	s12, s12, s16
 8010bf8:	ee65 1a21 	vmul.f32	s3, s10, s3
 8010bfc:	ee25 2a02 	vmul.f32	s4, s10, s4
 8010c00:	ee37 7a00 	vadd.f32	s14, s14, s0
 8010c04:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010c08:	ee77 7a81 	vadd.f32	s15, s15, s2
 8010c0c:	ee25 5a22 	vmul.f32	s10, s10, s5
 8010c10:	ee25 3a83 	vmul.f32	s6, s11, s6
 8010c14:	ee65 3aa3 	vmul.f32	s7, s11, s7
 8010c18:	ee25 4a84 	vmul.f32	s8, s11, s8
 8010c1c:	ee36 6a21 	vadd.f32	s12, s12, s3
 8010c20:	ee37 7a02 	vadd.f32	s14, s14, s4
 8010c24:	ee76 6aa0 	vadd.f32	s13, s13, s1
 8010c28:	ee77 7a85 	vadd.f32	s15, s15, s10
 8010c2c:	ee65 5aa2 	vmul.f32	s11, s11, s5
 8010c30:	ee36 6a03 	vadd.f32	s12, s12, s6
 8010c34:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8010c38:	ee76 6a84 	vadd.f32	s13, s13, s8
 8010c3c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8010c40:	ed82 6a00 	vstr	s12, [r2]
 8010c44:	edc2 7a02 	vstr	s15, [r2, #8]
 8010c48:	edc2 6a01 	vstr	s13, [r2, #4]
 8010c4c:	ed82 7a03 	vstr	s14, [r2, #12]
 8010c50:	ecbd 8b02 	vpop	{d8}
 8010c54:	4770      	bx	lr
 8010c56:	bf00      	nop
 8010c58:	00000000 	.word	0x00000000

08010c5c <m_q2dcm_eml>:
 8010c5c:	b510      	push	{r4, lr}
 8010c5e:	ed90 7a00 	vldr	s14, [r0]
 8010c62:	edd0 6a01 	vldr	s13, [r0, #4]
 8010c66:	ed90 6a02 	vldr	s12, [r0, #8]
 8010c6a:	edd0 7a03 	vldr	s15, [r0, #12]
 8010c6e:	ed2d 8b0a 	vpush	{d8-d12}
 8010c72:	ee66 caa6 	vmul.f32	s25, s13, s13
 8010c76:	ee27 8a07 	vmul.f32	s16, s14, s14
 8010c7a:	460c      	mov	r4, r1
 8010c7c:	4608      	mov	r0, r1
 8010c7e:	2224      	movs	r2, #36	; 0x24
 8010c80:	2100      	movs	r1, #0
 8010c82:	ee67 ba26 	vmul.f32	s23, s14, s13
 8010c86:	ee27 ba06 	vmul.f32	s22, s14, s12
 8010c8a:	ee66 aa86 	vmul.f32	s21, s13, s12
 8010c8e:	ee26 ca06 	vmul.f32	s24, s12, s12
 8010c92:	ee67 8aa7 	vmul.f32	s17, s15, s15
 8010c96:	ee27 9a27 	vmul.f32	s18, s14, s15
 8010c9a:	ee66 9aa7 	vmul.f32	s19, s13, s15
 8010c9e:	ee26 aa27 	vmul.f32	s20, s12, s15
 8010ca2:	f00e f868 	bl	801ed76 <memset>
 8010ca6:	ee78 5a6c 	vsub.f32	s11, s16, s25
 8010caa:	eef1 7a48 	vneg.f32	s15, s16
 8010cae:	ee3c 8ac8 	vsub.f32	s16, s25, s16
 8010cb2:	ee77 7aec 	vsub.f32	s15, s15, s25
 8010cb6:	ee38 8a4c 	vsub.f32	s16, s16, s24
 8010cba:	ee75 5acc 	vsub.f32	s11, s11, s24
 8010cbe:	ee77 7a8c 	vadd.f32	s15, s15, s24
 8010cc2:	ee38 8a28 	vadd.f32	s16, s16, s17
 8010cc6:	ee3b 4a8a 	vadd.f32	s8, s23, s20
 8010cca:	ee3b 6aca 	vsub.f32	s12, s23, s20
 8010cce:	ee7b 4a69 	vsub.f32	s9, s22, s19
 8010cd2:	ee7b 6a29 	vadd.f32	s13, s22, s19
 8010cd6:	ee39 5a2a 	vadd.f32	s10, s18, s21
 8010cda:	ee3a 7ac9 	vsub.f32	s14, s21, s18
 8010cde:	ee75 5aa8 	vadd.f32	s11, s11, s17
 8010ce2:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8010ce6:	ed84 8a04 	vstr	s16, [r4, #16]
 8010cea:	ecbd 8b0a 	vpop	{d8-d12}
 8010cee:	ee34 4a04 	vadd.f32	s8, s8, s8
 8010cf2:	ee36 6a06 	vadd.f32	s12, s12, s12
 8010cf6:	ee74 4aa4 	vadd.f32	s9, s9, s9
 8010cfa:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8010cfe:	ee35 5a05 	vadd.f32	s10, s10, s10
 8010d02:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010d06:	edc4 5a00 	vstr	s11, [r4]
 8010d0a:	ed84 4a03 	vstr	s8, [r4, #12]
 8010d0e:	ed84 6a01 	vstr	s12, [r4, #4]
 8010d12:	edc4 4a06 	vstr	s9, [r4, #24]
 8010d16:	edc4 6a02 	vstr	s13, [r4, #8]
 8010d1a:	edc4 7a08 	vstr	s15, [r4, #32]
 8010d1e:	ed84 5a07 	vstr	s10, [r4, #28]
 8010d22:	ed84 7a05 	vstr	s14, [r4, #20]
 8010d26:	bd10      	pop	{r4, pc}

08010d28 <m_dcm2q_eml>:
 8010d28:	edd0 7a00 	vldr	s15, [r0]
 8010d2c:	edd0 6a04 	vldr	s13, [r0, #16]
 8010d30:	ed90 7a08 	vldr	s14, [r0, #32]
 8010d34:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010d38:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010d44:	4604      	mov	r4, r0
 8010d46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d4a:	460d      	mov	r5, r1
 8010d4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d54:	f340 80e0 	ble.w	8010f18 <m_dcm2q_eml+0x1f0>
 8010d58:	ee17 0a90 	vmov	r0, s15
 8010d5c:	f7ef fbfc 	bl	8000558 <__aeabi_f2d>
 8010d60:	ec41 0b10 	vmov	d0, r0, r1
 8010d64:	ed94 5a05 	vldr	s10, [r4, #20]
 8010d68:	edd4 6a07 	vldr	s13, [r4, #28]
 8010d6c:	edd4 5a06 	vldr	s11, [r4, #24]
 8010d70:	ed94 7a02 	vldr	s14, [r4, #8]
 8010d74:	ed94 6a01 	vldr	s12, [r4, #4]
 8010d78:	edd4 7a03 	vldr	s15, [r4, #12]
 8010d7c:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8010d80:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010d84:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010d88:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d90:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010d94:	bf4c      	ite	mi
 8010d96:	f04f 38ff 	movmi.w	r8, #4294967295
 8010d9a:	f04f 0801 	movpl.w	r8, #1
 8010d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010da2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010da6:	bf4c      	ite	mi
 8010da8:	f04f 36ff 	movmi.w	r6, #4294967295
 8010dac:	2601      	movpl	r6, #1
 8010dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db2:	bf4c      	ite	mi
 8010db4:	f04f 37ff 	movmi.w	r7, #4294967295
 8010db8:	2701      	movpl	r7, #1
 8010dba:	f00b fc0d 	bl	801c5d8 <sqrt>
 8010dbe:	ec51 0b10 	vmov	r0, r1, d0
 8010dc2:	f7ef ff15 	bl	8000bf0 <__aeabi_d2f>
 8010dc6:	ee07 8a90 	vmov	s15, r8
 8010dca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010dce:	ee07 0a90 	vmov	s15, r0
 8010dd2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010dd6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010dda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010dde:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010de2:	ed85 7a00 	vstr	s14, [r5]
 8010de6:	ed94 6a00 	vldr	s12, [r4]
 8010dea:	edd4 6a04 	vldr	s13, [r4, #16]
 8010dee:	ed94 7a08 	vldr	s14, [r4, #32]
 8010df2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010dfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010dfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e06:	d904      	bls.n	8010e12 <m_dcm2q_eml+0xea>
 8010e08:	eef4 7a67 	vcmp.f32	s15, s15
 8010e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e10:	d07b      	beq.n	8010f0a <m_dcm2q_eml+0x1e2>
 8010e12:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8010f20 <m_dcm2q_eml+0x1f8>
 8010e16:	f00b fbdf 	bl	801c5d8 <sqrt>
 8010e1a:	ec51 0b10 	vmov	r0, r1, d0
 8010e1e:	f7ef fee7 	bl	8000bf0 <__aeabi_d2f>
 8010e22:	ee07 0a90 	vmov	s15, r0
 8010e26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010e2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010e2e:	ee07 6a90 	vmov	s15, r6
 8010e32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010e36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010e3a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010e3e:	ed85 7a01 	vstr	s14, [r5, #4]
 8010e42:	ed94 6a00 	vldr	s12, [r4]
 8010e46:	edd4 6a04 	vldr	s13, [r4, #16]
 8010e4a:	ed94 7a08 	vldr	s14, [r4, #32]
 8010e4e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010e52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010e56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010e5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e62:	d904      	bls.n	8010e6e <m_dcm2q_eml+0x146>
 8010e64:	eef4 7a67 	vcmp.f32	s15, s15
 8010e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e6c:	d046      	beq.n	8010efc <m_dcm2q_eml+0x1d4>
 8010e6e:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8010f20 <m_dcm2q_eml+0x1f8>
 8010e72:	f00b fbb1 	bl	801c5d8 <sqrt>
 8010e76:	ec51 0b10 	vmov	r0, r1, d0
 8010e7a:	f7ef feb9 	bl	8000bf0 <__aeabi_d2f>
 8010e7e:	ee07 0a90 	vmov	s15, r0
 8010e82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010e86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010e8a:	ee07 7a90 	vmov	s15, r7
 8010e8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010e92:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010e96:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010e9a:	ed85 7a02 	vstr	s14, [r5, #8]
 8010e9e:	edd4 7a00 	vldr	s15, [r4]
 8010ea2:	edd4 6a04 	vldr	s13, [r4, #16]
 8010ea6:	ed94 7a08 	vldr	s14, [r4, #32]
 8010eaa:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010eb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010eb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ebe:	d904      	bls.n	8010eca <m_dcm2q_eml+0x1a2>
 8010ec0:	eef4 7a67 	vcmp.f32	s15, s15
 8010ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec8:	d011      	beq.n	8010eee <m_dcm2q_eml+0x1c6>
 8010eca:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8010f20 <m_dcm2q_eml+0x1f8>
 8010ece:	f00b fb83 	bl	801c5d8 <sqrt>
 8010ed2:	ec51 0b10 	vmov	r0, r1, d0
 8010ed6:	f7ef fe8b 	bl	8000bf0 <__aeabi_d2f>
 8010eda:	ee07 0a10 	vmov	s14, r0
 8010ede:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ee6:	edc5 7a03 	vstr	s15, [r5, #12]
 8010eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eee:	ee17 0a90 	vmov	r0, s15
 8010ef2:	f7ef fb31 	bl	8000558 <__aeabi_f2d>
 8010ef6:	ec41 0b10 	vmov	d0, r0, r1
 8010efa:	e7e8      	b.n	8010ece <m_dcm2q_eml+0x1a6>
 8010efc:	ee17 0a90 	vmov	r0, s15
 8010f00:	f7ef fb2a 	bl	8000558 <__aeabi_f2d>
 8010f04:	ec41 0b10 	vmov	d0, r0, r1
 8010f08:	e7b3      	b.n	8010e72 <m_dcm2q_eml+0x14a>
 8010f0a:	ee17 0a90 	vmov	r0, s15
 8010f0e:	f7ef fb23 	bl	8000558 <__aeabi_f2d>
 8010f12:	ec41 0b10 	vmov	d0, r0, r1
 8010f16:	e77e      	b.n	8010e16 <m_dcm2q_eml+0xee>
 8010f18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010f20 <m_dcm2q_eml+0x1f8>
 8010f1c:	e722      	b.n	8010d64 <m_dcm2q_eml+0x3c>
 8010f1e:	bf00      	nop
	...

08010f28 <SpacePointGyroProp>:
 8010f28:	b570      	push	{r4, r5, r6, lr}
 8010f2a:	edd2 5a00 	vldr	s11, [r2]
 8010f2e:	ed92 7a01 	vldr	s14, [r2, #4]
 8010f32:	eddf 6a53 	vldr	s13, [pc, #332]	; 8011080 <SpacePointGyroProp+0x158>
 8010f36:	edd1 7a02 	vldr	s15, [r1, #8]
 8010f3a:	ed9f 6a52 	vldr	s12, [pc, #328]	; 8011084 <SpacePointGyroProp+0x15c>
 8010f3e:	ed2d 8b04 	vpush	{d8-d9}
 8010f42:	ed91 9a00 	vldr	s18, [r1]
 8010f46:	edd1 8a01 	vldr	s17, [r1, #4]
 8010f4a:	ed92 8a02 	vldr	s16, [r2, #8]
 8010f4e:	9d08      	ldr	r5, [sp, #32]
 8010f50:	ee39 9a65 	vsub.f32	s18, s18, s11
 8010f54:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8010f58:	ee29 9a00 	vmul.f32	s18, s18, s0
 8010f5c:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8010f60:	ee29 9a26 	vmul.f32	s18, s18, s13
 8010f64:	ee68 8a80 	vmul.f32	s17, s17, s0
 8010f68:	ee29 7a09 	vmul.f32	s14, s18, s18
 8010f6c:	ee68 8aa6 	vmul.f32	s17, s17, s13
 8010f70:	ee28 8a00 	vmul.f32	s16, s16, s0
 8010f74:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8010f78:	ee28 8a26 	vmul.f32	s16, s16, s13
 8010f7c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010f80:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8010f84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f88:	ee68 7a08 	vmul.f32	s15, s16, s16
 8010f8c:	4606      	mov	r6, r0
 8010f8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010f9a:	461c      	mov	r4, r3
 8010f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fa0:	eef4 7ac6 	vcmpe.f32	s15, s12
 8010fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa8:	dd62      	ble.n	8011070 <SpacePointGyroProp+0x148>
 8010faa:	ee17 0a90 	vmov	r0, s15
 8010fae:	f7ef fad3 	bl	8000558 <__aeabi_f2d>
 8010fb2:	ec41 0b10 	vmov	d0, r0, r1
 8010fb6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010fba:	ee29 9a27 	vmul.f32	s18, s18, s15
 8010fbe:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010fc2:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010fc6:	ed85 9a00 	vstr	s18, [r5]
 8010fca:	edc5 8a01 	vstr	s17, [r5, #4]
 8010fce:	ed85 8a02 	vstr	s16, [r5, #8]
 8010fd2:	f00b fb01 	bl	801c5d8 <sqrt>
 8010fd6:	ec51 0b10 	vmov	r0, r1, d0
 8010fda:	f7ef fe09 	bl	8000bf0 <__aeabi_d2f>
 8010fde:	4622      	mov	r2, r4
 8010fe0:	4631      	mov	r1, r6
 8010fe2:	60e8      	str	r0, [r5, #12]
 8010fe4:	4628      	mov	r0, r5
 8010fe6:	f7ff fdd1 	bl	8010b8c <m_qmult_eml>
 8010fea:	edd4 6a00 	vldr	s13, [r4]
 8010fee:	eddf 5a25 	vldr	s11, [pc, #148]	; 8011084 <SpacePointGyroProp+0x15c>
 8010ff2:	ed94 7a01 	vldr	s14, [r4, #4]
 8010ff6:	edd4 7a02 	vldr	s15, [r4, #8]
 8010ffa:	ed94 6a03 	vldr	s12, [r4, #12]
 8010ffe:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011002:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011006:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801100a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801100e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011012:	ee26 6a06 	vmul.f32	s12, s12, s12
 8011016:	ee77 7a87 	vadd.f32	s15, s15, s14
 801101a:	ee76 7a27 	vadd.f32	s15, s12, s15
 801101e:	ee17 0a90 	vmov	r0, s15
 8011022:	f7ef fa99 	bl	8000558 <__aeabi_f2d>
 8011026:	ec41 0b10 	vmov	d0, r0, r1
 801102a:	f00b fad5 	bl	801c5d8 <sqrt>
 801102e:	ec51 0b10 	vmov	r0, r1, d0
 8011032:	f7ef fddd 	bl	8000bf0 <__aeabi_d2f>
 8011036:	ed94 6a00 	vldr	s12, [r4]
 801103a:	edd4 6a01 	vldr	s13, [r4, #4]
 801103e:	ed94 7a02 	vldr	s14, [r4, #8]
 8011042:	ed94 5a03 	vldr	s10, [r4, #12]
 8011046:	ee07 0a90 	vmov	s15, r0
 801104a:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801104e:	ecbd 8b04 	vpop	{d8-d9}
 8011052:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8011056:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801105a:	ee85 7a27 	vdiv.f32	s14, s10, s15
 801105e:	edc4 5a00 	vstr	s11, [r4]
 8011062:	ed84 6a01 	vstr	s12, [r4, #4]
 8011066:	edc4 6a02 	vstr	s13, [r4, #8]
 801106a:	ed84 7a03 	vstr	s14, [r4, #12]
 801106e:	bd70      	pop	{r4, r5, r6, pc}
 8011070:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011078 <SpacePointGyroProp+0x150>
 8011074:	e79f      	b.n	8010fb6 <SpacePointGyroProp+0x8e>
 8011076:	bf00      	nop
	...
 8011080:	3c8efa35 	.word	0x3c8efa35
 8011084:	00000000 	.word	0x00000000

08011088 <m_b_interp1q_constrain>:
 8011088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801108a:	ed2d 8b04 	vpush	{d8-d9}
 801108e:	edd0 8a00 	vldr	s17, [r0]
 8011092:	eef4 8ac0 	vcmpe.f32	s17, s0
 8011096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801109a:	db04      	blt.n	80110a6 <m_b_interp1q_constrain+0x1e>
 801109c:	ed91 0a00 	vldr	s0, [r1]
 80110a0:	ecbd 8b04 	vpop	{d8-d9}
 80110a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110a6:	ed90 9a09 	vldr	s18, [r0, #36]	; 0x24
 80110aa:	eeb4 0ac9 	vcmpe.f32	s0, s18
 80110ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110b2:	da58      	bge.n	8011166 <m_b_interp1q_constrain+0xde>
 80110b4:	4b32      	ldr	r3, [pc, #200]	; (8011180 <m_b_interp1q_constrain+0xf8>)
 80110b6:	460e      	mov	r6, r1
 80110b8:	4605      	mov	r5, r0
 80110ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80110be:	eeb0 8a40 	vmov.f32	s16, s0
 80110c2:	f7ef fd95 	bl	8000bf0 <__aeabi_d2f>
 80110c6:	eef4 8ac8 	vcmpe.f32	s17, s16
 80110ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ce:	ee00 0a10 	vmov	s0, r0
 80110d2:	d8e5      	bhi.n	80110a0 <m_b_interp1q_constrain+0x18>
 80110d4:	eeb4 8ac9 	vcmpe.f32	s16, s18
 80110d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110dc:	d8e0      	bhi.n	80110a0 <m_b_interp1q_constrain+0x18>
 80110de:	210a      	movs	r1, #10
 80110e0:	2702      	movs	r7, #2
 80110e2:	2001      	movs	r0, #1
 80110e4:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
 80110e8:	1844      	adds	r4, r0, r1
 80110ea:	0864      	lsrs	r4, r4, #1
 80110ec:	eb04 020e 	add.w	r2, r4, lr
 80110f0:	0092      	lsls	r2, r2, #2
 80110f2:	18ab      	adds	r3, r5, r2
 80110f4:	edd3 7a00 	vldr	s15, [r3]
 80110f8:	eef4 7ac8 	vcmpe.f32	s15, s16
 80110fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011100:	d808      	bhi.n	8011114 <m_b_interp1q_constrain+0x8c>
 8011102:	e03b      	b.n	801117c <m_b_interp1q_constrain+0xf4>
 8011104:	edd1 7a00 	vldr	s15, [r1]
 8011108:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011110:	da2e      	bge.n	8011170 <m_b_interp1q_constrain+0xe8>
 8011112:	461c      	mov	r4, r3
 8011114:	1823      	adds	r3, r4, r0
 8011116:	085b      	lsrs	r3, r3, #1
 8011118:	eb03 020e 	add.w	r2, r3, lr
 801111c:	0092      	lsls	r2, r2, #2
 801111e:	42bc      	cmp	r4, r7
 8011120:	eb05 0102 	add.w	r1, r5, r2
 8011124:	d8ee      	bhi.n	8011104 <m_b_interp1q_constrain+0x7c>
 8011126:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 801112a:	3a01      	subs	r2, #1
 801112c:	0092      	lsls	r2, r2, #2
 801112e:	18ab      	adds	r3, r5, r2
 8011130:	edd3 7a00 	vldr	s15, [r3]
 8011134:	0080      	lsls	r0, r0, #2
 8011136:	4405      	add	r5, r0
 8011138:	ed95 7a00 	vldr	s14, [r5]
 801113c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8011140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011144:	4430      	add	r0, r6
 8011146:	ee88 0a27 	vdiv.f32	s0, s16, s15
 801114a:	4432      	add	r2, r6
 801114c:	ecbd 8b04 	vpop	{d8-d9}
 8011150:	ed92 7a00 	vldr	s14, [r2]
 8011154:	edd0 7a00 	vldr	s15, [r0]
 8011158:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801115c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011160:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011166:	ecbd 8b04 	vpop	{d8-d9}
 801116a:	ed91 0a09 	vldr	s0, [r1, #36]	; 0x24
 801116e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011170:	4621      	mov	r1, r4
 8011172:	1c5f      	adds	r7, r3, #1
 8011174:	428f      	cmp	r7, r1
 8011176:	4618      	mov	r0, r3
 8011178:	d3b6      	bcc.n	80110e8 <m_b_interp1q_constrain+0x60>
 801117a:	e7db      	b.n	8011134 <m_b_interp1q_constrain+0xac>
 801117c:	4623      	mov	r3, r4
 801117e:	e7f8      	b.n	8011172 <m_b_interp1q_constrain+0xea>
 8011180:	20001698 	.word	0x20001698

08011184 <m_interp1q_constrain>:
 8011184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011186:	ed2d 8b04 	vpush	{d8-d9}
 801118a:	edd0 8a00 	vldr	s17, [r0]
 801118e:	eef4 8ac0 	vcmpe.f32	s17, s0
 8011192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011196:	db04      	blt.n	80111a2 <m_interp1q_constrain+0x1e>
 8011198:	ed91 0a00 	vldr	s0, [r1]
 801119c:	ecbd 8b04 	vpop	{d8-d9}
 80111a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111a2:	ed90 9a0c 	vldr	s18, [r0, #48]	; 0x30
 80111a6:	eeb4 0ac9 	vcmpe.f32	s0, s18
 80111aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ae:	da58      	bge.n	8011262 <m_interp1q_constrain+0xde>
 80111b0:	4b32      	ldr	r3, [pc, #200]	; (801127c <m_interp1q_constrain+0xf8>)
 80111b2:	460e      	mov	r6, r1
 80111b4:	4605      	mov	r5, r0
 80111b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80111ba:	eeb0 8a40 	vmov.f32	s16, s0
 80111be:	f7ef fd17 	bl	8000bf0 <__aeabi_d2f>
 80111c2:	eef4 8ac8 	vcmpe.f32	s17, s16
 80111c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ca:	ee00 0a10 	vmov	s0, r0
 80111ce:	d8e5      	bhi.n	801119c <m_interp1q_constrain+0x18>
 80111d0:	eeb4 8ac9 	vcmpe.f32	s16, s18
 80111d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d8:	d8e0      	bhi.n	801119c <m_interp1q_constrain+0x18>
 80111da:	210d      	movs	r1, #13
 80111dc:	2702      	movs	r7, #2
 80111de:	2001      	movs	r0, #1
 80111e0:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
 80111e4:	1844      	adds	r4, r0, r1
 80111e6:	0864      	lsrs	r4, r4, #1
 80111e8:	eb04 020e 	add.w	r2, r4, lr
 80111ec:	0092      	lsls	r2, r2, #2
 80111ee:	18ab      	adds	r3, r5, r2
 80111f0:	edd3 7a00 	vldr	s15, [r3]
 80111f4:	eef4 7ac8 	vcmpe.f32	s15, s16
 80111f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111fc:	d808      	bhi.n	8011210 <m_interp1q_constrain+0x8c>
 80111fe:	e03b      	b.n	8011278 <m_interp1q_constrain+0xf4>
 8011200:	edd1 7a00 	vldr	s15, [r1]
 8011204:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801120c:	da2e      	bge.n	801126c <m_interp1q_constrain+0xe8>
 801120e:	461c      	mov	r4, r3
 8011210:	1823      	adds	r3, r4, r0
 8011212:	085b      	lsrs	r3, r3, #1
 8011214:	eb03 020e 	add.w	r2, r3, lr
 8011218:	0092      	lsls	r2, r2, #2
 801121a:	42bc      	cmp	r4, r7
 801121c:	eb05 0102 	add.w	r1, r5, r2
 8011220:	d8ee      	bhi.n	8011200 <m_interp1q_constrain+0x7c>
 8011222:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8011226:	3a01      	subs	r2, #1
 8011228:	0092      	lsls	r2, r2, #2
 801122a:	18ab      	adds	r3, r5, r2
 801122c:	edd3 7a00 	vldr	s15, [r3]
 8011230:	0080      	lsls	r0, r0, #2
 8011232:	4405      	add	r5, r0
 8011234:	ed95 7a00 	vldr	s14, [r5]
 8011238:	ee38 8a67 	vsub.f32	s16, s16, s15
 801123c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011240:	4430      	add	r0, r6
 8011242:	ee88 0a27 	vdiv.f32	s0, s16, s15
 8011246:	4432      	add	r2, r6
 8011248:	ecbd 8b04 	vpop	{d8-d9}
 801124c:	ed92 7a00 	vldr	s14, [r2]
 8011250:	edd0 7a00 	vldr	s15, [r0]
 8011254:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011258:	ee20 0a27 	vmul.f32	s0, s0, s15
 801125c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011262:	ecbd 8b04 	vpop	{d8-d9}
 8011266:	ed91 0a0c 	vldr	s0, [r1, #48]	; 0x30
 801126a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801126c:	4621      	mov	r1, r4
 801126e:	1c5f      	adds	r7, r3, #1
 8011270:	428f      	cmp	r7, r1
 8011272:	4618      	mov	r0, r3
 8011274:	d3b6      	bcc.n	80111e4 <m_interp1q_constrain+0x60>
 8011276:	e7db      	b.n	8011230 <m_interp1q_constrain+0xac>
 8011278:	4623      	mov	r3, r4
 801127a:	e7f8      	b.n	801126e <m_interp1q_constrain+0xea>
 801127c:	20001698 	.word	0x20001698

08011280 <rt_InitInfAndNaN.isra.3>:
 8011280:	4b06      	ldr	r3, [pc, #24]	; (801129c <rt_InitInfAndNaN.isra.3+0x1c>)
 8011282:	4907      	ldr	r1, [pc, #28]	; (80112a0 <rt_InitInfAndNaN.isra.3+0x20>)
 8011284:	4a07      	ldr	r2, [pc, #28]	; (80112a4 <rt_InitInfAndNaN.isra.3+0x24>)
 8011286:	b410      	push	{r4}
 8011288:	2000      	movs	r0, #0
 801128a:	f04f 44ff 	mov.w	r4, #2139095040	; 0x7f800000
 801128e:	609c      	str	r4, [r3, #8]
 8011290:	e9c3 0100 	strd	r0, r1, [r3]
 8011294:	60da      	str	r2, [r3, #12]
 8011296:	f85d 4b04 	ldr.w	r4, [sp], #4
 801129a:	4770      	bx	lr
 801129c:	20001698 	.word	0x20001698
 80112a0:	fff80000 	.word	0xfff80000
 80112a4:	ff800000 	.word	0xff800000

080112a8 <m_rt_atan2f_snf>:
 80112a8:	b500      	push	{lr}
 80112aa:	eeb4 0a40 	vcmp.f32	s0, s0
 80112ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112b2:	b085      	sub	sp, #20
 80112b4:	4b42      	ldr	r3, [pc, #264]	; (80113c0 <m_rt_atan2f_snf+0x118>)
 80112b6:	d008      	beq.n	80112ca <m_rt_atan2f_snf+0x22>
 80112b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80112bc:	f7ef fc98 	bl	8000bf0 <__aeabi_d2f>
 80112c0:	ee00 0a10 	vmov	s0, r0
 80112c4:	b005      	add	sp, #20
 80112c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80112ca:	eef4 0a60 	vcmp.f32	s1, s1
 80112ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d2:	d1f1      	bne.n	80112b8 <m_rt_atan2f_snf+0x10>
 80112d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80112d8:	eeb4 0a67 	vcmp.f32	s0, s15
 80112dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e0:	d015      	beq.n	801130e <m_rt_atan2f_snf+0x66>
 80112e2:	ed93 7a03 	vldr	s14, [r3, #12]
 80112e6:	eeb4 0a47 	vcmp.f32	s0, s14
 80112ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ee:	d00e      	beq.n	801130e <m_rt_atan2f_snf+0x66>
 80112f0:	eef5 0a40 	vcmp.f32	s1, #0.0
 80112f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112f8:	d131      	bne.n	801135e <m_rt_atan2f_snf+0xb6>
 80112fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80112fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011302:	dd47      	ble.n	8011394 <m_rt_atan2f_snf+0xec>
 8011304:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80113c4 <m_rt_atan2f_snf+0x11c>
 8011308:	b005      	add	sp, #20
 801130a:	f85d fb04 	ldr.w	pc, [sp], #4
 801130e:	eef4 0a67 	vcmp.f32	s1, s15
 8011312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011316:	d11a      	bne.n	801134e <m_rt_atan2f_snf+0xa6>
 8011318:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011320:	dd3c      	ble.n	801139c <m_rt_atan2f_snf+0xf4>
 8011322:	ed9f 7b23 	vldr	d7, [pc, #140]	; 80113b0 <m_rt_atan2f_snf+0x108>
 8011326:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 801132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801132e:	dd38      	ble.n	80113a2 <m_rt_atan2f_snf+0xfa>
 8011330:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80113b0 <m_rt_atan2f_snf+0x108>
 8011334:	eeb0 0a47 	vmov.f32	s0, s14
 8011338:	eef0 0a67 	vmov.f32	s1, s15
 801133c:	f00a ffd2 	bl	801c2e4 <atan2>
 8011340:	ec51 0b10 	vmov	r0, r1, d0
 8011344:	f7ef fc54 	bl	8000bf0 <__aeabi_d2f>
 8011348:	ee00 0a10 	vmov	s0, r0
 801134c:	e7ba      	b.n	80112c4 <m_rt_atan2f_snf+0x1c>
 801134e:	edd3 7a03 	vldr	s15, [r3, #12]
 8011352:	eef4 0a67 	vcmp.f32	s1, s15
 8011356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801135a:	d0dd      	beq.n	8011318 <m_rt_atan2f_snf+0x70>
 801135c:	e7c8      	b.n	80112f0 <m_rt_atan2f_snf+0x48>
 801135e:	ee10 0a90 	vmov	r0, s1
 8011362:	ed8d 0a03 	vstr	s0, [sp, #12]
 8011366:	f7ef f8f7 	bl	8000558 <__aeabi_f2d>
 801136a:	ed9d 0a03 	vldr	s0, [sp, #12]
 801136e:	e9cd 0100 	strd	r0, r1, [sp]
 8011372:	ee10 0a10 	vmov	r0, s0
 8011376:	f7ef f8ef 	bl	8000558 <__aeabi_f2d>
 801137a:	ed9d 1b00 	vldr	d1, [sp]
 801137e:	ec41 0b10 	vmov	d0, r0, r1
 8011382:	f00a ffaf 	bl	801c2e4 <atan2>
 8011386:	ec51 0b10 	vmov	r0, r1, d0
 801138a:	f7ef fc31 	bl	8000bf0 <__aeabi_d2f>
 801138e:	ee00 0a10 	vmov	s0, r0
 8011392:	e797      	b.n	80112c4 <m_rt_atan2f_snf+0x1c>
 8011394:	d408      	bmi.n	80113a8 <m_rt_atan2f_snf+0x100>
 8011396:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80113c8 <m_rt_atan2f_snf+0x120>
 801139a:	e793      	b.n	80112c4 <m_rt_atan2f_snf+0x1c>
 801139c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80113b8 <m_rt_atan2f_snf+0x110>
 80113a0:	e7c1      	b.n	8011326 <m_rt_atan2f_snf+0x7e>
 80113a2:	ed9f 1b05 	vldr	d1, [pc, #20]	; 80113b8 <m_rt_atan2f_snf+0x110>
 80113a6:	e7c5      	b.n	8011334 <m_rt_atan2f_snf+0x8c>
 80113a8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80113cc <m_rt_atan2f_snf+0x124>
 80113ac:	e78a      	b.n	80112c4 <m_rt_atan2f_snf+0x1c>
 80113ae:	bf00      	nop
 80113b0:	00000000 	.word	0x00000000
 80113b4:	3ff00000 	.word	0x3ff00000
 80113b8:	00000000 	.word	0x00000000
 80113bc:	bff00000 	.word	0xbff00000
 80113c0:	20001698 	.word	0x20001698
 80113c4:	3fc90fdb 	.word	0x3fc90fdb
 80113c8:	00000000 	.word	0x00000000
 80113cc:	bfc90fdb 	.word	0xbfc90fdb

080113d0 <output_update>:
 80113d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113d4:	ed2d 8b06 	vpush	{d8-d10}
 80113d8:	edd0 6a00 	vldr	s13, [r0]
 80113dc:	ed90 7a01 	vldr	s14, [r0, #4]
 80113e0:	edd0 7a02 	vldr	s15, [r0, #8]
 80113e4:	b08d      	sub	sp, #52	; 0x34
 80113e6:	eef1 6a66 	vneg.f32	s13, s13
 80113ea:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
 80113ee:	edc0 6a00 	vstr	s13, [r0]
 80113f2:	eeb1 7a47 	vneg.f32	s14, s14
 80113f6:	eef1 7a67 	vneg.f32	s15, s15
 80113fa:	4689      	mov	r9, r1
 80113fc:	ed80 7a01 	vstr	s14, [r0, #4]
 8011400:	edc0 7a02 	vstr	s15, [r0, #8]
 8011404:	a903      	add	r1, sp, #12
 8011406:	4604      	mov	r4, r0
 8011408:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801140c:	4615      	mov	r5, r2
 801140e:	461e      	mov	r6, r3
 8011410:	f7ff fc24 	bl	8010c5c <m_q2dcm_eml>
 8011414:	2f00      	cmp	r7, #0
 8011416:	d17e      	bne.n	8011516 <output_update+0x146>
 8011418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801141a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801141c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801141e:	6072      	str	r2, [r6, #4]
 8011420:	60b3      	str	r3, [r6, #8]
 8011422:	6031      	str	r1, [r6, #0]
 8011424:	ed94 7a01 	vldr	s14, [r4, #4]
 8011428:	ed94 0a00 	vldr	s0, [r4]
 801142c:	edd4 0a02 	vldr	s1, [r4, #8]
 8011430:	edd4 7a03 	vldr	s15, [r4, #12]
 8011434:	ee20 8a00 	vmul.f32	s16, s0, s0
 8011438:	ee67 9a07 	vmul.f32	s19, s14, s14
 801143c:	ee60 6aa7 	vmul.f32	s13, s1, s15
 8011440:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011444:	ee20 9aa0 	vmul.f32	s18, s1, s1
 8011448:	ee38 7a69 	vsub.f32	s14, s16, s19
 801144c:	ee67 8aa7 	vmul.f32	s17, s15, s15
 8011450:	ee30 0a26 	vadd.f32	s0, s0, s13
 8011454:	ee77 0a49 	vsub.f32	s1, s14, s18
 8011458:	ee30 0a00 	vadd.f32	s0, s0, s0
 801145c:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8011460:	f7ff ff22 	bl	80112a8 <m_rt_atan2f_snf>
 8011464:	ed85 0a00 	vstr	s0, [r5]
 8011468:	ed94 6a02 	vldr	s12, [r4, #8]
 801146c:	edd4 6a03 	vldr	s13, [r4, #12]
 8011470:	edd4 7a00 	vldr	s15, [r4]
 8011474:	ed94 7a01 	vldr	s14, [r4, #4]
 8011478:	ee67 7a86 	vmul.f32	s15, s15, s12
 801147c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011480:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 8011484:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011488:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801148c:	ee17 0a90 	vmov	r0, s15
 8011490:	f7ef f862 	bl	8000558 <__aeabi_f2d>
 8011494:	ec41 0b10 	vmov	d0, r0, r1
 8011498:	f00a fecc 	bl	801c234 <asin>
 801149c:	ec51 0b10 	vmov	r0, r1, d0
 80114a0:	f7ef fba6 	bl	8000bf0 <__aeabi_d2f>
 80114a4:	6068      	str	r0, [r5, #4]
 80114a6:	ed94 0a01 	vldr	s0, [r4, #4]
 80114aa:	edd4 6a02 	vldr	s13, [r4, #8]
 80114ae:	edd4 7a00 	vldr	s15, [r4]
 80114b2:	ed94 7a03 	vldr	s14, [r4, #12]
 80114b6:	eef1 0a48 	vneg.f32	s1, s16
 80114ba:	ee20 0a26 	vmul.f32	s0, s0, s13
 80114be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80114c2:	ee70 0ae9 	vsub.f32	s1, s1, s19
 80114c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80114ca:	ee70 0a89 	vadd.f32	s1, s1, s18
 80114ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 80114d2:	ee70 0aa8 	vadd.f32	s1, s1, s17
 80114d6:	f7ff fee7 	bl	80112a8 <m_rt_atan2f_snf>
 80114da:	ed95 6a00 	vldr	s12, [r5]
 80114de:	ed85 0a02 	vstr	s0, [r5, #8]
 80114e2:	eddf 6a7b 	vldr	s13, [pc, #492]	; 80116d0 <output_update+0x300>
 80114e6:	ed95 7a01 	vldr	s14, [r5, #4]
 80114ea:	edd5 7a02 	vldr	s15, [r5, #8]
 80114ee:	ee26 6a26 	vmul.f32	s12, s12, s13
 80114f2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80114f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80114fa:	ed85 6a00 	vstr	s12, [r5]
 80114fe:	ed85 7a01 	vstr	s14, [r5, #4]
 8011502:	edc5 7a02 	vstr	s15, [r5, #8]
 8011506:	b387      	cbz	r7, 801156a <output_update+0x19a>
 8011508:	2f01      	cmp	r7, #1
 801150a:	d009      	beq.n	8011520 <output_update+0x150>
 801150c:	b00d      	add	sp, #52	; 0x34
 801150e:	ecbd 8b06 	vpop	{d8-d10}
 8011512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011516:	2f01      	cmp	r7, #1
 8011518:	d04a      	beq.n	80115b0 <output_update+0x1e0>
 801151a:	ed95 6a00 	vldr	s12, [r5]
 801151e:	e7e0      	b.n	80114e2 <output_update+0x112>
 8011520:	ed96 7a00 	vldr	s14, [r6]
 8011524:	edd9 7a01 	vldr	s15, [r9, #4]
 8011528:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801152c:	eef1 7a67 	vneg.f32	s15, s15
 8011530:	edc8 7a00 	vstr	s15, [r8]
 8011534:	ed96 7a01 	vldr	s14, [r6, #4]
 8011538:	edd9 7a00 	vldr	s15, [r9]
 801153c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011540:	eef1 7a67 	vneg.f32	s15, s15
 8011544:	edc8 7a01 	vstr	s15, [r8, #4]
 8011548:	edd9 7a02 	vldr	s15, [r9, #8]
 801154c:	ed96 7a02 	vldr	s14, [r6, #8]
 8011550:	eef1 7a67 	vneg.f32	s15, s15
 8011554:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011558:	eef1 7a67 	vneg.f32	s15, s15
 801155c:	edc8 7a02 	vstr	s15, [r8, #8]
 8011560:	b00d      	add	sp, #52	; 0x34
 8011562:	ecbd 8b06 	vpop	{d8-d10}
 8011566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801156a:	ed96 7a00 	vldr	s14, [r6]
 801156e:	edd9 7a00 	vldr	s15, [r9]
 8011572:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011576:	eef1 7a67 	vneg.f32	s15, s15
 801157a:	edc8 7a00 	vstr	s15, [r8]
 801157e:	ed96 7a01 	vldr	s14, [r6, #4]
 8011582:	edd9 7a01 	vldr	s15, [r9, #4]
 8011586:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801158a:	eef1 7a67 	vneg.f32	s15, s15
 801158e:	edc8 7a01 	vstr	s15, [r8, #4]
 8011592:	edd9 7a02 	vldr	s15, [r9, #8]
 8011596:	ed96 7a02 	vldr	s14, [r6, #8]
 801159a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801159e:	eef1 7a67 	vneg.f32	s15, s15
 80115a2:	edc8 7a02 	vstr	s15, [r8, #8]
 80115a6:	b00d      	add	sp, #52	; 0x34
 80115a8:	ecbd 8b06 	vpop	{d8-d10}
 80115ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115b0:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 80115b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80115b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115b8:	6032      	str	r2, [r6, #0]
 80115ba:	eef1 7a67 	vneg.f32	s15, s15
 80115be:	6073      	str	r3, [r6, #4]
 80115c0:	edc6 7a02 	vstr	s15, [r6, #8]
 80115c4:	edd4 8a02 	vldr	s17, [r4, #8]
 80115c8:	ed94 8a00 	vldr	s16, [r4]
 80115cc:	ed94 9a01 	vldr	s18, [r4, #4]
 80115d0:	edd4 aa03 	vldr	s21, [r4, #12]
 80115d4:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80115d8:	ee68 9a08 	vmul.f32	s19, s16, s16
 80115dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80115e0:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 80115e4:	ee79 9aa9 	vadd.f32	s19, s19, s19
 80115e8:	ee7a 7a67 	vsub.f32	s15, s20, s15
 80115ec:	eef1 8a68 	vneg.f32	s17, s17
 80115f0:	ee77 7ae9 	vsub.f32	s15, s15, s19
 80115f4:	ee17 0a90 	vmov	r0, s15
 80115f8:	f7ee ffae 	bl	8000558 <__aeabi_f2d>
 80115fc:	ee28 7a09 	vmul.f32	s14, s16, s18
 8011600:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8011604:	e9cd 0100 	strd	r0, r1, [sp]
 8011608:	ee77 7a87 	vadd.f32	s15, s15, s14
 801160c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011610:	ee17 0a90 	vmov	r0, s15
 8011614:	f7ee ffa0 	bl	8000558 <__aeabi_f2d>
 8011618:	ed9d 1b00 	vldr	d1, [sp]
 801161c:	ec41 0b10 	vmov	d0, r0, r1
 8011620:	f00a fe60 	bl	801c2e4 <atan2>
 8011624:	ec51 0b10 	vmov	r0, r1, d0
 8011628:	f7ef fae2 	bl	8000bf0 <__aeabi_d2f>
 801162c:	ee69 7a09 	vmul.f32	s15, s18, s18
 8011630:	ee7a 9a69 	vsub.f32	s19, s20, s19
 8011634:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011638:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 801163c:	ee79 7ae7 	vsub.f32	s15, s19, s15
 8011640:	6028      	str	r0, [r5, #0]
 8011642:	ee17 0a90 	vmov	r0, s15
 8011646:	f7ee ff87 	bl	8000558 <__aeabi_f2d>
 801164a:	ee29 7a2a 	vmul.f32	s14, s18, s21
 801164e:	ee68 7a28 	vmul.f32	s15, s16, s17
 8011652:	e9cd 0100 	strd	r0, r1, [sp]
 8011656:	ee77 7a87 	vadd.f32	s15, s15, s14
 801165a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801165e:	ee17 0a90 	vmov	r0, s15
 8011662:	f7ee ff79 	bl	8000558 <__aeabi_f2d>
 8011666:	ed9d 1b00 	vldr	d1, [sp]
 801166a:	ec41 0b10 	vmov	d0, r0, r1
 801166e:	f00a fe39 	bl	801c2e4 <atan2>
 8011672:	ee68 8a89 	vmul.f32	s17, s17, s18
 8011676:	ee28 8a2a 	vmul.f32	s16, s16, s21
 801167a:	ec51 0b10 	vmov	r0, r1, d0
 801167e:	f7ef fab7 	bl	8000bf0 <__aeabi_d2f>
 8011682:	ee38 8a68 	vsub.f32	s16, s16, s17
 8011686:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 801168a:	ee78 7a08 	vadd.f32	s15, s16, s16
 801168e:	6068      	str	r0, [r5, #4]
 8011690:	ee17 0a90 	vmov	r0, s15
 8011694:	f7ee ff60 	bl	8000558 <__aeabi_f2d>
 8011698:	ec41 0b10 	vmov	d0, r0, r1
 801169c:	f00a fdca 	bl	801c234 <asin>
 80116a0:	ec51 0b10 	vmov	r0, r1, d0
 80116a4:	f7ef faa4 	bl	8000bf0 <__aeabi_d2f>
 80116a8:	ed95 6a00 	vldr	s12, [r5]
 80116ac:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80116b0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80116b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116b8:	60a8      	str	r0, [r5, #8]
 80116ba:	f57f af12 	bpl.w	80114e2 <output_update+0x112>
 80116be:	eddf 7a05 	vldr	s15, [pc, #20]	; 80116d4 <output_update+0x304>
 80116c2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80116c6:	eeb0 6a67 	vmov.f32	s12, s15
 80116ca:	edc5 7a00 	vstr	s15, [r5]
 80116ce:	e708      	b.n	80114e2 <output_update+0x112>
 80116d0:	42652ee1 	.word	0x42652ee1
 80116d4:	40c90e56 	.word	0x40c90e56

080116d8 <llEvaluate.constprop.32>:
 80116d8:	edd2 0a00 	vldr	s1, [r2]
 80116dc:	ed90 1a00 	vldr	s2, [r0]
 80116e0:	ed90 3a04 	vldr	s6, [r0, #16]
 80116e4:	edd2 3a01 	vldr	s7, [r2, #4]
 80116e8:	ed90 5a08 	vldr	s10, [r0, #32]
 80116ec:	edd0 1a05 	vldr	s3, [r0, #20]
 80116f0:	ed92 7a02 	vldr	s14, [r2, #8]
 80116f4:	ed90 4a09 	vldr	s8, [r0, #36]	; 0x24
 80116f8:	edd0 5a0d 	vldr	s11, [r0, #52]	; 0x34
 80116fc:	ed90 2a0a 	vldr	s4, [r0, #40]	; 0x28
 8011700:	edd0 4a0c 	vldr	s9, [r0, #48]	; 0x30
 8011704:	edd2 7a03 	vldr	s15, [r2, #12]
 8011708:	ed90 6a0e 	vldr	s12, [r0, #56]	; 0x38
 801170c:	edd0 2a0f 	vldr	s5, [r0, #60]	; 0x3c
 8011710:	eec0 6a81 	vdiv.f32	s13, s1, s2
 8011714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011718:	b084      	sub	sp, #16
 801171a:	460d      	mov	r5, r1
 801171c:	f10d 0c10 	add.w	ip, sp, #16
 8011720:	4686      	mov	lr, r0
 8011722:	f101 0710 	add.w	r7, r1, #16
 8011726:	2603      	movs	r6, #3
 8011728:	ee26 3a83 	vmul.f32	s6, s13, s6
 801172c:	ee25 5a26 	vmul.f32	s10, s10, s13
 8011730:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8011734:	ee37 7a45 	vsub.f32	s14, s14, s10
 8011738:	ee83 5aa1 	vdiv.f32	s10, s7, s3
 801173c:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8011740:	ee24 4a05 	vmul.f32	s8, s8, s10
 8011744:	edcd 6a00 	vstr	s13, [sp]
 8011748:	ee37 7a44 	vsub.f32	s14, s14, s8
 801174c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8011750:	eec7 5a02 	vdiv.f32	s11, s14, s4
 8011754:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8011758:	ee26 7a25 	vmul.f32	s14, s12, s11
 801175c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011760:	ed8d 5a01 	vstr	s10, [sp, #4]
 8011764:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011768:	edcd 5a02 	vstr	s11, [sp, #8]
 801176c:	ee87 7aa2 	vdiv.f32	s14, s15, s5
 8011770:	ee17 3a10 	vmov	r3, s14
 8011774:	f845 3f0c 	str.w	r3, [r5, #12]!
 8011778:	ed2c 7a01 	vstmdb	ip!, {s14}
 801177c:	ed57 6a01 	vldr	s13, [r7, #-4]
 8011780:	ed9e 7a0f 	vldr	s14, [lr, #60]	; 0x3c
 8011784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011788:	ed67 7a01 	vstmdb	r7!, {s15}
 801178c:	b1fe      	cbz	r6, 80117ce <llEvaluate.constprop.32+0xf6>
 801178e:	3e01      	subs	r6, #1
 8011790:	ed3c 7a01 	vldmdb	ip!, {s14}
 8011794:	1c73      	adds	r3, r6, #1
 8011796:	b25b      	sxtb	r3, r3
 8011798:	ea4f 0886 	mov.w	r8, r6, lsl #2
 801179c:	ed25 7a01 	vstmdb	r5!, {s14}
 80117a0:	b21a      	sxth	r2, r3
 80117a2:	eb00 1402 	add.w	r4, r0, r2, lsl #4
 80117a6:	4444      	add	r4, r8
 80117a8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80117ac:	edd4 7a00 	vldr	s15, [r4]
 80117b0:	edd2 6a00 	vldr	s13, [r2]
 80117b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80117b8:	3301      	adds	r3, #1
 80117ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80117be:	b25b      	sxtb	r3, r3
 80117c0:	2b04      	cmp	r3, #4
 80117c2:	ed85 7a00 	vstr	s14, [r5]
 80117c6:	d1eb      	bne.n	80117a0 <llEvaluate.constprop.32+0xc8>
 80117c8:	f1ae 0e14 	sub.w	lr, lr, #20
 80117cc:	e7d6      	b.n	801177c <llEvaluate.constprop.32+0xa4>
 80117ce:	b004      	add	sp, #16
 80117d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080117d4 <getMagStats.constprop.35>:
 80117d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d8:	2400      	movs	r4, #0
 80117da:	f8df a27c 	ldr.w	sl, [pc, #636]	; 8011a58 <getMagStats.constprop.35+0x284>
 80117de:	ed2d 8b04 	vpush	{d8-d9}
 80117e2:	601c      	str	r4, [r3, #0]
 80117e4:	6014      	str	r4, [r2, #0]
 80117e6:	f89a e0b0 	ldrb.w	lr, [sl, #176]	; 0xb0
 80117ea:	f89a 40b1 	ldrb.w	r4, [sl, #177]	; 0xb1
 80117ee:	f99a 50b2 	ldrsb.w	r5, [sl, #178]	; 0xb2
 80117f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80117f6:	45a6      	cmp	lr, r4
 80117f8:	b085      	sub	sp, #20
 80117fa:	eef0 9a40 	vmov.f32	s19, s0
 80117fe:	4681      	mov	r9, r0
 8011800:	eec7 8a80 	vdiv.f32	s17, s15, s0
 8011804:	f000 80ef 	beq.w	80119e6 <getMagStats.constprop.35+0x212>
 8011808:	1c68      	adds	r0, r5, #1
 801180a:	eba0 000e 	sub.w	r0, r0, lr
 801180e:	fb90 f5f4 	sdiv	r5, r0, r4
 8011812:	fb04 0015 	mls	r0, r4, r5, r0
 8011816:	b205      	sxth	r5, r0
 8011818:	2d00      	cmp	r5, #0
 801181a:	9502      	str	r5, [sp, #8]
 801181c:	f8cd e000 	str.w	lr, [sp]
 8011820:	f2c0 80eb 	blt.w	80119fa <getMagStats.constprop.35+0x226>
 8011824:	ed9f 9a8a 	vldr	s18, [pc, #552]	; 8011a50 <getMagStats.constprop.35+0x27c>
 8011828:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 801182c:	ee28 9a89 	vmul.f32	s18, s17, s18
 8011830:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011834:	f1be 0f00 	cmp.w	lr, #0
 8011838:	f000 80ee 	beq.w	8011a18 <getMagStats.constprop.35+0x244>
 801183c:	2000      	movs	r0, #0
 801183e:	4680      	mov	r8, r0
 8011840:	460f      	mov	r7, r1
 8011842:	e001      	b.n	8011848 <getMagStats.constprop.35+0x74>
 8011844:	f89a 40b1 	ldrb.w	r4, [sl, #177]	; 0xb1
 8011848:	9902      	ldr	r1, [sp, #8]
 801184a:	f8b9 6000 	ldrh.w	r6, [r9]
 801184e:	f8b9 c002 	ldrh.w	ip, [r9, #2]
 8011852:	ed97 7a04 	vldr	s14, [r7, #16]
 8011856:	ed97 5a00 	vldr	s10, [r7]
 801185a:	edd7 6a08 	vldr	s13, [r7, #32]
 801185e:	eb08 0501 	add.w	r5, r8, r1
 8011862:	fb95 f1f4 	sdiv	r1, r5, r4
 8011866:	fb04 5111 	mls	r1, r4, r1, r5
 801186a:	b2c9      	uxtb	r1, r1
 801186c:	3104      	adds	r1, #4
 801186e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8011872:	f8b1 b0b2 	ldrh.w	fp, [r1, #178]	; 0xb2
 8011876:	f8b1 50b4 	ldrh.w	r5, [r1, #180]	; 0xb4
 801187a:	f8b1 40b6 	ldrh.w	r4, [r1, #182]	; 0xb6
 801187e:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 8011882:	ebab 0606 	sub.w	r6, fp, r6
 8011886:	b236      	sxth	r6, r6
 8011888:	ee07 6a90 	vmov	s15, r6
 801188c:	eba5 050c 	sub.w	r5, r5, ip
 8011890:	b22d      	sxth	r5, r5
 8011892:	1a64      	subs	r4, r4, r1
 8011894:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8011898:	ee07 5a90 	vmov	s15, r5
 801189c:	b224      	sxth	r4, r4
 801189e:	ee06 4a10 	vmov	s12, r4
 80118a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118a6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80118aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80118ae:	ee65 5a85 	vmul.f32	s11, s11, s10
 80118b2:	ee26 7a26 	vmul.f32	s14, s12, s13
 80118b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118ba:	eefd 6ae5 	vcvt.s32.f32	s13, s11
 80118be:	ee17 4a90 	vmov	r4, s15
 80118c2:	edcd 6a00 	vstr	s13, [sp]
 80118c6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80118ca:	f9bd 1000 	ldrsh.w	r1, [sp]
 80118ce:	edcd 7a01 	vstr	s15, [sp, #4]
 80118d2:	fb14 f404 	smulbb	r4, r4, r4
 80118d6:	fb01 4401 	mla	r4, r1, r1, r4
 80118da:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80118de:	fb01 4101 	mla	r1, r1, r1, r4
 80118e2:	ee07 1a90 	vmov	s15, r1
 80118e6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80118ea:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80118ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80118f6:	f100 8084 	bmi.w	8011a02 <getMagStats.constprop.35+0x22e>
 80118fa:	f108 0801 	add.w	r8, r8, #1
 80118fe:	fa5f f888 	uxtb.w	r8, r8
 8011902:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011906:	ed92 7a00 	vldr	s14, [r2]
 801190a:	edcd 7a00 	vstr	s15, [sp]
 801190e:	f9bd 1000 	ldrsh.w	r1, [sp]
 8011912:	ee07 1a90 	vmov	s15, r1
 8011916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801191a:	ee77 6ac9 	vsub.f32	s13, s15, s18
 801191e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011922:	eeb0 7ae6 	vabs.f32	s14, s13
 8011926:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801192a:	edc2 7a00 	vstr	s15, [r2]
 801192e:	ed8d 7a00 	vstr	s14, [sp]
 8011932:	f9bd 1000 	ldrsh.w	r1, [sp]
 8011936:	ee07 1a10 	vmov	s14, r1
 801193a:	fb01 f401 	mul.w	r4, r1, r1
 801193e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011942:	ee07 4a90 	vmov	s15, r4
 8011946:	eef4 8ac7 	vcmpe.f32	s17, s14
 801194a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801194e:	ed93 7a00 	vldr	s14, [r3]
 8011952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011956:	f100 0101 	add.w	r1, r0, #1
 801195a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801195e:	bf48      	it	mi
 8011960:	b2c8      	uxtbmi	r0, r1
 8011962:	45f0      	cmp	r8, lr
 8011964:	edc3 7a00 	vstr	s15, [r3]
 8011968:	f4ff af6c 	bcc.w	8011844 <getMagStats.constprop.35+0x70>
 801196c:	f8cd e000 	str.w	lr, [sp]
 8011970:	ee07 ea10 	vmov	s14, lr
 8011974:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011978:	ee87 0a87 	vdiv.f32	s0, s15, s14
 801197c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011984:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8011988:	d44a      	bmi.n	8011a20 <getMagStats.constprop.35+0x24c>
 801198a:	eddf 7a32 	vldr	s15, [pc, #200]	; 8011a54 <getMagStats.constprop.35+0x280>
 801198e:	ee29 8a88 	vmul.f32	s16, s19, s16
 8011992:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801199a:	dc12      	bgt.n	80119c2 <getMagStats.constprop.35+0x1ee>
 801199c:	ed9d 7a00 	vldr	s14, [sp]
 80119a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80119a4:	edc3 7a00 	vstr	s15, [r3]
 80119a8:	edd2 7a00 	vldr	s15, [r2]
 80119ac:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80119b0:	eec9 7a87 	vdiv.f32	s15, s19, s14
 80119b4:	edc2 7a00 	vstr	s15, [r2]
 80119b8:	b005      	add	sp, #20
 80119ba:	ecbd 8b04 	vpop	{d8-d9}
 80119be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119c2:	eddd 7a00 	vldr	s15, [sp]
 80119c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80119ca:	edd3 7a00 	vldr	s15, [r3]
 80119ce:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80119d2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80119d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119da:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80119de:	d42a      	bmi.n	8011a36 <getMagStats.constprop.35+0x262>
 80119e0:	ee69 7a88 	vmul.f32	s15, s19, s16
 80119e4:	e7de      	b.n	80119a4 <getMagStats.constprop.35+0x1d0>
 80119e6:	3501      	adds	r5, #1
 80119e8:	fb95 f0fe 	sdiv	r0, r5, lr
 80119ec:	fb0e 5510 	mls	r5, lr, r0, r5
 80119f0:	b228      	sxth	r0, r5
 80119f2:	f8cd e000 	str.w	lr, [sp]
 80119f6:	9002      	str	r0, [sp, #8]
 80119f8:	e714      	b.n	8011824 <getMagStats.constprop.35+0x50>
 80119fa:	4420      	add	r0, r4
 80119fc:	b200      	sxth	r0, r0
 80119fe:	9002      	str	r0, [sp, #8]
 8011a00:	e710      	b.n	8011824 <getMagStats.constprop.35+0x50>
 8011a02:	9303      	str	r3, [sp, #12]
 8011a04:	e88d 0005 	stmia.w	sp, {r0, r2}
 8011a08:	f00a fe98 	bl	801c73c <sqrtf>
 8011a0c:	f89a e0b0 	ldrb.w	lr, [sl, #176]	; 0xb0
 8011a10:	9b03      	ldr	r3, [sp, #12]
 8011a12:	e89d 0005 	ldmia.w	sp, {r0, r2}
 8011a16:	e770      	b.n	80118fa <getMagStats.constprop.35+0x126>
 8011a18:	edd3 7a00 	vldr	s15, [r3]
 8011a1c:	4670      	mov	r0, lr
 8011a1e:	e7a7      	b.n	8011970 <getMagStats.constprop.35+0x19c>
 8011a20:	9303      	str	r3, [sp, #12]
 8011a22:	9202      	str	r2, [sp, #8]
 8011a24:	9001      	str	r0, [sp, #4]
 8011a26:	f00a fe89 	bl	801c73c <sqrtf>
 8011a2a:	f89a 30b0 	ldrb.w	r3, [sl, #176]	; 0xb0
 8011a2e:	9300      	str	r3, [sp, #0]
 8011a30:	a801      	add	r0, sp, #4
 8011a32:	c80d      	ldmia	r0, {r0, r2, r3}
 8011a34:	e7a9      	b.n	801198a <getMagStats.constprop.35+0x1b6>
 8011a36:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
 8011a3a:	f00a fe7f 	bl	801c73c <sqrtf>
 8011a3e:	f89a 30b0 	ldrb.w	r3, [sl, #176]	; 0xb0
 8011a42:	ee07 3a10 	vmov	s14, r3
 8011a46:	e89d 000d 	ldmia.w	sp, {r0, r2, r3}
 8011a4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011a4e:	e7c7      	b.n	80119e0 <getMagStats.constprop.35+0x20c>
 8011a50:	423c0000 	.word	0x423c0000
 8011a54:	3f59999a 	.word	0x3f59999a
 8011a58:	20001698 	.word	0x20001698

08011a5c <iNemo_setOrientation.constprop.51>:
 8011a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a60:	4a70      	ldr	r2, [pc, #448]	; (8011c24 <iNemo_setOrientation.constprop.51+0x1c8>)
 8011a62:	4b71      	ldr	r3, [pc, #452]	; (8011c28 <iNemo_setOrientation.constprop.51+0x1cc>)
 8011a64:	f892 e000 	ldrb.w	lr, [r2]
 8011a68:	f892 9004 	ldrb.w	r9, [r2, #4]
 8011a6c:	7a17      	ldrb	r7, [r2, #8]
 8011a6e:	7856      	ldrb	r6, [r2, #1]
 8011a70:	7954      	ldrb	r4, [r2, #5]
 8011a72:	7a51      	ldrb	r1, [r2, #9]
 8011a74:	7895      	ldrb	r5, [r2, #2]
 8011a76:	7990      	ldrb	r0, [r2, #6]
 8011a78:	7a92      	ldrb	r2, [r2, #10]
 8011a7a:	f1ae 0c42 	sub.w	ip, lr, #66	; 0x42
 8011a7e:	f10e 0820 	add.w	r8, lr, #32
 8011a82:	f1bc 0f17 	cmp.w	ip, #23
 8011a86:	bf88      	it	hi
 8011a88:	46f0      	movhi	r8, lr
 8011a8a:	f1a9 0a42 	sub.w	sl, r9, #66	; 0x42
 8011a8e:	f109 0c20 	add.w	ip, r9, #32
 8011a92:	f1ba 0f17 	cmp.w	sl, #23
 8011a96:	bf88      	it	hi
 8011a98:	46cc      	movhi	ip, r9
 8011a9a:	f107 0e20 	add.w	lr, r7, #32
 8011a9e:	f1a7 0a42 	sub.w	sl, r7, #66	; 0x42
 8011aa2:	f1ba 0f17 	cmp.w	sl, #23
 8011aa6:	bf88      	it	hi
 8011aa8:	46be      	movhi	lr, r7
 8011aaa:	f106 0920 	add.w	r9, r6, #32
 8011aae:	f1a6 0a42 	sub.w	sl, r6, #66	; 0x42
 8011ab2:	f1ba 0f17 	cmp.w	sl, #23
 8011ab6:	bf98      	it	ls
 8011ab8:	464e      	movls	r6, r9
 8011aba:	f104 0720 	add.w	r7, r4, #32
 8011abe:	f1a4 0a42 	sub.w	sl, r4, #66	; 0x42
 8011ac2:	f1ba 0f17 	cmp.w	sl, #23
 8011ac6:	bf98      	it	ls
 8011ac8:	463c      	movls	r4, r7
 8011aca:	f101 0920 	add.w	r9, r1, #32
 8011ace:	f1a1 0a42 	sub.w	sl, r1, #66	; 0x42
 8011ad2:	f1ba 0f17 	cmp.w	sl, #23
 8011ad6:	bf98      	it	ls
 8011ad8:	4649      	movls	r1, r9
 8011ada:	f105 0720 	add.w	r7, r5, #32
 8011ade:	f1a5 0a42 	sub.w	sl, r5, #66	; 0x42
 8011ae2:	f1ba 0f17 	cmp.w	sl, #23
 8011ae6:	bf98      	it	ls
 8011ae8:	463d      	movls	r5, r7
 8011aea:	f100 0920 	add.w	r9, r0, #32
 8011aee:	f1a0 0a42 	sub.w	sl, r0, #66	; 0x42
 8011af2:	f102 0720 	add.w	r7, r2, #32
 8011af6:	f1ba 0f17 	cmp.w	sl, #23
 8011afa:	bf98      	it	ls
 8011afc:	4648      	movls	r0, r9
 8011afe:	fa5f f888 	uxtb.w	r8, r8
 8011b02:	f1a2 0942 	sub.w	r9, r2, #66	; 0x42
 8011b06:	f1b9 0f17 	cmp.w	r9, #23
 8011b0a:	bf98      	it	ls
 8011b0c:	463a      	movls	r2, r7
 8011b0e:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
 8011b12:	2700      	movs	r7, #0
 8011b14:	fa5f fc8c 	uxtb.w	ip, ip
 8011b18:	fa5f fe8e 	uxtb.w	lr, lr
 8011b1c:	b2f6      	uxtb	r6, r6
 8011b1e:	b2e4      	uxtb	r4, r4
 8011b20:	b2c9      	uxtb	r1, r1
 8011b22:	b2ed      	uxtb	r5, r5
 8011b24:	b2c0      	uxtb	r0, r0
 8011b26:	b2d2      	uxtb	r2, r2
 8011b28:	f8c3 73d4 	str.w	r7, [r3, #980]	; 0x3d4
 8011b2c:	f883 73d8 	strb.w	r7, [r3, #984]	; 0x3d8
 8011b30:	f8c3 73d0 	str.w	r7, [r3, #976]	; 0x3d0
 8011b34:	f8c3 73dc 	str.w	r7, [r3, #988]	; 0x3dc
 8011b38:	f8c3 73e8 	str.w	r7, [r3, #1000]	; 0x3e8
 8011b3c:	f8c3 73e0 	str.w	r7, [r3, #992]	; 0x3e0
 8011b40:	f883 73e4 	strb.w	r7, [r3, #996]	; 0x3e4
 8011b44:	f8c3 73ec 	str.w	r7, [r3, #1004]	; 0x3ec
 8011b48:	f883 73f0 	strb.w	r7, [r3, #1008]	; 0x3f0
 8011b4c:	f1b8 0f13 	cmp.w	r8, #19
 8011b50:	d80e      	bhi.n	8011b70 <iNemo_setOrientation.constprop.51+0x114>
 8011b52:	e8df f008 	tbb	[pc, r8]
 8011b56:	ad0a      	.short	0xad0a
 8011b58:	0d0d0d0d 	.word	0x0d0d0d0d
 8011b5c:	0d0d0d0d 	.word	0x0d0d0d0d
 8011b60:	0d0d0db1 	.word	0x0d0d0db1
 8011b64:	b90db50d 	.word	0xb90db50d
 8011b68:	bd0d      	.short	0xbd0d
 8011b6a:	27ff      	movs	r7, #255	; 0xff
 8011b6c:	f883 73d6 	strb.w	r7, [r3, #982]	; 0x3d6
 8011b70:	3e64      	subs	r6, #100	; 0x64
 8011b72:	2e13      	cmp	r6, #19
 8011b74:	d80e      	bhi.n	8011b94 <iNemo_setOrientation.constprop.51+0x138>
 8011b76:	e8df f006 	tbb	[pc, r6]
 8011b7a:	af0a      	.short	0xaf0a
 8011b7c:	0d0d0d0d 	.word	0x0d0d0d0d
 8011b80:	0d0d0d0d 	.word	0x0d0d0d0d
 8011b84:	0d0d0db3 	.word	0x0d0d0db3
 8011b88:	bb0db70d 	.word	0xbb0db70d
 8011b8c:	bf0d      	.short	0xbf0d
 8011b8e:	26ff      	movs	r6, #255	; 0xff
 8011b90:	f883 63d7 	strb.w	r6, [r3, #983]	; 0x3d7
 8011b94:	3d64      	subs	r5, #100	; 0x64
 8011b96:	2d13      	cmp	r5, #19
 8011b98:	d80e      	bhi.n	8011bb8 <iNemo_setOrientation.constprop.51+0x15c>
 8011b9a:	e8df f005 	tbb	[pc, r5]
 8011b9e:	b10a      	.short	0xb10a
 8011ba0:	0d0d0d0d 	.word	0x0d0d0d0d
 8011ba4:	0d0d0d0d 	.word	0x0d0d0d0d
 8011ba8:	0d0d0db5 	.word	0x0d0d0db5
 8011bac:	bd0db90d 	.word	0xbd0db90d
 8011bb0:	c10d      	.short	0xc10d
 8011bb2:	25ff      	movs	r5, #255	; 0xff
 8011bb4:	f883 53d8 	strb.w	r5, [r3, #984]	; 0x3d8
 8011bb8:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 8011bbc:	f1bc 0f13 	cmp.w	ip, #19
 8011bc0:	d80e      	bhi.n	8011be0 <iNemo_setOrientation.constprop.51+0x184>
 8011bc2:	e8df f00c 	tbb	[pc, ip]
 8011bc6:	b10a      	.short	0xb10a
 8011bc8:	0d0d0d0d 	.word	0x0d0d0d0d
 8011bcc:	0d0d0d0d 	.word	0x0d0d0d0d
 8011bd0:	0d0d0db5 	.word	0x0d0d0db5
 8011bd4:	bd0db90d 	.word	0xbd0db90d
 8011bd8:	c10d      	.short	0xc10d
 8011bda:	25ff      	movs	r5, #255	; 0xff
 8011bdc:	f883 53ee 	strb.w	r5, [r3, #1006]	; 0x3ee
 8011be0:	3c64      	subs	r4, #100	; 0x64
 8011be2:	2c13      	cmp	r4, #19
 8011be4:	d80e      	bhi.n	8011c04 <iNemo_setOrientation.constprop.51+0x1a8>
 8011be6:	e8df f004 	tbb	[pc, r4]
 8011bea:	b30a      	.short	0xb30a
 8011bec:	0d0d0d0d 	.word	0x0d0d0d0d
 8011bf0:	0d0d0d0d 	.word	0x0d0d0d0d
 8011bf4:	0d0d0db7 	.word	0x0d0d0db7
 8011bf8:	bf0dbb0d 	.word	0xbf0dbb0d
 8011bfc:	c30d      	.short	0xc30d
 8011bfe:	24ff      	movs	r4, #255	; 0xff
 8011c00:	f883 43ef 	strb.w	r4, [r3, #1007]	; 0x3ef
 8011c04:	3864      	subs	r0, #100	; 0x64
 8011c06:	2813      	cmp	r0, #19
 8011c08:	d813      	bhi.n	8011c32 <iNemo_setOrientation.constprop.51+0x1d6>
 8011c0a:	e8df f000 	tbb	[pc, r0]
 8011c0e:	b50f      	.short	0xb50f
 8011c10:	12121212 	.word	0x12121212
 8011c14:	12121212 	.word	0x12121212
 8011c18:	121212b9 	.word	0x121212b9
 8011c1c:	c112bd12 	.word	0xc112bd12
 8011c20:	c512      	.short	0xc512
 8011c22:	bf00      	nop
 8011c24:	20000000 	.word	0x20000000
 8011c28:	20001698 	.word	0x20001698
 8011c2c:	20ff      	movs	r0, #255	; 0xff
 8011c2e:	f883 03f0 	strb.w	r0, [r3, #1008]	; 0x3f0
 8011c32:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 8011c36:	f1be 0f13 	cmp.w	lr, #19
 8011c3a:	d80e      	bhi.n	8011c5a <iNemo_setOrientation.constprop.51+0x1fe>
 8011c3c:	e8df f00e 	tbb	[pc, lr]
 8011c40:	0d0db00a 	.word	0x0d0db00a
 8011c44:	0d0d0d0d 	.word	0x0d0d0d0d
 8011c48:	0db40d0d 	.word	0x0db40d0d
 8011c4c:	b80d0d0d 	.word	0xb80d0d0d
 8011c50:	c00dbc0d 	.word	0xc00dbc0d
 8011c54:	20ff      	movs	r0, #255	; 0xff
 8011c56:	f883 03e2 	strb.w	r0, [r3, #994]	; 0x3e2
 8011c5a:	3964      	subs	r1, #100	; 0x64
 8011c5c:	2913      	cmp	r1, #19
 8011c5e:	d80e      	bhi.n	8011c7e <iNemo_setOrientation.constprop.51+0x222>
 8011c60:	e8df f001 	tbb	[pc, r1]
 8011c64:	0d0db20a 	.word	0x0d0db20a
 8011c68:	0d0d0d0d 	.word	0x0d0d0d0d
 8011c6c:	0db60d0d 	.word	0x0db60d0d
 8011c70:	ba0d0d0d 	.word	0xba0d0d0d
 8011c74:	c20dbe0d 	.word	0xc20dbe0d
 8011c78:	21ff      	movs	r1, #255	; 0xff
 8011c7a:	f883 13e3 	strb.w	r1, [r3, #995]	; 0x3e3
 8011c7e:	3a64      	subs	r2, #100	; 0x64
 8011c80:	2a13      	cmp	r2, #19
 8011c82:	d80e      	bhi.n	8011ca2 <iNemo_setOrientation.constprop.51+0x246>
 8011c84:	e8df f002 	tbb	[pc, r2]
 8011c88:	0d0db40a 	.word	0x0d0db40a
 8011c8c:	0d0d0d0d 	.word	0x0d0d0d0d
 8011c90:	0db90d0d 	.word	0x0db90d0d
 8011c94:	be0d0d0d 	.word	0xbe0d0d0d
 8011c98:	0f0dc30d 	.word	0x0f0dc30d
 8011c9c:	22ff      	movs	r2, #255	; 0xff
 8011c9e:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
 8011ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ca6:	22ff      	movs	r2, #255	; 0xff
 8011ca8:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
 8011cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cb0:	2701      	movs	r7, #1
 8011cb2:	f883 73d0 	strb.w	r7, [r3, #976]	; 0x3d0
 8011cb6:	e75b      	b.n	8011b70 <iNemo_setOrientation.constprop.51+0x114>
 8011cb8:	2701      	movs	r7, #1
 8011cba:	f883 73d3 	strb.w	r7, [r3, #979]	; 0x3d3
 8011cbe:	e757      	b.n	8011b70 <iNemo_setOrientation.constprop.51+0x114>
 8011cc0:	27ff      	movs	r7, #255	; 0xff
 8011cc2:	f883 73d3 	strb.w	r7, [r3, #979]	; 0x3d3
 8011cc6:	e753      	b.n	8011b70 <iNemo_setOrientation.constprop.51+0x114>
 8011cc8:	2701      	movs	r7, #1
 8011cca:	f883 73d6 	strb.w	r7, [r3, #982]	; 0x3d6
 8011cce:	e74f      	b.n	8011b70 <iNemo_setOrientation.constprop.51+0x114>
 8011cd0:	27ff      	movs	r7, #255	; 0xff
 8011cd2:	f883 73d0 	strb.w	r7, [r3, #976]	; 0x3d0
 8011cd6:	e74b      	b.n	8011b70 <iNemo_setOrientation.constprop.51+0x114>
 8011cd8:	2601      	movs	r6, #1
 8011cda:	f883 63d1 	strb.w	r6, [r3, #977]	; 0x3d1
 8011cde:	e759      	b.n	8011b94 <iNemo_setOrientation.constprop.51+0x138>
 8011ce0:	2601      	movs	r6, #1
 8011ce2:	f883 63d4 	strb.w	r6, [r3, #980]	; 0x3d4
 8011ce6:	e755      	b.n	8011b94 <iNemo_setOrientation.constprop.51+0x138>
 8011ce8:	26ff      	movs	r6, #255	; 0xff
 8011cea:	f883 63d4 	strb.w	r6, [r3, #980]	; 0x3d4
 8011cee:	e751      	b.n	8011b94 <iNemo_setOrientation.constprop.51+0x138>
 8011cf0:	2601      	movs	r6, #1
 8011cf2:	f883 63d7 	strb.w	r6, [r3, #983]	; 0x3d7
 8011cf6:	e74d      	b.n	8011b94 <iNemo_setOrientation.constprop.51+0x138>
 8011cf8:	26ff      	movs	r6, #255	; 0xff
 8011cfa:	f883 63d1 	strb.w	r6, [r3, #977]	; 0x3d1
 8011cfe:	e749      	b.n	8011b94 <iNemo_setOrientation.constprop.51+0x138>
 8011d00:	2501      	movs	r5, #1
 8011d02:	f883 53d2 	strb.w	r5, [r3, #978]	; 0x3d2
 8011d06:	e757      	b.n	8011bb8 <iNemo_setOrientation.constprop.51+0x15c>
 8011d08:	2501      	movs	r5, #1
 8011d0a:	f883 53d5 	strb.w	r5, [r3, #981]	; 0x3d5
 8011d0e:	e753      	b.n	8011bb8 <iNemo_setOrientation.constprop.51+0x15c>
 8011d10:	25ff      	movs	r5, #255	; 0xff
 8011d12:	f883 53d5 	strb.w	r5, [r3, #981]	; 0x3d5
 8011d16:	e74f      	b.n	8011bb8 <iNemo_setOrientation.constprop.51+0x15c>
 8011d18:	2501      	movs	r5, #1
 8011d1a:	f883 53d8 	strb.w	r5, [r3, #984]	; 0x3d8
 8011d1e:	e74b      	b.n	8011bb8 <iNemo_setOrientation.constprop.51+0x15c>
 8011d20:	25ff      	movs	r5, #255	; 0xff
 8011d22:	f883 53d2 	strb.w	r5, [r3, #978]	; 0x3d2
 8011d26:	e747      	b.n	8011bb8 <iNemo_setOrientation.constprop.51+0x15c>
 8011d28:	2501      	movs	r5, #1
 8011d2a:	f883 53e8 	strb.w	r5, [r3, #1000]	; 0x3e8
 8011d2e:	e757      	b.n	8011be0 <iNemo_setOrientation.constprop.51+0x184>
 8011d30:	2501      	movs	r5, #1
 8011d32:	f883 53eb 	strb.w	r5, [r3, #1003]	; 0x3eb
 8011d36:	e753      	b.n	8011be0 <iNemo_setOrientation.constprop.51+0x184>
 8011d38:	25ff      	movs	r5, #255	; 0xff
 8011d3a:	f883 53eb 	strb.w	r5, [r3, #1003]	; 0x3eb
 8011d3e:	e74f      	b.n	8011be0 <iNemo_setOrientation.constprop.51+0x184>
 8011d40:	2501      	movs	r5, #1
 8011d42:	f883 53ee 	strb.w	r5, [r3, #1006]	; 0x3ee
 8011d46:	e74b      	b.n	8011be0 <iNemo_setOrientation.constprop.51+0x184>
 8011d48:	25ff      	movs	r5, #255	; 0xff
 8011d4a:	f883 53e8 	strb.w	r5, [r3, #1000]	; 0x3e8
 8011d4e:	e747      	b.n	8011be0 <iNemo_setOrientation.constprop.51+0x184>
 8011d50:	2401      	movs	r4, #1
 8011d52:	f883 43e9 	strb.w	r4, [r3, #1001]	; 0x3e9
 8011d56:	e755      	b.n	8011c04 <iNemo_setOrientation.constprop.51+0x1a8>
 8011d58:	2401      	movs	r4, #1
 8011d5a:	f883 43ec 	strb.w	r4, [r3, #1004]	; 0x3ec
 8011d5e:	e751      	b.n	8011c04 <iNemo_setOrientation.constprop.51+0x1a8>
 8011d60:	24ff      	movs	r4, #255	; 0xff
 8011d62:	f883 43ec 	strb.w	r4, [r3, #1004]	; 0x3ec
 8011d66:	e74d      	b.n	8011c04 <iNemo_setOrientation.constprop.51+0x1a8>
 8011d68:	2401      	movs	r4, #1
 8011d6a:	f883 43ef 	strb.w	r4, [r3, #1007]	; 0x3ef
 8011d6e:	e749      	b.n	8011c04 <iNemo_setOrientation.constprop.51+0x1a8>
 8011d70:	24ff      	movs	r4, #255	; 0xff
 8011d72:	f883 43e9 	strb.w	r4, [r3, #1001]	; 0x3e9
 8011d76:	e745      	b.n	8011c04 <iNemo_setOrientation.constprop.51+0x1a8>
 8011d78:	2001      	movs	r0, #1
 8011d7a:	f883 03ea 	strb.w	r0, [r3, #1002]	; 0x3ea
 8011d7e:	e758      	b.n	8011c32 <iNemo_setOrientation.constprop.51+0x1d6>
 8011d80:	2001      	movs	r0, #1
 8011d82:	f883 03ed 	strb.w	r0, [r3, #1005]	; 0x3ed
 8011d86:	e754      	b.n	8011c32 <iNemo_setOrientation.constprop.51+0x1d6>
 8011d88:	20ff      	movs	r0, #255	; 0xff
 8011d8a:	f883 03ed 	strb.w	r0, [r3, #1005]	; 0x3ed
 8011d8e:	e750      	b.n	8011c32 <iNemo_setOrientation.constprop.51+0x1d6>
 8011d90:	2001      	movs	r0, #1
 8011d92:	f883 03f0 	strb.w	r0, [r3, #1008]	; 0x3f0
 8011d96:	e74c      	b.n	8011c32 <iNemo_setOrientation.constprop.51+0x1d6>
 8011d98:	20ff      	movs	r0, #255	; 0xff
 8011d9a:	f883 03ea 	strb.w	r0, [r3, #1002]	; 0x3ea
 8011d9e:	e748      	b.n	8011c32 <iNemo_setOrientation.constprop.51+0x1d6>
 8011da0:	2001      	movs	r0, #1
 8011da2:	f883 03dc 	strb.w	r0, [r3, #988]	; 0x3dc
 8011da6:	e758      	b.n	8011c5a <iNemo_setOrientation.constprop.51+0x1fe>
 8011da8:	2001      	movs	r0, #1
 8011daa:	f883 03df 	strb.w	r0, [r3, #991]	; 0x3df
 8011dae:	e754      	b.n	8011c5a <iNemo_setOrientation.constprop.51+0x1fe>
 8011db0:	20ff      	movs	r0, #255	; 0xff
 8011db2:	f883 03df 	strb.w	r0, [r3, #991]	; 0x3df
 8011db6:	e750      	b.n	8011c5a <iNemo_setOrientation.constprop.51+0x1fe>
 8011db8:	2001      	movs	r0, #1
 8011dba:	f883 03e2 	strb.w	r0, [r3, #994]	; 0x3e2
 8011dbe:	e74c      	b.n	8011c5a <iNemo_setOrientation.constprop.51+0x1fe>
 8011dc0:	20ff      	movs	r0, #255	; 0xff
 8011dc2:	f883 03dc 	strb.w	r0, [r3, #988]	; 0x3dc
 8011dc6:	e748      	b.n	8011c5a <iNemo_setOrientation.constprop.51+0x1fe>
 8011dc8:	2101      	movs	r1, #1
 8011dca:	f883 13dd 	strb.w	r1, [r3, #989]	; 0x3dd
 8011dce:	e756      	b.n	8011c7e <iNemo_setOrientation.constprop.51+0x222>
 8011dd0:	2101      	movs	r1, #1
 8011dd2:	f883 13e0 	strb.w	r1, [r3, #992]	; 0x3e0
 8011dd6:	e752      	b.n	8011c7e <iNemo_setOrientation.constprop.51+0x222>
 8011dd8:	21ff      	movs	r1, #255	; 0xff
 8011dda:	f883 13e0 	strb.w	r1, [r3, #992]	; 0x3e0
 8011dde:	e74e      	b.n	8011c7e <iNemo_setOrientation.constprop.51+0x222>
 8011de0:	2101      	movs	r1, #1
 8011de2:	f883 13e3 	strb.w	r1, [r3, #995]	; 0x3e3
 8011de6:	e74a      	b.n	8011c7e <iNemo_setOrientation.constprop.51+0x222>
 8011de8:	21ff      	movs	r1, #255	; 0xff
 8011dea:	f883 13dd 	strb.w	r1, [r3, #989]	; 0x3dd
 8011dee:	e746      	b.n	8011c7e <iNemo_setOrientation.constprop.51+0x222>
 8011df0:	2201      	movs	r2, #1
 8011df2:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
 8011df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dfa:	2201      	movs	r2, #1
 8011dfc:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 8011e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e04:	22ff      	movs	r2, #255	; 0xff
 8011e06:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 8011e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e0e:	2201      	movs	r2, #1
 8011e10:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
 8011e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011e18 <iNemo_setOrientation_6X.constprop.52>:
 8011e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e1c:	4a70      	ldr	r2, [pc, #448]	; (8011fe0 <iNemo_setOrientation_6X.constprop.52+0x1c8>)
 8011e1e:	4b71      	ldr	r3, [pc, #452]	; (8011fe4 <iNemo_setOrientation_6X.constprop.52+0x1cc>)
 8011e20:	f892 e000 	ldrb.w	lr, [r2]
 8011e24:	f892 9004 	ldrb.w	r9, [r2, #4]
 8011e28:	7a17      	ldrb	r7, [r2, #8]
 8011e2a:	7856      	ldrb	r6, [r2, #1]
 8011e2c:	7954      	ldrb	r4, [r2, #5]
 8011e2e:	7a51      	ldrb	r1, [r2, #9]
 8011e30:	7895      	ldrb	r5, [r2, #2]
 8011e32:	7990      	ldrb	r0, [r2, #6]
 8011e34:	7a92      	ldrb	r2, [r2, #10]
 8011e36:	f1ae 0c42 	sub.w	ip, lr, #66	; 0x42
 8011e3a:	f10e 0820 	add.w	r8, lr, #32
 8011e3e:	f1bc 0f17 	cmp.w	ip, #23
 8011e42:	bf88      	it	hi
 8011e44:	46f0      	movhi	r8, lr
 8011e46:	f1a9 0a42 	sub.w	sl, r9, #66	; 0x42
 8011e4a:	f109 0c20 	add.w	ip, r9, #32
 8011e4e:	f1ba 0f17 	cmp.w	sl, #23
 8011e52:	bf88      	it	hi
 8011e54:	46cc      	movhi	ip, r9
 8011e56:	f107 0e20 	add.w	lr, r7, #32
 8011e5a:	f1a7 0a42 	sub.w	sl, r7, #66	; 0x42
 8011e5e:	f1ba 0f17 	cmp.w	sl, #23
 8011e62:	bf88      	it	hi
 8011e64:	46be      	movhi	lr, r7
 8011e66:	f106 0920 	add.w	r9, r6, #32
 8011e6a:	f1a6 0a42 	sub.w	sl, r6, #66	; 0x42
 8011e6e:	f1ba 0f17 	cmp.w	sl, #23
 8011e72:	bf98      	it	ls
 8011e74:	464e      	movls	r6, r9
 8011e76:	f104 0720 	add.w	r7, r4, #32
 8011e7a:	f1a4 0a42 	sub.w	sl, r4, #66	; 0x42
 8011e7e:	f1ba 0f17 	cmp.w	sl, #23
 8011e82:	bf98      	it	ls
 8011e84:	463c      	movls	r4, r7
 8011e86:	f101 0920 	add.w	r9, r1, #32
 8011e8a:	f1a1 0a42 	sub.w	sl, r1, #66	; 0x42
 8011e8e:	f1ba 0f17 	cmp.w	sl, #23
 8011e92:	bf98      	it	ls
 8011e94:	4649      	movls	r1, r9
 8011e96:	f105 0720 	add.w	r7, r5, #32
 8011e9a:	f1a5 0a42 	sub.w	sl, r5, #66	; 0x42
 8011e9e:	f1ba 0f17 	cmp.w	sl, #23
 8011ea2:	bf98      	it	ls
 8011ea4:	463d      	movls	r5, r7
 8011ea6:	f100 0920 	add.w	r9, r0, #32
 8011eaa:	f1a0 0a42 	sub.w	sl, r0, #66	; 0x42
 8011eae:	f102 0720 	add.w	r7, r2, #32
 8011eb2:	f1ba 0f17 	cmp.w	sl, #23
 8011eb6:	bf98      	it	ls
 8011eb8:	4648      	movls	r0, r9
 8011eba:	fa5f f888 	uxtb.w	r8, r8
 8011ebe:	f1a2 0942 	sub.w	r9, r2, #66	; 0x42
 8011ec2:	f1b9 0f17 	cmp.w	r9, #23
 8011ec6:	bf98      	it	ls
 8011ec8:	463a      	movls	r2, r7
 8011eca:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
 8011ece:	2700      	movs	r7, #0
 8011ed0:	fa5f fc8c 	uxtb.w	ip, ip
 8011ed4:	fa5f fe8e 	uxtb.w	lr, lr
 8011ed8:	b2f6      	uxtb	r6, r6
 8011eda:	b2e4      	uxtb	r4, r4
 8011edc:	b2c9      	uxtb	r1, r1
 8011ede:	b2ed      	uxtb	r5, r5
 8011ee0:	b2c0      	uxtb	r0, r0
 8011ee2:	b2d2      	uxtb	r2, r2
 8011ee4:	f8c3 73f8 	str.w	r7, [r3, #1016]	; 0x3f8
 8011ee8:	f883 73fc 	strb.w	r7, [r3, #1020]	; 0x3fc
 8011eec:	f8c3 73f4 	str.w	r7, [r3, #1012]	; 0x3f4
 8011ef0:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
 8011ef4:	f8c3 740c 	str.w	r7, [r3, #1036]	; 0x40c
 8011ef8:	f8c3 7404 	str.w	r7, [r3, #1028]	; 0x404
 8011efc:	f883 7408 	strb.w	r7, [r3, #1032]	; 0x408
 8011f00:	f8c3 7410 	str.w	r7, [r3, #1040]	; 0x410
 8011f04:	f883 7414 	strb.w	r7, [r3, #1044]	; 0x414
 8011f08:	f1b8 0f13 	cmp.w	r8, #19
 8011f0c:	d80e      	bhi.n	8011f2c <iNemo_setOrientation_6X.constprop.52+0x114>
 8011f0e:	e8df f008 	tbb	[pc, r8]
 8011f12:	ad0a      	.short	0xad0a
 8011f14:	0d0d0d0d 	.word	0x0d0d0d0d
 8011f18:	0d0d0d0d 	.word	0x0d0d0d0d
 8011f1c:	0d0d0db1 	.word	0x0d0d0db1
 8011f20:	b90db50d 	.word	0xb90db50d
 8011f24:	bd0d      	.short	0xbd0d
 8011f26:	27ff      	movs	r7, #255	; 0xff
 8011f28:	f883 73fa 	strb.w	r7, [r3, #1018]	; 0x3fa
 8011f2c:	3e64      	subs	r6, #100	; 0x64
 8011f2e:	2e13      	cmp	r6, #19
 8011f30:	d80e      	bhi.n	8011f50 <iNemo_setOrientation_6X.constprop.52+0x138>
 8011f32:	e8df f006 	tbb	[pc, r6]
 8011f36:	af0a      	.short	0xaf0a
 8011f38:	0d0d0d0d 	.word	0x0d0d0d0d
 8011f3c:	0d0d0d0d 	.word	0x0d0d0d0d
 8011f40:	0d0d0db3 	.word	0x0d0d0db3
 8011f44:	bb0db70d 	.word	0xbb0db70d
 8011f48:	bf0d      	.short	0xbf0d
 8011f4a:	26ff      	movs	r6, #255	; 0xff
 8011f4c:	f883 63fb 	strb.w	r6, [r3, #1019]	; 0x3fb
 8011f50:	3d64      	subs	r5, #100	; 0x64
 8011f52:	2d13      	cmp	r5, #19
 8011f54:	d80e      	bhi.n	8011f74 <iNemo_setOrientation_6X.constprop.52+0x15c>
 8011f56:	e8df f005 	tbb	[pc, r5]
 8011f5a:	b10a      	.short	0xb10a
 8011f5c:	0d0d0d0d 	.word	0x0d0d0d0d
 8011f60:	0d0d0d0d 	.word	0x0d0d0d0d
 8011f64:	0d0d0db5 	.word	0x0d0d0db5
 8011f68:	bd0db90d 	.word	0xbd0db90d
 8011f6c:	c10d      	.short	0xc10d
 8011f6e:	25ff      	movs	r5, #255	; 0xff
 8011f70:	f883 53fc 	strb.w	r5, [r3, #1020]	; 0x3fc
 8011f74:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 8011f78:	f1bc 0f13 	cmp.w	ip, #19
 8011f7c:	d80e      	bhi.n	8011f9c <iNemo_setOrientation_6X.constprop.52+0x184>
 8011f7e:	e8df f00c 	tbb	[pc, ip]
 8011f82:	b10a      	.short	0xb10a
 8011f84:	0d0d0d0d 	.word	0x0d0d0d0d
 8011f88:	0d0d0d0d 	.word	0x0d0d0d0d
 8011f8c:	0d0d0db5 	.word	0x0d0d0db5
 8011f90:	bd0db90d 	.word	0xbd0db90d
 8011f94:	c10d      	.short	0xc10d
 8011f96:	25ff      	movs	r5, #255	; 0xff
 8011f98:	f883 5412 	strb.w	r5, [r3, #1042]	; 0x412
 8011f9c:	3c64      	subs	r4, #100	; 0x64
 8011f9e:	2c13      	cmp	r4, #19
 8011fa0:	d80e      	bhi.n	8011fc0 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 8011fa2:	e8df f004 	tbb	[pc, r4]
 8011fa6:	b30a      	.short	0xb30a
 8011fa8:	0d0d0d0d 	.word	0x0d0d0d0d
 8011fac:	0d0d0d0d 	.word	0x0d0d0d0d
 8011fb0:	0d0d0db7 	.word	0x0d0d0db7
 8011fb4:	bf0dbb0d 	.word	0xbf0dbb0d
 8011fb8:	c30d      	.short	0xc30d
 8011fba:	24ff      	movs	r4, #255	; 0xff
 8011fbc:	f883 4413 	strb.w	r4, [r3, #1043]	; 0x413
 8011fc0:	3864      	subs	r0, #100	; 0x64
 8011fc2:	2813      	cmp	r0, #19
 8011fc4:	d813      	bhi.n	8011fee <iNemo_setOrientation_6X.constprop.52+0x1d6>
 8011fc6:	e8df f000 	tbb	[pc, r0]
 8011fca:	b50f      	.short	0xb50f
 8011fcc:	12121212 	.word	0x12121212
 8011fd0:	12121212 	.word	0x12121212
 8011fd4:	121212b9 	.word	0x121212b9
 8011fd8:	c112bd12 	.word	0xc112bd12
 8011fdc:	c512      	.short	0xc512
 8011fde:	bf00      	nop
 8011fe0:	20000000 	.word	0x20000000
 8011fe4:	20001698 	.word	0x20001698
 8011fe8:	20ff      	movs	r0, #255	; 0xff
 8011fea:	f883 0414 	strb.w	r0, [r3, #1044]	; 0x414
 8011fee:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 8011ff2:	f1be 0f13 	cmp.w	lr, #19
 8011ff6:	d80e      	bhi.n	8012016 <iNemo_setOrientation_6X.constprop.52+0x1fe>
 8011ff8:	e8df f00e 	tbb	[pc, lr]
 8011ffc:	0d0db00a 	.word	0x0d0db00a
 8012000:	0d0d0d0d 	.word	0x0d0d0d0d
 8012004:	0db40d0d 	.word	0x0db40d0d
 8012008:	b80d0d0d 	.word	0xb80d0d0d
 801200c:	c00dbc0d 	.word	0xc00dbc0d
 8012010:	20ff      	movs	r0, #255	; 0xff
 8012012:	f883 0406 	strb.w	r0, [r3, #1030]	; 0x406
 8012016:	3964      	subs	r1, #100	; 0x64
 8012018:	2913      	cmp	r1, #19
 801201a:	d80e      	bhi.n	801203a <iNemo_setOrientation_6X.constprop.52+0x222>
 801201c:	e8df f001 	tbb	[pc, r1]
 8012020:	0d0db20a 	.word	0x0d0db20a
 8012024:	0d0d0d0d 	.word	0x0d0d0d0d
 8012028:	0db60d0d 	.word	0x0db60d0d
 801202c:	ba0d0d0d 	.word	0xba0d0d0d
 8012030:	c20dbe0d 	.word	0xc20dbe0d
 8012034:	21ff      	movs	r1, #255	; 0xff
 8012036:	f883 1407 	strb.w	r1, [r3, #1031]	; 0x407
 801203a:	3a64      	subs	r2, #100	; 0x64
 801203c:	2a13      	cmp	r2, #19
 801203e:	d80e      	bhi.n	801205e <iNemo_setOrientation_6X.constprop.52+0x246>
 8012040:	e8df f002 	tbb	[pc, r2]
 8012044:	0d0db40a 	.word	0x0d0db40a
 8012048:	0d0d0d0d 	.word	0x0d0d0d0d
 801204c:	0db90d0d 	.word	0x0db90d0d
 8012050:	be0d0d0d 	.word	0xbe0d0d0d
 8012054:	0f0dc30d 	.word	0x0f0dc30d
 8012058:	22ff      	movs	r2, #255	; 0xff
 801205a:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 801205e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012062:	22ff      	movs	r2, #255	; 0xff
 8012064:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 8012068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206c:	2701      	movs	r7, #1
 801206e:	f883 73f4 	strb.w	r7, [r3, #1012]	; 0x3f4
 8012072:	e75b      	b.n	8011f2c <iNemo_setOrientation_6X.constprop.52+0x114>
 8012074:	2701      	movs	r7, #1
 8012076:	f883 73f7 	strb.w	r7, [r3, #1015]	; 0x3f7
 801207a:	e757      	b.n	8011f2c <iNemo_setOrientation_6X.constprop.52+0x114>
 801207c:	27ff      	movs	r7, #255	; 0xff
 801207e:	f883 73f7 	strb.w	r7, [r3, #1015]	; 0x3f7
 8012082:	e753      	b.n	8011f2c <iNemo_setOrientation_6X.constprop.52+0x114>
 8012084:	2701      	movs	r7, #1
 8012086:	f883 73fa 	strb.w	r7, [r3, #1018]	; 0x3fa
 801208a:	e74f      	b.n	8011f2c <iNemo_setOrientation_6X.constprop.52+0x114>
 801208c:	27ff      	movs	r7, #255	; 0xff
 801208e:	f883 73f4 	strb.w	r7, [r3, #1012]	; 0x3f4
 8012092:	e74b      	b.n	8011f2c <iNemo_setOrientation_6X.constprop.52+0x114>
 8012094:	2601      	movs	r6, #1
 8012096:	f883 63f5 	strb.w	r6, [r3, #1013]	; 0x3f5
 801209a:	e759      	b.n	8011f50 <iNemo_setOrientation_6X.constprop.52+0x138>
 801209c:	2601      	movs	r6, #1
 801209e:	f883 63f8 	strb.w	r6, [r3, #1016]	; 0x3f8
 80120a2:	e755      	b.n	8011f50 <iNemo_setOrientation_6X.constprop.52+0x138>
 80120a4:	26ff      	movs	r6, #255	; 0xff
 80120a6:	f883 63f8 	strb.w	r6, [r3, #1016]	; 0x3f8
 80120aa:	e751      	b.n	8011f50 <iNemo_setOrientation_6X.constprop.52+0x138>
 80120ac:	2601      	movs	r6, #1
 80120ae:	f883 63fb 	strb.w	r6, [r3, #1019]	; 0x3fb
 80120b2:	e74d      	b.n	8011f50 <iNemo_setOrientation_6X.constprop.52+0x138>
 80120b4:	26ff      	movs	r6, #255	; 0xff
 80120b6:	f883 63f5 	strb.w	r6, [r3, #1013]	; 0x3f5
 80120ba:	e749      	b.n	8011f50 <iNemo_setOrientation_6X.constprop.52+0x138>
 80120bc:	2501      	movs	r5, #1
 80120be:	f883 53f6 	strb.w	r5, [r3, #1014]	; 0x3f6
 80120c2:	e757      	b.n	8011f74 <iNemo_setOrientation_6X.constprop.52+0x15c>
 80120c4:	2501      	movs	r5, #1
 80120c6:	f883 53f9 	strb.w	r5, [r3, #1017]	; 0x3f9
 80120ca:	e753      	b.n	8011f74 <iNemo_setOrientation_6X.constprop.52+0x15c>
 80120cc:	25ff      	movs	r5, #255	; 0xff
 80120ce:	f883 53f9 	strb.w	r5, [r3, #1017]	; 0x3f9
 80120d2:	e74f      	b.n	8011f74 <iNemo_setOrientation_6X.constprop.52+0x15c>
 80120d4:	2501      	movs	r5, #1
 80120d6:	f883 53fc 	strb.w	r5, [r3, #1020]	; 0x3fc
 80120da:	e74b      	b.n	8011f74 <iNemo_setOrientation_6X.constprop.52+0x15c>
 80120dc:	25ff      	movs	r5, #255	; 0xff
 80120de:	f883 53f6 	strb.w	r5, [r3, #1014]	; 0x3f6
 80120e2:	e747      	b.n	8011f74 <iNemo_setOrientation_6X.constprop.52+0x15c>
 80120e4:	2501      	movs	r5, #1
 80120e6:	f883 540c 	strb.w	r5, [r3, #1036]	; 0x40c
 80120ea:	e757      	b.n	8011f9c <iNemo_setOrientation_6X.constprop.52+0x184>
 80120ec:	2501      	movs	r5, #1
 80120ee:	f883 540f 	strb.w	r5, [r3, #1039]	; 0x40f
 80120f2:	e753      	b.n	8011f9c <iNemo_setOrientation_6X.constprop.52+0x184>
 80120f4:	25ff      	movs	r5, #255	; 0xff
 80120f6:	f883 540f 	strb.w	r5, [r3, #1039]	; 0x40f
 80120fa:	e74f      	b.n	8011f9c <iNemo_setOrientation_6X.constprop.52+0x184>
 80120fc:	2501      	movs	r5, #1
 80120fe:	f883 5412 	strb.w	r5, [r3, #1042]	; 0x412
 8012102:	e74b      	b.n	8011f9c <iNemo_setOrientation_6X.constprop.52+0x184>
 8012104:	25ff      	movs	r5, #255	; 0xff
 8012106:	f883 540c 	strb.w	r5, [r3, #1036]	; 0x40c
 801210a:	e747      	b.n	8011f9c <iNemo_setOrientation_6X.constprop.52+0x184>
 801210c:	2401      	movs	r4, #1
 801210e:	f883 440d 	strb.w	r4, [r3, #1037]	; 0x40d
 8012112:	e755      	b.n	8011fc0 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 8012114:	2401      	movs	r4, #1
 8012116:	f883 4410 	strb.w	r4, [r3, #1040]	; 0x410
 801211a:	e751      	b.n	8011fc0 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 801211c:	24ff      	movs	r4, #255	; 0xff
 801211e:	f883 4410 	strb.w	r4, [r3, #1040]	; 0x410
 8012122:	e74d      	b.n	8011fc0 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 8012124:	2401      	movs	r4, #1
 8012126:	f883 4413 	strb.w	r4, [r3, #1043]	; 0x413
 801212a:	e749      	b.n	8011fc0 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 801212c:	24ff      	movs	r4, #255	; 0xff
 801212e:	f883 440d 	strb.w	r4, [r3, #1037]	; 0x40d
 8012132:	e745      	b.n	8011fc0 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 8012134:	2001      	movs	r0, #1
 8012136:	f883 040e 	strb.w	r0, [r3, #1038]	; 0x40e
 801213a:	e758      	b.n	8011fee <iNemo_setOrientation_6X.constprop.52+0x1d6>
 801213c:	2001      	movs	r0, #1
 801213e:	f883 0411 	strb.w	r0, [r3, #1041]	; 0x411
 8012142:	e754      	b.n	8011fee <iNemo_setOrientation_6X.constprop.52+0x1d6>
 8012144:	20ff      	movs	r0, #255	; 0xff
 8012146:	f883 0411 	strb.w	r0, [r3, #1041]	; 0x411
 801214a:	e750      	b.n	8011fee <iNemo_setOrientation_6X.constprop.52+0x1d6>
 801214c:	2001      	movs	r0, #1
 801214e:	f883 0414 	strb.w	r0, [r3, #1044]	; 0x414
 8012152:	e74c      	b.n	8011fee <iNemo_setOrientation_6X.constprop.52+0x1d6>
 8012154:	20ff      	movs	r0, #255	; 0xff
 8012156:	f883 040e 	strb.w	r0, [r3, #1038]	; 0x40e
 801215a:	e748      	b.n	8011fee <iNemo_setOrientation_6X.constprop.52+0x1d6>
 801215c:	2001      	movs	r0, #1
 801215e:	f883 0400 	strb.w	r0, [r3, #1024]	; 0x400
 8012162:	e758      	b.n	8012016 <iNemo_setOrientation_6X.constprop.52+0x1fe>
 8012164:	2001      	movs	r0, #1
 8012166:	f883 0403 	strb.w	r0, [r3, #1027]	; 0x403
 801216a:	e754      	b.n	8012016 <iNemo_setOrientation_6X.constprop.52+0x1fe>
 801216c:	20ff      	movs	r0, #255	; 0xff
 801216e:	f883 0403 	strb.w	r0, [r3, #1027]	; 0x403
 8012172:	e750      	b.n	8012016 <iNemo_setOrientation_6X.constprop.52+0x1fe>
 8012174:	2001      	movs	r0, #1
 8012176:	f883 0406 	strb.w	r0, [r3, #1030]	; 0x406
 801217a:	e74c      	b.n	8012016 <iNemo_setOrientation_6X.constprop.52+0x1fe>
 801217c:	20ff      	movs	r0, #255	; 0xff
 801217e:	f883 0400 	strb.w	r0, [r3, #1024]	; 0x400
 8012182:	e748      	b.n	8012016 <iNemo_setOrientation_6X.constprop.52+0x1fe>
 8012184:	2101      	movs	r1, #1
 8012186:	f883 1401 	strb.w	r1, [r3, #1025]	; 0x401
 801218a:	e756      	b.n	801203a <iNemo_setOrientation_6X.constprop.52+0x222>
 801218c:	2101      	movs	r1, #1
 801218e:	f883 1404 	strb.w	r1, [r3, #1028]	; 0x404
 8012192:	e752      	b.n	801203a <iNemo_setOrientation_6X.constprop.52+0x222>
 8012194:	21ff      	movs	r1, #255	; 0xff
 8012196:	f883 1404 	strb.w	r1, [r3, #1028]	; 0x404
 801219a:	e74e      	b.n	801203a <iNemo_setOrientation_6X.constprop.52+0x222>
 801219c:	2101      	movs	r1, #1
 801219e:	f883 1407 	strb.w	r1, [r3, #1031]	; 0x407
 80121a2:	e74a      	b.n	801203a <iNemo_setOrientation_6X.constprop.52+0x222>
 80121a4:	21ff      	movs	r1, #255	; 0xff
 80121a6:	f883 1401 	strb.w	r1, [r3, #1025]	; 0x401
 80121aa:	e746      	b.n	801203a <iNemo_setOrientation_6X.constprop.52+0x222>
 80121ac:	2201      	movs	r2, #1
 80121ae:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 80121b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121b6:	2201      	movs	r2, #1
 80121b8:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 80121bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121c0:	22ff      	movs	r2, #255	; 0xff
 80121c2:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 80121c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ca:	2201      	movs	r2, #1
 80121cc:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 80121d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080121d4 <MEMS_updateMagBufferIndex.constprop.33>:
 80121d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121d8:	4e91      	ldr	r6, [pc, #580]	; (8012420 <MEMS_updateMagBufferIndex.constprop.33+0x24c>)
 80121da:	ed2d 8b02 	vpush	{d8}
 80121de:	f896 30b0 	ldrb.w	r3, [r6, #176]	; 0xb0
 80121e2:	f896 80b1 	ldrb.w	r8, [r6, #177]	; 0xb1
 80121e6:	f996 20b2 	ldrsb.w	r2, [r6, #178]	; 0xb2
 80121ea:	b08f      	sub	sp, #60	; 0x3c
 80121ec:	4619      	mov	r1, r3
 80121ee:	9301      	str	r3, [sp, #4]
 80121f0:	4541      	cmp	r1, r8
 80121f2:	f04f 0300 	mov.w	r3, #0
 80121f6:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
 80121fa:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
 80121fe:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
 8012202:	f8c6 30c4 	str.w	r3, [r6, #196]	; 0xc4
 8012206:	f8c6 30cc 	str.w	r3, [r6, #204]	; 0xcc
 801220a:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
 801220e:	f000 80f2 	beq.w	80123f6 <MEMS_updateMagBufferIndex.constprop.33+0x222>
 8012212:	1c53      	adds	r3, r2, #1
 8012214:	9a01      	ldr	r2, [sp, #4]
 8012216:	1a9b      	subs	r3, r3, r2
 8012218:	fb93 f2f8 	sdiv	r2, r3, r8
 801221c:	fb08 3312 	mls	r3, r8, r2, r3
 8012220:	b21a      	sxth	r2, r3
 8012222:	2a00      	cmp	r2, #0
 8012224:	9202      	str	r2, [sp, #8]
 8012226:	f2c0 80ee 	blt.w	8012406 <MEMS_updateMagBufferIndex.constprop.33+0x232>
 801222a:	9b01      	ldr	r3, [sp, #4]
 801222c:	b93b      	cbnz	r3, 801223e <MEMS_updateMagBufferIndex.constprop.33+0x6a>
 801222e:	23ff      	movs	r3, #255	; 0xff
 8012230:	f886 30b2 	strb.w	r3, [r6, #178]	; 0xb2
 8012234:	b00f      	add	sp, #60	; 0x3c
 8012236:	ecbd 8b02 	vpop	{d8}
 801223a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801223e:	2500      	movs	r5, #0
 8012240:	eeb0 8a40 	vmov.f32	s16, s0
 8012244:	4682      	mov	sl, r0
 8012246:	9508      	str	r5, [sp, #32]
 8012248:	46a9      	mov	r9, r5
 801224a:	950d      	str	r5, [sp, #52]	; 0x34
 801224c:	9507      	str	r5, [sp, #28]
 801224e:	950a      	str	r5, [sp, #40]	; 0x28
 8012250:	9503      	str	r5, [sp, #12]
 8012252:	950b      	str	r5, [sp, #44]	; 0x2c
 8012254:	9504      	str	r5, [sp, #16]
 8012256:	950c      	str	r5, [sp, #48]	; 0x30
 8012258:	9505      	str	r5, [sp, #20]
 801225a:	9509      	str	r5, [sp, #36]	; 0x24
 801225c:	9506      	str	r5, [sp, #24]
 801225e:	2701      	movs	r7, #1
 8012260:	9b02      	ldr	r3, [sp, #8]
 8012262:	1959      	adds	r1, r3, r5
 8012264:	fb91 f3f8 	sdiv	r3, r1, r8
 8012268:	fb08 1313 	mls	r3, r8, r3, r1
 801226c:	b2db      	uxtb	r3, r3
 801226e:	f103 0b04 	add.w	fp, r3, #4
 8012272:	eb06 01cb 	add.w	r1, r6, fp, lsl #3
 8012276:	f9b1 00b2 	ldrsh.w	r0, [r1, #178]	; 0xb2
 801227a:	fb90 f1fa 	sdiv	r1, r0, sl
 801227e:	fb0a 0111 	mls	r1, sl, r1, r0
 8012282:	2900      	cmp	r1, #0
 8012284:	bfb8      	it	lt
 8012286:	4451      	addlt	r1, sl
 8012288:	b20b      	sxth	r3, r1
 801228a:	ee00 3a10 	vmov	s0, r3
 801228e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8012292:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8012296:	f009 ff3d 	bl	801c114 <roundf>
 801229a:	eb06 01cb 	add.w	r1, r6, fp, lsl #3
 801229e:	f9b1 00b4 	ldrsh.w	r0, [r1, #180]	; 0xb4
 80122a2:	fb90 f1fa 	sdiv	r1, r0, sl
 80122a6:	fb0a 0111 	mls	r1, sl, r1, r0
 80122aa:	2900      	cmp	r1, #0
 80122ac:	bfb8      	it	lt
 80122ae:	4451      	addlt	r1, sl
 80122b0:	b20b      	sxth	r3, r1
 80122b2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80122b6:	ee00 3a10 	vmov	s0, r3
 80122ba:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80122be:	edcd 7a00 	vstr	s15, [sp]
 80122c2:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80122c6:	f009 ff25 	bl	801c114 <roundf>
 80122ca:	eb06 03cb 	add.w	r3, r6, fp, lsl #3
 80122ce:	f89d 4000 	ldrb.w	r4, [sp]
 80122d2:	f9b3 10b6 	ldrsh.w	r1, [r3, #182]	; 0xb6
 80122d6:	fb91 f3fa 	sdiv	r3, r1, sl
 80122da:	fb0a 1313 	mls	r3, sl, r3, r1
 80122de:	2b00      	cmp	r3, #0
 80122e0:	bfb8      	it	lt
 80122e2:	4453      	addlt	r3, sl
 80122e4:	b21b      	sxth	r3, r3
 80122e6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80122ea:	ee00 3a10 	vmov	s0, r3
 80122ee:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80122f2:	edcd 7a00 	vstr	s15, [sp]
 80122f6:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80122fa:	f009 ff0b 	bl	801c114 <roundf>
 80122fe:	f89d b000 	ldrb.w	fp, [sp]
 8012302:	2c1f      	cmp	r4, #31
 8012304:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012308:	edcd 7a00 	vstr	s15, [sp]
 801230c:	f89d 3000 	ldrb.w	r3, [sp]
 8012310:	d966      	bls.n	80123e0 <MEMS_updateMagBufferIndex.constprop.33+0x20c>
 8012312:	9906      	ldr	r1, [sp, #24]
 8012314:	3c20      	subs	r4, #32
 8012316:	fa07 f404 	lsl.w	r4, r7, r4
 801231a:	460a      	mov	r2, r1
 801231c:	ea24 0401 	bic.w	r4, r4, r1
 8012320:	4062      	eors	r2, r4
 8012322:	9206      	str	r2, [sp, #24]
 8012324:	2201      	movs	r2, #1
 8012326:	9209      	str	r2, [sp, #36]	; 0x24
 8012328:	f1bb 0f1f 	cmp.w	fp, #31
 801232c:	d939      	bls.n	80123a2 <MEMS_updateMagBufferIndex.constprop.33+0x1ce>
 801232e:	9804      	ldr	r0, [sp, #16]
 8012330:	f1ab 0120 	sub.w	r1, fp, #32
 8012334:	fa07 f101 	lsl.w	r1, r7, r1
 8012338:	4602      	mov	r2, r0
 801233a:	ea21 0100 	bic.w	r1, r1, r0
 801233e:	404a      	eors	r2, r1
 8012340:	9204      	str	r2, [sp, #16]
 8012342:	2b1f      	cmp	r3, #31
 8012344:	f04f 0201 	mov.w	r2, #1
 8012348:	920b      	str	r2, [sp, #44]	; 0x2c
 801234a:	d837      	bhi.n	80123bc <MEMS_updateMagBufferIndex.constprop.33+0x1e8>
 801234c:	fa07 f303 	lsl.w	r3, r7, r3
 8012350:	ea23 0309 	bic.w	r3, r3, r9
 8012354:	3501      	adds	r5, #1
 8012356:	ea89 0903 	eor.w	r9, r9, r3
 801235a:	9b01      	ldr	r3, [sp, #4]
 801235c:	b2e9      	uxtb	r1, r5
 801235e:	428b      	cmp	r3, r1
 8012360:	f04f 0301 	mov.w	r3, #1
 8012364:	9308      	str	r3, [sp, #32]
 8012366:	f63f af7b 	bhi.w	8012260 <MEMS_updateMagBufferIndex.constprop.33+0x8c>
 801236a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801236c:	2b00      	cmp	r3, #0
 801236e:	d14e      	bne.n	801240e <MEMS_updateMagBufferIndex.constprop.33+0x23a>
 8012370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012372:	2b00      	cmp	r3, #0
 8012374:	d14f      	bne.n	8012416 <MEMS_updateMagBufferIndex.constprop.33+0x242>
 8012376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012378:	b113      	cbz	r3, 8012380 <MEMS_updateMagBufferIndex.constprop.33+0x1ac>
 801237a:	9b04      	ldr	r3, [sp, #16]
 801237c:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
 8012380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012382:	b113      	cbz	r3, 801238a <MEMS_updateMagBufferIndex.constprop.33+0x1b6>
 8012384:	9b03      	ldr	r3, [sp, #12]
 8012386:	f8c6 30c4 	str.w	r3, [r6, #196]	; 0xc4
 801238a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801238c:	b113      	cbz	r3, 8012394 <MEMS_updateMagBufferIndex.constprop.33+0x1c0>
 801238e:	9b07      	ldr	r3, [sp, #28]
 8012390:	f8c6 30cc 	str.w	r3, [r6, #204]	; 0xcc
 8012394:	9b08      	ldr	r3, [sp, #32]
 8012396:	2b00      	cmp	r3, #0
 8012398:	f43f af4c 	beq.w	8012234 <MEMS_updateMagBufferIndex.constprop.33+0x60>
 801239c:	f8c6 90c8 	str.w	r9, [r6, #200]	; 0xc8
 80123a0:	e748      	b.n	8012234 <MEMS_updateMagBufferIndex.constprop.33+0x60>
 80123a2:	9803      	ldr	r0, [sp, #12]
 80123a4:	fa07 f10b 	lsl.w	r1, r7, fp
 80123a8:	4602      	mov	r2, r0
 80123aa:	ea21 0100 	bic.w	r1, r1, r0
 80123ae:	404a      	eors	r2, r1
 80123b0:	9203      	str	r2, [sp, #12]
 80123b2:	2b1f      	cmp	r3, #31
 80123b4:	f04f 0201 	mov.w	r2, #1
 80123b8:	920a      	str	r2, [sp, #40]	; 0x28
 80123ba:	d9c7      	bls.n	801234c <MEMS_updateMagBufferIndex.constprop.33+0x178>
 80123bc:	9807      	ldr	r0, [sp, #28]
 80123be:	3b20      	subs	r3, #32
 80123c0:	fa07 f303 	lsl.w	r3, r7, r3
 80123c4:	ea23 0300 	bic.w	r3, r3, r0
 80123c8:	4043      	eors	r3, r0
 80123ca:	3501      	adds	r5, #1
 80123cc:	9307      	str	r3, [sp, #28]
 80123ce:	9b01      	ldr	r3, [sp, #4]
 80123d0:	b2e9      	uxtb	r1, r5
 80123d2:	428b      	cmp	r3, r1
 80123d4:	f04f 0301 	mov.w	r3, #1
 80123d8:	930d      	str	r3, [sp, #52]	; 0x34
 80123da:	f63f af41 	bhi.w	8012260 <MEMS_updateMagBufferIndex.constprop.33+0x8c>
 80123de:	e7c4      	b.n	801236a <MEMS_updateMagBufferIndex.constprop.33+0x196>
 80123e0:	9905      	ldr	r1, [sp, #20]
 80123e2:	fa07 f404 	lsl.w	r4, r7, r4
 80123e6:	460a      	mov	r2, r1
 80123e8:	ea24 0401 	bic.w	r4, r4, r1
 80123ec:	4062      	eors	r2, r4
 80123ee:	9205      	str	r2, [sp, #20]
 80123f0:	2201      	movs	r2, #1
 80123f2:	920c      	str	r2, [sp, #48]	; 0x30
 80123f4:	e798      	b.n	8012328 <MEMS_updateMagBufferIndex.constprop.33+0x154>
 80123f6:	3201      	adds	r2, #1
 80123f8:	fb92 f3f1 	sdiv	r3, r2, r1
 80123fc:	fb01 2213 	mls	r2, r1, r3, r2
 8012400:	b213      	sxth	r3, r2
 8012402:	9302      	str	r3, [sp, #8]
 8012404:	e711      	b.n	801222a <MEMS_updateMagBufferIndex.constprop.33+0x56>
 8012406:	4443      	add	r3, r8
 8012408:	b21b      	sxth	r3, r3
 801240a:	9302      	str	r3, [sp, #8]
 801240c:	e70d      	b.n	801222a <MEMS_updateMagBufferIndex.constprop.33+0x56>
 801240e:	9b06      	ldr	r3, [sp, #24]
 8012410:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
 8012414:	e7ac      	b.n	8012370 <MEMS_updateMagBufferIndex.constprop.33+0x19c>
 8012416:	9b05      	ldr	r3, [sp, #20]
 8012418:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
 801241c:	e7ab      	b.n	8012376 <MEMS_updateMagBufferIndex.constprop.33+0x1a2>
 801241e:	bf00      	nop
 8012420:	20001698 	.word	0x20001698
 8012424:	00000000 	.word	0x00000000

08012428 <iNemo_quat2heading>:
 8012428:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 801242c:	ed2d 8b08 	vpush	{d8-d11}
 8012430:	460e      	mov	r6, r1
 8012432:	b082      	sub	sp, #8
 8012434:	2b00      	cmp	r3, #0
 8012436:	d15d      	bne.n	80124f4 <iNemo_quat2heading+0xcc>
 8012438:	edd2 6a00 	vldr	s13, [r2]
 801243c:	ed92 7a01 	vldr	s14, [r2, #4]
 8012440:	4dd5      	ldr	r5, [pc, #852]	; (8012798 <iNemo_quat2heading+0x370>)
 8012442:	edd2 7a02 	vldr	s15, [r2, #8]
 8012446:	edd0 8a00 	vldr	s17, [r0]
 801244a:	f8d5 4418 	ldr.w	r4, [r5, #1048]	; 0x418
 801244e:	edd0 9a01 	vldr	s19, [r0, #4]
 8012452:	ed90 8a02 	vldr	s16, [r0, #8]
 8012456:	ed90 aa03 	vldr	s20, [r0, #12]
 801245a:	eef0 aae6 	vabs.f32	s21, s13
 801245e:	eeb0 9ac7 	vabs.f32	s18, s14
 8012462:	eef4 aac9 	vcmpe.f32	s21, s18
 8012466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801246a:	eeb0 bae7 	vabs.f32	s22, s15
 801246e:	f340 8098 	ble.w	80125a2 <iNemo_quat2heading+0x17a>
 8012472:	eef4 aacb 	vcmpe.f32	s21, s22
 8012476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801247a:	f340 8092 	ble.w	80125a2 <iNemo_quat2heading+0x17a>
 801247e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8012482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012486:	ee1a 0a90 	vmov	r0, s21
 801248a:	f340 818d 	ble.w	80127a8 <iNemo_quat2heading+0x380>
 801248e:	f7ee f863 	bl	8000558 <__aeabi_f2d>
 8012492:	4680      	mov	r8, r0
 8012494:	ee19 0a10 	vmov	r0, s18
 8012498:	4689      	mov	r9, r1
 801249a:	f7ee f85d 	bl	8000558 <__aeabi_f2d>
 801249e:	a3ba      	add	r3, pc, #744	; (adr r3, 8012788 <iNemo_quat2heading+0x360>)
 80124a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a4:	f7ee f8ac 	bl	8000600 <__aeabi_dmul>
 80124a8:	4602      	mov	r2, r0
 80124aa:	460b      	mov	r3, r1
 80124ac:	4640      	mov	r0, r8
 80124ae:	4649      	mov	r1, r9
 80124b0:	f7ee fb36 	bl	8000b20 <__aeabi_dcmpgt>
 80124b4:	b188      	cbz	r0, 80124da <iNemo_quat2heading+0xb2>
 80124b6:	ee1b 0a10 	vmov	r0, s22
 80124ba:	f7ee f84d 	bl	8000558 <__aeabi_f2d>
 80124be:	a3b2      	add	r3, pc, #712	; (adr r3, 8012788 <iNemo_quat2heading+0x360>)
 80124c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c4:	f7ee f89c 	bl	8000600 <__aeabi_dmul>
 80124c8:	4602      	mov	r2, r0
 80124ca:	460b      	mov	r3, r1
 80124cc:	4640      	mov	r0, r8
 80124ce:	4649      	mov	r1, r9
 80124d0:	f7ee fb26 	bl	8000b20 <__aeabi_dcmpgt>
 80124d4:	2800      	cmp	r0, #0
 80124d6:	bf18      	it	ne
 80124d8:	2404      	movne	r4, #4
 80124da:	f8c5 4418 	str.w	r4, [r5, #1048]	; 0x418
 80124de:	2c05      	cmp	r4, #5
 80124e0:	f200 81b4 	bhi.w	801284c <iNemo_quat2heading+0x424>
 80124e4:	e8df f014 	tbh	[pc, r4, lsl #1]
 80124e8:	00e300e0 	.word	0x00e300e0
 80124ec:	011900c3 	.word	0x011900c3
 80124f0:	00e000c3 	.word	0x00e000c3
 80124f4:	edd2 6a01 	vldr	s13, [r2, #4]
 80124f8:	ed92 7a00 	vldr	s14, [r2]
 80124fc:	ed90 8a02 	vldr	s16, [r0, #8]
 8012500:	4da5      	ldr	r5, [pc, #660]	; (8012798 <iNemo_quat2heading+0x370>)
 8012502:	edd2 7a02 	vldr	s15, [r2, #8]
 8012506:	edd0 8a01 	vldr	s17, [r0, #4]
 801250a:	f8d5 4418 	ldr.w	r4, [r5, #1048]	; 0x418
 801250e:	edd0 9a00 	vldr	s19, [r0]
 8012512:	ed90 aa03 	vldr	s20, [r0, #12]
 8012516:	eef0 aae6 	vabs.f32	s21, s13
 801251a:	eeb0 9ac7 	vabs.f32	s18, s14
 801251e:	eef4 aac9 	vcmpe.f32	s21, s18
 8012522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012526:	eeb1 8a48 	vneg.f32	s16, s16
 801252a:	eeb0 bae7 	vabs.f32	s22, s15
 801252e:	dd04      	ble.n	801253a <iNemo_quat2heading+0x112>
 8012530:	eef4 aacb 	vcmpe.f32	s21, s22
 8012534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012538:	dca1      	bgt.n	801247e <iNemo_quat2heading+0x56>
 801253a:	eeb4 9acb 	vcmpe.f32	s18, s22
 801253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012542:	dc63      	bgt.n	801260c <iNemo_quat2heading+0x1e4>
 8012544:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801254c:	ee1b 0a10 	vmov	r0, s22
 8012550:	d433      	bmi.n	80125ba <iNemo_quat2heading+0x192>
 8012552:	f7ee f801 	bl	8000558 <__aeabi_f2d>
 8012556:	4680      	mov	r8, r0
 8012558:	ee19 0a10 	vmov	r0, s18
 801255c:	4689      	mov	r9, r1
 801255e:	f7ed fffb 	bl	8000558 <__aeabi_f2d>
 8012562:	a389      	add	r3, pc, #548	; (adr r3, 8012788 <iNemo_quat2heading+0x360>)
 8012564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012568:	f7ee f84a 	bl	8000600 <__aeabi_dmul>
 801256c:	4602      	mov	r2, r0
 801256e:	460b      	mov	r3, r1
 8012570:	4640      	mov	r0, r8
 8012572:	4649      	mov	r1, r9
 8012574:	f7ee fad4 	bl	8000b20 <__aeabi_dcmpgt>
 8012578:	2800      	cmp	r0, #0
 801257a:	d0ae      	beq.n	80124da <iNemo_quat2heading+0xb2>
 801257c:	ee1a 0a90 	vmov	r0, s21
 8012580:	f7ed ffea 	bl	8000558 <__aeabi_f2d>
 8012584:	a380      	add	r3, pc, #512	; (adr r3, 8012788 <iNemo_quat2heading+0x360>)
 8012586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801258a:	f7ee f839 	bl	8000600 <__aeabi_dmul>
 801258e:	4602      	mov	r2, r0
 8012590:	460b      	mov	r3, r1
 8012592:	4640      	mov	r0, r8
 8012594:	4649      	mov	r1, r9
 8012596:	f7ee fac3 	bl	8000b20 <__aeabi_dcmpgt>
 801259a:	2800      	cmp	r0, #0
 801259c:	bf18      	it	ne
 801259e:	2402      	movne	r4, #2
 80125a0:	e79b      	b.n	80124da <iNemo_quat2heading+0xb2>
 80125a2:	eeb4 9acb 	vcmpe.f32	s18, s22
 80125a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125aa:	dc2f      	bgt.n	801260c <iNemo_quat2heading+0x1e4>
 80125ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80125b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b4:	ee1b 0a10 	vmov	r0, s22
 80125b8:	ddcb      	ble.n	8012552 <iNemo_quat2heading+0x12a>
 80125ba:	f7ed ffcd 	bl	8000558 <__aeabi_f2d>
 80125be:	4680      	mov	r8, r0
 80125c0:	ee19 0a10 	vmov	r0, s18
 80125c4:	4689      	mov	r9, r1
 80125c6:	f7ed ffc7 	bl	8000558 <__aeabi_f2d>
 80125ca:	a36f      	add	r3, pc, #444	; (adr r3, 8012788 <iNemo_quat2heading+0x360>)
 80125cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d0:	f7ee f816 	bl	8000600 <__aeabi_dmul>
 80125d4:	4602      	mov	r2, r0
 80125d6:	460b      	mov	r3, r1
 80125d8:	4640      	mov	r0, r8
 80125da:	4649      	mov	r1, r9
 80125dc:	f7ee faa0 	bl	8000b20 <__aeabi_dcmpgt>
 80125e0:	2800      	cmp	r0, #0
 80125e2:	f43f af7a 	beq.w	80124da <iNemo_quat2heading+0xb2>
 80125e6:	ee1a 0a90 	vmov	r0, s21
 80125ea:	f7ed ffb5 	bl	8000558 <__aeabi_f2d>
 80125ee:	a366      	add	r3, pc, #408	; (adr r3, 8012788 <iNemo_quat2heading+0x360>)
 80125f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f4:	f7ee f804 	bl	8000600 <__aeabi_dmul>
 80125f8:	4602      	mov	r2, r0
 80125fa:	460b      	mov	r3, r1
 80125fc:	4640      	mov	r0, r8
 80125fe:	4649      	mov	r1, r9
 8012600:	f7ee fa8e 	bl	8000b20 <__aeabi_dcmpgt>
 8012604:	2800      	cmp	r0, #0
 8012606:	bf18      	it	ne
 8012608:	2400      	movne	r4, #0
 801260a:	e766      	b.n	80124da <iNemo_quat2heading+0xb2>
 801260c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012614:	ee19 0a10 	vmov	r0, s18
 8012618:	f340 80ef 	ble.w	80127fa <iNemo_quat2heading+0x3d2>
 801261c:	f7ed ff9c 	bl	8000558 <__aeabi_f2d>
 8012620:	4680      	mov	r8, r0
 8012622:	ee1a 0a90 	vmov	r0, s21
 8012626:	4689      	mov	r9, r1
 8012628:	f7ed ff96 	bl	8000558 <__aeabi_f2d>
 801262c:	a356      	add	r3, pc, #344	; (adr r3, 8012788 <iNemo_quat2heading+0x360>)
 801262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012632:	f7ed ffe5 	bl	8000600 <__aeabi_dmul>
 8012636:	4602      	mov	r2, r0
 8012638:	460b      	mov	r3, r1
 801263a:	4640      	mov	r0, r8
 801263c:	4649      	mov	r1, r9
 801263e:	f7ee fa6f 	bl	8000b20 <__aeabi_dcmpgt>
 8012642:	2800      	cmp	r0, #0
 8012644:	f43f af49 	beq.w	80124da <iNemo_quat2heading+0xb2>
 8012648:	ee1b 0a10 	vmov	r0, s22
 801264c:	f7ed ff84 	bl	8000558 <__aeabi_f2d>
 8012650:	a34d      	add	r3, pc, #308	; (adr r3, 8012788 <iNemo_quat2heading+0x360>)
 8012652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012656:	f7ed ffd3 	bl	8000600 <__aeabi_dmul>
 801265a:	4602      	mov	r2, r0
 801265c:	460b      	mov	r3, r1
 801265e:	4640      	mov	r0, r8
 8012660:	4649      	mov	r1, r9
 8012662:	f7ee fa5d 	bl	8000b20 <__aeabi_dcmpgt>
 8012666:	2800      	cmp	r0, #0
 8012668:	bf18      	it	ne
 801266a:	2401      	movne	r4, #1
 801266c:	e735      	b.n	80124da <iNemo_quat2heading+0xb2>
 801266e:	ed96 0a00 	vldr	s0, [r6]
 8012672:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801279c <iNemo_quat2heading+0x374>
 8012676:	ee30 0a27 	vadd.f32	s0, s0, s15
 801267a:	eddf 7a49 	vldr	s15, [pc, #292]	; 80127a0 <iNemo_quat2heading+0x378>
 801267e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012686:	bfa8      	it	ge
 8012688:	ee30 0a67 	vsubge.f32	s0, s0, s15
 801268c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012694:	d503      	bpl.n	801269e <iNemo_quat2heading+0x276>
 8012696:	eddf 7a42 	vldr	s15, [pc, #264]	; 80127a0 <iNemo_quat2heading+0x378>
 801269a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801269e:	b002      	add	sp, #8
 80126a0:	ecbd 8b08 	vpop	{d8-d11}
 80126a4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80126a8:	ed96 0a00 	vldr	s0, [r6]
 80126ac:	e7e5      	b.n	801267a <iNemo_quat2heading+0x252>
 80126ae:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80126b2:	ee29 7aa9 	vmul.f32	s14, s19, s19
 80126b6:	ee68 6a08 	vmul.f32	s13, s16, s16
 80126ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80126be:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 80126c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80126c6:	ee69 8aa8 	vmul.f32	s17, s19, s17
 80126ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80126ce:	ee2a 8a08 	vmul.f32	s16, s20, s16
 80126d2:	ee17 0a90 	vmov	r0, s15
 80126d6:	ee38 8a88 	vadd.f32	s16, s17, s16
 80126da:	f7ed ff3d 	bl	8000558 <__aeabi_f2d>
 80126de:	ee78 7a08 	vadd.f32	s15, s16, s16
 80126e2:	e9cd 0100 	strd	r0, r1, [sp]
 80126e6:	ee17 0a90 	vmov	r0, s15
 80126ea:	f7ed ff35 	bl	8000558 <__aeabi_f2d>
 80126ee:	ed9d 1b00 	vldr	d1, [sp]
 80126f2:	ec41 0b10 	vmov	d0, r0, r1
 80126f6:	f009 fdf5 	bl	801c2e4 <atan2>
 80126fa:	a325      	add	r3, pc, #148	; (adr r3, 8012790 <iNemo_quat2heading+0x368>)
 80126fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012700:	ec51 0b10 	vmov	r0, r1, d0
 8012704:	f7ed ff7c 	bl	8000600 <__aeabi_dmul>
 8012708:	2200      	movs	r2, #0
 801270a:	4b26      	ldr	r3, [pc, #152]	; (80127a4 <iNemo_quat2heading+0x37c>)
 801270c:	f7ed fdc4 	bl	8000298 <__aeabi_dsub>
 8012710:	f7ee fa6e 	bl	8000bf0 <__aeabi_d2f>
 8012714:	ee00 0a10 	vmov	s0, r0
 8012718:	e7af      	b.n	801267a <iNemo_quat2heading+0x252>
 801271a:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801271e:	ee29 7aa9 	vmul.f32	s14, s19, s19
 8012722:	ee68 6a08 	vmul.f32	s13, s16, s16
 8012726:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801272a:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 801272e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012732:	ee69 8aa8 	vmul.f32	s17, s19, s17
 8012736:	ee77 7a87 	vadd.f32	s15, s15, s14
 801273a:	ee2a 8a08 	vmul.f32	s16, s20, s16
 801273e:	ee17 0a90 	vmov	r0, s15
 8012742:	ee38 8a88 	vadd.f32	s16, s17, s16
 8012746:	f7ed ff07 	bl	8000558 <__aeabi_f2d>
 801274a:	ee78 7a08 	vadd.f32	s15, s16, s16
 801274e:	e9cd 0100 	strd	r0, r1, [sp]
 8012752:	ee17 0a90 	vmov	r0, s15
 8012756:	f7ed feff 	bl	8000558 <__aeabi_f2d>
 801275a:	ed9d 1b00 	vldr	d1, [sp]
 801275e:	ec41 0b10 	vmov	d0, r0, r1
 8012762:	f009 fdbf 	bl	801c2e4 <atan2>
 8012766:	a30a      	add	r3, pc, #40	; (adr r3, 8012790 <iNemo_quat2heading+0x368>)
 8012768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801276c:	ec51 0b10 	vmov	r0, r1, d0
 8012770:	f7ed ff46 	bl	8000600 <__aeabi_dmul>
 8012774:	2200      	movs	r2, #0
 8012776:	4b0b      	ldr	r3, [pc, #44]	; (80127a4 <iNemo_quat2heading+0x37c>)
 8012778:	f7ed fd90 	bl	800029c <__adddf3>
 801277c:	f7ee fa38 	bl	8000bf0 <__aeabi_d2f>
 8012780:	ee00 0a10 	vmov	s0, r0
 8012784:	e779      	b.n	801267a <iNemo_quat2heading+0x252>
 8012786:	bf00      	nop
 8012788:	e0000000 	.word	0xe0000000
 801278c:	3ff6b851 	.word	0x3ff6b851
 8012790:	20000000 	.word	0x20000000
 8012794:	404ca5dc 	.word	0x404ca5dc
 8012798:	20001698 	.word	0x20001698
 801279c:	43340000 	.word	0x43340000
 80127a0:	43b40000 	.word	0x43b40000
 80127a4:	40568000 	.word	0x40568000
 80127a8:	f7ed fed6 	bl	8000558 <__aeabi_f2d>
 80127ac:	4680      	mov	r8, r0
 80127ae:	ee19 0a10 	vmov	r0, s18
 80127b2:	4689      	mov	r9, r1
 80127b4:	f7ed fed0 	bl	8000558 <__aeabi_f2d>
 80127b8:	a328      	add	r3, pc, #160	; (adr r3, 801285c <iNemo_quat2heading+0x434>)
 80127ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127be:	f7ed ff1f 	bl	8000600 <__aeabi_dmul>
 80127c2:	4602      	mov	r2, r0
 80127c4:	460b      	mov	r3, r1
 80127c6:	4640      	mov	r0, r8
 80127c8:	4649      	mov	r1, r9
 80127ca:	f7ee f9a9 	bl	8000b20 <__aeabi_dcmpgt>
 80127ce:	2800      	cmp	r0, #0
 80127d0:	f43f ae83 	beq.w	80124da <iNemo_quat2heading+0xb2>
 80127d4:	ee1b 0a10 	vmov	r0, s22
 80127d8:	f7ed febe 	bl	8000558 <__aeabi_f2d>
 80127dc:	a31f      	add	r3, pc, #124	; (adr r3, 801285c <iNemo_quat2heading+0x434>)
 80127de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e2:	f7ed ff0d 	bl	8000600 <__aeabi_dmul>
 80127e6:	4602      	mov	r2, r0
 80127e8:	460b      	mov	r3, r1
 80127ea:	4640      	mov	r0, r8
 80127ec:	4649      	mov	r1, r9
 80127ee:	f7ee f997 	bl	8000b20 <__aeabi_dcmpgt>
 80127f2:	2800      	cmp	r0, #0
 80127f4:	bf18      	it	ne
 80127f6:	2405      	movne	r4, #5
 80127f8:	e66f      	b.n	80124da <iNemo_quat2heading+0xb2>
 80127fa:	f7ed fead 	bl	8000558 <__aeabi_f2d>
 80127fe:	4680      	mov	r8, r0
 8012800:	ee1a 0a90 	vmov	r0, s21
 8012804:	4689      	mov	r9, r1
 8012806:	f7ed fea7 	bl	8000558 <__aeabi_f2d>
 801280a:	a314      	add	r3, pc, #80	; (adr r3, 801285c <iNemo_quat2heading+0x434>)
 801280c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012810:	f7ed fef6 	bl	8000600 <__aeabi_dmul>
 8012814:	4602      	mov	r2, r0
 8012816:	460b      	mov	r3, r1
 8012818:	4640      	mov	r0, r8
 801281a:	4649      	mov	r1, r9
 801281c:	f7ee f980 	bl	8000b20 <__aeabi_dcmpgt>
 8012820:	2800      	cmp	r0, #0
 8012822:	f43f ae5a 	beq.w	80124da <iNemo_quat2heading+0xb2>
 8012826:	ee1b 0a10 	vmov	r0, s22
 801282a:	f7ed fe95 	bl	8000558 <__aeabi_f2d>
 801282e:	a30b      	add	r3, pc, #44	; (adr r3, 801285c <iNemo_quat2heading+0x434>)
 8012830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012834:	f7ed fee4 	bl	8000600 <__aeabi_dmul>
 8012838:	4602      	mov	r2, r0
 801283a:	460b      	mov	r3, r1
 801283c:	4640      	mov	r0, r8
 801283e:	4649      	mov	r1, r9
 8012840:	f7ee f96e 	bl	8000b20 <__aeabi_dcmpgt>
 8012844:	2800      	cmp	r0, #0
 8012846:	bf18      	it	ne
 8012848:	2403      	movne	r4, #3
 801284a:	e646      	b.n	80124da <iNemo_quat2heading+0xb2>
 801284c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8012858 <iNemo_quat2heading+0x430>
 8012850:	e725      	b.n	801269e <iNemo_quat2heading+0x276>
 8012852:	bf00      	nop
 8012854:	f3af 8000 	nop.w
 8012858:	00000000 	.word	0x00000000
 801285c:	e0000000 	.word	0xe0000000
 8012860:	3ff6b851 	.word	0x3ff6b851

08012864 <MEMS_runMagCal.constprop.21>:
 8012864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012868:	f8df b4a4 	ldr.w	fp, [pc, #1188]	; 8012d10 <MEMS_runMagCal.constprop.21+0x4ac>
 801286c:	ed2d 8b10 	vpush	{d8-d15}
 8012870:	f8bb 6018 	ldrh.w	r6, [fp, #24]
 8012874:	f9bb e012 	ldrsh.w	lr, [fp, #18]
 8012878:	2e82      	cmp	r6, #130	; 0x82
 801287a:	f2ad 5d6c 	subw	sp, sp, #1388	; 0x56c
 801287e:	f240 8400 	bls.w	8013082 <MEMS_runMagCal.constprop.21+0x81e>
 8012882:	f8db 201c 	ldr.w	r2, [fp, #28]
 8012886:	1e73      	subs	r3, r6, #1
 8012888:	fb0e 2313 	mls	r3, lr, r3, r2
 801288c:	2182      	movs	r1, #130	; 0x82
 801288e:	f106 057e 	add.w	r5, r6, #126	; 0x7e
 8012892:	9304      	str	r3, [sp, #16]
 8012894:	2381      	movs	r3, #129	; 0x81
 8012896:	910c      	str	r1, [sp, #48]	; 0x30
 8012898:	eb0e 1ece 	add.w	lr, lr, lr, lsl #7
 801289c:	b2ed      	uxtb	r5, r5
 801289e:	460f      	mov	r7, r1
 80128a0:	930d      	str	r3, [sp, #52]	; 0x34
 80128a2:	f8db 4020 	ldr.w	r4, [fp, #32]
 80128a6:	2200      	movs	r2, #0
 80128a8:	f50d 78ac 	add.w	r8, sp, #344	; 0x158
 80128ac:	b211      	sxth	r1, r2
 80128ae:	00cb      	lsls	r3, r1, #3
 80128b0:	18e0      	adds	r0, r4, r3
 80128b2:	3201      	adds	r2, #1
 80128b4:	4443      	add	r3, r8
 80128b6:	f814 c031 	ldrb.w	ip, [r4, r1, lsl #3]
 80128ba:	f808 c031 	strb.w	ip, [r8, r1, lsl #3]
 80128be:	b2d2      	uxtb	r2, r2
 80128c0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 80128c4:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 80128c8:	88c1      	ldrh	r1, [r0, #6]
 80128ca:	f8a3 9002 	strh.w	r9, [r3, #2]
 80128ce:	4297      	cmp	r7, r2
 80128d0:	f8a3 c004 	strh.w	ip, [r3, #4]
 80128d4:	80d9      	strh	r1, [r3, #6]
 80128d6:	d8e9      	bhi.n	80128ac <MEMS_runMagCal.constprop.21+0x48>
 80128d8:	2e82      	cmp	r6, #130	; 0x82
 80128da:	bf86      	itte	hi
 80128dc:	f1a6 0382 	subhi.w	r3, r6, #130	; 0x82
 80128e0:	b29b      	uxthhi	r3, r3
 80128e2:	2300      	movls	r3, #0
 80128e4:	f8ab 3018 	strh.w	r3, [fp, #24]
 80128e8:	b1c5      	cbz	r5, 801291c <MEMS_runMagCal.constprop.21+0xb8>
 80128ea:	3d01      	subs	r5, #1
 80128ec:	b2ed      	uxtb	r5, r5
 80128ee:	f8db 3020 	ldr.w	r3, [fp, #32]
 80128f2:	3501      	adds	r5, #1
 80128f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80128f8:	2600      	movs	r6, #0
 80128fa:	f893 4410 	ldrb.w	r4, [r3, #1040]	; 0x410
 80128fe:	f8b3 0412 	ldrh.w	r0, [r3, #1042]	; 0x412
 8012902:	f8b3 1414 	ldrh.w	r1, [r3, #1044]	; 0x414
 8012906:	f8b3 2416 	ldrh.w	r2, [r3, #1046]	; 0x416
 801290a:	701c      	strb	r4, [r3, #0]
 801290c:	f883 6410 	strb.w	r6, [r3, #1040]	; 0x410
 8012910:	8058      	strh	r0, [r3, #2]
 8012912:	8099      	strh	r1, [r3, #4]
 8012914:	80da      	strh	r2, [r3, #6]
 8012916:	3308      	adds	r3, #8
 8012918:	429d      	cmp	r5, r3
 801291a:	d1ee      	bne.n	80128fa <MEMS_runMagCal.constprop.21+0x96>
 801291c:	9b04      	ldr	r3, [sp, #16]
 801291e:	4473      	add	r3, lr
 8012920:	9305      	str	r3, [sp, #20]
 8012922:	f8cb 305c 	str.w	r3, [fp, #92]	; 0x5c
 8012926:	2f00      	cmp	r7, #0
 8012928:	f000 83a5 	beq.w	8013076 <MEMS_runMagCal.constprop.21+0x812>
 801292c:	4619      	mov	r1, r3
 801292e:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 8012932:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012936:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 801293a:	fb02 f203 	mul.w	r2, r2, r3
 801293e:	31a0      	adds	r1, #160	; 0xa0
 8012940:	4291      	cmp	r1, r2
 8012942:	f080 83ac 	bcs.w	801309e <MEMS_runMagCal.constprop.21+0x83a>
 8012946:	3300      	adds	r3, #0
 8012948:	bf18      	it	ne
 801294a:	2301      	movne	r3, #1
 801294c:	2200      	movs	r2, #0
 801294e:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
 8012952:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8012956:	f88b 20b0 	strb.w	r2, [fp, #176]	; 0xb0
 801295a:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
 801295e:	2300      	movs	r3, #0
 8012960:	22ff      	movs	r2, #255	; 0xff
 8012962:	f8cb 30b8 	str.w	r3, [fp, #184]	; 0xb8
 8012966:	f8cb 30bc 	str.w	r3, [fp, #188]	; 0xbc
 801296a:	f8cb 30c0 	str.w	r3, [fp, #192]	; 0xc0
 801296e:	f8cb 30c4 	str.w	r3, [fp, #196]	; 0xc4
 8012972:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
 8012976:	f8cb 30c8 	str.w	r3, [fp, #200]	; 0xc8
 801297a:	f88b 20b2 	strb.w	r2, [fp, #178]	; 0xb2
 801297e:	eddf 7adf 	vldr	s15, [pc, #892]	; 8012cfc <MEMS_runMagCal.constprop.21+0x498>
 8012982:	f8df c390 	ldr.w	ip, [pc, #912]	; 8012d14 <MEMS_runMagCal.constprop.21+0x4b0>
 8012986:	ed9b 8a05 	vldr	s16, [fp, #20]
 801298a:	eddb 2a23 	vldr	s5, [fp, #140]	; 0x8c
 801298e:	ed9b 3a20 	vldr	s6, [fp, #128]	; 0x80
 8012992:	eddb 3a27 	vldr	s7, [fp, #156]	; 0x9c
 8012996:	ed9b 4a21 	vldr	s8, [fp, #132]	; 0x84
 801299a:	eddb 4a2b 	vldr	s9, [fp, #172]	; 0xac
 801299e:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 80129a2:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 80129a6:	2600      	movs	r6, #0
 80129a8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80129ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80129b0:	f50d 78ac 	add.w	r8, sp, #344	; 0x158
 80129b4:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
 80129b8:	f8ad 20da 	strh.w	r2, [sp, #218]	; 0xda
 80129bc:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
 80129c0:	eeb0 7a67 	vmov.f32	s14, s15
 80129c4:	eeb0 6a67 	vmov.f32	s12, s15
 80129c8:	eef0 5a67 	vmov.f32	s11, s15
 80129cc:	469a      	mov	sl, r3
 80129ce:	9301      	str	r3, [sp, #4]
 80129d0:	9303      	str	r3, [sp, #12]
 80129d2:	f8ad 3118 	strh.w	r3, [sp, #280]	; 0x118
 80129d6:	f8ad 311a 	strh.w	r3, [sp, #282]	; 0x11a
 80129da:	f8ad 311c 	strh.w	r3, [sp, #284]	; 0x11c
 80129de:	f8cd c000 	str.w	ip, [sp]
 80129e2:	f8cd c008 	str.w	ip, [sp, #8]
 80129e6:	4645      	mov	r5, r8
 80129e8:	9606      	str	r6, [sp, #24]
 80129ea:	9607      	str	r6, [sp, #28]
 80129ec:	9608      	str	r6, [sp, #32]
 80129ee:	9609      	str	r6, [sp, #36]	; 0x24
 80129f0:	960a      	str	r6, [sp, #40]	; 0x28
 80129f2:	960b      	str	r6, [sp, #44]	; 0x2c
 80129f4:	4632      	mov	r2, r6
 80129f6:	4634      	mov	r4, r6
 80129f8:	46b6      	mov	lr, r6
 80129fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80129fe:	782b      	ldrb	r3, [r5, #0]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	f000 809f 	beq.w	8012b44 <MEMS_runMagCal.constprop.21+0x2e0>
 8012a06:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8012a0a:	f10e 0e01 	add.w	lr, lr, #1
 8012a0e:	4561      	cmp	r1, ip
 8012a10:	fa4f fe8e 	sxtb.w	lr, lr
 8012a14:	dd02      	ble.n	8012a1c <MEMS_runMagCal.constprop.21+0x1b8>
 8012a16:	2301      	movs	r3, #1
 8012a18:	468c      	mov	ip, r1
 8012a1a:	9306      	str	r3, [sp, #24]
 8012a1c:	4551      	cmp	r1, sl
 8012a1e:	da02      	bge.n	8012a26 <MEMS_runMagCal.constprop.21+0x1c2>
 8012a20:	2301      	movs	r3, #1
 8012a22:	468a      	mov	sl, r1
 8012a24:	9307      	str	r3, [sp, #28]
 8012a26:	ee07 1a90 	vmov	s15, r1
 8012a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a2e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012a32:	9b00      	ldr	r3, [sp, #0]
 8012a34:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8012a3e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012a42:	ee37 6a86 	vadd.f32	s12, s15, s12
 8012a46:	dd02      	ble.n	8012a4e <MEMS_runMagCal.constprop.21+0x1ea>
 8012a48:	2301      	movs	r3, #1
 8012a4a:	9200      	str	r2, [sp, #0]
 8012a4c:	9308      	str	r3, [sp, #32]
 8012a4e:	9b01      	ldr	r3, [sp, #4]
 8012a50:	429a      	cmp	r2, r3
 8012a52:	da02      	bge.n	8012a5a <MEMS_runMagCal.constprop.21+0x1f6>
 8012a54:	2301      	movs	r3, #1
 8012a56:	9201      	str	r2, [sp, #4]
 8012a58:	9309      	str	r3, [sp, #36]	; 0x24
 8012a5a:	ee07 2a90 	vmov	s15, r2
 8012a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a62:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012a66:	9802      	ldr	r0, [sp, #8]
 8012a68:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8012a6c:	4283      	cmp	r3, r0
 8012a6e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8012a72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012a76:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012a7a:	dd02      	ble.n	8012a82 <MEMS_runMagCal.constprop.21+0x21e>
 8012a7c:	2001      	movs	r0, #1
 8012a7e:	9302      	str	r3, [sp, #8]
 8012a80:	900a      	str	r0, [sp, #40]	; 0x28
 8012a82:	9803      	ldr	r0, [sp, #12]
 8012a84:	4283      	cmp	r3, r0
 8012a86:	da02      	bge.n	8012a8e <MEMS_runMagCal.constprop.21+0x22a>
 8012a88:	2001      	movs	r0, #1
 8012a8a:	9303      	str	r3, [sp, #12]
 8012a8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8012a8e:	ee07 3a10 	vmov	s14, r3
 8012a92:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8012a96:	2e03      	cmp	r6, #3
 8012a98:	ee36 6a45 	vsub.f32	s12, s12, s10
 8012a9c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012aa0:	ee26 6a06 	vmul.f32	s12, s12, s12
 8012aa4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8012aa8:	f241 8286 	bls.w	8013fb8 <MEMS_runMagCal.constprop.21+0x1754>
 8012aac:	f935 9c1e 	ldrsh.w	r9, [r5, #-30]
 8012ab0:	f935 8c16 	ldrsh.w	r8, [r5, #-22]
 8012ab4:	f935 0c06 	ldrsh.w	r0, [r5, #-6]
 8012ab8:	eba1 0109 	sub.w	r1, r1, r9
 8012abc:	eba0 0008 	sub.w	r0, r0, r8
 8012ac0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8012ac4:	ee07 1a90 	vmov	s15, r1
 8012ac8:	f935 9c1c 	ldrsh.w	r9, [r5, #-28]
 8012acc:	f935 1c04 	ldrsh.w	r1, [r5, #-4]
 8012ad0:	f935 8c14 	ldrsh.w	r8, [r5, #-20]
 8012ad4:	f935 0c1a 	ldrsh.w	r0, [r5, #-26]
 8012ad8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012adc:	eba1 0108 	sub.w	r1, r1, r8
 8012ae0:	eeb0 7ac7 	vabs.f32	s14, s14
 8012ae4:	eba2 0209 	sub.w	r2, r2, r9
 8012ae8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8012aec:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012af0:	ee07 2a90 	vmov	s15, r2
 8012af4:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 8012af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012afc:	f935 2c02 	ldrsh.w	r2, [r5, #-2]
 8012b00:	f935 1c12 	ldrsh.w	r1, [r5, #-18]
 8012b04:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 8012b08:	eef0 7ae7 	vabs.f32	s15, s15
 8012b0c:	1a52      	subs	r2, r2, r1
 8012b0e:	1a1b      	subs	r3, r3, r0
 8012b10:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8012b14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b18:	ee07 3a90 	vmov	s15, r3
 8012b1c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8012b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b24:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012b28:	eef0 7ae7 	vabs.f32	s15, s15
 8012b2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012b30:	2201      	movs	r2, #1
 8012b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012b36:	eeb0 7a46 	vmov.f32	s14, s12
 8012b3a:	ee17 3a90 	vmov	r3, s15
 8012b3e:	429c      	cmp	r4, r3
 8012b40:	bf38      	it	cc
 8012b42:	461c      	movcc	r4, r3
 8012b44:	3601      	adds	r6, #1
 8012b46:	b2b3      	uxth	r3, r6
 8012b48:	429f      	cmp	r7, r3
 8012b4a:	f105 0508 	add.w	r5, r5, #8
 8012b4e:	f63f af56 	bhi.w	80129fe <MEMS_runMagCal.constprop.21+0x19a>
 8012b52:	940f      	str	r4, [sp, #60]	; 0x3c
 8012b54:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8012b58:	2a00      	cmp	r2, #0
 8012b5a:	f041 8229 	bne.w	8013fb0 <MEMS_runMagCal.constprop.21+0x174c>
 8012b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b60:	b11b      	cbz	r3, 8012b6a <MEMS_runMagCal.constprop.21+0x306>
 8012b62:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012b66:	f8ad 311c 	strh.w	r3, [sp, #284]	; 0x11c
 8012b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b6c:	b11b      	cbz	r3, 8012b76 <MEMS_runMagCal.constprop.21+0x312>
 8012b6e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8012b72:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
 8012b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b78:	b11b      	cbz	r3, 8012b82 <MEMS_runMagCal.constprop.21+0x31e>
 8012b7a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012b7e:	f8ad 311a 	strh.w	r3, [sp, #282]	; 0x11a
 8012b82:	9b08      	ldr	r3, [sp, #32]
 8012b84:	b11b      	cbz	r3, 8012b8e <MEMS_runMagCal.constprop.21+0x32a>
 8012b86:	f8bd 3000 	ldrh.w	r3, [sp]
 8012b8a:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
 8012b8e:	9b07      	ldr	r3, [sp, #28]
 8012b90:	b10b      	cbz	r3, 8012b96 <MEMS_runMagCal.constprop.21+0x332>
 8012b92:	f8ad a118 	strh.w	sl, [sp, #280]	; 0x118
 8012b96:	9b06      	ldr	r3, [sp, #24]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	f040 829a 	bne.w	80130d2 <MEMS_runMagCal.constprop.21+0x86e>
 8012b9e:	f1be 0f00 	cmp.w	lr, #0
 8012ba2:	f000 82a6 	beq.w	80130f2 <MEMS_runMagCal.constprop.21+0x88e>
 8012ba6:	f9bd 70d8 	ldrsh.w	r7, [sp, #216]	; 0xd8
 8012baa:	f9bd 4118 	ldrsh.w	r4, [sp, #280]	; 0x118
 8012bae:	f514 4f80 	cmn.w	r4, #16384	; 0x4000
 8012bb2:	f2c0 8299 	blt.w	80130e8 <MEMS_runMagCal.constprop.21+0x884>
 8012bb6:	f9bd 60da 	ldrsh.w	r6, [sp, #218]	; 0xda
 8012bba:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 8012bbe:	f280 8293 	bge.w	80130e8 <MEMS_runMagCal.constprop.21+0x884>
 8012bc2:	f9bd a11a 	ldrsh.w	sl, [sp, #282]	; 0x11a
 8012bc6:	f51a 4f80 	cmn.w	sl, #16384	; 0x4000
 8012bca:	f2c0 828d 	blt.w	80130e8 <MEMS_runMagCal.constprop.21+0x884>
 8012bce:	f9bd 50dc 	ldrsh.w	r5, [sp, #220]	; 0xdc
 8012bd2:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 8012bd6:	f280 8287 	bge.w	80130e8 <MEMS_runMagCal.constprop.21+0x884>
 8012bda:	f9bd 911c 	ldrsh.w	r9, [sp, #284]	; 0x11c
 8012bde:	f519 4f80 	cmn.w	r9, #16384	; 0x4000
 8012be2:	f2c0 8281 	blt.w	80130e8 <MEMS_runMagCal.constprop.21+0x884>
 8012be6:	ee07 ea90 	vmov	s15, lr
 8012bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012bee:	ee86 0a27 	vdiv.f32	s0, s12, s15
 8012bf2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bfa:	eef1 8ac0 	vsqrt.f32	s17, s0
 8012bfe:	bf58      	it	pl
 8012c00:	eef0 5a48 	vmovpl.f32	s11, s16
 8012c04:	f101 814a 	bmi.w	8013e9c <MEMS_runMagCal.constprop.21+0x1638>
 8012c08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012c0c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8012c10:	1b3c      	subs	r4, r7, r4
 8012c12:	eba6 060a 	sub.w	r6, r6, sl
 8012c16:	42b4      	cmp	r4, r6
 8012c18:	4623      	mov	r3, r4
 8012c1a:	eba5 0509 	sub.w	r5, r5, r9
 8012c1e:	bfb8      	it	lt
 8012c20:	4633      	movlt	r3, r6
 8012c22:	42ab      	cmp	r3, r5
 8012c24:	bfb8      	it	lt
 8012c26:	462b      	movlt	r3, r5
 8012c28:	eddf 6a35 	vldr	s13, [pc, #212]	; 8012d00 <MEMS_runMagCal.constprop.21+0x49c>
 8012c2c:	ee07 3a90 	vmov	s15, r3
 8012c30:	ee67 6a26 	vmul.f32	s13, s14, s13
 8012c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c38:	ee28 6aa5 	vmul.f32	s12, s17, s11
 8012c3c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c44:	f100 8250 	bmi.w	80130e8 <MEMS_runMagCal.constprop.21+0x884>
 8012c48:	eddd 6a0f 	vldr	s13, [sp, #60]	; 0x3c
 8012c4c:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8012d04 <MEMS_runMagCal.constprop.21+0x4a0>
 8012c50:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8012c54:	ee66 5aa5 	vmul.f32	s11, s13, s11
 8012c58:	eef4 5ac5 	vcmpe.f32	s11, s10
 8012c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c60:	f300 8242 	bgt.w	80130e8 <MEMS_runMagCal.constprop.21+0x884>
 8012c64:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8012c68:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012c6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c74:	f301 805b 	bgt.w	8013d2e <MEMS_runMagCal.constprop.21+0x14ca>
 8012c78:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8012c7c:	ee67 6a26 	vmul.f32	s13, s14, s13
 8012c80:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c88:	f341 8056 	ble.w	8013d38 <MEMS_runMagCal.constprop.21+0x14d4>
 8012c8c:	ee07 4a90 	vmov	s15, r4
 8012c90:	ee37 7a07 	vadd.f32	s14, s14, s14
 8012c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ca0:	f341 804a 	ble.w	8013d38 <MEMS_runMagCal.constprop.21+0x14d4>
 8012ca4:	ee07 6a90 	vmov	s15, r6
 8012ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012cac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb4:	f141 8040 	bpl.w	8013d38 <MEMS_runMagCal.constprop.21+0x14d4>
 8012cb8:	ee07 5a90 	vmov	s15, r5
 8012cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012cc0:	2100      	movs	r1, #0
 8012cc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cca:	bf4c      	ite	mi
 8012ccc:	f04f 0a01 	movmi.w	sl, #1
 8012cd0:	468a      	movpl	sl, r1
 8012cd2:	2600      	movs	r6, #0
 8012cd4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8012d08 <MEMS_runMagCal.constprop.21+0x4a4>
 8012cd8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8012d0c <MEMS_runMagCal.constprop.21+0x4a8>
 8012cdc:	f89b 407c 	ldrb.w	r4, [fp, #124]	; 0x7c
 8012ce0:	ee26 0a00 	vmul.f32	s0, s12, s0
 8012ce4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cec:	f140 8212 	bpl.w	8013114 <MEMS_runMagCal.constprop.21+0x8b0>
 8012cf0:	2c01      	cmp	r4, #1
 8012cf2:	ed8d 0a10 	vstr	s0, [sp, #64]	; 0x40
 8012cf6:	d928      	bls.n	8012d4a <MEMS_runMagCal.constprop.21+0x4e6>
 8012cf8:	e014      	b.n	8012d24 <MEMS_runMagCal.constprop.21+0x4c0>
 8012cfa:	bf00      	nop
 8012cfc:	00000000 	.word	0x00000000
 8012d00:	43020000 	.word	0x43020000
 8012d04:	447a0000 	.word	0x447a0000
 8012d08:	42c80000 	.word	0x42c80000
 8012d0c:	477fff00 	.word	0x477fff00
 8012d10:	20001698 	.word	0x20001698
 8012d14:	ffff8000 	.word	0xffff8000
 8012d18:	427c0000 	.word	0x427c0000
 8012d1c:	3f666666 	.word	0x3f666666
 8012d20:	423c0000 	.word	0x423c0000
 8012d24:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012d28:	edcd 7a00 	vstr	s15, [sp]
 8012d2c:	f8bd 3000 	ldrh.w	r3, [sp]
 8012d30:	2bc7      	cmp	r3, #199	; 0xc7
 8012d32:	f201 8146 	bhi.w	8013fc2 <MEMS_runMagCal.constprop.21+0x175e>
 8012d36:	2400      	movs	r4, #0
 8012d38:	23ff      	movs	r3, #255	; 0xff
 8012d3a:	f88b 407c 	strb.w	r4, [fp, #124]	; 0x7c
 8012d3e:	f88b 40b0 	strb.w	r4, [fp, #176]	; 0xb0
 8012d42:	f88b 4064 	strb.w	r4, [fp, #100]	; 0x64
 8012d46:	f88b 30b2 	strb.w	r3, [fp, #178]	; 0xb2
 8012d4a:	2e00      	cmp	r6, #0
 8012d4c:	f040 81d3 	bne.w	80130f6 <MEMS_runMagCal.constprop.21+0x892>
 8012d50:	f99b 3036 	ldrsb.w	r3, [fp, #54]	; 0x36
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	f2c0 82ca 	blt.w	80132ee <MEMS_runMagCal.constprop.21+0xa8a>
 8012d5a:	f89b 7035 	ldrb.w	r7, [fp, #53]	; 0x35
 8012d5e:	1c5a      	adds	r2, r3, #1
 8012d60:	fb92 f3f7 	sdiv	r3, r2, r7
 8012d64:	fb07 2313 	mls	r3, r7, r3, r2
 8012d68:	b25b      	sxtb	r3, r3
 8012d6a:	4699      	mov	r9, r3
 8012d6c:	f89b 5034 	ldrb.w	r5, [fp, #52]	; 0x34
 8012d70:	f88b 3036 	strb.w	r3, [fp, #54]	; 0x36
 8012d74:	3501      	adds	r5, #1
 8012d76:	42bd      	cmp	r5, r7
 8012d78:	bfa8      	it	ge
 8012d7a:	463d      	movge	r5, r7
 8012d7c:	b2e8      	uxtb	r0, r5
 8012d7e:	9101      	str	r1, [sp, #4]
 8012d80:	f88b 0034 	strb.w	r0, [fp, #52]	; 0x34
 8012d84:	9000      	str	r0, [sp, #0]
 8012d86:	f009 f9c5 	bl	801c114 <roundf>
 8012d8a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012d8e:	eb0b 0349 	add.w	r3, fp, r9, lsl #1
 8012d92:	ee17 2a90 	vmov	r2, s15
 8012d96:	871a      	strh	r2, [r3, #56]	; 0x38
 8012d98:	2e00      	cmp	r6, #0
 8012d9a:	f040 81ac 	bne.w	80130f6 <MEMS_runMagCal.constprop.21+0x892>
 8012d9e:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8012da2:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8012da6:	b12b      	cbz	r3, 8012db4 <MEMS_runMagCal.constprop.21+0x550>
 8012da8:	9a05      	ldr	r2, [sp, #20]
 8012daa:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8012dae:	429a      	cmp	r2, r3
 8012db0:	f0c0 8161 	bcc.w	8013076 <MEMS_runMagCal.constprop.21+0x812>
 8012db4:	2900      	cmp	r1, #0
 8012db6:	f040 815e 	bne.w	8013076 <MEMS_runMagCal.constprop.21+0x812>
 8012dba:	1ea3      	subs	r3, r4, #2
 8012dbc:	2b01      	cmp	r3, #1
 8012dbe:	f240 8707 	bls.w	8013bd0 <MEMS_runMagCal.constprop.21+0x136c>
 8012dc2:	eddb 6a05 	vldr	s13, [fp, #20]
 8012dc6:	ed5f 7a2c 	vldr	s15, [pc, #-176]	; 8012d18 <MEMS_runMagCal.constprop.21+0x4b4>
 8012dca:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 8012dce:	f9bb 5012 	ldrsh.w	r5, [fp, #18]
 8012dd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012dd4:	9804      	ldr	r0, [sp, #16]
 8012dd6:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 8012d1c <MEMS_runMagCal.constprop.21+0x4b8>
 8012dda:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8012dde:	eec6 8a26 	vdiv.f32	s17, s12, s13
 8012de2:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 8012de6:	3210      	adds	r2, #16
 8012de8:	fb01 0505 	mla	r5, r1, r5, r0
 8012dec:	42aa      	cmp	r2, r5
 8012dee:	eeb0 8a08 	vmov.f32	s16, #8	; 0x40400000  3.0
 8012df2:	ee28 8a88 	vmul.f32	s16, s17, s16
 8012df6:	eeb7 aa08 	vmov.f32	s20, #120	; 0x3fc00000  1.5
 8012dfa:	ee68 7a27 	vmul.f32	s15, s16, s15
 8012dfe:	ee68 9a08 	vmul.f32	s19, s16, s16
 8012e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e06:	ee69 9a87 	vmul.f32	s19, s19, s14
 8012e0a:	edcd 7a00 	vstr	s15, [sp]
 8012e0e:	f8bd 9000 	ldrh.w	r9, [sp]
 8012e12:	ee28 aa0a 	vmul.f32	s20, s16, s20
 8012e16:	f0c0 867c 	bcc.w	8013b12 <MEMS_runMagCal.constprop.21+0x12ae>
 8012e1a:	f89b 00b0 	ldrb.w	r0, [fp, #176]	; 0xb0
 8012e1e:	461d      	mov	r5, r3
 8012e20:	2800      	cmp	r0, #0
 8012e22:	f000 86cc 	beq.w	8013bbe <MEMS_runMagCal.constprop.21+0x135a>
 8012e26:	f99b 30b2 	ldrsb.w	r3, [fp, #178]	; 0xb2
 8012e2a:	9a04      	ldr	r2, [sp, #16]
 8012e2c:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8012e30:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	; 0xd0
 8012e34:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8012e38:	3308      	adds	r3, #8
 8012e3a:	442b      	add	r3, r5
 8012e3c:	4293      	cmp	r3, r2
 8012e3e:	f0c0 813c 	bcc.w	80130ba <MEMS_runMagCal.constprop.21+0x856>
 8012e42:	f1ba 0f00 	cmp.w	sl, #0
 8012e46:	d104      	bne.n	8012e52 <MEMS_runMagCal.constprop.21+0x5ee>
 8012e48:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 8012e4c:	2b0a      	cmp	r3, #10
 8012e4e:	f240 86ba 	bls.w	8013bc6 <MEMS_runMagCal.constprop.21+0x1362>
 8012e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	f000 86b6 	beq.w	8013bc6 <MEMS_runMagCal.constprop.21+0x1362>
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	461f      	mov	r7, r3
 8012e5e:	9300      	str	r3, [sp, #0]
 8012e60:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8012e64:	f8cd a018 	str.w	sl, [sp, #24]
 8012e68:	e096      	b.n	8012f98 <MEMS_runMagCal.constprop.21+0x734>
 8012e6a:	f9b2 a006 	ldrsh.w	sl, [r2, #6]
 8012e6e:	f89b 50b0 	ldrb.w	r5, [fp, #176]	; 0xb0
 8012e72:	2d00      	cmp	r5, #0
 8012e74:	f040 8156 	bne.w	8013124 <MEMS_runMagCal.constprop.21+0x8c0>
 8012e78:	fb94 f1f9 	sdiv	r1, r4, r9
 8012e7c:	f04f 0201 	mov.w	r2, #1
 8012e80:	f88b 20b0 	strb.w	r2, [fp, #176]	; 0xb0
 8012e84:	f9bb 0012 	ldrsh.w	r0, [fp, #18]
 8012e88:	9a04      	ldr	r2, [sp, #16]
 8012e8a:	f88b 50b2 	strb.w	r5, [fp, #178]	; 0xb2
 8012e8e:	fb03 2000 	mla	r0, r3, r0, r2
 8012e92:	fb09 4311 	mls	r3, r9, r1, r4
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	bfb8      	it	lt
 8012e9a:	444b      	addlt	r3, r9
 8012e9c:	b21b      	sxth	r3, r3
 8012e9e:	ee07 3a90 	vmov	s15, r3
 8012ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ea6:	f8cb 00b4 	str.w	r0, [fp, #180]	; 0xb4
 8012eaa:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012eae:	f8ab 50d0 	strh.w	r5, [fp, #208]	; 0xd0
 8012eb2:	f8ab 40d2 	strh.w	r4, [fp, #210]	; 0xd2
 8012eb6:	f8ab 43c8 	strh.w	r4, [fp, #968]	; 0x3c8
 8012eba:	f8ab 60d4 	strh.w	r6, [fp, #212]	; 0xd4
 8012ebe:	f8ab 63ca 	strh.w	r6, [fp, #970]	; 0x3ca
 8012ec2:	f8ab a0d6 	strh.w	sl, [fp, #214]	; 0xd6
 8012ec6:	f8ab a3cc 	strh.w	sl, [fp, #972]	; 0x3cc
 8012eca:	f009 f923 	bl	801c114 <roundf>
 8012ece:	fb96 f3f9 	sdiv	r3, r6, r9
 8012ed2:	fb09 6613 	mls	r6, r9, r3, r6
 8012ed6:	2e00      	cmp	r6, #0
 8012ed8:	bfb8      	it	lt
 8012eda:	444e      	addlt	r6, r9
 8012edc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012ee0:	b236      	sxth	r6, r6
 8012ee2:	edcd 7a00 	vstr	s15, [sp]
 8012ee6:	ee07 6a90 	vmov	s15, r6
 8012eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012eee:	f89d 4000 	ldrb.w	r4, [sp]
 8012ef2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012ef6:	f009 f90d 	bl	801c114 <roundf>
 8012efa:	fb9a f3f9 	sdiv	r3, sl, r9
 8012efe:	fb09 a213 	mls	r2, r9, r3, sl
 8012f02:	2a00      	cmp	r2, #0
 8012f04:	bfb8      	it	lt
 8012f06:	444a      	addlt	r2, r9
 8012f08:	b212      	sxth	r2, r2
 8012f0a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012f0e:	edcd 7a00 	vstr	s15, [sp]
 8012f12:	ee07 2a90 	vmov	s15, r2
 8012f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f1a:	f89d 5000 	ldrb.w	r5, [sp]
 8012f1e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012f22:	f009 f8f7 	bl	801c114 <roundf>
 8012f26:	2c1f      	cmp	r4, #31
 8012f28:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012f2c:	edcd 7a00 	vstr	s15, [sp]
 8012f30:	f89d 3000 	ldrb.w	r3, [sp]
 8012f34:	f240 81ea 	bls.w	801330c <MEMS_runMagCal.constprop.21+0xaa8>
 8012f38:	f8db 10b8 	ldr.w	r1, [fp, #184]	; 0xb8
 8012f3c:	f1a4 0220 	sub.w	r2, r4, #32
 8012f40:	2001      	movs	r0, #1
 8012f42:	fa00 f202 	lsl.w	r2, r0, r2
 8012f46:	ea22 0201 	bic.w	r2, r2, r1
 8012f4a:	404a      	eors	r2, r1
 8012f4c:	f8cb 20b8 	str.w	r2, [fp, #184]	; 0xb8
 8012f50:	2d1f      	cmp	r5, #31
 8012f52:	f240 81d1 	bls.w	80132f8 <MEMS_runMagCal.constprop.21+0xa94>
 8012f56:	f8db 10c0 	ldr.w	r1, [fp, #192]	; 0xc0
 8012f5a:	f1a5 0220 	sub.w	r2, r5, #32
 8012f5e:	2001      	movs	r0, #1
 8012f60:	fa00 f202 	lsl.w	r2, r0, r2
 8012f64:	ea22 0201 	bic.w	r2, r2, r1
 8012f68:	404a      	eors	r2, r1
 8012f6a:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 8012f6e:	2b1f      	cmp	r3, #31
 8012f70:	f200 81d6 	bhi.w	8013320 <MEMS_runMagCal.constprop.21+0xabc>
 8012f74:	f8db 20c8 	ldr.w	r2, [fp, #200]	; 0xc8
 8012f78:	2101      	movs	r1, #1
 8012f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8012f7e:	ea23 0302 	bic.w	r3, r3, r2
 8012f82:	4053      	eors	r3, r2
 8012f84:	f8cb 30c8 	str.w	r3, [fp, #200]	; 0xc8
 8012f88:	9100      	str	r1, [sp, #0]
 8012f8a:	3701      	adds	r7, #1
 8012f8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f8e:	b23f      	sxth	r7, r7
 8012f90:	4297      	cmp	r7, r2
 8012f92:	463b      	mov	r3, r7
 8012f94:	f280 81d1 	bge.w	801333a <MEMS_runMagCal.constprop.21+0xad6>
 8012f98:	f818 1037 	ldrb.w	r1, [r8, r7, lsl #3]
 8012f9c:	eb08 02c7 	add.w	r2, r8, r7, lsl #3
 8012fa0:	2900      	cmp	r1, #0
 8012fa2:	d0f2      	beq.n	8012f8a <MEMS_runMagCal.constprop.21+0x726>
 8012fa4:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8012fa8:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 8012fac:	ee07 4a90 	vmov	s15, r4
 8012fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fb4:	ee28 7a89 	vmul.f32	s14, s17, s18
 8012fb8:	eef0 7ae7 	vabs.f32	s15, s15
 8012fbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fc4:	f57f af51 	bpl.w	8012e6a <MEMS_runMagCal.constprop.21+0x606>
 8012fc8:	ee07 6a90 	vmov	s15, r6
 8012fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fd0:	f9b2 a006 	ldrsh.w	sl, [r2, #6]
 8012fd4:	eef0 7ae7 	vabs.f32	s15, s15
 8012fd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fe0:	f77f af45 	ble.w	8012e6e <MEMS_runMagCal.constprop.21+0x60a>
 8012fe4:	ee07 aa90 	vmov	s15, sl
 8012fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fec:	eef0 7ae7 	vabs.f32	s15, s15
 8012ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ff8:	dcc7      	bgt.n	8012f8a <MEMS_runMagCal.constprop.21+0x726>
 8012ffa:	e738      	b.n	8012e6e <MEMS_runMagCal.constprop.21+0x60a>
 8012ffc:	ed9b 0a05 	vldr	s0, [fp, #20]
 8013000:	4285      	cmp	r5, r0
 8013002:	bf28      	it	cs
 8013004:	4605      	movcs	r5, r0
 8013006:	4631      	mov	r1, r6
 8013008:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
 801300c:	4623      	mov	r3, r4
 801300e:	aa10      	add	r2, sp, #64	; 0x40
 8013010:	f88b 5034 	strb.w	r5, [fp, #52]	; 0x34
 8013014:	f7fe fbde 	bl	80117d4 <getMagStats.constprop.35>
 8013018:	ed1f 7abf 	vldr	s14, [pc, #-764]	; 8012d20 <MEMS_runMagCal.constprop.21+0x4bc>
 801301c:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8013020:	edd4 6a00 	vldr	s13, [r4]
 8013024:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013028:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801302c:	eef0 7ae7 	vabs.f32	s15, s15
 8013030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013038:	d505      	bpl.n	8013046 <MEMS_runMagCal.constprop.21+0x7e2>
 801303a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801303e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013042:	f101 8670 	bmi.w	8014d26 <MEMS_runMagCal.constprop.21+0x24c2>
 8013046:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801304a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801304e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013052:	f141 866b 	bpl.w	8014d2c <MEMS_runMagCal.constprop.21+0x24c8>
 8013056:	eef4 6ac7 	vcmpe.f32	s13, s14
 801305a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801305e:	bf4c      	ite	mi
 8013060:	2302      	movmi	r3, #2
 8013062:	2301      	movpl	r3, #1
 8013064:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 8013068:	f88b 307c 	strb.w	r3, [fp, #124]	; 0x7c
 801306c:	2ac8      	cmp	r2, #200	; 0xc8
 801306e:	d902      	bls.n	8013076 <MEMS_runMagCal.constprop.21+0x812>
 8013070:	2302      	movs	r3, #2
 8013072:	f88b 307c 	strb.w	r3, [fp, #124]	; 0x7c
 8013076:	f20d 5d6c 	addw	sp, sp, #1388	; 0x56c
 801307a:	ecbd 8b10 	vpop	{d8-d15}
 801307e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013082:	1e72      	subs	r2, r6, #1
 8013084:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013088:	920d      	str	r2, [sp, #52]	; 0x34
 801308a:	fb02 fe0e 	mul.w	lr, r2, lr
 801308e:	eba3 030e 	sub.w	r3, r3, lr
 8013092:	9304      	str	r3, [sp, #16]
 8013094:	960c      	str	r6, [sp, #48]	; 0x30
 8013096:	4637      	mov	r7, r6
 8013098:	b166      	cbz	r6, 80130b4 <MEMS_runMagCal.constprop.21+0x850>
 801309a:	2500      	movs	r5, #0
 801309c:	e401      	b.n	80128a2 <MEMS_runMagCal.constprop.21+0x3e>
 801309e:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
 80130a2:	4291      	cmp	r1, r2
 80130a4:	f4ff ac4f 	bcc.w	8012946 <MEMS_runMagCal.constprop.21+0xe2>
 80130a8:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	f47f ac66 	bne.w	801297e <MEMS_runMagCal.constprop.21+0x11a>
 80130b2:	e454      	b.n	801295e <MEMS_runMagCal.constprop.21+0xfa>
 80130b4:	f8ab 6018 	strh.w	r6, [fp, #24]
 80130b8:	e430      	b.n	801291c <MEMS_runMagCal.constprop.21+0xb8>
 80130ba:	2200      	movs	r2, #0
 80130bc:	23ff      	movs	r3, #255	; 0xff
 80130be:	eeb0 0a48 	vmov.f32	s0, s16
 80130c2:	4648      	mov	r0, r9
 80130c4:	f88b 20b0 	strb.w	r2, [fp, #176]	; 0xb0
 80130c8:	f88b 30b2 	strb.w	r3, [fp, #178]	; 0xb2
 80130cc:	f7ff f882 	bl	80121d4 <MEMS_updateMagBufferIndex.constprop.33>
 80130d0:	e6b7      	b.n	8012e42 <MEMS_runMagCal.constprop.21+0x5de>
 80130d2:	f8ad c0d8 	strh.w	ip, [sp, #216]	; 0xd8
 80130d6:	f1be 0f00 	cmp.w	lr, #0
 80130da:	d00a      	beq.n	80130f2 <MEMS_runMagCal.constprop.21+0x88e>
 80130dc:	fa0f f78c 	sxth.w	r7, ip
 80130e0:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 80130e4:	f6ff ad61 	blt.w	8012baa <MEMS_runMagCal.constprop.21+0x346>
 80130e8:	2602      	movs	r6, #2
 80130ea:	f04f 0a00 	mov.w	sl, #0
 80130ee:	4651      	mov	r1, sl
 80130f0:	e5f0      	b.n	8012cd4 <MEMS_runMagCal.constprop.21+0x470>
 80130f2:	4676      	mov	r6, lr
 80130f4:	e7f9      	b.n	80130ea <MEMS_runMagCal.constprop.21+0x886>
 80130f6:	9905      	ldr	r1, [sp, #20]
 80130f8:	f8cb 1030 	str.w	r1, [fp, #48]	; 0x30
 80130fc:	2200      	movs	r2, #0
 80130fe:	23ff      	movs	r3, #255	; 0xff
 8013100:	f88b 20b0 	strb.w	r2, [fp, #176]	; 0xb0
 8013104:	f88b 30b2 	strb.w	r3, [fp, #178]	; 0xb2
 8013108:	f20d 5d6c 	addw	sp, sp, #1388	; 0x56c
 801310c:	ecbd 8b10 	vpop	{d8-d15}
 8013110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013114:	2c01      	cmp	r4, #1
 8013116:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801311a:	eeb0 0a67 	vmov.f32	s0, s15
 801311e:	f63f ae0a 	bhi.w	8012d36 <MEMS_runMagCal.constprop.21+0x4d2>
 8013122:	e612      	b.n	8012d4a <MEMS_runMagCal.constprop.21+0x4e6>
 8013124:	f9bb 03ca 	ldrsh.w	r0, [fp, #970]	; 0x3ca
 8013128:	f9bb 13c8 	ldrsh.w	r1, [fp, #968]	; 0x3c8
 801312c:	f9bb 33cc 	ldrsh.w	r3, [fp, #972]	; 0x3cc
 8013130:	1b80      	subs	r0, r0, r6
 8013132:	fb00 f000 	mul.w	r0, r0, r0
 8013136:	1b09      	subs	r1, r1, r4
 8013138:	fb01 0101 	mla	r1, r1, r1, r0
 801313c:	eba3 030a 	sub.w	r3, r3, sl
 8013140:	fb03 1303 	mla	r3, r3, r3, r1
 8013144:	ee07 3a90 	vmov	s15, r3
 8013148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801314c:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013154:	f73f af19 	bgt.w	8012f8a <MEMS_runMagCal.constprop.21+0x726>
 8013158:	fb94 f3f9 	sdiv	r3, r4, r9
 801315c:	fb09 4313 	mls	r3, r9, r3, r4
 8013160:	2b00      	cmp	r3, #0
 8013162:	bfb8      	it	lt
 8013164:	444b      	addlt	r3, r9
 8013166:	b21b      	sxth	r3, r3
 8013168:	ee07 3a90 	vmov	s15, r3
 801316c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013170:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8013174:	f008 ffce 	bl	801c114 <roundf>
 8013178:	fb96 f3f9 	sdiv	r3, r6, r9
 801317c:	fb09 6313 	mls	r3, r9, r3, r6
 8013180:	2b00      	cmp	r3, #0
 8013182:	bfb8      	it	lt
 8013184:	444b      	addlt	r3, r9
 8013186:	b21b      	sxth	r3, r3
 8013188:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801318c:	edcd 7a01 	vstr	s15, [sp, #4]
 8013190:	ee07 3a90 	vmov	s15, r3
 8013194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013198:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801319c:	9202      	str	r2, [sp, #8]
 801319e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80131a2:	f008 ffb7 	bl	801c114 <roundf>
 80131a6:	fb9a f3f9 	sdiv	r3, sl, r9
 80131aa:	fb09 a313 	mls	r3, r9, r3, sl
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	bfb8      	it	lt
 80131b2:	444b      	addlt	r3, r9
 80131b4:	b21b      	sxth	r3, r3
 80131b6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80131ba:	edcd 7a01 	vstr	s15, [sp, #4]
 80131be:	ee07 3a90 	vmov	s15, r3
 80131c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80131ca:	9203      	str	r2, [sp, #12]
 80131cc:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80131d0:	f008 ffa0 	bl	801c114 <roundf>
 80131d4:	f8db 30b8 	ldr.w	r3, [fp, #184]	; 0xb8
 80131d8:	f8db 10bc 	ldr.w	r1, [fp, #188]	; 0xbc
 80131dc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80131e0:	edcd 7a01 	vstr	s15, [sp, #4]
 80131e4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80131e8:	9201      	str	r2, [sp, #4]
 80131ea:	9a02      	ldr	r2, [sp, #8]
 80131ec:	2a1f      	cmp	r2, #31
 80131ee:	f240 852e 	bls.w	8013c4e <MEMS_runMagCal.constprop.21+0x13ea>
 80131f2:	f1a2 0e20 	sub.w	lr, r2, #32
 80131f6:	2201      	movs	r2, #1
 80131f8:	fa02 fe0e 	lsl.w	lr, r2, lr
 80131fc:	ea0e 0e03 	and.w	lr, lr, r3
 8013200:	9a03      	ldr	r2, [sp, #12]
 8013202:	f8db 30c0 	ldr.w	r3, [fp, #192]	; 0xc0
 8013206:	f8db 10c4 	ldr.w	r1, [fp, #196]	; 0xc4
 801320a:	2a1f      	cmp	r2, #31
 801320c:	f240 852e 	bls.w	8013c6c <MEMS_runMagCal.constprop.21+0x1408>
 8013210:	f1a2 0120 	sub.w	r1, r2, #32
 8013214:	2201      	movs	r2, #1
 8013216:	fa02 f101 	lsl.w	r1, r2, r1
 801321a:	4019      	ands	r1, r3
 801321c:	9a01      	ldr	r2, [sp, #4]
 801321e:	f8db 30cc 	ldr.w	r3, [fp, #204]	; 0xcc
 8013222:	f8db 00c8 	ldr.w	r0, [fp, #200]	; 0xc8
 8013226:	2a1f      	cmp	r2, #31
 8013228:	f240 8519 	bls.w	8013c5e <MEMS_runMagCal.constprop.21+0x13fa>
 801322c:	f1a2 0020 	sub.w	r0, r2, #32
 8013230:	2201      	movs	r2, #1
 8013232:	fa02 f000 	lsl.w	r0, r2, r0
 8013236:	4003      	ands	r3, r0
 8013238:	f1be 0f00 	cmp.w	lr, #0
 801323c:	f040 851d 	bne.w	8013c7a <MEMS_runMagCal.constprop.21+0x1416>
 8013240:	2900      	cmp	r1, #0
 8013242:	f040 851e 	bne.w	8013c82 <MEMS_runMagCal.constprop.21+0x141e>
 8013246:	2b00      	cmp	r3, #0
 8013248:	f040 851b 	bne.w	8013c82 <MEMS_runMagCal.constprop.21+0x141e>
 801324c:	f89b 00b1 	ldrb.w	r0, [fp, #177]	; 0xb1
 8013250:	f99b 10b2 	ldrsb.w	r1, [fp, #178]	; 0xb2
 8013254:	4602      	mov	r2, r0
 8013256:	3101      	adds	r1, #1
 8013258:	3501      	adds	r5, #1
 801325a:	4295      	cmp	r5, r2
 801325c:	fb91 f3f2 	sdiv	r3, r1, r2
 8013260:	fb02 1113 	mls	r1, r2, r3, r1
 8013264:	bfa8      	it	ge
 8013266:	4615      	movge	r5, r2
 8013268:	b249      	sxtb	r1, r1
 801326a:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 801326e:	9a04      	ldr	r2, [sp, #16]
 8013270:	f9bb e012 	ldrsh.w	lr, [fp, #18]
 8013274:	f8ab 43c8 	strh.w	r4, [fp, #968]	; 0x3c8
 8013278:	f101 0c04 	add.w	ip, r1, #4
 801327c:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 8013280:	b2ed      	uxtb	r5, r5
 8013282:	1ad3      	subs	r3, r2, r3
 8013284:	fb0e 3307 	mla	r3, lr, r7, r3
 8013288:	4285      	cmp	r5, r0
 801328a:	f88b 50b0 	strb.w	r5, [fp, #176]	; 0xb0
 801328e:	f8ab 63ca 	strh.w	r6, [fp, #970]	; 0x3ca
 8013292:	f8ab a3cc 	strh.w	sl, [fp, #972]	; 0x3cc
 8013296:	f88b 10b2 	strb.w	r1, [fp, #178]	; 0xb2
 801329a:	f8ac 40b2 	strh.w	r4, [ip, #178]	; 0xb2
 801329e:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
 80132a2:	f8ac a0b6 	strh.w	sl, [ip, #182]	; 0xb6
 80132a6:	f8ac 30b0 	strh.w	r3, [ip, #176]	; 0xb0
 80132aa:	f000 856f 	beq.w	8013d8c <MEMS_runMagCal.constprop.21+0x1528>
 80132ae:	9b02      	ldr	r3, [sp, #8]
 80132b0:	2b1f      	cmp	r3, #31
 80132b2:	f240 855f 	bls.w	8013d74 <MEMS_runMagCal.constprop.21+0x1510>
 80132b6:	f8db 20b8 	ldr.w	r2, [fp, #184]	; 0xb8
 80132ba:	3b20      	subs	r3, #32
 80132bc:	2101      	movs	r1, #1
 80132be:	fa01 f303 	lsl.w	r3, r1, r3
 80132c2:	ea23 0302 	bic.w	r3, r3, r2
 80132c6:	4053      	eors	r3, r2
 80132c8:	f8cb 30b8 	str.w	r3, [fp, #184]	; 0xb8
 80132cc:	9b03      	ldr	r3, [sp, #12]
 80132ce:	2b1f      	cmp	r3, #31
 80132d0:	f240 853e 	bls.w	8013d50 <MEMS_runMagCal.constprop.21+0x14ec>
 80132d4:	f8db 20c0 	ldr.w	r2, [fp, #192]	; 0xc0
 80132d8:	3b20      	subs	r3, #32
 80132da:	2101      	movs	r1, #1
 80132dc:	fa01 f303 	lsl.w	r3, r1, r3
 80132e0:	ea23 0302 	bic.w	r3, r3, r2
 80132e4:	4053      	eors	r3, r2
 80132e6:	f8cb 30c0 	str.w	r3, [fp, #192]	; 0xc0
 80132ea:	9b01      	ldr	r3, [sp, #4]
 80132ec:	e63f      	b.n	8012f6e <MEMS_runMagCal.constprop.21+0x70a>
 80132ee:	2300      	movs	r3, #0
 80132f0:	4699      	mov	r9, r3
 80132f2:	f89b 7035 	ldrb.w	r7, [fp, #53]	; 0x35
 80132f6:	e539      	b.n	8012d6c <MEMS_runMagCal.constprop.21+0x508>
 80132f8:	f8db 10c4 	ldr.w	r1, [fp, #196]	; 0xc4
 80132fc:	2201      	movs	r2, #1
 80132fe:	40aa      	lsls	r2, r5
 8013300:	ea22 0201 	bic.w	r2, r2, r1
 8013304:	404a      	eors	r2, r1
 8013306:	f8cb 20c4 	str.w	r2, [fp, #196]	; 0xc4
 801330a:	e630      	b.n	8012f6e <MEMS_runMagCal.constprop.21+0x70a>
 801330c:	f8db 10bc 	ldr.w	r1, [fp, #188]	; 0xbc
 8013310:	2201      	movs	r2, #1
 8013312:	40a2      	lsls	r2, r4
 8013314:	ea22 0201 	bic.w	r2, r2, r1
 8013318:	404a      	eors	r2, r1
 801331a:	f8cb 20bc 	str.w	r2, [fp, #188]	; 0xbc
 801331e:	e617      	b.n	8012f50 <MEMS_runMagCal.constprop.21+0x6ec>
 8013320:	f8db 20cc 	ldr.w	r2, [fp, #204]	; 0xcc
 8013324:	2101      	movs	r1, #1
 8013326:	3b20      	subs	r3, #32
 8013328:	fa01 f303 	lsl.w	r3, r1, r3
 801332c:	ea23 0302 	bic.w	r3, r3, r2
 8013330:	4053      	eors	r3, r2
 8013332:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
 8013336:	9100      	str	r1, [sp, #0]
 8013338:	e627      	b.n	8012f8a <MEMS_runMagCal.constprop.21+0x726>
 801333a:	f8dd a018 	ldr.w	sl, [sp, #24]
 801333e:	9a00      	ldr	r2, [sp, #0]
 8013340:	f89b 3024 	ldrb.w	r3, [fp, #36]	; 0x24
 8013344:	431a      	orrs	r2, r3
 8013346:	f88b 2024 	strb.w	r2, [fp, #36]	; 0x24
 801334a:	2a00      	cmp	r2, #0
 801334c:	f43f ae93 	beq.w	8013076 <MEMS_runMagCal.constprop.21+0x812>
 8013350:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 8013354:	9306      	str	r3, [sp, #24]
 8013356:	2b19      	cmp	r3, #25
 8013358:	f67f ae8d 	bls.w	8013076 <MEMS_runMagCal.constprop.21+0x812>
 801335c:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 8013360:	9307      	str	r3, [sp, #28]
 8013362:	2b00      	cmp	r3, #0
 8013364:	f000 84ed 	beq.w	8013d42 <MEMS_runMagCal.constprop.21+0x14de>
 8013368:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 801336c:	2b00      	cmp	r3, #0
 801336e:	f000 84e8 	beq.w	8013d42 <MEMS_runMagCal.constprop.21+0x14de>
 8013372:	eddd 7a05 	vldr	s15, [sp, #20]
 8013376:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 8013698 <MEMS_runMagCal.constprop.21+0xe34>
 801337a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801337e:	ee06 3a90 	vmov	s13, r3
 8013382:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013386:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801338a:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 801338e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013392:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801339a:	f200 84d2 	bhi.w	8013d42 <MEMS_runMagCal.constprop.21+0x14de>
 801339e:	f1ba 0f00 	cmp.w	sl, #0
 80133a2:	f43f ae68 	beq.w	8013076 <MEMS_runMagCal.constprop.21+0x812>
 80133a6:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8013698 <MEMS_runMagCal.constprop.21+0xe34>
 80133aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80133ae:	ed9d 7a07 	vldr	s14, [sp, #28]
 80133b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80133b6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80133ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80133be:	eef4 7ae6 	vcmpe.f32	s15, s13
 80133c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133c6:	bf4c      	ite	mi
 80133c8:	2301      	movmi	r3, #1
 80133ca:	2300      	movpl	r3, #0
 80133cc:	9308      	str	r3, [sp, #32]
 80133ce:	f8db 20c4 	ldr.w	r2, [fp, #196]	; 0xc4
 80133d2:	9203      	str	r2, [sp, #12]
 80133d4:	f8db 20c8 	ldr.w	r2, [fp, #200]	; 0xc8
 80133d8:	9202      	str	r2, [sp, #8]
 80133da:	f8db 20c0 	ldr.w	r2, [fp, #192]	; 0xc0
 80133de:	9204      	str	r2, [sp, #16]
 80133e0:	2300      	movs	r3, #0
 80133e2:	f8db 20cc 	ldr.w	r2, [fp, #204]	; 0xcc
 80133e6:	eddb 8a05 	vldr	s17, [fp, #20]
 80133ea:	f8db 90b8 	ldr.w	r9, [fp, #184]	; 0xb8
 80133ee:	f8db 80bc 	ldr.w	r8, [fp, #188]	; 0xbc
 80133f2:	9201      	str	r2, [sp, #4]
 80133f4:	4619      	mov	r1, r3
 80133f6:	9329      	str	r3, [sp, #164]	; 0xa4
 80133f8:	461d      	mov	r5, r3
 80133fa:	469e      	mov	lr, r3
 80133fc:	932a      	str	r3, [sp, #168]	; 0xa8
 80133fe:	932b      	str	r3, [sp, #172]	; 0xac
 8013400:	932c      	str	r3, [sp, #176]	; 0xb0
 8013402:	932d      	str	r3, [sp, #180]	; 0xb4
 8013404:	f04f 0c01 	mov.w	ip, #1
 8013408:	469a      	mov	sl, r3
 801340a:	f1ae 0320 	sub.w	r3, lr, #32
 801340e:	9a04      	ldr	r2, [sp, #16]
 8013410:	9f03      	ldr	r7, [sp, #12]
 8013412:	fa0c f40e 	lsl.w	r4, ip, lr
 8013416:	fa0c f303 	lsl.w	r3, ip, r3
 801341a:	ea03 0002 	and.w	r0, r3, r2
 801341e:	ea04 0208 	and.w	r2, r4, r8
 8013422:	9200      	str	r2, [sp, #0]
 8013424:	9a01      	ldr	r2, [sp, #4]
 8013426:	ea03 0609 	and.w	r6, r3, r9
 801342a:	4013      	ands	r3, r2
 801342c:	9a00      	ldr	r2, [sp, #0]
 801342e:	4027      	ands	r7, r4
 8013430:	2e00      	cmp	r6, #0
 8013432:	bf0c      	ite	eq
 8013434:	4656      	moveq	r6, sl
 8013436:	f10a 0601 	addne.w	r6, sl, #1
 801343a:	2800      	cmp	r0, #0
 801343c:	bf0c      	ite	eq
 801343e:	4628      	moveq	r0, r5
 8013440:	1c68      	addne	r0, r5, #1
 8013442:	2a00      	cmp	r2, #0
 8013444:	bf0c      	ite	eq
 8013446:	4652      	moveq	r2, sl
 8013448:	f10a 0201 	addne.w	r2, sl, #1
 801344c:	2f00      	cmp	r7, #0
 801344e:	bf18      	it	ne
 8013450:	3501      	addne	r5, #1
 8013452:	fa5f fa8e 	uxtb.w	sl, lr
 8013456:	9f02      	ldr	r7, [sp, #8]
 8013458:	f1ba 0f1f 	cmp.w	sl, #31
 801345c:	ea04 0407 	and.w	r4, r4, r7
 8013460:	b2f6      	uxtb	r6, r6
 8013462:	bf88      	it	hi
 8013464:	461c      	movhi	r4, r3
 8013466:	b2c0      	uxtb	r0, r0
 8013468:	b2d2      	uxtb	r2, r2
 801346a:	f10e 0e01 	add.w	lr, lr, #1
 801346e:	bf94      	ite	ls
 8013470:	4692      	movls	sl, r2
 8013472:	46b2      	movhi	sl, r6
 8013474:	b2ed      	uxtb	r5, r5
 8013476:	bf88      	it	hi
 8013478:	4605      	movhi	r5, r0
 801347a:	2c00      	cmp	r4, #0
 801347c:	bf0c      	ite	eq
 801347e:	460c      	moveq	r4, r1
 8013480:	1c4c      	addne	r4, r1, #1
 8013482:	f1be 0f40 	cmp.w	lr, #64	; 0x40
 8013486:	b2e1      	uxtb	r1, r4
 8013488:	d1bf      	bne.n	801340a <MEMS_runMagCal.constprop.21+0xba6>
 801348a:	4652      	mov	r2, sl
 801348c:	2a05      	cmp	r2, #5
 801348e:	f240 833b 	bls.w	8013b08 <MEMS_runMagCal.constprop.21+0x12a4>
 8013492:	2d05      	cmp	r5, #5
 8013494:	f240 8338 	bls.w	8013b08 <MEMS_runMagCal.constprop.21+0x12a4>
 8013498:	2905      	cmp	r1, #5
 801349a:	f240 8335 	bls.w	8013b08 <MEMS_runMagCal.constprop.21+0x12a4>
 801349e:	f99b 30b2 	ldrsb.w	r3, [fp, #178]	; 0xb2
 80134a2:	f89b 40b1 	ldrb.w	r4, [fp, #177]	; 0xb1
 80134a6:	9300      	str	r3, [sp, #0]
 80134a8:	9b06      	ldr	r3, [sp, #24]
 80134aa:	42a3      	cmp	r3, r4
 80134ac:	f000 855a 	beq.w	8013f64 <MEMS_runMagCal.constprop.21+0x1700>
 80134b0:	9b00      	ldr	r3, [sp, #0]
 80134b2:	1c5d      	adds	r5, r3, #1
 80134b4:	9b06      	ldr	r3, [sp, #24]
 80134b6:	1aea      	subs	r2, r5, r3
 80134b8:	fb92 f3f4 	sdiv	r3, r2, r4
 80134bc:	fb04 2313 	mls	r3, r4, r3, r2
 80134c0:	b219      	sxth	r1, r3
 80134c2:	2900      	cmp	r1, #0
 80134c4:	bfb8      	it	lt
 80134c6:	191b      	addlt	r3, r3, r4
 80134c8:	46a0      	mov	r8, r4
 80134ca:	bfb8      	it	lt
 80134cc:	b219      	sxthlt	r1, r3
 80134ce:	f101 0315 	add.w	r3, r1, #21
 80134d2:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80134d6:	2200      	movs	r2, #0
 80134d8:	f9b3 602a 	ldrsh.w	r6, [r3, #42]	; 0x2a
 80134dc:	f9b3 702c 	ldrsh.w	r7, [r3, #44]	; 0x2c
 80134e0:	f9b3 002e 	ldrsh.w	r0, [r3, #46]	; 0x2e
 80134e4:	f8ad 6050 	strh.w	r6, [sp, #80]	; 0x50
 80134e8:	f8ad 6058 	strh.w	r6, [sp, #88]	; 0x58
 80134ec:	46b1      	mov	r9, r6
 80134ee:	f8ad 7052 	strh.w	r7, [sp, #82]	; 0x52
 80134f2:	f8ad 705a 	strh.w	r7, [sp, #90]	; 0x5a
 80134f6:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80134fa:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 80134fe:	900a      	str	r0, [sp, #40]	; 0x28
 8013500:	9001      	str	r0, [sp, #4]
 8013502:	46ba      	mov	sl, r7
 8013504:	9202      	str	r2, [sp, #8]
 8013506:	9203      	str	r2, [sp, #12]
 8013508:	9204      	str	r2, [sp, #16]
 801350a:	9209      	str	r2, [sp, #36]	; 0x24
 801350c:	920b      	str	r2, [sp, #44]	; 0x2c
 801350e:	920c      	str	r2, [sp, #48]	; 0x30
 8013510:	910d      	str	r1, [sp, #52]	; 0x34
 8013512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013514:	eb03 0e02 	add.w	lr, r3, r2
 8013518:	fb9e f3f8 	sdiv	r3, lr, r8
 801351c:	fb08 e313 	mls	r3, r8, r3, lr
 8013520:	b2db      	uxtb	r3, r3
 8013522:	3315      	adds	r3, #21
 8013524:	eb0b 0ec3 	add.w	lr, fp, r3, lsl #3
 8013528:	f9be e02a 	ldrsh.w	lr, [lr, #42]	; 0x2a
 801352c:	45b6      	cmp	lr, r6
 801352e:	dd02      	ble.n	8013536 <MEMS_runMagCal.constprop.21+0xcd2>
 8013530:	2101      	movs	r1, #1
 8013532:	4676      	mov	r6, lr
 8013534:	9102      	str	r1, [sp, #8]
 8013536:	eb0b 0cc3 	add.w	ip, fp, r3, lsl #3
 801353a:	f9bc c02c 	ldrsh.w	ip, [ip, #44]	; 0x2c
 801353e:	45bc      	cmp	ip, r7
 8013540:	dd02      	ble.n	8013548 <MEMS_runMagCal.constprop.21+0xce4>
 8013542:	2101      	movs	r1, #1
 8013544:	4667      	mov	r7, ip
 8013546:	9104      	str	r1, [sp, #16]
 8013548:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801354c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8013550:	4283      	cmp	r3, r0
 8013552:	dd02      	ble.n	801355a <MEMS_runMagCal.constprop.21+0xcf6>
 8013554:	2101      	movs	r1, #1
 8013556:	4618      	mov	r0, r3
 8013558:	9103      	str	r1, [sp, #12]
 801355a:	45ce      	cmp	lr, r9
 801355c:	bfba      	itte	lt
 801355e:	2101      	movlt	r1, #1
 8013560:	910b      	strlt	r1, [sp, #44]	; 0x2c
 8013562:	46ce      	movge	lr, r9
 8013564:	45d4      	cmp	ip, sl
 8013566:	bfbc      	itt	lt
 8013568:	2101      	movlt	r1, #1
 801356a:	910c      	strlt	r1, [sp, #48]	; 0x30
 801356c:	9901      	ldr	r1, [sp, #4]
 801356e:	bfa8      	it	ge
 8013570:	46d4      	movge	ip, sl
 8013572:	428b      	cmp	r3, r1
 8013574:	da03      	bge.n	801357e <MEMS_runMagCal.constprop.21+0xd1a>
 8013576:	930a      	str	r3, [sp, #40]	; 0x28
 8013578:	9301      	str	r3, [sp, #4]
 801357a:	2301      	movs	r3, #1
 801357c:	9309      	str	r3, [sp, #36]	; 0x24
 801357e:	3201      	adds	r2, #1
 8013580:	9906      	ldr	r1, [sp, #24]
 8013582:	b2d3      	uxtb	r3, r2
 8013584:	4299      	cmp	r1, r3
 8013586:	46f1      	mov	r9, lr
 8013588:	46e2      	mov	sl, ip
 801358a:	d8c2      	bhi.n	8013512 <MEMS_runMagCal.constprop.21+0xcae>
 801358c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801358e:	2b00      	cmp	r3, #0
 8013590:	f040 84e4 	bne.w	8013f5c <MEMS_runMagCal.constprop.21+0x16f8>
 8013594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013596:	b10b      	cbz	r3, 801359c <MEMS_runMagCal.constprop.21+0xd38>
 8013598:	f8ad e058 	strh.w	lr, [sp, #88]	; 0x58
 801359c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801359e:	b11b      	cbz	r3, 80135a8 <MEMS_runMagCal.constprop.21+0xd44>
 80135a0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80135a4:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 80135a8:	9b04      	ldr	r3, [sp, #16]
 80135aa:	b10b      	cbz	r3, 80135b0 <MEMS_runMagCal.constprop.21+0xd4c>
 80135ac:	f8ad 7052 	strh.w	r7, [sp, #82]	; 0x52
 80135b0:	9b03      	ldr	r3, [sp, #12]
 80135b2:	b10b      	cbz	r3, 80135b8 <MEMS_runMagCal.constprop.21+0xd54>
 80135b4:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80135b8:	9b02      	ldr	r3, [sp, #8]
 80135ba:	b10b      	cbz	r3, 80135c0 <MEMS_runMagCal.constprop.21+0xd5c>
 80135bc:	f8ad 6050 	strh.w	r6, [sp, #80]	; 0x50
 80135c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80135c4:	eec7 9aa8 	vdiv.f32	s19, s15, s17
 80135c8:	f8bd 6052 	ldrh.w	r6, [sp, #82]	; 0x52
 80135cc:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
 80135d0:	f8bd 7050 	ldrh.w	r7, [sp, #80]	; 0x50
 80135d4:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 80135d8:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 80135dc:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 80135e0:	1ab2      	subs	r2, r6, r2
 80135e2:	f89b 6064 	ldrb.w	r6, [fp, #100]	; 0x64
 80135e6:	1afb      	subs	r3, r7, r3
 80135e8:	1a41      	subs	r1, r0, r1
 80135ea:	b21b      	sxth	r3, r3
 80135ec:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 801369c <MEMS_runMagCal.constprop.21+0xe38>
 80135f0:	b212      	sxth	r2, r2
 80135f2:	ee29 5a85 	vmul.f32	s10, s19, s10
 80135f6:	b209      	sxth	r1, r1
 80135f8:	2e00      	cmp	r6, #0
 80135fa:	f040 846e 	bne.w	8013eda <MEMS_runMagCal.constprop.21+0x1676>
 80135fe:	f89b 007c 	ldrb.w	r0, [fp, #124]	; 0x7c
 8013602:	fab0 f080 	clz	r0, r0
 8013606:	0940      	lsrs	r0, r0, #5
 8013608:	ee07 3a90 	vmov	s15, r3
 801360c:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8013610:	ee25 6a06 	vmul.f32	s12, s10, s12
 8013614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013618:	eef4 7ac6 	vcmpe.f32	s15, s12
 801361c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013620:	f300 8442 	bgt.w	8013ea8 <MEMS_runMagCal.constprop.21+0x1644>
 8013624:	ee07 2a10 	vmov	s14, r2
 8013628:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801362c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8013630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013634:	f100 8438 	bmi.w	8013ea8 <MEMS_runMagCal.constprop.21+0x1644>
 8013638:	ee06 1a90 	vmov	s13, r1
 801363c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013640:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8013644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013648:	f100 842e 	bmi.w	8013ea8 <MEMS_runMagCal.constprop.21+0x1644>
 801364c:	4299      	cmp	r1, r3
 801364e:	460e      	mov	r6, r1
 8013650:	bfa8      	it	ge
 8013652:	461e      	movge	r6, r3
 8013654:	429a      	cmp	r2, r3
 8013656:	4692      	mov	sl, r2
 8013658:	bfb8      	it	lt
 801365a:	469a      	movlt	sl, r3
 801365c:	4296      	cmp	r6, r2
 801365e:	bfa8      	it	ge
 8013660:	4616      	movge	r6, r2
 8013662:	458a      	cmp	sl, r1
 8013664:	bfb8      	it	lt
 8013666:	468a      	movlt	sl, r1
 8013668:	459a      	cmp	sl, r3
 801366a:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
 801366e:	dd02      	ble.n	8013676 <MEMS_runMagCal.constprop.21+0xe12>
 8013670:	429e      	cmp	r6, r3
 8013672:	f2c0 8482 	blt.w	8013f7a <MEMS_runMagCal.constprop.21+0x1716>
 8013676:	4633      	mov	r3, r6
 8013678:	2700      	movs	r7, #0
 801367a:	4592      	cmp	sl, r2
 801367c:	dd02      	ble.n	8013684 <MEMS_runMagCal.constprop.21+0xe20>
 801367e:	4296      	cmp	r6, r2
 8013680:	f2c0 855d 	blt.w	801413e <MEMS_runMagCal.constprop.21+0x18da>
 8013684:	4551      	cmp	r1, sl
 8013686:	da02      	bge.n	801368e <MEMS_runMagCal.constprop.21+0xe2a>
 8013688:	42b1      	cmp	r1, r6
 801368a:	f300 8550 	bgt.w	801412e <MEMS_runMagCal.constprop.21+0x18ca>
 801368e:	2f00      	cmp	r7, #0
 8013690:	f040 854e 	bne.w	8014130 <MEMS_runMagCal.constprop.21+0x18cc>
 8013694:	e00a      	b.n	80136ac <MEMS_runMagCal.constprop.21+0xe48>
 8013696:	bf00      	nop
 8013698:	3a83126f 	.word	0x3a83126f
 801369c:	42340000 	.word	0x42340000
 80136a0:	3faccccd 	.word	0x3faccccd
 80136a4:	00000000 	.word	0x00000000
 80136a8:	358637bd 	.word	0x358637bd
 80136ac:	2800      	cmp	r0, #0
 80136ae:	f000 8504 	beq.w	80140ba <MEMS_runMagCal.constprop.21+0x1856>
 80136b2:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80136b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ba:	f300 84fa 	bgt.w	80140b2 <MEMS_runMagCal.constprop.21+0x184e>
 80136be:	eeb4 5ac7 	vcmpe.f32	s10, s14
 80136c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136c6:	f300 84f4 	bgt.w	80140b2 <MEMS_runMagCal.constprop.21+0x184e>
 80136ca:	eeb4 5ae6 	vcmpe.f32	s10, s13
 80136ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136d2:	bfcc      	ite	gt
 80136d4:	2301      	movgt	r3, #1
 80136d6:	2300      	movle	r3, #0
 80136d8:	9300      	str	r3, [sp, #0]
 80136da:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 80136a0 <MEMS_runMagCal.constprop.21+0xe3c>
 80136de:	ee05 aa90 	vmov	s11, sl
 80136e2:	ee25 6a06 	vmul.f32	s12, s10, s12
 80136e6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80136ea:	eef4 5ac6 	vcmpe.f32	s11, s12
 80136ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136f2:	db1e      	blt.n	8013732 <MEMS_runMagCal.constprop.21+0xece>
 80136f4:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80136f8:	ee05 3a90 	vmov	s11, r3
 80136fc:	eeb7 6a02 	vmov.f32	s12, #114	; 0x3f900000  1.125
 8013700:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013704:	ee25 6a06 	vmul.f32	s12, s10, s12
 8013708:	eef4 5ac6 	vcmpe.f32	s11, s12
 801370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013710:	db0f      	blt.n	8013732 <MEMS_runMagCal.constprop.21+0xece>
 8013712:	ebba 0f46 	cmp.w	sl, r6, lsl #1
 8013716:	da0c      	bge.n	8013732 <MEMS_runMagCal.constprop.21+0xece>
 8013718:	ee06 6a10 	vmov	s12, r6
 801371c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013720:	eef7 5a04 	vmov.f32	s11, #116	; 0x3fa00000  1.250
 8013724:	ee26 6a25 	vmul.f32	s12, s12, s11
 8013728:	eeb4 5ac6 	vcmpe.f32	s10, s12
 801372c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013730:	d419      	bmi.n	8013766 <MEMS_runMagCal.constprop.21+0xf02>
 8013732:	eeb7 6a02 	vmov.f32	s12, #114	; 0x3f900000  1.125
 8013736:	ee67 7a86 	vmul.f32	s15, s15, s12
 801373a:	eeb4 5ae7 	vcmpe.f32	s10, s15
 801373e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013742:	f300 81e1 	bgt.w	8013b08 <MEMS_runMagCal.constprop.21+0x12a4>
 8013746:	ee27 7a06 	vmul.f32	s14, s14, s12
 801374a:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801374e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013752:	f300 81d9 	bgt.w	8013b08 <MEMS_runMagCal.constprop.21+0x12a4>
 8013756:	ee66 6a86 	vmul.f32	s13, s13, s12
 801375a:	eeb4 5ae6 	vcmpe.f32	s10, s13
 801375e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013762:	f300 81d1 	bgt.w	8013b08 <MEMS_runMagCal.constprop.21+0x12a4>
 8013766:	9b06      	ldr	r3, [sp, #24]
 8013768:	42a3      	cmp	r3, r4
 801376a:	f000 849a 	beq.w	80140a2 <MEMS_runMagCal.constprop.21+0x183e>
 801376e:	1aeb      	subs	r3, r5, r3
 8013770:	fb93 f2f8 	sdiv	r2, r3, r8
 8013774:	fb08 3212 	mls	r2, r8, r2, r3
 8013778:	b213      	sxth	r3, r2
 801377a:	2b00      	cmp	r3, #0
 801377c:	bfbc      	itt	lt
 801377e:	18a3      	addlt	r3, r4, r2
 8013780:	b21b      	sxthlt	r3, r3
 8013782:	b25b      	sxtb	r3, r3
 8013784:	f04f 0900 	mov.w	r9, #0
 8013788:	f103 0e01 	add.w	lr, r3, #1
 801378c:	2301      	movs	r3, #1
 801378e:	f8cd 9004 	str.w	r9, [sp, #4]
 8013792:	9302      	str	r3, [sp, #8]
 8013794:	f10e 33ff 	add.w	r3, lr, #4294967295
 8013798:	fb93 f2f8 	sdiv	r2, r3, r8
 801379c:	fb08 3212 	mls	r2, r8, r2, r3
 80137a0:	b251      	sxtb	r1, r2
 80137a2:	2900      	cmp	r1, #0
 80137a4:	bfb8      	it	lt
 80137a6:	1912      	addlt	r2, r2, r4
 80137a8:	fb9e f3f8 	sdiv	r3, lr, r8
 80137ac:	fb08 e313 	mls	r3, r8, r3, lr
 80137b0:	bfb8      	it	lt
 80137b2:	b251      	sxtblt	r1, r2
 80137b4:	b25b      	sxtb	r3, r3
 80137b6:	3104      	adds	r1, #4
 80137b8:	3304      	adds	r3, #4
 80137ba:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
 80137be:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 80137c2:	f9b2 20b2 	ldrsh.w	r2, [r2, #178]	; 0xb2
 80137c6:	f9b0 00b2 	ldrsh.w	r0, [r0, #178]	; 0xb2
 80137ca:	1a16      	subs	r6, r2, r0
 80137cc:	bf4c      	ite	mi
 80137ce:	1a82      	submi	r2, r0, r2
 80137d0:	b232      	sxthpl	r2, r6
 80137d2:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 80137d6:	eb0b 06c3 	add.w	r6, fp, r3, lsl #3
 80137da:	f9b0 00b4 	ldrsh.w	r0, [r0, #180]	; 0xb4
 80137de:	f9b6 70b4 	ldrsh.w	r7, [r6, #180]	; 0xb4
 80137e2:	bf48      	it	mi
 80137e4:	b212      	sxthmi	r2, r2
 80137e6:	1a3e      	subs	r6, r7, r0
 80137e8:	bf44      	itt	mi
 80137ea:	1bc0      	submi	r0, r0, r7
 80137ec:	b206      	sxthmi	r6, r0
 80137ee:	eb0b 07c3 	add.w	r7, fp, r3, lsl #3
 80137f2:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 80137f6:	f9b7 70b6 	ldrsh.w	r7, [r7, #182]	; 0xb6
 80137fa:	f9b0 00b6 	ldrsh.w	r0, [r0, #182]	; 0xb6
 80137fe:	bf58      	it	pl
 8013800:	b236      	sxthpl	r6, r6
 8013802:	ebb7 0c00 	subs.w	ip, r7, r0
 8013806:	bf48      	it	mi
 8013808:	eba0 0c07 	submi.w	ip, r0, r7
 801380c:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013810:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 8013814:	f8b3 10b0 	ldrh.w	r1, [r3, #176]	; 0xb0
 8013818:	f8b0 30b0 	ldrh.w	r3, [r0, #176]	; 0xb0
 801381c:	1ac9      	subs	r1, r1, r3
 801381e:	b209      	sxth	r1, r1
 8013820:	2900      	cmp	r1, #0
 8013822:	fa0f fc8c 	sxth.w	ip, ip
 8013826:	dd21      	ble.n	801386c <MEMS_runMagCal.constprop.21+0x1008>
 8013828:	1993      	adds	r3, r2, r6
 801382a:	4463      	add	r3, ip
 801382c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013830:	fb02 f303 	mul.w	r3, r2, r3
 8013834:	ee07 3a90 	vmov	s15, r3
 8013838:	ee07 1a10 	vmov	s14, r1
 801383c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013840:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013844:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8013848:	9b01      	ldr	r3, [sp, #4]
 801384a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801384e:	3301      	adds	r3, #1
 8013850:	b2db      	uxtb	r3, r3
 8013852:	9301      	str	r3, [sp, #4]
 8013854:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8013858:	edcd 7a03 	vstr	s15, [sp, #12]
 801385c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013860:	2b96      	cmp	r3, #150	; 0x96
 8013862:	bfc4      	itt	gt
 8013864:	f109 0901 	addgt.w	r9, r9, #1
 8013868:	fa5f f989 	uxtbgt.w	r9, r9
 801386c:	9b02      	ldr	r3, [sp, #8]
 801386e:	9a06      	ldr	r2, [sp, #24]
 8013870:	3301      	adds	r3, #1
 8013872:	b2db      	uxtb	r3, r3
 8013874:	429a      	cmp	r2, r3
 8013876:	9302      	str	r3, [sp, #8]
 8013878:	f10e 0e01 	add.w	lr, lr, #1
 801387c:	d88a      	bhi.n	8013794 <MEMS_runMagCal.constprop.21+0xf30>
 801387e:	9b01      	ldr	r3, [sp, #4]
 8013880:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8013884:	4599      	cmp	r9, r3
 8013886:	f340 813f 	ble.w	8013b08 <MEMS_runMagCal.constprop.21+0x12a4>
 801388a:	9b08      	ldr	r3, [sp, #32]
 801388c:	b92b      	cbnz	r3, 801389a <MEMS_runMagCal.constprop.21+0x1036>
 801388e:	f89b 307c 	ldrb.w	r3, [fp, #124]	; 0x7c
 8013892:	3b02      	subs	r3, #2
 8013894:	2b01      	cmp	r3, #1
 8013896:	f240 83a4 	bls.w	8013fe2 <MEMS_runMagCal.constprop.21+0x177e>
 801389a:	a82e      	add	r0, sp, #184	; 0xb8
 801389c:	2220      	movs	r2, #32
 801389e:	2100      	movs	r1, #0
 80138a0:	f00b fa69 	bl	801ed76 <memset>
 80138a4:	2300      	movs	r3, #0
 80138a6:	931a      	str	r3, [sp, #104]	; 0x68
 80138a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80138aa:	931c      	str	r3, [sp, #112]	; 0x70
 80138ac:	9b06      	ldr	r3, [sp, #24]
 80138ae:	42a3      	cmp	r3, r4
 80138b0:	f000 83f1 	beq.w	8014096 <MEMS_runMagCal.constprop.21+0x1832>
 80138b4:	1aed      	subs	r5, r5, r3
 80138b6:	fb95 f3f4 	sdiv	r3, r5, r4
 80138ba:	fb04 5313 	mls	r3, r4, r3, r5
 80138be:	b219      	sxth	r1, r3
 80138c0:	2900      	cmp	r1, #0
 80138c2:	bfbc      	itt	lt
 80138c4:	191b      	addlt	r3, r3, r4
 80138c6:	b219      	sxthlt	r1, r3
 80138c8:	9b06      	ldr	r3, [sp, #24]
 80138ca:	b39b      	cbz	r3, 8013934 <MEMS_runMagCal.constprop.21+0x10d0>
 80138cc:	ed5f 7a8b 	vldr	s15, [pc, #-556]	; 80136a4 <MEMS_runMagCal.constprop.21+0xe40>
 80138d0:	2000      	movs	r0, #0
 80138d2:	eeb0 7a67 	vmov.f32	s14, s15
 80138d6:	eef0 6a67 	vmov.f32	s13, s15
 80138da:	180a      	adds	r2, r1, r0
 80138dc:	fb92 f3f4 	sdiv	r3, r2, r4
 80138e0:	fb04 2313 	mls	r3, r4, r3, r2
 80138e4:	b2db      	uxtb	r3, r3
 80138e6:	3304      	adds	r3, #4
 80138e8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80138ec:	3001      	adds	r0, #1
 80138ee:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	; 0xb2
 80138f2:	ee05 2a10 	vmov	s10, r2
 80138f6:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	; 0xb4
 80138fa:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 80138fe:	ee05 2a90 	vmov	s11, r2
 8013902:	ee06 3a10 	vmov	s12, r3
 8013906:	9a06      	ldr	r2, [sp, #24]
 8013908:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801390c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013910:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013914:	b2c3      	uxtb	r3, r0
 8013916:	4293      	cmp	r3, r2
 8013918:	ee76 6a85 	vadd.f32	s13, s13, s10
 801391c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013920:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013924:	d3d9      	bcc.n	80138da <MEMS_runMagCal.constprop.21+0x1076>
 8013926:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 801392a:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 801392e:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
 8013932:	4613      	mov	r3, r2
 8013934:	eddd 7a06 	vldr	s15, [sp, #24]
 8013938:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 801393c:	ed9d 7a1b 	vldr	s14, [sp, #108]	; 0x6c
 8013940:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8013944:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8013948:	eec6 1aa4 	vdiv.f32	s3, s13, s9
 801394c:	ee87 2a24 	vdiv.f32	s4, s14, s9
 8013950:	eec7 2aa4 	vdiv.f32	s5, s15, s9
 8013954:	edcd 1a1a 	vstr	s3, [sp, #104]	; 0x68
 8013958:	ed8d 2a1b 	vstr	s4, [sp, #108]	; 0x6c
 801395c:	edcd 2a1c 	vstr	s5, [sp, #112]	; 0x70
 8013960:	2b00      	cmp	r3, #0
 8013962:	f001 830e 	beq.w	8014f82 <MEMS_runMagCal.constprop.21+0x271e>
 8013966:	ed5f 7ab1 	vldr	s15, [pc, #-708]	; 80136a4 <MEMS_runMagCal.constprop.21+0xe40>
 801396a:	2000      	movs	r0, #0
 801396c:	eeb0 4a67 	vmov.f32	s8, s15
 8013970:	eef0 6a67 	vmov.f32	s13, s15
 8013974:	eef0 3a67 	vmov.f32	s7, s15
 8013978:	eeb0 3a67 	vmov.f32	s6, s15
 801397c:	eeb0 7a67 	vmov.f32	s14, s15
 8013980:	180a      	adds	r2, r1, r0
 8013982:	fb92 f3f4 	sdiv	r3, r2, r4
 8013986:	fb04 2313 	mls	r3, r4, r3, r2
 801398a:	b2db      	uxtb	r3, r3
 801398c:	3304      	adds	r3, #4
 801398e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013992:	3001      	adds	r0, #1
 8013994:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	; 0xb2
 8013998:	ee05 2a10 	vmov	s10, r2
 801399c:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	; 0xb4
 80139a0:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 80139a4:	ee05 2a90 	vmov	s11, r2
 80139a8:	ee06 3a10 	vmov	s12, r3
 80139ac:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80139b0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80139b4:	ee35 5a61 	vsub.f32	s10, s10, s3
 80139b8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80139bc:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80139c0:	ee36 6a62 	vsub.f32	s12, s12, s5
 80139c4:	ee25 1a05 	vmul.f32	s2, s10, s10
 80139c8:	9a06      	ldr	r2, [sp, #24]
 80139ca:	ee65 0a25 	vmul.f32	s1, s10, s11
 80139ce:	b2c3      	uxtb	r3, r0
 80139d0:	ee25 5a06 	vmul.f32	s10, s10, s12
 80139d4:	ee37 7a01 	vadd.f32	s14, s14, s2
 80139d8:	ee25 1aa5 	vmul.f32	s2, s11, s11
 80139dc:	ee65 5a86 	vmul.f32	s11, s11, s12
 80139e0:	ee26 6a06 	vmul.f32	s12, s12, s12
 80139e4:	4293      	cmp	r3, r2
 80139e6:	ee33 3a20 	vadd.f32	s6, s6, s1
 80139ea:	ee73 3a85 	vadd.f32	s7, s7, s10
 80139ee:	ee76 6a81 	vadd.f32	s13, s13, s2
 80139f2:	ee34 4a25 	vadd.f32	s8, s8, s11
 80139f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80139fa:	d3c1      	bcc.n	8013980 <MEMS_runMagCal.constprop.21+0x111c>
 80139fc:	ee23 6aa3 	vmul.f32	s12, s7, s7
 8013a00:	ee63 5a03 	vmul.f32	s11, s6, s6
 8013a04:	ee24 5a04 	vmul.f32	s10, s8, s8
 8013a08:	ee75 5a86 	vadd.f32	s11, s11, s12
 8013a0c:	ee37 6a26 	vadd.f32	s12, s14, s13
 8013a10:	ee75 5a85 	vadd.f32	s11, s11, s10
 8013a14:	ed1f 5adc 	vldr	s10, [pc, #-880]	; 80136a8 <MEMS_runMagCal.constprop.21+0xe44>
 8013a18:	ed8d 7a2e 	vstr	s14, [sp, #184]	; 0xb8
 8013a1c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8013a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a24:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 8013a28:	edcd 3a30 	vstr	s7, [sp, #192]	; 0xc0
 8013a2c:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8013a30:	ed8d 4a32 	vstr	s8, [sp, #200]	; 0xc8
 8013a34:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
 8013a38:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013a3c:	f141 8200 	bpl.w	8014e40 <MEMS_runMagCal.constprop.21+0x25dc>
 8013a40:	eeb0 7ac7 	vabs.f32	s14, s14
 8013a44:	eef0 6ae6 	vabs.f32	s13, s13
 8013a48:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a50:	bf54      	ite	pl
 8013a52:	eeb0 9a66 	vmovpl.f32	s18, s13
 8013a56:	eeb0 9a47 	vmovmi.f32	s18, s14
 8013a5a:	ee86 0a24 	vdiv.f32	s0, s12, s9
 8013a5e:	eeb0 8ae7 	vabs.f32	s16, s15
 8013a62:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8013a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a6a:	eef4 6a47 	vcmp.f32	s13, s14
 8013a6e:	bfd8      	it	le
 8013a70:	eeb0 9a48 	vmovle.f32	s18, s16
 8013a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a78:	bf48      	it	mi
 8013a7a:	eef0 6a47 	vmovmi.f32	s13, s14
 8013a7e:	eeb4 8a66 	vcmp.f32	s16, s13
 8013a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a86:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013a8a:	bf48      	it	mi
 8013a8c:	eeb0 8a66 	vmovmi.f32	s16, s13
 8013a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a94:	eeb1 aac0 	vsqrt.f32	s20, s0
 8013a98:	d501      	bpl.n	8013a9e <MEMS_runMagCal.constprop.21+0x123a>
 8013a9a:	f008 fe4f 	bl	801c73c <sqrtf>
 8013a9e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8013aa2:	ee29 7a07 	vmul.f32	s14, s18, s14
 8013aa6:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8013aaa:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ab2:	d41b      	bmi.n	8013aec <MEMS_runMagCal.constprop.21+0x1288>
 8013ab4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8013ab8:	ee29 9a07 	vmul.f32	s18, s18, s14
 8013abc:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8013ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ac4:	dd03      	ble.n	8013ace <MEMS_runMagCal.constprop.21+0x126a>
 8013ac6:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 8013aca:	2b22      	cmp	r3, #34	; 0x22
 8013acc:	d90e      	bls.n	8013aec <MEMS_runMagCal.constprop.21+0x1288>
 8013ace:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8013db4 <MEMS_runMagCal.constprop.21+0x1550>
 8013ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ada:	dc07      	bgt.n	8013aec <MEMS_runMagCal.constprop.21+0x1288>
 8013adc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8013ae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ae8:	f140 832f 	bpl.w	801414a <MEMS_runMagCal.constprop.21+0x18e6>
 8013aec:	eddd 7a05 	vldr	s15, [sp, #20]
 8013af0:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8013af4:	eddf 7ab0 	vldr	s15, [pc, #704]	; 8013db8 <MEMS_runMagCal.constprop.21+0x1554>
 8013af8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013afc:	f008 fb0a 	bl	801c114 <roundf>
 8013b00:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8013b04:	ed8b 0a0a 	vstr	s0, [fp, #40]	; 0x28
 8013b08:	2300      	movs	r3, #0
 8013b0a:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
 8013b0e:	f7ff bab2 	b.w	8013076 <MEMS_runMagCal.constprop.21+0x812>
 8013b12:	f242 3228 	movw	r2, #9000	; 0x2328
 8013b16:	4295      	cmp	r5, r2
 8013b18:	f89b 00b0 	ldrb.w	r0, [fp, #176]	; 0xb0
 8013b1c:	f89b 10b1 	ldrb.w	r1, [fp, #177]	; 0xb1
 8013b20:	f99b 20b2 	ldrsb.w	r2, [fp, #178]	; 0xb2
 8013b24:	bf1a      	itte	ne
 8013b26:	f5a5 550c 	subne.w	r5, r5, #8960	; 0x2300
 8013b2a:	3d28      	subne	r5, #40	; 0x28
 8013b2c:	2500      	moveq	r5, #0
 8013b2e:	4288      	cmp	r0, r1
 8013b30:	f102 0201 	add.w	r2, r2, #1
 8013b34:	f000 8118 	beq.w	8013d68 <MEMS_runMagCal.constprop.21+0x1504>
 8013b38:	1a12      	subs	r2, r2, r0
 8013b3a:	fb92 f4f1 	sdiv	r4, r2, r1
 8013b3e:	fb01 2214 	mls	r2, r1, r4, r2
 8013b42:	b214      	sxth	r4, r2
 8013b44:	2c00      	cmp	r4, #0
 8013b46:	bfbc      	itt	lt
 8013b48:	1852      	addlt	r2, r2, r1
 8013b4a:	b214      	sxthlt	r4, r2
 8013b4c:	b207      	sxth	r7, r0
 8013b4e:	b397      	cbz	r7, 8013bb6 <MEMS_runMagCal.constprop.21+0x1352>
 8013b50:	2200      	movs	r2, #0
 8013b52:	1b5b      	subs	r3, r3, r5
 8013b54:	b29e      	uxth	r6, r3
 8013b56:	9200      	str	r2, [sp, #0]
 8013b58:	4696      	mov	lr, r2
 8013b5a:	e003      	b.n	8013b64 <MEMS_runMagCal.constprop.21+0x1300>
 8013b5c:	3201      	adds	r2, #1
 8013b5e:	b213      	sxth	r3, r2
 8013b60:	429f      	cmp	r7, r3
 8013b62:	dd1e      	ble.n	8013ba2 <MEMS_runMagCal.constprop.21+0x133e>
 8013b64:	eb04 0c02 	add.w	ip, r4, r2
 8013b68:	fb9c f3f1 	sdiv	r3, ip, r1
 8013b6c:	fb01 c313 	mls	r3, r1, r3, ip
 8013b70:	b2db      	uxtb	r3, r3
 8013b72:	3304      	adds	r3, #4
 8013b74:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013b78:	f8b3 c0b0 	ldrh.w	ip, [r3, #176]	; 0xb0
 8013b7c:	44b4      	add	ip, r6
 8013b7e:	fa0f fc8c 	sxth.w	ip, ip
 8013b82:	f1bc 0f00 	cmp.w	ip, #0
 8013b86:	f8a3 c0b0 	strh.w	ip, [r3, #176]	; 0xb0
 8013b8a:	dae7      	bge.n	8013b5c <MEMS_runMagCal.constprop.21+0x12f8>
 8013b8c:	1e43      	subs	r3, r0, #1
 8013b8e:	b128      	cbz	r0, 8013b9c <MEMS_runMagCal.constprop.21+0x1338>
 8013b90:	2001      	movs	r0, #1
 8013b92:	9000      	str	r0, [sp, #0]
 8013b94:	f04f 0e01 	mov.w	lr, #1
 8013b98:	b2d8      	uxtb	r0, r3
 8013b9a:	e7df      	b.n	8013b5c <MEMS_runMagCal.constprop.21+0x12f8>
 8013b9c:	f04f 0e01 	mov.w	lr, #1
 8013ba0:	e7dc      	b.n	8013b5c <MEMS_runMagCal.constprop.21+0x12f8>
 8013ba2:	9b00      	ldr	r3, [sp, #0]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	f040 8200 	bne.w	8013faa <MEMS_runMagCal.constprop.21+0x1746>
 8013baa:	f1be 0f00 	cmp.w	lr, #0
 8013bae:	f040 80f4 	bne.w	8013d9a <MEMS_runMagCal.constprop.21+0x1536>
 8013bb2:	f89b 00b0 	ldrb.w	r0, [fp, #176]	; 0xb0
 8013bb6:	f8cb 50b4 	str.w	r5, [fp, #180]	; 0xb4
 8013bba:	f7ff b931 	b.w	8012e20 <MEMS_runMagCal.constprop.21+0x5bc>
 8013bbe:	f1ba 0f00 	cmp.w	sl, #0
 8013bc2:	f47f a946 	bne.w	8012e52 <MEMS_runMagCal.constprop.21+0x5ee>
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	9300      	str	r3, [sp, #0]
 8013bca:	461a      	mov	r2, r3
 8013bcc:	f7ff bbb8 	b.w	8013340 <MEMS_runMagCal.constprop.21+0xadc>
 8013bd0:	42b8      	cmp	r0, r7
 8013bd2:	f000 80f7 	beq.w	8013dc4 <MEMS_runMagCal.constprop.21+0x1560>
 8013bd6:	2c03      	cmp	r4, #3
 8013bd8:	f47f a8f3 	bne.w	8012dc2 <MEMS_runMagCal.constprop.21+0x55e>
 8013bdc:	eddb 7a0c 	vldr	s15, [fp, #48]	; 0x30
 8013be0:	eddf 6a75 	vldr	s13, [pc, #468]	; 8013db8 <MEMS_runMagCal.constprop.21+0x1554>
 8013be4:	ed9b 7a0a 	vldr	s14, [fp, #40]	; 0x28
 8013be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013bf0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013bf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bfc:	f77f a8e1 	ble.w	8012dc2 <MEMS_runMagCal.constprop.21+0x55e>
 8013c00:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	f43f a8dc 	beq.w	8012dc2 <MEMS_runMagCal.constprop.21+0x55e>
 8013c0a:	eddd 7a05 	vldr	s15, [sp, #20]
 8013c0e:	330a      	adds	r3, #10
 8013c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c14:	ee07 3a10 	vmov	s14, r3
 8013c18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013c1c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c28:	f77f a8cb 	ble.w	8012dc2 <MEMS_runMagCal.constprop.21+0x55e>
 8013c2c:	f89b 3025 	ldrb.w	r3, [fp, #37]	; 0x25
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	f47f a8c6 	bne.w	8012dc2 <MEMS_runMagCal.constprop.21+0x55e>
 8013c36:	f89b 3064 	ldrb.w	r3, [fp, #100]	; 0x64
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	f43f aa1b 	beq.w	8013076 <MEMS_runMagCal.constprop.21+0x812>
 8013c40:	f89b 306c 	ldrb.w	r3, [fp, #108]	; 0x6c
 8013c44:	2bff      	cmp	r3, #255	; 0xff
 8013c46:	f47f aa16 	bne.w	8013076 <MEMS_runMagCal.constprop.21+0x812>
 8013c4a:	f7ff b8ba 	b.w	8012dc2 <MEMS_runMagCal.constprop.21+0x55e>
 8013c4e:	4613      	mov	r3, r2
 8013c50:	2201      	movs	r2, #1
 8013c52:	fa02 fe03 	lsl.w	lr, r2, r3
 8013c56:	ea0e 0e01 	and.w	lr, lr, r1
 8013c5a:	f7ff bad1 	b.w	8013200 <MEMS_runMagCal.constprop.21+0x99c>
 8013c5e:	4613      	mov	r3, r2
 8013c60:	2201      	movs	r2, #1
 8013c62:	fa02 f303 	lsl.w	r3, r2, r3
 8013c66:	4003      	ands	r3, r0
 8013c68:	f7ff bae6 	b.w	8013238 <MEMS_runMagCal.constprop.21+0x9d4>
 8013c6c:	4613      	mov	r3, r2
 8013c6e:	2201      	movs	r2, #1
 8013c70:	fa02 f303 	lsl.w	r3, r2, r3
 8013c74:	4019      	ands	r1, r3
 8013c76:	f7ff bad1 	b.w	801321c <MEMS_runMagCal.constprop.21+0x9b8>
 8013c7a:	b111      	cbz	r1, 8013c82 <MEMS_runMagCal.constprop.21+0x141e>
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	f47f a984 	bne.w	8012f8a <MEMS_runMagCal.constprop.21+0x726>
 8013c82:	f89b 00b1 	ldrb.w	r0, [fp, #177]	; 0xb1
 8013c86:	f99b 10b2 	ldrsb.w	r1, [fp, #178]	; 0xb2
 8013c8a:	4285      	cmp	r5, r0
 8013c8c:	f000 817b 	beq.w	8013f86 <MEMS_runMagCal.constprop.21+0x1722>
 8013c90:	3101      	adds	r1, #1
 8013c92:	eba1 0e05 	sub.w	lr, r1, r5
 8013c96:	fb9e f3f0 	sdiv	r3, lr, r0
 8013c9a:	fb00 e313 	mls	r3, r0, r3, lr
 8013c9e:	fa0f fe83 	sxth.w	lr, r3
 8013ca2:	f1be 0f00 	cmp.w	lr, #0
 8013ca6:	bfb8      	it	lt
 8013ca8:	181b      	addlt	r3, r3, r0
 8013caa:	4602      	mov	r2, r0
 8013cac:	bfb8      	it	lt
 8013cae:	fa0f fe83 	sxthlt.w	lr, r3
 8013cb2:	f04f 0c00 	mov.w	ip, #0
 8013cb6:	9007      	str	r0, [sp, #28]
 8013cb8:	9108      	str	r1, [sp, #32]
 8013cba:	eb0e 000c 	add.w	r0, lr, ip
 8013cbe:	fb90 f3f2 	sdiv	r3, r0, r2
 8013cc2:	fb02 0313 	mls	r3, r2, r3, r0
 8013cc6:	b2db      	uxtb	r3, r3
 8013cc8:	3304      	adds	r3, #4
 8013cca:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013cce:	f10c 0c01 	add.w	ip, ip, #1
 8013cd2:	f9b3 00b2 	ldrsh.w	r0, [r3, #178]	; 0xb2
 8013cd6:	f9b3 10b4 	ldrsh.w	r1, [r3, #180]	; 0xb4
 8013cda:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8013cde:	1a20      	subs	r0, r4, r0
 8013ce0:	ee06 0a90 	vmov	s13, r0
 8013ce4:	1a70      	subs	r0, r6, r1
 8013ce6:	ee07 0a10 	vmov	s14, r0
 8013cea:	ebaa 0303 	sub.w	r3, sl, r3
 8013cee:	ee07 3a90 	vmov	s15, r3
 8013cf2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013cf6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013cfa:	eef0 6ae6 	vabs.f32	s13, s13
 8013cfe:	eeb0 7ac7 	vabs.f32	s14, s14
 8013d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d06:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013d0a:	eef0 7ae7 	vabs.f32	s15, s15
 8013d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d12:	fa5f f38c 	uxtb.w	r3, ip
 8013d16:	eeb4 aae7 	vcmpe.f32	s20, s15
 8013d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d1e:	f73f a934 	bgt.w	8012f8a <MEMS_runMagCal.constprop.21+0x726>
 8013d22:	429d      	cmp	r5, r3
 8013d24:	d8c9      	bhi.n	8013cba <MEMS_runMagCal.constprop.21+0x1456>
 8013d26:	9807      	ldr	r0, [sp, #28]
 8013d28:	9908      	ldr	r1, [sp, #32]
 8013d2a:	f7ff ba95 	b.w	8013258 <MEMS_runMagCal.constprop.21+0x9f4>
 8013d2e:	f04f 0a00 	mov.w	sl, #0
 8013d32:	2101      	movs	r1, #1
 8013d34:	f7fe bfcd 	b.w	8012cd2 <MEMS_runMagCal.constprop.21+0x46e>
 8013d38:	f04f 0a00 	mov.w	sl, #0
 8013d3c:	4651      	mov	r1, sl
 8013d3e:	f7fe bfc8 	b.w	8012cd2 <MEMS_runMagCal.constprop.21+0x46e>
 8013d42:	f1ba 0f00 	cmp.w	sl, #0
 8013d46:	d12e      	bne.n	8013da6 <MEMS_runMagCal.constprop.21+0x1542>
 8013d48:	2300      	movs	r3, #0
 8013d4a:	9308      	str	r3, [sp, #32]
 8013d4c:	f7ff bb3f 	b.w	80133ce <MEMS_runMagCal.constprop.21+0xb6a>
 8013d50:	f8db 20c4 	ldr.w	r2, [fp, #196]	; 0xc4
 8013d54:	2101      	movs	r1, #1
 8013d56:	fa01 f303 	lsl.w	r3, r1, r3
 8013d5a:	ea23 0302 	bic.w	r3, r3, r2
 8013d5e:	4053      	eors	r3, r2
 8013d60:	f8cb 30c4 	str.w	r3, [fp, #196]	; 0xc4
 8013d64:	f7ff bac1 	b.w	80132ea <MEMS_runMagCal.constprop.21+0xa86>
 8013d68:	fb92 f4f0 	sdiv	r4, r2, r0
 8013d6c:	fb00 2214 	mls	r2, r0, r4, r2
 8013d70:	b214      	sxth	r4, r2
 8013d72:	e6eb      	b.n	8013b4c <MEMS_runMagCal.constprop.21+0x12e8>
 8013d74:	f8db 20bc 	ldr.w	r2, [fp, #188]	; 0xbc
 8013d78:	2101      	movs	r1, #1
 8013d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8013d7e:	ea23 0302 	bic.w	r3, r3, r2
 8013d82:	4053      	eors	r3, r2
 8013d84:	f8cb 30bc 	str.w	r3, [fp, #188]	; 0xbc
 8013d88:	f7ff baa0 	b.w	80132cc <MEMS_runMagCal.constprop.21+0xa68>
 8013d8c:	eeb0 0a48 	vmov.f32	s0, s16
 8013d90:	4648      	mov	r0, r9
 8013d92:	f7fe fa1f 	bl	80121d4 <MEMS_updateMagBufferIndex.constprop.33>
 8013d96:	f7ff ba8a 	b.w	80132ae <MEMS_runMagCal.constprop.21+0xa4a>
 8013d9a:	eeb0 0a48 	vmov.f32	s0, s16
 8013d9e:	4648      	mov	r0, r9
 8013da0:	f7fe fa18 	bl	80121d4 <MEMS_updateMagBufferIndex.constprop.33>
 8013da4:	e705      	b.n	8013bb2 <MEMS_runMagCal.constprop.21+0x134e>
 8013da6:	eddd 7a05 	vldr	s15, [sp, #20]
 8013daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dae:	f7ff bafa 	b.w	80133a6 <MEMS_runMagCal.constprop.21+0xb42>
 8013db2:	bf00      	nop
 8013db4:	42960000 	.word	0x42960000
 8013db8:	3a83126f 	.word	0x3a83126f
 8013dbc:	00000000 	.word	0x00000000
 8013dc0:	3c23d70a 	.word	0x3c23d70a
 8013dc4:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8013dbc <MEMS_runMagCal.constprop.21+0x1558>
 8013dc8:	f109 0901 	add.w	r9, r9, #1
 8013dcc:	ac11      	add	r4, sp, #68	; 0x44
 8013dce:	b2ba      	uxth	r2, r7
 8013dd0:	fb99 fcf7 	sdiv	ip, r9, r7
 8013dd4:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
 8013dd8:	fb07 9c1c 	mls	ip, r7, ip, r9
 8013ddc:	ed84 7a00 	vstr	s14, [r4]
 8013de0:	2a00      	cmp	r2, #0
 8013de2:	f000 80dc 	beq.w	8013f9e <MEMS_runMagCal.constprop.21+0x173a>
 8013de6:	1e51      	subs	r1, r2, #1
 8013de8:	1c6b      	adds	r3, r5, #1
 8013dea:	2200      	movs	r2, #0
 8013dec:	fa1f fc8c 	uxth.w	ip, ip
 8013df0:	fa13 f981 	uxtah	r9, r3, r1
 8013df4:	eeb0 6a47 	vmov.f32	s12, s14
 8013df8:	eef0 7a47 	vmov.f32	s15, s14
 8013dfc:	ebac 0c05 	sub.w	ip, ip, r5
 8013e00:	4616      	mov	r6, r2
 8013e02:	4629      	mov	r1, r5
 8013e04:	f241 2e5c 	movw	lr, #4700	; 0x125c
 8013e08:	4613      	mov	r3, r2
 8013e0a:	428d      	cmp	r5, r1
 8013e0c:	eb0c 0001 	add.w	r0, ip, r1
 8013e10:	dc23      	bgt.n	8013e5a <MEMS_runMagCal.constprop.21+0x15f6>
 8013e12:	fb90 f3f7 	sdiv	r3, r0, r7
 8013e16:	fb07 0313 	mls	r3, r7, r3, r0
 8013e1a:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8013e1e:	2201      	movs	r2, #1
 8013e20:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8013e22:	f5a0 5392 	sub.w	r3, r0, #4672	; 0x1240
 8013e26:	4570      	cmp	r0, lr
 8013e28:	f1a3 031c 	sub.w	r3, r3, #28
 8013e2c:	bf98      	it	ls
 8013e2e:	ebae 0300 	subls.w	r3, lr, r0
 8013e32:	b29b      	uxth	r3, r3
 8013e34:	fb03 f303 	mul.w	r3, r3, r3
 8013e38:	ee07 3a10 	vmov	s14, r3
 8013e3c:	ee06 0a90 	vmov	s13, r0
 8013e40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013e44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013e48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013e4c:	4416      	add	r6, r2
 8013e4e:	ee36 6a26 	vadd.f32	s12, s12, s13
 8013e52:	eeb0 7a67 	vmov.f32	s14, s15
 8013e56:	b2b6      	uxth	r6, r6
 8013e58:	4613      	mov	r3, r2
 8013e5a:	3101      	adds	r1, #1
 8013e5c:	4589      	cmp	r9, r1
 8013e5e:	d1d4      	bne.n	8013e0a <MEMS_runMagCal.constprop.21+0x15a6>
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	f040 808d 	bne.w	8013f80 <MEMS_runMagCal.constprop.21+0x171c>
 8013e66:	2a00      	cmp	r2, #0
 8013e68:	f040 8096 	bne.w	8013f98 <MEMS_runMagCal.constprop.21+0x1734>
 8013e6c:	2e00      	cmp	r6, #0
 8013e6e:	d149      	bne.n	8013f04 <MEMS_runMagCal.constprop.21+0x16a0>
 8013e70:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8013e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e7c:	dd30      	ble.n	8013ee0 <MEMS_runMagCal.constprop.21+0x167c>
 8013e7e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8013e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013e86:	2402      	movs	r4, #2
 8013e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e8c:	f88b 407c 	strb.w	r4, [fp, #124]	; 0x7c
 8013e90:	f77e af97 	ble.w	8012dc2 <MEMS_runMagCal.constprop.21+0x55e>
 8013e94:	2301      	movs	r3, #1
 8013e96:	f88b 3025 	strb.w	r3, [fp, #37]	; 0x25
 8013e9a:	e69c      	b.n	8013bd6 <MEMS_runMagCal.constprop.21+0x1372>
 8013e9c:	f008 fc4e 	bl	801c73c <sqrtf>
 8013ea0:	eddb 5a05 	vldr	s11, [fp, #20]
 8013ea4:	f7fe beb0 	b.w	8012c08 <MEMS_runMagCal.constprop.21+0x3a4>
 8013ea8:	9b00      	ldr	r3, [sp, #0]
 8013eaa:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
 8013eae:	f8db 1030 	ldr.w	r1, [fp, #48]	; 0x30
 8013eb2:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013eb6:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	; 0xd0
 8013eba:	4413      	add	r3, r2
 8013ebc:	4299      	cmp	r1, r3
 8013ebe:	f4bf ae23 	bcs.w	8013b08 <MEMS_runMagCal.constprop.21+0x12a4>
 8013ec2:	9907      	ldr	r1, [sp, #28]
 8013ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013ec8:	fb03 f301 	mul.w	r3, r3, r1
 8013ecc:	3364      	adds	r3, #100	; 0x64
 8013ece:	4293      	cmp	r3, r2
 8013ed0:	bf38      	it	cc
 8013ed2:	4613      	movcc	r3, r2
 8013ed4:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 8013ed8:	e616      	b.n	8013b08 <MEMS_runMagCal.constprop.21+0x12a4>
 8013eda:	2000      	movs	r0, #0
 8013edc:	f7ff bb94 	b.w	8013608 <MEMS_runMagCal.constprop.21+0xda4>
 8013ee0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eec:	d428      	bmi.n	8013f40 <MEMS_runMagCal.constprop.21+0x16dc>
 8013eee:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8013ef2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013efa:	f89b 407c 	ldrb.w	r4, [fp, #124]	; 0x7c
 8013efe:	f77f ae6a 	ble.w	8013bd6 <MEMS_runMagCal.constprop.21+0x1372>
 8013f02:	e7c7      	b.n	8013e94 <MEMS_runMagCal.constprop.21+0x1630>
 8013f04:	ee07 6a10 	vmov	s14, r6
 8013f08:	eef8 8ac7 	vcvt.f32.s32	s17, s14
 8013f0c:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 8013f10:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f18:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8013f1c:	d501      	bpl.n	8013f22 <MEMS_runMagCal.constprop.21+0x16be>
 8013f1e:	f008 fc0d 	bl	801c73c <sqrtf>
 8013f22:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8013f26:	ed5f 6a5a 	vldr	s13, [pc, #-360]	; 8013dc0 <MEMS_runMagCal.constprop.21+0x155c>
 8013f2a:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8013f2e:	ee68 7a26 	vmul.f32	s15, s16, s13
 8013f32:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013f36:	edc4 7a00 	vstr	s15, [r4]
 8013f3a:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
 8013f3e:	e797      	b.n	8013e70 <MEMS_runMagCal.constprop.21+0x160c>
 8013f40:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8013f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f48:	2403      	movs	r4, #3
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f50:	f88b 407c 	strb.w	r4, [fp, #124]	; 0x7c
 8013f54:	f88b 3025 	strb.w	r3, [fp, #37]	; 0x25
 8013f58:	dc9c      	bgt.n	8013e94 <MEMS_runMagCal.constprop.21+0x1630>
 8013f5a:	e63f      	b.n	8013bdc <MEMS_runMagCal.constprop.21+0x1378>
 8013f5c:	f8ad c05a 	strh.w	ip, [sp, #90]	; 0x5a
 8013f60:	f7ff bb18 	b.w	8013594 <MEMS_runMagCal.constprop.21+0xd30>
 8013f64:	461a      	mov	r2, r3
 8013f66:	9b00      	ldr	r3, [sp, #0]
 8013f68:	1c5d      	adds	r5, r3, #1
 8013f6a:	fb95 f1f2 	sdiv	r1, r5, r2
 8013f6e:	fb02 5111 	mls	r1, r2, r1, r5
 8013f72:	b209      	sxth	r1, r1
 8013f74:	4690      	mov	r8, r2
 8013f76:	f7ff baaa 	b.w	80134ce <MEMS_runMagCal.constprop.21+0xc6a>
 8013f7a:	2701      	movs	r7, #1
 8013f7c:	f7ff bb7d 	b.w	801367a <MEMS_runMagCal.constprop.21+0xe16>
 8013f80:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8013f84:	e76f      	b.n	8013e66 <MEMS_runMagCal.constprop.21+0x1602>
 8013f86:	3101      	adds	r1, #1
 8013f88:	fb91 f3f5 	sdiv	r3, r1, r5
 8013f8c:	fb05 1313 	mls	r3, r5, r3, r1
 8013f90:	fa0f fe83 	sxth.w	lr, r3
 8013f94:	462a      	mov	r2, r5
 8013f96:	e68c      	b.n	8013cb2 <MEMS_runMagCal.constprop.21+0x144e>
 8013f98:	ed84 7a00 	vstr	s14, [r4]
 8013f9c:	e766      	b.n	8013e6c <MEMS_runMagCal.constprop.21+0x1608>
 8013f9e:	2303      	movs	r3, #3
 8013fa0:	f88b 2025 	strb.w	r2, [fp, #37]	; 0x25
 8013fa4:	f88b 307c 	strb.w	r3, [fp, #124]	; 0x7c
 8013fa8:	e618      	b.n	8013bdc <MEMS_runMagCal.constprop.21+0x1378>
 8013faa:	f88b 00b0 	strb.w	r0, [fp, #176]	; 0xb0
 8013fae:	e5fc      	b.n	8013baa <MEMS_runMagCal.constprop.21+0x1346>
 8013fb0:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
 8013fb4:	f7fe bdd3 	b.w	8012b5e <MEMS_runMagCal.constprop.21+0x2fa>
 8013fb8:	eeb0 7a46 	vmov.f32	s14, s12
 8013fbc:	2201      	movs	r2, #1
 8013fbe:	f7fe bdc1 	b.w	8012b44 <MEMS_runMagCal.constprop.21+0x2e0>
 8013fc2:	f241 225b 	movw	r2, #4699	; 0x125b
 8013fc6:	4293      	cmp	r3, r2
 8013fc8:	f67e aebf 	bls.w	8012d4a <MEMS_runMagCal.constprop.21+0x4e6>
 8013fcc:	f5a3 5392 	sub.w	r3, r3, #4672	; 0x1240
 8013fd0:	3b1c      	subs	r3, #28
 8013fd2:	b29b      	uxth	r3, r3
 8013fd4:	f643 2298 	movw	r2, #15000	; 0x3a98
 8013fd8:	4293      	cmp	r3, r2
 8013fda:	f67e aeb6 	bls.w	8012d4a <MEMS_runMagCal.constprop.21+0x4e6>
 8013fde:	f7fe beaa 	b.w	8012d36 <MEMS_runMagCal.constprop.21+0x4d2>
 8013fe2:	ed9b 0a20 	vldr	s0, [fp, #128]	; 0x80
 8013fe6:	f008 f895 	bl	801c114 <roundf>
 8013fea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013fee:	ae18      	add	r6, sp, #96	; 0x60
 8013ff0:	ee17 3a90 	vmov	r3, s15
 8013ff4:	ed9b 0a21 	vldr	s0, [fp, #132]	; 0x84
 8013ff8:	8033      	strh	r3, [r6, #0]
 8013ffa:	f008 f88b 	bl	801c114 <roundf>
 8013ffe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014002:	ed9b 0a22 	vldr	s0, [fp, #136]	; 0x88
 8014006:	ee17 3a90 	vmov	r3, s15
 801400a:	8073      	strh	r3, [r6, #2]
 801400c:	f008 f882 	bl	801c114 <roundf>
 8014010:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014014:	4630      	mov	r0, r6
 8014016:	ee17 4a90 	vmov	r4, s15
 801401a:	ab12      	add	r3, sp, #72	; 0x48
 801401c:	aa13      	add	r2, sp, #76	; 0x4c
 801401e:	eeb0 0a68 	vmov.f32	s0, s17
 8014022:	49cc      	ldr	r1, [pc, #816]	; (8014354 <MEMS_runMagCal.constprop.21+0x1af0>)
 8014024:	80b4      	strh	r4, [r6, #4]
 8014026:	f7fd fbd5 	bl	80117d4 <getMagStats.constprop.35>
 801402a:	ed9d 7a12 	vldr	s14, [sp, #72]	; 0x48
 801402e:	eddf 7aca 	vldr	s15, [pc, #808]	; 8014358 <MEMS_runMagCal.constprop.21+0x1af4>
 8014032:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801403a:	d50e      	bpl.n	801405a <MEMS_runMagCal.constprop.21+0x17f6>
 801403c:	b968      	cbnz	r0, 801405a <MEMS_runMagCal.constprop.21+0x17f6>
 801403e:	f89b 3064 	ldrb.w	r3, [fp, #100]	; 0x64
 8014042:	b1b3      	cbz	r3, 8014072 <MEMS_runMagCal.constprop.21+0x180e>
 8014044:	f89b 306d 	ldrb.w	r3, [fp, #109]	; 0x6d
 8014048:	ee07 3a90 	vmov	s15, r3
 801404c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014050:	eef4 9ae7 	vcmpe.f32	s19, s15
 8014054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014058:	dc0b      	bgt.n	8014072 <MEMS_runMagCal.constprop.21+0x180e>
 801405a:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 801405e:	f99b 50b2 	ldrsb.w	r5, [fp, #178]	; 0xb2
 8014062:	9306      	str	r3, [sp, #24]
 8014064:	2300      	movs	r3, #0
 8014066:	f89b 40b1 	ldrb.w	r4, [fp, #177]	; 0xb1
 801406a:	6033      	str	r3, [r6, #0]
 801406c:	3501      	adds	r5, #1
 801406e:	80b3      	strh	r3, [r6, #4]
 8014070:	e413      	b.n	801389a <MEMS_runMagCal.constprop.21+0x1036>
 8014072:	eddd 7a05 	vldr	s15, [sp, #20]
 8014076:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801407a:	eddf 7ab8 	vldr	s15, [pc, #736]	; 801435c <MEMS_runMagCal.constprop.21+0x1af8>
 801407e:	2303      	movs	r3, #3
 8014080:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014084:	f88b 307c 	strb.w	r3, [fp, #124]	; 0x7c
 8014088:	f008 f844 	bl	801c114 <roundf>
 801408c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014090:	ed8b 0a0a 	vstr	s0, [fp, #40]	; 0x28
 8014094:	e538      	b.n	8013b08 <MEMS_runMagCal.constprop.21+0x12a4>
 8014096:	fb95 f1f3 	sdiv	r1, r5, r3
 801409a:	fb03 5111 	mls	r1, r3, r1, r5
 801409e:	b209      	sxth	r1, r1
 80140a0:	e412      	b.n	80138c8 <MEMS_runMagCal.constprop.21+0x1064>
 80140a2:	461a      	mov	r2, r3
 80140a4:	fb95 f3f3 	sdiv	r3, r5, r3
 80140a8:	fb02 5313 	mls	r3, r2, r3, r5
 80140ac:	b21b      	sxth	r3, r3
 80140ae:	f7ff bb68 	b.w	8013782 <MEMS_runMagCal.constprop.21+0xf1e>
 80140b2:	2301      	movs	r3, #1
 80140b4:	9300      	str	r3, [sp, #0]
 80140b6:	f7ff bb10 	b.w	80136da <MEMS_runMagCal.constprop.21+0xe76>
 80140ba:	eddb 4a27 	vldr	s9, [fp, #156]	; 0x9c
 80140be:	eddb 5a23 	vldr	s11, [fp, #140]	; 0x8c
 80140c2:	ed9b 6a2b 	vldr	s12, [fp, #172]	; 0xac
 80140c6:	ee75 5aa4 	vadd.f32	s11, s11, s9
 80140ca:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 80140ce:	ee75 5a86 	vadd.f32	s11, s11, s12
 80140d2:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 80140d6:	ee85 6a84 	vdiv.f32	s12, s11, s8
 80140da:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80140de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140e2:	d529      	bpl.n	8014138 <MEMS_runMagCal.constprop.21+0x18d4>
 80140e4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80140e8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80140ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140f0:	bfd8      	it	le
 80140f2:	eeb0 6a65 	vmovle.f32	s12, s11
 80140f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80140fa:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80140fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014102:	f73f ad01 	bgt.w	8013b08 <MEMS_runMagCal.constprop.21+0x12a4>
 8014106:	ee27 7a06 	vmul.f32	s14, s14, s12
 801410a:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801410e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014112:	f73f acf9 	bgt.w	8013b08 <MEMS_runMagCal.constprop.21+0x12a4>
 8014116:	ee66 6a86 	vmul.f32	s13, s13, s12
 801411a:	eeb4 5ae6 	vcmpe.f32	s10, s13
 801411e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014122:	f73f acf1 	bgt.w	8013b08 <MEMS_runMagCal.constprop.21+0x12a4>
 8014126:	2300      	movs	r3, #0
 8014128:	9300      	str	r3, [sp, #0]
 801412a:	f7ff bb1c 	b.w	8013766 <MEMS_runMagCal.constprop.21+0xf02>
 801412e:	460b      	mov	r3, r1
 8014130:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
 8014134:	f7ff baba 	b.w	80136ac <MEMS_runMagCal.constprop.21+0xe48>
 8014138:	eeb0 6a64 	vmov.f32	s12, s9
 801413c:	e7db      	b.n	80140f6 <MEMS_runMagCal.constprop.21+0x1892>
 801413e:	4551      	cmp	r1, sl
 8014140:	4613      	mov	r3, r2
 8014142:	daf5      	bge.n	8014130 <MEMS_runMagCal.constprop.21+0x18cc>
 8014144:	2701      	movs	r7, #1
 8014146:	f7ff ba9f 	b.w	8013688 <MEMS_runMagCal.constprop.21+0xe24>
 801414a:	2220      	movs	r2, #32
 801414c:	2100      	movs	r1, #0
 801414e:	a82e      	add	r0, sp, #184	; 0xb8
 8014150:	f00a fe11 	bl	801ed76 <memset>
 8014154:	eddf 7a82 	vldr	s15, [pc, #520]	; 8014360 <MEMS_runMagCal.constprop.21+0x1afc>
 8014158:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 801415c:	ee07 aa90 	vmov	s15, sl
 8014160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014164:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801416c:	d409      	bmi.n	8014182 <MEMS_runMagCal.constprop.21+0x191e>
 801416e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8014172:	edcd 7a01 	vstr	s15, [sp, #4]
 8014176:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801417a:	ee07 3a90 	vmov	s15, r3
 801417e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014182:	eddf 6a80 	vldr	s13, [pc, #512]	; 8014384 <MEMS_runMagCal.constprop.21+0x1b20>
 8014186:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 801418a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801418e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014192:	d409      	bmi.n	80141a8 <MEMS_runMagCal.constprop.21+0x1944>
 8014194:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8014198:	edcd 7a01 	vstr	s15, [sp, #4]
 801419c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80141a0:	ee07 3a90 	vmov	s15, r3
 80141a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141a8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80141ac:	eddf 6a75 	vldr	s13, [pc, #468]	; 8014384 <MEMS_runMagCal.constprop.21+0x1b20>
 80141b0:	eddf 5a6c 	vldr	s11, [pc, #432]	; 8014364 <MEMS_runMagCal.constprop.21+0x1b00>
 80141b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80141b8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80141bc:	ee67 7a06 	vmul.f32	s15, s14, s12
 80141c0:	eef4 7ae5 	vcmpe.f32	s15, s11
 80141c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141c8:	f340 8626 	ble.w	8014e18 <MEMS_runMagCal.constprop.21+0x25b4>
 80141cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80141d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80141d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141d8:	f140 861e 	bpl.w	8014e18 <MEMS_runMagCal.constprop.21+0x25b4>
 80141dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80141e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80141e4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80141e8:	ee27 caa6 	vmul.f32	s24, s15, s13
 80141ec:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 80141f0:	ed9d 7a1b 	vldr	s14, [sp, #108]	; 0x6c
 80141f4:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 80141f8:	eddf aa60 	vldr	s21, [pc, #384]	; 801437c <MEMS_runMagCal.constprop.21+0x1b18>
 80141fc:	ed9f aa5a 	vldr	s20, [pc, #360]	; 8014368 <MEMS_runMagCal.constprop.21+0x1b04>
 8014200:	eddf ba5a 	vldr	s23, [pc, #360]	; 801436c <MEMS_runMagCal.constprop.21+0x1b08>
 8014204:	ed9f ba5a 	vldr	s22, [pc, #360]	; 8014370 <MEMS_runMagCal.constprop.21+0x1b0c>
 8014208:	ed8d ca31 	vstr	s24, [sp, #196]	; 0xc4
 801420c:	ee66 6aa8 	vmul.f32	s13, s13, s17
 8014210:	ee27 7a28 	vmul.f32	s14, s14, s17
 8014214:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8014218:	ed8d ca34 	vstr	s24, [sp, #208]	; 0xd0
 801421c:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8014220:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 8014224:	edcd 7a30 	vstr	s15, [sp, #192]	; 0xc0
 8014228:	2400      	movs	r4, #0
 801422a:	2500      	movs	r5, #0
 801422c:	4629      	mov	r1, r5
 801422e:	2240      	movs	r2, #64	; 0x40
 8014230:	a836      	add	r0, sp, #216	; 0xd8
 8014232:	9521      	str	r5, [sp, #132]	; 0x84
 8014234:	9522      	str	r5, [sp, #136]	; 0x88
 8014236:	9523      	str	r5, [sp, #140]	; 0x8c
 8014238:	9524      	str	r5, [sp, #144]	; 0x90
 801423a:	951d      	str	r5, [sp, #116]	; 0x74
 801423c:	951e      	str	r5, [sp, #120]	; 0x78
 801423e:	951f      	str	r5, [sp, #124]	; 0x7c
 8014240:	9520      	str	r5, [sp, #128]	; 0x80
 8014242:	f00a fd98 	bl	801ed76 <memset>
 8014246:	4629      	mov	r1, r5
 8014248:	2240      	movs	r2, #64	; 0x40
 801424a:	a846      	add	r0, sp, #280	; 0x118
 801424c:	f00a fd93 	bl	801ed76 <memset>
 8014250:	eeb4 caea 	vcmpe.f32	s24, s21
 8014254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014258:	f100 85d7 	bmi.w	8014e0a <MEMS_runMagCal.constprop.21+0x25a6>
 801425c:	f89b 00b0 	ldrb.w	r0, [fp, #176]	; 0xb0
 8014260:	f89b 30b1 	ldrb.w	r3, [fp, #177]	; 0xb1
 8014264:	f99b 20b2 	ldrsb.w	r2, [fp, #178]	; 0xb2
 8014268:	4298      	cmp	r0, r3
 801426a:	f102 0201 	add.w	r2, r2, #1
 801426e:	f000 8158 	beq.w	8014522 <MEMS_runMagCal.constprop.21+0x1cbe>
 8014272:	1a12      	subs	r2, r2, r0
 8014274:	fb92 f1f3 	sdiv	r1, r2, r3
 8014278:	fb03 2211 	mls	r2, r3, r1, r2
 801427c:	b216      	sxth	r6, r2
 801427e:	2e00      	cmp	r6, #0
 8014280:	bfbc      	itt	lt
 8014282:	18d2      	addlt	r2, r2, r3
 8014284:	b216      	sxthlt	r6, r2
 8014286:	ed9f ca3b 	vldr	s24, [pc, #236]	; 8014374 <MEMS_runMagCal.constprop.21+0x1b10>
 801428a:	eef0 ca4c 	vmov.f32	s25, s24
 801428e:	eeb0 da4c 	vmov.f32	s26, s24
 8014292:	eef0 da4c 	vmov.f32	s27, s24
 8014296:	eeb0 ea4c 	vmov.f32	s28, s24
 801429a:	eef0 ea4c 	vmov.f32	s29, s24
 801429e:	2800      	cmp	r0, #0
 80142a0:	f000 80e8 	beq.w	8014474 <MEMS_runMagCal.constprop.21+0x1c10>
 80142a4:	2500      	movs	r5, #0
 80142a6:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
 80142aa:	461a      	mov	r2, r3
 80142ac:	19a9      	adds	r1, r5, r6
 80142ae:	fb91 f3f2 	sdiv	r3, r1, r2
 80142b2:	fb02 1313 	mls	r3, r2, r3, r1
 80142b6:	b2db      	uxtb	r3, r3
 80142b8:	3304      	adds	r3, #4
 80142ba:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80142be:	eddd 7a2f 	vldr	s15, [sp, #188]	; 0xbc
 80142c2:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	; 0xb2
 80142c6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80142ca:	ed9d 6a30 	vldr	s12, [sp, #192]	; 0xc0
 80142ce:	ee09 2a10 	vmov	s18, r2
 80142d2:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	; 0xb4
 80142d6:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 80142da:	ee07 2a10 	vmov	s14, r2
 80142de:	ee0f 3a90 	vmov	s31, r3
 80142e2:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 80142e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80142ea:	eef8 faef 	vcvt.f32.s32	s31, s31
 80142ee:	ee27 7a28 	vmul.f32	s14, s14, s17
 80142f2:	ee29 9a28 	vmul.f32	s18, s18, s17
 80142f6:	ee37 8a67 	vsub.f32	s16, s14, s15
 80142fa:	ee39 9a66 	vsub.f32	s18, s18, s13
 80142fe:	ee6f 7aa8 	vmul.f32	s15, s31, s17
 8014302:	ee29 0a09 	vmul.f32	s0, s18, s18
 8014306:	ee77 fac6 	vsub.f32	s31, s15, s12
 801430a:	ee28 7a08 	vmul.f32	s14, s16, s16
 801430e:	ee6f 7aaf 	vmul.f32	s15, s31, s31
 8014312:	ee30 0a07 	vadd.f32	s0, s0, s14
 8014316:	ee30 0a27 	vadd.f32	s0, s0, s15
 801431a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801431e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014322:	eeb1 6ac0 	vsqrt.f32	s12, s0
 8014326:	d505      	bpl.n	8014334 <MEMS_runMagCal.constprop.21+0x1ad0>
 8014328:	ed8d 6a01 	vstr	s12, [sp, #4]
 801432c:	f008 fa06 	bl	801c73c <sqrtf>
 8014330:	ed9d 6a01 	vldr	s12, [sp, #4]
 8014334:	eeb4 6aca 	vcmpe.f32	s12, s20
 8014338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801433c:	f105 0201 	add.w	r2, r5, #1
 8014340:	d52c      	bpl.n	801439c <MEMS_runMagCal.constprop.21+0x1b38>
 8014342:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 8014346:	b2d5      	uxtb	r5, r2
 8014348:	42ab      	cmp	r3, r5
 801434a:	f240 8093 	bls.w	8014474 <MEMS_runMagCal.constprop.21+0x1c10>
 801434e:	f89b 20b1 	ldrb.w	r2, [fp, #177]	; 0xb1
 8014352:	e7ab      	b.n	80142ac <MEMS_runMagCal.constprop.21+0x1a48>
 8014354:	20001724 	.word	0x20001724
 8014358:	3ff4cccd 	.word	0x3ff4cccd
 801435c:	3a83126f 	.word	0x3a83126f
 8014360:	430d0000 	.word	0x430d0000
 8014364:	3e4ccccd 	.word	0x3e4ccccd
 8014368:	358637bd 	.word	0x358637bd
 801436c:	3e99999a 	.word	0x3e99999a
 8014370:	3f666666 	.word	0x3f666666
 8014374:	00000000 	.word	0x00000000
 8014378:	400ccccd 	.word	0x400ccccd
 801437c:	3dcccccd 	.word	0x3dcccccd
 8014380:	41f00001 	.word	0x41f00001
 8014384:	423c0000 	.word	0x423c0000
 8014388:	3f8ccccd 	.word	0x3f8ccccd
 801438c:	3f266666 	.word	0x3f266666
 8014390:	3ee66666 	.word	0x3ee66666
 8014394:	3f19999a 	.word	0x3f19999a
 8014398:	433d0000 	.word	0x433d0000
 801439c:	eecf 7a06 	vdiv.f32	s15, s30, s12
 80143a0:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 80143a4:	b2d5      	uxtb	r5, r2
 80143a6:	42ab      	cmp	r3, r5
 80143a8:	eddd 5a31 	vldr	s11, [sp, #196]	; 0xc4
 80143ac:	ed9d 5a36 	vldr	s10, [sp, #216]	; 0xd8
 80143b0:	ed9d 4a22 	vldr	s8, [sp, #136]	; 0x88
 80143b4:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80143b8:	ee69 6a67 	vnmul.f32	s13, s18, s15
 80143bc:	ee28 7a67 	vnmul.f32	s14, s16, s15
 80143c0:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80143c4:	ee6f 7ae7 	vnmul.f32	s15, s31, s15
 80143c8:	ee66 5aa6 	vmul.f32	s11, s13, s13
 80143cc:	ee66 4a26 	vmul.f32	s9, s12, s13
 80143d0:	ee7d dae6 	vsub.f32	s27, s27, s13
 80143d4:	ee35 5a25 	vadd.f32	s10, s10, s11
 80143d8:	ee66 5a87 	vmul.f32	s11, s13, s14
 80143dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80143e0:	ee7c cac7 	vsub.f32	s25, s25, s14
 80143e4:	ee7e eaa5 	vadd.f32	s29, s29, s11
 80143e8:	ee3e ea26 	vadd.f32	s28, s28, s13
 80143ec:	ee67 5a07 	vmul.f32	s11, s14, s14
 80143f0:	ee66 6a07 	vmul.f32	s13, s12, s14
 80143f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80143f8:	ee34 4a26 	vadd.f32	s8, s8, s13
 80143fc:	ee3d da07 	vadd.f32	s26, s26, s14
 8014400:	ed9d 7a3b 	vldr	s14, [sp, #236]	; 0xec
 8014404:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014408:	edcd da39 	vstr	s27, [sp, #228]	; 0xe4
 801440c:	ee77 5a25 	vadd.f32	s11, s14, s11
 8014410:	ee26 7a27 	vmul.f32	s14, s12, s15
 8014414:	ee3c ca67 	vsub.f32	s24, s24, s15
 8014418:	ee76 6a87 	vadd.f32	s13, s13, s14
 801441c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014420:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 8014424:	edcd ca3d 	vstr	s25, [sp, #244]	; 0xf4
 8014428:	ee77 7a27 	vadd.f32	s15, s14, s15
 801442c:	ed9d 7a24 	vldr	s14, [sp, #144]	; 0x90
 8014430:	ed8d ca41 	vstr	s24, [sp, #260]	; 0x104
 8014434:	ee37 7a46 	vsub.f32	s14, s14, s12
 8014438:	ed9d 6a45 	vldr	s12, [sp, #276]	; 0x114
 801443c:	ed8d 5a36 	vstr	s10, [sp, #216]	; 0xd8
 8014440:	ee73 4aa4 	vadd.f32	s9, s7, s9
 8014444:	ee36 6a0f 	vadd.f32	s12, s12, s30
 8014448:	edcd 4a21 	vstr	s9, [sp, #132]	; 0x84
 801444c:	edcd ea37 	vstr	s29, [sp, #220]	; 0xdc
 8014450:	ed8d ea38 	vstr	s28, [sp, #224]	; 0xe0
 8014454:	ed8d 4a22 	vstr	s8, [sp, #136]	; 0x88
 8014458:	ed8d da3c 	vstr	s26, [sp, #240]	; 0xf0
 801445c:	edcd 5a3b 	vstr	s11, [sp, #236]	; 0xec
 8014460:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8014464:	edcd 7a40 	vstr	s15, [sp, #256]	; 0x100
 8014468:	ed8d 7a24 	vstr	s14, [sp, #144]	; 0x90
 801446c:	ed8d 6a45 	vstr	s12, [sp, #276]	; 0x114
 8014470:	f63f af6d 	bhi.w	801434e <MEMS_runMagCal.constprop.21+0x1aea>
 8014474:	2100      	movs	r1, #0
 8014476:	a846      	add	r0, sp, #280	; 0x118
 8014478:	2240      	movs	r2, #64	; 0x40
 801447a:	f10d 09d8 	add.w	r9, sp, #216	; 0xd8
 801447e:	edcd ea3a 	vstr	s29, [sp, #232]	; 0xe8
 8014482:	ed8d ea3e 	vstr	s28, [sp, #248]	; 0xf8
 8014486:	edcd da42 	vstr	s27, [sp, #264]	; 0x108
 801448a:	ed8d da3f 	vstr	s26, [sp, #252]	; 0xfc
 801448e:	edcd ca43 	vstr	s25, [sp, #268]	; 0x10c
 8014492:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 8014496:	4606      	mov	r6, r0
 8014498:	46c8      	mov	r8, r9
 801449a:	f00a fc6c 	bl	801ed76 <memset>
 801449e:	2700      	movs	r7, #0
 80144a0:	4621      	mov	r1, r4
 80144a2:	b27a      	sxtb	r2, r7
 80144a4:	463b      	mov	r3, r7
 80144a6:	ed5f 7a4d 	vldr	s15, [pc, #-308]	; 8014374 <MEMS_runMagCal.constprop.21+0x1b10>
 80144aa:	46ca      	mov	sl, r9
 80144ac:	4617      	mov	r7, r2
 80144ae:	ac4a      	add	r4, sp, #296	; 0x128
 80144b0:	464a      	mov	r2, r9
 80144b2:	2500      	movs	r5, #0
 80144b4:	4689      	mov	r9, r1
 80144b6:	4619      	mov	r1, r3
 80144b8:	b26b      	sxtb	r3, r5
 80144ba:	42bb      	cmp	r3, r7
 80144bc:	f000 859d 	beq.w	8014ffa <MEMS_runMagCal.constprop.21+0x2796>
 80144c0:	00ab      	lsls	r3, r5, #2
 80144c2:	1958      	adds	r0, r3, r5
 80144c4:	f50d 7e8c 	add.w	lr, sp, #280	; 0x118
 80144c8:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 80144cc:	edd0 6a00 	vldr	s13, [r0]
 80144d0:	eeb0 7ae6 	vabs.f32	s14, s13
 80144d4:	eeb4 7aca 	vcmpe.f32	s14, s20
 80144d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144dc:	f100 8575 	bmi.w	8014fca <MEMS_runMagCal.constprop.21+0x2766>
 80144e0:	ed9a 7a00 	vldr	s14, [sl]
 80144e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144e8:	4433      	add	r3, r6
 80144ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80144ee:	ed83 7a00 	vstr	s14, [r3]
 80144f2:	3501      	adds	r5, #1
 80144f4:	b26b      	sxtb	r3, r5
 80144f6:	429f      	cmp	r7, r3
 80144f8:	db19      	blt.n	801452e <MEMS_runMagCal.constprop.21+0x1cca>
 80144fa:	ed5f 7a62 	vldr	s15, [pc, #-392]	; 8014374 <MEMS_runMagCal.constprop.21+0x1b10>
 80144fe:	eb06 0e85 	add.w	lr, r6, r5, lsl #2
 8014502:	4620      	mov	r0, r4
 8014504:	4633      	mov	r3, r6
 8014506:	ecf3 6a01 	vldmia	r3!, {s13}
 801450a:	ecb0 7a01 	vldmia	r0!, {s14}
 801450e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8014512:	4573      	cmp	r3, lr
 8014514:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014518:	d1f5      	bne.n	8014506 <MEMS_runMagCal.constprop.21+0x1ca2>
 801451a:	f10a 0a04 	add.w	sl, sl, #4
 801451e:	3410      	adds	r4, #16
 8014520:	e7ca      	b.n	80144b8 <MEMS_runMagCal.constprop.21+0x1c54>
 8014522:	fb92 f6f0 	sdiv	r6, r2, r0
 8014526:	fb00 2216 	mls	r2, r0, r6, r2
 801452a:	b216      	sxth	r6, r2
 801452c:	e6ab      	b.n	8014286 <MEMS_runMagCal.constprop.21+0x1a22>
 801452e:	460f      	mov	r7, r1
 8014530:	3701      	adds	r7, #1
 8014532:	2f04      	cmp	r7, #4
 8014534:	4649      	mov	r1, r9
 8014536:	f106 0610 	add.w	r6, r6, #16
 801453a:	f102 0910 	add.w	r9, r2, #16
 801453e:	f108 0814 	add.w	r8, r8, #20
 8014542:	d1ae      	bne.n	80144a2 <MEMS_runMagCal.constprop.21+0x1c3e>
 8014544:	460c      	mov	r4, r1
 8014546:	aa21      	add	r2, sp, #132	; 0x84
 8014548:	a91d      	add	r1, sp, #116	; 0x74
 801454a:	a846      	add	r0, sp, #280	; 0x118
 801454c:	f7fd f8c4 	bl	80116d8 <llEvaluate.constprop.32>
 8014550:	ae25      	add	r6, sp, #148	; 0x94
 8014552:	af21      	add	r7, sp, #132	; 0x84
 8014554:	f10d 0990 	add.w	r9, sp, #144	; 0x90
 8014558:	eeb0 9a6a 	vmov.f32	s18, s21
 801455c:	2500      	movs	r5, #0
 801455e:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
 8014562:	9521      	str	r5, [sp, #132]	; 0x84
 8014564:	9522      	str	r5, [sp, #136]	; 0x88
 8014566:	9523      	str	r5, [sp, #140]	; 0x8c
 8014568:	9524      	str	r5, [sp, #144]	; 0x90
 801456a:	aa21      	add	r2, sp, #132	; 0x84
 801456c:	a925      	add	r1, sp, #148	; 0x94
 801456e:	a846      	add	r0, sp, #280	; 0x118
 8014570:	f847 8b04 	str.w	r8, [r7], #4
 8014574:	f7fd f8b0 	bl	80116d8 <llEvaluate.constprop.32>
 8014578:	ed96 0a00 	vldr	s0, [r6]
 801457c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014584:	f340 80ed 	ble.w	8014762 <MEMS_runMagCal.constprop.21+0x1efe>
 8014588:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801458c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014590:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014594:	d501      	bpl.n	801459a <MEMS_runMagCal.constprop.21+0x1d36>
 8014596:	f008 f8d1 	bl	801c73c <sqrtf>
 801459a:	eeb4 9ac8 	vcmpe.f32	s18, s16
 801459e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145a2:	f340 851c 	ble.w	8014fde <MEMS_runMagCal.constprop.21+0x277a>
 80145a6:	45b9      	cmp	r9, r7
 80145a8:	f106 0604 	add.w	r6, r6, #4
 80145ac:	d1d9      	bne.n	8014562 <MEMS_runMagCal.constprop.21+0x1cfe>
 80145ae:	ed9d ca31 	vldr	s24, [sp, #196]	; 0xc4
 80145b2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80145b6:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80145ba:	ee2c 7a07 	vmul.f32	s14, s24, s14
 80145be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80145c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145c6:	d503      	bpl.n	80145d0 <MEMS_runMagCal.constprop.21+0x1d6c>
 80145c8:	ed8d 7a20 	vstr	s14, [sp, #128]	; 0x80
 80145cc:	eef0 7a47 	vmov.f32	s15, s14
 80145d0:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 80145d4:	eddd 5a1e 	vldr	s11, [sp, #120]	; 0x78
 80145d8:	eddd 6a1f 	vldr	s13, [sp, #124]	; 0x7c
 80145dc:	ed9d 4a2e 	vldr	s8, [sp, #184]	; 0xb8
 80145e0:	ed9d 5a2f 	vldr	s10, [sp, #188]	; 0xbc
 80145e4:	ed9d 6a30 	vldr	s12, [sp, #192]	; 0xc0
 80145e8:	eeb0 7ae4 	vabs.f32	s14, s9
 80145ec:	eef0 3ae5 	vabs.f32	s7, s11
 80145f0:	eef4 3a47 	vcmp.f32	s7, s14
 80145f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145f8:	bf48      	it	mi
 80145fa:	eef0 3a47 	vmovmi.f32	s7, s14
 80145fe:	eeb0 7ae6 	vabs.f32	s14, s13
 8014602:	eeb4 7a63 	vcmp.f32	s14, s7
 8014606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801460a:	bf48      	it	mi
 801460c:	eeb0 7a63 	vmovmi.f32	s14, s7
 8014610:	ee3c ca27 	vadd.f32	s24, s24, s15
 8014614:	ee74 4a24 	vadd.f32	s9, s8, s9
 8014618:	ee75 5a25 	vadd.f32	s11, s10, s11
 801461c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014620:	eeb4 7aeb 	vcmpe.f32	s14, s23
 8014624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014628:	ed8d ca31 	vstr	s24, [sp, #196]	; 0xc4
 801462c:	eef0 7ae7 	vabs.f32	s15, s15
 8014630:	edcd 4a2e 	vstr	s9, [sp, #184]	; 0xb8
 8014634:	edcd 5a2f 	vstr	s11, [sp, #188]	; 0xbc
 8014638:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801463c:	d506      	bpl.n	801464c <MEMS_runMagCal.constprop.21+0x1de8>
 801463e:	eef4 7acb 	vcmpe.f32	s15, s22
 8014642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014646:	d501      	bpl.n	801464c <MEMS_runMagCal.constprop.21+0x1de8>
 8014648:	2c01      	cmp	r4, #1
 801464a:	d804      	bhi.n	8014656 <MEMS_runMagCal.constprop.21+0x1df2>
 801464c:	3401      	adds	r4, #1
 801464e:	b2e4      	uxtb	r4, r4
 8014650:	2c05      	cmp	r4, #5
 8014652:	f47f adea 	bne.w	801422a <MEMS_runMagCal.constprop.21+0x19c6>
 8014656:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 801465a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801465e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014662:	dc0e      	bgt.n	8014682 <MEMS_runMagCal.constprop.21+0x1e1e>
 8014664:	ed1f 7abc 	vldr	s14, [pc, #-752]	; 8014378 <MEMS_runMagCal.constprop.21+0x1b14>
 8014668:	eef4 7ac7 	vcmpe.f32	s15, s14
 801466c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014670:	dc07      	bgt.n	8014682 <MEMS_runMagCal.constprop.21+0x1e1e>
 8014672:	ed5f 7abe 	vldr	s15, [pc, #-760]	; 801437c <MEMS_runMagCal.constprop.21+0x1b18>
 8014676:	eeb4 cae7 	vcmpe.f32	s24, s15
 801467a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801467e:	f200 837e 	bhi.w	8014d7e <MEMS_runMagCal.constprop.21+0x251a>
 8014682:	ed1f 8ac0 	vldr	s16, [pc, #-768]	; 8014384 <MEMS_runMagCal.constprop.21+0x1b20>
 8014686:	ed1f 9ac2 	vldr	s18, [pc, #-776]	; 8014380 <MEMS_runMagCal.constprop.21+0x1b1c>
 801468a:	ed8d 8a34 	vstr	s16, [sp, #208]	; 0xd0
 801468e:	eeb0 aa48 	vmov.f32	s20, s16
 8014692:	2224      	movs	r2, #36	; 0x24
 8014694:	2100      	movs	r1, #0
 8014696:	a846      	add	r0, sp, #280	; 0x118
 8014698:	f00a fb6d 	bl	801ed76 <memset>
 801469c:	ed5f 5ac7 	vldr	s11, [pc, #-796]	; 8014384 <MEMS_runMagCal.constprop.21+0x1b20>
 80146a0:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 80146a4:	eddd 6a2f 	vldr	s13, [sp, #188]	; 0xbc
 80146a8:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 80146ac:	eec5 7a8c 	vdiv.f32	s15, s11, s24
 80146b0:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 80146b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146b8:	ee86 0a28 	vdiv.f32	s0, s12, s17
 80146bc:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80146c0:	edcd 7a4a 	vstr	s15, [sp, #296]	; 0x128
 80146c4:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 80146c8:	ee86 baa8 	vdiv.f32	s22, s13, s17
 80146cc:	eec7 aa28 	vdiv.f32	s21, s14, s17
 80146d0:	f100 8352 	bmi.w	8014d78 <MEMS_runMagCal.constprop.21+0x2514>
 80146d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80146d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146dc:	f100 834c 	bmi.w	8014d78 <MEMS_runMagCal.constprop.21+0x2514>
 80146e0:	ee88 7a0a 	vdiv.f32	s14, s16, s20
 80146e4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80146e8:	ee38 8a47 	vsub.f32	s16, s16, s14
 80146ec:	ed5f 6ada 	vldr	s13, [pc, #-872]	; 8014388 <MEMS_runMagCal.constprop.21+0x1b24>
 80146f0:	ed1f 6ada 	vldr	s12, [pc, #-872]	; 801438c <MEMS_runMagCal.constprop.21+0x1b28>
 80146f4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80146f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80146fc:	eef0 6ae6 	vabs.f32	s13, s13
 8014700:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8014704:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801470c:	eeb0 7ac7 	vabs.f32	s14, s14
 8014710:	f140 8329 	bpl.w	8014d66 <MEMS_runMagCal.constprop.21+0x2502>
 8014714:	ed5f 6ae2 	vldr	s13, [pc, #-904]	; 8014390 <MEMS_runMagCal.constprop.21+0x1b2c>
 8014718:	eef4 7ae6 	vcmpe.f32	s15, s13
 801471c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014720:	f340 8321 	ble.w	8014d66 <MEMS_runMagCal.constprop.21+0x2502>
 8014724:	ed5f 7ae5 	vldr	s15, [pc, #-916]	; 8014394 <MEMS_runMagCal.constprop.21+0x1b30>
 8014728:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801472c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014730:	d51a      	bpl.n	8014768 <MEMS_runMagCal.constprop.21+0x1f04>
 8014732:	ed5f 7ae7 	vldr	s15, [pc, #-924]	; 8014398 <MEMS_runMagCal.constprop.21+0x1b34>
 8014736:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 801473a:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 801473e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8014742:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8014746:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 801474a:	ed8d 7a00 	vstr	s14, [sp]
 801474e:	f8bd 0000 	ldrh.w	r0, [sp]
 8014752:	b113      	cbz	r3, 801475a <MEMS_runMagCal.constprop.21+0x1ef6>
 8014754:	3b01      	subs	r3, #1
 8014756:	f88b 30b0 	strb.w	r3, [fp, #176]	; 0xb0
 801475a:	f7fd fd3b 	bl	80121d4 <MEMS_updateMagBufferIndex.constprop.33>
 801475e:	f7ff b9c5 	b.w	8013aec <MEMS_runMagCal.constprop.21+0x1288>
 8014762:	eeb2 9a04 	vmov.f32	s18, #36	; 0x41200000  10.0
 8014766:	e71e      	b.n	80145a6 <MEMS_runMagCal.constprop.21+0x1d42>
 8014768:	f007 fcd4 	bl	801c114 <roundf>
 801476c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014770:	ae18      	add	r6, sp, #96	; 0x60
 8014772:	ee17 3a90 	vmov	r3, s15
 8014776:	eeb0 0a4b 	vmov.f32	s0, s22
 801477a:	8033      	strh	r3, [r6, #0]
 801477c:	f007 fcca 	bl	801c114 <roundf>
 8014780:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014784:	eeb0 0a6a 	vmov.f32	s0, s21
 8014788:	ee17 3a90 	vmov	r3, s15
 801478c:	8073      	strh	r3, [r6, #2]
 801478e:	f007 fcc1 	bl	801c114 <roundf>
 8014792:	eddd 7a05 	vldr	s15, [sp, #20]
 8014796:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 801479a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801479e:	ee16 3a90 	vmov	r3, s13
 80147a2:	eddf 7aab 	vldr	s15, [pc, #684]	; 8014a50 <MEMS_runMagCal.constprop.21+0x21ec>
 80147a6:	80b3      	strh	r3, [r6, #4]
 80147a8:	ee27 0a27 	vmul.f32	s0, s14, s15
 80147ac:	f007 fcb2 	bl	801c114 <roundf>
 80147b0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80147b4:	ab12      	add	r3, sp, #72	; 0x48
 80147b6:	4630      	mov	r0, r6
 80147b8:	eeb0 0a68 	vmov.f32	s0, s17
 80147bc:	aa13      	add	r2, sp, #76	; 0x4c
 80147be:	a946      	add	r1, sp, #280	; 0x118
 80147c0:	edcb 7a0a 	vstr	s15, [fp, #40]	; 0x28
 80147c4:	f7fd f806 	bl	80117d4 <getMagStats.constprop.35>
 80147c8:	f89b 50b0 	ldrb.w	r5, [fp, #176]	; 0xb0
 80147cc:	eddf 6aa1 	vldr	s13, [pc, #644]	; 8014a54 <MEMS_runMagCal.constprop.21+0x21f0>
 80147d0:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 80147d4:	005b      	lsls	r3, r3, #1
 80147d6:	ee07 3a90 	vmov	s15, r3
 80147da:	ee07 0a10 	vmov	s14, r0
 80147de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80147e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80147ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f2:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 80147f6:	f300 82b3 	bgt.w	8014d60 <MEMS_runMagCal.constprop.21+0x24fc>
 80147fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80147fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014806:	bfc3      	ittte	gt
 8014808:	f89b 9064 	ldrbgt.w	r9, [fp, #100]	; 0x64
 801480c:	fab9 f989 	clzgt	r9, r9
 8014810:	ea4f 1959 	movgt.w	r9, r9, lsr #5
 8014814:	f04f 0901 	movle.w	r9, #1
 8014818:	ee69 7aa7 	vmul.f32	s15, s19, s15
 801481c:	f8db 7028 	ldr.w	r7, [fp, #40]	; 0x28
 8014820:	9729      	str	r7, [sp, #164]	; 0xa4
 8014822:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8014826:	f007 fc75 	bl	801c114 <roundf>
 801482a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801482e:	ee29 0a89 	vmul.f32	s0, s19, s18
 8014832:	ee17 3a90 	vmov	r3, s15
 8014836:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 801483a:	f007 fc6b 	bl	801c114 <roundf>
 801483e:	ed9f 6a86 	vldr	s12, [pc, #536]	; 8014a58 <MEMS_runMagCal.constprop.21+0x21f4>
 8014842:	eddd 7a4e 	vldr	s15, [sp, #312]	; 0x138
 8014846:	eddd 6a46 	vldr	s13, [sp, #280]	; 0x118
 801484a:	ed9d 7a4a 	vldr	s14, [sp, #296]	; 0x128
 801484e:	88b3      	ldrh	r3, [r6, #4]
 8014850:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 8014854:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014858:	ee66 6a86 	vmul.f32	s13, s13, s12
 801485c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014860:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014864:	edcd 7a03 	vstr	s15, [sp, #12]
 8014868:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 801486c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8014870:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8014874:	edcd 6a01 	vstr	s13, [sp, #4]
 8014878:	ed8d 7a02 	vstr	s14, [sp, #8]
 801487c:	ee17 2a90 	vmov	r2, s15
 8014880:	9b00      	ldr	r3, [sp, #0]
 8014882:	6830      	ldr	r0, [r6, #0]
 8014884:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8014888:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 801488c:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 8014890:	f8cd 00aa 	str.w	r0, [sp, #170]	; 0xaa
 8014894:	f8ad 80b0 	strh.w	r8, [sp, #176]	; 0xb0
 8014898:	f8ad 40b2 	strh.w	r4, [sp, #178]	; 0xb2
 801489c:	f8ad 60b4 	strh.w	r6, [sp, #180]	; 0xb4
 80148a0:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 80148a4:	b113      	cbz	r3, 80148ac <MEMS_runMagCal.constprop.21+0x2048>
 80148a6:	23ff      	movs	r3, #255	; 0xff
 80148a8:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 80148ac:	2100      	movs	r1, #0
 80148ae:	f88b 1024 	strb.w	r1, [fp, #36]	; 0x24
 80148b2:	f1b9 0f00 	cmp.w	r9, #0
 80148b6:	f43e abde 	beq.w	8013076 <MEMS_runMagCal.constprop.21+0x812>
 80148ba:	f89b 3064 	ldrb.w	r3, [fp, #100]	; 0x64
 80148be:	f88b 1025 	strb.w	r1, [fp, #37]	; 0x25
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	f040 80d2 	bne.w	8014a6c <MEMS_runMagCal.constprop.21+0x2208>
 80148c8:	4e64      	ldr	r6, [pc, #400]	; (8014a5c <MEMS_runMagCal.constprop.21+0x21f8>)
 80148ca:	ac11      	add	r4, sp, #68	; 0x44
 80148cc:	f8cb 702c 	str.w	r7, [fp, #44]	; 0x2c
 80148d0:	af29      	add	r7, sp, #164	; 0xa4
 80148d2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80148d4:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8014a64 <MEMS_runMagCal.constprop.21+0x2200>
 80148d8:	f8bd c0b0 	ldrh.w	ip, [sp, #176]	; 0xb0
 80148dc:	f8bd e0b2 	ldrh.w	lr, [sp, #178]	; 0xb2
 80148e0:	eddf 4a61 	vldr	s9, [pc, #388]	; 8014a68 <MEMS_runMagCal.constprop.21+0x2204>
 80148e4:	683f      	ldr	r7, [r7, #0]
 80148e6:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80148ea:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
 80148ee:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 80148f2:	f8c8 7000 	str.w	r7, [r8]
 80148f6:	ee05 3a10 	vmov	s10, r3
 80148fa:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 80148fe:	f89b 0035 	ldrb.w	r0, [fp, #53]	; 0x35
 8014902:	ee05 3a90 	vmov	s11, r3
 8014906:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
 801490a:	ee06 3a10 	vmov	s12, r3
 801490e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014912:	fb03 f10c 	mul.w	r1, r3, ip
 8014916:	ee06 1a90 	vmov	s13, r1
 801491a:	fb03 f10e 	mul.w	r1, r3, lr
 801491e:	fb03 f302 	mul.w	r3, r3, r2
 8014922:	ee07 3a90 	vmov	s15, r3
 8014926:	ee07 1a10 	vmov	s14, r1
 801492a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801492e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014936:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801493a:	ee27 7a24 	vmul.f32	s14, s14, s9
 801493e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8014942:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014946:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801494a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801494e:	2301      	movs	r3, #1
 8014950:	2700      	movs	r7, #0
 8014952:	22ff      	movs	r2, #255	; 0xff
 8014954:	edcb 6a23 	vstr	s13, [fp, #140]	; 0x8c
 8014958:	ed8b 7a27 	vstr	s14, [fp, #156]	; 0x9c
 801495c:	edcb 7a2b 	vstr	s15, [fp, #172]	; 0xac
 8014960:	ed8b 5a20 	vstr	s10, [fp, #128]	; 0x80
 8014964:	edcb 5a21 	vstr	s11, [fp, #132]	; 0x84
 8014968:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 801496c:	f88b 3064 	strb.w	r3, [fp, #100]	; 0x64
 8014970:	f88b 307d 	strb.w	r3, [fp, #125]	; 0x7d
 8014974:	f88b 7034 	strb.w	r7, [fp, #52]	; 0x34
 8014978:	f88b 2036 	strb.w	r2, [fp, #54]	; 0x36
 801497c:	2d00      	cmp	r5, #0
 801497e:	f43e ab3d 	beq.w	8012ffc <MEMS_runMagCal.constprop.21+0x798>
 8014982:	eddf 8a37 	vldr	s17, [pc, #220]	; 8014a60 <MEMS_runMagCal.constprop.21+0x21fc>
 8014986:	f04f 31ff 	mov.w	r1, #4294967295
 801498a:	463a      	mov	r2, r7
 801498c:	f89b e0b1 	ldrb.w	lr, [fp, #177]	; 0xb1
 8014990:	fb92 f3fe 	sdiv	r3, r2, lr
 8014994:	fb0e 2313 	mls	r3, lr, r3, r2
 8014998:	b2db      	uxtb	r3, r3
 801499a:	3315      	adds	r3, #21
 801499c:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80149a0:	eddb 3a20 	vldr	s7, [fp, #128]	; 0x80
 80149a4:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 80149a8:	ed9b 4a21 	vldr	s8, [fp, #132]	; 0x84
 80149ac:	eddb 6a23 	vldr	s13, [fp, #140]	; 0x8c
 80149b0:	ed9b 7a27 	vldr	s14, [fp, #156]	; 0x9c
 80149b4:	eddb 5a22 	vldr	s11, [fp, #136]	; 0x88
 80149b8:	eddb 7a2b 	vldr	s15, [fp, #172]	; 0xac
 80149bc:	ee04 2a90 	vmov	s9, r2
 80149c0:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 80149c4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80149c8:	ee05 2a10 	vmov	s10, r2
 80149cc:	ee06 3a10 	vmov	s12, r3
 80149d0:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80149d4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80149d8:	ee74 4ae3 	vsub.f32	s9, s9, s7
 80149dc:	ee35 5a44 	vsub.f32	s10, s10, s8
 80149e0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80149e4:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80149e8:	ee25 7a07 	vmul.f32	s14, s10, s14
 80149ec:	ee36 6a65 	vsub.f32	s12, s12, s11
 80149f0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80149f4:	ee27 7a07 	vmul.f32	s14, s14, s14
 80149f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80149fc:	ee36 0a87 	vadd.f32	s0, s13, s14
 8014a00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014a04:	1c4b      	adds	r3, r1, #1
 8014a06:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014a0a:	fb93 f1f0 	sdiv	r1, r3, r0
 8014a0e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014a12:	fb00 3111 	mls	r1, r0, r1, r3
 8014a16:	b249      	sxtb	r1, r1
 8014a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a1c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014a20:	f88b 1036 	strb.w	r1, [fp, #54]	; 0x36
 8014a24:	f100 8193 	bmi.w	8014d4e <MEMS_runMagCal.constprop.21+0x24ea>
 8014a28:	3701      	adds	r7, #1
 8014a2a:	b23f      	sxth	r7, r7
 8014a2c:	eb0b 0341 	add.w	r3, fp, r1, lsl #1
 8014a30:	42af      	cmp	r7, r5
 8014a32:	ed9b 0a05 	vldr	s0, [fp, #20]
 8014a36:	ee68 7a00 	vmul.f32	s15, s16, s0
 8014a3a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8014a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014a42:	ee17 2a90 	vmov	r2, s15
 8014a46:	871a      	strh	r2, [r3, #56]	; 0x38
 8014a48:	463a      	mov	r2, r7
 8014a4a:	db9f      	blt.n	801498c <MEMS_runMagCal.constprop.21+0x2128>
 8014a4c:	f7fe bad8 	b.w	8013000 <MEMS_runMagCal.constprop.21+0x79c>
 8014a50:	3a83126f 	.word	0x3a83126f
 8014a54:	3c23d70a 	.word	0x3c23d70a
 8014a58:	447a0000 	.word	0x447a0000
 8014a5c:	20001724 	.word	0x20001724
 8014a60:	42c80000 	.word	0x42c80000
 8014a64:	20001700 	.word	0x20001700
 8014a68:	358637bd 	.word	0x358637bd
 8014a6c:	2224      	movs	r2, #36	; 0x24
 8014a6e:	a846      	add	r0, sp, #280	; 0x118
 8014a70:	f00a f981 	bl	801ed76 <memset>
 8014a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014a78:	fb03 f208 	mul.w	r2, r3, r8
 8014a7c:	ee06 2a90 	vmov	s13, r2
 8014a80:	fb03 f204 	mul.w	r2, r3, r4
 8014a84:	fb03 f306 	mul.w	r3, r3, r6
 8014a88:	ee07 2a10 	vmov	s14, r2
 8014a8c:	ee07 3a90 	vmov	s15, r3
 8014a90:	ed1f 6a0b 	vldr	s12, [pc, #-44]	; 8014a68 <MEMS_runMagCal.constprop.21+0x2204>
 8014a94:	4ee2      	ldr	r6, [pc, #904]	; (8014e20 <MEMS_runMagCal.constprop.21+0x25bc>)
 8014a96:	ed9b 0a05 	vldr	s0, [fp, #20]
 8014a9a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014a9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014aa6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014aaa:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014aae:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014ab2:	4631      	mov	r1, r6
 8014ab4:	ab36      	add	r3, sp, #216	; 0xd8
 8014ab6:	aa10      	add	r2, sp, #64	; 0x40
 8014ab8:	ac11      	add	r4, sp, #68	; 0x44
 8014aba:	f1a6 001e 	sub.w	r0, r6, #30
 8014abe:	edcd 6a46 	vstr	s13, [sp, #280]	; 0x118
 8014ac2:	ed8d 7a4a 	vstr	s14, [sp, #296]	; 0x128
 8014ac6:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 8014aca:	f7fc fe83 	bl	80117d4 <getMagStats.constprop.35>
 8014ace:	a946      	add	r1, sp, #280	; 0x118
 8014ad0:	4623      	mov	r3, r4
 8014ad2:	aa10      	add	r2, sp, #64	; 0x40
 8014ad4:	ed9b 0a05 	vldr	s0, [fp, #20]
 8014ad8:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
 8014adc:	f7fc fe7a 	bl	80117d4 <getMagStats.constprop.35>
 8014ae0:	eddf 6ad0 	vldr	s13, [pc, #832]	; 8014e24 <MEMS_runMagCal.constprop.21+0x25c0>
 8014ae4:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8014ae8:	ed94 7a00 	vldr	s14, [r4]
 8014aec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014af0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8014af4:	eef0 7ae7 	vabs.f32	s15, s15
 8014af8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b00:	d505      	bpl.n	8014b0e <MEMS_runMagCal.constprop.21+0x22aa>
 8014b02:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b0a:	f100 810a 	bmi.w	8014d22 <MEMS_runMagCal.constprop.21+0x24be>
 8014b0e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8014b12:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b1a:	f140 8100 	bpl.w	8014d1e <MEMS_runMagCal.constprop.21+0x24ba>
 8014b1e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b26:	bf4c      	ite	mi
 8014b28:	2302      	movmi	r3, #2
 8014b2a:	2301      	movpl	r3, #1
 8014b2c:	eddd 6a36 	vldr	s13, [sp, #216]	; 0xd8
 8014b30:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014b34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014b38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b40:	f57e aa99 	bpl.w	8013076 <MEMS_runMagCal.constprop.21+0x812>
 8014b44:	f89b 207c 	ldrb.w	r2, [fp, #124]	; 0x7c
 8014b48:	429a      	cmp	r2, r3
 8014b4a:	f63e aa94 	bhi.w	8013076 <MEMS_runMagCal.constprop.21+0x812>
 8014b4e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8014b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b56:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b5e:	f140 80e8 	bpl.w	8014d32 <MEMS_runMagCal.constprop.21+0x24ce>
 8014b62:	f9bb 1070 	ldrsh.w	r1, [fp, #112]	; 0x70
 8014b66:	f9bd 70ac 	ldrsh.w	r7, [sp, #172]	; 0xac
 8014b6a:	f9bb e06e 	ldrsh.w	lr, [fp, #110]	; 0x6e
 8014b6e:	f9bd 00aa 	ldrsh.w	r0, [sp, #170]	; 0xaa
 8014b72:	f9bb 5072 	ldrsh.w	r5, [fp, #114]	; 0x72
 8014b76:	f9bd 20ae 	ldrsh.w	r2, [sp, #174]	; 0xae
 8014b7a:	eddb 5a05 	vldr	s11, [fp, #20]
 8014b7e:	eba1 0c07 	sub.w	ip, r1, r7
 8014b82:	ebae 0800 	sub.w	r8, lr, r0
 8014b86:	ea8c 73ec 	eor.w	r3, ip, ip, asr #31
 8014b8a:	eba3 73ec 	sub.w	r3, r3, ip, asr #31
 8014b8e:	ea88 7ce8 	eor.w	ip, r8, r8, asr #31
 8014b92:	ebac 7ce8 	sub.w	ip, ip, r8, asr #31
 8014b96:	4563      	cmp	r3, ip
 8014b98:	eba5 0802 	sub.w	r8, r5, r2
 8014b9c:	bfb8      	it	lt
 8014b9e:	4663      	movlt	r3, ip
 8014ba0:	ea88 7ce8 	eor.w	ip, r8, r8, asr #31
 8014ba4:	b21b      	sxth	r3, r3
 8014ba6:	ebac 7ce8 	sub.w	ip, ip, r8, asr #31
 8014baa:	4563      	cmp	r3, ip
 8014bac:	bfb8      	it	lt
 8014bae:	4663      	movlt	r3, ip
 8014bb0:	b21b      	sxth	r3, r3
 8014bb2:	ee07 3a90 	vmov	s15, r3
 8014bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014bba:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8014bbe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014bc2:	eef4 7ac6 	vcmpe.f32	s15, s12
 8014bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bca:	f140 80a4 	bpl.w	8014d16 <MEMS_runMagCal.constprop.21+0x24b2>
 8014bce:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014bd2:	f8bb 3074 	ldrh.w	r3, [fp, #116]	; 0x74
 8014bd6:	eec6 3a87 	vdiv.f32	s7, s13, s14
 8014bda:	ee07 ea90 	vmov	s15, lr
 8014bde:	ee04 3a90 	vmov	s9, r3
 8014be2:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
 8014be6:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
 8014bea:	ee00 3a10 	vmov	s0, r3
 8014bee:	ee07 0a90 	vmov	s15, r0
 8014bf2:	f8bb 3076 	ldrh.w	r3, [fp, #118]	; 0x76
 8014bf6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014bfa:	ee00 3a90 	vmov	s1, r3
 8014bfe:	ee07 1a90 	vmov	s15, r1
 8014c02:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 8014c06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014c0a:	ee05 3a10 	vmov	s10, r3
 8014c0e:	ee07 7a90 	vmov	s15, r7
 8014c12:	f8bb 3078 	ldrh.w	r3, [fp, #120]	; 0x78
 8014c16:	eef8 2ae7 	vcvt.f32.s32	s5, s15
 8014c1a:	ee01 3a10 	vmov	s2, r3
 8014c1e:	ee07 5a90 	vmov	s15, r5
 8014c22:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
 8014c26:	eeb8 3ae7 	vcvt.f32.s32	s6, s15
 8014c2a:	ee05 3a90 	vmov	s11, r3
 8014c2e:	ee07 2a90 	vmov	s15, r2
 8014c32:	f89b 306c 	ldrb.w	r3, [fp, #108]	; 0x6c
 8014c36:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8014c3a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014c3e:	ee01 3a90 	vmov	s3, r3
 8014c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c46:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8014c4a:	ee23 3a04 	vmul.f32	s6, s6, s8
 8014c4e:	ee06 3a10 	vmov	s12, r3
 8014c52:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014c56:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014c5a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8014c5e:	ee22 2a04 	vmul.f32	s4, s4, s8
 8014c62:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014c66:	ee21 1a04 	vmul.f32	s2, s2, s8
 8014c6a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8014c6e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014c72:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014c76:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014c7a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014c7e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014c82:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8014c86:	ee62 2aa3 	vmul.f32	s5, s5, s7
 8014c8a:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8014c8e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8014c92:	ee64 4a84 	vmul.f32	s9, s9, s8
 8014c96:	ee60 0a84 	vmul.f32	s1, s1, s8
 8014c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c9e:	ee20 0a23 	vmul.f32	s0, s0, s7
 8014ca2:	ee25 5a23 	vmul.f32	s10, s10, s7
 8014ca6:	ee21 4a84 	vmul.f32	s8, s3, s8
 8014caa:	ee26 6a23 	vmul.f32	s12, s12, s7
 8014cae:	ee76 6a82 	vadd.f32	s13, s13, s4
 8014cb2:	ee37 7a22 	vadd.f32	s14, s14, s5
 8014cb6:	ee75 5a81 	vadd.f32	s11, s11, s2
 8014cba:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014cbe:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014cc2:	ee17 3a90 	vmov	r3, s15
 8014cc6:	ee74 4a80 	vadd.f32	s9, s9, s0
 8014cca:	eefc 7ae5 	vcvt.u32.f32	s15, s11
 8014cce:	ee35 5a20 	vadd.f32	s10, s10, s1
 8014cd2:	ee36 6a04 	vadd.f32	s12, s12, s8
 8014cd6:	ee16 1a90 	vmov	r1, s13
 8014cda:	ee17 2a10 	vmov	r2, s14
 8014cde:	ee17 5a90 	vmov	r5, s15
 8014ce2:	eefc 6ae4 	vcvt.u32.f32	s13, s9
 8014ce6:	eebc 7ac5 	vcvt.u32.f32	s14, s10
 8014cea:	eefc 7ac6 	vcvt.u32.f32	s15, s12
 8014cee:	ee16 ea90 	vmov	lr, s13
 8014cf2:	ee17 7a10 	vmov	r7, s14
 8014cf6:	ee17 0a90 	vmov	r0, s15
 8014cfa:	f8ad 10aa 	strh.w	r1, [sp, #170]	; 0xaa
 8014cfe:	f8ad e0b0 	strh.w	lr, [sp, #176]	; 0xb0
 8014d02:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
 8014d06:	f8ad 70b2 	strh.w	r7, [sp, #178]	; 0xb2
 8014d0a:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 8014d0e:	f8ad 50b4 	strh.w	r5, [sp, #180]	; 0xb4
 8014d12:	f88d 00a8 	strb.w	r0, [sp, #168]	; 0xa8
 8014d16:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8014d18:	f89b 50b0 	ldrb.w	r5, [fp, #176]	; 0xb0
 8014d1c:	e5d6      	b.n	80148cc <MEMS_runMagCal.constprop.21+0x2068>
 8014d1e:	2301      	movs	r3, #1
 8014d20:	e704      	b.n	8014b2c <MEMS_runMagCal.constprop.21+0x22c8>
 8014d22:	2303      	movs	r3, #3
 8014d24:	e702      	b.n	8014b2c <MEMS_runMagCal.constprop.21+0x22c8>
 8014d26:	2303      	movs	r3, #3
 8014d28:	f7fe b99c 	b.w	8013064 <MEMS_runMagCal.constprop.21+0x800>
 8014d2c:	2301      	movs	r3, #1
 8014d2e:	f7fe b999 	b.w	8013064 <MEMS_runMagCal.constprop.21+0x800>
 8014d32:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8014d36:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d3e:	d5ea      	bpl.n	8014d16 <MEMS_runMagCal.constprop.21+0x24b2>
 8014d40:	f89b 206c 	ldrb.w	r2, [fp, #108]	; 0x6c
 8014d44:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8014d48:	429a      	cmp	r2, r3
 8014d4a:	d2e4      	bcs.n	8014d16 <MEMS_runMagCal.constprop.21+0x24b2>
 8014d4c:	e709      	b.n	8014b62 <MEMS_runMagCal.constprop.21+0x22fe>
 8014d4e:	f007 fcf5 	bl	801c73c <sqrtf>
 8014d52:	f99b 1036 	ldrsb.w	r1, [fp, #54]	; 0x36
 8014d56:	f89b 50b0 	ldrb.w	r5, [fp, #176]	; 0xb0
 8014d5a:	f89b 0035 	ldrb.w	r0, [fp, #53]	; 0x35
 8014d5e:	e663      	b.n	8014a28 <MEMS_runMagCal.constprop.21+0x21c4>
 8014d60:	f04f 0900 	mov.w	r9, #0
 8014d64:	e558      	b.n	8014818 <MEMS_runMagCal.constprop.21+0x1fb4>
 8014d66:	eddf 7a30 	vldr	s15, [pc, #192]	; 8014e28 <MEMS_runMagCal.constprop.21+0x25c4>
 8014d6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d72:	f53f acd7 	bmi.w	8014724 <MEMS_runMagCal.constprop.21+0x1ec0>
 8014d76:	e4dc      	b.n	8014732 <MEMS_runMagCal.constprop.21+0x1ece>
 8014d78:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 8014e38 <MEMS_runMagCal.constprop.21+0x25d4>
 8014d7c:	e4b6      	b.n	80146ec <MEMS_runMagCal.constprop.21+0x1e88>
 8014d7e:	2224      	movs	r2, #36	; 0x24
 8014d80:	2100      	movs	r1, #0
 8014d82:	a846      	add	r0, sp, #280	; 0x118
 8014d84:	f009 fff7 	bl	801ed76 <memset>
 8014d88:	eddf 7a26 	vldr	s15, [pc, #152]	; 8014e24 <MEMS_runMagCal.constprop.21+0x25c0>
 8014d8c:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8014d90:	ee87 8a8c 	vdiv.f32	s16, s15, s24
 8014d94:	ee87 0a28 	vdiv.f32	s0, s14, s17
 8014d98:	f007 f9bc 	bl	801c114 <roundf>
 8014d9c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8014da0:	eddd 7a2f 	vldr	s15, [sp, #188]	; 0xbc
 8014da4:	ed8d 8a46 	vstr	s16, [sp, #280]	; 0x118
 8014da8:	ee17 3a10 	vmov	r3, s14
 8014dac:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 8014db0:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
 8014db4:	f007 f9ae 	bl	801c114 <roundf>
 8014db8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8014dbc:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8014dc0:	ed8d 8a4a 	vstr	s16, [sp, #296]	; 0x128
 8014dc4:	ee17 3a10 	vmov	r3, s14
 8014dc8:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 8014dcc:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
 8014dd0:	f007 f9a0 	bl	801c114 <roundf>
 8014dd4:	ab25      	add	r3, sp, #148	; 0x94
 8014dd6:	aa34      	add	r2, sp, #208	; 0xd0
 8014dd8:	a946      	add	r1, sp, #280	; 0x118
 8014dda:	a836      	add	r0, sp, #216	; 0xd8
 8014ddc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014de0:	eeb0 0a68 	vmov.f32	s0, s17
 8014de4:	ee17 4a90 	vmov	r4, s15
 8014de8:	ed8d 8a4e 	vstr	s16, [sp, #312]	; 0x138
 8014dec:	f8ad 40dc 	strh.w	r4, [sp, #220]	; 0xdc
 8014df0:	f7fc fcf0 	bl	80117d4 <getMagStats.constprop.35>
 8014df4:	ed9d 8a25 	vldr	s16, [sp, #148]	; 0x94
 8014df8:	ed9d aa34 	vldr	s20, [sp, #208]	; 0xd0
 8014dfc:	ed9d ca31 	vldr	s24, [sp, #196]	; 0xc4
 8014e00:	ee28 9a09 	vmul.f32	s18, s16, s18
 8014e04:	ee38 8a08 	vadd.f32	s16, s16, s16
 8014e08:	e443      	b.n	8014692 <MEMS_runMagCal.constprop.21+0x1e2e>
 8014e0a:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 8014e38 <MEMS_runMagCal.constprop.21+0x25d4>
 8014e0e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8014e3c <MEMS_runMagCal.constprop.21+0x25d8>
 8014e12:	eef0 7a49 	vmov.f32	s15, s18
 8014e16:	e41e      	b.n	8014656 <MEMS_runMagCal.constprop.21+0x1df2>
 8014e18:	eeb0 ca66 	vmov.f32	s24, s13
 8014e1c:	f7ff b9e6 	b.w	80141ec <MEMS_runMagCal.constprop.21+0x1988>
 8014e20:	20001724 	.word	0x20001724
 8014e24:	423c0000 	.word	0x423c0000
 8014e28:	3eb33333 	.word	0x3eb33333
 8014e2c:	bf000001 	.word	0xbf000001
 8014e30:	40060a92 	.word	0x40060a92
 8014e34:	3effffff 	.word	0x3effffff
 8014e38:	00000000 	.word	0x00000000
 8014e3c:	41f00001 	.word	0x41f00001
 8014e40:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8014e44:	ee86 9a05 	vdiv.f32	s18, s12, s10
 8014e48:	ee75 5aa5 	vadd.f32	s11, s11, s11
 8014e4c:	ee37 7a49 	vsub.f32	s14, s14, s18
 8014e50:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8014e54:	ee27 7a07 	vmul.f32	s14, s14, s14
 8014e58:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8014e5c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8014e60:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014e64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014e68:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8014e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e70:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8014e74:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8014e78:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e80:	eeb1 aac0 	vsqrt.f32	s20, s0
 8014e84:	d501      	bpl.n	8014e8a <MEMS_runMagCal.constprop.21+0x2626>
 8014e86:	f007 fc59 	bl	801c73c <sqrtf>
 8014e8a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8014e8e:	eddd 6a33 	vldr	s13, [sp, #204]	; 0xcc
 8014e92:	eddd 5a32 	vldr	s11, [sp, #200]	; 0xc8
 8014e96:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 8014e9a:	eddd 4a30 	vldr	s9, [sp, #192]	; 0xc0
 8014e9e:	ed9d 5a2e 	vldr	s10, [sp, #184]	; 0xb8
 8014ea2:	ee37 7a49 	vsub.f32	s14, s14, s18
 8014ea6:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8014eaa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8014eae:	ee86 7a8a 	vdiv.f32	s14, s13, s20
 8014eb2:	eec5 6a8a 	vdiv.f32	s13, s11, s20
 8014eb6:	eec6 5a0a 	vdiv.f32	s11, s12, s20
 8014eba:	ee84 6a8a 	vdiv.f32	s12, s9, s20
 8014ebe:	ee35 5a49 	vsub.f32	s10, s10, s18
 8014ec2:	ee27 0a87 	vmul.f32	s0, s15, s14
 8014ec6:	eec5 4a0a 	vdiv.f32	s9, s10, s20
 8014eca:	ee26 4aa6 	vmul.f32	s8, s13, s13
 8014ece:	ee26 5a86 	vmul.f32	s10, s13, s12
 8014ed2:	ee25 7a87 	vmul.f32	s14, s11, s14
 8014ed6:	ee30 0a44 	vsub.f32	s0, s0, s8
 8014eda:	ee37 7a45 	vsub.f32	s14, s14, s10
 8014ede:	ee27 4a86 	vmul.f32	s8, s15, s12
 8014ee2:	ee26 5aa5 	vmul.f32	s10, s13, s11
 8014ee6:	ee27 7a25 	vmul.f32	s14, s14, s11
 8014eea:	ee35 5a44 	vsub.f32	s10, s10, s8
 8014eee:	ee20 0a24 	vmul.f32	s0, s0, s9
 8014ef2:	edcd 7a4a 	vstr	s15, [sp, #296]	; 0x128
 8014ef6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014efa:	ee25 7a06 	vmul.f32	s14, s10, s12
 8014efe:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8014f02:	ee30 0a07 	vadd.f32	s0, s0, s14
 8014f06:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014f0a:	ee20 0a05 	vmul.f32	s0, s0, s10
 8014f0e:	edcd 6a4b 	vstr	s13, [sp, #300]	; 0x12c
 8014f12:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f1a:	edcd 6a4d 	vstr	s13, [sp, #308]	; 0x134
 8014f1e:	edcd 4a46 	vstr	s9, [sp, #280]	; 0x118
 8014f22:	edcd 5a47 	vstr	s11, [sp, #284]	; 0x11c
 8014f26:	edcd 5a49 	vstr	s11, [sp, #292]	; 0x124
 8014f2a:	ed8d 6a48 	vstr	s12, [sp, #288]	; 0x120
 8014f2e:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 8014f32:	d945      	bls.n	8014fc0 <MEMS_runMagCal.constprop.21+0x275c>
 8014f34:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014f38:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8014f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f40:	db2b      	blt.n	8014f9a <MEMS_runMagCal.constprop.21+0x2736>
 8014f42:	ed1f 0a46 	vldr	s0, [pc, #-280]	; 8014e2c <MEMS_runMagCal.constprop.21+0x25c8>
 8014f46:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 8014f4a:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 8014f4e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8014f52:	ee27 7a88 	vmul.f32	s14, s15, s16
 8014f56:	ee69 6a26 	vmul.f32	s13, s18, s13
 8014f5a:	ee37 7a09 	vadd.f32	s14, s14, s18
 8014f5e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014f62:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8014f66:	ee77 7a89 	vadd.f32	s15, s15, s18
 8014f6a:	ee04 3a90 	vmov	s9, r3
 8014f6e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8014f72:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8014f76:	ee37 6a26 	vadd.f32	s12, s14, s13
 8014f7a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014f7e:	f7fe bd5f 	b.w	8013a40 <MEMS_runMagCal.constprop.21+0x11dc>
 8014f82:	ed1f 6a53 	vldr	s12, [pc, #-332]	; 8014e38 <MEMS_runMagCal.constprop.21+0x25d4>
 8014f86:	eef0 7a46 	vmov.f32	s15, s12
 8014f8a:	eef0 6a46 	vmov.f32	s13, s12
 8014f8e:	eeb0 7a46 	vmov.f32	s14, s12
 8014f92:	eeb0 9a46 	vmov.f32	s18, s12
 8014f96:	f7fe bd60 	b.w	8013a5a <MEMS_runMagCal.constprop.21+0x11f6>
 8014f9a:	f007 fb77 	bl	801c68c <acosf>
 8014f9e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8014fa2:	eec0 aa27 	vdiv.f32	s21, s0, s15
 8014fa6:	eeb0 0a6a 	vmov.f32	s0, s21
 8014faa:	f007 f873 	bl	801c094 <cosf>
 8014fae:	eeb0 8a40 	vmov.f32	s16, s0
 8014fb2:	ed1f 0a61 	vldr	s0, [pc, #-388]	; 8014e30 <MEMS_runMagCal.constprop.21+0x25cc>
 8014fb6:	ee3a 0a80 	vadd.f32	s0, s21, s0
 8014fba:	f007 f86b 	bl	801c094 <cosf>
 8014fbe:	e7c2      	b.n	8014f46 <MEMS_runMagCal.constprop.21+0x26e2>
 8014fc0:	eeb0 0a47 	vmov.f32	s0, s14
 8014fc4:	ed1f 8a65 	vldr	s16, [pc, #-404]	; 8014e34 <MEMS_runMagCal.constprop.21+0x25d0>
 8014fc8:	e7bd      	b.n	8014f46 <MEMS_runMagCal.constprop.21+0x26e2>
 8014fca:	ed1f 9a65 	vldr	s18, [pc, #-404]	; 8014e38 <MEMS_runMagCal.constprop.21+0x25d4>
 8014fce:	ed9d ca31 	vldr	s24, [sp, #196]	; 0xc4
 8014fd2:	ed1f 7a66 	vldr	s14, [pc, #-408]	; 8014e3c <MEMS_runMagCal.constprop.21+0x25d8>
 8014fd6:	eef0 7a49 	vmov.f32	s15, s18
 8014fda:	f7ff bb3c 	b.w	8014656 <MEMS_runMagCal.constprop.21+0x1df2>
 8014fde:	ed96 0a00 	vldr	s0, [r6]
 8014fe2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fea:	eeb1 9ac0 	vsqrt.f32	s18, s0
 8014fee:	f57f aada 	bpl.w	80145a6 <MEMS_runMagCal.constprop.21+0x1d42>
 8014ff2:	f007 fba3 	bl	801c73c <sqrtf>
 8014ff6:	f7ff bad6 	b.w	80145a6 <MEMS_runMagCal.constprop.21+0x1d42>
 8014ffa:	ed98 0a00 	vldr	s0, [r8]
 8014ffe:	eef4 7ac0 	vcmpe.f32	s15, s0
 8015002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015006:	d5e0      	bpl.n	8014fca <MEMS_runMagCal.constprop.21+0x2766>
 8015008:	ee30 0a67 	vsub.f32	s0, s0, s15
 801500c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8015010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015014:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8015018:	d505      	bpl.n	8015026 <MEMS_runMagCal.constprop.21+0x27c2>
 801501a:	9102      	str	r1, [sp, #8]
 801501c:	9201      	str	r2, [sp, #4]
 801501e:	f007 fb8d 	bl	801c73c <sqrtf>
 8015022:	9902      	ldr	r1, [sp, #8]
 8015024:	9a01      	ldr	r2, [sp, #4]
 8015026:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 801502a:	ed83 8a00 	vstr	s16, [r3]
 801502e:	f7ff ba60 	b.w	80144f2 <MEMS_runMagCal.constprop.21+0x1c8e>
 8015032:	bf00      	nop
 8015034:	0000      	movs	r0, r0
	...

08015038 <m_kalman_3gyro.isra.9.constprop.47>:
 8015038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801503c:	ed2d 8b10 	vpush	{d8-d15}
 8015040:	4cd2      	ldr	r4, [pc, #840]	; (801538c <m_kalman_3gyro.isra.9.constprop.47+0x354>)
 8015042:	ed9f 8ad3 	vldr	s16, [pc, #844]	; 8015390 <m_kalman_3gyro.isra.9.constprop.47+0x358>
 8015046:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 801504a:	468c      	mov	ip, r1
 801504c:	4691      	mov	r9, r2
 801504e:	9125      	str	r1, [sp, #148]	; 0x94
 8015050:	9208      	str	r2, [sp, #32]
 8015052:	9307      	str	r3, [sp, #28]
 8015054:	4680      	mov	r8, r0
 8015056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015058:	aeb1      	add	r6, sp, #708	; 0x2c4
 801505a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801505c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801505e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015062:	f89d 56c0 	ldrb.w	r5, [sp, #1728]	; 0x6c0
 8015066:	9526      	str	r5, [sp, #152]	; 0x98
 8015068:	f89d 56c4 	ldrb.w	r5, [sp, #1732]	; 0x6c4
 801506c:	950a      	str	r5, [sp, #40]	; 0x28
 801506e:	f8dd a700 	ldr.w	sl, [sp, #1792]	; 0x700
 8015072:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015074:	4625      	mov	r5, r4
 8015076:	afbe      	add	r7, sp, #760	; 0x2f8
 8015078:	f855 3b04 	ldr.w	r3, [r5], #4
 801507c:	6033      	str	r3, [r6, #0]
 801507e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015080:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015084:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015088:	f104 0e38 	add.w	lr, r4, #56	; 0x38
 801508c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801508e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015092:	aecb      	add	r6, sp, #812	; 0x32c
 8015094:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015096:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801509a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801509c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80150a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80150a2:	682a      	ldr	r2, [r5, #0]
 80150a4:	f8de 3000 	ldr.w	r3, [lr]
 80150a8:	603a      	str	r2, [r7, #0]
 80150aa:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 80150ae:	6033      	str	r3, [r6, #0]
 80150b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80150b2:	add8      	add	r5, sp, #864	; 0x360
 80150b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80150b6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80150b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80150ba:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80150bc:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 80150c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80150c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80150c4:	683f      	ldr	r7, [r7, #0]
 80150c6:	602f      	str	r7, [r5, #0]
 80150c8:	ad93      	add	r5, sp, #588	; 0x24c
 80150ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80150cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80150ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80150d0:	e896 0003 	ldmia.w	r6, {r0, r1}
 80150d4:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 80150d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80150dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80150de:	ad9d      	add	r5, sp, #628	; 0x274
 80150e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80150e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80150e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80150e6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80150ea:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
 80150ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80150f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80150f4:	ada7      	add	r5, sp, #668	; 0x29c
 80150f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80150f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80150fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80150fc:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015100:	f504 768c 	add.w	r6, r4, #280	; 0x118
 8015104:	e885 0003 	stmia.w	r5, {r0, r1}
 8015108:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801510a:	ad58      	add	r5, sp, #352	; 0x160
 801510c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801510e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015112:	f8dd 76f4 	ldr.w	r7, [sp, #1780]	; 0x6f4
 8015116:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801511a:	f504 749a 	add.w	r4, r4, #308	; 0x134
 801511e:	2500      	movs	r5, #0
 8015120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015122:	703d      	strb	r5, [r7, #0]
 8015124:	f8dd 76f8 	ldr.w	r7, [sp, #1784]	; 0x6f8
 8015128:	ed8d 2a27 	vstr	s4, [sp, #156]	; 0x9c
 801512c:	703d      	strb	r5, [r7, #0]
 801512e:	f8dd 76fc 	ldr.w	r7, [sp, #1788]	; 0x6fc
 8015132:	703d      	strb	r5, [r7, #0]
 8015134:	eddc 6a00 	vldr	s13, [ip]
 8015138:	eddc 7a01 	vldr	s15, [ip, #4]
 801513c:	ed9c 7a02 	vldr	s14, [ip, #8]
 8015140:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8015144:	ad5f      	add	r5, sp, #380	; 0x17c
 8015146:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801514a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801514c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015150:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8015154:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015158:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801515c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015160:	4667      	mov	r7, ip
 8015162:	ee17 0a90 	vmov	r0, s15
 8015166:	eeb0 fa41 	vmov.f32	s30, s2
 801516a:	eef0 8a61 	vmov.f32	s17, s3
 801516e:	eef0 ea40 	vmov.f32	s29, s0
 8015172:	eeb0 da60 	vmov.f32	s26, s1
 8015176:	f7eb f9ef 	bl	8000558 <__aeabi_f2d>
 801517a:	ec41 0b10 	vmov	d0, r0, r1
 801517e:	f007 fa2b 	bl	801c5d8 <sqrt>
 8015182:	ec51 0b10 	vmov	r0, r1, d0
 8015186:	f7eb fd33 	bl	8000bf0 <__aeabi_d2f>
 801518a:	edd9 6a00 	vldr	s13, [r9]
 801518e:	edd9 7a01 	vldr	s15, [r9, #4]
 8015192:	ed99 7a02 	vldr	s14, [r9, #8]
 8015196:	4b7f      	ldr	r3, [pc, #508]	; (8015394 <m_kalman_3gyro.isra.9.constprop.47+0x35c>)
 8015198:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801519c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80151a0:	ee27 7a07 	vmul.f32	s14, s14, s14
 80151a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80151a8:	6018      	str	r0, [r3, #0]
 80151aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151ae:	ee09 0a90 	vmov	s19, r0
 80151b2:	ee17 0a90 	vmov	r0, s15
 80151b6:	f7eb f9cf 	bl	8000558 <__aeabi_f2d>
 80151ba:	ec41 0b10 	vmov	d0, r0, r1
 80151be:	f007 fa0b 	bl	801c5d8 <sqrt>
 80151c2:	ec51 0b10 	vmov	r0, r1, d0
 80151c6:	f7eb fd13 	bl	8000bf0 <__aeabi_d2f>
 80151ca:	edd7 7a00 	vldr	s15, [r7]
 80151ce:	ed99 5a00 	vldr	s10, [r9]
 80151d2:	edd7 6a01 	vldr	s13, [r7, #4]
 80151d6:	edd9 5a01 	vldr	s11, [r9, #4]
 80151da:	ed97 7a02 	vldr	s14, [r7, #8]
 80151de:	ed99 6a02 	vldr	s12, [r9, #8]
 80151e2:	edcd 7a52 	vstr	s15, [sp, #328]	; 0x148
 80151e6:	ee0a 0a10 	vmov	s20, r0
 80151ea:	ee87 9aa9 	vdiv.f32	s18, s15, s19
 80151ee:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 80151f2:	f89a 48cd 	ldrb.w	r4, [sl, #2253]	; 0x8cd
 80151f6:	ab55      	add	r3, sp, #340	; 0x154
 80151f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80151fc:	ee85 ba0a 	vdiv.f32	s22, s10, s20
 8015200:	ee86 eaa9 	vdiv.f32	s28, s13, s19
 8015204:	eec5 ba8a 	vdiv.f32	s23, s11, s20
 8015208:	eec7 da29 	vdiv.f32	s27, s14, s19
 801520c:	eec6 aa0a 	vdiv.f32	s21, s12, s20
 8015210:	ee6b fa09 	vmul.f32	s31, s22, s18
 8015214:	ee6b 7a8e 	vmul.f32	s15, s23, s28
 8015218:	ee7f fa88 	vadd.f32	s31, s31, s16
 801521c:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 8015220:	ee77 7aaf 	vadd.f32	s15, s15, s31
 8015224:	ee6d faaa 	vmul.f32	s31, s27, s21
 8015228:	ed8d 7a54 	vstr	s14, [sp, #336]	; 0x150
 801522c:	ee7f faa7 	vadd.f32	s31, s31, s15
 8015230:	ed8d 9a35 	vstr	s18, [sp, #212]	; 0xd4
 8015234:	ed8d ea36 	vstr	s28, [sp, #216]	; 0xd8
 8015238:	edcd da37 	vstr	s27, [sp, #220]	; 0xdc
 801523c:	ed8d ba38 	vstr	s22, [sp, #224]	; 0xe0
 8015240:	edcd ba39 	vstr	s23, [sp, #228]	; 0xe4
 8015244:	edcd aa3a 	vstr	s21, [sp, #232]	; 0xe8
 8015248:	2c00      	cmp	r4, #0
 801524a:	f040 81b0 	bne.w	80155ae <m_kalman_3gyro.isra.9.constprop.47+0x576>
 801524e:	f50d 61db 	add.w	r1, sp, #1752	; 0x6d8
 8015252:	ed91 7b00 	vldr	d7, [r1]
 8015256:	aa3e      	add	r2, sp, #248	; 0xf8
 8015258:	4616      	mov	r6, r2
 801525a:	2301      	movs	r3, #1
 801525c:	9206      	str	r2, [sp, #24]
 801525e:	f10a 0240 	add.w	r2, sl, #64	; 0x40
 8015262:	ed8a 7b0e 	vstr	d7, [sl, #56]	; 0x38
 8015266:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 801526a:	f88a 38cd 	strb.w	r3, [sl, #2253]	; 0x8cd
 801526e:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
 8015272:	4621      	mov	r1, r4
 8015274:	6034      	str	r4, [r6, #0]
 8015276:	6074      	str	r4, [r6, #4]
 8015278:	60b4      	str	r4, [r6, #8]
 801527a:	60f4      	str	r4, [r6, #12]
 801527c:	9209      	str	r2, [sp, #36]	; 0x24
 801527e:	f88a 4030 	strb.w	r4, [sl, #48]	; 0x30
 8015282:	4610      	mov	r0, r2
 8015284:	2224      	movs	r2, #36	; 0x24
 8015286:	9442      	str	r4, [sp, #264]	; 0x108
 8015288:	9443      	str	r4, [sp, #268]	; 0x10c
 801528a:	9444      	str	r4, [sp, #272]	; 0x110
 801528c:	9545      	str	r5, [sp, #276]	; 0x114
 801528e:	f009 fd72 	bl	801ed76 <memset>
 8015292:	4621      	mov	r1, r4
 8015294:	f8ca 5060 	str.w	r5, [sl, #96]	; 0x60
 8015298:	f8ca 5050 	str.w	r5, [sl, #80]	; 0x50
 801529c:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 80152a0:	2230      	movs	r2, #48	; 0x30
 80152a2:	f10a 0064 	add.w	r0, sl, #100	; 0x64
 80152a6:	f009 fd66 	bl	801ed76 <memset>
 80152aa:	4b3b      	ldr	r3, [pc, #236]	; (8015398 <m_kalman_3gyro.isra.9.constprop.47+0x360>)
 80152ac:	f8ca 50b0 	str.w	r5, [sl, #176]	; 0xb0
 80152b0:	4621      	mov	r1, r4
 80152b2:	f8ca 50b4 	str.w	r5, [sl, #180]	; 0xb4
 80152b6:	ed8a 8a25 	vstr	s16, [sl, #148]	; 0x94
 80152ba:	ed8a 8a26 	vstr	s16, [sl, #152]	; 0x98
 80152be:	ed8a 8a27 	vstr	s16, [sl, #156]	; 0x9c
 80152c2:	f8ca 30ac 	str.w	r3, [sl, #172]	; 0xac
 80152c6:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80152ca:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 80152ce:	f009 fd52 	bl	801ed76 <memset>
 80152d2:	4b32      	ldr	r3, [pc, #200]	; (801539c <m_kalman_3gyro.isra.9.constprop.47+0x364>)
 80152d4:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 80152d8:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80152dc:	f50a 7105 	add.w	r1, sl, #532	; 0x214
 80152e0:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 80152e4:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 80152e8:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 80152ec:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 80152f0:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 80152f4:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 80152f8:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 80152fc:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8015300:	f50a 730e 	add.w	r3, sl, #568	; 0x238
 8015304:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8015308:	461d      	mov	r5, r3
 801530a:	9122      	str	r1, [sp, #136]	; 0x88
 801530c:	f8ca 21fc 	str.w	r2, [sl, #508]	; 0x1fc
 8015310:	4608      	mov	r0, r1
 8015312:	f8ca 2200 	str.w	r2, [sl, #512]	; 0x200
 8015316:	f8ca 2204 	str.w	r2, [sl, #516]	; 0x204
 801531a:	2100      	movs	r1, #0
 801531c:	2224      	movs	r2, #36	; 0x24
 801531e:	9316      	str	r3, [sp, #88]	; 0x58
 8015320:	f50a 7417 	add.w	r4, sl, #604	; 0x25c
 8015324:	f009 fd27 	bl	801ed76 <memset>
 8015328:	4628      	mov	r0, r5
 801532a:	2224      	movs	r2, #36	; 0x24
 801532c:	2100      	movs	r1, #0
 801532e:	ed8a 9a8d 	vstr	s18, [sl, #564]	; 0x234
 8015332:	ed8a 9a89 	vstr	s18, [sl, #548]	; 0x224
 8015336:	ed8a 9a85 	vstr	s18, [sl, #532]	; 0x214
 801533a:	f009 fd1c 	bl	801ed76 <memset>
 801533e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015342:	2100      	movs	r1, #0
 8015344:	ed8a 9a96 	vstr	s18, [sl, #600]	; 0x258
 8015348:	ed8a 9a92 	vstr	s18, [sl, #584]	; 0x248
 801534c:	ed8a 9a8e 	vstr	s18, [sl, #568]	; 0x238
 8015350:	4620      	mov	r0, r4
 8015352:	f009 fd10 	bl	801ed76 <memset>
 8015356:	f20a 4104 	addw	r1, sl, #1028	; 0x404
 801535a:	9110      	str	r1, [sp, #64]	; 0x40
 801535c:	f50a 6082 	add.w	r0, sl, #1040	; 0x410
 8015360:	f50a 6181 	add.w	r1, sl, #1032	; 0x408
 8015364:	9100      	str	r1, [sp, #0]
 8015366:	9019      	str	r0, [sp, #100]	; 0x64
 8015368:	f20a 4114 	addw	r1, sl, #1044	; 0x414
 801536c:	f50a 6083 	add.w	r0, sl, #1048	; 0x418
 8015370:	f50a 7375 	add.w	r3, sl, #980	; 0x3d4
 8015374:	9111      	str	r1, [sp, #68]	; 0x44
 8015376:	9012      	str	r0, [sp, #72]	; 0x48
 8015378:	f50a 6185 	add.w	r1, sl, #1064	; 0x428
 801537c:	f20a 4024 	addw	r0, sl, #1060	; 0x424
 8015380:	2700      	movs	r7, #0
 8015382:	f04f 0900 	mov.w	r9, #0
 8015386:	901b      	str	r0, [sp, #108]	; 0x6c
 8015388:	911c      	str	r1, [sp, #112]	; 0x70
 801538a:	e015      	b.n	80153b8 <m_kalman_3gyro.isra.9.constprop.47+0x380>
 801538c:	08021ad0 	.word	0x08021ad0
 8015390:	00000000 	.word	0x00000000
 8015394:	20001ab4 	.word	0x20001ab4
 8015398:	3f666666 	.word	0x3f666666
 801539c:	40a00000 	.word	0x40a00000
 80153a0:	3ca3d70a 	.word	0x3ca3d70a
 80153a4:	be4ccccd 	.word	0xbe4ccccd
 80153a8:	00000000 	.word	0x00000000
 80153ac:	bdcccccd 	.word	0xbdcccccd
 80153b0:	3dcccccd 	.word	0x3dcccccd
 80153b4:	3e4ccccd 	.word	0x3e4ccccd
 80153b8:	f20a 402c 	addw	r0, sl, #1068	; 0x42c
 80153bc:	f50a 6186 	add.w	r1, sl, #1072	; 0x430
 80153c0:	f8ca 73d4 	str.w	r7, [sl, #980]	; 0x3d4
 80153c4:	f8ca 93c4 	str.w	r9, [sl, #964]	; 0x3c4
 80153c8:	f8ca 93c8 	str.w	r9, [sl, #968]	; 0x3c8
 80153cc:	f8ca 93cc 	str.w	r9, [sl, #972]	; 0x3cc
 80153d0:	f8ca 93d0 	str.w	r9, [sl, #976]	; 0x3d0
 80153d4:	901d      	str	r0, [sp, #116]	; 0x74
 80153d6:	605f      	str	r7, [r3, #4]
 80153d8:	609f      	str	r7, [r3, #8]
 80153da:	9113      	str	r1, [sp, #76]	; 0x4c
 80153dc:	f20a 4034 	addw	r0, sl, #1076	; 0x434
 80153e0:	f50a 6187 	add.w	r1, sl, #1080	; 0x438
 80153e4:	9318      	str	r3, [sp, #96]	; 0x60
 80153e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80153e8:	900c      	str	r0, [sp, #48]	; 0x30
 80153ea:	f20a 4c1c 	addw	ip, sl, #1052	; 0x41c
 80153ee:	911e      	str	r1, [sp, #120]	; 0x78
 80153f0:	f20a 403c 	addw	r0, sl, #1084	; 0x43c
 80153f4:	f50d 61db 	add.w	r1, sp, #1752	; 0x6d8
 80153f8:	f8ca 73e0 	str.w	r7, [sl, #992]	; 0x3e0
 80153fc:	f8ca 73e4 	str.w	r7, [sl, #996]	; 0x3e4
 8015400:	f8ca 73e8 	str.w	r7, [sl, #1000]	; 0x3e8
 8015404:	f8ca 73ec 	str.w	r7, [sl, #1004]	; 0x3ec
 8015408:	f8ca 73f0 	str.w	r7, [sl, #1008]	; 0x3f0
 801540c:	f8ca 73f4 	str.w	r7, [sl, #1012]	; 0x3f4
 8015410:	f8ca 73f8 	str.w	r7, [sl, #1016]	; 0x3f8
 8015414:	f8ca 73fc 	str.w	r7, [sl, #1020]	; 0x3fc
 8015418:	f8ca 7400 	str.w	r7, [sl, #1024]	; 0x400
 801541c:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 8015420:	900b      	str	r0, [sp, #44]	; 0x2c
 8015422:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015426:	f8c3 9000 	str.w	r9, [r3]
 801542a:	9b00      	ldr	r3, [sp, #0]
 801542c:	f20a 460c 	addw	r6, sl, #1036	; 0x40c
 8015430:	f8c3 9000 	str.w	r9, [r3]
 8015434:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015436:	f8c6 9000 	str.w	r9, [r6]
 801543a:	f8c3 9000 	str.w	r9, [r3]
 801543e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015440:	f8c3 9000 	str.w	r9, [r3]
 8015444:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015446:	f8c3 9000 	str.w	r9, [r3]
 801544a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801544c:	f50a 6c84 	add.w	ip, sl, #1056	; 0x420
 8015450:	f8c3 9000 	str.w	r9, [r3]
 8015454:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015456:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
 801545a:	f8cc b000 	str.w	fp, [ip]
 801545e:	f8c3 9000 	str.w	r9, [r3]
 8015462:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015464:	f8c3 9000 	str.w	r9, [r3]
 8015468:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801546a:	f8c3 9000 	str.w	r9, [r3]
 801546e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015470:	f8c3 9000 	str.w	r9, [r3]
 8015474:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015476:	f8c3 9000 	str.w	r9, [r3]
 801547a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801547c:	f8c3 9000 	str.w	r9, [r3]
 8015480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015482:	ed83 9a00 	vstr	s18, [r3]
 8015486:	f7eb fbb3 	bl	8000bf0 <__aeabi_d2f>
 801548a:	f50a 6388 	add.w	r3, sl, #1088	; 0x440
 801548e:	461a      	mov	r2, r3
 8015490:	9314      	str	r3, [sp, #80]	; 0x50
 8015492:	f20a 4344 	addw	r3, sl, #1092	; 0x444
 8015496:	4619      	mov	r1, r3
 8015498:	ee08 0a10 	vmov	s16, r0
 801549c:	930d      	str	r3, [sp, #52]	; 0x34
 801549e:	ed5f 7a40 	vldr	s15, [pc, #-256]	; 80153a0 <m_kalman_3gyro.isra.9.constprop.47+0x368>
 80154a2:	f50a 6389 	add.w	r3, sl, #1096	; 0x448
 80154a6:	4618      	mov	r0, r3
 80154a8:	931f      	str	r3, [sp, #124]	; 0x7c
 80154aa:	f20a 434c 	addw	r3, sl, #1100	; 0x44c
 80154ae:	461d      	mov	r5, r3
 80154b0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80154b4:	930e      	str	r3, [sp, #56]	; 0x38
 80154b6:	2332      	movs	r3, #50	; 0x32
 80154b8:	edc2 7a00 	vstr	s15, [r2]
 80154bc:	f8c1 9000 	str.w	r9, [r1]
 80154c0:	ed80 9a00 	vstr	s18, [r0]
 80154c4:	f8c5 9000 	str.w	r9, [r5]
 80154c8:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 80154cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80154ce:	f8ca 7450 	str.w	r7, [sl, #1104]	; 0x450
 80154d2:	f8ca 7454 	str.w	r7, [sl, #1108]	; 0x454
 80154d6:	f8ca 745c 	str.w	r7, [sl, #1116]	; 0x45c
 80154da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80154de:	af6f      	add	r7, sp, #444	; 0x1bc
 80154e0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80154e4:	9b08      	ldr	r3, [sp, #32]
 80154e6:	edd7 6a00 	vldr	s13, [r7]
 80154ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80154ee:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80154f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80154f6:	ab72      	add	r3, sp, #456	; 0x1c8
 80154f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80154fc:	9b07      	ldr	r3, [sp, #28]
 80154fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8015502:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015506:	f8d7 c014 	ldr.w	ip, [r7, #20]
 801550a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801550e:	ab75      	add	r3, sp, #468	; 0x1d4
 8015510:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015514:	f50a 658c 	add.w	r5, sl, #1120	; 0x460
 8015518:	9515      	str	r5, [sp, #84]	; 0x54
 801551a:	462b      	mov	r3, r5
 801551c:	f8d7 e018 	ldr.w	lr, [r7, #24]
 8015520:	69f8      	ldr	r0, [r7, #28]
 8015522:	6a39      	ldr	r1, [r7, #32]
 8015524:	9d00      	ldr	r5, [sp, #0]
 8015526:	f60a 0298 	addw	r2, sl, #2200	; 0x898
 801552a:	edc3 6a00 	vstr	s13, [r3]
 801552e:	ed83 7a01 	vstr	s14, [r3, #4]
 8015532:	f8c3 b008 	str.w	fp, [r3, #8]
 8015536:	ed83 6a03 	vstr	s12, [r3, #12]
 801553a:	f8c3 9010 	str.w	r9, [r3, #16]
 801553e:	f8c3 c014 	str.w	ip, [r3, #20]
 8015542:	f8c3 e018 	str.w	lr, [r3, #24]
 8015546:	61d8      	str	r0, [r3, #28]
 8015548:	6219      	str	r1, [r3, #32]
 801554a:	3324      	adds	r3, #36	; 0x24
 801554c:	429a      	cmp	r2, r3
 801554e:	d1ec      	bne.n	801552a <m_kalman_3gyro.isra.9.constprop.47+0x4f2>
 8015550:	f8dd 36e0 	ldr.w	r3, [sp, #1760]	; 0x6e0
 8015554:	9500      	str	r5, [sp, #0]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	6013      	str	r3, [r2, #0]
 801555a:	f8dd 36e0 	ldr.w	r3, [sp, #1760]	; 0x6e0
 801555e:	eddd da37 	vldr	s27, [sp, #220]	; 0xdc
 8015562:	685a      	ldr	r2, [r3, #4]
 8015564:	ed9d ea36 	vldr	s28, [sp, #216]	; 0xd8
 8015568:	ed9d 9a35 	vldr	s18, [sp, #212]	; 0xd4
 801556c:	ed9d ba38 	vldr	s22, [sp, #224]	; 0xe0
 8015570:	eddd ba39 	vldr	s23, [sp, #228]	; 0xe4
 8015574:	eddd aa3a 	vldr	s21, [sp, #232]	; 0xe8
 8015578:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 801557c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015580:	601a      	str	r2, [r3, #0]
 8015582:	f8dd 36e0 	ldr.w	r3, [sp, #1760]	; 0x6e0
 8015586:	f50a 620a 	add.w	r2, sl, #2208	; 0x8a0
 801558a:	6898      	ldr	r0, [r3, #8]
 801558c:	6010      	str	r0, [r2, #0]
 801558e:	2300      	movs	r3, #0
 8015590:	f88a 38a4 	strb.w	r3, [sl, #2212]	; 0x8a4
 8015594:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8015598:	f8aa 38a8 	strh.w	r3, [sl, #2216]	; 0x8a8
 801559c:	f88a 38ad 	strb.w	r3, [sl, #2221]	; 0x8ad
 80155a0:	f88a 38ae 	strb.w	r3, [sl, #2222]	; 0x8ae
 80155a4:	f8ca 38b0 	str.w	r3, [sl, #2224]	; 0x8b0
 80155a8:	f8aa 18aa 	strh.w	r1, [sl, #2218]	; 0x8aa
 80155ac:	e053      	b.n	8015656 <m_kalman_3gyro.isra.9.constprop.47+0x61e>
 80155ae:	f50d 63db 	add.w	r3, sp, #1752	; 0x6d8
 80155b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80155b6:	f7eb fb1b 	bl	8000bf0 <__aeabi_d2f>
 80155ba:	f10a 0340 	add.w	r3, sl, #64	; 0x40
 80155be:	9309      	str	r3, [sp, #36]	; 0x24
 80155c0:	f50a 7305 	add.w	r3, sl, #532	; 0x214
 80155c4:	9322      	str	r3, [sp, #136]	; 0x88
 80155c6:	f50a 730e 	add.w	r3, sl, #568	; 0x238
 80155ca:	9316      	str	r3, [sp, #88]	; 0x58
 80155cc:	f50a 638c 	add.w	r3, sl, #1120	; 0x460
 80155d0:	9315      	str	r3, [sp, #84]	; 0x54
 80155d2:	ab3e      	add	r3, sp, #248	; 0xf8
 80155d4:	9306      	str	r3, [sp, #24]
 80155d6:	f50a 7375 	add.w	r3, sl, #980	; 0x3d4
 80155da:	9318      	str	r3, [sp, #96]	; 0x60
 80155dc:	f20a 4304 	addw	r3, sl, #1028	; 0x404
 80155e0:	9310      	str	r3, [sp, #64]	; 0x40
 80155e2:	f50a 6381 	add.w	r3, sl, #1032	; 0x408
 80155e6:	9300      	str	r3, [sp, #0]
 80155e8:	f50a 6382 	add.w	r3, sl, #1040	; 0x410
 80155ec:	9319      	str	r3, [sp, #100]	; 0x64
 80155ee:	f20a 4314 	addw	r3, sl, #1044	; 0x414
 80155f2:	9311      	str	r3, [sp, #68]	; 0x44
 80155f4:	f50a 6383 	add.w	r3, sl, #1048	; 0x418
 80155f8:	9312      	str	r3, [sp, #72]	; 0x48
 80155fa:	f20a 431c 	addw	r3, sl, #1052	; 0x41c
 80155fe:	931a      	str	r3, [sp, #104]	; 0x68
 8015600:	f20a 4324 	addw	r3, sl, #1060	; 0x424
 8015604:	931b      	str	r3, [sp, #108]	; 0x6c
 8015606:	f50a 6385 	add.w	r3, sl, #1064	; 0x428
 801560a:	931c      	str	r3, [sp, #112]	; 0x70
 801560c:	f20a 432c 	addw	r3, sl, #1068	; 0x42c
 8015610:	931d      	str	r3, [sp, #116]	; 0x74
 8015612:	f50a 6386 	add.w	r3, sl, #1072	; 0x430
 8015616:	9313      	str	r3, [sp, #76]	; 0x4c
 8015618:	f20a 4334 	addw	r3, sl, #1076	; 0x434
 801561c:	930c      	str	r3, [sp, #48]	; 0x30
 801561e:	f50a 6387 	add.w	r3, sl, #1080	; 0x438
 8015622:	931e      	str	r3, [sp, #120]	; 0x78
 8015624:	f20a 433c 	addw	r3, sl, #1084	; 0x43c
 8015628:	930b      	str	r3, [sp, #44]	; 0x2c
 801562a:	f50a 6388 	add.w	r3, sl, #1088	; 0x440
 801562e:	ee08 0a10 	vmov	s16, r0
 8015632:	ed5f 7aa5 	vldr	s15, [pc, #-660]	; 80153a0 <m_kalman_3gyro.isra.9.constprop.47+0x368>
 8015636:	9314      	str	r3, [sp, #80]	; 0x50
 8015638:	f20a 4344 	addw	r3, sl, #1092	; 0x444
 801563c:	930d      	str	r3, [sp, #52]	; 0x34
 801563e:	f50a 6389 	add.w	r3, sl, #1096	; 0x448
 8015642:	931f      	str	r3, [sp, #124]	; 0x7c
 8015644:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015648:	f20a 434c 	addw	r3, sl, #1100	; 0x44c
 801564c:	f50a 7417 	add.w	r4, sl, #604	; 0x25c
 8015650:	f20a 460c 	addw	r6, sl, #1036	; 0x40c
 8015654:	930e      	str	r3, [sp, #56]	; 0x38
 8015656:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015658:	ed5f 3aae 	vldr	s7, [pc, #-696]	; 80153a4 <m_kalman_3gyro.isra.9.constprop.47+0x36c>
 801565c:	ed93 6a00 	vldr	s12, [r3]
 8015660:	ed1f 7aaf 	vldr	s14, [pc, #-700]	; 80153a8 <m_kalman_3gyro.isra.9.constprop.47+0x370>
 8015664:	ed1f 4aaf 	vldr	s8, [pc, #-700]	; 80153ac <m_kalman_3gyro.isra.9.constprop.47+0x374>
 8015668:	ed5f 4aaf 	vldr	s9, [pc, #-700]	; 80153b0 <m_kalman_3gyro.isra.9.constprop.47+0x378>
 801566c:	ed1f 5aaf 	vldr	s10, [pc, #-700]	; 80153b4 <m_kalman_3gyro.isra.9.constprop.47+0x37c>
 8015670:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8015672:	f20a 4384 	addw	r3, sl, #1156	; 0x484
 8015676:	edd3 5a00 	vldr	s11, [r3]
 801567a:	9331      	str	r3, [sp, #196]	; 0xc4
 801567c:	ee26 6a23 	vmul.f32	s12, s12, s7
 8015680:	f50a 6395 	add.w	r3, sl, #1192	; 0x4a8
 8015684:	edd3 6a00 	vldr	s13, [r3]
 8015688:	ee65 5a84 	vmul.f32	s11, s11, s8
 801568c:	ee36 6a07 	vadd.f32	s12, s12, s14
 8015690:	f20a 43cc 	addw	r3, sl, #1228	; 0x4cc
 8015694:	ee66 6a87 	vmul.f32	s13, s13, s14
 8015698:	ee36 6a25 	vadd.f32	s12, s12, s11
 801569c:	edd3 5a00 	vldr	s11, [r3]
 80156a0:	f50a 639e 	add.w	r3, sl, #1264	; 0x4f0
 80156a4:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80156a8:	ee36 6a26 	vadd.f32	s12, s12, s13
 80156ac:	f50d 65db 	add.w	r5, sp, #1752	; 0x6d8
 80156b0:	edd3 6a00 	vldr	s13, [r3]
 80156b4:	ed95 2b00 	vldr	d2, [r5]
 80156b8:	ee66 6a85 	vmul.f32	s13, s13, s10
 80156bc:	ee36 6a25 	vadd.f32	s12, s12, s11
 80156c0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80156c4:	ee36 6a26 	vadd.f32	s12, s12, s13
 80156c8:	ed8a 2b0e 	vstr	d2, [sl, #56]	; 0x38
 80156cc:	f20a 4564 	addw	r5, sl, #1124	; 0x464
 80156d0:	edc7 7a00 	vstr	s15, [r7]
 80156d4:	ed8a 6af8 	vstr	s12, [sl, #992]	; 0x3e0
 80156d8:	edd5 7a00 	vldr	s15, [r5]
 80156dc:	952a      	str	r5, [sp, #168]	; 0xa8
 80156de:	f50a 6791 	add.w	r7, sl, #1160	; 0x488
 80156e2:	edd7 5a00 	vldr	s11, [r7]
 80156e6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80156ea:	f20a 47ac 	addw	r7, sl, #1196	; 0x4ac
 80156ee:	edd7 6a00 	vldr	s13, [r7]
 80156f2:	ee65 5a84 	vmul.f32	s11, s11, s8
 80156f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80156fa:	f50a 679a 	add.w	r7, sl, #1232	; 0x4d0
 80156fe:	ee66 6a87 	vmul.f32	s13, s13, s14
 8015702:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8015706:	edd7 5a00 	vldr	s11, [r7]
 801570a:	f20a 47f4 	addw	r7, sl, #1268	; 0x4f4
 801570e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8015712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015716:	edd7 6a00 	vldr	s13, [r7]
 801571a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801571e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8015722:	f50a 658d 	add.w	r5, sl, #1128	; 0x468
 8015726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801572a:	f20a 478c 	addw	r7, sl, #1164	; 0x48c
 801572e:	edca 7af9 	vstr	s15, [sl, #996]	; 0x3e4
 8015732:	edd5 6a00 	vldr	s13, [r5]
 8015736:	ed97 3a00 	vldr	s6, [r7]
 801573a:	952b      	str	r5, [sp, #172]	; 0xac
 801573c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8015740:	f50a 6796 	add.w	r7, sl, #1200	; 0x4b0
 8015744:	edd7 5a00 	vldr	s11, [r7]
 8015748:	ee23 3a04 	vmul.f32	s6, s6, s8
 801574c:	ee76 6a87 	vadd.f32	s13, s13, s14
 8015750:	f20a 47d4 	addw	r7, sl, #1236	; 0x4d4
 8015754:	ee65 5a87 	vmul.f32	s11, s11, s14
 8015758:	ee76 6a83 	vadd.f32	s13, s13, s6
 801575c:	ed97 3a00 	vldr	s6, [r7]
 8015760:	f50a 679f 	add.w	r7, sl, #1272	; 0x4f8
 8015764:	ee23 3a24 	vmul.f32	s6, s6, s9
 8015768:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801576c:	edd7 5a00 	vldr	s11, [r7]
 8015770:	ee76 6a83 	vadd.f32	s13, s13, s6
 8015774:	ee65 5a85 	vmul.f32	s11, s11, s10
 8015778:	f20a 456c 	addw	r5, sl, #1132	; 0x46c
 801577c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015780:	f50a 6792 	add.w	r7, sl, #1168	; 0x490
 8015784:	edca 6afa 	vstr	s13, [sl, #1000]	; 0x3e8
 8015788:	edd5 5a00 	vldr	s11, [r5]
 801578c:	952c      	str	r5, [sp, #176]	; 0xb0
 801578e:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8015792:	edd7 2a00 	vldr	s5, [r7]
 8015796:	9d06      	ldr	r5, [sp, #24]
 8015798:	f20a 47b4 	addw	r7, sl, #1204	; 0x4b4
 801579c:	ed97 3a00 	vldr	s6, [r7]
 80157a0:	ee62 2a84 	vmul.f32	s5, s5, s8
 80157a4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80157a8:	f50a 679b 	add.w	r7, sl, #1240	; 0x4d8
 80157ac:	ee23 3a07 	vmul.f32	s6, s6, s14
 80157b0:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80157b4:	edd7 2a00 	vldr	s5, [r7]
 80157b8:	f20a 47fc 	addw	r7, sl, #1276	; 0x4fc
 80157bc:	ee62 2aa4 	vmul.f32	s5, s5, s9
 80157c0:	ee75 5a83 	vadd.f32	s11, s11, s6
 80157c4:	ed97 3a00 	vldr	s6, [r7]
 80157c8:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80157cc:	ee23 3a05 	vmul.f32	s6, s6, s10
 80157d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80157d4:	ee75 5a83 	vadd.f32	s11, s11, s6
 80157d8:	f50a 638e 	add.w	r3, sl, #1136	; 0x470
 80157dc:	edca 5afb 	vstr	s11, [sl, #1004]	; 0x3ec
 80157e0:	461a      	mov	r2, r3
 80157e2:	edd2 5a00 	vldr	s11, [r2]
 80157e6:	932d      	str	r3, [sp, #180]	; 0xb4
 80157e8:	f20a 4394 	addw	r3, sl, #1172	; 0x494
 80157ec:	edd3 2a00 	vldr	s5, [r3]
 80157f0:	ee65 5aa3 	vmul.f32	s11, s11, s7
 80157f4:	f50a 6397 	add.w	r3, sl, #1208	; 0x4b8
 80157f8:	ed93 3a00 	vldr	s6, [r3]
 80157fc:	ee62 2a84 	vmul.f32	s5, s5, s8
 8015800:	ee75 5a87 	vadd.f32	s11, s11, s14
 8015804:	f20a 43dc 	addw	r3, sl, #1244	; 0x4dc
 8015808:	ee23 3a07 	vmul.f32	s6, s6, s14
 801580c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8015810:	edd3 2a00 	vldr	s5, [r3]
 8015814:	f50a 63a0 	add.w	r3, sl, #1280	; 0x500
 8015818:	ee62 2aa4 	vmul.f32	s5, s5, s9
 801581c:	ee75 5a83 	vadd.f32	s11, s11, s6
 8015820:	ed93 3a00 	vldr	s6, [r3]
 8015824:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8015828:	ee23 3a05 	vmul.f32	s6, s6, s10
 801582c:	f20a 4374 	addw	r3, sl, #1140	; 0x474
 8015830:	ee75 5a83 	vadd.f32	s11, s11, s6
 8015834:	461a      	mov	r2, r3
 8015836:	edca 5afc 	vstr	s11, [sl, #1008]	; 0x3f0
 801583a:	edd2 5a00 	vldr	s11, [r2]
 801583e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015840:	f50a 6393 	add.w	r3, sl, #1176	; 0x498
 8015844:	edd3 2a00 	vldr	s5, [r3]
 8015848:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801584c:	f20a 43bc 	addw	r3, sl, #1212	; 0x4bc
 8015850:	ed93 3a00 	vldr	s6, [r3]
 8015854:	ee62 2a84 	vmul.f32	s5, s5, s8
 8015858:	ee75 5a87 	vadd.f32	s11, s11, s14
 801585c:	f50a 639c 	add.w	r3, sl, #1248	; 0x4e0
 8015860:	ee23 3a07 	vmul.f32	s6, s6, s14
 8015864:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8015868:	edd3 2a00 	vldr	s5, [r3]
 801586c:	f20a 5304 	addw	r3, sl, #1284	; 0x504
 8015870:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8015874:	ee75 5a83 	vadd.f32	s11, s11, s6
 8015878:	ed93 3a00 	vldr	s6, [r3]
 801587c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8015880:	ee23 3a05 	vmul.f32	s6, s6, s10
 8015884:	f50a 638f 	add.w	r3, sl, #1144	; 0x478
 8015888:	ee75 5a83 	vadd.f32	s11, s11, s6
 801588c:	461a      	mov	r2, r3
 801588e:	edca 5afd 	vstr	s11, [sl, #1012]	; 0x3f4
 8015892:	edd2 5a00 	vldr	s11, [r2]
 8015896:	9328      	str	r3, [sp, #160]	; 0xa0
 8015898:	f20a 439c 	addw	r3, sl, #1180	; 0x49c
 801589c:	edd3 2a00 	vldr	s5, [r3]
 80158a0:	ee65 5aa3 	vmul.f32	s11, s11, s7
 80158a4:	f50a 6398 	add.w	r3, sl, #1216	; 0x4c0
 80158a8:	ed93 3a00 	vldr	s6, [r3]
 80158ac:	ee62 2a84 	vmul.f32	s5, s5, s8
 80158b0:	ee75 5a87 	vadd.f32	s11, s11, s14
 80158b4:	f20a 43e4 	addw	r3, sl, #1252	; 0x4e4
 80158b8:	ee23 3a07 	vmul.f32	s6, s6, s14
 80158bc:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80158c0:	edd3 2a00 	vldr	s5, [r3]
 80158c4:	f50a 63a1 	add.w	r3, sl, #1288	; 0x508
 80158c8:	ee62 2aa4 	vmul.f32	s5, s5, s9
 80158cc:	ee75 5a83 	vadd.f32	s11, s11, s6
 80158d0:	ed93 3a00 	vldr	s6, [r3]
 80158d4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80158d8:	ee23 3a05 	vmul.f32	s6, s6, s10
 80158dc:	f20a 437c 	addw	r3, sl, #1148	; 0x47c
 80158e0:	ee75 5a83 	vadd.f32	s11, s11, s6
 80158e4:	461a      	mov	r2, r3
 80158e6:	edca 5afe 	vstr	s11, [sl, #1016]	; 0x3f8
 80158ea:	932f      	str	r3, [sp, #188]	; 0xbc
 80158ec:	edd2 5a00 	vldr	s11, [r2]
 80158f0:	f50a 6394 	add.w	r3, sl, #1184	; 0x4a0
 80158f4:	edd3 2a00 	vldr	s5, [r3]
 80158f8:	ee65 5aa3 	vmul.f32	s11, s11, s7
 80158fc:	f20a 43c4 	addw	r3, sl, #1220	; 0x4c4
 8015900:	ed93 3a00 	vldr	s6, [r3]
 8015904:	ee62 2a84 	vmul.f32	s5, s5, s8
 8015908:	ee75 5a87 	vadd.f32	s11, s11, s14
 801590c:	f50a 639d 	add.w	r3, sl, #1256	; 0x4e8
 8015910:	ee23 3a07 	vmul.f32	s6, s6, s14
 8015914:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8015918:	edd3 2a00 	vldr	s5, [r3]
 801591c:	f20a 530c 	addw	r3, sl, #1292	; 0x50c
 8015920:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8015924:	ee75 5a83 	vadd.f32	s11, s11, s6
 8015928:	ed93 3a00 	vldr	s6, [r3]
 801592c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8015930:	ee23 3a05 	vmul.f32	s6, s6, s10
 8015934:	f50a 6390 	add.w	r3, sl, #1152	; 0x480
 8015938:	ee75 5a83 	vadd.f32	s11, s11, s6
 801593c:	461a      	mov	r2, r3
 801593e:	edca 5aff 	vstr	s11, [sl, #1020]	; 0x3fc
 8015942:	edd2 5a00 	vldr	s11, [r2]
 8015946:	9330      	str	r3, [sp, #192]	; 0xc0
 8015948:	f20a 43a4 	addw	r3, sl, #1188	; 0x4a4
 801594c:	ed93 3a00 	vldr	s6, [r3]
 8015950:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8015954:	f50a 6399 	add.w	r3, sl, #1224	; 0x4c8
 8015958:	ee63 3a04 	vmul.f32	s7, s6, s8
 801595c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8015960:	ed93 4a00 	vldr	s8, [r3]
 8015964:	f20a 43ec 	addw	r3, sl, #1260	; 0x4ec
 8015968:	ee75 5aa3 	vadd.f32	s11, s11, s7
 801596c:	ee24 7a07 	vmul.f32	s14, s8, s14
 8015970:	ed93 4a00 	vldr	s8, [r3]
 8015974:	f50a 63a2 	add.w	r3, sl, #1296	; 0x510
 8015978:	ee64 4a24 	vmul.f32	s9, s8, s9
 801597c:	ee35 7a87 	vadd.f32	s14, s11, s14
 8015980:	edd3 5a00 	vldr	s11, [r3]
 8015984:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015988:	ee25 5a85 	vmul.f32	s10, s11, s10
 801598c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015990:	ee26 6a06 	vmul.f32	s12, s12, s12
 8015994:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8015998:	ee37 6a86 	vadd.f32	s12, s15, s12
 801599c:	ee77 7a05 	vadd.f32	s15, s14, s10
 80159a0:	f50a 6780 	add.w	r7, sl, #1024	; 0x400
 80159a4:	edc7 7a00 	vstr	s15, [r7]
 80159a8:	ee76 7a86 	vadd.f32	s15, s13, s12
 80159ac:	ee17 0a90 	vmov	r0, s15
 80159b0:	f7ea fdd2 	bl	8000558 <__aeabi_f2d>
 80159b4:	ec41 0b10 	vmov	d0, r0, r1
 80159b8:	f006 fe0e 	bl	801c5d8 <sqrt>
 80159bc:	ec51 0b10 	vmov	r0, r1, d0
 80159c0:	f7eb f916 	bl	8000bf0 <__aeabi_d2f>
 80159c4:	edda 6afb 	vldr	s13, [sl, #1004]	; 0x3ec
 80159c8:	edda 7afc 	vldr	s15, [sl, #1008]	; 0x3f0
 80159cc:	ed9a 7afd 	vldr	s14, [sl, #1012]	; 0x3f4
 80159d0:	4bea      	ldr	r3, [pc, #936]	; (8015d7c <m_kalman_3gyro.isra.9.constprop.47+0xd44>)
 80159d2:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80159d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80159da:	ee27 7a07 	vmul.f32	s14, s14, s14
 80159de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80159e2:	6018      	str	r0, [r3, #0]
 80159e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159e8:	ee0c 0a90 	vmov	s25, r0
 80159ec:	ee17 0a90 	vmov	r0, s15
 80159f0:	461d      	mov	r5, r3
 80159f2:	f7ea fdb1 	bl	8000558 <__aeabi_f2d>
 80159f6:	ec41 0b10 	vmov	d0, r0, r1
 80159fa:	f006 fded 	bl	801c5d8 <sqrt>
 80159fe:	ec51 0b10 	vmov	r0, r1, d0
 8015a02:	f7eb f8f5 	bl	8000bf0 <__aeabi_d2f>
 8015a06:	edda 6afe 	vldr	s13, [sl, #1016]	; 0x3f8
 8015a0a:	edda 7aff 	vldr	s15, [sl, #1020]	; 0x3fc
 8015a0e:	ed97 7a00 	vldr	s14, [r7]
 8015a12:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8015a16:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015a1a:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015a22:	462b      	mov	r3, r5
 8015a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a28:	f843 0f04 	str.w	r0, [r3, #4]!
 8015a2c:	ee09 0a90 	vmov	s19, r0
 8015a30:	ee17 0a90 	vmov	r0, s15
 8015a34:	9332      	str	r3, [sp, #200]	; 0xc8
 8015a36:	f7ea fd8f 	bl	8000558 <__aeabi_f2d>
 8015a3a:	ec41 0b10 	vmov	d0, r0, r1
 8015a3e:	f006 fdcb 	bl	801c5d8 <sqrt>
 8015a42:	ec51 0b10 	vmov	r0, r1, d0
 8015a46:	f7eb f8d3 	bl	8000bf0 <__aeabi_d2f>
 8015a4a:	ee2b 6aad 	vmul.f32	s12, s23, s27
 8015a4e:	ee2b 7a2d 	vmul.f32	s14, s22, s27
 8015a52:	ee6a 7a8e 	vmul.f32	s15, s21, s28
 8015a56:	ee6a 6a89 	vmul.f32	s13, s21, s18
 8015a5a:	ee76 da67 	vsub.f32	s27, s12, s15
 8015a5e:	ee2b 9a89 	vmul.f32	s18, s23, s18
 8015a62:	ee6b 7a0e 	vmul.f32	s15, s22, s28
 8015a66:	ee36 eac7 	vsub.f32	s28, s13, s14
 8015a6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a6c:	ee2d 7aad 	vmul.f32	s14, s27, s27
 8015a70:	ee37 9ac9 	vsub.f32	s18, s15, s18
 8015a74:	ee6e 7a0e 	vmul.f32	s15, s28, s28
 8015a78:	edc3 ca00 	vstr	s25, [r3]
 8015a7c:	ee0c 0a10 	vmov	s24, r0
 8015a80:	9b00      	ldr	r3, [sp, #0]
 8015a82:	ee69 6a09 	vmul.f32	s13, s18, s18
 8015a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a8a:	edc3 9a00 	vstr	s19, [r3]
 8015a8e:	ee1c 2a10 	vmov	r2, s24
 8015a92:	462b      	mov	r3, r5
 8015a94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015a98:	f843 2f08 	str.w	r2, [r3, #8]!
 8015a9c:	ed86 ca00 	vstr	s24, [r6]
 8015aa0:	ee17 0a90 	vmov	r0, s15
 8015aa4:	edca da8f 	vstr	s27, [sl, #572]	; 0x23c
 8015aa8:	ed8a ea92 	vstr	s28, [sl, #584]	; 0x248
 8015aac:	ed8a 9a95 	vstr	s18, [sl, #596]	; 0x254
 8015ab0:	ed8a ba90 	vstr	s22, [sl, #576]	; 0x240
 8015ab4:	edca ba93 	vstr	s23, [sl, #588]	; 0x24c
 8015ab8:	edca aa96 	vstr	s21, [sl, #600]	; 0x258
 8015abc:	9333      	str	r3, [sp, #204]	; 0xcc
 8015abe:	f7ea fd4b 	bl	8000558 <__aeabi_f2d>
 8015ac2:	ec41 0b10 	vmov	d0, r0, r1
 8015ac6:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 8015aca:	f006 fd85 	bl	801c5d8 <sqrt>
 8015ace:	ec51 0b10 	vmov	r0, r1, d0
 8015ad2:	f7eb f88d 	bl	8000bf0 <__aeabi_d2f>
 8015ad6:	edda 4a8f 	vldr	s9, [sl, #572]	; 0x23c
 8015ada:	edda 5a95 	vldr	s11, [sl, #596]	; 0x254
 8015ade:	ed9a 5a92 	vldr	s10, [sl, #584]	; 0x248
 8015ae2:	ed9a 7a96 	vldr	s14, [sl, #600]	; 0x258
 8015ae6:	edda 6a90 	vldr	s13, [sl, #576]	; 0x240
 8015aea:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015aec:	ee06 0a10 	vmov	s12, r0
 8015af0:	eec4 7a86 	vdiv.f32	s15, s9, s12
 8015af4:	aa78      	add	r2, sp, #480	; 0x1e0
 8015af6:	9822      	ldr	r0, [sp, #136]	; 0x88
 8015af8:	eec5 4a86 	vdiv.f32	s9, s11, s12
 8015afc:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8015b00:	ed9a 6a93 	vldr	s12, [sl, #588]	; 0x24c
 8015b04:	edca 7a8f 	vstr	s15, [sl, #572]	; 0x23c
 8015b08:	ee27 4a27 	vmul.f32	s8, s14, s15
 8015b0c:	ee26 5aa4 	vmul.f32	s10, s13, s9
 8015b10:	ee27 7a25 	vmul.f32	s14, s14, s11
 8015b14:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8015b18:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015b1c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8015b20:	ee35 5a44 	vsub.f32	s10, s10, s8
 8015b24:	ee37 7a46 	vsub.f32	s14, s14, s12
 8015b28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015b2c:	edca 4a95 	vstr	s9, [sl, #596]	; 0x254
 8015b30:	ed8a 5a91 	vstr	s10, [sl, #580]	; 0x244
 8015b34:	edca 5a92 	vstr	s11, [sl, #584]	; 0x248
 8015b38:	ed8a 7a8e 	vstr	s14, [sl, #568]	; 0x238
 8015b3c:	edca 7a94 	vstr	s15, [sl, #592]	; 0x250
 8015b40:	f7fa fe5a 	bl	80107f8 <m_mldivide>
 8015b44:	a878      	add	r0, sp, #480	; 0x1e0
 8015b46:	a946      	add	r1, sp, #280	; 0x118
 8015b48:	f7fb f8ee 	bl	8010d28 <m_dcm2q_eml>
 8015b4c:	4653      	mov	r3, sl
 8015b4e:	f5aa 70ae 	sub.w	r0, sl, #348	; 0x15c
 8015b52:	f8d3 23ac 	ldr.w	r2, [r3, #940]	; 0x3ac
 8015b56:	f8d3 13b0 	ldr.w	r1, [r3, #944]	; 0x3b0
 8015b5a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 8015b5e:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8015b62:	f8c3 13bc 	str.w	r1, [r3, #956]	; 0x3bc
 8015b66:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 8015b6a:	3b0c      	subs	r3, #12
 8015b6c:	4283      	cmp	r3, r0
 8015b6e:	d1f0      	bne.n	8015b52 <m_kalman_3gyro.isra.9.constprop.47+0xb1a>
 8015b70:	eddd 6a46 	vldr	s13, [sp, #280]	; 0x118
 8015b74:	ed9d 7a47 	vldr	s14, [sp, #284]	; 0x11c
 8015b78:	eddd 7a48 	vldr	s15, [sp, #288]	; 0x120
 8015b7c:	9429      	str	r4, [sp, #164]	; 0xa4
 8015b7e:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8015b82:	ee37 7a07 	vadd.f32	s14, s14, s14
 8015b86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015b8a:	ee86 6aa8 	vdiv.f32	s12, s13, s17
 8015b8e:	ad3b      	add	r5, sp, #236	; 0xec
 8015b90:	462e      	mov	r6, r5
 8015b92:	f504 71ae 	add.w	r1, r4, #348	; 0x15c
 8015b96:	f104 070c 	add.w	r7, r4, #12
 8015b9a:	4620      	mov	r0, r4
 8015b9c:	eec7 6a28 	vdiv.f32	s13, s14, s17
 8015ba0:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8015ba4:	ed8a 6a97 	vstr	s12, [sl, #604]	; 0x25c
 8015ba8:	edca 6a98 	vstr	s13, [sl, #608]	; 0x260
 8015bac:	ed8a 7a99 	vstr	s14, [sl, #612]	; 0x264
 8015bb0:	eef3 5a0e 	vmov.f32	s11, #62	; 0x41f00000  30.0
 8015bb4:	eeb3 6a0d 	vmov.f32	s12, #61	; 0x41e80000  29.0
 8015bb8:	ed90 7a00 	vldr	s14, [r0]
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	eef0 7a47 	vmov.f32	s15, s14
 8015bc2:	330c      	adds	r3, #12
 8015bc4:	edd3 6a00 	vldr	s13, [r3]
 8015bc8:	4299      	cmp	r1, r3
 8015bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015bce:	d1f8      	bne.n	8015bc2 <m_kalman_3gyro.isra.9.constprop.47+0xb8a>
 8015bd0:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 8015bd4:	4602      	mov	r2, r0
 8015bd6:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015bda:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015bde:	320c      	adds	r2, #12
 8015be0:	edd2 7a00 	vldr	s15, [r2]
 8015be4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015be8:	4293      	cmp	r3, r2
 8015bea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015bf2:	d1f4      	bne.n	8015bde <m_kalman_3gyro.isra.9.constprop.47+0xba6>
 8015bf4:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8015bf8:	3004      	adds	r0, #4
 8015bfa:	4287      	cmp	r7, r0
 8015bfc:	f101 0104 	add.w	r1, r1, #4
 8015c00:	ece6 7a01 	vstmia	r6!, {s15}
 8015c04:	d1d8      	bne.n	8015bb8 <m_kalman_3gyro.isra.9.constprop.47+0xb80>
 8015c06:	6828      	ldr	r0, [r5, #0]
 8015c08:	f7ea fca6 	bl	8000558 <__aeabi_f2d>
 8015c0c:	ec41 0b10 	vmov	d0, r0, r1
 8015c10:	f006 fce2 	bl	801c5d8 <sqrt>
 8015c14:	ec51 0b10 	vmov	r0, r1, d0
 8015c18:	f7ea ffea 	bl	8000bf0 <__aeabi_d2f>
 8015c1c:	9b06      	ldr	r3, [sp, #24]
 8015c1e:	f845 0b04 	str.w	r0, [r5], #4
 8015c22:	42ab      	cmp	r3, r5
 8015c24:	d1ef      	bne.n	8015c06 <m_kalman_3gyro.isra.9.constprop.47+0xbce>
 8015c26:	eddd 7a3b 	vldr	s15, [sp, #236]	; 0xec
 8015c2a:	eddd 6a3c 	vldr	s13, [sp, #240]	; 0xf0
 8015c2e:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 8015c32:	9417      	str	r4, [sp, #92]	; 0x5c
 8015c34:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8015c38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015c3c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015c44:	f20d 5b0c 	addw	fp, sp, #1292	; 0x50c
 8015c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c4c:	f50d 7865 	add.w	r8, sp, #916	; 0x394
 8015c50:	ee17 0a90 	vmov	r0, s15
 8015c54:	f7ea fc80 	bl	8000558 <__aeabi_f2d>
 8015c58:	ec41 0b10 	vmov	d0, r0, r1
 8015c5c:	f006 fcbc 	bl	801c5d8 <sqrt>
 8015c60:	ec51 0b10 	vmov	r0, r1, d0
 8015c64:	f7ea ffc4 	bl	8000bf0 <__aeabi_d2f>
 8015c68:	4b45      	ldr	r3, [pc, #276]	; (8015d80 <m_kalman_3gyro.isra.9.constprop.47+0xd48>)
 8015c6a:	f8ca 03c4 	str.w	r0, [sl, #964]	; 0x3c4
 8015c6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8015c72:	edd3 8a02 	vldr	s17, [r3, #8]
 8015c76:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
 8015c7a:	f50a 7372 	add.w	r3, sl, #968	; 0x3c8
 8015c7e:	9324      	str	r3, [sp, #144]	; 0x90
 8015c80:	f50d 7972 	add.w	r9, sp, #968	; 0x3c8
 8015c84:	f8cd a700 	str.w	sl, [sp, #1792]	; 0x700
 8015c88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015c8a:	4658      	mov	r0, fp
 8015c8c:	f20d 31c7 	addw	r1, sp, #967	; 0x3c7
 8015c90:	2301      	movs	r3, #1
 8015c92:	f801 3f01 	strb.w	r3, [r1, #1]!
 8015c96:	3301      	adds	r3, #1
 8015c98:	f852 4b0c 	ldr.w	r4, [r2], #12
 8015c9c:	f840 4b04 	str.w	r4, [r0], #4
 8015ca0:	2b1f      	cmp	r3, #31
 8015ca2:	d1f6      	bne.n	8015c92 <m_kalman_3gyro.isra.9.constprop.47+0xc5a>
 8015ca4:	221e      	movs	r2, #30
 8015ca6:	2101      	movs	r1, #1
 8015ca8:	4640      	mov	r0, r8
 8015caa:	f009 f864 	bl	801ed76 <memset>
 8015cae:	eddb 7a01 	vldr	s15, [fp, #4]
 8015cb2:	ed9b 7a00 	vldr	s14, [fp]
 8015cb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cbe:	d90c      	bls.n	8015cda <m_kalman_3gyro.isra.9.constprop.47+0xca2>
 8015cc0:	eef4 7a67 	vcmp.f32	s15, s15
 8015cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cc8:	d107      	bne.n	8015cda <m_kalman_3gyro.isra.9.constprop.47+0xca2>
 8015cca:	f04f 0302 	mov.w	r3, #2
 8015cce:	f889 3000 	strb.w	r3, [r9]
 8015cd2:	f04f 0301 	mov.w	r3, #1
 8015cd6:	f889 3001 	strb.w	r3, [r9, #1]
 8015cda:	eddb 7a03 	vldr	s15, [fp, #12]
 8015cde:	ed9b 7a02 	vldr	s14, [fp, #8]
 8015ce2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cea:	d90a      	bls.n	8015d02 <m_kalman_3gyro.isra.9.constprop.47+0xcca>
 8015cec:	eef4 7a67 	vcmp.f32	s15, s15
 8015cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cf4:	d105      	bne.n	8015d02 <m_kalman_3gyro.isra.9.constprop.47+0xcca>
 8015cf6:	2204      	movs	r2, #4
 8015cf8:	2303      	movs	r3, #3
 8015cfa:	f889 2002 	strb.w	r2, [r9, #2]
 8015cfe:	f889 3003 	strb.w	r3, [r9, #3]
 8015d02:	eddb 7a05 	vldr	s15, [fp, #20]
 8015d06:	ed9b 7a04 	vldr	s14, [fp, #16]
 8015d0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d12:	d90a      	bls.n	8015d2a <m_kalman_3gyro.isra.9.constprop.47+0xcf2>
 8015d14:	eef4 7a67 	vcmp.f32	s15, s15
 8015d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d1c:	d105      	bne.n	8015d2a <m_kalman_3gyro.isra.9.constprop.47+0xcf2>
 8015d1e:	2206      	movs	r2, #6
 8015d20:	2305      	movs	r3, #5
 8015d22:	f889 2004 	strb.w	r2, [r9, #4]
 8015d26:	f889 3005 	strb.w	r3, [r9, #5]
 8015d2a:	eddb 7a07 	vldr	s15, [fp, #28]
 8015d2e:	ed9b 7a06 	vldr	s14, [fp, #24]
 8015d32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d3a:	d90a      	bls.n	8015d52 <m_kalman_3gyro.isra.9.constprop.47+0xd1a>
 8015d3c:	eef4 7a67 	vcmp.f32	s15, s15
 8015d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d44:	d105      	bne.n	8015d52 <m_kalman_3gyro.isra.9.constprop.47+0xd1a>
 8015d46:	2208      	movs	r2, #8
 8015d48:	2307      	movs	r3, #7
 8015d4a:	f889 2006 	strb.w	r2, [r9, #6]
 8015d4e:	f889 3007 	strb.w	r3, [r9, #7]
 8015d52:	eddb 7a09 	vldr	s15, [fp, #36]	; 0x24
 8015d56:	ed9b 7a08 	vldr	s14, [fp, #32]
 8015d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d62:	d913      	bls.n	8015d8c <m_kalman_3gyro.isra.9.constprop.47+0xd54>
 8015d64:	eef4 7a67 	vcmp.f32	s15, s15
 8015d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d6c:	d10e      	bne.n	8015d8c <m_kalman_3gyro.isra.9.constprop.47+0xd54>
 8015d6e:	220a      	movs	r2, #10
 8015d70:	2309      	movs	r3, #9
 8015d72:	f889 2008 	strb.w	r2, [r9, #8]
 8015d76:	f889 3009 	strb.w	r3, [r9, #9]
 8015d7a:	e007      	b.n	8015d8c <m_kalman_3gyro.isra.9.constprop.47+0xd54>
 8015d7c:	20001ab8 	.word	0x20001ab8
 8015d80:	20001698 	.word	0x20001698
 8015d84:	3f333333 	.word	0x3f333333
 8015d88:	3f4ccccd 	.word	0x3f4ccccd
 8015d8c:	eddb 7a0b 	vldr	s15, [fp, #44]	; 0x2c
 8015d90:	ed9b 7a0a 	vldr	s14, [fp, #40]	; 0x28
 8015d94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d9c:	d90a      	bls.n	8015db4 <m_kalman_3gyro.isra.9.constprop.47+0xd7c>
 8015d9e:	eef4 7a67 	vcmp.f32	s15, s15
 8015da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015da6:	d105      	bne.n	8015db4 <m_kalman_3gyro.isra.9.constprop.47+0xd7c>
 8015da8:	220c      	movs	r2, #12
 8015daa:	230b      	movs	r3, #11
 8015dac:	f889 200a 	strb.w	r2, [r9, #10]
 8015db0:	f889 300b 	strb.w	r3, [r9, #11]
 8015db4:	eddb 7a0d 	vldr	s15, [fp, #52]	; 0x34
 8015db8:	ed9b 7a0c 	vldr	s14, [fp, #48]	; 0x30
 8015dbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dc4:	d90a      	bls.n	8015ddc <m_kalman_3gyro.isra.9.constprop.47+0xda4>
 8015dc6:	eef4 7a67 	vcmp.f32	s15, s15
 8015dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dce:	d105      	bne.n	8015ddc <m_kalman_3gyro.isra.9.constprop.47+0xda4>
 8015dd0:	220e      	movs	r2, #14
 8015dd2:	230d      	movs	r3, #13
 8015dd4:	f889 200c 	strb.w	r2, [r9, #12]
 8015dd8:	f889 300d 	strb.w	r3, [r9, #13]
 8015ddc:	eddb 7a0f 	vldr	s15, [fp, #60]	; 0x3c
 8015de0:	ed9b 7a0e 	vldr	s14, [fp, #56]	; 0x38
 8015de4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dec:	d90a      	bls.n	8015e04 <m_kalman_3gyro.isra.9.constprop.47+0xdcc>
 8015dee:	eef4 7a67 	vcmp.f32	s15, s15
 8015df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015df6:	d105      	bne.n	8015e04 <m_kalman_3gyro.isra.9.constprop.47+0xdcc>
 8015df8:	2210      	movs	r2, #16
 8015dfa:	230f      	movs	r3, #15
 8015dfc:	f889 200e 	strb.w	r2, [r9, #14]
 8015e00:	f889 300f 	strb.w	r3, [r9, #15]
 8015e04:	eddb 7a11 	vldr	s15, [fp, #68]	; 0x44
 8015e08:	ed9b 7a10 	vldr	s14, [fp, #64]	; 0x40
 8015e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e14:	d90a      	bls.n	8015e2c <m_kalman_3gyro.isra.9.constprop.47+0xdf4>
 8015e16:	eef4 7a67 	vcmp.f32	s15, s15
 8015e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e1e:	d105      	bne.n	8015e2c <m_kalman_3gyro.isra.9.constprop.47+0xdf4>
 8015e20:	2212      	movs	r2, #18
 8015e22:	2311      	movs	r3, #17
 8015e24:	f889 2010 	strb.w	r2, [r9, #16]
 8015e28:	f889 3011 	strb.w	r3, [r9, #17]
 8015e2c:	eddb 7a13 	vldr	s15, [fp, #76]	; 0x4c
 8015e30:	ed9b 7a12 	vldr	s14, [fp, #72]	; 0x48
 8015e34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e3c:	d90a      	bls.n	8015e54 <m_kalman_3gyro.isra.9.constprop.47+0xe1c>
 8015e3e:	eef4 7a67 	vcmp.f32	s15, s15
 8015e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e46:	d105      	bne.n	8015e54 <m_kalman_3gyro.isra.9.constprop.47+0xe1c>
 8015e48:	2214      	movs	r2, #20
 8015e4a:	2313      	movs	r3, #19
 8015e4c:	f889 2012 	strb.w	r2, [r9, #18]
 8015e50:	f889 3013 	strb.w	r3, [r9, #19]
 8015e54:	eddb 7a15 	vldr	s15, [fp, #84]	; 0x54
 8015e58:	ed9b 7a14 	vldr	s14, [fp, #80]	; 0x50
 8015e5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e64:	d90a      	bls.n	8015e7c <m_kalman_3gyro.isra.9.constprop.47+0xe44>
 8015e66:	eef4 7a67 	vcmp.f32	s15, s15
 8015e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e6e:	d105      	bne.n	8015e7c <m_kalman_3gyro.isra.9.constprop.47+0xe44>
 8015e70:	2216      	movs	r2, #22
 8015e72:	2315      	movs	r3, #21
 8015e74:	f889 2014 	strb.w	r2, [r9, #20]
 8015e78:	f889 3015 	strb.w	r3, [r9, #21]
 8015e7c:	eddb 7a17 	vldr	s15, [fp, #92]	; 0x5c
 8015e80:	ed9b 7a16 	vldr	s14, [fp, #88]	; 0x58
 8015e84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e8c:	d90a      	bls.n	8015ea4 <m_kalman_3gyro.isra.9.constprop.47+0xe6c>
 8015e8e:	eef4 7a67 	vcmp.f32	s15, s15
 8015e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e96:	d105      	bne.n	8015ea4 <m_kalman_3gyro.isra.9.constprop.47+0xe6c>
 8015e98:	2218      	movs	r2, #24
 8015e9a:	2317      	movs	r3, #23
 8015e9c:	f889 2016 	strb.w	r2, [r9, #22]
 8015ea0:	f889 3017 	strb.w	r3, [r9, #23]
 8015ea4:	eddb 7a19 	vldr	s15, [fp, #100]	; 0x64
 8015ea8:	ed9b 7a18 	vldr	s14, [fp, #96]	; 0x60
 8015eac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eb4:	d90a      	bls.n	8015ecc <m_kalman_3gyro.isra.9.constprop.47+0xe94>
 8015eb6:	eef4 7a67 	vcmp.f32	s15, s15
 8015eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ebe:	d105      	bne.n	8015ecc <m_kalman_3gyro.isra.9.constprop.47+0xe94>
 8015ec0:	221a      	movs	r2, #26
 8015ec2:	2319      	movs	r3, #25
 8015ec4:	f889 2018 	strb.w	r2, [r9, #24]
 8015ec8:	f889 3019 	strb.w	r3, [r9, #25]
 8015ecc:	eddb 7a1b 	vldr	s15, [fp, #108]	; 0x6c
 8015ed0:	ed9b 7a1a 	vldr	s14, [fp, #104]	; 0x68
 8015ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015edc:	d90a      	bls.n	8015ef4 <m_kalman_3gyro.isra.9.constprop.47+0xebc>
 8015ede:	eef4 7a67 	vcmp.f32	s15, s15
 8015ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ee6:	d105      	bne.n	8015ef4 <m_kalman_3gyro.isra.9.constprop.47+0xebc>
 8015ee8:	221c      	movs	r2, #28
 8015eea:	231b      	movs	r3, #27
 8015eec:	f889 201a 	strb.w	r2, [r9, #26]
 8015ef0:	f889 301b 	strb.w	r3, [r9, #27]
 8015ef4:	eddb 7a1d 	vldr	s15, [fp, #116]	; 0x74
 8015ef8:	ed9b 7a1c 	vldr	s14, [fp, #112]	; 0x70
 8015efc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f04:	d90b      	bls.n	8015f1e <m_kalman_3gyro.isra.9.constprop.47+0xee6>
 8015f06:	eef4 7a67 	vcmp.f32	s15, s15
 8015f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f0e:	d106      	bne.n	8015f1e <m_kalman_3gyro.isra.9.constprop.47+0xee6>
 8015f10:	231d      	movs	r3, #29
 8015f12:	f04f 021e 	mov.w	r2, #30
 8015f16:	f889 201c 	strb.w	r2, [r9, #28]
 8015f1a:	f889 301d 	strb.w	r3, [r9, #29]
 8015f1e:	2304      	movs	r3, #4
 8015f20:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f22:	2302      	movs	r3, #2
 8015f24:	9304      	str	r3, [sp, #16]
 8015f26:	9a04      	ldr	r2, [sp, #16]
 8015f28:	f102 0a01 	add.w	sl, r2, #1
 8015f2c:	0053      	lsls	r3, r2, #1
 8015f2e:	f1ba 0f1f 	cmp.w	sl, #31
 8015f32:	9305      	str	r3, [sp, #20]
 8015f34:	d056      	beq.n	8015fe4 <m_kalman_3gyro.isra.9.constprop.47+0xfac>
 8015f36:	2301      	movs	r3, #1
 8015f38:	9302      	str	r3, [sp, #8]
 8015f3a:	9b02      	ldr	r3, [sp, #8]
 8015f3c:	9a05      	ldr	r2, [sp, #20]
 8015f3e:	189f      	adds	r7, r3, r2
 8015f40:	2f1f      	cmp	r7, #31
 8015f42:	bfa8      	it	ge
 8015f44:	271f      	movge	r7, #31
 8015f46:	1afb      	subs	r3, r7, r3
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	9300      	str	r3, [sp, #0]
 8015f4c:	dd42      	ble.n	8015fd4 <m_kalman_3gyro.isra.9.constprop.47+0xf9c>
 8015f4e:	4655      	mov	r5, sl
 8015f50:	9e02      	ldr	r6, [sp, #8]
 8015f52:	2401      	movs	r4, #1
 8015f54:	e00e      	b.n	8015f74 <m_kalman_3gyro.isra.9.constprop.47+0xf3c>
 8015f56:	eef4 7a67 	vcmp.f32	s15, s15
 8015f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f5e:	d11f      	bne.n	8015fa0 <m_kalman_3gyro.isra.9.constprop.47+0xf68>
 8015f60:	3501      	adds	r5, #1
 8015f62:	42bd      	cmp	r5, r7
 8015f64:	f800 3c01 	strb.w	r3, [r0, #-1]
 8015f68:	f001 86fa 	beq.w	8017d60 <m_kalman_3gyro.isra.9.constprop.47+0x2d28>
 8015f6c:	9b00      	ldr	r3, [sp, #0]
 8015f6e:	3401      	adds	r4, #1
 8015f70:	42a3      	cmp	r3, r4
 8015f72:	db28      	blt.n	8015fc6 <m_kalman_3gyro.isra.9.constprop.47+0xf8e>
 8015f74:	f106 3cff 	add.w	ip, r6, #4294967295
 8015f78:	1e69      	subs	r1, r5, #1
 8015f7a:	f919 200c 	ldrsb.w	r2, [r9, ip]
 8015f7e:	f919 3001 	ldrsb.w	r3, [r9, r1]
 8015f82:	eb0b 0e82 	add.w	lr, fp, r2, lsl #2
 8015f86:	eb0b 0083 	add.w	r0, fp, r3, lsl #2
 8015f8a:	ed50 7a01 	vldr	s15, [r0, #-4]
 8015f8e:	ed1e 7a01 	vldr	s14, [lr, #-4]
 8015f92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f9a:	eb08 0004 	add.w	r0, r8, r4
 8015f9e:	d8da      	bhi.n	8015f56 <m_kalman_3gyro.isra.9.constprop.47+0xf1e>
 8015fa0:	3601      	adds	r6, #1
 8015fa2:	4556      	cmp	r6, sl
 8015fa4:	f800 2c01 	strb.w	r2, [r0, #-1]
 8015fa8:	d1e0      	bne.n	8015f6c <m_kalman_3gyro.isra.9.constprop.47+0xf34>
 8015faa:	42bd      	cmp	r5, r7
 8015fac:	eba7 0205 	sub.w	r2, r7, r5
 8015fb0:	4449      	add	r1, r9
 8015fb2:	dadb      	bge.n	8015f6c <m_kalman_3gyro.isra.9.constprop.47+0xf34>
 8015fb4:	443c      	add	r4, r7
 8015fb6:	f008 fed3 	bl	801ed60 <memcpy>
 8015fba:	1b64      	subs	r4, r4, r5
 8015fbc:	9b00      	ldr	r3, [sp, #0]
 8015fbe:	3401      	adds	r4, #1
 8015fc0:	42a3      	cmp	r3, r4
 8015fc2:	463d      	mov	r5, r7
 8015fc4:	dad6      	bge.n	8015f74 <m_kalman_3gyro.isra.9.constprop.47+0xf3c>
 8015fc6:	461a      	mov	r2, r3
 8015fc8:	9b02      	ldr	r3, [sp, #8]
 8015fca:	1e58      	subs	r0, r3, #1
 8015fcc:	4448      	add	r0, r9
 8015fce:	4641      	mov	r1, r8
 8015fd0:	f008 fec6 	bl	801ed60 <memcpy>
 8015fd4:	9b04      	ldr	r3, [sp, #16]
 8015fd6:	9702      	str	r7, [sp, #8]
 8015fd8:	eb03 0a07 	add.w	sl, r3, r7
 8015fdc:	f1ba 0f1e 	cmp.w	sl, #30
 8015fe0:	ddab      	ble.n	8015f3a <m_kalman_3gyro.isra.9.constprop.47+0xf02>
 8015fe2:	9b05      	ldr	r3, [sp, #20]
 8015fe4:	9304      	str	r3, [sp, #16]
 8015fe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015fe8:	3b01      	subs	r3, #1
 8015fea:	930f      	str	r3, [sp, #60]	; 0x3c
 8015fec:	d19b      	bne.n	8015f26 <m_kalman_3gyro.isra.9.constprop.47+0xeee>
 8015fee:	f999 301d 	ldrsb.w	r3, [r9, #29]
 8015ff2:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8015ff6:	ed53 7a01 	vldr	s15, [r3, #-4]
 8015ffa:	eef4 7a67 	vcmp.f32	s15, s15
 8015ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016002:	d122      	bne.n	801604a <m_kalman_3gyro.isra.9.constprop.47+0x1012>
 8016004:	f999 200e 	ldrsb.w	r2, [r9, #14]
 8016008:	f999 300f 	ldrsb.w	r3, [r9, #15]
 801600c:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8016010:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8016014:	ed52 7a01 	vldr	s15, [r2, #-4]
 8016018:	ed13 7a01 	vldr	s14, [r3, #-4]
 801601c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016024:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016028:	bf4c      	ite	mi
 801602a:	2201      	movmi	r2, #1
 801602c:	2200      	movpl	r2, #0
 801602e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016032:	bf4c      	ite	mi
 8016034:	2301      	movmi	r3, #1
 8016036:	2300      	movpl	r3, #0
 8016038:	429a      	cmp	r2, r3
 801603a:	f001 86c4 	beq.w	8017dc6 <m_kalman_3gyro.isra.9.constprop.47+0x2d8e>
 801603e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016042:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8016046:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801604a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801604c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801604e:	3204      	adds	r2, #4
 8016050:	9217      	str	r2, [sp, #92]	; 0x5c
 8016052:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016054:	ece3 7a01 	vstmia	r3!, {s15}
 8016058:	429a      	cmp	r2, r3
 801605a:	9324      	str	r3, [sp, #144]	; 0x90
 801605c:	f47f ae14 	bne.w	8015c88 <m_kalman_3gyro.isra.9.constprop.47+0xc50>
 8016060:	f8dd a700 	ldr.w	sl, [sp, #1792]	; 0x700
 8016064:	edda 6af2 	vldr	s13, [sl, #968]	; 0x3c8
 8016068:	edda 7af3 	vldr	s15, [sl, #972]	; 0x3cc
 801606c:	ed9a 7af4 	vldr	s14, [sl, #976]	; 0x3d0
 8016070:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8016074:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016078:	ee27 7a07 	vmul.f32	s14, s14, s14
 801607c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016084:	ee17 0a90 	vmov	r0, s15
 8016088:	f7ea fa66 	bl	8000558 <__aeabi_f2d>
 801608c:	ec41 0b10 	vmov	d0, r0, r1
 8016090:	f006 faa2 	bl	801c5d8 <sqrt>
 8016094:	ec51 0b10 	vmov	r0, r1, d0
 8016098:	f7ea fdaa 	bl	8000bf0 <__aeabi_d2f>
 801609c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80160a0:	ee2e 6a87 	vmul.f32	s12, s29, s14
 80160a4:	ee6d 6a07 	vmul.f32	s13, s26, s14
 80160a8:	eecc 7a86 	vdiv.f32	s15, s25, s12
 80160ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160ae:	9004      	str	r0, [sp, #16]
 80160b0:	ee89 6aa6 	vdiv.f32	s12, s19, s13
 80160b4:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80160b8:	ed5f 6ace 	vldr	s13, [pc, #-824]	; 8015d84 <m_kalman_3gyro.isra.9.constprop.47+0xd4c>
 80160bc:	edc3 7a00 	vstr	s15, [r3]
 80160c0:	eecc 5a07 	vdiv.f32	s11, s24, s14
 80160c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80160c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80160ca:	ee77 7a86 	vadd.f32	s15, s15, s12
 80160ce:	ee05 0a10 	vmov	s10, r0
 80160d2:	ee69 8a87 	vmul.f32	s17, s19, s14
 80160d6:	ee6c 6a26 	vmul.f32	s13, s24, s13
 80160da:	ed83 6a00 	vstr	s12, [r3]
 80160de:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80160e2:	ee25 6a07 	vmul.f32	s12, s10, s14
 80160e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80160e8:	ed1f 7ad9 	vldr	s14, [pc, #-868]	; 8015d88 <m_kalman_3gyro.isra.9.constprop.47+0xd50>
 80160ec:	edc3 5a00 	vstr	s11, [r3]
 80160f0:	ee78 8aa6 	vadd.f32	s17, s17, s13
 80160f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80160f6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80160fa:	ee68 8a87 	vmul.f32	s17, s17, s14
 80160fe:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8016102:	ed83 6a00 	vstr	s12, [r3]
 8016106:	ee67 7a87 	vmul.f32	s15, s15, s14
 801610a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801610c:	edc3 7a00 	vstr	s15, [r3]
 8016110:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016112:	edc3 8a00 	vstr	s17, [r3]
 8016116:	f89a 38ce 	ldrb.w	r3, [sl, #2254]	; 0x8ce
 801611a:	2b00      	cmp	r3, #0
 801611c:	f041 8632 	bne.w	8017d84 <m_kalman_3gyro.isra.9.constprop.47+0x2d4c>
 8016120:	2301      	movs	r3, #1
 8016122:	f60a 07b8 	addw	r7, sl, #2232	; 0x8b8
 8016126:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 801612a:	f88a 38ce 	strb.w	r3, [sl, #2254]	; 0x8ce
 801612e:	2200      	movs	r2, #0
 8016130:	2300      	movs	r3, #0
 8016132:	edc7 8a00 	vstr	s17, [r7]
 8016136:	f60a 06bc 	addw	r6, sl, #2236	; 0x8bc
 801613a:	f7ea f8af 	bl	800029c <__adddf3>
 801613e:	f50a 650c 	add.w	r5, sl, #2240	; 0x8c0
 8016142:	e9da 2304 	ldrd	r2, r3, [sl, #16]
 8016146:	edc6 8a00 	vstr	s17, [r6]
 801614a:	f7ea f8a7 	bl	800029c <__adddf3>
 801614e:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 8016152:	edc5 8a00 	vstr	s17, [r5]
 8016156:	f7ea f8a1 	bl	800029c <__adddf3>
 801615a:	f60a 04c4 	addw	r4, sl, #2244	; 0x8c4
 801615e:	f60a 03c8 	addw	r3, sl, #2248	; 0x8c8
 8016162:	9302      	str	r3, [sp, #8]
 8016164:	edc4 8a00 	vstr	s17, [r4]
 8016168:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 801616c:	f7ea f896 	bl	800029c <__adddf3>
 8016170:	9b02      	ldr	r3, [sp, #8]
 8016172:	edc3 8a00 	vstr	s17, [r3]
 8016176:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 801617a:	f7ea f88f 	bl	800029c <__adddf3>
 801617e:	4602      	mov	r2, r0
 8016180:	460b      	mov	r3, r1
 8016182:	e9cd 0100 	strd	r0, r1, [sp]
 8016186:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 801618a:	f7ea fb63 	bl	8000854 <__aeabi_ddiv>
 801618e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016192:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016196:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 801619a:	f7ea fb5b 	bl	8000854 <__aeabi_ddiv>
 801619e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161a2:	e9ca 0104 	strd	r0, r1, [sl, #16]
 80161a6:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 80161aa:	f7ea fb53 	bl	8000854 <__aeabi_ddiv>
 80161ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161b2:	e9ca 0106 	strd	r0, r1, [sl, #24]
 80161b6:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 80161ba:	f7ea fb4b 	bl	8000854 <__aeabi_ddiv>
 80161be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161c2:	e9ca 0108 	strd	r0, r1, [sl, #32]
 80161c6:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 80161ca:	f7ea fb43 	bl	8000854 <__aeabi_ddiv>
 80161ce:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
 80161d2:	9b02      	ldr	r3, [sp, #8]
 80161d4:	edd4 6a00 	vldr	s13, [r4]
 80161d8:	edc3 6a00 	vstr	s13, [r3]
 80161dc:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 80161e0:	edcd 6a00 	vstr	s13, [sp]
 80161e4:	f7ea fd04 	bl	8000bf0 <__aeabi_d2f>
 80161e8:	edd5 7a00 	vldr	s15, [r5]
 80161ec:	eddd 6a00 	vldr	s13, [sp]
 80161f0:	edc4 7a00 	vstr	s15, [r4]
 80161f4:	edcd 7a02 	vstr	s15, [sp, #8]
 80161f8:	ee07 0a90 	vmov	s15, r0
 80161fc:	ed9f 6ada 	vldr	s12, [pc, #872]	; 8016568 <m_kalman_3gyro.isra.9.constprop.47+0x1530>
 8016200:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8016204:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 8016208:	ee76 6a86 	vadd.f32	s13, s13, s12
 801620c:	edcd 6a00 	vstr	s13, [sp]
 8016210:	f7ea fcee 	bl	8000bf0 <__aeabi_d2f>
 8016214:	eddd 7a02 	vldr	s15, [sp, #8]
 8016218:	ed96 7a00 	vldr	s14, [r6]
 801621c:	ee06 0a90 	vmov	s13, r0
 8016220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016224:	eddd 6a00 	vldr	s13, [sp]
 8016228:	ed85 7a00 	vstr	s14, [r5]
 801622c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8016230:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 8016234:	ed8d 7a02 	vstr	s14, [sp, #8]
 8016238:	edcd 6a00 	vstr	s13, [sp]
 801623c:	f7ea fcd8 	bl	8000bf0 <__aeabi_d2f>
 8016240:	ed9d 7a02 	vldr	s14, [sp, #8]
 8016244:	edd7 7a00 	vldr	s15, [r7]
 8016248:	ee06 0a90 	vmov	s13, r0
 801624c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8016250:	eddd 6a00 	vldr	s13, [sp]
 8016254:	edc6 7a00 	vstr	s15, [r6]
 8016258:	ee37 7a26 	vadd.f32	s14, s14, s13
 801625c:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8016260:	edcd 7a02 	vstr	s15, [sp, #8]
 8016264:	ed8d 7a00 	vstr	s14, [sp]
 8016268:	f7ea fcc2 	bl	8000bf0 <__aeabi_d2f>
 801626c:	eddd 7a02 	vldr	s15, [sp, #8]
 8016270:	edc7 8a00 	vstr	s17, [r7]
 8016274:	ee07 0a10 	vmov	s14, r0
 8016278:	ee67 7a27 	vmul.f32	s15, s14, s15
 801627c:	ed9d 7a00 	vldr	s14, [sp]
 8016280:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016284:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 8016288:	edcd 7a00 	vstr	s15, [sp]
 801628c:	f7ea fcb0 	bl	8000bf0 <__aeabi_d2f>
 8016290:	ee07 0a90 	vmov	s15, r0
 8016294:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8016298:	eddd 7a00 	vldr	s15, [sp]
 801629c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801629e:	ee78 8aa7 	vadd.f32	s17, s17, s15
 80162a2:	f50d 61db 	add.w	r1, sp, #1752	; 0x6d8
 80162a6:	2200      	movs	r2, #0
 80162a8:	2300      	movs	r3, #0
 80162aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162ae:	edc4 8a00 	vstr	s17, [r4]
 80162b2:	f7ea fc21 	bl	8000af8 <__aeabi_dcmple>
 80162b6:	2800      	cmp	r0, #0
 80162b8:	f041 8571 	bne.w	8017d9e <m_kalman_3gyro.isra.9.constprop.47+0x2d66>
 80162bc:	f50d 61db 	add.w	r1, sp, #1752	; 0x6d8
 80162c0:	2200      	movs	r2, #0
 80162c2:	4baa      	ldr	r3, [pc, #680]	; (801656c <m_kalman_3gyro.isra.9.constprop.47+0x1534>)
 80162c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162c8:	f7ea fc02 	bl	8000ad0 <__aeabi_dcmpeq>
 80162cc:	2800      	cmp	r0, #0
 80162ce:	f041 8574 	bne.w	8017dba <m_kalman_3gyro.isra.9.constprop.47+0x2d82>
 80162d2:	eddd 6acb 	vldr	s13, [sp, #812]	; 0x32c
 80162d6:	ed9d 7ab2 	vldr	s14, [sp, #712]	; 0x2c8
 80162da:	eddd 7acc 	vldr	s15, [sp, #816]	; 0x330
 80162de:	ed9d 6ab3 	vldr	s12, [sp, #716]	; 0x2cc
 80162e2:	eddd 5ab1 	vldr	s11, [sp, #708]	; 0x2c4
 80162e6:	ee66 6a88 	vmul.f32	s13, s13, s16
 80162ea:	ee27 7a08 	vmul.f32	s14, s14, s16
 80162ee:	ee67 7a88 	vmul.f32	s15, s15, s16
 80162f2:	edcd 6acb 	vstr	s13, [sp, #812]	; 0x32c
 80162f6:	ed8d 7ab2 	vstr	s14, [sp, #712]	; 0x2c8
 80162fa:	eddd 6acd 	vldr	s13, [sp, #820]	; 0x334
 80162fe:	ed9d 7ab4 	vldr	s14, [sp, #720]	; 0x2d0
 8016302:	edcd 7acc 	vstr	s15, [sp, #816]	; 0x330
 8016306:	eddd 7ace 	vldr	s15, [sp, #824]	; 0x338
 801630a:	ee26 6a08 	vmul.f32	s12, s12, s16
 801630e:	ee66 6a88 	vmul.f32	s13, s13, s16
 8016312:	ee27 7a08 	vmul.f32	s14, s14, s16
 8016316:	ee67 7a88 	vmul.f32	s15, s15, s16
 801631a:	ed8d 6ab3 	vstr	s12, [sp, #716]	; 0x2cc
 801631e:	edcd 6acd 	vstr	s13, [sp, #820]	; 0x334
 8016322:	ed9d 6ab5 	vldr	s12, [sp, #724]	; 0x2d4
 8016326:	eddd 6acf 	vldr	s13, [sp, #828]	; 0x33c
 801632a:	ed8d 7ab4 	vstr	s14, [sp, #720]	; 0x2d0
 801632e:	edcd 7ace 	vstr	s15, [sp, #824]	; 0x338
 8016332:	ed9d 7ab6 	vldr	s14, [sp, #728]	; 0x2d8
 8016336:	eddd 7ad0 	vldr	s15, [sp, #832]	; 0x340
 801633a:	ee26 6a08 	vmul.f32	s12, s12, s16
 801633e:	ee66 6a88 	vmul.f32	s13, s13, s16
 8016342:	ee27 7a08 	vmul.f32	s14, s14, s16
 8016346:	ee67 7a88 	vmul.f32	s15, s15, s16
 801634a:	ed8d 6ab5 	vstr	s12, [sp, #724]	; 0x2d4
 801634e:	edcd 6acf 	vstr	s13, [sp, #828]	; 0x33c
 8016352:	ed9d 6ab7 	vldr	s12, [sp, #732]	; 0x2dc
 8016356:	eddd 6ad1 	vldr	s13, [sp, #836]	; 0x344
 801635a:	ed8d 7ab6 	vstr	s14, [sp, #728]	; 0x2d8
 801635e:	edcd 7ad0 	vstr	s15, [sp, #832]	; 0x340
 8016362:	ed9d 7ab8 	vldr	s14, [sp, #736]	; 0x2e0
 8016366:	eddd 7ad2 	vldr	s15, [sp, #840]	; 0x348
 801636a:	ee65 5a88 	vmul.f32	s11, s11, s16
 801636e:	ee26 6a08 	vmul.f32	s12, s12, s16
 8016372:	ee66 6a88 	vmul.f32	s13, s13, s16
 8016376:	ee27 7a08 	vmul.f32	s14, s14, s16
 801637a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801637e:	ed8d 6ab7 	vstr	s12, [sp, #732]	; 0x2dc
 8016382:	edcd 6ad1 	vstr	s13, [sp, #836]	; 0x344
 8016386:	ed8d 7ab8 	vstr	s14, [sp, #736]	; 0x2e0
 801638a:	edcd 7ad2 	vstr	s15, [sp, #840]	; 0x348
 801638e:	edcd 5ab1 	vstr	s11, [sp, #708]	; 0x2c4
 8016392:	eddd 5ab9 	vldr	s11, [sp, #740]	; 0x2e4
 8016396:	eddd 7ad3 	vldr	s15, [sp, #844]	; 0x34c
 801639a:	ed9d 6aba 	vldr	s12, [sp, #744]	; 0x2e8
 801639e:	eddd 6ad4 	vldr	s13, [sp, #848]	; 0x350
 80163a2:	ed9d 7abb 	vldr	s14, [sp, #748]	; 0x2ec
 80163a6:	ee67 7a88 	vmul.f32	s15, s15, s16
 80163aa:	ee26 6a08 	vmul.f32	s12, s12, s16
 80163ae:	edcd 7ad3 	vstr	s15, [sp, #844]	; 0x34c
 80163b2:	eddd 7ad5 	vldr	s15, [sp, #852]	; 0x354
 80163b6:	ed8d 6aba 	vstr	s12, [sp, #744]	; 0x2e8
 80163ba:	ee66 6a88 	vmul.f32	s13, s13, s16
 80163be:	ee27 7a08 	vmul.f32	s14, s14, s16
 80163c2:	ee67 7a88 	vmul.f32	s15, s15, s16
 80163c6:	ed9d 6abc 	vldr	s12, [sp, #752]	; 0x2f0
 80163ca:	edcd 6ad4 	vstr	s13, [sp, #848]	; 0x350
 80163ce:	ed8d 7abb 	vstr	s14, [sp, #748]	; 0x2ec
 80163d2:	eddd 6ad6 	vldr	s13, [sp, #856]	; 0x358
 80163d6:	ed9d 7abd 	vldr	s14, [sp, #756]	; 0x2f4
 80163da:	edcd 7ad5 	vstr	s15, [sp, #852]	; 0x354
 80163de:	eddd 7ad7 	vldr	s15, [sp, #860]	; 0x35c
 80163e2:	ee65 5a88 	vmul.f32	s11, s11, s16
 80163e6:	ee26 6a08 	vmul.f32	s12, s12, s16
 80163ea:	ee66 6a88 	vmul.f32	s13, s13, s16
 80163ee:	ee27 7a08 	vmul.f32	s14, s14, s16
 80163f2:	ee27 8a88 	vmul.f32	s16, s15, s16
 80163f6:	a9be      	add	r1, sp, #760	; 0x2f8
 80163f8:	edcd 5ab9 	vstr	s11, [sp, #740]	; 0x2e4
 80163fc:	ed8d 6abc 	vstr	s12, [sp, #752]	; 0x2f0
 8016400:	edcd 6ad6 	vstr	s13, [sp, #856]	; 0x358
 8016404:	a8b1      	add	r0, sp, #708	; 0x2c4
 8016406:	ed8d 7abd 	vstr	s14, [sp, #756]	; 0x2f4
 801640a:	eeb0 0a68 	vmov.f32	s0, s17
 801640e:	ed8d 8ad7 	vstr	s16, [sp, #860]	; 0x35c
 8016412:	f7fa feb7 	bl	8011184 <m_interp1q_constrain>
 8016416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016418:	ed8d 0a00 	vstr	s0, [sp]
 801641c:	ed83 0a00 	vstr	s0, [r3]
 8016420:	a9d8      	add	r1, sp, #864	; 0x360
 8016422:	a8cb      	add	r0, sp, #812	; 0x32c
 8016424:	eeb0 0a68 	vmov.f32	s0, s17
 8016428:	f7fa feac 	bl	8011184 <m_interp1q_constrain>
 801642c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801642e:	eddd 7a00 	vldr	s15, [sp]
 8016432:	ed83 0a00 	vstr	s0, [r3]
 8016436:	4b4e      	ldr	r3, [pc, #312]	; (8016570 <m_kalman_3gyro.isra.9.constprop.47+0x1538>)
 8016438:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 801643c:	ed93 8a00 	vldr	s16, [r3]
 8016440:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016442:	edc3 7a00 	vstr	s15, [r3]
 8016446:	ee78 7a47 	vsub.f32	s15, s16, s14
 801644a:	eef0 7ae7 	vabs.f32	s15, s15
 801644e:	ee17 0a90 	vmov	r0, s15
 8016452:	f7ea f881 	bl	8000558 <__aeabi_f2d>
 8016456:	ec41 0b10 	vmov	d0, r0, r1
 801645a:	f005 fd1d 	bl	801be98 <floor>
 801645e:	ec51 0b10 	vmov	r0, r1, d0
 8016462:	f7ea fba5 	bl	8000bb0 <__aeabi_d2uiz>
 8016466:	f8dd 36f4 	ldr.w	r3, [sp, #1780]	; 0x6f4
 801646a:	7018      	strb	r0, [r3, #0]
 801646c:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 8016470:	edda 7a2b 	vldr	s15, [sl, #172]	; 0xac
 8016474:	4b3f      	ldr	r3, [pc, #252]	; (8016574 <m_kalman_3gyro.isra.9.constprop.47+0x153c>)
 8016476:	ee38 7a47 	vsub.f32	s14, s16, s14
 801647a:	ee7f 7ae7 	vsub.f32	s15, s31, s15
 801647e:	eeb0 7ac7 	vabs.f32	s14, s14
 8016482:	eef0 7ae7 	vabs.f32	s15, s15
 8016486:	ee77 7a87 	vadd.f32	s15, s15, s14
 801648a:	ed83 7a00 	vstr	s14, [r3]
 801648e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016490:	edcd 7a00 	vstr	s15, [sp]
 8016494:	edc3 7a00 	vstr	s15, [r3]
 8016498:	ee17 0a90 	vmov	r0, s15
 801649c:	f7ea f85c 	bl	8000558 <__aeabi_f2d>
 80164a0:	a32f      	add	r3, pc, #188	; (adr r3, 8016560 <m_kalman_3gyro.isra.9.constprop.47+0x1528>)
 80164a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164a6:	f7ea fb3b 	bl	8000b20 <__aeabi_dcmpgt>
 80164aa:	2800      	cmp	r0, #0
 80164ac:	f001 8466 	beq.w	8017d7c <m_kalman_3gyro.isra.9.constprop.47+0x2d44>
 80164b0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8016578 <m_kalman_3gyro.isra.9.constprop.47+0x1540>
 80164b4:	eddd 7a00 	vldr	s15, [sp]
 80164b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80164be:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80164c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80164c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80164ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80164ce:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80164d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80164d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164da:	edc3 7a00 	vstr	s15, [r3]
 80164de:	f301 8468 	bgt.w	8017db2 <m_kalman_3gyro.isra.9.constprop.47+0x2d7a>
 80164e2:	ee17 0a90 	vmov	r0, s15
 80164e6:	f7ea f837 	bl	8000558 <__aeabi_f2d>
 80164ea:	ec41 0b10 	vmov	d0, r0, r1
 80164ee:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80164f2:	ee78 7a65 	vsub.f32	s15, s16, s11
 80164f6:	edcd 5a00 	vstr	s11, [sp]
 80164fa:	eef0 7ae7 	vabs.f32	s15, s15
 80164fe:	ee17 0a90 	vmov	r0, s15
 8016502:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016506:	f7ea f827 	bl	8000558 <__aeabi_f2d>
 801650a:	4b1c      	ldr	r3, [pc, #112]	; (801657c <m_kalman_3gyro.isra.9.constprop.47+0x1544>)
 801650c:	2200      	movs	r2, #0
 801650e:	f7e9 fec3 	bl	8000298 <__aeabi_dsub>
 8016512:	ed9d 0b02 	vldr	d0, [sp, #8]
 8016516:	ec41 0b11 	vmov	d1, r0, r1
 801651a:	f005 fd41 	bl	801bfa0 <fmax>
 801651e:	ec51 0b10 	vmov	r0, r1, d0
 8016522:	f7ea fb65 	bl	8000bf0 <__aeabi_d2f>
 8016526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016528:	6018      	str	r0, [r3, #0]
 801652a:	f89a 3031 	ldrb.w	r3, [sl, #49]	; 0x31
 801652e:	2b00      	cmp	r3, #0
 8016530:	f000 80ae 	beq.w	8016690 <m_kalman_3gyro.isra.9.constprop.47+0x1658>
 8016534:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
 8016538:	2b00      	cmp	r3, #0
 801653a:	f040 80a9 	bne.w	8016690 <m_kalman_3gyro.isra.9.constprop.47+0x1658>
 801653e:	ed9d 7a27 	vldr	s14, [sp, #156]	; 0x9c
 8016542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016544:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016548:	ee67 7a27 	vmul.f32	s15, s14, s15
 801654c:	ed93 7a00 	vldr	s14, [r3]
 8016550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016558:	f140 809a 	bpl.w	8016690 <m_kalman_3gyro.isra.9.constprop.47+0x1658>
 801655c:	e014      	b.n	8016588 <m_kalman_3gyro.isra.9.constprop.47+0x1550>
 801655e:	bf00      	nop
 8016560:	9999999a 	.word	0x9999999a
 8016564:	3fb99999 	.word	0x3fb99999
 8016568:	00000000 	.word	0x00000000
 801656c:	3ff00000 	.word	0x3ff00000
 8016570:	20001ab4 	.word	0x20001ab4
 8016574:	20001ac4 	.word	0x20001ac4
 8016578:	3dcccccd 	.word	0x3dcccccd
 801657c:	3fe00000 	.word	0x3fe00000
 8016580:	3f99999a 	.word	0x3f99999a
 8016584:	3f4ccccd 	.word	0x3f4ccccd
 8016588:	ed8a ba12 	vstr	s22, [sl, #72]	; 0x48
 801658c:	edca ba15 	vstr	s23, [sl, #84]	; 0x54
 8016590:	edca aa18 	vstr	s21, [sl, #96]	; 0x60
 8016594:	edca da11 	vstr	s27, [sl, #68]	; 0x44
 8016598:	ed8a ea14 	vstr	s28, [sl, #80]	; 0x50
 801659c:	ed8a 9a17 	vstr	s18, [sl, #92]	; 0x5c
 80165a0:	ed9d 0b20 	vldr	d0, [sp, #128]	; 0x80
 80165a4:	f006 f818 	bl	801c5d8 <sqrt>
 80165a8:	ec51 0b10 	vmov	r0, r1, d0
 80165ac:	f7ea fb20 	bl	8000bf0 <__aeabi_d2f>
 80165b0:	ed9a 4a11 	vldr	s8, [sl, #68]	; 0x44
 80165b4:	ed9a 5a17 	vldr	s10, [sl, #92]	; 0x5c
 80165b8:	edda 4a14 	vldr	s9, [sl, #80]	; 0x50
 80165bc:	ed9a 7a18 	vldr	s14, [sl, #96]	; 0x60
 80165c0:	edda 6a12 	vldr	s13, [sl, #72]	; 0x48
 80165c4:	9906      	ldr	r1, [sp, #24]
 80165c6:	ee06 0a10 	vmov	s12, r0
 80165ca:	eec4 7a06 	vdiv.f32	s15, s8, s12
 80165ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80165d0:	ee85 4a06 	vdiv.f32	s8, s10, s12
 80165d4:	ee84 5a86 	vdiv.f32	s10, s9, s12
 80165d8:	ed9a 6a15 	vldr	s12, [sl, #84]	; 0x54
 80165dc:	edca 7a11 	vstr	s15, [sl, #68]	; 0x44
 80165e0:	ee67 3a27 	vmul.f32	s7, s14, s15
 80165e4:	ee66 4a84 	vmul.f32	s9, s13, s8
 80165e8:	ee27 7a05 	vmul.f32	s14, s14, s10
 80165ec:	ee66 6a85 	vmul.f32	s13, s13, s10
 80165f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80165f4:	ee26 6a04 	vmul.f32	s12, s12, s8
 80165f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80165fc:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8016600:	ee37 7a46 	vsub.f32	s14, s14, s12
 8016604:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
 8016608:	ed8a 4a17 	vstr	s8, [sl, #92]	; 0x5c
 801660c:	edca 4a13 	vstr	s9, [sl, #76]	; 0x4c
 8016610:	ed8a 5a14 	vstr	s10, [sl, #80]	; 0x50
 8016614:	ed8a 7a10 	vstr	s14, [sl, #64]	; 0x40
 8016618:	f7fa fb86 	bl	8010d28 <m_dcm2q_eml>
 801661c:	ed5f 7a28 	vldr	s15, [pc, #-160]	; 8016580 <m_kalman_3gyro.isra.9.constprop.47+0x1548>
 8016620:	edca fa2b 	vstr	s31, [sl, #172]	; 0xac
 8016624:	eeb4 aae7 	vcmpe.f32	s20, s15
 8016628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801662c:	eddd 5a00 	vldr	s11, [sp]
 8016630:	f141 83ed 	bpl.w	8017e0e <m_kalman_3gyro.isra.9.constprop.47+0x2dd6>
 8016634:	ed5f 7a2d 	vldr	s15, [pc, #-180]	; 8016584 <m_kalman_3gyro.isra.9.constprop.47+0x154c>
 8016638:	eeb4 aae7 	vcmpe.f32	s20, s15
 801663c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016640:	bfd4      	ite	le
 8016642:	eef0 7a65 	vmovle.f32	s15, s11
 8016646:	eef0 7a4a 	vmovgt.f32	s15, s20
 801664a:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801664e:	2100      	movs	r1, #0
 8016650:	edca 7a2c 	vstr	s15, [sl, #176]	; 0xb0
 8016654:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 8016658:	f008 fb8d 	bl	801ed76 <memset>
 801665c:	4be7      	ldr	r3, [pc, #924]	; (80169fc <m_kalman_3gyro.isra.9.constprop.47+0x19c4>)
 801665e:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8016662:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8016666:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 801666a:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 801666e:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8016672:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8016676:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 801667a:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 801667e:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8016682:	f8dd 36fc 	ldr.w	r3, [sp, #1788]	; 0x6fc
 8016686:	2100      	movs	r1, #0
 8016688:	2201      	movs	r2, #1
 801668a:	f88a 1031 	strb.w	r1, [sl, #49]	; 0x31
 801668e:	701a      	strb	r2, [r3, #0]
 8016690:	9b06      	ldr	r3, [sp, #24]
 8016692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016694:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 8016698:	f10a 0494 	add.w	r4, sl, #148	; 0x94
 801669c:	aee9      	add	r6, sp, #932	; 0x3a4
 801669e:	f10a 07b4 	add.w	r7, sl, #180	; 0xb4
 80166a2:	6820      	ldr	r0, [r4, #0]
 80166a4:	6861      	ldr	r1, [r4, #4]
 80166a6:	68a2      	ldr	r2, [r4, #8]
 80166a8:	68e3      	ldr	r3, [r4, #12]
 80166aa:	4635      	mov	r5, r6
 80166ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80166ae:	3410      	adds	r4, #16
 80166b0:	42bc      	cmp	r4, r7
 80166b2:	462e      	mov	r6, r5
 80166b4:	d1f5      	bne.n	80166a2 <m_kalman_3gyro.isra.9.constprop.47+0x166a>
 80166b6:	6820      	ldr	r0, [r4, #0]
 80166b8:	6028      	str	r0, [r5, #0]
 80166ba:	edd8 7a00 	vldr	s15, [r8]
 80166be:	eef4 7a67 	vcmp.f32	s15, s15
 80166c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166c6:	d170      	bne.n	80167aa <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 80166c8:	edd8 7a01 	vldr	s15, [r8, #4]
 80166cc:	eef4 7a67 	vcmp.f32	s15, s15
 80166d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166d4:	d169      	bne.n	80167aa <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 80166d6:	edd8 7a02 	vldr	s15, [r8, #8]
 80166da:	eef4 7a67 	vcmp.f32	s15, s15
 80166de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166e2:	d162      	bne.n	80167aa <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 80166e4:	edd8 7a03 	vldr	s15, [r8, #12]
 80166e8:	eef4 7a67 	vcmp.f32	s15, s15
 80166ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166f0:	d15b      	bne.n	80167aa <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 80166f2:	edd8 7a04 	vldr	s15, [r8, #16]
 80166f6:	eef4 7a67 	vcmp.f32	s15, s15
 80166fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166fe:	d154      	bne.n	80167aa <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8016700:	edd8 7a05 	vldr	s15, [r8, #20]
 8016704:	eef4 7a67 	vcmp.f32	s15, s15
 8016708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801670c:	d14d      	bne.n	80167aa <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 801670e:	edd8 7a06 	vldr	s15, [r8, #24]
 8016712:	eef4 7a67 	vcmp.f32	s15, s15
 8016716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801671a:	d146      	bne.n	80167aa <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 801671c:	edd8 7a07 	vldr	s15, [r8, #28]
 8016720:	eef4 7a67 	vcmp.f32	s15, s15
 8016724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016728:	d13f      	bne.n	80167aa <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 801672a:	edd8 7a08 	vldr	s15, [r8, #32]
 801672e:	eef4 7a67 	vcmp.f32	s15, s15
 8016732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016736:	d138      	bne.n	80167aa <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8016738:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 801673c:	eef4 7a67 	vcmp.f32	s15, s15
 8016740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016744:	d131      	bne.n	80167aa <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8016746:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
 801674a:	eef4 7a67 	vcmp.f32	s15, s15
 801674e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016752:	d12a      	bne.n	80167aa <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8016754:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
 8016758:	eef4 7a67 	vcmp.f32	s15, s15
 801675c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016760:	d123      	bne.n	80167aa <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8016762:	edd8 7a0c 	vldr	s15, [r8, #48]	; 0x30
 8016766:	eef4 7a67 	vcmp.f32	s15, s15
 801676a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801676e:	d11c      	bne.n	80167aa <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8016770:	9b06      	ldr	r3, [sp, #24]
 8016772:	edd3 7a00 	vldr	s15, [r3]
 8016776:	eef5 7a40 	vcmp.f32	s15, #0.0
 801677a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801677e:	d163      	bne.n	8016848 <m_kalman_3gyro.isra.9.constprop.47+0x1810>
 8016780:	edd3 7a01 	vldr	s15, [r3, #4]
 8016784:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801678c:	d15c      	bne.n	8016848 <m_kalman_3gyro.isra.9.constprop.47+0x1810>
 801678e:	edd3 7a02 	vldr	s15, [r3, #8]
 8016792:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801679a:	d155      	bne.n	8016848 <m_kalman_3gyro.isra.9.constprop.47+0x1810>
 801679c:	edd3 7a03 	vldr	s15, [r3, #12]
 80167a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80167a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167a8:	d14e      	bne.n	8016848 <m_kalman_3gyro.isra.9.constprop.47+0x1810>
 80167aa:	2400      	movs	r4, #0
 80167ac:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 80167b0:	9906      	ldr	r1, [sp, #24]
 80167b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80167b4:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 80167b8:	f8ca 4048 	str.w	r4, [sl, #72]	; 0x48
 80167bc:	f8ca 404c 	str.w	r4, [sl, #76]	; 0x4c
 80167c0:	f8ca 4054 	str.w	r4, [sl, #84]	; 0x54
 80167c4:	f8ca 4058 	str.w	r4, [sl, #88]	; 0x58
 80167c8:	f8ca 405c 	str.w	r4, [sl, #92]	; 0x5c
 80167cc:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 80167d0:	f8ca 5050 	str.w	r5, [sl, #80]	; 0x50
 80167d4:	f8ca 5060 	str.w	r5, [sl, #96]	; 0x60
 80167d8:	f7fa faa6 	bl	8010d28 <m_dcm2q_eml>
 80167dc:	f8dd 36e0 	ldr.w	r3, [sp, #1760]	; 0x6e0
 80167e0:	f8ca 4094 	str.w	r4, [sl, #148]	; 0x94
 80167e4:	f8ca 4098 	str.w	r4, [sl, #152]	; 0x98
 80167e8:	f8ca 409c 	str.w	r4, [sl, #156]	; 0x9c
 80167ec:	681a      	ldr	r2, [r3, #0]
 80167ee:	f8ca 20a0 	str.w	r2, [sl, #160]	; 0xa0
 80167f2:	f8dd 26e0 	ldr.w	r2, [sp, #1760]	; 0x6e0
 80167f6:	4b82      	ldr	r3, [pc, #520]	; (8016a00 <m_kalman_3gyro.isra.9.constprop.47+0x19c8>)
 80167f8:	6852      	ldr	r2, [r2, #4]
 80167fa:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 80167fe:	f8dd 26e0 	ldr.w	r2, [sp, #1760]	; 0x6e0
 8016802:	6892      	ldr	r2, [r2, #8]
 8016804:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 8016808:	f8ca 30ac 	str.w	r3, [sl, #172]	; 0xac
 801680c:	f8ca 50b0 	str.w	r5, [sl, #176]	; 0xb0
 8016810:	f8ca 50b4 	str.w	r5, [sl, #180]	; 0xb4
 8016814:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8016818:	2100      	movs	r1, #0
 801681a:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 801681e:	f008 faaa 	bl	801ed76 <memset>
 8016822:	4b76      	ldr	r3, [pc, #472]	; (80169fc <m_kalman_3gyro.isra.9.constprop.47+0x19c4>)
 8016824:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8016828:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 801682c:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8016830:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8016834:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8016838:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 801683c:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8016840:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 8016844:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8016848:	f50d 61da 	add.w	r1, sp, #1744	; 0x6d0
 801684c:	2200      	movs	r2, #0
 801684e:	2300      	movs	r3, #0
 8016850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016854:	f7ea f93c 	bl	8000ad0 <__aeabi_dcmpeq>
 8016858:	2800      	cmp	r0, #0
 801685a:	d174      	bne.n	8016946 <m_kalman_3gyro.isra.9.constprop.47+0x190e>
 801685c:	eddd 7a27 	vldr	s15, [sp, #156]	; 0x9c
 8016860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016862:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016866:	ed93 7a00 	vldr	s14, [r3]
 801686a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801686e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016872:	d568      	bpl.n	8016946 <m_kalman_3gyro.isra.9.constprop.47+0x190e>
 8016874:	ed8a ba12 	vstr	s22, [sl, #72]	; 0x48
 8016878:	edca ba15 	vstr	s23, [sl, #84]	; 0x54
 801687c:	edca aa18 	vstr	s21, [sl, #96]	; 0x60
 8016880:	edca da11 	vstr	s27, [sl, #68]	; 0x44
 8016884:	ed8a ea14 	vstr	s28, [sl, #80]	; 0x50
 8016888:	ed8a 9a17 	vstr	s18, [sl, #92]	; 0x5c
 801688c:	ed9d 0b20 	vldr	d0, [sp, #128]	; 0x80
 8016890:	f005 fea2 	bl	801c5d8 <sqrt>
 8016894:	ec51 0b10 	vmov	r0, r1, d0
 8016898:	f7ea f9aa 	bl	8000bf0 <__aeabi_d2f>
 801689c:	ed9a 5a11 	vldr	s10, [sl, #68]	; 0x44
 80168a0:	ed9a 6a17 	vldr	s12, [sl, #92]	; 0x5c
 80168a4:	ed9a 4a14 	vldr	s8, [sl, #80]	; 0x50
 80168a8:	ed9a 7a18 	vldr	s14, [sl, #96]	; 0x60
 80168ac:	edda 6a12 	vldr	s13, [sl, #72]	; 0x48
 80168b0:	edda 7a15 	vldr	s15, [sl, #84]	; 0x54
 80168b4:	9906      	ldr	r1, [sp, #24]
 80168b6:	ee05 0a90 	vmov	s11, r0
 80168ba:	eec5 4a25 	vdiv.f32	s9, s10, s11
 80168be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80168c0:	ee86 5a25 	vdiv.f32	s10, s12, s11
 80168c4:	ee84 6a25 	vdiv.f32	s12, s8, s11
 80168c8:	ee67 3a24 	vmul.f32	s7, s14, s9
 80168cc:	ee66 5a85 	vmul.f32	s11, s13, s10
 80168d0:	ee27 4a85 	vmul.f32	s8, s15, s10
 80168d4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80168d8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80168dc:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80168e0:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80168e4:	ee37 7a44 	vsub.f32	s14, s14, s8
 80168e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80168ec:	edca 4a11 	vstr	s9, [sl, #68]	; 0x44
 80168f0:	ed8a 5a17 	vstr	s10, [sl, #92]	; 0x5c
 80168f4:	edca 5a13 	vstr	s11, [sl, #76]	; 0x4c
 80168f8:	ed8a 6a14 	vstr	s12, [sl, #80]	; 0x50
 80168fc:	ed8a 7a10 	vstr	s14, [sl, #64]	; 0x40
 8016900:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
 8016904:	f7fa fa10 	bl	8010d28 <m_dcm2q_eml>
 8016908:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
 801690c:	2300      	movs	r3, #0
 801690e:	2201      	movs	r2, #1
 8016910:	700a      	strb	r2, [r1, #0]
 8016912:	edca fa2b 	vstr	s31, [sl, #172]	; 0xac
 8016916:	ed8a 8a2d 	vstr	s16, [sl, #180]	; 0xb4
 801691a:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 801691e:	f8ca 30bc 	str.w	r3, [sl, #188]	; 0xbc
 8016922:	f8ca 30c0 	str.w	r3, [sl, #192]	; 0xc0
 8016926:	f8ca 30dc 	str.w	r3, [sl, #220]	; 0xdc
 801692a:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 801692e:	f8ca 30e4 	str.w	r3, [sl, #228]	; 0xe4
 8016932:	f8ca 3100 	str.w	r3, [sl, #256]	; 0x100
 8016936:	f8ca 3104 	str.w	r3, [sl, #260]	; 0x104
 801693a:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 801693e:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8016942:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8016946:	ed9f 9a30 	vldr	s18, [pc, #192]	; 8016a08 <m_kalman_3gyro.isra.9.constprop.47+0x19d0>
 801694a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801694c:	9806      	ldr	r0, [sp, #24]
 801694e:	ed8a 9a25 	vstr	s18, [sl, #148]	; 0x94
 8016952:	ed8a 9a26 	vstr	s18, [sl, #152]	; 0x98
 8016956:	ed8a 9a27 	vstr	s18, [sl, #156]	; 0x9c
 801695a:	f7fa f97f 	bl	8010c5c <m_q2dcm_eml>
 801695e:	edda 7a2b 	vldr	s15, [sl, #172]	; 0xac
 8016962:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801696a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801696e:	ee17 0a90 	vmov	r0, s15
 8016972:	f7e9 fdf1 	bl	8000558 <__aeabi_f2d>
 8016976:	ec41 0b10 	vmov	d0, r0, r1
 801697a:	f005 fe2d 	bl	801c5d8 <sqrt>
 801697e:	ec51 0b10 	vmov	r0, r1, d0
 8016982:	f7ea f935 	bl	8000bf0 <__aeabi_d2f>
 8016986:	ed9a 7a10 	vldr	s14, [sl, #64]	; 0x40
 801698a:	ed9a 4a16 	vldr	s8, [sl, #88]	; 0x58
 801698e:	ed9a 5a17 	vldr	s10, [sl, #92]	; 0x5c
 8016992:	edda 3a13 	vldr	s7, [sl, #76]	; 0x4c
 8016996:	edda 2a11 	vldr	s5, [sl, #68]	; 0x44
 801699a:	edda 4a14 	vldr	s9, [sl, #80]	; 0x50
 801699e:	edca fa22 	vstr	s31, [sl, #136]	; 0x88
 80169a2:	ee07 0a90 	vmov	s15, r0
 80169a6:	ee67 5a09 	vmul.f32	s11, s14, s18
 80169aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80169ae:	ee25 3a09 	vmul.f32	s6, s10, s18
 80169b2:	ee77 6a09 	vadd.f32	s13, s14, s18
 80169b6:	ee24 5a09 	vmul.f32	s10, s8, s18
 80169ba:	ee27 7a84 	vmul.f32	s14, s15, s8
 80169be:	ee62 2a89 	vmul.f32	s5, s5, s18
 80169c2:	ee27 6aa3 	vmul.f32	s12, s15, s7
 80169c6:	ee75 5a89 	vadd.f32	s11, s11, s18
 80169ca:	ee63 3a89 	vmul.f32	s7, s7, s18
 80169ce:	ee37 7a09 	vadd.f32	s14, s14, s18
 80169d2:	ee35 5a09 	vadd.f32	s10, s10, s18
 80169d6:	ee33 4a89 	vadd.f32	s8, s7, s18
 80169da:	ee72 5aa5 	vadd.f32	s11, s5, s11
 80169de:	edda 3a2b 	vldr	s7, [sl, #172]	; 0xac
 80169e2:	ed8a aa23 	vstr	s20, [sl, #140]	; 0x8c
 80169e6:	ee33 5a05 	vadd.f32	s10, s6, s10
 80169ea:	ee64 4a89 	vmul.f32	s9, s9, s18
 80169ee:	ee36 6a09 	vadd.f32	s12, s12, s18
 80169f2:	ee37 7a03 	vadd.f32	s14, s14, s6
 80169f6:	ed9a 3a12 	vldr	s6, [sl, #72]	; 0x48
 80169fa:	e00d      	b.n	8016a18 <m_kalman_3gyro.isra.9.constprop.47+0x19e0>
 80169fc:	40a00000 	.word	0x40a00000
 8016a00:	3f666666 	.word	0x3f666666
 8016a04:	3f4ccccd 	.word	0x3f4ccccd
 8016a08:	00000000 	.word	0x00000000
 8016a0c:	3e4ccccd 	.word	0x3e4ccccd
 8016a10:	3f99999a 	.word	0x3f99999a
 8016a14:	3be56042 	.word	0x3be56042
 8016a18:	ed8a 8a24 	vstr	s16, [sl, #144]	; 0x90
 8016a1c:	ee76 7aa2 	vadd.f32	s15, s13, s5
 8016a20:	ee76 6a24 	vadd.f32	s13, s12, s9
 8016a24:	edda 2a18 	vldr	s5, [sl, #96]	; 0x60
 8016a28:	ee35 6a83 	vadd.f32	s12, s11, s6
 8016a2c:	ee74 4a84 	vadd.f32	s9, s9, s8
 8016a30:	ee23 3a83 	vmul.f32	s6, s7, s6
 8016a34:	ed9a 4a15 	vldr	s8, [sl, #84]	; 0x54
 8016a38:	ee77 7a83 	vadd.f32	s15, s15, s6
 8016a3c:	ee74 4a84 	vadd.f32	s9, s9, s8
 8016a40:	ed9d 3a52 	vldr	s6, [sp, #328]	; 0x148
 8016a44:	edca 7a82 	vstr	s15, [sl, #520]	; 0x208
 8016a48:	ee23 4a84 	vmul.f32	s8, s7, s8
 8016a4c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8016a50:	ee73 7a67 	vsub.f32	s15, s6, s15
 8016a54:	ee37 7a23 	vadd.f32	s14, s14, s7
 8016a58:	eddd 3a55 	vldr	s7, [sp, #340]	; 0x154
 8016a5c:	edca 7a19 	vstr	s15, [sl, #100]	; 0x64
 8016a60:	ee76 6a84 	vadd.f32	s13, s13, s8
 8016a64:	ee75 5a22 	vadd.f32	s11, s10, s5
 8016a68:	ee73 3ac6 	vsub.f32	s7, s7, s12
 8016a6c:	eddd 7a57 	vldr	s15, [sp, #348]	; 0x15c
 8016a70:	ed9d 6a54 	vldr	s12, [sp, #336]	; 0x150
 8016a74:	ed9d 4a53 	vldr	s8, [sp, #332]	; 0x14c
 8016a78:	edca 6a83 	vstr	s13, [sl, #524]	; 0x20c
 8016a7c:	ee34 4a66 	vsub.f32	s8, s8, s13
 8016a80:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8016a84:	ee76 6a47 	vsub.f32	s13, s12, s14
 8016a88:	ed9d 5a56 	vldr	s10, [sp, #344]	; 0x158
 8016a8c:	edda 7a2c 	vldr	s15, [sl, #176]	; 0xb0
 8016a90:	ed1f 6a21 	vldr	s12, [pc, #-132]	; 8016a10 <m_kalman_3gyro.isra.9.constprop.47+0x19d8>
 8016a94:	edca 3a1c 	vstr	s7, [sl, #112]	; 0x70
 8016a98:	ee75 4a64 	vsub.f32	s9, s10, s9
 8016a9c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aa4:	ed8a 4a1a 	vstr	s8, [sl, #104]	; 0x68
 8016aa8:	edca 4a1d 	vstr	s9, [sl, #116]	; 0x74
 8016aac:	ed8a 7a84 	vstr	s14, [sl, #528]	; 0x210
 8016ab0:	edca 6a1b 	vstr	s13, [sl, #108]	; 0x6c
 8016ab4:	edca 5a1e 	vstr	s11, [sl, #120]	; 0x78
 8016ab8:	d506      	bpl.n	8016ac8 <m_kalman_3gyro.isra.9.constprop.47+0x1a90>
 8016aba:	ed1f 7a2e 	vldr	s14, [pc, #-184]	; 8016a04 <m_kalman_3gyro.isra.9.constprop.47+0x19cc>
 8016abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ac6:	dc01      	bgt.n	8016acc <m_kalman_3gyro.isra.9.constprop.47+0x1a94>
 8016ac8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016acc:	ee7a 7a67 	vsub.f32	s15, s20, s15
 8016ad0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016ad2:	eef0 7ae7 	vabs.f32	s15, s15
 8016ad6:	ee37 9aa9 	vadd.f32	s18, s15, s19
 8016ada:	edc3 7a00 	vstr	s15, [r3]
 8016ade:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016ae0:	a99d      	add	r1, sp, #628	; 0x274
 8016ae2:	ed83 9a00 	vstr	s18, [r3]
 8016ae6:	eeb0 0a49 	vmov.f32	s0, s18
 8016aea:	a893      	add	r0, sp, #588	; 0x24c
 8016aec:	f7fa facc 	bl	8011088 <m_b_interp1q_constrain>
 8016af0:	a9a7      	add	r1, sp, #668	; 0x29c
 8016af2:	eeb0 8a40 	vmov.f32	s16, s0
 8016af6:	a893      	add	r0, sp, #588	; 0x24c
 8016af8:	eeb0 0a49 	vmov.f32	s0, s18
 8016afc:	f7fa fac4 	bl	8011088 <m_b_interp1q_constrain>
 8016b00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016b02:	ed9d ba58 	vldr	s22, [sp, #352]	; 0x160
 8016b06:	edd3 aa00 	vldr	s21, [r3]
 8016b0a:	eef4 aacb 	vcmpe.f32	s21, s22
 8016b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b12:	eeb0 9a40 	vmov.f32	s18, s0
 8016b16:	f201 83c8 	bhi.w	80182aa <m_kalman_3gyro.isra.9.constprop.47+0x3272>
 8016b1a:	ed9d aa5f 	vldr	s20, [sp, #380]	; 0x17c
 8016b1e:	ed5f 7a46 	vldr	s15, [pc, #-280]	; 8016a08 <m_kalman_3gyro.isra.9.constprop.47+0x19d0>
 8016b22:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8016b24:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8016b26:	edca 7af5 	vstr	s15, [sl, #980]	; 0x3d4
 8016b2a:	eef0 6a67 	vmov.f32	s13, s15
 8016b2e:	eeb0 6a67 	vmov.f32	s12, s15
 8016b32:	eef0 5a67 	vmov.f32	s11, s15
 8016b36:	edca 7af6 	vstr	s15, [sl, #984]	; 0x3d8
 8016b3a:	edca 7af7 	vstr	s15, [sl, #988]	; 0x3dc
 8016b3e:	462e      	mov	r6, r5
 8016b40:	f505 6387 	add.w	r3, r5, #1080	; 0x438
 8016b44:	ed95 7a06 	vldr	s14, [r5, #24]
 8016b48:	edd2 7a00 	vldr	s15, [r2]
 8016b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b50:	3524      	adds	r5, #36	; 0x24
 8016b52:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8016b56:	320c      	adds	r2, #12
 8016b58:	edca 5af5 	vstr	s11, [sl, #980]	; 0x3d4
 8016b5c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8016b60:	ed52 7a02 	vldr	s15, [r2, #-8]
 8016b64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b68:	ee36 6a27 	vadd.f32	s12, s12, s15
 8016b6c:	ed8a 6af6 	vstr	s12, [sl, #984]	; 0x3d8
 8016b70:	ed15 7a01 	vldr	s14, [r5, #-4]
 8016b74:	ed52 7a01 	vldr	s15, [r2, #-4]
 8016b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b7c:	42ab      	cmp	r3, r5
 8016b7e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8016b82:	edca 6af7 	vstr	s13, [sl, #988]	; 0x3dc
 8016b86:	d1dd      	bne.n	8016b44 <m_kalman_3gyro.isra.9.constprop.47+0x1b0c>
 8016b88:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8016b8c:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 8016b90:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016b92:	f50a 6305 	add.w	r3, sl, #2128	; 0x850
 8016b96:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8016b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016b9e:	ed8a 5af5 	vstr	s10, [sl, #980]	; 0x3d4
 8016ba2:	edca 5af6 	vstr	s11, [sl, #984]	; 0x3d8
 8016ba6:	ed8a 7af7 	vstr	s14, [sl, #988]	; 0x3dc
 8016baa:	681a      	ldr	r2, [r3, #0]
 8016bac:	6859      	ldr	r1, [r3, #4]
 8016bae:	625a      	str	r2, [r3, #36]	; 0x24
 8016bb0:	689a      	ldr	r2, [r3, #8]
 8016bb2:	6299      	str	r1, [r3, #40]	; 0x28
 8016bb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8016bb6:	68d9      	ldr	r1, [r3, #12]
 8016bb8:	691a      	ldr	r2, [r3, #16]
 8016bba:	6319      	str	r1, [r3, #48]	; 0x30
 8016bbc:	635a      	str	r2, [r3, #52]	; 0x34
 8016bbe:	6959      	ldr	r1, [r3, #20]
 8016bc0:	699a      	ldr	r2, [r3, #24]
 8016bc2:	6399      	str	r1, [r3, #56]	; 0x38
 8016bc4:	63da      	str	r2, [r3, #60]	; 0x3c
 8016bc6:	69d9      	ldr	r1, [r3, #28]
 8016bc8:	6a1a      	ldr	r2, [r3, #32]
 8016bca:	6419      	str	r1, [r3, #64]	; 0x40
 8016bcc:	645a      	str	r2, [r3, #68]	; 0x44
 8016bce:	3b24      	subs	r3, #36	; 0x24
 8016bd0:	4283      	cmp	r3, r0
 8016bd2:	d1ea      	bne.n	8016baa <m_kalman_3gyro.isra.9.constprop.47+0x1b72>
 8016bd4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8016bd6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016bd8:	6813      	ldr	r3, [r2, #0]
 8016bda:	600b      	str	r3, [r1, #0]
 8016bdc:	9908      	ldr	r1, [sp, #32]
 8016bde:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8016be0:	680b      	ldr	r3, [r1, #0]
 8016be2:	6003      	str	r3, [r0, #0]
 8016be4:	9807      	ldr	r0, [sp, #28]
 8016be6:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8016be8:	6803      	ldr	r3, [r0, #0]
 8016bea:	6023      	str	r3, [r4, #0]
 8016bec:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8016bee:	6853      	ldr	r3, [r2, #4]
 8016bf0:	6023      	str	r3, [r4, #0]
 8016bf2:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8016bf4:	684b      	ldr	r3, [r1, #4]
 8016bf6:	6023      	str	r3, [r4, #0]
 8016bf8:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8016bfa:	6843      	ldr	r3, [r0, #4]
 8016bfc:	6023      	str	r3, [r4, #0]
 8016bfe:	6893      	ldr	r3, [r2, #8]
 8016c00:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8016c02:	6013      	str	r3, [r2, #0]
 8016c04:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016c06:	688b      	ldr	r3, [r1, #8]
 8016c08:	6013      	str	r3, [r2, #0]
 8016c0a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8016c0c:	6883      	ldr	r3, [r0, #8]
 8016c0e:	6013      	str	r3, [r2, #0]
 8016c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c12:	2b02      	cmp	r3, #2
 8016c14:	f001 8674 	beq.w	8018900 <m_kalman_3gyro.isra.9.constprop.47+0x38c8>
 8016c18:	eef4 eaec 	vcmpe.f32	s29, s25
 8016c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c20:	f340 80f9 	ble.w	8016e16 <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8016c24:	eeb4 dae9 	vcmpe.f32	s26, s19
 8016c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c2c:	f340 80f3 	ble.w	8016e16 <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8016c30:	eeb4 facc 	vcmpe.f32	s30, s24
 8016c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c38:	f340 80ed 	ble.w	8016e16 <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8016c3c:	9b07      	ldr	r3, [sp, #28]
 8016c3e:	ed5f 7a8d 	vldr	s15, [pc, #-564]	; 8016a0c <m_kalman_3gyro.isra.9.constprop.47+0x19d4>
 8016c42:	ed93 7a00 	vldr	s14, [r3]
 8016c46:	eeb0 7ac7 	vabs.f32	s14, s14
 8016c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c52:	f140 80e0 	bpl.w	8016e16 <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8016c56:	ed93 7a01 	vldr	s14, [r3, #4]
 8016c5a:	eeb0 7ac7 	vabs.f32	s14, s14
 8016c5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c66:	f140 80d6 	bpl.w	8016e16 <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8016c6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8016c6e:	eeb0 7ac7 	vabs.f32	s14, s14
 8016c72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c7a:	f140 80cc 	bpl.w	8016e16 <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8016c7e:	9a08      	ldr	r2, [sp, #32]
 8016c80:	ed5f 7a9d 	vldr	s15, [pc, #-628]	; 8016a10 <m_kalman_3gyro.isra.9.constprop.47+0x19d8>
 8016c84:	ed92 7a00 	vldr	s14, [r2]
 8016c88:	eeb0 7ac7 	vabs.f32	s14, s14
 8016c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c94:	f140 80bf 	bpl.w	8016e16 <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8016c98:	ed92 7a01 	vldr	s14, [r2, #4]
 8016c9c:	eeb0 7ac7 	vabs.f32	s14, s14
 8016ca0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ca8:	f140 80b5 	bpl.w	8016e16 <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8016cac:	ed92 7a02 	vldr	s14, [r2, #8]
 8016cb0:	eeb0 7ac7 	vabs.f32	s14, s14
 8016cb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cbc:	f140 80ab 	bpl.w	8016e16 <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8016cc0:	f8da 3450 	ldr.w	r3, [sl, #1104]	; 0x450
 8016cc4:	ed1f 5aad 	vldr	s10, [pc, #-692]	; 8016a14 <m_kalman_3gyro.isra.9.constprop.47+0x19dc>
 8016cc8:	2b09      	cmp	r3, #9
 8016cca:	bfc8      	it	gt
 8016ccc:	220a      	movgt	r2, #10
 8016cce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016cd0:	bfd8      	it	le
 8016cd2:	2205      	movle	r2, #5
 8016cd4:	e003      	b.n	8016cde <m_kalman_3gyro.isra.9.constprop.47+0x1ca6>
 8016cd6:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8016cd8:	4299      	cmp	r1, r3
 8016cda:	f002 810d 	beq.w	8018ef8 <m_kalman_3gyro.isra.9.constprop.47+0x3ec0>
 8016cde:	ecf3 5a01 	vldmia	r3!, {s11}
 8016ce2:	ed93 7a08 	vldr	s14, [r3, #32]
 8016ce6:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
 8016cea:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8016cee:	eef4 5ac7 	vcmpe.f32	s11, s14
 8016cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cf6:	bf54      	ite	pl
 8016cf8:	eef0 7a65 	vmovpl.f32	s15, s11
 8016cfc:	eef0 7a47 	vmovmi.f32	s15, s14
 8016d00:	eeb4 6a67 	vcmp.f32	s12, s15
 8016d04:	bfd8      	it	le
 8016d06:	eeb0 7a65 	vmovle.f32	s14, s11
 8016d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d0e:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8016d12:	bfc8      	it	gt
 8016d14:	eef0 7a46 	vmovgt.f32	s15, s12
 8016d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d1c:	bf58      	it	pl
 8016d1e:	eeb0 6a47 	vmovpl.f32	s12, s14
 8016d22:	eef4 6a67 	vcmp.f32	s13, s15
 8016d26:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8016d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d2e:	eef4 6ac6 	vcmpe.f32	s13, s12
 8016d32:	bfc8      	it	gt
 8016d34:	eef0 7a66 	vmovgt.f32	s15, s13
 8016d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d3c:	bf58      	it	pl
 8016d3e:	eef0 6a46 	vmovpl.f32	s13, s12
 8016d42:	eeb4 7a67 	vcmp.f32	s14, s15
 8016d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d4a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016d4e:	bfc8      	it	gt
 8016d50:	eef0 7a47 	vmovgt.f32	s15, s14
 8016d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d58:	bf58      	it	pl
 8016d5a:	eeb0 7a66 	vmovpl.f32	s14, s13
 8016d5e:	2a05      	cmp	r2, #5
 8016d60:	d051      	beq.n	8016e06 <m_kalman_3gyro.isra.9.constprop.47+0x1dce>
 8016d62:	edd3 5a2c 	vldr	s11, [r3, #176]	; 0xb0
 8016d66:	ed93 6a35 	vldr	s12, [r3, #212]	; 0xd4
 8016d6a:	edd3 6a3e 	vldr	s13, [r3, #248]	; 0xf8
 8016d6e:	eef4 5a67 	vcmp.f32	s11, s15
 8016d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d76:	eef4 5ac7 	vcmpe.f32	s11, s14
 8016d7a:	bfc8      	it	gt
 8016d7c:	eef0 7a65 	vmovgt.f32	s15, s11
 8016d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d84:	bf58      	it	pl
 8016d86:	eef0 5a47 	vmovpl.f32	s11, s14
 8016d8a:	eeb4 6a67 	vcmp.f32	s12, s15
 8016d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d92:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8016d96:	bfc8      	it	gt
 8016d98:	eef0 7a46 	vmovgt.f32	s15, s12
 8016d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016da0:	bf58      	it	pl
 8016da2:	eeb0 6a65 	vmovpl.f32	s12, s11
 8016da6:	eef4 6a67 	vcmp.f32	s13, s15
 8016daa:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 8016dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016db2:	eef4 6ac6 	vcmpe.f32	s13, s12
 8016db6:	bfc8      	it	gt
 8016db8:	eef0 7a66 	vmovgt.f32	s15, s13
 8016dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dc0:	bf58      	it	pl
 8016dc2:	eef0 6a46 	vmovpl.f32	s13, s12
 8016dc6:	eeb4 7a67 	vcmp.f32	s14, s15
 8016dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016dd2:	bfc8      	it	gt
 8016dd4:	eef0 7a47 	vmovgt.f32	s15, s14
 8016dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ddc:	bf58      	it	pl
 8016dde:	eeb0 7a66 	vmovpl.f32	s14, s13
 8016de2:	2a0a      	cmp	r2, #10
 8016de4:	d10f      	bne.n	8016e06 <m_kalman_3gyro.isra.9.constprop.47+0x1dce>
 8016de6:	edd3 6a50 	vldr	s13, [r3, #320]	; 0x140
 8016dea:	eef4 6a67 	vcmp.f32	s13, s15
 8016dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016df2:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016df6:	bfc8      	it	gt
 8016df8:	eef0 7a66 	vmovgt.f32	s15, s13
 8016dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e00:	bf48      	it	mi
 8016e02:	eeb0 7a66 	vmovmi.f32	s14, s13
 8016e06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016e0a:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e12:	f77f af60 	ble.w	8016cd6 <m_kalman_3gyro.isra.9.constprop.47+0x1c9e>
 8016e16:	2300      	movs	r3, #0
 8016e18:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016e1a:	2900      	cmp	r1, #0
 8016e1c:	f001 8225 	beq.w	801826a <m_kalman_3gyro.isra.9.constprop.47+0x3232>
 8016e20:	f001 02fd 	and.w	r2, r1, #253	; 0xfd
 8016e24:	2a01      	cmp	r2, #1
 8016e26:	f002 80f4 	beq.w	8019012 <m_kalman_3gyro.isra.9.constprop.47+0x3fda>
 8016e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e2c:	2b02      	cmp	r3, #2
 8016e2e:	f002 80ee 	beq.w	801900e <m_kalman_3gyro.isra.9.constprop.47+0x3fd6>
 8016e32:	2b04      	cmp	r3, #4
 8016e34:	f001 824a 	beq.w	80182cc <m_kalman_3gyro.isra.9.constprop.47+0x3294>
 8016e38:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
 8016e3c:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8016e40:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8016e44:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 8016e48:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 8016e4c:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8016e50:	2300      	movs	r3, #0
 8016e52:	ac81      	add	r4, sp, #516	; 0x204
 8016e54:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 8016e58:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8016e5c:	eddf 7ae6 	vldr	s15, [pc, #920]	; 80171f8 <m_kalman_3gyro.isra.9.constprop.47+0x21c0>
 8016e60:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8016e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e68:	f281 81f4 	bge.w	8018254 <m_kalman_3gyro.isra.9.constprop.47+0x321c>
 8016e6c:	f8da 2458 	ldr.w	r2, [sl, #1112]	; 0x458
 8016e70:	2a31      	cmp	r2, #49	; 0x31
 8016e72:	dc10      	bgt.n	8016e96 <m_kalman_3gyro.isra.9.constprop.47+0x1e5e>
 8016e74:	2300      	movs	r3, #0
 8016e76:	2a00      	cmp	r2, #0
 8016e78:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8016e7c:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8016e80:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8016e84:	f102 0301 	add.w	r3, r2, #1
 8016e88:	dd03      	ble.n	8016e92 <m_kalman_3gyro.isra.9.constprop.47+0x1e5a>
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	bfd8      	it	le
 8016e8e:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8016e92:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 8016e96:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8016e9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016e9c:	ed93 6a08 	vldr	s12, [r3, #32]
 8016ea0:	ed93 5a06 	vldr	s10, [r3, #24]
 8016ea4:	edd3 5a07 	vldr	s11, [r3, #28]
 8016ea8:	ed93 2a00 	vldr	s4, [r3]
 8016eac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016eae:	edd3 2a01 	vldr	s5, [r3, #4]
 8016eb2:	ed93 7a02 	vldr	s14, [r3, #8]
 8016eb6:	ed93 3a03 	vldr	s6, [r3, #12]
 8016eba:	edd3 3a04 	vldr	s7, [r3, #16]
 8016ebe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8016ec2:	edd3 4a05 	vldr	s9, [r3, #20]
 8016ec6:	ed9f 4acd 	vldr	s8, [pc, #820]	; 80171fc <m_kalman_3gyro.isra.9.constprop.47+0x21c4>
 8016eca:	ee25 5a09 	vmul.f32	s10, s10, s18
 8016ece:	ee65 5a89 	vmul.f32	s11, s11, s18
 8016ed2:	ee26 9a09 	vmul.f32	s18, s12, s18
 8016ed6:	ed83 5a06 	vstr	s10, [r3, #24]
 8016eda:	edc3 5a07 	vstr	s11, [r3, #28]
 8016ede:	ed83 9a08 	vstr	s18, [r3, #32]
 8016ee2:	edd2 6a00 	vldr	s13, [r2]
 8016ee6:	ed91 6a00 	vldr	s12, [r1]
 8016eea:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8016eee:	ee66 6a82 	vmul.f32	s13, s13, s4
 8016ef2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8016ef6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016efa:	ee78 5a25 	vadd.f32	s11, s16, s11
 8016efe:	edc3 6a00 	vstr	s13, [r3]
 8016f02:	edd2 6a00 	vldr	s13, [r2]
 8016f06:	ed91 6a00 	vldr	s12, [r1]
 8016f0a:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8016f0e:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8016f12:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8016f16:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016f1a:	ee85 6a25 	vdiv.f32	s12, s10, s11
 8016f1e:	edc3 6a01 	vstr	s13, [r3, #4]
 8016f22:	edd2 5a00 	vldr	s11, [r2]
 8016f26:	edd1 6a00 	vldr	s13, [r1]
 8016f2a:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8016f2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016f30:	ee27 7a25 	vmul.f32	s14, s14, s11
 8016f34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016f38:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016f3c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8016f40:	ed83 7a02 	vstr	s14, [r3, #8]
 8016f44:	edd2 6a00 	vldr	s13, [r2]
 8016f48:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8016f4c:	ee63 6a26 	vmul.f32	s13, s6, s13
 8016f50:	eeb4 6a44 	vcmp.f32	s12, s8
 8016f54:	edc3 6a03 	vstr	s13, [r3, #12]
 8016f58:	ed92 7a00 	vldr	s14, [r2]
 8016f5c:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8016f60:	ee23 7a87 	vmul.f32	s14, s7, s14
 8016f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f68:	ed83 7a04 	vstr	s14, [r3, #16]
 8016f6c:	ed92 7a00 	vldr	s14, [r2]
 8016f70:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8016f74:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8016f78:	ee64 7a87 	vmul.f32	s15, s9, s14
 8016f7c:	bf48      	it	mi
 8016f7e:	eeb0 6a44 	vmovmi.f32	s12, s8
 8016f82:	edc3 7a05 	vstr	s15, [r3, #20]
 8016f86:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 8016f8a:	edd3 7a06 	vldr	s15, [r3, #24]
 8016f8e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016f92:	edc3 7a06 	vstr	s15, [r3, #24]
 8016f96:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8016f9a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8016f9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016fa2:	ee67 7a88 	vmul.f32	s15, s15, s16
 8016fa6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8016faa:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 8016fae:	edd3 7a07 	vldr	s15, [r3, #28]
 8016fb2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016fb6:	edc3 7a07 	vstr	s15, [r3, #28]
 8016fba:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8016fbe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8016fc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016fc4:	ed93 7a00 	vldr	s14, [r3]
 8016fc8:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8016fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016fd0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 8016fd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d041      	beq.n	801705e <m_kalman_3gyro.isra.9.constprop.47+0x2026>
 8016fda:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8016fde:	edd3 7a03 	vldr	s15, [r3, #12]
 8016fe2:	ee67 7a88 	vmul.f32	s15, s15, s16
 8016fe6:	edc3 7a03 	vstr	s15, [r3, #12]
 8016fea:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 8016fee:	edd3 7a00 	vldr	s15, [r3]
 8016ff2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016ff6:	edc3 7a00 	vstr	s15, [r3]
 8016ffa:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8016ffe:	edd3 7a04 	vldr	s15, [r3, #16]
 8017002:	ee67 7a88 	vmul.f32	s15, s15, s16
 8017006:	edc3 7a04 	vstr	s15, [r3, #16]
 801700a:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 801700e:	edd3 7a01 	vldr	s15, [r3, #4]
 8017012:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017016:	edc3 7a01 	vstr	s15, [r3, #4]
 801701a:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 801701e:	edd3 7a05 	vldr	s15, [r3, #20]
 8017022:	ee67 7a88 	vmul.f32	s15, s15, s16
 8017026:	edc3 7a05 	vstr	s15, [r3, #20]
 801702a:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 801702e:	edd3 7a02 	vldr	s15, [r3, #8]
 8017032:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017036:	edc3 7a02 	vstr	s15, [r3, #8]
 801703a:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 801703e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8017042:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017046:	ee27 8a88 	vmul.f32	s16, s15, s16
 801704a:	ed83 8a0a 	vstr	s16, [r3, #40]	; 0x28
 801704e:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 8017052:	edd3 7a07 	vldr	s15, [r3, #28]
 8017056:	ee27 6a86 	vmul.f32	s12, s15, s12
 801705a:	ed83 6a07 	vstr	s12, [r3, #28]
 801705e:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 8017062:	edda 2a2e 	vldr	s5, [sl, #184]	; 0xb8
 8017066:	edd3 7a00 	vldr	s15, [r3]
 801706a:	f8dd 26bc 	ldr.w	r2, [sp, #1724]	; 0x6bc
 801706e:	ed9a 3a38 	vldr	s6, [sl, #224]	; 0xe0
 8017072:	edda 3a42 	vldr	s7, [sl, #264]	; 0x108
 8017076:	ed9a 4a4c 	vldr	s8, [sl, #304]	; 0x130
 801707a:	edda 4a56 	vldr	s9, [sl, #344]	; 0x158
 801707e:	ed9a 2a60 	vldr	s4, [sl, #384]	; 0x180
 8017082:	edda 5a6a 	vldr	s11, [sl, #424]	; 0x1a8
 8017086:	ed9a 6a74 	vldr	s12, [sl, #464]	; 0x1d0
 801708a:	ed9d 5a54 	vldr	s10, [sp, #336]	; 0x150
 801708e:	ed9d 7a53 	vldr	s14, [sp, #332]	; 0x14c
 8017092:	edda 6a7e 	vldr	s13, [sl, #504]	; 0x1f8
 8017096:	ed84 7a06 	vstr	s14, [r4, #24]
 801709a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801709e:	2300      	movs	r3, #0
 80170a0:	ee72 7aa7 	vadd.f32	s15, s5, s15
 80170a4:	eef1 2a45 	vneg.f32	s5, s10
 80170a8:	edca 7a2e 	vstr	s15, [sl, #184]	; 0xb8
 80170ac:	edd2 7a01 	vldr	s15, [r2, #4]
 80170b0:	6023      	str	r3, [r4, #0]
 80170b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80170b6:	edc4 2a03 	vstr	s5, [r4, #12]
 80170ba:	ee73 7a27 	vadd.f32	s15, s6, s15
 80170be:	eeb1 7a47 	vneg.f32	s14, s14
 80170c2:	edca 7a38 	vstr	s15, [sl, #224]	; 0xe0
 80170c6:	edd2 7a02 	vldr	s15, [r2, #8]
 80170ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80170ce:	ee73 7aa7 	vadd.f32	s15, s7, s15
 80170d2:	edca 7a42 	vstr	s15, [sl, #264]	; 0x108
 80170d6:	edd2 7a03 	vldr	s15, [r2, #12]
 80170da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80170de:	ee74 7a27 	vadd.f32	s15, s8, s15
 80170e2:	edca 7a4c 	vstr	s15, [sl, #304]	; 0x130
 80170e6:	edd2 7a04 	vldr	s15, [r2, #16]
 80170ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80170ee:	ee74 7aa7 	vadd.f32	s15, s9, s15
 80170f2:	edca 7a56 	vstr	s15, [sl, #344]	; 0x158
 80170f6:	edd2 7a05 	vldr	s15, [r2, #20]
 80170fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80170fe:	ee72 7a27 	vadd.f32	s15, s4, s15
 8017102:	edca 7a60 	vstr	s15, [sl, #384]	; 0x180
 8017106:	edd2 7a06 	vldr	s15, [r2, #24]
 801710a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801710e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8017112:	edca 7a6a 	vstr	s15, [sl, #424]	; 0x1a8
 8017116:	edd2 7a07 	vldr	s15, [r2, #28]
 801711a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801711e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8017122:	edca 7a74 	vstr	s15, [sl, #464]	; 0x1d0
 8017126:	edd2 7a08 	vldr	s15, [r2, #32]
 801712a:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 801712e:	eddd 5a52 	vldr	s11, [sp, #328]	; 0x148
 8017132:	ed9d 6a57 	vldr	s12, [sp, #348]	; 0x15c
 8017136:	ed84 5a01 	vstr	s10, [r4, #4]
 801713a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801713e:	eeb1 4a65 	vneg.f32	s8, s11
 8017142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017146:	eef1 4a46 	vneg.f32	s9, s12
 801714a:	edca 7a7e 	vstr	s15, [sl, #504]	; 0x1f8
 801714e:	7812      	ldrb	r2, [r2, #0]
 8017150:	f88a 21fc 	strb.w	r2, [sl, #508]	; 0x1fc
 8017154:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8017158:	eddd 6a55 	vldr	s13, [sp, #340]	; 0x154
 801715c:	7812      	ldrb	r2, [r2, #0]
 801715e:	f88a 21fd 	strb.w	r2, [sl, #509]	; 0x1fd
 8017162:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8017166:	eddd 7a56 	vldr	s15, [sp, #344]	; 0x158
 801716a:	7812      	ldrb	r2, [r2, #0]
 801716c:	f88a 21fe 	strb.w	r2, [sl, #510]	; 0x1fe
 8017170:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8017174:	ed84 7a02 	vstr	s14, [r4, #8]
 8017178:	7852      	ldrb	r2, [r2, #1]
 801717a:	f88a 21ff 	strb.w	r2, [sl, #511]	; 0x1ff
 801717e:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8017182:	6123      	str	r3, [r4, #16]
 8017184:	7852      	ldrb	r2, [r2, #1]
 8017186:	f88a 2200 	strb.w	r2, [sl, #512]	; 0x200
 801718a:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 801718e:	6223      	str	r3, [r4, #32]
 8017190:	7852      	ldrb	r2, [r2, #1]
 8017192:	938a      	str	r3, [sp, #552]	; 0x228
 8017194:	f88a 2201 	strb.w	r2, [sl, #513]	; 0x201
 8017198:	edc4 5a05 	vstr	s11, [r4, #20]
 801719c:	ed84 4a07 	vstr	s8, [r4, #28]
 80171a0:	edcd 4a8d 	vstr	s9, [sp, #564]	; 0x234
 80171a4:	ed8d 6a8b 	vstr	s12, [sp, #556]	; 0x22c
 80171a8:	938e      	str	r3, [sp, #568]	; 0x238
 80171aa:	9392      	str	r3, [sp, #584]	; 0x248
 80171ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80171ae:	edcd 6a8f 	vstr	s13, [sp, #572]	; 0x23c
 80171b2:	eeb1 5a66 	vneg.f32	s10, s13
 80171b6:	eeb1 7a67 	vneg.f32	s14, s15
 80171ba:	ed8d 5a91 	vstr	s10, [sp, #580]	; 0x244
 80171be:	edcd 7a90 	vstr	s15, [sp, #576]	; 0x240
 80171c2:	ed8d 7a8c 	vstr	s14, [sp, #560]	; 0x230
 80171c6:	b1fb      	cbz	r3, 8017208 <m_kalman_3gyro.isra.9.constprop.47+0x21d0>
 80171c8:	f8dd 36c8 	ldr.w	r3, [sp, #1736]	; 0x6c8
 80171cc:	785b      	ldrb	r3, [r3, #1]
 80171ce:	b1db      	cbz	r3, 8017208 <m_kalman_3gyro.isra.9.constprop.47+0x21d0>
 80171d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80171d2:	ed93 7a00 	vldr	s14, [r3]
 80171d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80171da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80171de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171e2:	bfd4      	ite	le
 80171e4:	2301      	movle	r3, #1
 80171e6:	2300      	movgt	r3, #0
 80171e8:	f88a 31ff 	strb.w	r3, [sl, #511]	; 0x1ff
 80171ec:	f88a 3200 	strb.w	r3, [sl, #512]	; 0x200
 80171f0:	f88a 3201 	strb.w	r3, [sl, #513]	; 0x201
 80171f4:	e008      	b.n	8017208 <m_kalman_3gyro.isra.9.constprop.47+0x21d0>
 80171f6:	bf00      	nop
 80171f8:	42480000 	.word	0x42480000
 80171fc:	3c23d70a 	.word	0x3c23d70a
 8017200:	3e4ccccd 	.word	0x3e4ccccd
 8017204:	3ecccccd 	.word	0x3ecccccd
 8017208:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801720a:	edd3 7a00 	vldr	s15, [r3]
 801720e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8017212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017216:	f2c1 8004 	blt.w	8018222 <m_kalman_3gyro.isra.9.constprop.47+0x31ea>
 801721a:	f50d 63db 	add.w	r3, sp, #1752	; 0x6d8
 801721e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017222:	2200      	movs	r2, #0
 8017224:	2300      	movs	r3, #0
 8017226:	f7e9 fc7b 	bl	8000b20 <__aeabi_dcmpgt>
 801722a:	2800      	cmp	r0, #0
 801722c:	f000 87f9 	beq.w	8018222 <m_kalman_3gyro.isra.9.constprop.47+0x31ea>
 8017230:	2300      	movs	r3, #0
 8017232:	f88a 31fc 	strb.w	r3, [sl, #508]	; 0x1fc
 8017236:	f88a 31fd 	strb.w	r3, [sl, #509]	; 0x1fd
 801723a:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 801723e:	edda 7a24 	vldr	s15, [sl, #144]	; 0x90
 8017242:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8017246:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801724a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801724e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017252:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8017256:	dc06      	bgt.n	8017266 <m_kalman_3gyro.isra.9.constprop.47+0x222e>
 8017258:	ed1f 7a17 	vldr	s14, [pc, #-92]	; 8017200 <m_kalman_3gyro.isra.9.constprop.47+0x21c8>
 801725c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017264:	d50a      	bpl.n	801727c <m_kalman_3gyro.isra.9.constprop.47+0x2244>
 8017266:	2300      	movs	r3, #0
 8017268:	f88a 31fc 	strb.w	r3, [sl, #508]	; 0x1fc
 801726c:	f88a 31fd 	strb.w	r3, [sl, #509]	; 0x1fd
 8017270:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8017274:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8017278:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 801727c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017280:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8017284:	eef0 7ae7 	vabs.f32	s15, s15
 8017288:	ee17 0a90 	vmov	r0, s15
 801728c:	f7e9 f964 	bl	8000558 <__aeabi_f2d>
 8017290:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8017294:	e9cd 0100 	strd	r0, r1, [sp]
 8017298:	6818      	ldr	r0, [r3, #0]
 801729a:	f7e9 f95d 	bl	8000558 <__aeabi_f2d>
 801729e:	ed9d 1b00 	vldr	d1, [sp]
 80172a2:	ec41 0b10 	vmov	d0, r0, r1
 80172a6:	f004 fe7b 	bl	801bfa0 <fmax>
 80172aa:	ec51 0b10 	vmov	r0, r1, d0
 80172ae:	f7e9 fc9f 	bl	8000bf0 <__aeabi_d2f>
 80172b2:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 80172b6:	6018      	str	r0, [r3, #0]
 80172b8:	6058      	str	r0, [r3, #4]
 80172ba:	6098      	str	r0, [r3, #8]
 80172bc:	edda 7a23 	vldr	s15, [sl, #140]	; 0x8c
 80172c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80172c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80172c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172cc:	f300 879c 	bgt.w	8018208 <m_kalman_3gyro.isra.9.constprop.47+0x31d0>
 80172d0:	ed1f 7a34 	vldr	s14, [pc, #-208]	; 8017204 <m_kalman_3gyro.isra.9.constprop.47+0x21cc>
 80172d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80172d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172dc:	f100 8794 	bmi.w	8018208 <m_kalman_3gyro.isra.9.constprop.47+0x31d0>
 80172e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80172e2:	ee37 8ae8 	vsub.f32	s16, s15, s17
 80172e6:	f7e9 f937 	bl	8000558 <__aeabi_f2d>
 80172ea:	eef0 7ac8 	vabs.f32	s15, s16
 80172ee:	e9cd 0100 	strd	r0, r1, [sp]
 80172f2:	ee17 0a90 	vmov	r0, s15
 80172f6:	f7e9 f92f 	bl	8000558 <__aeabi_f2d>
 80172fa:	ed9d 1b00 	vldr	d1, [sp]
 80172fe:	ec41 0b10 	vmov	d0, r0, r1
 8017302:	f004 fe4d 	bl	801bfa0 <fmax>
 8017306:	ec51 0b10 	vmov	r0, r1, d0
 801730a:	f7e9 fc71 	bl	8000bf0 <__aeabi_d2f>
 801730e:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8017312:	ed93 7a03 	vldr	s14, [r3, #12]
 8017316:	6298      	str	r0, [r3, #40]	; 0x28
 8017318:	ee68 7a08 	vmul.f32	s15, s16, s16
 801731c:	ee67 6a07 	vmul.f32	s13, s14, s14
 8017320:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017328:	dd14      	ble.n	8017354 <m_kalman_3gyro.isra.9.constprop.47+0x231c>
 801732a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801732e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017332:	dd0f      	ble.n	8017354 <m_kalman_3gyro.isra.9.constprop.47+0x231c>
 8017334:	ed93 6a04 	vldr	s12, [r3, #16]
 8017338:	edd3 6a05 	vldr	s13, [r3, #20]
 801733c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8017340:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017348:	ed83 7a03 	vstr	s14, [r3, #12]
 801734c:	ed83 6a04 	vstr	s12, [r3, #16]
 8017350:	edc3 7a05 	vstr	s15, [r3, #20]
 8017354:	4b25      	ldr	r3, [pc, #148]	; (80173ec <m_kalman_3gyro.isra.9.constprop.47+0x23b4>)
 8017356:	edd3 7a00 	vldr	s15, [r3]
 801735a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801735e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017366:	f341 8189 	ble.w	801867c <m_kalman_3gyro.isra.9.constprop.47+0x3644>
 801736a:	2300      	movs	r3, #0
 801736c:	f8dd 26b8 	ldr.w	r2, [sp, #1720]	; 0x6b8
 8017370:	f88a 31fc 	strb.w	r3, [sl, #508]	; 0x1fc
 8017374:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8017378:	f88a 31fd 	strb.w	r3, [sl, #509]	; 0x1fd
 801737c:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8017380:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8017384:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 8017388:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
 801738c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017390:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8017394:	ee26 6a07 	vmul.f32	s12, s12, s14
 8017398:	ee26 7a87 	vmul.f32	s14, s13, s14
 801739c:	eef4 7ae5 	vcmpe.f32	s15, s11
 80173a0:	ed82 6a09 	vstr	s12, [r2, #36]	; 0x24
 80173a4:	ed82 7a0b 	vstr	s14, [r2, #44]	; 0x2c
 80173a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173ac:	bfc4      	itt	gt
 80173ae:	f88a 3205 	strbgt.w	r3, [sl, #517]	; 0x205
 80173b2:	f88a 3207 	strbgt.w	r3, [sl, #519]	; 0x207
 80173b6:	f89a 38ae 	ldrb.w	r3, [sl, #2222]	; 0x8ae
 80173ba:	2b0e      	cmp	r3, #14
 80173bc:	d802      	bhi.n	80173c4 <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 80173be:	3305      	adds	r3, #5
 80173c0:	f88a 38ae 	strb.w	r3, [sl, #2222]	; 0x8ae
 80173c4:	f20a 12fb 	addw	r2, sl, #507	; 0x1fb
 80173c8:	9207      	str	r2, [sp, #28]
 80173ca:	f10a 0264 	add.w	r2, sl, #100	; 0x64
 80173ce:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 80173d2:	9202      	str	r2, [sp, #8]
 80173d4:	aa75      	add	r2, sp, #468	; 0x1d4
 80173d6:	9304      	str	r3, [sp, #16]
 80173d8:	9205      	str	r2, [sp, #20]
 80173da:	ab8a      	add	r3, sp, #552	; 0x228
 80173dc:	2200      	movs	r2, #0
 80173de:	461f      	mov	r7, r3
 80173e0:	46a0      	mov	r8, r4
 80173e2:	9200      	str	r2, [sp, #0]
 80173e4:	ed9f 8a02 	vldr	s16, [pc, #8]	; 80173f0 <m_kalman_3gyro.isra.9.constprop.47+0x23b8>
 80173e8:	4613      	mov	r3, r2
 80173ea:	e02e      	b.n	801744a <m_kalman_3gyro.isra.9.constprop.47+0x2412>
 80173ec:	20001ac4 	.word	0x20001ac4
 80173f0:	00000000 	.word	0x00000000
 80173f4:	ed57 6a03 	vldr	s13, [r7, #-12]
 80173f8:	ed97 7a00 	vldr	s14, [r7]
 80173fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8017400:	9a07      	ldr	r2, [sp, #28]
 8017402:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8017406:	ee37 7a07 	vadd.f32	s14, s14, s14
 801740a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801740e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8017412:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 8017416:	ed8d 7a79 	vstr	s14, [sp, #484]	; 0x1e4
 801741a:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 801741e:	9207      	str	r2, [sp, #28]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d133      	bne.n	801748c <m_kalman_3gyro.isra.9.constprop.47+0x2454>
 8017424:	9a02      	ldr	r2, [sp, #8]
 8017426:	9b00      	ldr	r3, [sp, #0]
 8017428:	3204      	adds	r2, #4
 801742a:	9202      	str	r2, [sp, #8]
 801742c:	9a04      	ldr	r2, [sp, #16]
 801742e:	3204      	adds	r2, #4
 8017430:	9204      	str	r2, [sp, #16]
 8017432:	9a05      	ldr	r2, [sp, #20]
 8017434:	3301      	adds	r3, #1
 8017436:	3204      	adds	r2, #4
 8017438:	2b0c      	cmp	r3, #12
 801743a:	9300      	str	r3, [sp, #0]
 801743c:	f108 0804 	add.w	r8, r8, #4
 8017440:	f107 0704 	add.w	r7, r7, #4
 8017444:	9205      	str	r2, [sp, #20]
 8017446:	f000 85b3 	beq.w	8017fb0 <m_kalman_3gyro.isra.9.constprop.47+0x2f78>
 801744a:	2b02      	cmp	r3, #2
 801744c:	ed8d 8a78 	vstr	s16, [sp, #480]	; 0x1e0
 8017450:	ed8d 8a79 	vstr	s16, [sp, #484]	; 0x1e4
 8017454:	ed8d 8a7a 	vstr	s16, [sp, #488]	; 0x1e8
 8017458:	ed8d 8a7b 	vstr	s16, [sp, #492]	; 0x1ec
 801745c:	ed8d 8a7c 	vstr	s16, [sp, #496]	; 0x1f0
 8017460:	ed8d 8a7d 	vstr	s16, [sp, #500]	; 0x1f4
 8017464:	ed8d 8a7e 	vstr	s16, [sp, #504]	; 0x1f8
 8017468:	ed8d 8a7f 	vstr	s16, [sp, #508]	; 0x1fc
 801746c:	ed8d 8a80 	vstr	s16, [sp, #512]	; 0x200
 8017470:	f340 84e0 	ble.w	8017e34 <m_kalman_3gyro.isra.9.constprop.47+0x2dfc>
 8017474:	2b05      	cmp	r3, #5
 8017476:	ddbd      	ble.n	80173f4 <m_kalman_3gyro.isra.9.constprop.47+0x23bc>
 8017478:	9a05      	ldr	r2, [sp, #20]
 801747a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801747e:	6013      	str	r3, [r2, #0]
 8017480:	9a07      	ldr	r2, [sp, #28]
 8017482:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8017486:	9207      	str	r2, [sp, #28]
 8017488:	2b00      	cmp	r3, #0
 801748a:	d0cb      	beq.n	8017424 <m_kalman_3gyro.isra.9.constprop.47+0x23ec>
 801748c:	ac6f      	add	r4, sp, #444	; 0x1bc
 801748e:	f10a 03b8 	add.w	r3, sl, #184	; 0xb8
 8017492:	eddd ea78 	vldr	s29, [sp, #480]	; 0x1e0
 8017496:	eddd da79 	vldr	s27, [sp, #484]	; 0x1e4
 801749a:	eddd 6a7a 	vldr	s13, [sp, #488]	; 0x1e8
 801749e:	eddd fa7b 	vldr	s31, [sp, #492]	; 0x1ec
 80174a2:	ed9d fa7c 	vldr	s30, [sp, #496]	; 0x1f0
 80174a6:	ed9d ea7d 	vldr	s28, [sp, #500]	; 0x1f4
 80174aa:	ed9d da7e 	vldr	s26, [sp, #504]	; 0x1f8
 80174ae:	eddd 5a7f 	vldr	s11, [sp, #508]	; 0x1fc
 80174b2:	ed9d 6a80 	vldr	s12, [sp, #512]	; 0x200
 80174b6:	ed84 8a00 	vstr	s16, [r4]
 80174ba:	461e      	mov	r6, r3
 80174bc:	461a      	mov	r2, r3
 80174be:	ed84 8a01 	vstr	s16, [r4, #4]
 80174c2:	ed84 8a02 	vstr	s16, [r4, #8]
 80174c6:	ed84 8a03 	vstr	s16, [r4, #12]
 80174ca:	ed84 8a04 	vstr	s16, [r4, #16]
 80174ce:	ed84 8a05 	vstr	s16, [r4, #20]
 80174d2:	ed84 8a06 	vstr	s16, [r4, #24]
 80174d6:	ed84 8a07 	vstr	s16, [r4, #28]
 80174da:	ed84 8a08 	vstr	s16, [r4, #32]
 80174de:	4621      	mov	r1, r4
 80174e0:	f10a 00dc 	add.w	r0, sl, #220	; 0xdc
 80174e4:	ecb2 7a01 	vldmia	r2!, {s14}
 80174e8:	edd1 7a00 	vldr	s15, [r1]
 80174ec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80174f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174f4:	d008      	beq.n	8017508 <m_kalman_3gyro.isra.9.constprop.47+0x24d0>
 80174f6:	eef5 ea40 	vcmp.f32	s29, #0.0
 80174fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174fe:	bf1c      	itt	ne
 8017500:	ee27 7a2e 	vmulne.f32	s14, s14, s29
 8017504:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8017508:	ed92 7a08 	vldr	s14, [r2, #32]
 801750c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017514:	d008      	beq.n	8017528 <m_kalman_3gyro.isra.9.constprop.47+0x24f0>
 8017516:	eef5 da40 	vcmp.f32	s27, #0.0
 801751a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801751e:	bf1c      	itt	ne
 8017520:	ee2d 7a87 	vmulne.f32	s14, s27, s14
 8017524:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8017528:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 801752c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017534:	d008      	beq.n	8017548 <m_kalman_3gyro.isra.9.constprop.47+0x2510>
 8017536:	eef5 6a40 	vcmp.f32	s13, #0.0
 801753a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801753e:	bf1c      	itt	ne
 8017540:	ee27 7a26 	vmulne.f32	s14, s14, s13
 8017544:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8017548:	ed92 7a1a 	vldr	s14, [r2, #104]	; 0x68
 801754c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017554:	d008      	beq.n	8017568 <m_kalman_3gyro.isra.9.constprop.47+0x2530>
 8017556:	eef5 fa40 	vcmp.f32	s31, #0.0
 801755a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801755e:	bf1c      	itt	ne
 8017560:	ee27 7a2f 	vmulne.f32	s14, s14, s31
 8017564:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8017568:	ed92 7a23 	vldr	s14, [r2, #140]	; 0x8c
 801756c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017574:	d008      	beq.n	8017588 <m_kalman_3gyro.isra.9.constprop.47+0x2550>
 8017576:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801757a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801757e:	bf1c      	itt	ne
 8017580:	ee27 7a0f 	vmulne.f32	s14, s14, s30
 8017584:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8017588:	ed92 7a2c 	vldr	s14, [r2, #176]	; 0xb0
 801758c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017594:	d008      	beq.n	80175a8 <m_kalman_3gyro.isra.9.constprop.47+0x2570>
 8017596:	eeb5 ea40 	vcmp.f32	s28, #0.0
 801759a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801759e:	bf1c      	itt	ne
 80175a0:	ee2e 7a07 	vmulne.f32	s14, s28, s14
 80175a4:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80175a8:	ed92 7a35 	vldr	s14, [r2, #212]	; 0xd4
 80175ac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80175b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175b4:	d008      	beq.n	80175c8 <m_kalman_3gyro.isra.9.constprop.47+0x2590>
 80175b6:	eeb5 da40 	vcmp.f32	s26, #0.0
 80175ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175be:	bf1c      	itt	ne
 80175c0:	ee2d 7a07 	vmulne.f32	s14, s26, s14
 80175c4:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80175c8:	ed92 7a3e 	vldr	s14, [r2, #248]	; 0xf8
 80175cc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80175d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175d4:	d008      	beq.n	80175e8 <m_kalman_3gyro.isra.9.constprop.47+0x25b0>
 80175d6:	eef5 5a40 	vcmp.f32	s11, #0.0
 80175da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175de:	bf1c      	itt	ne
 80175e0:	ee27 7a25 	vmulne.f32	s14, s14, s11
 80175e4:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80175e8:	ed92 7a47 	vldr	s14, [r2, #284]	; 0x11c
 80175ec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80175f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175f4:	d008      	beq.n	8017608 <m_kalman_3gyro.isra.9.constprop.47+0x25d0>
 80175f6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80175fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175fe:	bf1c      	itt	ne
 8017600:	ee27 7a06 	vmulne.f32	s14, s14, s12
 8017604:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8017608:	4290      	cmp	r0, r2
 801760a:	ece1 7a01 	vstmia	r1!, {s15}
 801760e:	f47f af69 	bne.w	80174e4 <m_kalman_3gyro.isra.9.constprop.47+0x24ac>
 8017612:	eef5 ea40 	vcmp.f32	s29, #0.0
 8017616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801761a:	ed94 ca00 	vldr	s24, [r4]
 801761e:	f000 8403 	beq.w	8017e28 <m_kalman_3gyro.isra.9.constprop.47+0x2df0>
 8017622:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8017626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801762a:	f000 83fd 	beq.w	8017e28 <m_kalman_3gyro.isra.9.constprop.47+0x2df0>
 801762e:	ee6c 7a2e 	vmul.f32	s15, s24, s29
 8017632:	ee77 7a88 	vadd.f32	s15, s15, s16
 8017636:	eef5 da40 	vcmp.f32	s27, #0.0
 801763a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801763e:	ed94 9a01 	vldr	s18, [r4, #4]
 8017642:	d008      	beq.n	8017656 <m_kalman_3gyro.isra.9.constprop.47+0x261e>
 8017644:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8017648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801764c:	bf1c      	itt	ne
 801764e:	ee2d 7a89 	vmulne.f32	s14, s27, s18
 8017652:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8017656:	eef5 6a40 	vcmp.f32	s13, #0.0
 801765a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801765e:	edd4 ba02 	vldr	s23, [r4, #8]
 8017662:	d008      	beq.n	8017676 <m_kalman_3gyro.isra.9.constprop.47+0x263e>
 8017664:	eef5 ba40 	vcmp.f32	s23, #0.0
 8017668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801766c:	bf1c      	itt	ne
 801766e:	ee2b 7aa6 	vmulne.f32	s14, s23, s13
 8017672:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8017676:	eef5 fa40 	vcmp.f32	s31, #0.0
 801767a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801767e:	edd4 ca03 	vldr	s25, [r4, #12]
 8017682:	d008      	beq.n	8017696 <m_kalman_3gyro.isra.9.constprop.47+0x265e>
 8017684:	eef5 ca40 	vcmp.f32	s25, #0.0
 8017688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801768c:	bf1c      	itt	ne
 801768e:	ee2c 7aaf 	vmulne.f32	s14, s25, s31
 8017692:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8017696:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801769a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801769e:	edd4 aa04 	vldr	s21, [r4, #16]
 80176a2:	d008      	beq.n	80176b6 <m_kalman_3gyro.isra.9.constprop.47+0x267e>
 80176a4:	eef5 aa40 	vcmp.f32	s21, #0.0
 80176a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176ac:	bf1c      	itt	ne
 80176ae:	ee2a 7a8f 	vmulne.f32	s14, s21, s30
 80176b2:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80176b6:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80176ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176be:	ed94 ba05 	vldr	s22, [r4, #20]
 80176c2:	d008      	beq.n	80176d6 <m_kalman_3gyro.isra.9.constprop.47+0x269e>
 80176c4:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80176c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176cc:	bf1c      	itt	ne
 80176ce:	ee2e 7a0b 	vmulne.f32	s14, s28, s22
 80176d2:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80176d6:	eeb5 da40 	vcmp.f32	s26, #0.0
 80176da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176de:	ed94 aa06 	vldr	s20, [r4, #24]
 80176e2:	d008      	beq.n	80176f6 <m_kalman_3gyro.isra.9.constprop.47+0x26be>
 80176e4:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80176e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176ec:	bf1c      	itt	ne
 80176ee:	ee2d 7a0a 	vmulne.f32	s14, s26, s20
 80176f2:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80176f6:	eef5 5a40 	vcmp.f32	s11, #0.0
 80176fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176fe:	edd4 9a07 	vldr	s19, [r4, #28]
 8017702:	d008      	beq.n	8017716 <m_kalman_3gyro.isra.9.constprop.47+0x26de>
 8017704:	eef5 9a40 	vcmp.f32	s19, #0.0
 8017708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801770c:	bf1c      	itt	ne
 801770e:	ee29 7aa5 	vmulne.f32	s14, s19, s11
 8017712:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8017716:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801771a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801771e:	edd4 8a08 	vldr	s17, [r4, #32]
 8017722:	d008      	beq.n	8017736 <m_kalman_3gyro.isra.9.constprop.47+0x26fe>
 8017724:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801772c:	bf1c      	itt	ne
 801772e:	ee28 7a86 	vmulne.f32	s14, s17, s12
 8017732:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8017736:	9a04      	ldr	r2, [sp, #16]
 8017738:	ed92 7a00 	vldr	s14, [r2]
 801773c:	9a00      	ldr	r2, [sp, #0]
 801773e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8017742:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8017746:	ee77 7a27 	vadd.f32	s15, s14, s15
 801774a:	2a05      	cmp	r2, #5
 801774c:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8017750:	ee27 ca0c 	vmul.f32	s24, s14, s24
 8017754:	ee29 9a07 	vmul.f32	s18, s18, s14
 8017758:	ee67 ba2b 	vmul.f32	s23, s14, s23
 801775c:	ee67 ca2c 	vmul.f32	s25, s14, s25
 8017760:	ee6a aa87 	vmul.f32	s21, s21, s14
 8017764:	ee27 ba0b 	vmul.f32	s22, s14, s22
 8017768:	ee27 aa0a 	vmul.f32	s20, s14, s20
 801776c:	ee67 9a29 	vmul.f32	s19, s14, s19
 8017770:	ee67 8a28 	vmul.f32	s17, s14, s17
 8017774:	ed8d ca66 	vstr	s24, [sp, #408]	; 0x198
 8017778:	ed8d 9a67 	vstr	s18, [sp, #412]	; 0x19c
 801777c:	edcd ba68 	vstr	s23, [sp, #416]	; 0x1a0
 8017780:	edcd ca69 	vstr	s25, [sp, #420]	; 0x1a4
 8017784:	edcd aa6a 	vstr	s21, [sp, #424]	; 0x1a8
 8017788:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 801778c:	ed8d aa6c 	vstr	s20, [sp, #432]	; 0x1b0
 8017790:	edcd 9a6d 	vstr	s19, [sp, #436]	; 0x1b4
 8017794:	edcd 8a6e 	vstr	s17, [sp, #440]	; 0x1b8
 8017798:	f340 809a 	ble.w	80178d0 <m_kalman_3gyro.isra.9.constprop.47+0x2898>
 801779c:	9a02      	ldr	r2, [sp, #8]
 801779e:	eef5 ea40 	vcmp.f32	s29, #0.0
 80177a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177a6:	ed92 7a00 	vldr	s14, [r2]
 80177aa:	f000 8340 	beq.w	8017e2e <m_kalman_3gyro.isra.9.constprop.47+0x2df6>
 80177ae:	edda 7a25 	vldr	s15, [sl, #148]	; 0x94
 80177b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80177b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ba:	f000 8338 	beq.w	8017e2e <m_kalman_3gyro.isra.9.constprop.47+0x2df6>
 80177be:	ee67 7aae 	vmul.f32	s15, s15, s29
 80177c2:	ee77 7a88 	vadd.f32	s15, s15, s16
 80177c6:	eef5 da40 	vcmp.f32	s27, #0.0
 80177ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ce:	d00a      	beq.n	80177e6 <m_kalman_3gyro.isra.9.constprop.47+0x27ae>
 80177d0:	ed9a 5a26 	vldr	s10, [sl, #152]	; 0x98
 80177d4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80177d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177dc:	bf1c      	itt	ne
 80177de:	ee2d 5a85 	vmulne.f32	s10, s27, s10
 80177e2:	ee77 7a85 	vaddne.f32	s15, s15, s10
 80177e6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80177ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ee:	d00a      	beq.n	8017806 <m_kalman_3gyro.isra.9.constprop.47+0x27ce>
 80177f0:	ed9a 5a27 	vldr	s10, [sl, #156]	; 0x9c
 80177f4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80177f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177fc:	bf1c      	itt	ne
 80177fe:	ee25 5a26 	vmulne.f32	s10, s10, s13
 8017802:	ee77 7a85 	vaddne.f32	s15, s15, s10
 8017806:	eef5 fa40 	vcmp.f32	s31, #0.0
 801780a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801780e:	d00a      	beq.n	8017826 <m_kalman_3gyro.isra.9.constprop.47+0x27ee>
 8017810:	ed9a 5a28 	vldr	s10, [sl, #160]	; 0xa0
 8017814:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8017818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801781c:	bf1c      	itt	ne
 801781e:	ee25 5a2f 	vmulne.f32	s10, s10, s31
 8017822:	ee77 7a85 	vaddne.f32	s15, s15, s10
 8017826:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801782a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801782e:	d00a      	beq.n	8017846 <m_kalman_3gyro.isra.9.constprop.47+0x280e>
 8017830:	ed9a 5a29 	vldr	s10, [sl, #164]	; 0xa4
 8017834:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8017838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801783c:	bf1c      	itt	ne
 801783e:	ee25 5a0f 	vmulne.f32	s10, s10, s30
 8017842:	ee77 7a85 	vaddne.f32	s15, s15, s10
 8017846:	eeb5 ea40 	vcmp.f32	s28, #0.0
 801784a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801784e:	d00a      	beq.n	8017866 <m_kalman_3gyro.isra.9.constprop.47+0x282e>
 8017850:	ed9a 5a2a 	vldr	s10, [sl, #168]	; 0xa8
 8017854:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8017858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801785c:	bf1c      	itt	ne
 801785e:	ee2e 5a05 	vmulne.f32	s10, s28, s10
 8017862:	ee77 7a85 	vaddne.f32	s15, s15, s10
 8017866:	eeb5 da40 	vcmp.f32	s26, #0.0
 801786a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801786e:	d00a      	beq.n	8017886 <m_kalman_3gyro.isra.9.constprop.47+0x284e>
 8017870:	ed9a 5a2b 	vldr	s10, [sl, #172]	; 0xac
 8017874:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8017878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801787c:	bf1c      	itt	ne
 801787e:	ee2d 5a05 	vmulne.f32	s10, s26, s10
 8017882:	ee77 7a85 	vaddne.f32	s15, s15, s10
 8017886:	eef5 5a40 	vcmp.f32	s11, #0.0
 801788a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801788e:	d00a      	beq.n	80178a6 <m_kalman_3gyro.isra.9.constprop.47+0x286e>
 8017890:	ed9a 5a2c 	vldr	s10, [sl, #176]	; 0xb0
 8017894:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8017898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801789c:	bf1c      	itt	ne
 801789e:	ee25 5a25 	vmulne.f32	s10, s10, s11
 80178a2:	ee77 7a85 	vaddne.f32	s15, s15, s10
 80178a6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80178aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178ae:	d00a      	beq.n	80178c6 <m_kalman_3gyro.isra.9.constprop.47+0x288e>
 80178b0:	ed9a 5a2d 	vldr	s10, [sl, #180]	; 0xb4
 80178b4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80178b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178bc:	bf1c      	itt	ne
 80178be:	ee25 5a06 	vmulne.f32	s10, s10, s12
 80178c2:	ee77 7a85 	vaddne.f32	s15, s15, s10
 80178c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80178ca:	9a02      	ldr	r2, [sp, #8]
 80178cc:	edc2 7a00 	vstr	s15, [r2]
 80178d0:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80178d4:	2100      	movs	r1, #0
 80178d6:	4648      	mov	r0, r9
 80178d8:	930c      	str	r3, [sp, #48]	; 0x30
 80178da:	edcd 5a0b 	vstr	s11, [sp, #44]	; 0x2c
 80178de:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 80178e2:	edcd 6a08 	vstr	s13, [sp, #32]
 80178e6:	f007 fa46 	bl	801ed76 <memset>
 80178ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178ec:	eddd 5a0b 	vldr	s11, [sp, #44]	; 0x2c
 80178f0:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 80178f4:	eddd 6a08 	vldr	s13, [sp, #32]
 80178f8:	464d      	mov	r5, r9
 80178fa:	a966      	add	r1, sp, #408	; 0x198
 80178fc:	464a      	mov	r2, r9
 80178fe:	ecf1 7a01 	vldmia	r1!, {s15}
 8017902:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801790a:	d074      	beq.n	80179f6 <m_kalman_3gyro.isra.9.constprop.47+0x29be>
 801790c:	eef5 ea40 	vcmp.f32	s29, #0.0
 8017910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017914:	d007      	beq.n	8017926 <m_kalman_3gyro.isra.9.constprop.47+0x28ee>
 8017916:	ed92 5a00 	vldr	s10, [r2]
 801791a:	ee27 7aae 	vmul.f32	s14, s15, s29
 801791e:	ee35 7a07 	vadd.f32	s14, s10, s14
 8017922:	ed82 7a00 	vstr	s14, [r2]
 8017926:	eef5 da40 	vcmp.f32	s27, #0.0
 801792a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801792e:	d007      	beq.n	8017940 <m_kalman_3gyro.isra.9.constprop.47+0x2908>
 8017930:	ed92 5a09 	vldr	s10, [r2, #36]	; 0x24
 8017934:	ee2d 7aa7 	vmul.f32	s14, s27, s15
 8017938:	ee35 7a07 	vadd.f32	s14, s10, s14
 801793c:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 8017940:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017948:	d007      	beq.n	801795a <m_kalman_3gyro.isra.9.constprop.47+0x2922>
 801794a:	ed92 5a12 	vldr	s10, [r2, #72]	; 0x48
 801794e:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8017952:	ee35 7a07 	vadd.f32	s14, s10, s14
 8017956:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
 801795a:	eef5 fa40 	vcmp.f32	s31, #0.0
 801795e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017962:	d007      	beq.n	8017974 <m_kalman_3gyro.isra.9.constprop.47+0x293c>
 8017964:	ed92 5a1b 	vldr	s10, [r2, #108]	; 0x6c
 8017968:	ee27 7aaf 	vmul.f32	s14, s15, s31
 801796c:	ee35 7a07 	vadd.f32	s14, s10, s14
 8017970:	ed82 7a1b 	vstr	s14, [r2, #108]	; 0x6c
 8017974:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8017978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801797c:	d007      	beq.n	801798e <m_kalman_3gyro.isra.9.constprop.47+0x2956>
 801797e:	ed92 5a24 	vldr	s10, [r2, #144]	; 0x90
 8017982:	ee27 7a8f 	vmul.f32	s14, s15, s30
 8017986:	ee35 7a07 	vadd.f32	s14, s10, s14
 801798a:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
 801798e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8017992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017996:	d007      	beq.n	80179a8 <m_kalman_3gyro.isra.9.constprop.47+0x2970>
 8017998:	ed92 5a2d 	vldr	s10, [r2, #180]	; 0xb4
 801799c:	ee2e 7a27 	vmul.f32	s14, s28, s15
 80179a0:	ee35 7a07 	vadd.f32	s14, s10, s14
 80179a4:	ed82 7a2d 	vstr	s14, [r2, #180]	; 0xb4
 80179a8:	eeb5 da40 	vcmp.f32	s26, #0.0
 80179ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179b0:	d007      	beq.n	80179c2 <m_kalman_3gyro.isra.9.constprop.47+0x298a>
 80179b2:	ed92 5a36 	vldr	s10, [r2, #216]	; 0xd8
 80179b6:	ee2d 7a27 	vmul.f32	s14, s26, s15
 80179ba:	ee35 7a07 	vadd.f32	s14, s10, s14
 80179be:	ed82 7a36 	vstr	s14, [r2, #216]	; 0xd8
 80179c2:	eef5 5a40 	vcmp.f32	s11, #0.0
 80179c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179ca:	d007      	beq.n	80179dc <m_kalman_3gyro.isra.9.constprop.47+0x29a4>
 80179cc:	ed92 5a3f 	vldr	s10, [r2, #252]	; 0xfc
 80179d0:	ee27 7aa5 	vmul.f32	s14, s15, s11
 80179d4:	ee35 7a07 	vadd.f32	s14, s10, s14
 80179d8:	ed82 7a3f 	vstr	s14, [r2, #252]	; 0xfc
 80179dc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80179e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179e4:	d007      	beq.n	80179f6 <m_kalman_3gyro.isra.9.constprop.47+0x29be>
 80179e6:	ed92 7a48 	vldr	s14, [r2, #288]	; 0x120
 80179ea:	ee67 7a86 	vmul.f32	s15, s15, s12
 80179ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80179f2:	edc2 7a48 	vstr	s15, [r2, #288]	; 0x120
 80179f6:	42a1      	cmp	r1, r4
 80179f8:	f102 0204 	add.w	r2, r2, #4
 80179fc:	f47f af7f 	bne.w	80178fe <m_kalman_3gyro.isra.9.constprop.47+0x28c6>
 8017a00:	f8df e5a4 	ldr.w	lr, [pc, #1444]	; 8017fa8 <m_kalman_3gyro.isra.9.constprop.47+0x2f70>
 8017a04:	4648      	mov	r0, r9
 8017a06:	2100      	movs	r1, #0
 8017a08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017a0c:	fb8e c201 	smull	ip, r2, lr, r1
 8017a10:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8017a14:	ebcc 02a2 	rsb	r2, ip, r2, asr #2
 8017a18:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8017a1c:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8017a20:	edd0 7a00 	vldr	s15, [r0]
 8017a24:	f040 81f7 	bne.w	8017e16 <m_kalman_3gyro.isra.9.constprop.47+0x2dde>
 8017a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017a2c:	3101      	adds	r1, #1
 8017a2e:	2951      	cmp	r1, #81	; 0x51
 8017a30:	ece0 7a01 	vstmia	r0!, {s15}
 8017a34:	d1ea      	bne.n	8017a0c <m_kalman_3gyro.isra.9.constprop.47+0x29d4>
 8017a36:	4619      	mov	r1, r3
 8017a38:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8017a3c:	4658      	mov	r0, fp
 8017a3e:	9308      	str	r3, [sp, #32]
 8017a40:	f007 f98e 	bl	801ed60 <memcpy>
 8017a44:	9b08      	ldr	r3, [sp, #32]
 8017a46:	2100      	movs	r1, #0
 8017a48:	4618      	mov	r0, r3
 8017a4a:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8017a4e:	f007 f992 	bl	801ed76 <memset>
 8017a52:	a8fb      	add	r0, sp, #1004	; 0x3ec
 8017a54:	f50d 61ca 	add.w	r1, sp, #1616	; 0x650
 8017a58:	ecf5 2a01 	vldmia	r5!, {s5}
 8017a5c:	ed95 3a08 	vldr	s6, [r5, #32]
 8017a60:	edd5 3a11 	vldr	s7, [r5, #68]	; 0x44
 8017a64:	ed95 4a1a 	vldr	s8, [r5, #104]	; 0x68
 8017a68:	edd5 4a23 	vldr	s9, [r5, #140]	; 0x8c
 8017a6c:	ed95 5a2c 	vldr	s10, [r5, #176]	; 0xb0
 8017a70:	edd5 5a35 	vldr	s11, [r5, #212]	; 0xd4
 8017a74:	ed95 6a3e 	vldr	s12, [r5, #248]	; 0xf8
 8017a78:	edd5 6a47 	vldr	s13, [r5, #284]	; 0x11c
 8017a7c:	465b      	mov	r3, fp
 8017a7e:	4632      	mov	r2, r6
 8017a80:	eef5 2a40 	vcmp.f32	s5, #0.0
 8017a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a88:	d00e      	beq.n	8017aa8 <m_kalman_3gyro.isra.9.constprop.47+0x2a70>
 8017a8a:	edd3 7a00 	vldr	s15, [r3]
 8017a8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a96:	d007      	beq.n	8017aa8 <m_kalman_3gyro.isra.9.constprop.47+0x2a70>
 8017a98:	ed92 7a00 	vldr	s14, [r2]
 8017a9c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8017aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017aa4:	edc2 7a00 	vstr	s15, [r2]
 8017aa8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8017aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ab0:	d00e      	beq.n	8017ad0 <m_kalman_3gyro.isra.9.constprop.47+0x2a98>
 8017ab2:	edd3 7a01 	vldr	s15, [r3, #4]
 8017ab6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017abe:	d007      	beq.n	8017ad0 <m_kalman_3gyro.isra.9.constprop.47+0x2a98>
 8017ac0:	ed92 7a00 	vldr	s14, [r2]
 8017ac4:	ee67 7a83 	vmul.f32	s15, s15, s6
 8017ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017acc:	edc2 7a00 	vstr	s15, [r2]
 8017ad0:	eef5 3a40 	vcmp.f32	s7, #0.0
 8017ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ad8:	d00e      	beq.n	8017af8 <m_kalman_3gyro.isra.9.constprop.47+0x2ac0>
 8017ada:	edd3 7a02 	vldr	s15, [r3, #8]
 8017ade:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ae6:	d007      	beq.n	8017af8 <m_kalman_3gyro.isra.9.constprop.47+0x2ac0>
 8017ae8:	ed92 7a00 	vldr	s14, [r2]
 8017aec:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8017af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017af4:	edc2 7a00 	vstr	s15, [r2]
 8017af8:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8017afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b00:	d00e      	beq.n	8017b20 <m_kalman_3gyro.isra.9.constprop.47+0x2ae8>
 8017b02:	edd3 7a03 	vldr	s15, [r3, #12]
 8017b06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b0e:	d007      	beq.n	8017b20 <m_kalman_3gyro.isra.9.constprop.47+0x2ae8>
 8017b10:	ed92 7a00 	vldr	s14, [r2]
 8017b14:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017b1c:	edc2 7a00 	vstr	s15, [r2]
 8017b20:	eef5 4a40 	vcmp.f32	s9, #0.0
 8017b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b28:	d00e      	beq.n	8017b48 <m_kalman_3gyro.isra.9.constprop.47+0x2b10>
 8017b2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8017b2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b36:	d007      	beq.n	8017b48 <m_kalman_3gyro.isra.9.constprop.47+0x2b10>
 8017b38:	ed92 7a00 	vldr	s14, [r2]
 8017b3c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8017b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017b44:	edc2 7a00 	vstr	s15, [r2]
 8017b48:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8017b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b50:	d00e      	beq.n	8017b70 <m_kalman_3gyro.isra.9.constprop.47+0x2b38>
 8017b52:	edd3 7a05 	vldr	s15, [r3, #20]
 8017b56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b5e:	d007      	beq.n	8017b70 <m_kalman_3gyro.isra.9.constprop.47+0x2b38>
 8017b60:	ed92 7a00 	vldr	s14, [r2]
 8017b64:	ee65 7a27 	vmul.f32	s15, s10, s15
 8017b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017b6c:	edc2 7a00 	vstr	s15, [r2]
 8017b70:	eef5 5a40 	vcmp.f32	s11, #0.0
 8017b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b78:	d00e      	beq.n	8017b98 <m_kalman_3gyro.isra.9.constprop.47+0x2b60>
 8017b7a:	edd3 7a06 	vldr	s15, [r3, #24]
 8017b7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b86:	d007      	beq.n	8017b98 <m_kalman_3gyro.isra.9.constprop.47+0x2b60>
 8017b88:	ed92 7a00 	vldr	s14, [r2]
 8017b8c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8017b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017b94:	edc2 7a00 	vstr	s15, [r2]
 8017b98:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8017b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ba0:	d00e      	beq.n	8017bc0 <m_kalman_3gyro.isra.9.constprop.47+0x2b88>
 8017ba2:	edd3 7a07 	vldr	s15, [r3, #28]
 8017ba6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bae:	d007      	beq.n	8017bc0 <m_kalman_3gyro.isra.9.constprop.47+0x2b88>
 8017bb0:	ed92 7a00 	vldr	s14, [r2]
 8017bb4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8017bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017bbc:	edc2 7a00 	vstr	s15, [r2]
 8017bc0:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bc8:	d00e      	beq.n	8017be8 <m_kalman_3gyro.isra.9.constprop.47+0x2bb0>
 8017bca:	edd3 7a08 	vldr	s15, [r3, #32]
 8017bce:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bd6:	d007      	beq.n	8017be8 <m_kalman_3gyro.isra.9.constprop.47+0x2bb0>
 8017bd8:	ed92 7a00 	vldr	s14, [r2]
 8017bdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017be4:	edc2 7a00 	vstr	s15, [r2]
 8017be8:	3324      	adds	r3, #36	; 0x24
 8017bea:	4299      	cmp	r1, r3
 8017bec:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8017bf0:	f47f af46 	bne.w	8017a80 <m_kalman_3gyro.isra.9.constprop.47+0x2a48>
 8017bf4:	4285      	cmp	r5, r0
 8017bf6:	f106 0604 	add.w	r6, r6, #4
 8017bfa:	f47f af2d 	bne.w	8017a58 <m_kalman_3gyro.isra.9.constprop.47+0x2a20>
 8017bfe:	9b02      	ldr	r3, [sp, #8]
 8017c00:	ed84 8a00 	vstr	s16, [r4]
 8017c04:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8017c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c0c:	ed84 8a01 	vstr	s16, [r4, #4]
 8017c10:	edd3 7a00 	vldr	s15, [r3]
 8017c14:	f000 8116 	beq.w	8017e44 <m_kalman_3gyro.isra.9.constprop.47+0x2e0c>
 8017c18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c20:	f000 8110 	beq.w	8017e44 <m_kalman_3gyro.isra.9.constprop.47+0x2e0c>
 8017c24:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8017c28:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8017c2c:	ee3c ca08 	vadd.f32	s24, s24, s16
 8017c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c34:	ed84 ca00 	vstr	s24, [r4]
 8017c38:	f000 8199 	beq.w	8017f6e <m_kalman_3gyro.isra.9.constprop.47+0x2f36>
 8017c3c:	ee67 6a89 	vmul.f32	s13, s15, s18
 8017c40:	eef5 ba40 	vcmp.f32	s23, #0.0
 8017c44:	ee76 6a88 	vadd.f32	s13, s13, s16
 8017c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c4c:	edc4 6a01 	vstr	s13, [r4, #4]
 8017c50:	f000 8113 	beq.w	8017e7a <m_kalman_3gyro.isra.9.constprop.47+0x2e42>
 8017c54:	ee27 2aab 	vmul.f32	s4, s15, s23
 8017c58:	eef5 ca40 	vcmp.f32	s25, #0.0
 8017c5c:	ee32 2a08 	vadd.f32	s4, s4, s16
 8017c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c64:	ed84 2a02 	vstr	s4, [r4, #8]
 8017c68:	f000 8117 	beq.w	8017e9a <m_kalman_3gyro.isra.9.constprop.47+0x2e62>
 8017c6c:	ee67 1aac 	vmul.f32	s3, s15, s25
 8017c70:	eef5 aa40 	vcmp.f32	s21, #0.0
 8017c74:	ee71 1a88 	vadd.f32	s3, s3, s16
 8017c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c7c:	edc4 1a03 	vstr	s3, [r4, #12]
 8017c80:	f000 8165 	beq.w	8017f4e <m_kalman_3gyro.isra.9.constprop.47+0x2f16>
 8017c84:	ee27 4aaa 	vmul.f32	s8, s15, s21
 8017c88:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8017c8c:	ee34 4a08 	vadd.f32	s8, s8, s16
 8017c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c94:	ed84 4a04 	vstr	s8, [r4, #16]
 8017c98:	f000 8112 	beq.w	8017ec0 <m_kalman_3gyro.isra.9.constprop.47+0x2e88>
 8017c9c:	ee27 6a8b 	vmul.f32	s12, s15, s22
 8017ca0:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8017ca4:	ee36 6a08 	vadd.f32	s12, s12, s16
 8017ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cac:	ed84 6a05 	vstr	s12, [r4, #20]
 8017cb0:	f000 8134 	beq.w	8017f1c <m_kalman_3gyro.isra.9.constprop.47+0x2ee4>
 8017cb4:	ee27 5a8a 	vmul.f32	s10, s15, s20
 8017cb8:	eef5 9a40 	vcmp.f32	s19, #0.0
 8017cbc:	ee35 5a08 	vadd.f32	s10, s10, s16
 8017cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cc4:	ed84 5a06 	vstr	s10, [r4, #24]
 8017cc8:	f000 8113 	beq.w	8017ef2 <m_kalman_3gyro.isra.9.constprop.47+0x2eba>
 8017ccc:	ee27 3aa9 	vmul.f32	s6, s15, s19
 8017cd0:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017cd4:	ee33 3a08 	vadd.f32	s6, s6, s16
 8017cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cdc:	ed84 3a07 	vstr	s6, [r4, #28]
 8017ce0:	f000 8117 	beq.w	8017f12 <m_kalman_3gyro.isra.9.constprop.47+0x2eda>
 8017ce4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8017ce8:	ee77 7a88 	vadd.f32	s15, s15, s16
 8017cec:	edda 8a25 	vldr	s17, [sl, #148]	; 0x94
 8017cf0:	ed9a 0a26 	vldr	s0, [sl, #152]	; 0x98
 8017cf4:	edda 0a27 	vldr	s1, [sl, #156]	; 0x9c
 8017cf8:	ed9a 1a28 	vldr	s2, [sl, #160]	; 0xa0
 8017cfc:	edda 3a29 	vldr	s7, [sl, #164]	; 0xa4
 8017d00:	edda 5a2a 	vldr	s11, [sl, #168]	; 0xa8
 8017d04:	edda 4a2b 	vldr	s9, [sl, #172]	; 0xac
 8017d08:	edda 2a2c 	vldr	s5, [sl, #176]	; 0xb0
 8017d0c:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 8017d10:	edc4 7a08 	vstr	s15, [r4, #32]
 8017d14:	ee38 ca8c 	vadd.f32	s24, s17, s24
 8017d18:	ee70 6a26 	vadd.f32	s13, s0, s13
 8017d1c:	ee30 2a82 	vadd.f32	s4, s1, s4
 8017d20:	ee71 1a21 	vadd.f32	s3, s2, s3
 8017d24:	ee33 4a84 	vadd.f32	s8, s7, s8
 8017d28:	ee35 6a86 	vadd.f32	s12, s11, s12
 8017d2c:	ee34 5a85 	vadd.f32	s10, s9, s10
 8017d30:	ee32 3a83 	vadd.f32	s6, s5, s6
 8017d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017d38:	ed8a ca25 	vstr	s24, [sl, #148]	; 0x94
 8017d3c:	edca 6a26 	vstr	s13, [sl, #152]	; 0x98
 8017d40:	ed8a 2a27 	vstr	s4, [sl, #156]	; 0x9c
 8017d44:	edca 1a28 	vstr	s3, [sl, #160]	; 0xa0
 8017d48:	ed8a 4a29 	vstr	s8, [sl, #164]	; 0xa4
 8017d4c:	ed8a 6a2a 	vstr	s12, [sl, #168]	; 0xa8
 8017d50:	ed8a 5a2b 	vstr	s10, [sl, #172]	; 0xac
 8017d54:	ed8a 3a2c 	vstr	s6, [sl, #176]	; 0xb0
 8017d58:	edca 7a2d 	vstr	s15, [sl, #180]	; 0xb4
 8017d5c:	f7ff bb62 	b.w	8017424 <m_kalman_3gyro.isra.9.constprop.47+0x23ec>
 8017d60:	4556      	cmp	r6, sl
 8017d62:	f6be a903 	bge.w	8015f6c <m_kalman_3gyro.isra.9.constprop.47+0xf34>
 8017d66:	ebaa 0206 	sub.w	r2, sl, r6
 8017d6a:	eb09 010c 	add.w	r1, r9, ip
 8017d6e:	4454      	add	r4, sl
 8017d70:	1ba4      	subs	r4, r4, r6
 8017d72:	f006 fff5 	bl	801ed60 <memcpy>
 8017d76:	4656      	mov	r6, sl
 8017d78:	f7fe b8f8 	b.w	8015f6c <m_kalman_3gyro.isra.9.constprop.47+0xf34>
 8017d7c:	ed9f 0b86 	vldr	d0, [pc, #536]	; 8017f98 <m_kalman_3gyro.isra.9.constprop.47+0x2f60>
 8017d80:	f7fe bbb5 	b.w	80164ee <m_kalman_3gyro.isra.9.constprop.47+0x14b6>
 8017d84:	f60a 03c8 	addw	r3, sl, #2248	; 0x8c8
 8017d88:	f60a 04c4 	addw	r4, sl, #2244	; 0x8c4
 8017d8c:	9302      	str	r3, [sp, #8]
 8017d8e:	f50a 650c 	add.w	r5, sl, #2240	; 0x8c0
 8017d92:	f60a 06bc 	addw	r6, sl, #2236	; 0x8bc
 8017d96:	f60a 07b8 	addw	r7, sl, #2232	; 0x8b8
 8017d9a:	f7fe ba1b 	b.w	80161d4 <m_kalman_3gyro.isra.9.constprop.47+0x119c>
 8017d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017da0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017da4:	edc3 7a00 	vstr	s15, [r3]
 8017da8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017daa:	edc3 7a00 	vstr	s15, [r3]
 8017dae:	f7fe bb42 	b.w	8016436 <m_kalman_3gyro.isra.9.constprop.47+0x13fe>
 8017db2:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 8017fa0 <m_kalman_3gyro.isra.9.constprop.47+0x2f68>
 8017db6:	f7fe bb9a 	b.w	80164ee <m_kalman_3gyro.isra.9.constprop.47+0x14b6>
 8017dba:	a9be      	add	r1, sp, #760	; 0x2f8
 8017dbc:	a8b1      	add	r0, sp, #708	; 0x2c4
 8017dbe:	eeb0 0a68 	vmov.f32	s0, s17
 8017dc2:	f7fe bb26 	b.w	8016412 <m_kalman_3gyro.isra.9.constprop.47+0x13da>
 8017dc6:	eef4 7a68 	vcmp.f32	s15, s17
 8017dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dce:	f43e a936 	beq.w	801603e <m_kalman_3gyro.isra.9.constprop.47+0x1006>
 8017dd2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017dd6:	eef4 7a66 	vcmp.f32	s15, s13
 8017dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dde:	f43e a92e 	beq.w	801603e <m_kalman_3gyro.isra.9.constprop.47+0x1006>
 8017de2:	eeb4 7a68 	vcmp.f32	s14, s17
 8017de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dea:	f43e a928 	beq.w	801603e <m_kalman_3gyro.isra.9.constprop.47+0x1006>
 8017dee:	eeb4 7a66 	vcmp.f32	s14, s13
 8017df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017df6:	f43e a922 	beq.w	801603e <m_kalman_3gyro.isra.9.constprop.47+0x1006>
 8017dfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017dfe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8017e02:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017e0a:	f7fe b91e 	b.w	801604a <m_kalman_3gyro.isra.9.constprop.47+0x1012>
 8017e0e:	eef0 7a65 	vmov.f32	s15, s11
 8017e12:	f7fe bc1a 	b.w	801664a <m_kalman_3gyro.isra.9.constprop.47+0x1612>
 8017e16:	ee78 7a67 	vsub.f32	s15, s16, s15
 8017e1a:	3101      	adds	r1, #1
 8017e1c:	2951      	cmp	r1, #81	; 0x51
 8017e1e:	ece0 7a01 	vstmia	r0!, {s15}
 8017e22:	f47f adf3 	bne.w	8017a0c <m_kalman_3gyro.isra.9.constprop.47+0x29d4>
 8017e26:	e606      	b.n	8017a36 <m_kalman_3gyro.isra.9.constprop.47+0x29fe>
 8017e28:	eddf 7a60 	vldr	s15, [pc, #384]	; 8017fac <m_kalman_3gyro.isra.9.constprop.47+0x2f74>
 8017e2c:	e403      	b.n	8017636 <m_kalman_3gyro.isra.9.constprop.47+0x25fe>
 8017e2e:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8017fac <m_kalman_3gyro.isra.9.constprop.47+0x2f74>
 8017e32:	e4c8      	b.n	80177c6 <m_kalman_3gyro.isra.9.constprop.47+0x278e>
 8017e34:	edd8 6a00 	vldr	s13, [r8]
 8017e38:	ed98 7a03 	vldr	s14, [r8, #12]
 8017e3c:	edd8 7a06 	vldr	s15, [r8, #24]
 8017e40:	f7ff bade 	b.w	8017400 <m_kalman_3gyro.isra.9.constprop.47+0x23c8>
 8017e44:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8017e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e4c:	d005      	beq.n	8017e5a <m_kalman_3gyro.isra.9.constprop.47+0x2e22>
 8017e4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e56:	f041 80d2 	bne.w	8018ffe <m_kalman_3gyro.isra.9.constprop.47+0x3fc6>
 8017e5a:	eef5 ba40 	vcmp.f32	s23, #0.0
 8017e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e62:	f000 83ed 	beq.w	8018640 <m_kalman_3gyro.isra.9.constprop.47+0x3608>
 8017e66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e6e:	eef0 6a48 	vmov.f32	s13, s16
 8017e72:	eeb0 ca48 	vmov.f32	s24, s16
 8017e76:	f47f aeed 	bne.w	8017c54 <m_kalman_3gyro.isra.9.constprop.47+0x2c1c>
 8017e7a:	eef5 ca40 	vcmp.f32	s25, #0.0
 8017e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e82:	ed84 8a02 	vstr	s16, [r4, #8]
 8017e86:	f000 8082 	beq.w	8017f8e <m_kalman_3gyro.isra.9.constprop.47+0x2f56>
 8017e8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e92:	eeb0 2a48 	vmov.f32	s4, s16
 8017e96:	f47f aee9 	bne.w	8017c6c <m_kalman_3gyro.isra.9.constprop.47+0x2c34>
 8017e9a:	eef5 aa40 	vcmp.f32	s21, #0.0
 8017e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ea2:	ed84 8a03 	vstr	s16, [r4, #12]
 8017ea6:	d050      	beq.n	8017f4a <m_kalman_3gyro.isra.9.constprop.47+0x2f12>
 8017ea8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017eb0:	f040 86a6 	bne.w	8018c00 <m_kalman_3gyro.isra.9.constprop.47+0x3bc8>
 8017eb4:	ed84 8a04 	vstr	s16, [r4, #16]
 8017eb8:	eeb0 4a48 	vmov.f32	s8, s16
 8017ebc:	eef0 1a48 	vmov.f32	s3, s16
 8017ec0:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8017ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ec8:	ed84 8a05 	vstr	s16, [r4, #20]
 8017ecc:	d024      	beq.n	8017f18 <m_kalman_3gyro.isra.9.constprop.47+0x2ee0>
 8017ece:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ed6:	f041 8059 	bne.w	8018f8c <m_kalman_3gyro.isra.9.constprop.47+0x3f54>
 8017eda:	eef5 9a40 	vcmp.f32	s19, #0.0
 8017ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ee2:	ed84 8a06 	vstr	s16, [r4, #24]
 8017ee6:	f041 808e 	bne.w	8019006 <m_kalman_3gyro.isra.9.constprop.47+0x3fce>
 8017eea:	eeb0 5a48 	vmov.f32	s10, s16
 8017eee:	eeb0 6a48 	vmov.f32	s12, s16
 8017ef2:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017efa:	ed84 8a07 	vstr	s16, [r4, #28]
 8017efe:	f000 81e0 	beq.w	80182c2 <m_kalman_3gyro.isra.9.constprop.47+0x328a>
 8017f02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f0a:	eeb0 3a48 	vmov.f32	s6, s16
 8017f0e:	f47f aee9 	bne.w	8017ce4 <m_kalman_3gyro.isra.9.constprop.47+0x2cac>
 8017f12:	eef0 7a48 	vmov.f32	s15, s16
 8017f16:	e6e9      	b.n	8017cec <m_kalman_3gyro.isra.9.constprop.47+0x2cb4>
 8017f18:	eeb0 6a48 	vmov.f32	s12, s16
 8017f1c:	eef5 9a40 	vcmp.f32	s19, #0.0
 8017f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f24:	ed84 8a06 	vstr	s16, [r4, #24]
 8017f28:	f000 8387 	beq.w	801863a <m_kalman_3gyro.isra.9.constprop.47+0x3602>
 8017f2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f34:	f040 8389 	bne.w	801864a <m_kalman_3gyro.isra.9.constprop.47+0x3612>
 8017f38:	ed84 8a07 	vstr	s16, [r4, #28]
 8017f3c:	eeb0 3a48 	vmov.f32	s6, s16
 8017f40:	eeb0 5a48 	vmov.f32	s10, s16
 8017f44:	eef0 7a48 	vmov.f32	s15, s16
 8017f48:	e6d0      	b.n	8017cec <m_kalman_3gyro.isra.9.constprop.47+0x2cb4>
 8017f4a:	eef0 1a48 	vmov.f32	s3, s16
 8017f4e:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8017f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f56:	ed84 8a04 	vstr	s16, [r4, #16]
 8017f5a:	f000 836b 	beq.w	8018634 <m_kalman_3gyro.isra.9.constprop.47+0x35fc>
 8017f5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f66:	eeb0 4a48 	vmov.f32	s8, s16
 8017f6a:	d0a9      	beq.n	8017ec0 <m_kalman_3gyro.isra.9.constprop.47+0x2e88>
 8017f6c:	e696      	b.n	8017c9c <m_kalman_3gyro.isra.9.constprop.47+0x2c64>
 8017f6e:	eef5 ba40 	vcmp.f32	s23, #0.0
 8017f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f76:	eef0 6a48 	vmov.f32	s13, s16
 8017f7a:	f47f ae6b 	bne.w	8017c54 <m_kalman_3gyro.isra.9.constprop.47+0x2c1c>
 8017f7e:	eef5 ca40 	vcmp.f32	s25, #0.0
 8017f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f86:	ed84 8a02 	vstr	s16, [r4, #8]
 8017f8a:	f47f af7e 	bne.w	8017e8a <m_kalman_3gyro.isra.9.constprop.47+0x2e52>
 8017f8e:	eeb0 2a48 	vmov.f32	s4, s16
 8017f92:	e782      	b.n	8017e9a <m_kalman_3gyro.isra.9.constprop.47+0x2e62>
 8017f94:	f3af 8000 	nop.w
 8017f98:	00000000 	.word	0x00000000
 8017f9c:	3ff00000 	.word	0x3ff00000
 8017fa0:	00000000 	.word	0x00000000
 8017fa4:	40140000 	.word	0x40140000
 8017fa8:	66666667 	.word	0x66666667
 8017fac:	00000000 	.word	0x00000000
 8017fb0:	ed9a 9a25 	vldr	s18, [sl, #148]	; 0x94
 8017fb4:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8017fac <m_kalman_3gyro.isra.9.constprop.47+0x2f74>
 8017fb8:	edda 8a26 	vldr	s17, [sl, #152]	; 0x98
 8017fbc:	ed9a 8a27 	vldr	s16, [sl, #156]	; 0x9c
 8017fc0:	ee69 7a09 	vmul.f32	s15, s18, s18
 8017fc4:	ee68 6aa8 	vmul.f32	s13, s17, s17
 8017fc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017fcc:	ee28 7a08 	vmul.f32	s14, s16, s16
 8017fd0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8017fd4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017fd8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8017fdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017fe0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fe8:	f340 87d4 	ble.w	8018f94 <m_kalman_3gyro.isra.9.constprop.47+0x3f5c>
 8017fec:	ee17 0a90 	vmov	r0, s15
 8017ff0:	f7e8 fab2 	bl	8000558 <__aeabi_f2d>
 8017ff4:	ec41 0b10 	vmov	d0, r0, r1
 8017ff8:	ed8d 9a42 	vstr	s18, [sp, #264]	; 0x108
 8017ffc:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 8018000:	ed8d 8a44 	vstr	s16, [sp, #272]	; 0x110
 8018004:	f004 fae8 	bl	801c5d8 <sqrt>
 8018008:	ec51 0b10 	vmov	r0, r1, d0
 801800c:	f7e8 fdf0 	bl	8000bf0 <__aeabi_d2f>
 8018010:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 8018014:	9045      	str	r0, [sp, #276]	; 0x114
 8018016:	4604      	mov	r4, r0
 8018018:	2b00      	cmp	r3, #0
 801801a:	f040 8105 	bne.w	8018228 <m_kalman_3gyro.isra.9.constprop.47+0x31f0>
 801801e:	f8dd 36c8 	ldr.w	r3, [sp, #1736]	; 0x6c8
 8018022:	9e06      	ldr	r6, [sp, #24]
 8018024:	789b      	ldrb	r3, [r3, #2]
 8018026:	2b00      	cmp	r3, #0
 8018028:	f000 87b8 	beq.w	8018f9c <m_kalman_3gyro.isra.9.constprop.47+0x3f64>
 801802c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8018030:	ad4e      	add	r5, sp, #312	; 0x138
 8018032:	af46      	add	r7, sp, #280	; 0x118
 8018034:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8018038:	eeb1 9a49 	vneg.f32	s18, s18
 801803c:	eef1 8a68 	vneg.f32	s17, s17
 8018040:	eeb1 8a48 	vneg.f32	s16, s16
 8018044:	4628      	mov	r0, r5
 8018046:	4632      	mov	r2, r6
 8018048:	4639      	mov	r1, r7
 801804a:	ed85 9a00 	vstr	s18, [r5]
 801804e:	edc5 8a01 	vstr	s17, [r5, #4]
 8018052:	ed85 8a02 	vstr	s16, [r5, #8]
 8018056:	60ec      	str	r4, [r5, #12]
 8018058:	f7f8 fd98 	bl	8010b8c <m_qmult_eml>
 801805c:	ed8d 9a46 	vstr	s18, [sp, #280]	; 0x118
 8018060:	edcd 8a47 	vstr	s17, [sp, #284]	; 0x11c
 8018064:	ed8d 8a48 	vstr	s16, [sp, #288]	; 0x120
 8018068:	9449      	str	r4, [sp, #292]	; 0x124
 801806a:	ab46      	add	r3, sp, #280	; 0x118
 801806c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801806e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8018072:	ed95 6a00 	vldr	s12, [r5]
 8018076:	ed95 7a01 	vldr	s14, [r5, #4]
 801807a:	edd5 7a02 	vldr	s15, [r5, #8]
 801807e:	edd5 6a03 	vldr	s13, [r5, #12]
 8018082:	ee26 6a06 	vmul.f32	s12, s12, s12
 8018086:	ee27 7a07 	vmul.f32	s14, s14, s14
 801808a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801808e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018092:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8018096:	ee77 7a87 	vadd.f32	s15, s15, s14
 801809a:	ac4a      	add	r4, sp, #296	; 0x128
 801809c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80180a0:	ee17 0a90 	vmov	r0, s15
 80180a4:	f7e8 fa58 	bl	8000558 <__aeabi_f2d>
 80180a8:	ec41 0b10 	vmov	d0, r0, r1
 80180ac:	f004 fa94 	bl	801c5d8 <sqrt>
 80180b0:	ec51 0b10 	vmov	r0, r1, d0
 80180b4:	f7e8 fd9c 	bl	8000bf0 <__aeabi_d2f>
 80180b8:	ed95 6a00 	vldr	s12, [r5]
 80180bc:	edd5 6a01 	vldr	s13, [r5, #4]
 80180c0:	ed95 7a02 	vldr	s14, [r5, #8]
 80180c4:	ed95 5a03 	vldr	s10, [r5, #12]
 80180c8:	9f06      	ldr	r7, [sp, #24]
 80180ca:	ee07 0a90 	vmov	s15, r0
 80180ce:	eec6 5a27 	vdiv.f32	s11, s12, s15
 80180d2:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80180d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80180da:	ee85 7a27 	vdiv.f32	s14, s10, s15
 80180de:	edcd 5a4a 	vstr	s11, [sp, #296]	; 0x128
 80180e2:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 80180e6:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 80180ea:	ed8d 7a4d 	vstr	s14, [sp, #308]	; 0x134
 80180ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80180f0:	f8dd 46e8 	ldr.w	r4, [sp, #1768]	; 0x6e8
 80180f4:	6020      	str	r0, [r4, #0]
 80180f6:	6061      	str	r1, [r4, #4]
 80180f8:	60a2      	str	r2, [r4, #8]
 80180fa:	60e3      	str	r3, [r4, #12]
 80180fc:	4638      	mov	r0, r7
 80180fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018100:	f7f8 fdac 	bl	8010c5c <m_q2dcm_eml>
 8018104:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8018108:	ac46      	add	r4, sp, #280	; 0x118
 801810a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801810e:	ed9d 6a46 	vldr	s12, [sp, #280]	; 0x118
 8018112:	ed9d 7a47 	vldr	s14, [sp, #284]	; 0x11c
 8018116:	eddd 7a48 	vldr	s15, [sp, #288]	; 0x120
 801811a:	eddd 6a49 	vldr	s13, [sp, #292]	; 0x124
 801811e:	ee26 6a06 	vmul.f32	s12, s12, s12
 8018122:	ee27 7a07 	vmul.f32	s14, s14, s14
 8018126:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801812a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801812e:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8018132:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018136:	f50a 7616 	add.w	r6, sl, #600	; 0x258
 801813a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801813e:	ee17 0a90 	vmov	r0, s15
 8018142:	f7e8 fa09 	bl	8000558 <__aeabi_f2d>
 8018146:	ec41 0b10 	vmov	d0, r0, r1
 801814a:	f004 fa45 	bl	801c5d8 <sqrt>
 801814e:	ec51 0b10 	vmov	r0, r1, d0
 8018152:	f7e8 fd4d 	bl	8000bf0 <__aeabi_d2f>
 8018156:	ed9d 6a46 	vldr	s12, [sp, #280]	; 0x118
 801815a:	eddd 6a47 	vldr	s13, [sp, #284]	; 0x11c
 801815e:	ed9d 7a48 	vldr	s14, [sp, #288]	; 0x120
 8018162:	ed9d 5a49 	vldr	s10, [sp, #292]	; 0x124
 8018166:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8018168:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801816a:	ee07 0a90 	vmov	s15, r0
 801816e:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8018172:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8018176:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801817a:	ee85 7a27 	vdiv.f32	s14, s10, s15
 801817e:	edc7 5a00 	vstr	s11, [r7]
 8018182:	ed87 6a01 	vstr	s12, [r7, #4]
 8018186:	edc7 6a02 	vstr	s13, [r7, #8]
 801818a:	ed87 7a03 	vstr	s14, [r7, #12]
 801818e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8018192:	f8dd 76e4 	ldr.w	r7, [sp, #1764]	; 0x6e4
 8018196:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801819a:	6821      	ldr	r1, [r4, #0]
 801819c:	6862      	ldr	r2, [r4, #4]
 801819e:	68a3      	ldr	r3, [r4, #8]
 80181a0:	68e0      	ldr	r0, [r4, #12]
 80181a2:	60e8      	str	r0, [r5, #12]
 80181a4:	3410      	adds	r4, #16
 80181a6:	42b4      	cmp	r4, r6
 80181a8:	6029      	str	r1, [r5, #0]
 80181aa:	606a      	str	r2, [r5, #4]
 80181ac:	60ab      	str	r3, [r5, #8]
 80181ae:	f105 0510 	add.w	r5, r5, #16
 80181b2:	d1f2      	bne.n	801819a <m_kalman_3gyro.isra.9.constprop.47+0x3162>
 80181b4:	6823      	ldr	r3, [r4, #0]
 80181b6:	602b      	str	r3, [r5, #0]
 80181b8:	f8dd 26f0 	ldr.w	r2, [sp, #1776]	; 0x6f0
 80181bc:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
 80181c0:	6013      	str	r3, [r2, #0]
 80181c2:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
 80181c6:	6053      	str	r3, [r2, #4]
 80181c8:	f8da 309c 	ldr.w	r3, [sl, #156]	; 0x9c
 80181cc:	6093      	str	r3, [r2, #8]
 80181ce:	f8da 30a0 	ldr.w	r3, [sl, #160]	; 0xa0
 80181d2:	60d3      	str	r3, [r2, #12]
 80181d4:	f8da 30a4 	ldr.w	r3, [sl, #164]	; 0xa4
 80181d8:	6113      	str	r3, [r2, #16]
 80181da:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 80181de:	6153      	str	r3, [r2, #20]
 80181e0:	f8da 30ac 	ldr.w	r3, [sl, #172]	; 0xac
 80181e4:	6193      	str	r3, [r2, #24]
 80181e6:	f8da 30b0 	ldr.w	r3, [sl, #176]	; 0xb0
 80181ea:	61d3      	str	r3, [r2, #28]
 80181ec:	f8da 30b4 	ldr.w	r3, [sl, #180]	; 0xb4
 80181f0:	6213      	str	r3, [r2, #32]
 80181f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80181f4:	f8dd 26ec 	ldr.w	r2, [sp, #1772]	; 0x6ec
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	6013      	str	r3, [r2, #0]
 80181fc:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 8018200:	ecbd 8b10 	vpop	{d8-d15}
 8018204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018208:	2300      	movs	r3, #0
 801820a:	f88a 31ff 	strb.w	r3, [sl, #511]	; 0x1ff
 801820e:	f88a 3200 	strb.w	r3, [sl, #512]	; 0x200
 8018212:	f88a 3201 	strb.w	r3, [sl, #513]	; 0x201
 8018216:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 801821a:	f88a 3206 	strb.w	r3, [sl, #518]	; 0x206
 801821e:	f7ff b899 	b.w	8017354 <m_kalman_3gyro.isra.9.constprop.47+0x231c>
 8018222:	2301      	movs	r3, #1
 8018224:	f7ff b80b 	b.w	801723e <m_kalman_3gyro.isra.9.constprop.47+0x2206>
 8018228:	f8dd 16e8 	ldr.w	r1, [sp, #1768]	; 0x6e8
 801822c:	9806      	ldr	r0, [sp, #24]
 801822e:	2300      	movs	r3, #0
 8018230:	600b      	str	r3, [r1, #0]
 8018232:	f8dd 16e8 	ldr.w	r1, [sp, #1768]	; 0x6e8
 8018236:	6003      	str	r3, [r0, #0]
 8018238:	604b      	str	r3, [r1, #4]
 801823a:	f8dd 16e8 	ldr.w	r1, [sp, #1768]	; 0x6e8
 801823e:	6043      	str	r3, [r0, #4]
 8018240:	608b      	str	r3, [r1, #8]
 8018242:	6083      	str	r3, [r0, #8]
 8018244:	f8dd 36e8 	ldr.w	r3, [sp, #1768]	; 0x6e8
 8018248:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801824c:	60c2      	str	r2, [r0, #12]
 801824e:	60da      	str	r2, [r3, #12]
 8018250:	4607      	mov	r7, r0
 8018252:	e753      	b.n	80180fc <m_kalman_3gyro.isra.9.constprop.47+0x30c4>
 8018254:	2300      	movs	r3, #0
 8018256:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 801825a:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 801825e:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8018262:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 8018266:	f7fe be16 	b.w	8016e96 <m_kalman_3gyro.isra.9.constprop.47+0x1e5e>
 801826a:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 801826e:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
 8018272:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 8018276:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
 801827a:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 801827e:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 8018282:	f88a 1202 	strb.w	r1, [sl, #514]	; 0x202
 8018286:	f88a 1203 	strb.w	r1, [sl, #515]	; 0x203
 801828a:	f88a 1204 	strb.w	r1, [sl, #516]	; 0x204
 801828e:	f8ca 145c 	str.w	r1, [sl, #1116]	; 0x45c
 8018292:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8018296:	2b00      	cmp	r3, #0
 8018298:	f000 81c9 	beq.w	801862e <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 801829c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80182a0:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 80182a4:	ac81      	add	r4, sp, #516	; 0x204
 80182a6:	f7fe bdd9 	b.w	8016e5c <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 80182aa:	eddd ba5e 	vldr	s23, [sp, #376]	; 0x178
 80182ae:	eef4 aaeb 	vcmpe.f32	s21, s23
 80182b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182b6:	f2c0 81f5 	blt.w	80186a4 <m_kalman_3gyro.isra.9.constprop.47+0x366c>
 80182ba:	ed9d aa65 	vldr	s20, [sp, #404]	; 0x194
 80182be:	f7fe bc2e 	b.w	8016b1e <m_kalman_3gyro.isra.9.constprop.47+0x1ae6>
 80182c2:	eeb0 3a48 	vmov.f32	s6, s16
 80182c6:	eef0 7a48 	vmov.f32	s15, s16
 80182ca:	e50f      	b.n	8017cec <m_kalman_3gyro.isra.9.constprop.47+0x2cb4>
 80182cc:	4be4      	ldr	r3, [pc, #912]	; (8018660 <m_kalman_3gyro.isra.9.constprop.47+0x3628>)
 80182ce:	f893 3430 	ldrb.w	r3, [r3, #1072]	; 0x430
 80182d2:	2b04      	cmp	r3, #4
 80182d4:	f240 82e3 	bls.w	801889e <m_kalman_3gyro.isra.9.constprop.47+0x3866>
 80182d8:	4be2      	ldr	r3, [pc, #904]	; (8018664 <m_kalman_3gyro.isra.9.constprop.47+0x362c>)
 80182da:	ed9f 4ae3 	vldr	s8, [pc, #908]	; 8018668 <m_kalman_3gyro.isra.9.constprop.47+0x3630>
 80182de:	ed93 1a04 	vldr	s2, [r3, #16]
 80182e2:	ed93 3a06 	vldr	s6, [r3, #24]
 80182e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80182ea:	eddf 5ae0 	vldr	s11, [pc, #896]	; 801866c <m_kalman_3gyro.isra.9.constprop.47+0x3634>
 80182ee:	edd3 3a12 	vldr	s7, [r3, #72]	; 0x48
 80182f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80182f6:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 80182fa:	ed83 7a00 	vstr	s14, [r3]
 80182fe:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8018302:	ed83 1a01 	vstr	s2, [r3, #4]
 8018306:	ee61 9a04 	vmul.f32	s19, s2, s8
 801830a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801830e:	ee23 1a25 	vmul.f32	s2, s6, s11
 8018312:	edd3 aa05 	vldr	s21, [r3, #20]
 8018316:	edd3 4a08 	vldr	s9, [r3, #32]
 801831a:	ed93 2a0a 	vldr	s4, [r3, #40]	; 0x28
 801831e:	edd2 0a04 	vldr	s1, [r2, #16]
 8018322:	ed92 aa05 	vldr	s20, [r2, #20]
 8018326:	ed92 0a07 	vldr	s0, [r2, #28]
 801832a:	edd3 1a09 	vldr	s3, [r3, #36]	; 0x24
 801832e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8018332:	edd2 2a08 	vldr	s5, [r2, #32]
 8018336:	ed92 5a09 	vldr	s10, [r2, #36]	; 0x24
 801833a:	edc2 3a00 	vstr	s7, [r2]
 801833e:	ed83 3a03 	vstr	s6, [r3, #12]
 8018342:	edc3 7a04 	vstr	s15, [r3, #16]
 8018346:	ee23 3a84 	vmul.f32	s6, s7, s8
 801834a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801834e:	ee66 3a25 	vmul.f32	s7, s12, s11
 8018352:	ee37 7a01 	vadd.f32	s14, s14, s2
 8018356:	ed9f 1ac6 	vldr	s2, [pc, #792]	; 8018670 <m_kalman_3gyro.isra.9.constprop.47+0x3638>
 801835a:	edc2 0a01 	vstr	s1, [r2, #4]
 801835e:	ed82 aa02 	vstr	s20, [r2, #8]
 8018362:	ed82 0a04 	vstr	s0, [r2, #16]
 8018366:	edc2 2a05 	vstr	s5, [r2, #20]
 801836a:	ed82 5a06 	vstr	s10, [r2, #24]
 801836e:	edc3 aa02 	vstr	s21, [r3, #8]
 8018372:	edc3 4a05 	vstr	s9, [r3, #20]
 8018376:	edc3 1a06 	vstr	s3, [r3, #24]
 801837a:	ed83 2a07 	vstr	s4, [r3, #28]
 801837e:	edc3 6a08 	vstr	s13, [r3, #32]
 8018382:	ed82 6a03 	vstr	s12, [r2, #12]
 8018386:	ee6a aa84 	vmul.f32	s21, s21, s8
 801838a:	ed92 6a0a 	vldr	s12, [r2, #40]	; 0x28
 801838e:	ed93 ba0d 	vldr	s22, [r3, #52]	; 0x34
 8018392:	9808      	ldr	r0, [sp, #32]
 8018394:	9c07      	ldr	r4, [sp, #28]
 8018396:	ed82 6a07 	vstr	s12, [r2, #28]
 801839a:	ee60 0a84 	vmul.f32	s1, s1, s8
 801839e:	ee2a aa04 	vmul.f32	s20, s20, s8
 80183a2:	ee62 2aa5 	vmul.f32	s5, s5, s11
 80183a6:	ee20 4a25 	vmul.f32	s8, s0, s11
 80183aa:	ee25 5a01 	vmul.f32	s10, s10, s2
 80183ae:	ee79 9aa7 	vadd.f32	s19, s19, s15
 80183b2:	ee64 4aa5 	vmul.f32	s9, s9, s11
 80183b6:	ee62 7a01 	vmul.f32	s15, s4, s2
 80183ba:	edd2 5a0c 	vldr	s11, [r2, #48]	; 0x30
 80183be:	ed9f 2aad 	vldr	s4, [pc, #692]	; 8018674 <m_kalman_3gyro.isra.9.constprop.47+0x363c>
 80183c2:	edc2 5a09 	vstr	s11, [r2, #36]	; 0x24
 80183c6:	ee61 1a81 	vmul.f32	s3, s3, s2
 80183ca:	ee73 3a23 	vadd.f32	s7, s6, s7
 80183ce:	ed93 3a0c 	vldr	s6, [r3, #48]	; 0x30
 80183d2:	ed83 ba0a 	vstr	s22, [r3, #40]	; 0x28
 80183d6:	ed83 3a09 	vstr	s6, [r3, #36]	; 0x24
 80183da:	ee30 0a84 	vadd.f32	s0, s1, s8
 80183de:	ee7a 4aa4 	vadd.f32	s9, s21, s9
 80183e2:	ed93 4a0e 	vldr	s8, [r3, #56]	; 0x38
 80183e6:	edd0 0a01 	vldr	s1, [r0, #4]
 80183ea:	edd0 aa00 	vldr	s21, [r0]
 80183ee:	edc3 0a0d 	vstr	s1, [r3, #52]	; 0x34
 80183f2:	ee77 1a21 	vadd.f32	s3, s14, s3
 80183f6:	ee23 3a02 	vmul.f32	s6, s6, s4
 80183fa:	ee3a 7a22 	vadd.f32	s14, s20, s5
 80183fe:	ee73 3a85 	vadd.f32	s7, s7, s10
 8018402:	ed94 aa00 	vldr	s20, [r4]
 8018406:	edd2 2a0b 	vldr	s5, [r2, #44]	; 0x2c
 801840a:	edc3 aa0c 	vstr	s21, [r3, #48]	; 0x30
 801840e:	ee2b 5a02 	vmul.f32	s10, s22, s4
 8018412:	ee65 5a82 	vmul.f32	s11, s11, s4
 8018416:	ee79 9aa7 	vadd.f32	s19, s19, s15
 801841a:	ee66 6a81 	vmul.f32	s13, s13, s2
 801841e:	eddf 7a96 	vldr	s15, [pc, #600]	; 8018678 <m_kalman_3gyro.isra.9.constprop.47+0x3640>
 8018422:	ed82 aa0c 	vstr	s20, [r2, #48]	; 0x30
 8018426:	ee24 ba02 	vmul.f32	s22, s8, s4
 801842a:	ee71 ba83 	vadd.f32	s23, s3, s6
 801842e:	ee79 9a85 	vadd.f32	s19, s19, s10
 8018432:	edd0 1a02 	vldr	s3, [r0, #8]
 8018436:	ed92 5a0d 	vldr	s10, [r2, #52]	; 0x34
 801843a:	ed83 4a0b 	vstr	s8, [r3, #44]	; 0x2c
 801843e:	ee20 3aa7 	vmul.f32	s6, s1, s15
 8018442:	ee74 6aa6 	vadd.f32	s13, s9, s13
 8018446:	ee26 6a01 	vmul.f32	s12, s12, s2
 801844a:	ee73 4aa5 	vadd.f32	s9, s7, s11
 801844e:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8018452:	ee2a aa27 	vmul.f32	s20, s20, s15
 8018456:	ee39 3a83 	vadd.f32	s6, s19, s6
 801845a:	ee61 0aa7 	vmul.f32	s1, s3, s15
 801845e:	ee22 1a81 	vmul.f32	s2, s5, s2
 8018462:	edd4 5a01 	vldr	s11, [r4, #4]
 8018466:	ed82 5a0a 	vstr	s10, [r2, #40]	; 0x28
 801846a:	ee7b 3aaa 	vadd.f32	s7, s23, s21
 801846e:	ee74 4a8a 	vadd.f32	s9, s9, s20
 8018472:	ee25 5a02 	vmul.f32	s10, s10, s4
 8018476:	ee30 6a06 	vadd.f32	s12, s0, s12
 801847a:	ee76 6a8b 	vadd.f32	s13, s13, s22
 801847e:	ed92 0a0e 	vldr	s0, [r2, #56]	; 0x38
 8018482:	edc2 5a0d 	vstr	s11, [r2, #52]	; 0x34
 8018486:	ee20 2a02 	vmul.f32	s4, s0, s4
 801848a:	ee14 0a90 	vmov	r0, s9
 801848e:	ee76 6aa0 	vadd.f32	s13, s13, s1
 8018492:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8018496:	ee63 0a03 	vmul.f32	s1, s6, s6
 801849a:	ee37 7a01 	vadd.f32	s14, s14, s2
 801849e:	ee36 6a05 	vadd.f32	s12, s12, s10
 80184a2:	ed94 1a02 	vldr	s2, [r4, #8]
 80184a6:	edc3 1a0e 	vstr	s3, [r3, #56]	; 0x38
 80184aa:	461c      	mov	r4, r3
 80184ac:	ee23 5aa3 	vmul.f32	s10, s7, s7
 80184b0:	4619      	mov	r1, r3
 80184b2:	ee37 7a02 	vadd.f32	s14, s14, s4
 80184b6:	ee36 6a25 	vadd.f32	s12, s12, s11
 80184ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 80184be:	ee75 5a20 	vadd.f32	s11, s10, s1
 80184c2:	f844 0f84 	str.w	r0, [r4, #132]!
 80184c6:	ee26 5aa6 	vmul.f32	s10, s13, s13
 80184ca:	ee13 0a90 	vmov	r0, s7
 80184ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80184d2:	f841 0f78 	str.w	r0, [r1, #120]!
 80184d6:	ee35 7a25 	vadd.f32	s14, s10, s11
 80184da:	ed81 3a01 	vstr	s6, [r1, #4]
 80184de:	ed82 1a0e 	vstr	s2, [r2, #56]	; 0x38
 80184e2:	edc1 6a02 	vstr	s13, [r1, #8]
 80184e6:	ee17 0a10 	vmov	r0, s14
 80184ea:	ed82 0a0b 	vstr	s0, [r2, #44]	; 0x2c
 80184ee:	edc2 2a08 	vstr	s5, [r2, #32]
 80184f2:	ed84 6a01 	vstr	s12, [r4, #4]
 80184f6:	edc4 7a02 	vstr	s15, [r4, #8]
 80184fa:	f7e8 f82d 	bl	8000558 <__aeabi_f2d>
 80184fe:	ec41 0b10 	vmov	d0, r0, r1
 8018502:	f004 f869 	bl	801c5d8 <sqrt>
 8018506:	edd4 7a00 	vldr	s15, [r4]
 801850a:	edd4 6a01 	vldr	s13, [r4, #4]
 801850e:	ed94 7a02 	vldr	s14, [r4, #8]
 8018512:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8018516:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801851a:	ee27 7a07 	vmul.f32	s14, s14, s14
 801851e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018522:	ec57 6b10 	vmov	r6, r7, d0
 8018526:	ee77 7a27 	vadd.f32	s15, s14, s15
 801852a:	ee17 0a90 	vmov	r0, s15
 801852e:	f7e8 f813 	bl	8000558 <__aeabi_f2d>
 8018532:	ec41 0b10 	vmov	d0, r0, r1
 8018536:	f004 f84f 	bl	801c5d8 <sqrt>
 801853a:	ec51 0b10 	vmov	r0, r1, d0
 801853e:	f7e8 fb57 	bl	8000bf0 <__aeabi_d2f>
 8018542:	4639      	mov	r1, r7
 8018544:	ee09 0a90 	vmov	s19, r0
 8018548:	4630      	mov	r0, r6
 801854a:	f7e8 fb51 	bl	8000bf0 <__aeabi_d2f>
 801854e:	ee07 0a90 	vmov	s15, r0
 8018552:	eeb4 dae7 	vcmpe.f32	s26, s15
 8018556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801855a:	dd68      	ble.n	801862e <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 801855c:	eeb4 fae9 	vcmpe.f32	s30, s19
 8018560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018564:	dd63      	ble.n	801862e <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 8018566:	9b07      	ldr	r3, [sp, #28]
 8018568:	ed93 7a00 	vldr	s14, [r3]
 801856c:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8018570:	eeb0 7ac7 	vabs.f32	s14, s14
 8018574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801857c:	d557      	bpl.n	801862e <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 801857e:	ed93 7a01 	vldr	s14, [r3, #4]
 8018582:	eeb0 7ac7 	vabs.f32	s14, s14
 8018586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801858a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801858e:	d54e      	bpl.n	801862e <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 8018590:	ed93 7a02 	vldr	s14, [r3, #8]
 8018594:	eeb0 7ac7 	vabs.f32	s14, s14
 8018598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801859c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185a0:	d545      	bpl.n	801862e <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 80185a2:	9b08      	ldr	r3, [sp, #32]
 80185a4:	edd3 7a00 	vldr	s15, [r3]
 80185a8:	eef0 7ae7 	vabs.f32	s15, s15
 80185ac:	ee17 0a90 	vmov	r0, s15
 80185b0:	f7e7 ffd2 	bl	8000558 <__aeabi_f2d>
 80185b4:	a328      	add	r3, pc, #160	; (adr r3, 8018658 <m_kalman_3gyro.isra.9.constprop.47+0x3620>)
 80185b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185ba:	f7e8 fa93 	bl	8000ae4 <__aeabi_dcmplt>
 80185be:	b3b0      	cbz	r0, 801862e <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 80185c0:	9b08      	ldr	r3, [sp, #32]
 80185c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80185c6:	eef0 7ae7 	vabs.f32	s15, s15
 80185ca:	ee17 0a90 	vmov	r0, s15
 80185ce:	f7e7 ffc3 	bl	8000558 <__aeabi_f2d>
 80185d2:	a321      	add	r3, pc, #132	; (adr r3, 8018658 <m_kalman_3gyro.isra.9.constprop.47+0x3620>)
 80185d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185d8:	f7e8 fa84 	bl	8000ae4 <__aeabi_dcmplt>
 80185dc:	b338      	cbz	r0, 801862e <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 80185de:	9b08      	ldr	r3, [sp, #32]
 80185e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80185e4:	eef0 7ae7 	vabs.f32	s15, s15
 80185e8:	ee17 0a90 	vmov	r0, s15
 80185ec:	f7e7 ffb4 	bl	8000558 <__aeabi_f2d>
 80185f0:	a319      	add	r3, pc, #100	; (adr r3, 8018658 <m_kalman_3gyro.isra.9.constprop.47+0x3620>)
 80185f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185f6:	f7e8 fa75 	bl	8000ae4 <__aeabi_dcmplt>
 80185fa:	b1c0      	cbz	r0, 801862e <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 80185fc:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 8018600:	2a0a      	cmp	r2, #10
 8018602:	f000 810c 	beq.w	801881e <m_kalman_3gyro.isra.9.constprop.47+0x37e6>
 8018606:	2300      	movs	r3, #0
 8018608:	2a00      	cmp	r2, #0
 801860a:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 801860e:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8018612:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8018616:	f102 0301 	add.w	r3, r2, #1
 801861a:	dd03      	ble.n	8018624 <m_kalman_3gyro.isra.9.constprop.47+0x35ec>
 801861c:	2b00      	cmp	r3, #0
 801861e:	bfd8      	it	le
 8018620:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8018624:	2200      	movs	r2, #0
 8018626:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 801862a:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 801862e:	ac81      	add	r4, sp, #516	; 0x204
 8018630:	f7fe bc14 	b.w	8016e5c <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8018634:	eeb0 4a48 	vmov.f32	s8, s16
 8018638:	e442      	b.n	8017ec0 <m_kalman_3gyro.isra.9.constprop.47+0x2e88>
 801863a:	eeb0 5a48 	vmov.f32	s10, s16
 801863e:	e458      	b.n	8017ef2 <m_kalman_3gyro.isra.9.constprop.47+0x2eba>
 8018640:	eef0 6a48 	vmov.f32	s13, s16
 8018644:	eeb0 ca48 	vmov.f32	s24, s16
 8018648:	e417      	b.n	8017e7a <m_kalman_3gyro.isra.9.constprop.47+0x2e42>
 801864a:	eeb0 5a48 	vmov.f32	s10, s16
 801864e:	f7ff bb3d 	b.w	8017ccc <m_kalman_3gyro.isra.9.constprop.47+0x2c94>
 8018652:	bf00      	nop
 8018654:	f3af 8000 	nop.w
 8018658:	66666666 	.word	0x66666666
 801865c:	3ff66666 	.word	0x3ff66666
 8018660:	20001698 	.word	0x20001698
 8018664:	20001acc 	.word	0x20001acc
 8018668:	be4ccccd 	.word	0xbe4ccccd
 801866c:	bdcccccd 	.word	0xbdcccccd
 8018670:	00000000 	.word	0x00000000
 8018674:	3dcccccd 	.word	0x3dcccccd
 8018678:	3e4ccccd 	.word	0x3e4ccccd
 801867c:	f89a 28ae 	ldrb.w	r2, [sl, #2222]	; 0x8ae
 8018680:	2a00      	cmp	r2, #0
 8018682:	d05e      	beq.n	8018742 <m_kalman_3gyro.isra.9.constprop.47+0x370a>
 8018684:	3a01      	subs	r2, #1
 8018686:	2300      	movs	r3, #0
 8018688:	f88a 28ae 	strb.w	r2, [sl, #2222]	; 0x8ae
 801868c:	f88a 31fc 	strb.w	r3, [sl, #508]	; 0x1fc
 8018690:	f88a 31fd 	strb.w	r3, [sl, #509]	; 0x1fd
 8018694:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8018698:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 801869c:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 80186a0:	f7fe be90 	b.w	80173c4 <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 80186a4:	4b92      	ldr	r3, [pc, #584]	; (80188f0 <m_kalman_3gyro.isra.9.constprop.47+0x38b8>)
 80186a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80186aa:	f7e8 faa1 	bl	8000bf0 <__aeabi_d2f>
 80186ae:	eef4 aacb 	vcmpe.f32	s21, s22
 80186b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186b6:	ee0a 0a10 	vmov	s20, r0
 80186ba:	f6fe aa30 	blt.w	8016b1e <m_kalman_3gyro.isra.9.constprop.47+0x1ae6>
 80186be:	eef4 aaeb 	vcmpe.f32	s21, s23
 80186c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186c6:	f63e aa2a 	bhi.w	8016b1e <m_kalman_3gyro.isra.9.constprop.47+0x1ae6>
 80186ca:	2007      	movs	r0, #7
 80186cc:	2402      	movs	r4, #2
 80186ce:	2301      	movs	r3, #1
 80186d0:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 80186d4:	e009      	b.n	80186ea <m_kalman_3gyro.isra.9.constprop.47+0x36b2>
 80186d6:	edd1 7a00 	vldr	s15, [r1]
 80186da:	eef4 aae7 	vcmpe.f32	s21, s15
 80186de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186e2:	bfa6      	itte	ge
 80186e4:	1c54      	addge	r4, r2, #1
 80186e6:	4613      	movge	r3, r2
 80186e8:	4610      	movlt	r0, r2
 80186ea:	18c2      	adds	r2, r0, r3
 80186ec:	0852      	lsrs	r2, r2, #1
 80186ee:	1951      	adds	r1, r2, r5
 80186f0:	f50d 66ca 	add.w	r6, sp, #1616	; 0x650
 80186f4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 80186f8:	42a0      	cmp	r0, r4
 80186fa:	f5a1 619e 	sub.w	r1, r1, #1264	; 0x4f0
 80186fe:	d8ea      	bhi.n	80186d6 <m_kalman_3gyro.isra.9.constprop.47+0x369e>
 8018700:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8018704:	3a01      	subs	r2, #1
 8018706:	0092      	lsls	r2, r2, #2
 8018708:	009b      	lsls	r3, r3, #2
 801870a:	a958      	add	r1, sp, #352	; 0x160
 801870c:	1888      	adds	r0, r1, r2
 801870e:	4419      	add	r1, r3
 8018710:	ed90 7a00 	vldr	s14, [r0]
 8018714:	edd1 7a00 	vldr	s15, [r1]
 8018718:	ee7a aac7 	vsub.f32	s21, s21, s14
 801871c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018720:	a95f      	add	r1, sp, #380	; 0x17c
 8018722:	ee8a aaa7 	vdiv.f32	s20, s21, s15
 8018726:	440a      	add	r2, r1
 8018728:	440b      	add	r3, r1
 801872a:	ed92 7a00 	vldr	s14, [r2]
 801872e:	edd3 7a00 	vldr	s15, [r3]
 8018732:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018736:	ee2a aa27 	vmul.f32	s20, s20, s15
 801873a:	ee3a aa07 	vadd.f32	s20, s20, s14
 801873e:	f7fe b9ee 	b.w	8016b1e <m_kalman_3gyro.isra.9.constprop.47+0x1ae6>
 8018742:	f8da 58b0 	ldr.w	r5, [sl, #2224]	; 0x8b0
 8018746:	b175      	cbz	r5, 8018766 <m_kalman_3gyro.isra.9.constprop.47+0x372e>
 8018748:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801874a:	6818      	ldr	r0, [r3, #0]
 801874c:	f7e7 ff04 	bl	8000558 <__aeabi_f2d>
 8018750:	a365      	add	r3, pc, #404	; (adr r3, 80188e8 <m_kalman_3gyro.isra.9.constprop.47+0x38b0>)
 8018752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018756:	f7e8 f9e3 	bl	8000b20 <__aeabi_dcmpgt>
 801875a:	b120      	cbz	r0, 8018766 <m_kalman_3gyro.isra.9.constprop.47+0x372e>
 801875c:	3d01      	subs	r5, #1
 801875e:	f8ca 58b0 	str.w	r5, [sl, #2224]	; 0x8b0
 8018762:	f7fe be2f 	b.w	80173c4 <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 8018766:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018768:	6818      	ldr	r0, [r3, #0]
 801876a:	f7e7 fef5 	bl	8000558 <__aeabi_f2d>
 801876e:	4606      	mov	r6, r0
 8018770:	ee1d 0a10 	vmov	r0, s26
 8018774:	460f      	mov	r7, r1
 8018776:	f7e7 feef 	bl	8000558 <__aeabi_f2d>
 801877a:	2200      	movs	r2, #0
 801877c:	4b5d      	ldr	r3, [pc, #372]	; (80188f4 <m_kalman_3gyro.isra.9.constprop.47+0x38bc>)
 801877e:	f7e7 ff3f 	bl	8000600 <__aeabi_dmul>
 8018782:	4602      	mov	r2, r0
 8018784:	460b      	mov	r3, r1
 8018786:	4630      	mov	r0, r6
 8018788:	4639      	mov	r1, r7
 801878a:	f7e8 f9ab 	bl	8000ae4 <__aeabi_dcmplt>
 801878e:	2800      	cmp	r0, #0
 8018790:	f43e ae18 	beq.w	80173c4 <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 8018794:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018796:	6818      	ldr	r0, [r3, #0]
 8018798:	f7e7 fede 	bl	8000558 <__aeabi_f2d>
 801879c:	4606      	mov	r6, r0
 801879e:	ee1f 0a10 	vmov	r0, s30
 80187a2:	460f      	mov	r7, r1
 80187a4:	f7e7 fed8 	bl	8000558 <__aeabi_f2d>
 80187a8:	2200      	movs	r2, #0
 80187aa:	4b52      	ldr	r3, [pc, #328]	; (80188f4 <m_kalman_3gyro.isra.9.constprop.47+0x38bc>)
 80187ac:	f7e7 ff28 	bl	8000600 <__aeabi_dmul>
 80187b0:	4602      	mov	r2, r0
 80187b2:	460b      	mov	r3, r1
 80187b4:	4630      	mov	r0, r6
 80187b6:	4639      	mov	r1, r7
 80187b8:	f7e8 f994 	bl	8000ae4 <__aeabi_dcmplt>
 80187bc:	2800      	cmp	r0, #0
 80187be:	f43e ae01 	beq.w	80173c4 <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 80187c2:	4b4d      	ldr	r3, [pc, #308]	; (80188f8 <m_kalman_3gyro.isra.9.constprop.47+0x38c0>)
 80187c4:	6818      	ldr	r0, [r3, #0]
 80187c6:	f7e7 fec7 	bl	8000558 <__aeabi_f2d>
 80187ca:	4606      	mov	r6, r0
 80187cc:	ee1e 0a90 	vmov	r0, s29
 80187d0:	460f      	mov	r7, r1
 80187d2:	f7e7 fec1 	bl	8000558 <__aeabi_f2d>
 80187d6:	4602      	mov	r2, r0
 80187d8:	460b      	mov	r3, r1
 80187da:	f7e7 fd5f 	bl	800029c <__adddf3>
 80187de:	4602      	mov	r2, r0
 80187e0:	460b      	mov	r3, r1
 80187e2:	4630      	mov	r0, r6
 80187e4:	4639      	mov	r1, r7
 80187e6:	f7e8 f99b 	bl	8000b20 <__aeabi_dcmpgt>
 80187ea:	2800      	cmp	r0, #0
 80187ec:	f000 8387 	beq.w	8018efe <m_kalman_3gyro.isra.9.constprop.47+0x3ec6>
 80187f0:	f89a 28ad 	ldrb.w	r2, [sl, #2221]	; 0x8ad
 80187f4:	2300      	movs	r3, #0
 80187f6:	2a0e      	cmp	r2, #14
 80187f8:	f88a 31fc 	strb.w	r3, [sl, #508]	; 0x1fc
 80187fc:	f88a 31fd 	strb.w	r3, [sl, #509]	; 0x1fd
 8018800:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8018804:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8018808:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 801880c:	bf95      	itete	ls
 801880e:	3203      	addls	r2, #3
 8018810:	2364      	movhi	r3, #100	; 0x64
 8018812:	f88a 28ad 	strbls.w	r2, [sl, #2221]	; 0x8ad
 8018816:	f8ca 38b0 	strhi.w	r3, [sl, #2224]	; 0x8b0
 801881a:	f7fe bdd3 	b.w	80173c4 <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 801881e:	2301      	movs	r3, #1
 8018820:	9907      	ldr	r1, [sp, #28]
 8018822:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8018826:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 801882a:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 801882e:	680a      	ldr	r2, [r1, #0]
 8018830:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8018834:	684a      	ldr	r2, [r1, #4]
 8018836:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 801883a:	688a      	ldr	r2, [r1, #8]
 801883c:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8018840:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
 8018844:	7013      	strb	r3, [r2, #0]
 8018846:	f8da 345c 	ldr.w	r3, [sl, #1116]	; 0x45c
 801884a:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 801884e:	3301      	adds	r3, #1
 8018850:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8018854:	b172      	cbz	r2, 8018874 <m_kalman_3gyro.isra.9.constprop.47+0x383c>
 8018856:	f8da 1080 	ldr.w	r1, [sl, #128]	; 0x80
 801885a:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
 801885e:	f8ca 10a4 	str.w	r1, [sl, #164]	; 0xa4
 8018862:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 8018866:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 801886a:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 801886e:	2200      	movs	r2, #0
 8018870:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
 8018874:	2b1e      	cmp	r3, #30
 8018876:	f47f aeda 	bne.w	801862e <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 801887a:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 801887e:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8018882:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 8018886:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 801888a:	6018      	str	r0, [r3, #0]
 801888c:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8018890:	ac81      	add	r4, sp, #516	; 0x204
 8018892:	6019      	str	r1, [r3, #0]
 8018894:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8018898:	601a      	str	r2, [r3, #0]
 801889a:	f7fe badf 	b.w	8016e5c <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 801889e:	4a17      	ldr	r2, [pc, #92]	; (80188fc <m_kalman_3gyro.isra.9.constprop.47+0x38c4>)
 80188a0:	9d08      	ldr	r5, [sp, #32]
 80188a2:	9f07      	ldr	r7, [sp, #28]
 80188a4:	68ae      	ldr	r6, [r5, #8]
 80188a6:	682c      	ldr	r4, [r5, #0]
 80188a8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80188ac:	0080      	lsls	r0, r0, #2
 80188ae:	f102 013c 	add.w	r1, r2, #60	; 0x3c
 80188b2:	4402      	add	r2, r0
 80188b4:	4401      	add	r1, r0
 80188b6:	6096      	str	r6, [r2, #8]
 80188b8:	4e0d      	ldr	r6, [pc, #52]	; (80188f0 <m_kalman_3gyro.isra.9.constprop.47+0x38b8>)
 80188ba:	6868      	ldr	r0, [r5, #4]
 80188bc:	6014      	str	r4, [r2, #0]
 80188be:	3301      	adds	r3, #1
 80188c0:	683d      	ldr	r5, [r7, #0]
 80188c2:	6050      	str	r0, [r2, #4]
 80188c4:	687c      	ldr	r4, [r7, #4]
 80188c6:	68b8      	ldr	r0, [r7, #8]
 80188c8:	f886 3430 	strb.w	r3, [r6, #1072]	; 0x430
 80188cc:	f8dd 36f8 	ldr.w	r3, [sp, #1784]	; 0x6f8
 80188d0:	600d      	str	r5, [r1, #0]
 80188d2:	2200      	movs	r2, #0
 80188d4:	604c      	str	r4, [r1, #4]
 80188d6:	6088      	str	r0, [r1, #8]
 80188d8:	701a      	strb	r2, [r3, #0]
 80188da:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 80188de:	ecbd 8b10 	vpop	{d8-d15}
 80188e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188e6:	bf00      	nop
 80188e8:	33333333 	.word	0x33333333
 80188ec:	3fd33333 	.word	0x3fd33333
 80188f0:	20001698 	.word	0x20001698
 80188f4:	3ff80000 	.word	0x3ff80000
 80188f8:	20001ab8 	.word	0x20001ab8
 80188fc:	20001acc 	.word	0x20001acc
 8018900:	f60a 0274 	addw	r2, sl, #2164	; 0x874
 8018904:	f60a 0378 	addw	r3, sl, #2168	; 0x878
 8018908:	ed92 7a00 	vldr	s14, [r2]
 801890c:	edd3 7a00 	vldr	s15, [r3]
 8018910:	9305      	str	r3, [sp, #20]
 8018912:	f60a 037c 	addw	r3, sl, #2172	; 0x87c
 8018916:	ee67 6a07 	vmul.f32	s13, s14, s14
 801891a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801891e:	ed93 7a00 	vldr	s14, [r3]
 8018922:	9300      	str	r3, [sp, #0]
 8018924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018928:	ee27 7a07 	vmul.f32	s14, s14, s14
 801892c:	920c      	str	r2, [sp, #48]	; 0x30
 801892e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018932:	f50a 6808 	add.w	r8, sl, #2176	; 0x880
 8018936:	ee17 0a90 	vmov	r0, s15
 801893a:	f7e7 fe0d 	bl	8000558 <__aeabi_f2d>
 801893e:	ec41 0b10 	vmov	d0, r0, r1
 8018942:	f003 fe49 	bl	801c5d8 <sqrt>
 8018946:	f60a 0284 	addw	r2, sl, #2180	; 0x884
 801894a:	4614      	mov	r4, r2
 801894c:	ec51 0b10 	vmov	r0, r1, d0
 8018950:	f7e8 f94e 	bl	8000bf0 <__aeabi_d2f>
 8018954:	edd4 7a00 	vldr	s15, [r4]
 8018958:	ed98 7a00 	vldr	s14, [r8]
 801895c:	9402      	str	r4, [sp, #8]
 801895e:	f60a 0788 	addw	r7, sl, #2184	; 0x888
 8018962:	ee67 6a07 	vmul.f32	s13, s14, s14
 8018966:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801896a:	ed97 7a00 	vldr	s14, [r7]
 801896e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018972:	ee27 7a07 	vmul.f32	s14, s14, s14
 8018976:	ee0a 0a90 	vmov	s21, r0
 801897a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801897e:	ac81      	add	r4, sp, #516	; 0x204
 8018980:	ee17 0a90 	vmov	r0, s15
 8018984:	f7e7 fde8 	bl	8000558 <__aeabi_f2d>
 8018988:	ec41 0b10 	vmov	d0, r0, r1
 801898c:	f003 fe24 	bl	801c5d8 <sqrt>
 8018990:	ec51 0b10 	vmov	r0, r1, d0
 8018994:	f7e8 f92c 	bl	8000bf0 <__aeabi_d2f>
 8018998:	9b00      	ldr	r3, [sp, #0]
 801899a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801899c:	edd3 6a00 	vldr	s13, [r3]
 80189a0:	edd2 4a00 	vldr	s9, [r2]
 80189a4:	9b05      	ldr	r3, [sp, #20]
 80189a6:	9a02      	ldr	r2, [sp, #8]
 80189a8:	ed97 5a00 	vldr	s10, [r7]
 80189ac:	edd2 5a00 	vldr	s11, [r2]
 80189b0:	ed93 6a00 	vldr	s12, [r3]
 80189b4:	ed98 7a00 	vldr	s14, [r8]
 80189b8:	4be5      	ldr	r3, [pc, #916]	; (8018d50 <m_kalman_3gyro.isra.9.constprop.47+0x3d18>)
 80189ba:	ee07 0a90 	vmov	s15, r0
 80189be:	ee85 eaa7 	vdiv.f32	s28, s11, s15
 80189c2:	6018      	str	r0, [r3, #0]
 80189c4:	af4a      	add	r7, sp, #296	; 0x128
 80189c6:	eec5 da27 	vdiv.f32	s27, s10, s15
 80189ca:	eec7 fa27 	vdiv.f32	s31, s14, s15
 80189ce:	ee86 7aaa 	vdiv.f32	s14, s13, s21
 80189d2:	eec6 7a2a 	vdiv.f32	s15, s12, s21
 80189d6:	eec4 6aaa 	vdiv.f32	s13, s9, s21
 80189da:	ee27 6a2f 	vmul.f32	s12, s14, s31
 80189de:	ee6d baa6 	vmul.f32	s23, s27, s13
 80189e2:	ee27 7a0e 	vmul.f32	s14, s14, s28
 80189e6:	ee2d baa7 	vmul.f32	s22, s27, s15
 80189ea:	ee7b bac6 	vsub.f32	s23, s23, s12
 80189ee:	ee6e 6a26 	vmul.f32	s13, s28, s13
 80189f2:	ee37 ba4b 	vsub.f32	s22, s14, s22
 80189f6:	ee67 7aaf 	vmul.f32	s15, s15, s31
 80189fa:	ee2b 7a0b 	vmul.f32	s14, s22, s22
 80189fe:	ee77 aae6 	vsub.f32	s21, s15, s13
 8018a02:	ee6b 7aab 	vmul.f32	s15, s23, s23
 8018a06:	ee6a 6aaa 	vmul.f32	s13, s21, s21
 8018a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018a12:	ee17 0a90 	vmov	r0, s15
 8018a16:	f7e7 fd9f 	bl	8000558 <__aeabi_f2d>
 8018a1a:	ec41 0b10 	vmov	d0, r0, r1
 8018a1e:	f003 fddb 	bl	801c5d8 <sqrt>
 8018a22:	ec51 0b10 	vmov	r0, r1, d0
 8018a26:	f7e8 f8e3 	bl	8000bf0 <__aeabi_d2f>
 8018a2a:	ee07 0a90 	vmov	s15, r0
 8018a2e:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 8018a32:	aa78      	add	r2, sp, #480	; 0x1e0
 8018a34:	4620      	mov	r0, r4
 8018a36:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018a38:	eeca 6aa7 	vdiv.f32	s13, s21, s15
 8018a3c:	eecb 5a27 	vdiv.f32	s11, s22, s15
 8018a40:	ee2d 5a86 	vmul.f32	s10, s27, s12
 8018a44:	ee66 7a8e 	vmul.f32	s15, s13, s28
 8018a48:	ee6f 4a86 	vmul.f32	s9, s31, s12
 8018a4c:	ee35 5a67 	vsub.f32	s10, s10, s15
 8018a50:	ee2e 7a25 	vmul.f32	s14, s28, s11
 8018a54:	ee66 7aaf 	vmul.f32	s15, s13, s31
 8018a58:	ed84 5a00 	vstr	s10, [r4]
 8018a5c:	ee2d 5aa5 	vmul.f32	s10, s27, s11
 8018a60:	ee37 7a64 	vsub.f32	s14, s14, s9
 8018a64:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8018a68:	ed84 6a04 	vstr	s12, [r4, #16]
 8018a6c:	edc4 6a07 	vstr	s13, [r4, #28]
 8018a70:	edc4 7a03 	vstr	s15, [r4, #12]
 8018a74:	edc4 5a01 	vstr	s11, [r4, #4]
 8018a78:	ed84 7a06 	vstr	s14, [r4, #24]
 8018a7c:	edc4 fa02 	vstr	s31, [r4, #8]
 8018a80:	ed84 ea05 	vstr	s28, [r4, #20]
 8018a84:	edc4 da08 	vstr	s27, [r4, #32]
 8018a88:	f7f7 feb6 	bl	80107f8 <m_mldivide>
 8018a8c:	a946      	add	r1, sp, #280	; 0x118
 8018a8e:	a878      	add	r0, sp, #480	; 0x1e0
 8018a90:	f7f8 f94a 	bl	8010d28 <m_dcm2q_eml>
 8018a94:	ab46      	add	r3, sp, #280	; 0x118
 8018a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018a98:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8018a9c:	eddf 7aad 	vldr	s15, [pc, #692]	; 8018d54 <m_kalman_3gyro.isra.9.constprop.47+0x3d1c>
 8018aa0:	eef0 6a67 	vmov.f32	s13, s15
 8018aa4:	eeb0 6a67 	vmov.f32	s12, s15
 8018aa8:	ed96 5a06 	vldr	s10, [r6, #24]
 8018aac:	edd6 5a07 	vldr	s11, [r6, #28]
 8018ab0:	ed96 7a08 	vldr	s14, [r6, #32]
 8018ab4:	3624      	adds	r6, #36	; 0x24
 8018ab6:	42ae      	cmp	r6, r5
 8018ab8:	ee36 6a05 	vadd.f32	s12, s12, s10
 8018abc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018ac0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018ac4:	d1f0      	bne.n	8018aa8 <m_kalman_3gyro.isra.9.constprop.47+0x3a70>
 8018ac6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8018aca:	eec6 5a07 	vdiv.f32	s11, s12, s14
 8018ace:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8018ad2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8018ad6:	eef4 eaec 	vcmpe.f32	s29, s25
 8018ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ade:	edcd 5a35 	vstr	s11, [sp, #212]	; 0xd4
 8018ae2:	ed8d 6a36 	vstr	s12, [sp, #216]	; 0xd8
 8018ae6:	edcd 6a37 	vstr	s13, [sp, #220]	; 0xdc
 8018aea:	dd05      	ble.n	8018af8 <m_kalman_3gyro.isra.9.constprop.47+0x3ac0>
 8018aec:	eeb4 dae9 	vcmpe.f32	s26, s19
 8018af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018af4:	f73e a89c 	bgt.w	8016c30 <m_kalman_3gyro.isra.9.constprop.47+0x1bf8>
 8018af8:	2301      	movs	r3, #1
 8018afa:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8018afe:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8018b02:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8018b06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018b08:	edd3 7a00 	vldr	s15, [r3]
 8018b0c:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8018b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018b14:	eef4 7ae8 	vcmpe.f32	s15, s17
 8018b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b1c:	f2c0 81a9 	blt.w	8018e72 <m_kalman_3gyro.isra.9.constprop.47+0x3e3a>
 8018b20:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	f000 818d 	beq.w	8018e44 <m_kalman_3gyro.isra.9.constprop.47+0x3e0c>
 8018b2a:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8018b2e:	edd3 7a06 	vldr	s15, [r3, #24]
 8018b32:	ed93 7a07 	vldr	s14, [r3, #28]
 8018b36:	edd3 6a08 	vldr	s13, [r3, #32]
 8018b3a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8018b3e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018b42:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018b46:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018b4a:	edc3 7a06 	vstr	s15, [r3, #24]
 8018b4e:	ed83 7a07 	vstr	s14, [r3, #28]
 8018b52:	edc3 6a08 	vstr	s13, [r3, #32]
 8018b56:	f8ba 38a6 	ldrh.w	r3, [sl, #2214]	; 0x8a6
 8018b5a:	3301      	adds	r3, #1
 8018b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018b60:	d052      	beq.n	8018c08 <m_kalman_3gyro.isra.9.constprop.47+0x3bd0>
 8018b62:	2b31      	cmp	r3, #49	; 0x31
 8018b64:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8018b68:	d912      	bls.n	8018b90 <m_kalman_3gyro.isra.9.constprop.47+0x3b58>
 8018b6a:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8018b6e:	b97b      	cbnz	r3, 8018b90 <m_kalman_3gyro.isra.9.constprop.47+0x3b58>
 8018b70:	ed9f 6a79 	vldr	s12, [pc, #484]	; 8018d58 <m_kalman_3gyro.isra.9.constprop.47+0x3d20>
 8018b74:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8018b78:	ee87 5a86 	vdiv.f32	s10, s15, s12
 8018b7c:	eec7 5a06 	vdiv.f32	s11, s14, s12
 8018b80:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8018b84:	ed83 5a06 	vstr	s10, [r3, #24]
 8018b88:	edc3 5a07 	vstr	s11, [r3, #28]
 8018b8c:	edc3 7a08 	vstr	s15, [r3, #32]
 8018b90:	f8da 38a4 	ldr.w	r3, [sl, #2212]	; 0x8a4
 8018b94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8018b98:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8018b9c:	f000 8149 	beq.w	8018e32 <m_kalman_3gyro.isra.9.constprop.47+0x3dfa>
 8018ba0:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8018ba4:	d06c      	beq.n	8018c80 <m_kalman_3gyro.isra.9.constprop.47+0x3c48>
 8018ba6:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d17a      	bne.n	8018ca4 <m_kalman_3gyro.isra.9.constprop.47+0x3c6c>
 8018bae:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 8018bb2:	b372      	cbz	r2, 8018c12 <m_kalman_3gyro.isra.9.constprop.47+0x3bda>
 8018bb4:	ed9d 7a04 	vldr	s14, [sp, #16]
 8018bb8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8018bbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bc4:	d525      	bpl.n	8018c12 <m_kalman_3gyro.isra.9.constprop.47+0x3bda>
 8018bc6:	ed9a 7af1 	vldr	s14, [sl, #964]	; 0x3c4
 8018bca:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8018bce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bd6:	d51c      	bpl.n	8018c12 <m_kalman_3gyro.isra.9.constprop.47+0x3bda>
 8018bd8:	f8da 13d8 	ldr.w	r1, [sl, #984]	; 0x3d8
 8018bdc:	f8ca 1080 	str.w	r1, [sl, #128]	; 0x80
 8018be0:	f8da 13d4 	ldr.w	r1, [sl, #980]	; 0x3d4
 8018be4:	f8da 23dc 	ldr.w	r2, [sl, #988]	; 0x3dc
 8018be8:	f8ca 107c 	str.w	r1, [sl, #124]	; 0x7c
 8018bec:	f8dd 16f8 	ldr.w	r1, [sp, #1784]	; 0x6f8
 8018bf0:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8018bf4:	2201      	movs	r2, #1
 8018bf6:	700a      	strb	r2, [r1, #0]
 8018bf8:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 8018bfc:	f7fe b92e 	b.w	8016e5c <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8018c00:	eef0 1a48 	vmov.f32	s3, s16
 8018c04:	f7ff b83e 	b.w	8017c84 <m_kalman_3gyro.isra.9.constprop.47+0x2c4c>
 8018c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c0c:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8018c10:	e7ab      	b.n	8018b6a <m_kalman_3gyro.isra.9.constprop.47+0x3b32>
 8018c12:	f8da 2454 	ldr.w	r2, [sl, #1108]	; 0x454
 8018c16:	2a1e      	cmp	r2, #30
 8018c18:	d00e      	beq.n	8018c38 <m_kalman_3gyro.isra.9.constprop.47+0x3c00>
 8018c1a:	2a00      	cmp	r2, #0
 8018c1c:	f102 0301 	add.w	r3, r2, #1
 8018c20:	dd03      	ble.n	8018c2a <m_kalman_3gyro.isra.9.constprop.47+0x3bf2>
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	bfd8      	it	le
 8018c26:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8018c2a:	2200      	movs	r2, #0
 8018c2c:	f8ca 3454 	str.w	r3, [sl, #1108]	; 0x454
 8018c30:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8018c34:	f7fe b912 	b.w	8016e5c <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8018c38:	f8ba 38a6 	ldrh.w	r3, [sl, #2214]	; 0x8a6
 8018c3c:	2b27      	cmp	r3, #39	; 0x27
 8018c3e:	d873      	bhi.n	8018d28 <m_kalman_3gyro.isra.9.constprop.47+0x3cf0>
 8018c40:	f8da 23d8 	ldr.w	r2, [sl, #984]	; 0x3d8
 8018c44:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8018c48:	f8da 23d4 	ldr.w	r2, [sl, #980]	; 0x3d4
 8018c4c:	f8da 33dc 	ldr.w	r3, [sl, #988]	; 0x3dc
 8018c50:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8018c54:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
 8018c58:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 8018c5c:	2301      	movs	r3, #1
 8018c5e:	7013      	strb	r3, [r2, #0]
 8018c60:	f8ba 38a8 	ldrh.w	r3, [sl, #2216]	; 0x8a8
 8018c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018c68:	3301      	adds	r3, #1
 8018c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018c6e:	bf08      	it	eq
 8018c70:	4613      	moveq	r3, r2
 8018c72:	2201      	movs	r2, #1
 8018c74:	f8aa 38a8 	strh.w	r3, [sl, #2216]	; 0x8a8
 8018c78:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8018c7c:	f7fe b8ee 	b.w	8016e5c <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8018c80:	2301      	movs	r3, #1
 8018c82:	f88a 38a4 	strb.w	r3, [sl, #2212]	; 0x8a4
 8018c86:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8018c8a:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8018c8e:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 8018c92:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 8018c96:	6018      	str	r0, [r3, #0]
 8018c98:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8018c9c:	6019      	str	r1, [r3, #0]
 8018c9e:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8018ca2:	601a      	str	r2, [r3, #0]
 8018ca4:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 8018ca8:	eddd 6a4b 	vldr	s13, [sp, #300]	; 0x12c
 8018cac:	ed9d 7a4c 	vldr	s14, [sp, #304]	; 0x130
 8018cb0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018cb4:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8018cb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018cbc:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8018cc0:	ee37 7a07 	vadd.f32	s14, s14, s14
 8018cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018cc8:	ee27 7a07 	vmul.f32	s14, s14, s14
 8018ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018cd0:	ee17 0a90 	vmov	r0, s15
 8018cd4:	f7e7 fc40 	bl	8000558 <__aeabi_f2d>
 8018cd8:	ec41 0b10 	vmov	d0, r0, r1
 8018cdc:	f003 fc7c 	bl	801c5d8 <sqrt>
 8018ce0:	ec51 0b10 	vmov	r0, r1, d0
 8018ce4:	f7e7 ff84 	bl	8000bf0 <__aeabi_d2f>
 8018ce8:	f7e7 fc36 	bl	8000558 <__aeabi_f2d>
 8018cec:	a316      	add	r3, pc, #88	; (adr r3, 8018d48 <m_kalman_3gyro.isra.9.constprop.47+0x3d10>)
 8018cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cf2:	f7e7 fef7 	bl	8000ae4 <__aeabi_dcmplt>
 8018cf6:	2800      	cmp	r0, #0
 8018cf8:	d044      	beq.n	8018d84 <m_kalman_3gyro.isra.9.constprop.47+0x3d4c>
 8018cfa:	f50d 61da 	add.w	r1, sp, #1744	; 0x6d0
 8018cfe:	2200      	movs	r2, #0
 8018d00:	2300      	movs	r3, #0
 8018d02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d06:	f7e7 fee3 	bl	8000ad0 <__aeabi_dcmpeq>
 8018d0a:	bb38      	cbnz	r0, 8018d5c <m_kalman_3gyro.isra.9.constprop.47+0x3d24>
 8018d0c:	f88a 0202 	strb.w	r0, [sl, #514]	; 0x202
 8018d10:	f88a 0203 	strb.w	r0, [sl, #515]	; 0x203
 8018d14:	f88a 0204 	strb.w	r0, [sl, #516]	; 0x204
 8018d18:	2301      	movs	r3, #1
 8018d1a:	2200      	movs	r2, #0
 8018d1c:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 8018d20:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8018d24:	f7fe b89a 	b.w	8016e5c <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8018d28:	9a07      	ldr	r2, [sp, #28]
 8018d2a:	6813      	ldr	r3, [r2, #0]
 8018d2c:	f8ca 307c 	str.w	r3, [sl, #124]	; 0x7c
 8018d30:	6853      	ldr	r3, [r2, #4]
 8018d32:	f8ca 3080 	str.w	r3, [sl, #128]	; 0x80
 8018d36:	6892      	ldr	r2, [r2, #8]
 8018d38:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8018d3c:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
 8018d40:	2301      	movs	r3, #1
 8018d42:	7013      	strb	r3, [r2, #0]
 8018d44:	e78c      	b.n	8018c60 <m_kalman_3gyro.isra.9.constprop.47+0x3c28>
 8018d46:	bf00      	nop
 8018d48:	47ae147b 	.word	0x47ae147b
 8018d4c:	3f747ae1 	.word	0x3f747ae1
 8018d50:	20001ab4 	.word	0x20001ab4
 8018d54:	00000000 	.word	0x00000000
 8018d58:	3fd55555 	.word	0x3fd55555
 8018d5c:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 8018d60:	2a32      	cmp	r2, #50	; 0x32
 8018d62:	d01b      	beq.n	8018d9c <m_kalman_3gyro.isra.9.constprop.47+0x3d64>
 8018d64:	2300      	movs	r3, #0
 8018d66:	2a00      	cmp	r2, #0
 8018d68:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8018d6c:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8018d70:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8018d74:	f102 0301 	add.w	r3, r2, #1
 8018d78:	ddcf      	ble.n	8018d1a <m_kalman_3gyro.isra.9.constprop.47+0x3ce2>
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	bfd8      	it	le
 8018d7e:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8018d82:	e7ca      	b.n	8018d1a <m_kalman_3gyro.isra.9.constprop.47+0x3ce2>
 8018d84:	f8ca 0450 	str.w	r0, [sl, #1104]	; 0x450
 8018d88:	f88a 0202 	strb.w	r0, [sl, #514]	; 0x202
 8018d8c:	f88a 0203 	strb.w	r0, [sl, #515]	; 0x203
 8018d90:	f88a 0204 	strb.w	r0, [sl, #516]	; 0x204
 8018d94:	f8ca 045c 	str.w	r0, [sl, #1116]	; 0x45c
 8018d98:	f7fe b860 	b.w	8016e5c <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8018d9c:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8018da0:	f8dd 16b8 	ldr.w	r1, [sp, #1720]	; 0x6b8
 8018da4:	edd3 6a06 	vldr	s13, [r3, #24]
 8018da8:	f8da 245c 	ldr.w	r2, [sl, #1116]	; 0x45c
 8018dac:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8018db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018db4:	2301      	movs	r3, #1
 8018db6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8018dba:	ed81 7a06 	vstr	s14, [r1, #24]
 8018dbe:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8018dc2:	edd1 6a07 	vldr	s13, [r1, #28]
 8018dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018dca:	ed81 7a07 	vstr	s14, [r1, #28]
 8018dce:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8018dd2:	edd1 6a08 	vldr	s13, [r1, #32]
 8018dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018dda:	ed81 7a08 	vstr	s14, [r1, #32]
 8018dde:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8018de2:	d014      	beq.n	8018e0e <m_kalman_3gyro.isra.9.constprop.47+0x3dd6>
 8018de4:	2a00      	cmp	r2, #0
 8018de6:	f102 0301 	add.w	r3, r2, #1
 8018dea:	dd03      	ble.n	8018df4 <m_kalman_3gyro.isra.9.constprop.47+0x3dbc>
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	bfd8      	it	le
 8018df0:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8018df4:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8018df6:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8018dfa:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8018dfc:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8018dfe:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 8018e02:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 8018e06:	f8ca 30a8 	str.w	r3, [sl, #168]	; 0xa8
 8018e0a:	f7fe b827 	b.w	8016e5c <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8018e0e:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8018e12:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8018e16:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 8018e1a:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 8018e1e:	6018      	str	r0, [r3, #0]
 8018e20:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8018e24:	6019      	str	r1, [r3, #0]
 8018e26:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8018e2a:	601a      	str	r2, [r3, #0]
 8018e2c:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8018e30:	e7e0      	b.n	8018df4 <m_kalman_3gyro.isra.9.constprop.47+0x3dbc>
 8018e32:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8018e36:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8018e3a:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8018e3e:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8018e42:	e6b0      	b.n	8018ba6 <m_kalman_3gyro.isra.9.constprop.47+0x3b6e>
 8018e44:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8018e48:	edd3 7a06 	vldr	s15, [r3, #24]
 8018e4c:	ed93 7a07 	vldr	s14, [r3, #28]
 8018e50:	edd3 6a08 	vldr	s13, [r3, #32]
 8018e54:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8018e58:	eec7 7a86 	vdiv.f32	s15, s15, s12
 8018e5c:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8018e60:	eec6 6a86 	vdiv.f32	s13, s13, s12
 8018e64:	edc3 7a06 	vstr	s15, [r3, #24]
 8018e68:	ed83 7a07 	vstr	s14, [r3, #28]
 8018e6c:	edc3 6a08 	vstr	s13, [r3, #32]
 8018e70:	e671      	b.n	8018b56 <m_kalman_3gyro.isra.9.constprop.47+0x3b1e>
 8018e72:	eef4 eaec 	vcmpe.f32	s29, s25
 8018e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e7a:	dd52      	ble.n	8018f22 <m_kalman_3gyro.isra.9.constprop.47+0x3eea>
 8018e7c:	eeb4 dae9 	vcmpe.f32	s26, s19
 8018e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e84:	dd4d      	ble.n	8018f22 <m_kalman_3gyro.isra.9.constprop.47+0x3eea>
 8018e86:	eeb4 facc 	vcmpe.f32	s30, s24
 8018e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e8e:	dd48      	ble.n	8018f22 <m_kalman_3gyro.isra.9.constprop.47+0x3eea>
 8018e90:	ed9d 7a04 	vldr	s14, [sp, #16]
 8018e94:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018e98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ea0:	d53f      	bpl.n	8018f22 <m_kalman_3gyro.isra.9.constprop.47+0x3eea>
 8018ea2:	ee89 6a8d 	vdiv.f32	s12, s19, s26
 8018ea6:	eecc 6aae 	vdiv.f32	s13, s25, s29
 8018eaa:	ee8c 7a0f 	vdiv.f32	s14, s24, s30
 8018eae:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018eb2:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8018eb6:	ee37 7a26 	vadd.f32	s14, s14, s13
 8018eba:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8018ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ec2:	d52e      	bpl.n	8018f22 <m_kalman_3gyro.isra.9.constprop.47+0x3eea>
 8018ec4:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8018ec8:	f8dd 26b8 	ldr.w	r2, [sp, #1720]	; 0x6b8
 8018ecc:	ed93 6a06 	vldr	s12, [r3, #24]
 8018ed0:	edd3 6a07 	vldr	s13, [r3, #28]
 8018ed4:	ed93 7a08 	vldr	s14, [r3, #32]
 8018ed8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8018edc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8018ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018ee4:	2300      	movs	r3, #0
 8018ee6:	ed82 6a06 	vstr	s12, [r2, #24]
 8018eea:	edc2 6a07 	vstr	s13, [r2, #28]
 8018eee:	edc2 7a08 	vstr	s15, [r2, #32]
 8018ef2:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8018ef6:	e656      	b.n	8018ba6 <m_kalman_3gyro.isra.9.constprop.47+0x3b6e>
 8018ef8:	2301      	movs	r3, #1
 8018efa:	f7fd bf8d 	b.w	8016e18 <m_kalman_3gyro.isra.9.constprop.47+0x1de0>
 8018efe:	f89a 38ad 	ldrb.w	r3, [sl, #2221]	; 0x8ad
 8018f02:	b343      	cbz	r3, 8018f56 <m_kalman_3gyro.isra.9.constprop.47+0x3f1e>
 8018f04:	3b01      	subs	r3, #1
 8018f06:	f88a 38ad 	strb.w	r3, [sl, #2221]	; 0x8ad
 8018f0a:	f88a 01fc 	strb.w	r0, [sl, #508]	; 0x1fc
 8018f0e:	f88a 01fd 	strb.w	r0, [sl, #509]	; 0x1fd
 8018f12:	f88a 01fe 	strb.w	r0, [sl, #510]	; 0x1fe
 8018f16:	f88a 0205 	strb.w	r0, [sl, #517]	; 0x205
 8018f1a:	f88a 0207 	strb.w	r0, [sl, #519]	; 0x207
 8018f1e:	f7fe ba51 	b.w	80173c4 <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 8018f22:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8018f26:	f8dd 26b8 	ldr.w	r2, [sp, #1720]	; 0x6b8
 8018f2a:	edd3 6a06 	vldr	s13, [r3, #24]
 8018f2e:	ed93 7a07 	vldr	s14, [r3, #28]
 8018f32:	edd3 7a08 	vldr	s15, [r3, #32]
 8018f36:	ee66 6a8a 	vmul.f32	s13, s13, s20
 8018f3a:	ee27 7a0a 	vmul.f32	s14, s14, s20
 8018f3e:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8018f42:	2300      	movs	r3, #0
 8018f44:	edc2 6a06 	vstr	s13, [r2, #24]
 8018f48:	ed82 7a07 	vstr	s14, [r2, #28]
 8018f4c:	ed82 aa08 	vstr	s20, [r2, #32]
 8018f50:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8018f54:	e627      	b.n	8018ba6 <m_kalman_3gyro.isra.9.constprop.47+0x3b6e>
 8018f56:	2d00      	cmp	r5, #0
 8018f58:	f47f ab98 	bne.w	801868c <m_kalman_3gyro.isra.9.constprop.47+0x3654>
 8018f5c:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8018f60:	edd3 6a00 	vldr	s13, [r3]
 8018f64:	ed93 7a01 	vldr	s14, [r3, #4]
 8018f68:	edd3 7a02 	vldr	s15, [r3, #8]
 8018f6c:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8018f70:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018f74:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018f78:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018f7c:	edc3 6a00 	vstr	s13, [r3]
 8018f80:	ed83 7a01 	vstr	s14, [r3, #4]
 8018f84:	edc3 7a02 	vstr	s15, [r3, #8]
 8018f88:	f7fe ba1c 	b.w	80173c4 <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 8018f8c:	eeb0 6a48 	vmov.f32	s12, s16
 8018f90:	f7fe be90 	b.w	8017cb4 <m_kalman_3gyro.isra.9.constprop.47+0x2c7c>
 8018f94:	2000      	movs	r0, #0
 8018f96:	2100      	movs	r1, #0
 8018f98:	f7ff b82c 	b.w	8017ff4 <m_kalman_3gyro.isra.9.constprop.47+0x2fbc>
 8018f9c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8018fa0:	ad4e      	add	r5, sp, #312	; 0x138
 8018fa2:	af46      	add	r7, sp, #280	; 0x118
 8018fa4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8018fa8:	eeb1 9a49 	vneg.f32	s18, s18
 8018fac:	eef1 8a68 	vneg.f32	s17, s17
 8018fb0:	eeb1 8a48 	vneg.f32	s16, s16
 8018fb4:	4628      	mov	r0, r5
 8018fb6:	4632      	mov	r2, r6
 8018fb8:	4639      	mov	r1, r7
 8018fba:	ed85 9a00 	vstr	s18, [r5]
 8018fbe:	edc5 8a01 	vstr	s17, [r5, #4]
 8018fc2:	ed85 8a02 	vstr	s16, [r5, #8]
 8018fc6:	60ec      	str	r4, [r5, #12]
 8018fc8:	f7f7 fde0 	bl	8010b8c <m_qmult_eml>
 8018fcc:	ed8d 9a46 	vstr	s18, [sp, #280]	; 0x118
 8018fd0:	edcd 8a47 	vstr	s17, [sp, #284]	; 0x11c
 8018fd4:	ed8d 8a48 	vstr	s16, [sp, #288]	; 0x120
 8018fd8:	9449      	str	r4, [sp, #292]	; 0x124
 8018fda:	ab46      	add	r3, sp, #280	; 0x118
 8018fdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018fde:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8018fe2:	ed95 7a00 	vldr	s14, [r5]
 8018fe6:	ed95 6a01 	vldr	s12, [r5, #4]
 8018fea:	edd5 7a02 	vldr	s15, [r5, #8]
 8018fee:	edd5 6a03 	vldr	s13, [r5, #12]
 8018ff2:	ee27 7a07 	vmul.f32	s14, s14, s14
 8018ff6:	ee26 6a06 	vmul.f32	s12, s12, s12
 8018ffa:	f7ff b846 	b.w	801808a <m_kalman_3gyro.isra.9.constprop.47+0x3052>
 8018ffe:	eeb0 ca48 	vmov.f32	s24, s16
 8019002:	f7fe be1b 	b.w	8017c3c <m_kalman_3gyro.isra.9.constprop.47+0x2c04>
 8019006:	eeb0 6a48 	vmov.f32	s12, s16
 801900a:	f7fe bf95 	b.w	8017f38 <m_kalman_3gyro.isra.9.constprop.47+0x2f00>
 801900e:	ac81      	add	r4, sp, #516	; 0x204
 8019010:	e572      	b.n	8018af8 <m_kalman_3gyro.isra.9.constprop.47+0x3ac0>
 8019012:	2b00      	cmp	r3, #0
 8019014:	f43d af10 	beq.w	8016e38 <m_kalman_3gyro.isra.9.constprop.47+0x1e00>
 8019018:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 801901c:	2a0a      	cmp	r2, #10
 801901e:	f47f aaf2 	bne.w	8018606 <m_kalman_3gyro.isra.9.constprop.47+0x35ce>
 8019022:	9907      	ldr	r1, [sp, #28]
 8019024:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8019028:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 801902c:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8019030:	680a      	ldr	r2, [r1, #0]
 8019032:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8019036:	684a      	ldr	r2, [r1, #4]
 8019038:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 801903c:	688a      	ldr	r2, [r1, #8]
 801903e:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8019042:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
 8019046:	7013      	strb	r3, [r2, #0]
 8019048:	f8da 345c 	ldr.w	r3, [sl, #1116]	; 0x45c
 801904c:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 8019050:	3301      	adds	r3, #1
 8019052:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8019056:	2a00      	cmp	r2, #0
 8019058:	f43f ac0c 	beq.w	8018874 <m_kalman_3gyro.isra.9.constprop.47+0x383c>
 801905c:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 8019060:	f8da 2080 	ldr.w	r2, [sl, #128]	; 0x80
 8019064:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 8019068:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 801906c:	f8da 1084 	ldr.w	r1, [sl, #132]	; 0x84
 8019070:	f8ca 10a8 	str.w	r1, [sl, #168]	; 0xa8
 8019074:	2200      	movs	r2, #0
 8019076:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
 801907a:	f7ff bbfb 	b.w	8018874 <m_kalman_3gyro.isra.9.constprop.47+0x383c>
 801907e:	bf00      	nop

08019080 <SpacePointAlgorithm.isra.10>:
 8019080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019084:	ed2d 8b10 	vpush	{d8-d15}
 8019088:	b0bb      	sub	sp, #236	; 0xec
 801908a:	f8df c408 	ldr.w	ip, [pc, #1032]	; 8019494 <SpacePointAlgorithm.isra.10+0x414>
 801908e:	f89d 5160 	ldrb.w	r5, [sp, #352]	; 0x160
 8019092:	9515      	str	r5, [sp, #84]	; 0x54
 8019094:	f89d 5168 	ldrb.w	r5, [sp, #360]	; 0x168
 8019098:	9516      	str	r5, [sp, #88]	; 0x58
 801909a:	f89d 516c 	ldrb.w	r5, [sp, #364]	; 0x16c
 801909e:	9517      	str	r5, [sp, #92]	; 0x5c
 80190a0:	f89d 5170 	ldrb.w	r5, [sp, #368]	; 0x170
 80190a4:	9518      	str	r5, [sp, #96]	; 0x60
 80190a6:	4682      	mov	sl, r0
 80190a8:	4689      	mov	r9, r1
 80190aa:	4693      	mov	fp, r2
 80190ac:	461d      	mov	r5, r3
 80190ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80190b2:	f10d 0e7c 	add.w	lr, sp, #124	; 0x7c
 80190b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80190ba:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80190be:	9e69      	ldr	r6, [sp, #420]	; 0x1a4
 80190c0:	ed8d 1a19 	vstr	s2, [sp, #100]	; 0x64
 80190c4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80190c8:	e9dd 0156 	ldrd	r0, r1, [sp, #344]	; 0x158
 80190cc:	eeb0 ea40 	vmov.f32	s28, s0
 80190d0:	eeb0 8a60 	vmov.f32	s16, s1
 80190d4:	eeb0 fa61 	vmov.f32	s30, s3
 80190d8:	eeb0 aa42 	vmov.f32	s20, s4
 80190dc:	eef0 aa62 	vmov.f32	s21, s5
 80190e0:	eeb0 ba43 	vmov.f32	s22, s6
 80190e4:	eef0 ba63 	vmov.f32	s23, s7
 80190e8:	f7e7 fd82 	bl	8000bf0 <__aeabi_d2f>
 80190ec:	f896 38cc 	ldrb.w	r3, [r6, #2252]	; 0x8cc
 80190f0:	9c54      	ldr	r4, [sp, #336]	; 0x150
 80190f2:	f89d 8164 	ldrb.w	r8, [sp, #356]	; 0x164
 80190f6:	9f64      	ldr	r7, [sp, #400]	; 0x190
 80190f8:	ee0d 0a90 	vmov	s27, r0
 80190fc:	b923      	cbnz	r3, 8019108 <SpacePointAlgorithm.isra.10+0x88>
 80190fe:	2200      	movs	r2, #0
 8019100:	2301      	movs	r3, #1
 8019102:	6032      	str	r2, [r6, #0]
 8019104:	f886 38cc 	strb.w	r3, [r6, #2252]	; 0x8cc
 8019108:	eddf 7ad7 	vldr	s15, [pc, #860]	; 8019468 <SpacePointAlgorithm.isra.10+0x3e8>
 801910c:	ee87 7a8e 	vdiv.f32	s14, s15, s28
 8019110:	ee17 0a10 	vmov	r0, s14
 8019114:	f7e7 fa20 	bl	8000558 <__aeabi_f2d>
 8019118:	ec41 0b10 	vmov	d0, r0, r1
 801911c:	f003 fa5c 	bl	801c5d8 <sqrt>
 8019120:	ec51 0b10 	vmov	r0, r1, d0
 8019124:	f7e7 fd64 	bl	8000bf0 <__aeabi_d2f>
 8019128:	ed9f 6ad0 	vldr	s12, [pc, #832]	; 801946c <SpacePointAlgorithm.isra.10+0x3ec>
 801912c:	ed95 7a01 	vldr	s14, [r5, #4]
 8019130:	edd5 6a00 	vldr	s13, [r5]
 8019134:	edd5 7a02 	vldr	s15, [r5, #8]
 8019138:	eddf 5acd 	vldr	s11, [pc, #820]	; 8019470 <SpacePointAlgorithm.isra.10+0x3f0>
 801913c:	ed9d 9a20 	vldr	s18, [sp, #128]	; 0x80
 8019140:	ed9d da21 	vldr	s26, [sp, #132]	; 0x84
 8019144:	eddd ca22 	vldr	s25, [sp, #136]	; 0x88
 8019148:	ed9d ca23 	vldr	s24, [sp, #140]	; 0x8c
 801914c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019150:	ee08 0a90 	vmov	s17, r0
 8019154:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019158:	ee67 7a86 	vmul.f32	s15, s15, s12
 801915c:	ed85 7a01 	vstr	s14, [r5, #4]
 8019160:	ed9d 7a24 	vldr	s14, [sp, #144]	; 0x90
 8019164:	edc5 6a00 	vstr	s13, [r5]
 8019168:	eec5 eaa8 	vdiv.f32	s29, s11, s17
 801916c:	ee28 9a89 	vmul.f32	s18, s17, s18
 8019170:	ee28 da8d 	vmul.f32	s26, s17, s26
 8019174:	ee68 caac 	vmul.f32	s25, s17, s25
 8019178:	ee28 ca8c 	vmul.f32	s24, s17, s24
 801917c:	edc5 7a02 	vstr	s15, [r5, #8]
 8019180:	ee68 8a87 	vmul.f32	s17, s17, s14
 8019184:	f1b8 0f04 	cmp.w	r8, #4
 8019188:	d806      	bhi.n	8019198 <SpacePointAlgorithm.isra.10+0x118>
 801918a:	e8df f018 	tbh	[pc, r8, lsl #1]
 801918e:	0155      	.short	0x0155
 8019190:	014a0162 	.word	0x014a0162
 8019194:	012a0005 	.word	0x012a0005
 8019198:	eddf 7ab6 	vldr	s15, [pc, #728]	; 8019474 <SpacePointAlgorithm.isra.10+0x3f4>
 801919c:	eddf fab6 	vldr	s31, [pc, #728]	; 8019478 <SpacePointAlgorithm.isra.10+0x3f8>
 80191a0:	ee6d aaaa 	vmul.f32	s21, s27, s21
 80191a4:	ee2d ba8b 	vmul.f32	s22, s27, s22
 80191a8:	ee6d baab 	vmul.f32	s23, s27, s23
 80191ac:	ee6a aaa7 	vmul.f32	s21, s21, s15
 80191b0:	ee2b ba27 	vmul.f32	s22, s22, s15
 80191b4:	ee6b baa7 	vmul.f32	s23, s23, s15
 80191b8:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 80191bc:	2200      	movs	r2, #0
 80191be:	2300      	movs	r3, #0
 80191c0:	e9dd 015e 	ldrd	r0, r1, [sp, #376]	; 0x178
 80191c4:	f7e7 fc84 	bl	8000ad0 <__aeabi_dcmpeq>
 80191c8:	edd6 7a00 	vldr	s15, [r6]
 80191cc:	b168      	cbz	r0, 80191ea <SpacePointAlgorithm.isra.10+0x16a>
 80191ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80191d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191d6:	f340 8109 	ble.w	80193ec <SpacePointAlgorithm.isra.10+0x36c>
 80191da:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80191de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80191e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191e6:	f140 8101 	bpl.w	80193ec <SpacePointAlgorithm.isra.10+0x36c>
 80191ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80191ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 80191f2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80191f6:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80191fa:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 801947c <SpacePointAlgorithm.isra.10+0x3fc>
 80191fe:	edc6 7a00 	vstr	s15, [r6]
 8019202:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8019206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801920a:	bf54      	ite	pl
 801920c:	eec6 5a08 	vdivpl.f32	s11, s12, s16
 8019210:	eeb0 8a47 	vmovmi.f32	s16, s14
 8019214:	ee28 7a0a 	vmul.f32	s14, s16, s20
 8019218:	eddf 7a99 	vldr	s15, [pc, #612]	; 8019480 <SpacePointAlgorithm.isra.10+0x400>
 801921c:	bf48      	it	mi
 801921e:	eef1 5a04 	vmovmi.f32	s11, #20	; 0x40a00000  5.0
 8019222:	ee6e eaa5 	vmul.f32	s29, s29, s11
 8019226:	ee28 9a09 	vmul.f32	s18, s16, s18
 801922a:	ee28 da0d 	vmul.f32	s26, s16, s26
 801922e:	ee27 ca0c 	vmul.f32	s24, s14, s24
 8019232:	ee69 9aac 	vmul.f32	s19, s19, s25
 8019236:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801923a:	edd4 5a09 	vldr	s11, [r4, #36]	; 0x24
 801923e:	edd9 7a00 	vldr	s15, [r9]
 8019242:	ed94 6a00 	vldr	s12, [r4]
 8019246:	ed94 7a01 	vldr	s14, [r4, #4]
 801924a:	edd9 4a01 	vldr	s9, [r9, #4]
 801924e:	edd9 3a02 	vldr	s7, [r9, #8]
 8019252:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 8019256:	ed94 3a05 	vldr	s6, [r4, #20]
 801925a:	ed9f 4a8a 	vldr	s8, [pc, #552]	; 8019484 <SpacePointAlgorithm.isra.10+0x404>
 801925e:	ed8d 9a2e 	vstr	s18, [sp, #184]	; 0xb8
 8019262:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8019266:	edd4 5a02 	vldr	s11, [r4, #8]
 801926a:	ed8d 9a2f 	vstr	s18, [sp, #188]	; 0xbc
 801926e:	ee27 6a86 	vmul.f32	s12, s15, s12
 8019272:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019276:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801927a:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 801927e:	ed8d 9a30 	vstr	s18, [sp, #192]	; 0xc0
 8019282:	ee34 5ac5 	vsub.f32	s10, s9, s10
 8019286:	ee73 5ae5 	vsub.f32	s11, s7, s11
 801928a:	edd4 4a03 	vldr	s9, [r4, #12]
 801928e:	edd4 3a04 	vldr	s7, [r4, #16]
 8019292:	ed8d da31 	vstr	s26, [sp, #196]	; 0xc4
 8019296:	ee65 3a23 	vmul.f32	s7, s10, s7
 801929a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801929e:	ee36 6a04 	vadd.f32	s12, s12, s8
 80192a2:	ee25 5a03 	vmul.f32	s10, s10, s6
 80192a6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80192aa:	ee37 7a04 	vadd.f32	s14, s14, s8
 80192ae:	ee36 6a24 	vadd.f32	s12, s12, s9
 80192b2:	ed94 4a06 	vldr	s8, [r4, #24]
 80192b6:	edd4 4a07 	vldr	s9, [r4, #28]
 80192ba:	ed8d da32 	vstr	s26, [sp, #200]	; 0xc8
 80192be:	ee77 7a85 	vadd.f32	s15, s15, s10
 80192c2:	ed94 5a08 	vldr	s10, [r4, #32]
 80192c6:	ed8d da33 	vstr	s26, [sp, #204]	; 0xcc
 80192ca:	ee25 4a84 	vmul.f32	s8, s11, s8
 80192ce:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80192d2:	ee37 7a23 	vadd.f32	s14, s14, s7
 80192d6:	ee65 5a85 	vmul.f32	s11, s11, s10
 80192da:	eeb7 5a08 	vmov.f32	s10, #120	; 0x3fc00000  1.5
 80192de:	ee37 7a24 	vadd.f32	s14, s14, s9
 80192e2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80192e6:	ee36 6a04 	vadd.f32	s12, s12, s8
 80192ea:	ee2a aa05 	vmul.f32	s20, s20, s10
 80192ee:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 80192f2:	ed8d 7a1d 	vstr	s14, [sp, #116]	; 0x74
 80192f6:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 80192fa:	edcd 9a34 	vstr	s19, [sp, #208]	; 0xd0
 80192fe:	edcd 9a35 	vstr	s19, [sp, #212]	; 0xd4
 8019302:	edcd 9a36 	vstr	s19, [sp, #216]	; 0xd8
 8019306:	ed8d ca37 	vstr	s24, [sp, #220]	; 0xdc
 801930a:	edcd 8a38 	vstr	s17, [sp, #224]	; 0xe0
 801930e:	edcd ea25 	vstr	s29, [sp, #148]	; 0x94
 8019312:	edcd ea26 	vstr	s29, [sp, #152]	; 0x98
 8019316:	ed8d aa39 	vstr	s20, [sp, #228]	; 0xe4
 801931a:	edcd ea27 	vstr	s29, [sp, #156]	; 0x9c
 801931e:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
 8019322:	9612      	str	r6, [sp, #72]	; 0x48
 8019324:	9e68      	ldr	r6, [sp, #416]	; 0x1a0
 8019326:	9611      	str	r6, [sp, #68]	; 0x44
 8019328:	9e67      	ldr	r6, [sp, #412]	; 0x19c
 801932a:	9610      	str	r6, [sp, #64]	; 0x40
 801932c:	9e66      	ldr	r6, [sp, #408]	; 0x198
 801932e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019332:	ed8d 7b08 	vstr	d7, [sp, #32]
 8019336:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801933a:	960f      	str	r6, [sp, #60]	; 0x3c
 801933c:	ed9d 7b5e 	vldr	d7, [sp, #376]	; 0x178
 8019340:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 8019342:	f88d 8068 	strb.w	r8, [sp, #104]	; 0x68
 8019346:	462b      	mov	r3, r5
 8019348:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
 801934c:	960c      	str	r6, [sp, #48]	; 0x30
 801934e:	ad1a      	add	r5, sp, #104	; 0x68
 8019350:	9e62      	ldr	r6, [sp, #392]	; 0x188
 8019352:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019354:	9504      	str	r5, [sp, #16]
 8019356:	4650      	mov	r0, sl
 8019358:	ac25      	add	r4, sp, #148	; 0x94
 801935a:	f88d 8069 	strb.w	r8, [sp, #105]	; 0x69
 801935e:	960b      	str	r6, [sp, #44]	; 0x2c
 8019360:	f89d 8060 	ldrb.w	r8, [sp, #96]	; 0x60
 8019364:	9e55      	ldr	r6, [sp, #340]	; 0x154
 8019366:	f8df e130 	ldr.w	lr, [pc, #304]	; 8019498 <SpacePointAlgorithm.isra.10+0x418>
 801936a:	f8df c130 	ldr.w	ip, [pc, #304]	; 801949c <SpacePointAlgorithm.isra.10+0x41c>
 801936e:	9102      	str	r1, [sp, #8]
 8019370:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 8019374:	ad1b      	add	r5, sp, #108	; 0x6c
 8019376:	465a      	mov	r2, fp
 8019378:	ed8d 7b06 	vstr	d7, [sp, #24]
 801937c:	eeb0 2a6d 	vmov.f32	s4, s27
 8019380:	eef0 1a4e 	vmov.f32	s3, s28
 8019384:	eeb0 1a6b 	vmov.f32	s2, s23
 8019388:	eef0 0a4b 	vmov.f32	s1, s22
 801938c:	eeb0 0a6a 	vmov.f32	s0, s21
 8019390:	a91c      	add	r1, sp, #112	; 0x70
 8019392:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80194a0 <SpacePointAlgorithm.isra.10+0x420>
 8019396:	9401      	str	r4, [sp, #4]
 8019398:	f8cd a000 	str.w	sl, [sp]
 801939c:	edcd fa28 	vstr	s31, [sp, #160]	; 0xa0
 80193a0:	edcd fa29 	vstr	s31, [sp, #164]	; 0xa4
 80193a4:	edcd fa2a 	vstr	s31, [sp, #168]	; 0xa8
 80193a8:	f88d 806a 	strb.w	r8, [sp, #106]	; 0x6a
 80193ac:	970e      	str	r7, [sp, #56]	; 0x38
 80193ae:	960a      	str	r6, [sp, #40]	; 0x28
 80193b0:	950d      	str	r5, [sp, #52]	; 0x34
 80193b2:	f8cd e0ac 	str.w	lr, [sp, #172]	; 0xac
 80193b6:	f8cd c0b0 	str.w	ip, [sp, #176]	; 0xb0
 80193ba:	f8cd 90b4 	str.w	r9, [sp, #180]	; 0xb4
 80193be:	f7fb fe3b 	bl	8015038 <m_kalman_3gyro.isra.9.constprop.47>
 80193c2:	4621      	mov	r1, r4
 80193c4:	9862      	ldr	r0, [sp, #392]	; 0x188
 80193c6:	f7f7 fc49 	bl	8010c5c <m_q2dcm_eml>
 80193ca:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	6013      	str	r3, [r2, #0]
 80193d0:	693b      	ldr	r3, [r7, #16]
 80193d2:	6053      	str	r3, [r2, #4]
 80193d4:	697b      	ldr	r3, [r7, #20]
 80193d6:	6093      	str	r3, [r2, #8]
 80193d8:	b03b      	add	sp, #236	; 0xec
 80193da:	ecbd 8b10 	vpop	{d8-d15}
 80193de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193e2:	eddf fa29 	vldr	s31, [pc, #164]	; 8019488 <SpacePointAlgorithm.isra.10+0x408>
 80193e6:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 80193ea:	e6e7      	b.n	80191bc <SpacePointAlgorithm.isra.10+0x13c>
 80193ec:	eddf 7a27 	vldr	s15, [pc, #156]	; 801948c <SpacePointAlgorithm.isra.10+0x40c>
 80193f0:	eddd 6a19 	vldr	s13, [sp, #100]	; 0x64
 80193f4:	ee3f fa27 	vadd.f32	s30, s30, s15
 80193f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80193fc:	ee87 7a8f 	vdiv.f32	s14, s15, s30
 8019400:	2300      	movs	r3, #0
 8019402:	6033      	str	r3, [r6, #0]
 8019404:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8019480 <SpacePointAlgorithm.isra.10+0x400>
 8019408:	ee29 9a26 	vmul.f32	s18, s18, s13
 801940c:	ee28 da0d 	vmul.f32	s26, s16, s26
 8019410:	ee69 9aac 	vmul.f32	s19, s19, s25
 8019414:	ee2a ca0c 	vmul.f32	s24, s20, s24
 8019418:	ee67 ea2e 	vmul.f32	s29, s14, s29
 801941c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8019420:	e70b      	b.n	801923a <SpacePointAlgorithm.isra.10+0x1ba>
 8019422:	ee6a aaad 	vmul.f32	s21, s21, s27
 8019426:	ee2b ba2d 	vmul.f32	s22, s22, s27
 801942a:	ee6b baad 	vmul.f32	s23, s23, s27
 801942e:	eddf fa18 	vldr	s31, [pc, #96]	; 8019490 <SpacePointAlgorithm.isra.10+0x410>
 8019432:	eef1 9a04 	vmov.f32	s19, #20	; 0x40a00000  5.0
 8019436:	e6c1      	b.n	80191bc <SpacePointAlgorithm.isra.10+0x13c>
 8019438:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801943c:	eeca aaa7 	vdiv.f32	s21, s21, s15
 8019440:	ee8b ba27 	vdiv.f32	s22, s22, s15
 8019444:	eecb baa7 	vdiv.f32	s23, s23, s15
 8019448:	eddf fa0b 	vldr	s31, [pc, #44]	; 8019478 <SpacePointAlgorithm.isra.10+0x3f8>
 801944c:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8019450:	e6b4      	b.n	80191bc <SpacePointAlgorithm.isra.10+0x13c>
 8019452:	ee6a aaad 	vmul.f32	s21, s21, s27
 8019456:	ee2b ba2d 	vmul.f32	s22, s22, s27
 801945a:	ee6b baad 	vmul.f32	s23, s23, s27
 801945e:	eddf fa0a 	vldr	s31, [pc, #40]	; 8019488 <SpacePointAlgorithm.isra.10+0x408>
 8019462:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8019466:	e6a9      	b.n	80191bc <SpacePointAlgorithm.isra.10+0x13c>
 8019468:	3c03126f 	.word	0x3c03126f
 801946c:	3c8efa35 	.word	0x3c8efa35
 8019470:	3b656042 	.word	0x3b656042
 8019474:	42c80000 	.word	0x42c80000
 8019478:	3a83126f 	.word	0x3a83126f
 801947c:	3e4ccccd 	.word	0x3e4ccccd
 8019480:	3f333333 	.word	0x3f333333
 8019484:	00000000 	.word	0x00000000
 8019488:	3ac49ba6 	.word	0x3ac49ba6
 801948c:	358637bd 	.word	0x358637bd
 8019490:	3727c5ac 	.word	0x3727c5ac
 8019494:	08021c50 	.word	0x08021c50
 8019498:	3b449ba6 	.word	0x3b449ba6
 801949c:	3c23d70a 	.word	0x3c23d70a
 80194a0:	3a9d4952 	.word	0x3a9d4952

080194a4 <iNemo_update_6X.constprop.45>:
 80194a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194a8:	4ce3      	ldr	r4, [pc, #908]	; (8019838 <iNemo_update_6X.constprop.45+0x394>)
 80194aa:	f8df 83a0 	ldr.w	r8, [pc, #928]	; 801984c <iNemo_update_6X.constprop.45+0x3a8>
 80194ae:	f994 33f4 	ldrsb.w	r3, [r4, #1012]	; 0x3f4
 80194b2:	f994 23fc 	ldrsb.w	r2, [r4, #1020]	; 0x3fc
 80194b6:	f994 1413 	ldrsb.w	r1, [r4, #1043]	; 0x413
 80194ba:	ee05 3a90 	vmov	s11, r3
 80194be:	f994 33f5 	ldrsb.w	r3, [r4, #1013]	; 0x3f5
 80194c2:	ee01 3a10 	vmov	s2, r3
 80194c6:	f994 33f7 	ldrsb.w	r3, [r4, #1015]	; 0x3f7
 80194ca:	ee01 3a90 	vmov	s3, r3
 80194ce:	f994 33f8 	ldrsb.w	r3, [r4, #1016]	; 0x3f8
 80194d2:	ee07 3a90 	vmov	s15, r3
 80194d6:	f994 340f 	ldrsb.w	r3, [r4, #1039]	; 0x40f
 80194da:	ee06 3a90 	vmov	s13, r3
 80194de:	f994 3410 	ldrsb.w	r3, [r4, #1040]	; 0x410
 80194e2:	ed2d 8b08 	vpush	{d8-d11}
 80194e6:	ee0a 3a10 	vmov	s20, r3
 80194ea:	f994 340c 	ldrsb.w	r3, [r4, #1036]	; 0x40c
 80194ee:	ee07 3a10 	vmov	s14, r3
 80194f2:	f994 33f6 	ldrsb.w	r3, [r4, #1014]	; 0x3f6
 80194f6:	ee02 3a90 	vmov	s5, r3
 80194fa:	f994 340d 	ldrsb.w	r3, [r4, #1037]	; 0x40d
 80194fe:	ee08 3a90 	vmov	s17, r3
 8019502:	f994 33f9 	ldrsb.w	r3, [r4, #1017]	; 0x3f9
 8019506:	ee03 3a90 	vmov	s7, r3
 801950a:	f994 33fa 	ldrsb.w	r3, [r4, #1018]	; 0x3fa
 801950e:	ee09 3a10 	vmov	s18, r3
 8019512:	f994 33fb 	ldrsb.w	r3, [r4, #1019]	; 0x3fb
 8019516:	ee04 3a10 	vmov	s8, r3
 801951a:	f994 3411 	ldrsb.w	r3, [r4, #1041]	; 0x411
 801951e:	ee04 3a90 	vmov	s9, r3
 8019522:	f994 340e 	ldrsb.w	r3, [r4, #1038]	; 0x40e
 8019526:	f204 45c4 	addw	r5, r4, #1220	; 0x4c4
 801952a:	ed95 ba06 	vldr	s22, [r5, #24]
 801952e:	edd5 aa07 	vldr	s21, [r5, #28]
 8019532:	edd5 9a09 	vldr	s19, [r5, #36]	; 0x24
 8019536:	edd5 0a0a 	vldr	s1, [r5, #40]	; 0x28
 801953a:	ed95 2a08 	vldr	s4, [r5, #32]
 801953e:	ed95 3a0b 	vldr	s6, [r5, #44]	; 0x2c
 8019542:	ee05 3a10 	vmov	s10, r3
 8019546:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801954a:	f994 3412 	ldrsb.w	r3, [r4, #1042]	; 0x412
 801954e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019552:	ee08 3a10 	vmov	s16, r3
 8019556:	ee67 7aaa 	vmul.f32	s15, s15, s21
 801955a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 801955e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019562:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8019566:	ee27 7a29 	vmul.f32	s14, s14, s19
 801956a:	ee31 6aa7 	vadd.f32	s12, s3, s15
 801956e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019572:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 8019576:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 801957a:	ee68 8aa0 	vmul.f32	s17, s17, s1
 801957e:	ee66 6aa9 	vmul.f32	s13, s13, s19
 8019582:	f994 3414 	ldrsb.w	r3, [r4, #1044]	; 0x414
 8019586:	ee77 8a28 	vadd.f32	s17, s14, s17
 801958a:	ee27 8aa9 	vmul.f32	s16, s15, s19
 801958e:	ee07 1a10 	vmov	s14, r1
 8019592:	ee07 2a90 	vmov	s15, r2
 8019596:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801959a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801959e:	ee2a aa20 	vmul.f32	s20, s20, s1
 80195a2:	ee65 5a8b 	vmul.f32	s11, s11, s22
 80195a6:	ee21 1a2a 	vmul.f32	s2, s2, s21
 80195aa:	ee36 aa8a 	vadd.f32	s20, s13, s20
 80195ae:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80195b2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80195b6:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80195ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80195be:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 80195c2:	ee07 3a90 	vmov	s15, r3
 80195c6:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80195ca:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80195ce:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80195d2:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80195d6:	ee24 4a2a 	vmul.f32	s8, s8, s21
 80195da:	ee75 5a81 	vadd.f32	s11, s11, s2
 80195de:	ee62 2a82 	vmul.f32	s5, s5, s4
 80195e2:	ee63 3a82 	vmul.f32	s7, s7, s4
 80195e6:	ee64 4a83 	vmul.f32	s9, s9, s6
 80195ea:	ee25 5a03 	vmul.f32	s10, s10, s6
 80195ee:	ee66 6aa0 	vmul.f32	s13, s13, s1
 80195f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80195f6:	b0e5      	sub	sp, #404	; 0x194
 80195f8:	af16      	add	r7, sp, #88	; 0x58
 80195fa:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80195fe:	ee36 6a23 	vadd.f32	s12, s12, s7
 8019602:	ee39 9a04 	vadd.f32	s18, s18, s8
 8019606:	ee27 7a02 	vmul.f32	s14, s14, s4
 801960a:	ee3a aa24 	vadd.f32	s20, s20, s9
 801960e:	ee78 8a85 	vadd.f32	s17, s17, s10
 8019612:	ee38 8a26 	vadd.f32	s16, s16, s13
 8019616:	ee67 7a83 	vmul.f32	s15, s15, s6
 801961a:	f898 200c 	ldrb.w	r2, [r8, #12]
 801961e:	2300      	movs	r3, #0
 8019620:	eef0 ba40 	vmov.f32	s23, s0
 8019624:	4681      	mov	r9, r0
 8019626:	eef1 aa65 	vneg.f32	s21, s11
 801962a:	ee39 9a07 	vadd.f32	s18, s18, s14
 801962e:	eeb1 ba46 	vneg.f32	s22, s12
 8019632:	eeb1 aa4a 	vneg.f32	s20, s20
 8019636:	eef1 8a68 	vneg.f32	s17, s17
 801963a:	ee38 8a27 	vadd.f32	s16, s16, s15
 801963e:	603b      	str	r3, [r7, #0]
 8019640:	607b      	str	r3, [r7, #4]
 8019642:	60bb      	str	r3, [r7, #8]
 8019644:	2a00      	cmp	r2, #0
 8019646:	f040 8107 	bne.w	8019858 <iNemo_update_6X.constprop.45+0x3b4>
 801964a:	f8df a204 	ldr.w	sl, [pc, #516]	; 8019850 <iNemo_update_6X.constprop.45+0x3ac>
 801964e:	f8df b204 	ldr.w	fp, [pc, #516]	; 8019854 <iNemo_update_6X.constprop.45+0x3b0>
 8019652:	f894 25f5 	ldrb.w	r2, [r4, #1525]	; 0x5f5
 8019656:	f894 35f4 	ldrb.w	r3, [r4, #1524]	; 0x5f4
 801965a:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 801965c:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
 8019660:	ee09 2a90 	vmov	s19, r2
 8019664:	4975      	ldr	r1, [pc, #468]	; (801983c <iNemo_update_6X.constprop.45+0x398>)
 8019666:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8019668:	f8d5 6080 	ldr.w	r6, [r5, #128]	; 0x80
 801966c:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 8019670:	f043 0302 	orr.w	r3, r3, #2
 8019674:	22f8      	movs	r2, #248	; 0xf8
 8019676:	f8d5 e084 	ldr.w	lr, [r5, #132]	; 0x84
 801967a:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
 801967e:	f083 0301 	eor.w	r3, r3, #1
 8019682:	188e      	adds	r6, r1, r2
 8019684:	a826      	add	r0, sp, #152	; 0x98
 8019686:	f884 35f4 	strb.w	r3, [r4, #1524]	; 0x5f4
 801968a:	f8c5 e094 	str.w	lr, [r5, #148]	; 0x94
 801968e:	f005 fb67 	bl	801ed60 <memcpy>
 8019692:	f506 7e9b 	add.w	lr, r6, #310	; 0x136
 8019696:	6a30      	ldr	r0, [r6, #32]
 8019698:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 801969c:	2300      	movs	r3, #0
 801969e:	f506 7c9a 	add.w	ip, r6, #308	; 0x134
 80196a2:	f1a6 0e30 	sub.w	lr, r6, #48	; 0x30
 80196a6:	f206 1235 	addw	r2, r6, #309	; 0x135
 80196aa:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 80196ae:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 80196b2:	9213      	str	r2, [sp, #76]	; 0x4c
 80196b4:	9711      	str	r7, [sp, #68]	; 0x44
 80196b6:	aa1d      	add	r2, sp, #116	; 0x74
 80196b8:	632b      	str	r3, [r5, #48]	; 0x30
 80196ba:	636b      	str	r3, [r5, #52]	; 0x34
 80196bc:	63ab      	str	r3, [r5, #56]	; 0x38
 80196be:	4960      	ldr	r1, [pc, #384]	; (8019840 <iNemo_update_6X.constprop.45+0x39c>)
 80196c0:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
 80196c4:	f10d 0a64 	add.w	sl, sp, #100	; 0x64
 80196c8:	932a      	str	r3, [sp, #168]	; 0xa8
 80196ca:	9210      	str	r2, [sp, #64]	; 0x40
 80196cc:	ed8d ba2c 	vstr	s22, [sp, #176]	; 0xb0
 80196d0:	edcd aa2d 	vstr	s21, [sp, #180]	; 0xb4
 80196d4:	ed8d 9a2e 	vstr	s18, [sp, #184]	; 0xb8
 80196d8:	ed8d aa2f 	vstr	s20, [sp, #188]	; 0xbc
 80196dc:	edcd 8a30 	vstr	s17, [sp, #192]	; 0xc0
 80196e0:	ed8d 8a31 	vstr	s16, [sp, #196]	; 0xc4
 80196e4:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
 80196e8:	9115      	str	r1, [sp, #84]	; 0x54
 80196ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80196ee:	f7e6 ff33 	bl	8000558 <__aeabi_f2d>
 80196f2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80196f6:	f894 05d6 	ldrb.w	r0, [r4, #1494]	; 0x5d6
 80196fa:	ed96 ba0b 	vldr	s22, [r6, #44]	; 0x2c
 80196fe:	edd6 aa0a 	vldr	s21, [r6, #40]	; 0x28
 8019702:	ed96 aa03 	vldr	s20, [r6, #12]
 8019706:	ed96 9a02 	vldr	s18, [r6, #8]
 801970a:	edd6 8a01 	vldr	s17, [r6, #4]
 801970e:	ed96 8a00 	vldr	s16, [r6]
 8019712:	f7e6 feff 	bl	8000514 <__aeabi_ui2d>
 8019716:	eef8 9a69 	vcvt.f32.u32	s19, s19
 801971a:	f894 35d4 	ldrb.w	r3, [r4, #1492]	; 0x5d4
 801971e:	f894 e5d2 	ldrb.w	lr, [r4, #1490]	; 0x5d2
 8019722:	f894 25d1 	ldrb.w	r2, [r4, #1489]	; 0x5d1
 8019726:	f894 c5d3 	ldrb.w	ip, [r4, #1491]	; 0x5d3
 801972a:	ee69 9aab 	vmul.f32	s19, s19, s23
 801972e:	edd6 ba0c 	vldr	s23, [r6, #48]	; 0x30
 8019732:	9308      	str	r3, [sp, #32]
 8019734:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019738:	f894 35d0 	ldrb.w	r3, [r4, #1488]	; 0x5d0
 801973c:	6930      	ldr	r0, [r6, #16]
 801973e:	f8cd e018 	str.w	lr, [sp, #24]
 8019742:	9205      	str	r2, [sp, #20]
 8019744:	9304      	str	r3, [sp, #16]
 8019746:	f8cd c01c 	str.w	ip, [sp, #28]
 801974a:	f7e6 ff05 	bl	8000558 <__aeabi_f2d>
 801974e:	ae35      	add	r6, sp, #212	; 0xd4
 8019750:	f50d 7e82 	add.w	lr, sp, #260	; 0x104
 8019754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019758:	eeb0 0a69 	vmov.f32	s0, s19
 801975c:	eef0 3a6b 	vmov.f32	s7, s23
 8019760:	eeb0 3a4b 	vmov.f32	s6, s22
 8019764:	eef0 2a6a 	vmov.f32	s5, s21
 8019768:	eeb0 2a4a 	vmov.f32	s4, s20
 801976c:	eef0 1a49 	vmov.f32	s3, s18
 8019770:	eeb0 1a68 	vmov.f32	s2, s17
 8019774:	eef0 0a48 	vmov.f32	s1, s16
 8019778:	ab32      	add	r3, sp, #200	; 0xc8
 801977a:	aa2c      	add	r2, sp, #176	; 0xb0
 801977c:	a929      	add	r1, sp, #164	; 0xa4
 801977e:	a848      	add	r0, sp, #288	; 0x120
 8019780:	e88d 4040 	stmia.w	sp, {r6, lr}
 8019784:	f7ff fc7c 	bl	8019080 <SpacePointAlgorithm.isra.10>
 8019788:	f1b9 0f00 	cmp.w	r9, #0
 801978c:	d00f      	beq.n	80197ae <iNemo_update_6X.constprop.45+0x30a>
 801978e:	f8da 2000 	ldr.w	r2, [sl]
 8019792:	f8da 3004 	ldr.w	r3, [sl, #4]
 8019796:	f8c9 2000 	str.w	r2, [r9]
 801979a:	f8c9 3004 	str.w	r3, [r9, #4]
 801979e:	f8da 2008 	ldr.w	r2, [sl, #8]
 80197a2:	f8da 300c 	ldr.w	r3, [sl, #12]
 80197a6:	f8c9 2008 	str.w	r2, [r9, #8]
 80197aa:	f8c9 300c 	str.w	r3, [r9, #12]
 80197ae:	4b25      	ldr	r3, [pc, #148]	; (8019844 <iNemo_update_6X.constprop.45+0x3a0>)
 80197b0:	f8d8 20f0 	ldr.w	r2, [r8, #240]	; 0xf0
 80197b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80197b8:	f894 26f2 	ldrb.w	r2, [r4, #1778]	; 0x6f2
 80197bc:	f8d8 10c8 	ldr.w	r1, [r8, #200]	; 0xc8
 80197c0:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
 80197c4:	2a01      	cmp	r2, #1
 80197c6:	f8d8 1118 	ldr.w	r1, [r8, #280]	; 0x118
 80197ca:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
 80197ce:	d066      	beq.n	801989e <iNemo_update_6X.constprop.45+0x3fa>
 80197d0:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8019848 <iNemo_update_6X.constprop.45+0x3a4>
 80197d4:	ed97 6a00 	vldr	s12, [r7]
 80197d8:	edd7 6a01 	vldr	s13, [r7, #4]
 80197dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80197e0:	f894 26f1 	ldrb.w	r2, [r4, #1777]	; 0x6f1
 80197e4:	ee26 5a27 	vmul.f32	s10, s12, s15
 80197e8:	ee66 5aa7 	vmul.f32	s11, s13, s15
 80197ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80197f0:	ed85 5a1b 	vstr	s10, [r5, #108]	; 0x6c
 80197f4:	edc5 5a1c 	vstr	s11, [r5, #112]	; 0x70
 80197f8:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 80197fc:	b13a      	cbz	r2, 801980e <iNemo_update_6X.constprop.45+0x36a>
 80197fe:	f894 2700 	ldrb.w	r2, [r4, #1792]	; 0x700
 8019802:	2a09      	cmp	r2, #9
 8019804:	d810      	bhi.n	8019828 <iNemo_update_6X.constprop.45+0x384>
 8019806:	3201      	adds	r2, #1
 8019808:	f884 2700 	strb.w	r2, [r4, #1792]	; 0x700
 801980c:	e001      	b.n	8019812 <iNemo_update_6X.constprop.45+0x36e>
 801980e:	f884 2700 	strb.w	r2, [r4, #1792]	; 0x700
 8019812:	f894 35f4 	ldrb.w	r3, [r4, #1524]	; 0x5f4
 8019816:	f083 0302 	eor.w	r3, r3, #2
 801981a:	f884 35f4 	strb.w	r3, [r4, #1524]	; 0x5f4
 801981e:	b065      	add	sp, #404	; 0x194
 8019820:	ecbd 8b08 	vpop	{d8-d11}
 8019824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019828:	ed83 6a22 	vstr	s12, [r3, #136]	; 0x88
 801982c:	edc3 6a23 	vstr	s13, [r3, #140]	; 0x8c
 8019830:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 8019834:	e7ed      	b.n	8019812 <iNemo_update_6X.constprop.45+0x36e>
 8019836:	bf00      	nop
 8019838:	20001698 	.word	0x20001698
 801983c:	20001b5c 	.word	0x20001b5c
 8019840:	20000010 	.word	0x20000010
 8019844:	20001c90 	.word	0x20001c90
 8019848:	42652ee1 	.word	0x42652ee1
 801984c:	20000000 	.word	0x20000000
 8019850:	bf333333 	.word	0xbf333333
 8019854:	3f333333 	.word	0x3f333333
 8019858:	ee65 5aa5 	vmul.f32	s11, s11, s11
 801985c:	ee26 6a06 	vmul.f32	s12, s12, s12
 8019860:	ee69 7a09 	vmul.f32	s15, s18, s18
 8019864:	ee36 6a25 	vadd.f32	s12, s12, s11
 8019868:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80198d8 <iNemo_update_6X.constprop.45+0x434>
 801986c:	f8df b06c 	ldr.w	fp, [pc, #108]	; 80198dc <iNemo_update_6X.constprop.45+0x438>
 8019870:	ee76 7a27 	vadd.f32	s15, s12, s15
 8019874:	ee17 0a90 	vmov	r0, s15
 8019878:	f7e6 fe6e 	bl	8000558 <__aeabi_f2d>
 801987c:	ec41 0b10 	vmov	d0, r0, r1
 8019880:	f002 feaa 	bl	801c5d8 <sqrt>
 8019884:	ec51 0b10 	vmov	r0, r1, d0
 8019888:	f7e7 f9b2 	bl	8000bf0 <__aeabi_d2f>
 801988c:	ee07 0a90 	vmov	s15, r0
 8019890:	ee8b ba27 	vdiv.f32	s22, s22, s15
 8019894:	eeca aaa7 	vdiv.f32	s21, s21, s15
 8019898:	ee89 9a27 	vdiv.f32	s18, s18, s15
 801989c:	e6d9      	b.n	8019652 <iNemo_update_6X.constprop.45+0x1ae>
 801989e:	f8da 2004 	ldr.w	r2, [sl, #4]
 80198a2:	f8da 6000 	ldr.w	r6, [sl]
 80198a6:	f8da 0008 	ldr.w	r0, [sl, #8]
 80198aa:	f8da 100c 	ldr.w	r1, [sl, #12]
 80198ae:	67ea      	str	r2, [r5, #124]	; 0x7c
 80198b0:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 80198b4:	2200      	movs	r2, #0
 80198b6:	67ae      	str	r6, [r5, #120]	; 0x78
 80198b8:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
 80198bc:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
 80198c0:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
 80198c4:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
 80198c8:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
 80198cc:	f884 25e0 	strb.w	r2, [r4, #1504]	; 0x5e0
 80198d0:	f888 200c 	strb.w	r2, [r8, #12]
 80198d4:	e77c      	b.n	80197d0 <iNemo_update_6X.constprop.45+0x32c>
 80198d6:	bf00      	nop
 80198d8:	bf3504f3 	.word	0xbf3504f3
 80198dc:	3f3504f3 	.word	0x3f3504f3

080198e0 <iNemo_update.constprop.46>:
 80198e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198e4:	4cee      	ldr	r4, [pc, #952]	; (8019ca0 <iNemo_update.constprop.46+0x3c0>)
 80198e6:	f994 33d0 	ldrsb.w	r3, [r4, #976]	; 0x3d0
 80198ea:	f994 b3e0 	ldrsb.w	fp, [r4, #992]	; 0x3e0
 80198ee:	f994 e3d2 	ldrsb.w	lr, [r4, #978]	; 0x3d2
 80198f2:	f994 63d5 	ldrsb.w	r6, [r4, #981]	; 0x3d5
 80198f6:	f994 c3d7 	ldrsb.w	ip, [r4, #983]	; 0x3d7
 80198fa:	f994 a3df 	ldrsb.w	sl, [r4, #991]	; 0x3df
 80198fe:	f994 93e1 	ldrsb.w	r9, [r4, #993]	; 0x3e1
 8019902:	ee02 3a10 	vmov	s4, r3
 8019906:	f994 33d1 	ldrsb.w	r3, [r4, #977]	; 0x3d1
 801990a:	ee05 3a90 	vmov	s11, r3
 801990e:	f994 33d3 	ldrsb.w	r3, [r4, #979]	; 0x3d3
 8019912:	ee02 3a90 	vmov	s5, r3
 8019916:	f994 33d4 	ldrsb.w	r3, [r4, #980]	; 0x3d4
 801991a:	ee06 3a10 	vmov	s12, r3
 801991e:	f994 33d6 	ldrsb.w	r3, [r4, #982]	; 0x3d6
 8019922:	ed2d 8b10 	vpush	{d8-d15}
 8019926:	ee0b 3a10 	vmov	s22, r3
 801992a:	f994 33d8 	ldrsb.w	r3, [r4, #984]	; 0x3d8
 801992e:	ee0c 3a90 	vmov	s25, r3
 8019932:	f994 33ee 	ldrsb.w	r3, [r4, #1006]	; 0x3ee
 8019936:	ee04 3a90 	vmov	s9, r3
 801993a:	f994 33ef 	ldrsb.w	r3, [r4, #1007]	; 0x3ef
 801993e:	ee0d 3a10 	vmov	s26, r3
 8019942:	f994 33f0 	ldrsb.w	r3, [r4, #1008]	; 0x3f0
 8019946:	ee0e 3a10 	vmov	s28, r3
 801994a:	f994 33dc 	ldrsb.w	r3, [r4, #988]	; 0x3dc
 801994e:	ee0d 3a90 	vmov	s27, r3
 8019952:	f994 33dd 	ldrsb.w	r3, [r4, #989]	; 0x3dd
 8019956:	ee05 3a10 	vmov	s10, r3
 801995a:	f994 33de 	ldrsb.w	r3, [r4, #990]	; 0x3de
 801995e:	ee0c 3a10 	vmov	s24, r3
 8019962:	f994 33e2 	ldrsb.w	r3, [r4, #994]	; 0x3e2
 8019966:	b0e7      	sub	sp, #412	; 0x19c
 8019968:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 801996c:	ee03 3a10 	vmov	s6, r3
 8019970:	f994 33e3 	ldrsb.w	r3, [r4, #995]	; 0x3e3
 8019974:	f204 7504 	addw	r5, r4, #1796	; 0x704
 8019978:	2200      	movs	r2, #0
 801997a:	edd5 aa06 	vldr	s21, [r5, #24]
 801997e:	ed95 aa07 	vldr	s20, [r5, #28]
 8019982:	ed95 9a08 	vldr	s18, [r5, #32]
 8019986:	edd5 9a09 	vldr	s19, [r5, #36]	; 0x24
 801998a:	edd5 8a0a 	vldr	s17, [r5, #40]	; 0x28
 801998e:	ed95 1a0b 	vldr	s2, [r5, #44]	; 0x2c
 8019992:	ed95 8a03 	vldr	s16, [r5, #12]
 8019996:	edd5 0a04 	vldr	s1, [r5, #16]
 801999a:	edd5 1a05 	vldr	s3, [r5, #20]
 801999e:	f8c8 2000 	str.w	r2, [r8]
 80199a2:	ee06 3a90 	vmov	s13, r3
 80199a6:	f8c8 2004 	str.w	r2, [r8, #4]
 80199aa:	f994 33eb 	ldrsb.w	r3, [r4, #1003]	; 0x3eb
 80199ae:	f994 73e4 	ldrsb.w	r7, [r4, #996]	; 0x3e4
 80199b2:	f994 13ed 	ldrsb.w	r1, [r4, #1005]	; 0x3ed
 80199b6:	f8c8 2008 	str.w	r2, [r8, #8]
 80199ba:	ee07 3a10 	vmov	s14, r3
 80199be:	f994 33ec 	ldrsb.w	r3, [r4, #1004]	; 0x3ec
 80199c2:	f994 23ea 	ldrsb.w	r2, [r4, #1002]	; 0x3ea
 80199c6:	ee03 3a90 	vmov	s7, r3
 80199ca:	f994 33e8 	ldrsb.w	r3, [r4, #1000]	; 0x3e8
 80199ce:	ee04 3a10 	vmov	s8, r3
 80199d2:	f994 33e9 	ldrsb.w	r3, [r4, #1001]	; 0x3e9
 80199d6:	ee07 3a90 	vmov	s15, r3
 80199da:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80199de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80199e2:	ee24 4a29 	vmul.f32	s8, s8, s19
 80199e6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80199ea:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80199ee:	ee74 7a27 	vadd.f32	s15, s8, s15
 80199f2:	ee04 ca10 	vmov	s8, ip
 80199f6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80199fa:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80199fe:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019a02:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019a06:	ee23 3a08 	vmul.f32	s6, s6, s16
 8019a0a:	ee65 5a8a 	vmul.f32	s11, s11, s20
 8019a0e:	ee26 6a0a 	vmul.f32	s12, s12, s20
 8019a12:	ee66 6aa0 	vmul.f32	s13, s13, s1
 8019a16:	ee24 aa0a 	vmul.f32	s20, s8, s20
 8019a1a:	ee04 7a10 	vmov	s8, r7
 8019a1e:	ee73 6a26 	vadd.f32	s13, s6, s13
 8019a22:	eeb8 3ac4 	vcvt.f32.s32	s6, s8
 8019a26:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8019a2a:	ee23 3a21 	vmul.f32	s6, s6, s3
 8019a2e:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8019a32:	ee22 2a2a 	vmul.f32	s4, s4, s21
 8019a36:	ee62 2aaa 	vmul.f32	s5, s5, s21
 8019a3a:	eef8 bac7 	vcvt.f32.s32	s23, s14
 8019a3e:	ee76 ea83 	vadd.f32	s29, s13, s6
 8019a42:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8019a46:	ee06 aa90 	vmov	s13, sl
 8019a4a:	ee2b 7aa9 	vmul.f32	s14, s23, s19
 8019a4e:	ee63 3aa8 	vmul.f32	s7, s7, s17
 8019a52:	ee72 5a25 	vadd.f32	s11, s4, s11
 8019a56:	ee32 6a86 	vadd.f32	s12, s5, s12
 8019a5a:	eef8 bae6 	vcvt.f32.s32	s23, s13
 8019a5e:	ee04 1a10 	vmov	s8, r1
 8019a62:	ee06 ba90 	vmov	s13, fp
 8019a66:	ee02 ea10 	vmov	s4, lr
 8019a6a:	ee02 6a90 	vmov	s5, r6
 8019a6e:	ee37 7a23 	vadd.f32	s14, s14, s7
 8019a72:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019a76:	eef8 3ac4 	vcvt.f32.s32	s7, s8
 8019a7a:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8019a7e:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8019a82:	ee04 2a10 	vmov	s8, r2
 8019a86:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8019a8a:	ee22 2a09 	vmul.f32	s4, s4, s18
 8019a8e:	ee62 2a89 	vmul.f32	s5, s5, s18
 8019a92:	ee25 5a20 	vmul.f32	s10, s10, s1
 8019a96:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8019a9a:	ee66 0aa0 	vmul.f32	s1, s13, s1
 8019a9e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8019aa2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8019aa6:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 8019aaa:	eef8 daed 	vcvt.f32.s32	s27, s27
 8019aae:	ee06 9a90 	vmov	s13, r9
 8019ab2:	ee2b ba2a 	vmul.f32	s22, s22, s21
 8019ab6:	ee63 3a81 	vmul.f32	s7, s7, s2
 8019aba:	ee35 2a82 	vadd.f32	s4, s11, s4
 8019abe:	ee76 2a22 	vadd.f32	s5, s12, s5
 8019ac2:	ee64 5a01 	vmul.f32	s11, s8, s2
 8019ac6:	ee6d da88 	vmul.f32	s27, s27, s16
 8019aca:	4b76      	ldr	r3, [pc, #472]	; (8019ca4 <iNemo_update.constprop.46+0x3c4>)
 8019acc:	ee2b 8a88 	vmul.f32	s16, s23, s16
 8019ad0:	eef8 caec 	vcvt.f32.s32	s25, s25
 8019ad4:	ee64 9aa9 	vmul.f32	s19, s9, s19
 8019ad8:	ee6d 8a28 	vmul.f32	s17, s26, s17
 8019adc:	eeb8 eace 	vcvt.f32.s32	s28, s28
 8019ae0:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 8019ae4:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8019ae8:	ee3b ba0a 	vadd.f32	s22, s22, s20
 8019aec:	ee2c 9a89 	vmul.f32	s18, s25, s18
 8019af0:	ee2c ca21 	vmul.f32	s24, s24, s3
 8019af4:	f893 38e0 	ldrb.w	r3, [r3, #2272]	; 0x8e0
 8019af8:	9317      	str	r3, [sp, #92]	; 0x5c
 8019afa:	ee37 7a23 	vadd.f32	s14, s14, s7
 8019afe:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8019b02:	ee79 8aa8 	vadd.f32	s17, s19, s17
 8019b06:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8019b0a:	ee7d da85 	vadd.f32	s27, s27, s10
 8019b0e:	ee38 8a20 	vadd.f32	s16, s16, s1
 8019b12:	ee66 1a21 	vmul.f32	s3, s12, s3
 8019b16:	ee3b ba09 	vadd.f32	s22, s22, s18
 8019b1a:	eeb0 aa40 	vmov.f32	s20, s0
 8019b1e:	4683      	mov	fp, r0
 8019b20:	eeb1 fa42 	vneg.f32	s30, s4
 8019b24:	eef1 aa62 	vneg.f32	s21, s5
 8019b28:	eeb1 9a6e 	vneg.f32	s18, s29
 8019b2c:	eef1 fa47 	vneg.f32	s31, s14
 8019b30:	eef1 ba67 	vneg.f32	s23, s15
 8019b34:	ee78 8a81 	vadd.f32	s17, s17, s2
 8019b38:	ee3d ca8c 	vadd.f32	s24, s27, s24
 8019b3c:	ee38 8a21 	vadd.f32	s16, s16, s3
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	f040 8131 	bne.w	8019da8 <iNemo_update.constprop.46+0x4c8>
 8019b46:	f894 2835 	ldrb.w	r2, [r4, #2101]	; 0x835
 8019b4a:	f894 3834 	ldrb.w	r3, [r4, #2100]	; 0x834
 8019b4e:	4e56      	ldr	r6, [pc, #344]	; (8019ca8 <iNemo_update.constprop.46+0x3c8>)
 8019b50:	4f56      	ldr	r7, [pc, #344]	; (8019cac <iNemo_update.constprop.46+0x3cc>)
 8019b52:	f8d5 c078 	ldr.w	ip, [r5, #120]	; 0x78
 8019b56:	f8d5 e07c 	ldr.w	lr, [r5, #124]	; 0x7c
 8019b5a:	f8c5 c088 	str.w	ip, [r5, #136]	; 0x88
 8019b5e:	ee09 2a90 	vmov	s19, r2
 8019b62:	f043 0302 	orr.w	r3, r3, #2
 8019b66:	f083 0301 	eor.w	r3, r3, #1
 8019b6a:	f8d5 c080 	ldr.w	ip, [r5, #128]	; 0x80
 8019b6e:	f8c5 e08c 	str.w	lr, [r5, #140]	; 0x8c
 8019b72:	f5a6 719a 	sub.w	r1, r6, #308	; 0x134
 8019b76:	f8d5 e084 	ldr.w	lr, [r5, #132]	; 0x84
 8019b7a:	f884 3834 	strb.w	r3, [r4, #2100]	; 0x834
 8019b7e:	22f8      	movs	r2, #248	; 0xf8
 8019b80:	a828      	add	r0, sp, #160	; 0xa0
 8019b82:	eef8 9a69 	vcvt.f32.u32	s19, s19
 8019b86:	f8c5 c090 	str.w	ip, [r5, #144]	; 0x90
 8019b8a:	f8c5 e094 	str.w	lr, [r5, #148]	; 0x94
 8019b8e:	f005 f8e7 	bl	801ed60 <memcpy>
 8019b92:	f8d7 e0b0 	ldr.w	lr, [r7, #176]	; 0xb0
 8019b96:	f8d7 c0ac 	ldr.w	ip, [r7, #172]	; 0xac
 8019b9a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8019b9e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8019ba2:	9715      	str	r7, [sp, #84]	; 0x54
 8019ba4:	f106 01fa 	add.w	r1, r6, #250	; 0xfa
 8019ba8:	f8c6 e050 	str.w	lr, [r6, #80]	; 0x50
 8019bac:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
 8019bb0:	6570      	str	r0, [r6, #84]	; 0x54
 8019bb2:	2200      	movs	r2, #0
 8019bb4:	f106 0cf9 	add.w	ip, r6, #249	; 0xf9
 8019bb8:	f106 03f8 	add.w	r3, r6, #248	; 0xf8
 8019bbc:	ee69 9a8a 	vmul.f32	s19, s19, s20
 8019bc0:	edcd aa2e 	vstr	s21, [sp, #184]	; 0xb8
 8019bc4:	ed16 aa0c 	vldr	s20, [r6, #-48]	; 0xffffffd0
 8019bc8:	ed56 aa05 	vldr	s21, [r6, #-20]	; 0xffffffec
 8019bcc:	ed8d ba30 	vstr	s22, [sp, #192]	; 0xc0
 8019bd0:	ed8d 8a2b 	vstr	s16, [sp, #172]	; 0xac
 8019bd4:	ed16 ba04 	vldr	s22, [r6, #-16]
 8019bd8:	ed16 8a0f 	vldr	s16, [r6, #-60]	; 0xffffffc4
 8019bdc:	ed8d 9a2d 	vstr	s18, [sp, #180]	; 0xb4
 8019be0:	edcd ba32 	vstr	s23, [sp, #200]	; 0xc8
 8019be4:	ed16 9a0d 	vldr	s18, [r6, #-52]	; 0xffffffcc
 8019be8:	ed56 ba03 	vldr	s23, [r6, #-12]
 8019bec:	edcd 8a33 	vstr	s17, [sp, #204]	; 0xcc
 8019bf0:	f1a6 006c 	sub.w	r0, r6, #108	; 0x6c
 8019bf4:	ed56 8a0e 	vldr	s17, [r6, #-56]	; 0xffffffc8
 8019bf8:	9114      	str	r1, [sp, #80]	; 0x50
 8019bfa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 8019bfe:	a91f      	add	r1, sp, #124	; 0x7c
 8019c00:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8019c04:	9312      	str	r3, [sp, #72]	; 0x48
 8019c06:	900f      	str	r0, [sp, #60]	; 0x3c
 8019c08:	ed8d fa2f 	vstr	s30, [sp, #188]	; 0xbc
 8019c0c:	632a      	str	r2, [r5, #48]	; 0x30
 8019c0e:	636a      	str	r2, [r5, #52]	; 0x34
 8019c10:	63aa      	str	r2, [r5, #56]	; 0x38
 8019c12:	ed8d ca2c 	vstr	s24, [sp, #176]	; 0xb0
 8019c16:	9110      	str	r1, [sp, #64]	; 0x40
 8019c18:	edcd fa31 	vstr	s31, [sp, #196]	; 0xc4
 8019c1c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019c20:	f856 0c1c 	ldr.w	r0, [r6, #-28]
 8019c24:	f7e6 fc98 	bl	8000558 <__aeabi_f2d>
 8019c28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019c2c:	f894 0816 	ldrb.w	r0, [r4, #2070]	; 0x816
 8019c30:	f7e6 fc70 	bl	8000514 <__aeabi_ui2d>
 8019c34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019c38:	f894 3814 	ldrb.w	r3, [r4, #2068]	; 0x814
 8019c3c:	9308      	str	r3, [sp, #32]
 8019c3e:	f856 0c2c 	ldr.w	r0, [r6, #-44]
 8019c42:	f894 e813 	ldrb.w	lr, [r4, #2067]	; 0x813
 8019c46:	f894 2812 	ldrb.w	r2, [r4, #2066]	; 0x812
 8019c4a:	f894 3810 	ldrb.w	r3, [r4, #2064]	; 0x810
 8019c4e:	f894 1811 	ldrb.w	r1, [r4, #2065]	; 0x811
 8019c52:	f8cd e01c 	str.w	lr, [sp, #28]
 8019c56:	9206      	str	r2, [sp, #24]
 8019c58:	9304      	str	r3, [sp, #16]
 8019c5a:	9105      	str	r1, [sp, #20]
 8019c5c:	f7e6 fc7c 	bl	8000558 <__aeabi_f2d>
 8019c60:	f50d 7c86 	add.w	ip, sp, #268	; 0x10c
 8019c64:	f10d 0edc 	add.w	lr, sp, #220	; 0xdc
 8019c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019c6c:	eef0 3a6b 	vmov.f32	s7, s23
 8019c70:	eeb0 3a4b 	vmov.f32	s6, s22
 8019c74:	eef0 2a6a 	vmov.f32	s5, s21
 8019c78:	eeb0 2a4a 	vmov.f32	s4, s20
 8019c7c:	eef0 1a49 	vmov.f32	s3, s18
 8019c80:	eeb0 1a68 	vmov.f32	s2, s17
 8019c84:	eef0 0a48 	vmov.f32	s1, s16
 8019c88:	eeb0 0a69 	vmov.f32	s0, s19
 8019c8c:	ab34      	add	r3, sp, #208	; 0xd0
 8019c8e:	aa2e      	add	r2, sp, #184	; 0xb8
 8019c90:	a92b      	add	r1, sp, #172	; 0xac
 8019c92:	a84a      	add	r0, sp, #296	; 0x128
 8019c94:	f8cd c004 	str.w	ip, [sp, #4]
 8019c98:	f8cd e000 	str.w	lr, [sp]
 8019c9c:	e008      	b.n	8019cb0 <iNemo_update.constprop.46+0x3d0>
 8019c9e:	bf00      	nop
 8019ca0:	20001698 	.word	0x20001698
 8019ca4:	20000000 	.word	0x20000000
 8019ca8:	20001ed0 	.word	0x20001ed0
 8019cac:	200008e8 	.word	0x200008e8
 8019cb0:	f7ff f9e6 	bl	8019080 <SpacePointAlgorithm.isra.10>
 8019cb4:	f1bb 0f00 	cmp.w	fp, #0
 8019cb8:	d00f      	beq.n	8019cda <iNemo_update.constprop.46+0x3fa>
 8019cba:	f8d9 2000 	ldr.w	r2, [r9]
 8019cbe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019cc2:	f8cb 2000 	str.w	r2, [fp]
 8019cc6:	f8cb 3004 	str.w	r3, [fp, #4]
 8019cca:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8019cce:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019cd2:	f8cb 2008 	str.w	r2, [fp, #8]
 8019cd6:	f8cb 300c 	str.w	r3, [fp, #12]
 8019cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8019cde:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
 8019ce2:	f894 3932 	ldrb.w	r3, [r4, #2354]	; 0x932
 8019ce6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8019cea:	f8c6 20fc 	str.w	r2, [r6, #252]	; 0xfc
 8019cee:	2b01      	cmp	r3, #1
 8019cf0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8019cf4:	f8c6 2104 	str.w	r2, [r6, #260]	; 0x104
 8019cf8:	f000 8093 	beq.w	8019e22 <iNemo_update.constprop.46+0x542>
 8019cfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019cfe:	f103 3aff 	add.w	sl, r3, #4294967295
 8019d02:	fa5f fa8a 	uxtb.w	sl, sl
 8019d06:	f1ba 0f08 	cmp.w	sl, #8
 8019d0a:	bf9c      	itt	ls
 8019d0c:	4b53      	ldrls	r3, [pc, #332]	; (8019e5c <iNemo_update.constprop.46+0x57c>)
 8019d0e:	f883 a8e0 	strbls.w	sl, [r3, #2272]	; 0x8e0
 8019d12:	eddf 7a53 	vldr	s15, [pc, #332]	; 8019e60 <iNemo_update.constprop.46+0x580>
 8019d16:	ed98 6a00 	vldr	s12, [r8]
 8019d1a:	edd8 6a01 	vldr	s13, [r8, #4]
 8019d1e:	ed98 7a02 	vldr	s14, [r8, #8]
 8019d22:	f894 3931 	ldrb.w	r3, [r4, #2353]	; 0x931
 8019d26:	ee26 5a27 	vmul.f32	s10, s12, s15
 8019d2a:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8019d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d32:	ed85 5a1b 	vstr	s10, [r5, #108]	; 0x6c
 8019d36:	edc5 5a1c 	vstr	s11, [r5, #112]	; 0x70
 8019d3a:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 8019d3e:	b13b      	cbz	r3, 8019d50 <iNemo_update.constprop.46+0x470>
 8019d40:	f894 3940 	ldrb.w	r3, [r4, #2368]	; 0x940
 8019d44:	2b09      	cmp	r3, #9
 8019d46:	d828      	bhi.n	8019d9a <iNemo_update.constprop.46+0x4ba>
 8019d48:	3301      	adds	r3, #1
 8019d4a:	f884 3940 	strb.w	r3, [r4, #2368]	; 0x940
 8019d4e:	e001      	b.n	8019d54 <iNemo_update.constprop.46+0x474>
 8019d50:	f884 3940 	strb.w	r3, [r4, #2368]	; 0x940
 8019d54:	f894 3834 	ldrb.w	r3, [r4, #2100]	; 0x834
 8019d58:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8019d5c:	f8d7 e098 	ldr.w	lr, [r7, #152]	; 0x98
 8019d60:	f8d7 509c 	ldr.w	r5, [r7, #156]	; 0x9c
 8019d64:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8019d68:	f8c6 20ac 	str.w	r2, [r6, #172]	; 0xac
 8019d6c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8019d70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8019d74:	f8c6 e0b0 	str.w	lr, [r6, #176]	; 0xb0
 8019d78:	f083 0302 	eor.w	r3, r3, #2
 8019d7c:	f884 3834 	strb.w	r3, [r4, #2100]	; 0x834
 8019d80:	f8c6 50b4 	str.w	r5, [r6, #180]	; 0xb4
 8019d84:	f8c6 00c4 	str.w	r0, [r6, #196]	; 0xc4
 8019d88:	f8c6 10c8 	str.w	r1, [r6, #200]	; 0xc8
 8019d8c:	f8c6 20cc 	str.w	r2, [r6, #204]	; 0xcc
 8019d90:	b067      	add	sp, #412	; 0x19c
 8019d92:	ecbd 8b10 	vpop	{d8-d15}
 8019d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d9a:	ed86 6a22 	vstr	s12, [r6, #136]	; 0x88
 8019d9e:	edc6 6a23 	vstr	s13, [r6, #140]	; 0x8c
 8019da2:	ed86 7a24 	vstr	s14, [r6, #144]	; 0x90
 8019da6:	e7d5      	b.n	8019d54 <iNemo_update.constprop.46+0x474>
 8019da8:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8019dac:	ee22 2a02 	vmul.f32	s4, s4, s4
 8019db0:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 8019db4:	ee32 2a82 	vadd.f32	s4, s5, s4
 8019db8:	ee72 7a27 	vadd.f32	s15, s4, s15
 8019dbc:	ee17 0a90 	vmov	r0, s15
 8019dc0:	f7e6 fbca 	bl	8000558 <__aeabi_f2d>
 8019dc4:	ec41 0b10 	vmov	d0, r0, r1
 8019dc8:	f002 fc06 	bl	801c5d8 <sqrt>
 8019dcc:	ec51 0b10 	vmov	r0, r1, d0
 8019dd0:	f7e6 ff0e 	bl	8000bf0 <__aeabi_d2f>
 8019dd4:	ee6c 6a0c 	vmul.f32	s13, s24, s24
 8019dd8:	ee28 7a08 	vmul.f32	s14, s16, s16
 8019ddc:	ee2e 3aae 	vmul.f32	s6, s29, s29
 8019de0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019de4:	ee07 0a90 	vmov	s15, r0
 8019de8:	ee37 7a03 	vadd.f32	s14, s14, s6
 8019dec:	eeca aaa7 	vdiv.f32	s21, s21, s15
 8019df0:	ee17 0a10 	vmov	r0, s14
 8019df4:	ee8f fa27 	vdiv.f32	s30, s30, s15
 8019df8:	ee8b ba27 	vdiv.f32	s22, s22, s15
 8019dfc:	f7e6 fbac 	bl	8000558 <__aeabi_f2d>
 8019e00:	ec41 0b10 	vmov	d0, r0, r1
 8019e04:	f002 fbe8 	bl	801c5d8 <sqrt>
 8019e08:	ec51 0b10 	vmov	r0, r1, d0
 8019e0c:	f7e6 fef0 	bl	8000bf0 <__aeabi_d2f>
 8019e10:	ee07 0a90 	vmov	s15, r0
 8019e14:	ee88 8a27 	vdiv.f32	s16, s16, s15
 8019e18:	ee8c ca27 	vdiv.f32	s24, s24, s15
 8019e1c:	ee89 9a27 	vdiv.f32	s18, s18, s15
 8019e20:	e691      	b.n	8019b46 <iNemo_update.constprop.46+0x266>
 8019e22:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8019e26:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019e2a:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
 8019e2e:	f8c5 2094 	str.w	r2, [r5, #148]	; 0x94
 8019e32:	4a0a      	ldr	r2, [pc, #40]	; (8019e5c <iNemo_update.constprop.46+0x57c>)
 8019e34:	f8d9 0000 	ldr.w	r0, [r9]
 8019e38:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8019e3c:	67eb      	str	r3, [r5, #124]	; 0x7c
 8019e3e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8019e42:	2300      	movs	r3, #0
 8019e44:	67a8      	str	r0, [r5, #120]	; 0x78
 8019e46:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
 8019e4a:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
 8019e4e:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
 8019e52:	f884 3820 	strb.w	r3, [r4, #2080]	; 0x820
 8019e56:	f882 38e0 	strb.w	r3, [r2, #2272]	; 0x8e0
 8019e5a:	e75a      	b.n	8019d12 <iNemo_update.constprop.46+0x432>
 8019e5c:	20000000 	.word	0x20000000
 8019e60:	42652ee1 	.word	0x42652ee1
 8019e64:	00000000 	.word	0x00000000

08019e68 <quatErr2EulerErr>:
 8019e68:	b570      	push	{r4, r5, r6, lr}
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	6013      	str	r3, [r2, #0]
 8019e6e:	6053      	str	r3, [r2, #4]
 8019e70:	6093      	str	r3, [r2, #8]
 8019e72:	ed2d 8b04 	vpush	{d8-d9}
 8019e76:	ed90 0a01 	vldr	s0, [r0, #4]
 8019e7a:	ed9f 8a7b 	vldr	s16, [pc, #492]	; 801a068 <quatErr2EulerErr+0x200>
 8019e7e:	4606      	mov	r6, r0
 8019e80:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019e84:	460c      	mov	r4, r1
 8019e86:	4615      	mov	r5, r2
 8019e88:	f002 f904 	bl	801c094 <cosf>
 8019e8c:	edd6 9a02 	vldr	s19, [r6, #8]
 8019e90:	ee69 9a88 	vmul.f32	s19, s19, s16
 8019e94:	eeb0 9a40 	vmov.f32	s18, s0
 8019e98:	eeb0 0a69 	vmov.f32	s0, s19
 8019e9c:	f002 f960 	bl	801c160 <sinf>
 8019ea0:	eef0 8a40 	vmov.f32	s17, s0
 8019ea4:	eeb0 0a69 	vmov.f32	s0, s19
 8019ea8:	f002 f8f4 	bl	801c094 <cosf>
 8019eac:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8019eb0:	ee20 8a00 	vmul.f32	s16, s0, s0
 8019eb4:	edd4 7a01 	vldr	s15, [r4, #4]
 8019eb8:	ed94 0a02 	vldr	s0, [r4, #8]
 8019ebc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8019ec0:	ee28 0a80 	vmul.f32	s0, s17, s0
 8019ec4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019ec8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8019ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ed0:	eef1 9ac0 	vsqrt.f32	s19, s0
 8019ed4:	f100 80b5 	bmi.w	801a042 <quatErr2EulerErr+0x1da>
 8019ed8:	ee79 9aa9 	vadd.f32	s19, s19, s19
 8019edc:	eddf 7a63 	vldr	s15, [pc, #396]	; 801a06c <quatErr2EulerErr+0x204>
 8019ee0:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8019ee4:	ee29 9a09 	vmul.f32	s18, s18, s18
 8019ee8:	ee17 0a90 	vmov	r0, s15
 8019eec:	f7e6 fb34 	bl	8000558 <__aeabi_f2d>
 8019ef0:	ed9f 1b57 	vldr	d1, [pc, #348]	; 801a050 <quatErr2EulerErr+0x1e8>
 8019ef4:	ec41 0b10 	vmov	d0, r0, r1
 8019ef8:	f002 f879 	bl	801bfee <fmin>
 8019efc:	ec51 0b10 	vmov	r0, r1, d0
 8019f00:	f7e6 fe76 	bl	8000bf0 <__aeabi_d2f>
 8019f04:	f7e6 fb28 	bl	8000558 <__aeabi_f2d>
 8019f08:	ed9f 1b53 	vldr	d1, [pc, #332]	; 801a058 <quatErr2EulerErr+0x1f0>
 8019f0c:	ec41 0b10 	vmov	d0, r0, r1
 8019f10:	f002 f846 	bl	801bfa0 <fmax>
 8019f14:	ec51 0b10 	vmov	r0, r1, d0
 8019f18:	f7e6 fe6a 	bl	8000bf0 <__aeabi_d2f>
 8019f1c:	6068      	str	r0, [r5, #4]
 8019f1e:	edd4 7a01 	vldr	s15, [r4, #4]
 8019f22:	ed94 7a02 	vldr	s14, [r4, #8]
 8019f26:	eddf 6a52 	vldr	s13, [pc, #328]	; 801a070 <quatErr2EulerErr+0x208>
 8019f2a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8019f2e:	ee28 7a07 	vmul.f32	s14, s16, s14
 8019f32:	ee39 9a26 	vadd.f32	s18, s18, s13
 8019f36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f3a:	ee87 0a89 	vdiv.f32	s0, s15, s18
 8019f3e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8019f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f46:	eeb1 9ac0 	vsqrt.f32	s18, s0
 8019f4a:	d477      	bmi.n	801a03c <quatErr2EulerErr+0x1d4>
 8019f4c:	ee39 9a09 	vadd.f32	s18, s18, s18
 8019f50:	eddf 7a46 	vldr	s15, [pc, #280]	; 801a06c <quatErr2EulerErr+0x204>
 8019f54:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019f58:	ee17 0a90 	vmov	r0, s15
 8019f5c:	f7e6 fafc 	bl	8000558 <__aeabi_f2d>
 8019f60:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 801a060 <quatErr2EulerErr+0x1f8>
 8019f64:	ec41 0b10 	vmov	d0, r0, r1
 8019f68:	f002 f841 	bl	801bfee <fmin>
 8019f6c:	ec51 0b10 	vmov	r0, r1, d0
 8019f70:	f7e6 fe3e 	bl	8000bf0 <__aeabi_d2f>
 8019f74:	f7e6 faf0 	bl	8000558 <__aeabi_f2d>
 8019f78:	ed9f 1b37 	vldr	d1, [pc, #220]	; 801a058 <quatErr2EulerErr+0x1f0>
 8019f7c:	ec41 0b10 	vmov	d0, r0, r1
 8019f80:	f002 f80e 	bl	801bfa0 <fmax>
 8019f84:	ec51 0b10 	vmov	r0, r1, d0
 8019f88:	f7e6 fe32 	bl	8000bf0 <__aeabi_d2f>
 8019f8c:	6028      	str	r0, [r5, #0]
 8019f8e:	ed96 0a01 	vldr	s0, [r6, #4]
 8019f92:	ed9f 6a35 	vldr	s12, [pc, #212]	; 801a068 <quatErr2EulerErr+0x200>
 8019f96:	ed94 7a02 	vldr	s14, [r4, #8]
 8019f9a:	edd4 6a01 	vldr	s13, [r4, #4]
 8019f9e:	eddf 7a35 	vldr	s15, [pc, #212]	; 801a074 <quatErr2EulerErr+0x20c>
 8019fa2:	ee20 0a06 	vmul.f32	s0, s0, s12
 8019fa6:	ee68 8a87 	vmul.f32	s17, s17, s14
 8019faa:	eeb0 7ac0 	vabs.f32	s14, s0
 8019fae:	ee28 8a26 	vmul.f32	s16, s16, s13
 8019fb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fba:	ee38 8a28 	vadd.f32	s16, s16, s17
 8019fbe:	d432      	bmi.n	801a026 <quatErr2EulerErr+0x1be>
 8019fc0:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801a078 <quatErr2EulerErr+0x210>
 8019fc4:	edd4 7a00 	vldr	s15, [r4]
 8019fc8:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019fcc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019fd0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8019fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fd8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8019fdc:	d434      	bmi.n	801a048 <quatErr2EulerErr+0x1e0>
 8019fde:	ee38 8a08 	vadd.f32	s16, s16, s16
 8019fe2:	eddf 7a22 	vldr	s15, [pc, #136]	; 801a06c <quatErr2EulerErr+0x204>
 8019fe6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8019fea:	ee17 0a90 	vmov	r0, s15
 8019fee:	f7e6 fab3 	bl	8000558 <__aeabi_f2d>
 8019ff2:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 801a060 <quatErr2EulerErr+0x1f8>
 8019ff6:	ec41 0b10 	vmov	d0, r0, r1
 8019ffa:	f001 fff8 	bl	801bfee <fmin>
 8019ffe:	ec51 0b10 	vmov	r0, r1, d0
 801a002:	f7e6 fdf5 	bl	8000bf0 <__aeabi_d2f>
 801a006:	f7e6 faa7 	bl	8000558 <__aeabi_f2d>
 801a00a:	ed9f 1b13 	vldr	d1, [pc, #76]	; 801a058 <quatErr2EulerErr+0x1f0>
 801a00e:	ec41 0b10 	vmov	d0, r0, r1
 801a012:	f001 ffc5 	bl	801bfa0 <fmax>
 801a016:	ec51 0b10 	vmov	r0, r1, d0
 801a01a:	f7e6 fde9 	bl	8000bf0 <__aeabi_d2f>
 801a01e:	ecbd 8b04 	vpop	{d8-d9}
 801a022:	60a8      	str	r0, [r5, #8]
 801a024:	bd70      	pop	{r4, r5, r6, pc}
 801a026:	f002 f8dd 	bl	801c1e4 <tanf>
 801a02a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801a02e:	edd4 7a00 	vldr	s15, [r4]
 801a032:	ee20 0a08 	vmul.f32	s0, s0, s16
 801a036:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a03a:	e7c9      	b.n	8019fd0 <quatErr2EulerErr+0x168>
 801a03c:	f002 fb7e 	bl	801c73c <sqrtf>
 801a040:	e784      	b.n	8019f4c <quatErr2EulerErr+0xe4>
 801a042:	f002 fb7b 	bl	801c73c <sqrtf>
 801a046:	e747      	b.n	8019ed8 <quatErr2EulerErr+0x70>
 801a048:	f002 fb78 	bl	801c73c <sqrtf>
 801a04c:	e7c7      	b.n	8019fde <quatErr2EulerErr+0x176>
 801a04e:	bf00      	nop
 801a050:	00000000 	.word	0x00000000
 801a054:	40568000 	.word	0x40568000
 801a058:	00000000 	.word	0x00000000
 801a05c:	3ff00000 	.word	0x3ff00000
 801a060:	00000000 	.word	0x00000000
 801a064:	40668000 	.word	0x40668000
 801a068:	3c8efa35 	.word	0x3c8efa35
 801a06c:	42652ee1 	.word	0x42652ee1
 801a070:	3a83126f 	.word	0x3a83126f
 801a074:	3fbc430e 	.word	0x3fbc430e
 801a078:	42c6ab07 	.word	0x42c6ab07
 801a07c:	00000000 	.word	0x00000000

0801a080 <MotionFX_initialize>:
 801a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a084:	490a      	ldr	r1, [pc, #40]	; (801a0b0 <MotionFX_initialize+0x30>)
 801a086:	4a0b      	ldr	r2, [pc, #44]	; (801a0b4 <MotionFX_initialize+0x34>)
 801a088:	680b      	ldr	r3, [r1, #0]
 801a08a:	2001      	movs	r0, #1
 801a08c:	f023 0301 	bic.w	r3, r3, #1
 801a090:	600b      	str	r3, [r1, #0]
 801a092:	b083      	sub	sp, #12
 801a094:	4613      	mov	r3, r2
 801a096:	6010      	str	r0, [r2, #0]
 801a098:	681e      	ldr	r6, [r3, #0]
 801a09a:	2e00      	cmp	r6, #0
 801a09c:	d1fc      	bne.n	801a098 <MotionFX_initialize+0x18>
 801a09e:	4b06      	ldr	r3, [pc, #24]	; (801a0b8 <MotionFX_initialize+0x38>)
 801a0a0:	4a06      	ldr	r2, [pc, #24]	; (801a0bc <MotionFX_initialize+0x3c>)
 801a0a2:	601a      	str	r2, [r3, #0]
 801a0a4:	681a      	ldr	r2, [r3, #0]
 801a0a6:	4b06      	ldr	r3, [pc, #24]	; (801a0c0 <MotionFX_initialize+0x40>)
 801a0a8:	429a      	cmp	r2, r3
 801a0aa:	d00b      	beq.n	801a0c4 <MotionFX_initialize+0x44>
 801a0ac:	e7fe      	b.n	801a0ac <MotionFX_initialize+0x2c>
 801a0ae:	bf00      	nop
 801a0b0:	e0002000 	.word	0xe0002000
 801a0b4:	40023008 	.word	0x40023008
 801a0b8:	40023000 	.word	0x40023000
 801a0bc:	f407a5c2 	.word	0xf407a5c2
 801a0c0:	b5e8b5cd 	.word	0xb5e8b5cd
 801a0c4:	4de6      	ldr	r5, [pc, #920]	; (801a460 <MotionFX_initialize+0x3e0>)
 801a0c6:	f8df 83cc 	ldr.w	r8, [pc, #972]	; 801a494 <MotionFX_initialize+0x414>
 801a0ca:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 801a464 <MotionFX_initialize+0x3e4>
 801a0ce:	eddf 7ae6 	vldr	s15, [pc, #920]	; 801a468 <MotionFX_initialize+0x3e8>
 801a0d2:	f8c5 6944 	str.w	r6, [r5, #2372]	; 0x944
 801a0d6:	f04f 0b01 	mov.w	fp, #1
 801a0da:	ed9f 4bd7 	vldr	d4, [pc, #860]	; 801a438 <MotionFX_initialize+0x3b8>
 801a0de:	ed9f 2bd8 	vldr	d2, [pc, #864]	; 801a440 <MotionFX_initialize+0x3c0>
 801a0e2:	ed9f 3bd9 	vldr	d3, [pc, #868]	; 801a448 <MotionFX_initialize+0x3c8>
 801a0e6:	ed9f 5bda 	vldr	d5, [pc, #872]	; 801a450 <MotionFX_initialize+0x3d0>
 801a0ea:	ed9f 6bdb 	vldr	d6, [pc, #876]	; 801a458 <MotionFX_initialize+0x3d8>
 801a0ee:	f8c5 6948 	str.w	r6, [r5, #2376]	; 0x948
 801a0f2:	f885 b941 	strb.w	fp, [r5, #2369]	; 0x941
 801a0f6:	f7f7 f8c3 	bl	8011280 <rt_InitInfAndNaN.isra.3>
 801a0fa:	f241 11b5 	movw	r1, #4533	; 0x11b5
 801a0fe:	f241 10b6 	movw	r0, #4534	; 0x11b6
 801a102:	f241 12b4 	movw	r2, #4532	; 0x11b4
 801a106:	f808 6001 	strb.w	r6, [r8, r1]
 801a10a:	f608 01e8 	addw	r1, r8, #2280	; 0x8e8
 801a10e:	2400      	movs	r4, #0
 801a110:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 801a114:	230a      	movs	r3, #10
 801a116:	ed81 4b02 	vstr	d4, [r1, #8]
 801a11a:	ed81 2b08 	vstr	d2, [r1, #32]
 801a11e:	ed81 3b0a 	vstr	d3, [r1, #40]	; 0x28
 801a122:	ed81 5b04 	vstr	d5, [r1, #16]
 801a126:	ed81 6b06 	vstr	d6, [r1, #24]
 801a12a:	f808 6000 	strb.w	r6, [r8, r0]
 801a12e:	f808 6002 	strb.w	r6, [r8, r2]
 801a132:	f888 38e0 	strb.w	r3, [r8, #2272]	; 0x8e0
 801a136:	f8c1 7208 	str.w	r7, [r1, #520]	; 0x208
 801a13a:	f8c1 420c 	str.w	r4, [r1, #524]	; 0x20c
 801a13e:	f8c1 4210 	str.w	r4, [r1, #528]	; 0x210
 801a142:	9101      	str	r1, [sp, #4]
 801a144:	f8c5 63d0 	str.w	r6, [r5, #976]	; 0x3d0
 801a148:	f8c5 63dc 	str.w	r6, [r5, #988]	; 0x3dc
 801a14c:	f8c5 63e8 	str.w	r6, [r5, #1000]	; 0x3e8
 801a150:	f8c5 63d4 	str.w	r6, [r5, #980]	; 0x3d4
 801a154:	f885 63d8 	strb.w	r6, [r5, #984]	; 0x3d8
 801a158:	f8c5 63e0 	str.w	r6, [r5, #992]	; 0x3e0
 801a15c:	f885 63e4 	strb.w	r6, [r5, #996]	; 0x3e4
 801a160:	f8c5 63ec 	str.w	r6, [r5, #1004]	; 0x3ec
 801a164:	f885 63f0 	strb.w	r6, [r5, #1008]	; 0x3f0
 801a168:	f7f7 f88a 	bl	8011280 <rt_InitInfAndNaN.isra.3>
 801a16c:	f205 7204 	addw	r2, r5, #1796	; 0x704
 801a170:	f205 43c4 	addw	r3, r5, #1220	; 0x4c4
 801a174:	f205 79fc 	addw	r9, r5, #2044	; 0x7fc
 801a178:	f205 5abc 	addw	sl, r5, #1468	; 0x5bc
 801a17c:	ed88 4b06 	vstr	d4, [r8, #24]
 801a180:	ed88 5b08 	vstr	d5, [r8, #32]
 801a184:	eddf 4ab9 	vldr	s9, [pc, #740]	; 801a46c <MotionFX_initialize+0x3ec>
 801a188:	ed9f 5ab9 	vldr	s10, [pc, #740]	; 801a470 <MotionFX_initialize+0x3f0>
 801a18c:	eddf 5ab9 	vldr	s11, [pc, #740]	; 801a474 <MotionFX_initialize+0x3f4>
 801a190:	f8c8 7218 	str.w	r7, [r8, #536]	; 0x218
 801a194:	ed88 6b0a 	vstr	d6, [r8, #40]	; 0x28
 801a198:	ed88 2b0c 	vstr	d2, [r8, #48]	; 0x30
 801a19c:	ed9f 6ab6 	vldr	s12, [pc, #728]	; 801a478 <MotionFX_initialize+0x3f8>
 801a1a0:	eddf 6ab6 	vldr	s13, [pc, #728]	; 801a47c <MotionFX_initialize+0x3fc>
 801a1a4:	f8c8 421c 	str.w	r4, [r8, #540]	; 0x21c
 801a1a8:	ed88 3b0e 	vstr	d3, [r8, #56]	; 0x38
 801a1ac:	f8c8 4220 	str.w	r4, [r8, #544]	; 0x220
 801a1b0:	6794      	str	r4, [r2, #120]	; 0x78
 801a1b2:	67d4      	str	r4, [r2, #124]	; 0x7c
 801a1b4:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
 801a1b8:	f8c2 7084 	str.w	r7, [r2, #132]	; 0x84
 801a1bc:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
 801a1c0:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
 801a1c4:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
 801a1c8:	f8c2 7094 	str.w	r7, [r2, #148]	; 0x94
 801a1cc:	f8c2 4098 	str.w	r4, [r2, #152]	; 0x98
 801a1d0:	f8c2 409c 	str.w	r4, [r2, #156]	; 0x9c
 801a1d4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
 801a1d8:	f888 68de 	strb.w	r6, [r8, #2270]	; 0x8de
 801a1dc:	f888 68dd 	strb.w	r6, [r8, #2269]	; 0x8dd
 801a1e0:	f888 68dc 	strb.w	r6, [r8, #2268]	; 0x8dc
 801a1e4:	f8c5 63f4 	str.w	r6, [r5, #1012]	; 0x3f4
 801a1e8:	f8c5 6400 	str.w	r6, [r5, #1024]	; 0x400
 801a1ec:	f8c5 640c 	str.w	r6, [r5, #1036]	; 0x40c
 801a1f0:	f888 b00c 	strb.w	fp, [r8, #12]
 801a1f4:	f8c5 63f8 	str.w	r6, [r5, #1016]	; 0x3f8
 801a1f8:	f885 63fc 	strb.w	r6, [r5, #1020]	; 0x3fc
 801a1fc:	f8c5 6404 	str.w	r6, [r5, #1028]	; 0x404
 801a200:	f885 6408 	strb.w	r6, [r5, #1032]	; 0x408
 801a204:	f8c5 6410 	str.w	r6, [r5, #1040]	; 0x410
 801a208:	f885 6414 	strb.w	r6, [r5, #1044]	; 0x414
 801a20c:	f8c2 70a4 	str.w	r7, [r2, #164]	; 0xa4
 801a210:	f8c2 40a8 	str.w	r4, [r2, #168]	; 0xa8
 801a214:	f8c2 40ac 	str.w	r4, [r2, #172]	; 0xac
 801a218:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
 801a21c:	f8c2 70b4 	str.w	r7, [r2, #180]	; 0xb4
 801a220:	f8c2 40b8 	str.w	r4, [r2, #184]	; 0xb8
 801a224:	f8c2 40bc 	str.w	r4, [r2, #188]	; 0xbc
 801a228:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 801a22c:	f8c2 70c4 	str.w	r7, [r2, #196]	; 0xc4
 801a230:	f8c2 40c8 	str.w	r4, [r2, #200]	; 0xc8
 801a234:	f8c2 40cc 	str.w	r4, [r2, #204]	; 0xcc
 801a238:	f8c2 40d0 	str.w	r4, [r2, #208]	; 0xd0
 801a23c:	f8c2 70d4 	str.w	r7, [r2, #212]	; 0xd4
 801a240:	f8c2 40d8 	str.w	r4, [r2, #216]	; 0xd8
 801a244:	f8c2 40dc 	str.w	r4, [r2, #220]	; 0xdc
 801a248:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 801a24c:	f8c2 70e4 	str.w	r7, [r2, #228]	; 0xe4
 801a250:	f8c2 40e8 	str.w	r4, [r2, #232]	; 0xe8
 801a254:	f8c2 40ec 	str.w	r4, [r2, #236]	; 0xec
 801a258:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
 801a25c:	f8c2 70f4 	str.w	r7, [r2, #244]	; 0xf4
 801a260:	63d7      	str	r7, [r2, #60]	; 0x3c
 801a262:	6414      	str	r4, [r2, #64]	; 0x40
 801a264:	6454      	str	r4, [r2, #68]	; 0x44
 801a266:	6494      	str	r4, [r2, #72]	; 0x48
 801a268:	64d7      	str	r7, [r2, #76]	; 0x4c
 801a26a:	6514      	str	r4, [r2, #80]	; 0x50
 801a26c:	6554      	str	r4, [r2, #84]	; 0x54
 801a26e:	6594      	str	r4, [r2, #88]	; 0x58
 801a270:	65d7      	str	r7, [r2, #92]	; 0x5c
 801a272:	6614      	str	r4, [r2, #96]	; 0x60
 801a274:	6654      	str	r4, [r2, #100]	; 0x64
 801a276:	6694      	str	r4, [r2, #104]	; 0x68
 801a278:	66d4      	str	r4, [r2, #108]	; 0x6c
 801a27a:	9901      	ldr	r1, [sp, #4]
 801a27c:	f8df c218 	ldr.w	ip, [pc, #536]	; 801a498 <MotionFX_initialize+0x418>
 801a280:	487f      	ldr	r0, [pc, #508]	; (801a480 <MotionFX_initialize+0x400>)
 801a282:	6714      	str	r4, [r2, #112]	; 0x70
 801a284:	6754      	str	r4, [r2, #116]	; 0x74
 801a286:	2202      	movs	r2, #2
 801a288:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
 801a28c:	f8c1 40a4 	str.w	r4, [r1, #164]	; 0xa4
 801a290:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
 801a294:	f8c9 0010 	str.w	r0, [r9, #16]
 801a298:	f8c9 c030 	str.w	ip, [r9, #48]	; 0x30
 801a29c:	f885 2818 	strb.w	r2, [r5, #2072]	; 0x818
 801a2a0:	edc9 4a00 	vstr	s9, [r9]
 801a2a4:	ed89 5a01 	vstr	s10, [r9, #4]
 801a2a8:	edc9 5a02 	vstr	s11, [r9, #8]
 801a2ac:	ed89 7a03 	vstr	s14, [r9, #12]
 801a2b0:	ed89 6a0a 	vstr	s12, [r9, #40]	; 0x28
 801a2b4:	edc9 6a0b 	vstr	s13, [r9, #44]	; 0x2c
 801a2b8:	edc9 7a0d 	vstr	s15, [r9, #52]	; 0x34
 801a2bc:	f8c9 7020 	str.w	r7, [r9, #32]
 801a2c0:	679c      	str	r4, [r3, #120]	; 0x78
 801a2c2:	67dc      	str	r4, [r3, #124]	; 0x7c
 801a2c4:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
 801a2c8:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
 801a2cc:	f885 b810 	strb.w	fp, [r5, #2064]	; 0x810
 801a2d0:	f885 b811 	strb.w	fp, [r5, #2065]	; 0x811
 801a2d4:	f885 b812 	strb.w	fp, [r5, #2066]	; 0x812
 801a2d8:	f885 b813 	strb.w	fp, [r5, #2067]	; 0x813
 801a2dc:	f885 b814 	strb.w	fp, [r5, #2068]	; 0x814
 801a2e0:	f885 6815 	strb.w	r6, [r5, #2069]	; 0x815
 801a2e4:	f885 6816 	strb.w	r6, [r5, #2070]	; 0x816
 801a2e8:	f885 6817 	strb.w	r6, [r5, #2071]	; 0x817
 801a2ec:	f885 b820 	strb.w	fp, [r5, #2080]	; 0x820
 801a2f0:	f885 6834 	strb.w	r6, [r5, #2100]	; 0x834
 801a2f4:	f885 6836 	strb.w	r6, [r5, #2102]	; 0x836
 801a2f8:	f885 2835 	strb.w	r2, [r5, #2101]	; 0x835
 801a2fc:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
 801a300:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
 801a304:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
 801a308:	f8c3 7094 	str.w	r7, [r3, #148]	; 0x94
 801a30c:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
 801a310:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
 801a314:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
 801a318:	f8c3 70a4 	str.w	r7, [r3, #164]	; 0xa4
 801a31c:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
 801a320:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
 801a324:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
 801a328:	f8c3 70b4 	str.w	r7, [r3, #180]	; 0xb4
 801a32c:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
 801a330:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
 801a334:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0
 801a338:	f8c3 70c4 	str.w	r7, [r3, #196]	; 0xc4
 801a33c:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 801a340:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 801a344:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 801a348:	f8c3 70d4 	str.w	r7, [r3, #212]	; 0xd4
 801a34c:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 801a350:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 801a354:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 801a358:	f8c3 70e4 	str.w	r7, [r3, #228]	; 0xe4
 801a35c:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 801a360:	f8c3 40ec 	str.w	r4, [r3, #236]	; 0xec
 801a364:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
 801a368:	f8c3 70f4 	str.w	r7, [r3, #244]	; 0xf4
 801a36c:	63df      	str	r7, [r3, #60]	; 0x3c
 801a36e:	641c      	str	r4, [r3, #64]	; 0x40
 801a370:	645c      	str	r4, [r3, #68]	; 0x44
 801a372:	649c      	str	r4, [r3, #72]	; 0x48
 801a374:	64df      	str	r7, [r3, #76]	; 0x4c
 801a376:	f8ca 0010 	str.w	r0, [sl, #16]
 801a37a:	f8ca c030 	str.w	ip, [sl, #48]	; 0x30
 801a37e:	f885 25d8 	strb.w	r2, [r5, #1496]	; 0x5d8
 801a382:	f885 25f5 	strb.w	r2, [r5, #1525]	; 0x5f5
 801a386:	edca 4a00 	vstr	s9, [sl]
 801a38a:	ed8a 5a01 	vstr	s10, [sl, #4]
 801a38e:	edca 5a02 	vstr	s11, [sl, #8]
 801a392:	ed8a 7a03 	vstr	s14, [sl, #12]
 801a396:	ed8a 6a0a 	vstr	s12, [sl, #40]	; 0x28
 801a39a:	edca 6a0b 	vstr	s13, [sl, #44]	; 0x2c
 801a39e:	edca 7a0d 	vstr	s15, [sl, #52]	; 0x34
 801a3a2:	651c      	str	r4, [r3, #80]	; 0x50
 801a3a4:	655c      	str	r4, [r3, #84]	; 0x54
 801a3a6:	659c      	str	r4, [r3, #88]	; 0x58
 801a3a8:	65df      	str	r7, [r3, #92]	; 0x5c
 801a3aa:	661c      	str	r4, [r3, #96]	; 0x60
 801a3ac:	665c      	str	r4, [r3, #100]	; 0x64
 801a3ae:	669c      	str	r4, [r3, #104]	; 0x68
 801a3b0:	66dc      	str	r4, [r3, #108]	; 0x6c
 801a3b2:	671c      	str	r4, [r3, #112]	; 0x70
 801a3b4:	675c      	str	r4, [r3, #116]	; 0x74
 801a3b6:	f8ca 7020 	str.w	r7, [sl, #32]
 801a3ba:	f885 b5d0 	strb.w	fp, [r5, #1488]	; 0x5d0
 801a3be:	f885 b5d1 	strb.w	fp, [r5, #1489]	; 0x5d1
 801a3c2:	f885 65d2 	strb.w	r6, [r5, #1490]	; 0x5d2
 801a3c6:	f885 b5d3 	strb.w	fp, [r5, #1491]	; 0x5d3
 801a3ca:	f885 b5d4 	strb.w	fp, [r5, #1492]	; 0x5d4
 801a3ce:	f885 65d5 	strb.w	r6, [r5, #1493]	; 0x5d5
 801a3d2:	f885 65d6 	strb.w	r6, [r5, #1494]	; 0x5d6
 801a3d6:	f885 65d7 	strb.w	r6, [r5, #1495]	; 0x5d7
 801a3da:	f885 b5e0 	strb.w	fp, [r5, #1504]	; 0x5e0
 801a3de:	f885 65f4 	strb.w	r6, [r5, #1524]	; 0x5f4
 801a3e2:	9201      	str	r2, [sp, #4]
 801a3e4:	f8c8 40b0 	str.w	r4, [r8, #176]	; 0xb0
 801a3e8:	f8c8 40b4 	str.w	r4, [r8, #180]	; 0xb4
 801a3ec:	f8c8 40b8 	str.w	r4, [r8, #184]	; 0xb8
 801a3f0:	f885 65f6 	strb.w	r6, [r5, #1526]	; 0x5f6
 801a3f4:	f7f7 fb32 	bl	8011a5c <iNemo_setOrientation.constprop.51>
 801a3f8:	f7f7 fd0e 	bl	8011e18 <iNemo_setOrientation_6X.constprop.52>
 801a3fc:	4f21      	ldr	r7, [pc, #132]	; (801a484 <MotionFX_initialize+0x404>)
 801a3fe:	4822      	ldr	r0, [pc, #136]	; (801a488 <MotionFX_initialize+0x408>)
 801a400:	4922      	ldr	r1, [pc, #136]	; (801a48c <MotionFX_initialize+0x40c>)
 801a402:	4b23      	ldr	r3, [pc, #140]	; (801a490 <MotionFX_initialize+0x410>)
 801a404:	9a01      	ldr	r2, [sp, #4]
 801a406:	f8df c094 	ldr.w	ip, [pc, #148]	; 801a49c <MotionFX_initialize+0x41c>
 801a40a:	ed8a 7a03 	vstr	s14, [sl, #12]
 801a40e:	f04f 547f 	mov.w	r4, #1069547520	; 0x3fc00000
 801a412:	f04f 3e01 	mov.w	lr, #16843009	; 0x1010101
 801a416:	edca 7a0d 	vstr	s15, [sl, #52]	; 0x34
 801a41a:	ed89 7a03 	vstr	s14, [r9, #12]
 801a41e:	edc9 7a0d 	vstr	s15, [r9, #52]	; 0x34
 801a422:	f885 25f5 	strb.w	r2, [r5, #1525]	; 0x5f5
 801a426:	f885 65f6 	strb.w	r6, [r5, #1526]	; 0x5f6
 801a42a:	f885 2835 	strb.w	r2, [r5, #2101]	; 0x835
 801a42e:	f885 6836 	strb.w	r6, [r5, #2102]	; 0x836
 801a432:	f8c5 c5d1 	str.w	ip, [r5, #1489]	; 0x5d1
 801a436:	e033      	b.n	801a4a0 <MotionFX_initialize+0x420>
 801a438:	60000000 	.word	0x60000000
 801a43c:	3fc76cab 	.word	0x3fc76cab
 801a440:	c0000000 	.word	0xc0000000
 801a444:	3fb2875e 	.word	0x3fb2875e
 801a448:	60000000 	.word	0x60000000
 801a44c:	3f9f1fed 	.word	0x3f9f1fed
 801a450:	20000000 	.word	0x20000000
 801a454:	3fc55a40 	.word	0x3fc55a40
 801a458:	00000000 	.word	0x00000000
 801a45c:	3fbfdfb7 	.word	0x3fbfdfb7
 801a460:	20001698 	.word	0x20001698
 801a464:	3f2ac083 	.word	0x3f2ac083
 801a468:	3dcccccd 	.word	0x3dcccccd
 801a46c:	3f639581 	.word	0x3f639581
 801a470:	402ab021 	.word	0x402ab021
 801a474:	3f13f7cf 	.word	0x3f13f7cf
 801a478:	39712c28 	.word	0x39712c28
 801a47c:	3a09a027 	.word	0x3a09a027
 801a480:	41200000 	.word	0x41200000
 801a484:	3f666666 	.word	0x3f666666
 801a488:	3a51b717 	.word	0x3a51b717
 801a48c:	3a378034 	.word	0x3a378034
 801a490:	3b378034 	.word	0x3b378034
 801a494:	20000000 	.word	0x20000000
 801a498:	39b24207 	.word	0x39b24207
 801a49c:	01010001 	.word	0x01010001
 801a4a0:	f8c5 e811 	str.w	lr, [r5, #2065]	; 0x811
 801a4a4:	f8ca 7000 	str.w	r7, [sl]
 801a4a8:	f8c9 7000 	str.w	r7, [r9]
 801a4ac:	f8ca 4004 	str.w	r4, [sl, #4]
 801a4b0:	f8c9 4004 	str.w	r4, [r9, #4]
 801a4b4:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
 801a4b8:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
 801a4bc:	f8ca 102c 	str.w	r1, [sl, #44]	; 0x2c
 801a4c0:	f8c9 102c 	str.w	r1, [r9, #44]	; 0x2c
 801a4c4:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
 801a4c8:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 801a4cc:	b003      	add	sp, #12
 801a4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4d2:	bf00      	nop

0801a4d4 <MotionFX_setKnobs>:
 801a4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4d6:	4b2f      	ldr	r3, [pc, #188]	; (801a594 <MotionFX_setKnobs+0xc0>)
 801a4d8:	f893 2941 	ldrb.w	r2, [r3, #2369]	; 0x941
 801a4dc:	b902      	cbnz	r2, 801a4e0 <MotionFX_setKnobs+0xc>
 801a4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4e0:	2800      	cmp	r0, #0
 801a4e2:	d0fc      	beq.n	801a4de <MotionFX_setKnobs+0xa>
 801a4e4:	f203 52bc 	addw	r2, r3, #1468	; 0x5bc
 801a4e8:	6884      	ldr	r4, [r0, #8]
 801a4ea:	6806      	ldr	r6, [r0, #0]
 801a4ec:	6845      	ldr	r5, [r0, #4]
 801a4ee:	60d4      	str	r4, [r2, #12]
 801a4f0:	7b01      	ldrb	r1, [r0, #12]
 801a4f2:	f883 15d1 	strb.w	r1, [r3, #1489]	; 0x5d1
 801a4f6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a4fa:	f8d0 e014 	ldr.w	lr, [r0, #20]
 801a4fe:	6987      	ldr	r7, [r0, #24]
 801a500:	6317      	str	r7, [r2, #48]	; 0x30
 801a502:	f8c2 c028 	str.w	ip, [r2, #40]	; 0x28
 801a506:	f8c2 e02c 	str.w	lr, [r2, #44]	; 0x2c
 801a50a:	f890 7028 	ldrb.w	r7, [r0, #40]	; 0x28
 801a50e:	f883 75f5 	strb.w	r7, [r3, #1525]	; 0x5f5
 801a512:	f890 e035 	ldrb.w	lr, [r0, #53]	; 0x35
 801a516:	f883 e5f6 	strb.w	lr, [r3, #1526]	; 0x5f6
 801a51a:	f883 1811 	strb.w	r1, [r3, #2065]	; 0x811
 801a51e:	f203 71fc 	addw	r1, r3, #2044	; 0x7fc
 801a522:	6016      	str	r6, [r2, #0]
 801a524:	6055      	str	r5, [r2, #4]
 801a526:	6a02      	ldr	r2, [r0, #32]
 801a528:	f8d0 c01c 	ldr.w	ip, [r0, #28]
 801a52c:	62ca      	str	r2, [r1, #44]	; 0x2c
 801a52e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 801a530:	f883 e836 	strb.w	lr, [r3, #2102]	; 0x836
 801a534:	f883 7835 	strb.w	r7, [r3, #2101]	; 0x835
 801a538:	6b87      	ldr	r7, [r0, #56]	; 0x38
 801a53a:	f8c1 c028 	str.w	ip, [r1, #40]	; 0x28
 801a53e:	630a      	str	r2, [r1, #48]	; 0x30
 801a540:	4a15      	ldr	r2, [pc, #84]	; (801a598 <MotionFX_setKnobs+0xc4>)
 801a542:	600e      	str	r6, [r1, #0]
 801a544:	604d      	str	r5, [r1, #4]
 801a546:	60cc      	str	r4, [r1, #12]
 801a548:	f8c3 794c 	str.w	r7, [r3, #2380]	; 0x94c
 801a54c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 801a550:	7013      	strb	r3, [r2, #0]
 801a552:	f890 e031 	ldrb.w	lr, [r0, #49]	; 0x31
 801a556:	f890 702a 	ldrb.w	r7, [r0, #42]	; 0x2a
 801a55a:	f890 602e 	ldrb.w	r6, [r0, #46]	; 0x2e
 801a55e:	f890 5032 	ldrb.w	r5, [r0, #50]	; 0x32
 801a562:	f890 402b 	ldrb.w	r4, [r0, #43]	; 0x2b
 801a566:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 801a56a:	f890 c02d 	ldrb.w	ip, [r0, #45]	; 0x2d
 801a56e:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
 801a572:	f882 e008 	strb.w	lr, [r2, #8]
 801a576:	7057      	strb	r7, [r2, #1]
 801a578:	7156      	strb	r6, [r2, #5]
 801a57a:	7255      	strb	r5, [r2, #9]
 801a57c:	7094      	strb	r4, [r2, #2]
 801a57e:	7293      	strb	r3, [r2, #10]
 801a580:	f882 c004 	strb.w	ip, [r2, #4]
 801a584:	7191      	strb	r1, [r2, #6]
 801a586:	f7f7 fa69 	bl	8011a5c <iNemo_setOrientation.constprop.51>
 801a58a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a58e:	f7f7 bc43 	b.w	8011e18 <iNemo_setOrientation_6X.constprop.52>
 801a592:	bf00      	nop
 801a594:	20001698 	.word	0x20001698
 801a598:	20000000 	.word	0x20000000

0801a59c <MotionFX_getKnobs>:
 801a59c:	4b28      	ldr	r3, [pc, #160]	; (801a640 <MotionFX_getKnobs+0xa4>)
 801a59e:	f893 2941 	ldrb.w	r2, [r3, #2369]	; 0x941
 801a5a2:	b902      	cbnz	r2, 801a5a6 <MotionFX_getKnobs+0xa>
 801a5a4:	4770      	bx	lr
 801a5a6:	2800      	cmp	r0, #0
 801a5a8:	d0fc      	beq.n	801a5a4 <MotionFX_getKnobs+0x8>
 801a5aa:	b4f0      	push	{r4, r5, r6, r7}
 801a5ac:	f203 72fc 	addw	r2, r3, #2044	; 0x7fc
 801a5b0:	68d1      	ldr	r1, [r2, #12]
 801a5b2:	6854      	ldr	r4, [r2, #4]
 801a5b4:	6815      	ldr	r5, [r2, #0]
 801a5b6:	6005      	str	r5, [r0, #0]
 801a5b8:	6044      	str	r4, [r0, #4]
 801a5ba:	6081      	str	r1, [r0, #8]
 801a5bc:	f893 1811 	ldrb.w	r1, [r3, #2065]	; 0x811
 801a5c0:	7301      	strb	r1, [r0, #12]
 801a5c2:	f203 51bc 	addw	r1, r3, #1468	; 0x5bc
 801a5c6:	6a94      	ldr	r4, [r2, #40]	; 0x28
 801a5c8:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801a5ca:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 801a5cc:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 801a5ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801a5d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801a5d2:	6242      	str	r2, [r0, #36]	; 0x24
 801a5d4:	6107      	str	r7, [r0, #16]
 801a5d6:	6185      	str	r5, [r0, #24]
 801a5d8:	61c4      	str	r4, [r0, #28]
 801a5da:	6146      	str	r6, [r0, #20]
 801a5dc:	6201      	str	r1, [r0, #32]
 801a5de:	4a19      	ldr	r2, [pc, #100]	; (801a644 <MotionFX_getKnobs+0xa8>)
 801a5e0:	f893 1835 	ldrb.w	r1, [r3, #2101]	; 0x835
 801a5e4:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
 801a5e8:	f893 6836 	ldrb.w	r6, [r3, #2102]	; 0x836
 801a5ec:	f8d3 594c 	ldr.w	r5, [r3, #2380]	; 0x94c
 801a5f0:	7814      	ldrb	r4, [r2, #0]
 801a5f2:	7911      	ldrb	r1, [r2, #4]
 801a5f4:	7a13      	ldrb	r3, [r2, #8]
 801a5f6:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
 801a5fa:	6385      	str	r5, [r0, #56]	; 0x38
 801a5fc:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 801a600:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 801a604:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
 801a608:	2300      	movs	r3, #0
 801a60a:	7857      	ldrb	r7, [r2, #1]
 801a60c:	7956      	ldrb	r6, [r2, #5]
 801a60e:	7a55      	ldrb	r5, [r2, #9]
 801a610:	7894      	ldrb	r4, [r2, #2]
 801a612:	7991      	ldrb	r1, [r2, #6]
 801a614:	7a92      	ldrb	r2, [r2, #10]
 801a616:	f880 702a 	strb.w	r7, [r0, #42]	; 0x2a
 801a61a:	f880 602e 	strb.w	r6, [r0, #46]	; 0x2e
 801a61e:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
 801a622:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
 801a626:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
 801a62a:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 801a62e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801a632:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 801a636:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 801a63a:	bcf0      	pop	{r4, r5, r6, r7}
 801a63c:	4770      	bx	lr
 801a63e:	bf00      	nop
 801a640:	20001698 	.word	0x20001698
 801a644:	20000000 	.word	0x20000000

0801a648 <MotionFX_enable_6X>:
 801a648:	4b0d      	ldr	r3, [pc, #52]	; (801a680 <MotionFX_enable_6X+0x38>)
 801a64a:	f893 2941 	ldrb.w	r2, [r3, #2369]	; 0x941
 801a64e:	b112      	cbz	r2, 801a656 <MotionFX_enable_6X+0xe>
 801a650:	f8c3 0944 	str.w	r0, [r3, #2372]	; 0x944
 801a654:	b900      	cbnz	r0, 801a658 <MotionFX_enable_6X+0x10>
 801a656:	4770      	bx	lr
 801a658:	b430      	push	{r4, r5}
 801a65a:	4a0a      	ldr	r2, [pc, #40]	; (801a684 <MotionFX_enable_6X+0x3c>)
 801a65c:	4d0a      	ldr	r5, [pc, #40]	; (801a688 <MotionFX_enable_6X+0x40>)
 801a65e:	480b      	ldr	r0, [pc, #44]	; (801a68c <MotionFX_enable_6X+0x44>)
 801a660:	60d8      	str	r0, [r3, #12]
 801a662:	f04f 41ff 	mov.w	r1, #2139095040	; 0x7f800000
 801a666:	6099      	str	r1, [r3, #8]
 801a668:	2100      	movs	r1, #0
 801a66a:	2400      	movs	r4, #0
 801a66c:	f882 18de 	strb.w	r1, [r2, #2270]	; 0x8de
 801a670:	f882 18dd 	strb.w	r1, [r2, #2269]	; 0x8dd
 801a674:	f882 18dc 	strb.w	r1, [r2, #2268]	; 0x8dc
 801a678:	e9c3 4500 	strd	r4, r5, [r3]
 801a67c:	bc30      	pop	{r4, r5}
 801a67e:	4770      	bx	lr
 801a680:	20001698 	.word	0x20001698
 801a684:	20000000 	.word	0x20000000
 801a688:	fff80000 	.word	0xfff80000
 801a68c:	ff800000 	.word	0xff800000

0801a690 <MotionFX_enable_9X>:
 801a690:	4b11      	ldr	r3, [pc, #68]	; (801a6d8 <MotionFX_enable_9X+0x48>)
 801a692:	f893 2941 	ldrb.w	r2, [r3, #2369]	; 0x941
 801a696:	b112      	cbz	r2, 801a69e <MotionFX_enable_9X+0xe>
 801a698:	f8c3 0948 	str.w	r0, [r3, #2376]	; 0x948
 801a69c:	b900      	cbnz	r0, 801a6a0 <MotionFX_enable_9X+0x10>
 801a69e:	4770      	bx	lr
 801a6a0:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
 801a6a4:	4a0d      	ldr	r2, [pc, #52]	; (801a6dc <MotionFX_enable_9X+0x4c>)
 801a6a6:	f8df 903c 	ldr.w	r9, [pc, #60]	; 801a6e4 <MotionFX_enable_9X+0x54>
 801a6aa:	480d      	ldr	r0, [pc, #52]	; (801a6e0 <MotionFX_enable_9X+0x50>)
 801a6ac:	60d8      	str	r0, [r3, #12]
 801a6ae:	f04f 41ff 	mov.w	r1, #2139095040	; 0x7f800000
 801a6b2:	f241 16b6 	movw	r6, #4534	; 0x11b6
 801a6b6:	f241 15b5 	movw	r5, #4533	; 0x11b5
 801a6ba:	f241 14b4 	movw	r4, #4532	; 0x11b4
 801a6be:	6099      	str	r1, [r3, #8]
 801a6c0:	2100      	movs	r1, #0
 801a6c2:	5591      	strb	r1, [r2, r6]
 801a6c4:	5551      	strb	r1, [r2, r5]
 801a6c6:	5511      	strb	r1, [r2, r4]
 801a6c8:	f04f 0800 	mov.w	r8, #0
 801a6cc:	e9c3 8900 	strd	r8, r9, [r3]
 801a6d0:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
 801a6d4:	4770      	bx	lr
 801a6d6:	bf00      	nop
 801a6d8:	20001698 	.word	0x20001698
 801a6dc:	20000000 	.word	0x20000000
 801a6e0:	ff800000 	.word	0xff800000
 801a6e4:	fff80000 	.word	0xfff80000

0801a6e8 <MotionFX_update>:
 801a6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6ec:	4eca      	ldr	r6, [pc, #808]	; (801aa18 <MotionFX_update+0x330>)
 801a6ee:	ed2d 8b02 	vpush	{d8}
 801a6f2:	f896 3941 	ldrb.w	r3, [r6, #2369]	; 0x941
 801a6f6:	b08a      	sub	sp, #40	; 0x28
 801a6f8:	b923      	cbnz	r3, 801a704 <MotionFX_update+0x1c>
 801a6fa:	b00a      	add	sp, #40	; 0x28
 801a6fc:	ecbd 8b02 	vpop	{d8}
 801a700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a704:	4604      	mov	r4, r0
 801a706:	eeb0 8a40 	vmov.f32	s16, s0
 801a70a:	2a00      	cmp	r2, #0
 801a70c:	f000 80d7 	beq.w	801a8be <MotionFX_update+0x1d6>
 801a710:	4bc2      	ldr	r3, [pc, #776]	; (801aa1c <MotionFX_update+0x334>)
 801a712:	68cf      	ldr	r7, [r1, #12]
 801a714:	f8d1 c000 	ldr.w	ip, [r1]
 801a718:	690d      	ldr	r5, [r1, #16]
 801a71a:	f8d1 e018 	ldr.w	lr, [r1, #24]
 801a71e:	619f      	str	r7, [r3, #24]
 801a720:	f5a3 7010 	sub.w	r0, r3, #576	; 0x240
 801a724:	f8c3 c00c 	str.w	ip, [r3, #12]
 801a728:	6187      	str	r7, [r0, #24]
 801a72a:	684f      	ldr	r7, [r1, #4]
 801a72c:	f8c0 c00c 	str.w	ip, [r0, #12]
 801a730:	f8d1 c01c 	ldr.w	ip, [r1, #28]
 801a734:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 801a738:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
 801a73c:	f8d1 e014 	ldr.w	lr, [r1, #20]
 801a740:	6107      	str	r7, [r0, #16]
 801a742:	611f      	str	r7, [r3, #16]
 801a744:	f8d6 794c 	ldr.w	r7, [r6, #2380]	; 0x94c
 801a748:	61dd      	str	r5, [r3, #28]
 801a74a:	61c5      	str	r5, [r0, #28]
 801a74c:	688d      	ldr	r5, [r1, #8]
 801a74e:	6a09      	ldr	r1, [r1, #32]
 801a750:	6145      	str	r5, [r0, #20]
 801a752:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
 801a756:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 801a75a:	f8c3 e020 	str.w	lr, [r3, #32]
 801a75e:	f8c0 e020 	str.w	lr, [r0, #32]
 801a762:	62c1      	str	r1, [r0, #44]	; 0x2c
 801a764:	615d      	str	r5, [r3, #20]
 801a766:	62d9      	str	r1, [r3, #44]	; 0x2c
 801a768:	b187      	cbz	r7, 801a78c <MotionFX_update+0xa4>
 801a76a:	f896 3834 	ldrb.w	r3, [r6, #2100]	; 0x834
 801a76e:	07dd      	lsls	r5, r3, #31
 801a770:	d403      	bmi.n	801a77a <MotionFX_update+0x92>
 801a772:	f896 35f4 	ldrb.w	r3, [r6, #1524]	; 0x5f4
 801a776:	07d8      	lsls	r0, r3, #31
 801a778:	d525      	bpl.n	801a7c6 <MotionFX_update+0xde>
 801a77a:	49a9      	ldr	r1, [pc, #676]	; (801aa20 <MotionFX_update+0x338>)
 801a77c:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 801a780:	2b00      	cmp	r3, #0
 801a782:	f340 809e 	ble.w	801a8c2 <MotionFX_update+0x1da>
 801a786:	3b01      	subs	r3, #1
 801a788:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
 801a78c:	f8d6 3944 	ldr.w	r3, [r6, #2372]	; 0x944
 801a790:	2b00      	cmp	r3, #0
 801a792:	f000 808e 	beq.w	801a8b2 <MotionFX_update+0x1ca>
 801a796:	f896 35f4 	ldrb.w	r3, [r6, #1524]	; 0x5f4
 801a79a:	07d9      	lsls	r1, r3, #31
 801a79c:	f140 8089 	bpl.w	801a8b2 <MotionFX_update+0x1ca>
 801a7a0:	4610      	mov	r0, r2
 801a7a2:	eeb0 0a48 	vmov.f32	s0, s16
 801a7a6:	9201      	str	r2, [sp, #4]
 801a7a8:	f7fe fe7c 	bl	80194a4 <iNemo_update_6X.constprop.45>
 801a7ac:	f8d6 3948 	ldr.w	r3, [r6, #2376]	; 0x948
 801a7b0:	9a01      	ldr	r2, [sp, #4]
 801a7b2:	b143      	cbz	r3, 801a7c6 <MotionFX_update+0xde>
 801a7b4:	f896 3834 	ldrb.w	r3, [r6, #2100]	; 0x834
 801a7b8:	07db      	lsls	r3, r3, #31
 801a7ba:	d504      	bpl.n	801a7c6 <MotionFX_update+0xde>
 801a7bc:	4610      	mov	r0, r2
 801a7be:	eeb0 0a48 	vmov.f32	s0, s16
 801a7c2:	f7ff f88d 	bl	80198e0 <iNemo_update.constprop.46>
 801a7c6:	4d97      	ldr	r5, [pc, #604]	; (801aa24 <MotionFX_update+0x33c>)
 801a7c8:	69ea      	ldr	r2, [r5, #28]
 801a7ca:	69af      	ldr	r7, [r5, #24]
 801a7cc:	f8d5 025c 	ldr.w	r0, [r5, #604]	; 0x25c
 801a7d0:	f8d5 1258 	ldr.w	r1, [r5, #600]	; 0x258
 801a7d4:	60e1      	str	r1, [r4, #12]
 801a7d6:	64a7      	str	r7, [r4, #72]	; 0x48
 801a7d8:	f8d5 1260 	ldr.w	r1, [r5, #608]	; 0x260
 801a7dc:	6a2f      	ldr	r7, [r5, #32]
 801a7de:	64e2      	str	r2, [r4, #76]	; 0x4c
 801a7e0:	6120      	str	r0, [r4, #16]
 801a7e2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801a7e4:	f8d5 0264 	ldr.w	r0, [r5, #612]	; 0x264
 801a7e8:	6527      	str	r7, [r4, #80]	; 0x50
 801a7ea:	6161      	str	r1, [r4, #20]
 801a7ec:	68ef      	ldr	r7, [r5, #12]
 801a7ee:	f8d5 124c 	ldr.w	r1, [r5, #588]	; 0x24c
 801a7f2:	61a0      	str	r0, [r4, #24]
 801a7f4:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 801a7f8:	6562      	str	r2, [r4, #84]	; 0x54
 801a7fa:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 801a7fe:	63e7      	str	r7, [r4, #60]	; 0x3c
 801a800:	f8d5 72d4 	ldr.w	r7, [r5, #724]	; 0x2d4
 801a804:	65a0      	str	r0, [r4, #88]	; 0x58
 801a806:	f8d5 02e0 	ldr.w	r0, [r5, #736]	; 0x2e0
 801a80a:	6021      	str	r1, [r4, #0]
 801a80c:	6662      	str	r2, [r4, #100]	; 0x64
 801a80e:	6929      	ldr	r1, [r5, #16]
 801a810:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 801a814:	65e2      	str	r2, [r4, #92]	; 0x5c
 801a816:	61e7      	str	r7, [r4, #28]
 801a818:	6421      	str	r1, [r4, #64]	; 0x40
 801a81a:	62a0      	str	r0, [r4, #40]	; 0x28
 801a81c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 801a820:	f8d5 2250 	ldr.w	r2, [r5, #592]	; 0x250
 801a824:	f8d5 72d8 	ldr.w	r7, [r5, #728]	; 0x2d8
 801a828:	f8d5 12e4 	ldr.w	r1, [r5, #740]	; 0x2e4
 801a82c:	66a0      	str	r0, [r4, #104]	; 0x68
 801a82e:	f8d5 0254 	ldr.w	r0, [r5, #596]	; 0x254
 801a832:	6062      	str	r2, [r4, #4]
 801a834:	696a      	ldr	r2, [r5, #20]
 801a836:	f8d5 32e8 	ldr.w	r3, [r5, #744]	; 0x2e8
 801a83a:	6227      	str	r7, [r4, #32]
 801a83c:	f8d5 709c 	ldr.w	r7, [r5, #156]	; 0x9c
 801a840:	62e1      	str	r1, [r4, #44]	; 0x2c
 801a842:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 801a846:	6462      	str	r2, [r4, #68]	; 0x44
 801a848:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 801a84c:	6262      	str	r2, [r4, #36]	; 0x24
 801a84e:	60a0      	str	r0, [r4, #8]
 801a850:	66e1      	str	r1, [r4, #108]	; 0x6c
 801a852:	6323      	str	r3, [r4, #48]	; 0x30
 801a854:	f505 714f 	add.w	r1, r5, #828	; 0x33c
 801a858:	f505 7013 	add.w	r0, r5, #588	; 0x24c
 801a85c:	aa03      	add	r2, sp, #12
 801a85e:	6627      	str	r7, [r4, #96]	; 0x60
 801a860:	f7ff fb02 	bl	8019e68 <quatErr2EulerErr>
 801a864:	9b03      	ldr	r3, [sp, #12]
 801a866:	63a3      	str	r3, [r4, #56]	; 0x38
 801a868:	aa03      	add	r2, sp, #12
 801a86a:	f105 01fc 	add.w	r1, r5, #252	; 0xfc
 801a86e:	f105 000c 	add.w	r0, r5, #12
 801a872:	f7ff faf9 	bl	8019e68 <quatErr2EulerErr>
 801a876:	9a03      	ldr	r2, [sp, #12]
 801a878:	f896 35f6 	ldrb.w	r3, [r6, #1526]	; 0x5f6
 801a87c:	6762      	str	r2, [r4, #116]	; 0x74
 801a87e:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801a882:	f104 0258 	add.w	r2, r4, #88	; 0x58
 801a886:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801a88a:	f7f7 fdcd 	bl	8012428 <iNemo_quat2heading>
 801a88e:	f896 3836 	ldrb.w	r3, [r6, #2102]	; 0x836
 801a892:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 801a896:	f104 021c 	add.w	r2, r4, #28
 801a89a:	4621      	mov	r1, r4
 801a89c:	f104 000c 	add.w	r0, r4, #12
 801a8a0:	f7f7 fdc2 	bl	8012428 <iNemo_quat2heading>
 801a8a4:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
 801a8a8:	b00a      	add	sp, #40	; 0x28
 801a8aa:	ecbd 8b02 	vpop	{d8}
 801a8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8b2:	f8d6 3948 	ldr.w	r3, [r6, #2376]	; 0x948
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	f47f af7c 	bne.w	801a7b4 <MotionFX_update+0xcc>
 801a8bc:	e783      	b.n	801a7c6 <MotionFX_update+0xde>
 801a8be:	aa06      	add	r2, sp, #24
 801a8c0:	e726      	b.n	801a710 <MotionFX_update+0x28>
 801a8c2:	f8d6 3948 	ldr.w	r3, [r6, #2376]	; 0x948
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d16c      	bne.n	801a9a4 <MotionFX_update+0x2bc>
 801a8ca:	f8d6 1950 	ldr.w	r1, [r6, #2384]	; 0x950
 801a8ce:	f101 0e01 	add.w	lr, r1, #1
 801a8d2:	f8d6 8944 	ldr.w	r8, [r6, #2372]	; 0x944
 801a8d6:	f1b8 0f00 	cmp.w	r8, #0
 801a8da:	f000 80ad 	beq.w	801aa38 <MotionFX_update+0x350>
 801a8de:	4852      	ldr	r0, [pc, #328]	; (801aa28 <MotionFX_update+0x340>)
 801a8e0:	f8df c14c 	ldr.w	ip, [pc, #332]	; 801aa30 <MotionFX_update+0x348>
 801a8e4:	ed90 6a00 	vldr	s12, [r0]
 801a8e8:	ed9c 4a02 	vldr	s8, [ip, #8]
 801a8ec:	ecfc 5a01 	vldmia	ip!, {s11}
 801a8f0:	f8c6 e950 	str.w	lr, [r6, #2384]	; 0x950
 801a8f4:	4605      	mov	r5, r0
 801a8f6:	4607      	mov	r7, r0
 801a8f8:	ee07 1a90 	vmov	s15, r1
 801a8fc:	3504      	adds	r5, #4
 801a8fe:	3708      	adds	r7, #8
 801a900:	ed97 5a00 	vldr	s10, [r7]
 801a904:	edd5 6a00 	vldr	s13, [r5]
 801a908:	eddc 3a00 	vldr	s7, [ip]
 801a90c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a910:	ee07 ea10 	vmov	s14, lr
 801a914:	ee27 6a86 	vmul.f32	s12, s15, s12
 801a918:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a91c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801a920:	ee67 7a85 	vmul.f32	s15, s15, s10
 801a924:	eec5 4a87 	vdiv.f32	s9, s11, s14
 801a928:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 801a92c:	eec6 5a07 	vdiv.f32	s11, s12, s14
 801a930:	ee83 5a87 	vdiv.f32	s10, s7, s14
 801a934:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801a938:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801a93c:	eec4 7a07 	vdiv.f32	s15, s8, s14
 801a940:	ee75 5aa4 	vadd.f32	s11, s11, s9
 801a944:	ee36 7a05 	vadd.f32	s14, s12, s10
 801a948:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a94c:	edc0 5a00 	vstr	s11, [r0]
 801a950:	ed85 7a00 	vstr	s14, [r5]
 801a954:	edc7 7a00 	vstr	s15, [r7]
 801a958:	f47f af1d 	bne.w	801a796 <MotionFX_update+0xae>
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d078      	beq.n	801aa52 <MotionFX_update+0x36a>
 801a960:	edd5 6a00 	vldr	s13, [r5]
 801a964:	ed97 7a00 	vldr	s14, [r7]
 801a968:	edd0 7a00 	vldr	s15, [r0]
 801a96c:	4b2f      	ldr	r3, [pc, #188]	; (801aa2c <MotionFX_update+0x344>)
 801a96e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801a972:	ee66 6a86 	vmul.f32	s13, s13, s12
 801a976:	ee27 7a06 	vmul.f32	s14, s14, s12
 801a97a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a97e:	edc3 6a0b 	vstr	s13, [r3, #44]	; 0x2c
 801a982:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
 801a986:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 801a98a:	f1b8 0f00 	cmp.w	r8, #0
 801a98e:	d160      	bne.n	801aa52 <MotionFX_update+0x36a>
 801a990:	2300      	movs	r3, #0
 801a992:	2100      	movs	r1, #0
 801a994:	6003      	str	r3, [r0, #0]
 801a996:	602b      	str	r3, [r5, #0]
 801a998:	603b      	str	r3, [r7, #0]
 801a99a:	f8c6 1950 	str.w	r1, [r6, #2384]	; 0x950
 801a99e:	f8c6 194c 	str.w	r1, [r6, #2380]	; 0x94c
 801a9a2:	e6f3      	b.n	801a78c <MotionFX_update+0xa4>
 801a9a4:	f8df e08c 	ldr.w	lr, [pc, #140]	; 801aa34 <MotionFX_update+0x34c>
 801a9a8:	f8d6 1950 	ldr.w	r1, [r6, #2384]	; 0x950
 801a9ac:	edde 3a02 	vldr	s7, [lr, #8]
 801a9b0:	ecfe 5a01 	vldmia	lr!, {s11}
 801a9b4:	481c      	ldr	r0, [pc, #112]	; (801aa28 <MotionFX_update+0x340>)
 801a9b6:	ed9e 5a00 	vldr	s10, [lr]
 801a9ba:	edd0 4a02 	vldr	s9, [r0, #8]
 801a9be:	ed90 6a00 	vldr	s12, [r0]
 801a9c2:	edd0 6a01 	vldr	s13, [r0, #4]
 801a9c6:	ee07 1a90 	vmov	s15, r1
 801a9ca:	f101 0e01 	add.w	lr, r1, #1
 801a9ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a9d2:	ee07 ea90 	vmov	s15, lr
 801a9d6:	ee27 6a06 	vmul.f32	s12, s14, s12
 801a9da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a9de:	ee67 6a26 	vmul.f32	s13, s14, s13
 801a9e2:	ee27 7a24 	vmul.f32	s14, s14, s9
 801a9e6:	ee85 4aa7 	vdiv.f32	s8, s11, s15
 801a9ea:	eec5 4a27 	vdiv.f32	s9, s10, s15
 801a9ee:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801a9f2:	ee83 5aa7 	vdiv.f32	s10, s7, s15
 801a9f6:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801a9fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a9fe:	ee75 5a84 	vadd.f32	s11, s11, s8
 801aa02:	ee36 7a24 	vadd.f32	s14, s12, s9
 801aa06:	ee76 7a85 	vadd.f32	s15, s13, s10
 801aa0a:	edc0 5a00 	vstr	s11, [r0]
 801aa0e:	ed80 7a01 	vstr	s14, [r0, #4]
 801aa12:	edc0 7a02 	vstr	s15, [r0, #8]
 801aa16:	e75c      	b.n	801a8d2 <MotionFX_update+0x1ea>
 801aa18:	20001698 	.word	0x20001698
 801aa1c:	20001d9c 	.word	0x20001d9c
 801aa20:	200010f8 	.word	0x200010f8
 801aa24:	20001c90 	.word	0x20001c90
 801aa28:	20001fec 	.word	0x20001fec
 801aa2c:	20001e94 	.word	0x20001e94
 801aa30:	20000414 	.word	0x20000414
 801aa34:	20000cec 	.word	0x20000cec
 801aa38:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 801aa3c:	f8c6 e950 	str.w	lr, [r6, #2384]	; 0x950
 801aa40:	f47f aeb7 	bne.w	801a7b2 <MotionFX_update+0xca>
 801aa44:	480e      	ldr	r0, [pc, #56]	; (801aa80 <MotionFX_update+0x398>)
 801aa46:	1d05      	adds	r5, r0, #4
 801aa48:	f100 0708 	add.w	r7, r0, #8
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	d187      	bne.n	801a960 <MotionFX_update+0x278>
 801aa50:	e79e      	b.n	801a990 <MotionFX_update+0x2a8>
 801aa52:	edd5 6a00 	vldr	s13, [r5]
 801aa56:	ed97 7a00 	vldr	s14, [r7]
 801aa5a:	edd0 7a00 	vldr	s15, [r0]
 801aa5e:	4b09      	ldr	r3, [pc, #36]	; (801aa84 <MotionFX_update+0x39c>)
 801aa60:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801aa64:	ee66 6a86 	vmul.f32	s13, s13, s12
 801aa68:	ee27 7a06 	vmul.f32	s14, s14, s12
 801aa6c:	ee67 7a86 	vmul.f32	s15, s15, s12
 801aa70:	edc3 6a0b 	vstr	s13, [r3, #44]	; 0x2c
 801aa74:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
 801aa78:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 801aa7c:	e788      	b.n	801a990 <MotionFX_update+0x2a8>
 801aa7e:	bf00      	nop
 801aa80:	20001fec 	.word	0x20001fec
 801aa84:	20001c54 	.word	0x20001c54

0801aa88 <MotionFX_propagate>:
 801aa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa8c:	ed2d 8b0e 	vpush	{d8-d14}
 801aa90:	4c58      	ldr	r4, [pc, #352]	; (801abf4 <MotionFX_propagate+0x16c>)
 801aa92:	f894 3941 	ldrb.w	r3, [r4, #2369]	; 0x941
 801aa96:	b099      	sub	sp, #100	; 0x64
 801aa98:	b923      	cbnz	r3, 801aaa4 <MotionFX_propagate+0x1c>
 801aa9a:	b019      	add	sp, #100	; 0x64
 801aa9c:	ecbd 8b0e 	vpop	{d8-d14}
 801aaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaa4:	ed91 3a03 	vldr	s6, [r1, #12]
 801aaa8:	edd1 9a00 	vldr	s19, [r1]
 801aaac:	edd1 3a04 	vldr	s7, [r1, #16]
 801aab0:	ed91 9a01 	vldr	s18, [r1, #4]
 801aab4:	ed91 5a05 	vldr	s10, [r1, #20]
 801aab8:	edd1 8a02 	vldr	s17, [r1, #8]
 801aabc:	ed91 4a06 	vldr	s8, [r1, #24]
 801aac0:	edd1 4a07 	vldr	s9, [r1, #28]
 801aac4:	edd1 5a08 	vldr	s11, [r1, #32]
 801aac8:	f8d4 3948 	ldr.w	r3, [r4, #2376]	; 0x948
 801aacc:	ed8d 0a02 	vstr	s0, [sp, #8]
 801aad0:	f204 7804 	addw	r8, r4, #1796	; 0x704
 801aad4:	f204 4bc4 	addw	fp, r4, #1220	; 0x4c4
 801aad8:	4682      	mov	sl, r0
 801aada:	ed88 3a06 	vstr	s6, [r8, #24]
 801aade:	edc8 9a03 	vstr	s19, [r8, #12]
 801aae2:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 801aae6:	ed8b 3a06 	vstr	s6, [fp, #24]
 801aaea:	edcb 9a03 	vstr	s19, [fp, #12]
 801aaee:	ed8b 4a09 	vstr	s8, [fp, #36]	; 0x24
 801aaf2:	edc8 3a07 	vstr	s7, [r8, #28]
 801aaf6:	ed88 9a04 	vstr	s18, [r8, #16]
 801aafa:	ed8b 9a04 	vstr	s18, [fp, #16]
 801aafe:	edc8 4a0a 	vstr	s9, [r8, #40]	; 0x28
 801ab02:	edcb 3a07 	vstr	s7, [fp, #28]
 801ab06:	edcb 4a0a 	vstr	s9, [fp, #40]	; 0x28
 801ab0a:	ed88 5a08 	vstr	s10, [r8, #32]
 801ab0e:	edc8 8a05 	vstr	s17, [r8, #20]
 801ab12:	edcb 8a05 	vstr	s17, [fp, #20]
 801ab16:	edc8 5a0b 	vstr	s11, [r8, #44]	; 0x2c
 801ab1a:	ed8b 5a08 	vstr	s10, [fp, #32]
 801ab1e:	edcb 5a0b 	vstr	s11, [fp, #44]	; 0x2c
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	f040 8324 	bne.w	801b170 <MotionFX_propagate+0x6e8>
 801ab28:	f604 0538 	addw	r5, r4, #2104	; 0x838
 801ab2c:	f8d4 3944 	ldr.w	r3, [r4, #2372]	; 0x944
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d163      	bne.n	801abfc <MotionFX_propagate+0x174>
 801ab34:	4f30      	ldr	r7, [pc, #192]	; (801abf8 <MotionFX_propagate+0x170>)
 801ab36:	69bb      	ldr	r3, [r7, #24]
 801ab38:	69f8      	ldr	r0, [r7, #28]
 801ab3a:	6a3a      	ldr	r2, [r7, #32]
 801ab3c:	69e9      	ldr	r1, [r5, #28]
 801ab3e:	69ac      	ldr	r4, [r5, #24]
 801ab40:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
 801ab44:	6a2b      	ldr	r3, [r5, #32]
 801ab46:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
 801ab4a:	f8ca 400c 	str.w	r4, [sl, #12]
 801ab4e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 801ab50:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 801ab52:	f8ca 2050 	str.w	r2, [sl, #80]	; 0x50
 801ab56:	f8ca 1010 	str.w	r1, [sl, #16]
 801ab5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801ab5e:	68f9      	ldr	r1, [r7, #12]
 801ab60:	f8ca 3014 	str.w	r3, [sl, #20]
 801ab64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ab68:	f8ca 4054 	str.w	r4, [sl, #84]	; 0x54
 801ab6c:	f8ca 0018 	str.w	r0, [sl, #24]
 801ab70:	68ec      	ldr	r4, [r5, #12]
 801ab72:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 801ab76:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
 801ab7a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 801ab7e:	f8ca 2058 	str.w	r2, [sl, #88]	; 0x58
 801ab82:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 801ab86:	693a      	ldr	r2, [r7, #16]
 801ab88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ab8c:	f8ca 305c 	str.w	r3, [sl, #92]	; 0x5c
 801ab90:	f8ca 4000 	str.w	r4, [sl]
 801ab94:	f8ca 001c 	str.w	r0, [sl, #28]
 801ab98:	f8ca 2040 	str.w	r2, [sl, #64]	; 0x40
 801ab9c:	f8ca 1028 	str.w	r1, [sl, #40]	; 0x28
 801aba0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801aba4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 801aba8:	692a      	ldr	r2, [r5, #16]
 801abaa:	f8d5 e0a4 	ldr.w	lr, [r5, #164]	; 0xa4
 801abae:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 801abb2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 801abb6:	697e      	ldr	r6, [r7, #20]
 801abb8:	f8ca 1068 	str.w	r1, [sl, #104]	; 0x68
 801abbc:	f8ca 2004 	str.w	r2, [sl, #4]
 801abc0:	6969      	ldr	r1, [r5, #20]
 801abc2:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
 801abc6:	f8ca 3020 	str.w	r3, [sl, #32]
 801abca:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 801abce:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
 801abd2:	f8ca e02c 	str.w	lr, [sl, #44]	; 0x2c
 801abd6:	f8ca 6044 	str.w	r6, [sl, #68]	; 0x44
 801abda:	f8ca 4060 	str.w	r4, [sl, #96]	; 0x60
 801abde:	f8ca 006c 	str.w	r0, [sl, #108]	; 0x6c
 801abe2:	f8ca 1008 	str.w	r1, [sl, #8]
 801abe6:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 801abea:	b019      	add	sp, #100	; 0x64
 801abec:	ecbd 8b0e 	vpop	{d8-d14}
 801abf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abf4:	20001698 	.word	0x20001698
 801abf8:	20001c90 	.word	0x20001c90
 801abfc:	f994 33fa 	ldrsb.w	r3, [r4, #1018]	; 0x3fa
 801ac00:	f994 23f4 	ldrsb.w	r2, [r4, #1012]	; 0x3f4
 801ac04:	eddb ea06 	vldr	s29, [fp, #24]
 801ac08:	ed9b ea07 	vldr	s28, [fp, #28]
 801ac0c:	eddb 0a08 	vldr	s1, [fp, #32]
 801ac10:	eddb da09 	vldr	s27, [fp, #36]	; 0x24
 801ac14:	ed9b da0a 	vldr	s26, [fp, #40]	; 0x28
 801ac18:	eddb aa0b 	vldr	s21, [fp, #44]	; 0x2c
 801ac1c:	f894 95f5 	ldrb.w	r9, [r4, #1525]	; 0x5f5
 801ac20:	ee07 3a90 	vmov	s15, r3
 801ac24:	f994 33fb 	ldrsb.w	r3, [r4, #1019]	; 0x3fb
 801ac28:	ee07 3a10 	vmov	s14, r3
 801ac2c:	f994 33fc 	ldrsb.w	r3, [r4, #1020]	; 0x3fc
 801ac30:	ee0c 2a90 	vmov	s25, r2
 801ac34:	f994 23f5 	ldrsb.w	r2, [r4, #1013]	; 0x3f5
 801ac38:	ee05 3a10 	vmov	s10, r3
 801ac3c:	2300      	movs	r3, #0
 801ac3e:	ee08 2a10 	vmov	s16, r2
 801ac42:	930c      	str	r3, [sp, #48]	; 0x30
 801ac44:	f994 23f7 	ldrsb.w	r2, [r4, #1015]	; 0x3f7
 801ac48:	930d      	str	r3, [sp, #52]	; 0x34
 801ac4a:	930e      	str	r3, [sp, #56]	; 0x38
 801ac4c:	9310      	str	r3, [sp, #64]	; 0x40
 801ac4e:	9311      	str	r3, [sp, #68]	; 0x44
 801ac50:	9312      	str	r3, [sp, #72]	; 0x48
 801ac52:	f994 33f6 	ldrsb.w	r3, [r4, #1014]	; 0x3f6
 801ac56:	ee0c 2a10 	vmov	s24, r2
 801ac5a:	ee01 3a10 	vmov	s2, r3
 801ac5e:	f994 23f8 	ldrsb.w	r2, [r4, #1016]	; 0x3f8
 801ac62:	f994 33f9 	ldrsb.w	r3, [r4, #1017]	; 0x3f9
 801ac66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ac6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ac6e:	ee02 2a10 	vmov	s4, r2
 801ac72:	ee27 7a0e 	vmul.f32	s14, s14, s28
 801ac76:	f994 240c 	ldrsb.w	r2, [r4, #1036]	; 0x40c
 801ac7a:	ee02 3a90 	vmov	s5, r3
 801ac7e:	ee67 7aae 	vmul.f32	s15, s15, s29
 801ac82:	f994 340e 	ldrsb.w	r3, [r4, #1038]	; 0x40e
 801ac86:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801ac8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ac8e:	ee0b 2a90 	vmov	s23, r2
 801ac92:	ee03 3a10 	vmov	s6, r3
 801ac96:	f994 240d 	ldrsb.w	r2, [r4, #1037]	; 0x40d
 801ac9a:	f994 3411 	ldrsb.w	r3, [r4, #1041]	; 0x411
 801ac9e:	ee25 5a20 	vmul.f32	s10, s10, s1
 801aca2:	ee0b 2a10 	vmov	s22, r2
 801aca6:	ee37 5a85 	vadd.f32	s10, s15, s10
 801acaa:	f994 240f 	ldrsb.w	r2, [r4, #1039]	; 0x40f
 801acae:	ed8d 5a08 	vstr	s10, [sp, #32]
 801acb2:	ee03 3a90 	vmov	s7, r3
 801acb6:	f994 3412 	ldrsb.w	r3, [r4, #1042]	; 0x412
 801acba:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801acbe:	ee00 2a10 	vmov	s0, r2
 801acc2:	ee06 3a90 	vmov	s13, r3
 801acc6:	f994 2410 	ldrsb.w	r2, [r4, #1040]	; 0x410
 801acca:	edcd 8a0f 	vstr	s17, [sp, #60]	; 0x3c
 801acce:	edcd 8a13 	vstr	s17, [sp, #76]	; 0x4c
 801acd2:	f994 3413 	ldrsb.w	r3, [r4, #1043]	; 0x413
 801acd6:	ed9b aa03 	vldr	s20, [fp, #12]
 801acda:	eddb 9a04 	vldr	s19, [fp, #16]
 801acde:	ed9b 9a05 	vldr	s18, [fp, #20]
 801ace2:	f994 7400 	ldrsb.w	r7, [r4, #1024]	; 0x400
 801ace6:	f994 8402 	ldrsb.w	r8, [r4, #1026]	; 0x402
 801acea:	f994 6403 	ldrsb.w	r6, [r4, #1027]	; 0x403
 801acee:	ee07 3a10 	vmov	s14, r3
 801acf2:	f994 3414 	ldrsb.w	r3, [r4, #1044]	; 0x414
 801acf6:	ee04 3a10 	vmov	s8, r3
 801acfa:	f994 3406 	ldrsb.w	r3, [r4, #1030]	; 0x406
 801acfe:	ee05 2a90 	vmov	s11, r2
 801ad02:	ee07 3a90 	vmov	s15, r3
 801ad06:	eef8 caec 	vcvt.f32.s32	s25, s25
 801ad0a:	f994 3407 	ldrsb.w	r3, [r4, #1031]	; 0x407
 801ad0e:	f994 2401 	ldrsb.w	r2, [r4, #1025]	; 0x401
 801ad12:	9203      	str	r2, [sp, #12]
 801ad14:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801ad18:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 801ad1c:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801ad20:	eef8 baeb 	vcvt.f32.s32	s23, s23
 801ad24:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 801ad28:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801ad2c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801ad30:	ee04 3a90 	vmov	s9, r3
 801ad34:	ee28 8a0e 	vmul.f32	s16, s16, s28
 801ad38:	f994 3408 	ldrsb.w	r3, [r4, #1032]	; 0x408
 801ad3c:	f994 2404 	ldrsb.w	r2, [r4, #1028]	; 0x404
 801ad40:	9204      	str	r2, [sp, #16]
 801ad42:	ee6c caae 	vmul.f32	s25, s25, s29
 801ad46:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ad4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ad4e:	ee2c ca2e 	vmul.f32	s24, s24, s29
 801ad52:	ee22 2a0e 	vmul.f32	s4, s4, s28
 801ad56:	ee6b baad 	vmul.f32	s23, s23, s27
 801ad5a:	ee2b ba0d 	vmul.f32	s22, s22, s26
 801ad5e:	ee20 0a2d 	vmul.f32	s0, s0, s27
 801ad62:	ee65 5a8d 	vmul.f32	s11, s11, s26
 801ad66:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801ad6a:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801ad6e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801ad72:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801ad76:	ee7c 1a88 	vadd.f32	s3, s25, s16
 801ad7a:	ee66 6aad 	vmul.f32	s13, s13, s27
 801ad7e:	ee08 3a10 	vmov	s16, r3
 801ad82:	ee27 7a0d 	vmul.f32	s14, s14, s26
 801ad86:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801ad8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ad8e:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801ad92:	ee3b 6a8b 	vadd.f32	s12, s23, s22
 801ad96:	ee70 5a25 	vadd.f32	s11, s0, s11
 801ad9a:	ee21 1a20 	vmul.f32	s2, s2, s1
 801ad9e:	ee3c 2a02 	vadd.f32	s4, s24, s4
 801ada2:	ee62 2aa0 	vmul.f32	s5, s5, s1
 801ada6:	ee23 3a2a 	vmul.f32	s6, s6, s21
 801adaa:	ee63 3aaa 	vmul.f32	s7, s7, s21
 801adae:	ee36 7a87 	vadd.f32	s14, s13, s14
 801adb2:	ee64 4aa9 	vmul.f32	s9, s9, s19
 801adb6:	4bea      	ldr	r3, [pc, #936]	; (801b160 <MotionFX_propagate+0x6d8>)
 801adb8:	f994 2405 	ldrsb.w	r2, [r4, #1029]	; 0x405
 801adbc:	7b1b      	ldrb	r3, [r3, #12]
 801adbe:	9205      	str	r2, [sp, #20]
 801adc0:	ee24 4a2a 	vmul.f32	s8, s8, s21
 801adc4:	ee67 7a8a 	vmul.f32	s15, s15, s20
 801adc8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801adcc:	ee76 6a03 	vadd.f32	s13, s12, s6
 801add0:	ee71 1a81 	vadd.f32	s3, s3, s2
 801add4:	ee35 6aa3 	vadd.f32	s12, s11, s7
 801add8:	ee72 2a22 	vadd.f32	s5, s4, s5
 801addc:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801ade0:	ee37 7a04 	vadd.f32	s14, s14, s8
 801ade4:	ee28 8a09 	vmul.f32	s16, s16, s18
 801ade8:	eef1 4a62 	vneg.f32	s9, s5
 801adec:	eef1 5a61 	vneg.f32	s11, s3
 801adf0:	eef1 6a66 	vneg.f32	s13, s13
 801adf4:	eeb1 6a46 	vneg.f32	s12, s12
 801adf8:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 801adfc:	edcd 4a06 	vstr	s9, [sp, #24]
 801ae00:	edcd 5a07 	vstr	s11, [sp, #28]
 801ae04:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 801ae08:	ed8d 6a09 	vstr	s12, [sp, #36]	; 0x24
 801ae0c:	ee37 8a88 	vadd.f32	s16, s15, s16
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	f040 8497 	bne.w	801b744 <MotionFX_propagate+0xcbc>
 801ae16:	464a      	mov	r2, r9
 801ae18:	2a00      	cmp	r2, #0
 801ae1a:	f000 8479 	beq.w	801b710 <MotionFX_propagate+0xc88>
 801ae1e:	ee07 2a90 	vmov	s15, r2
 801ae22:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801ae26:	eec6 4a25 	vdiv.f32	s9, s12, s11
 801ae2a:	f894 35d8 	ldrb.w	r3, [r4, #1496]	; 0x5d8
 801ae2e:	f894 05d4 	ldrb.w	r0, [r4, #1492]	; 0x5d4
 801ae32:	3301      	adds	r3, #1
 801ae34:	b2db      	uxtb	r3, r3
 801ae36:	fbb3 f1f2 	udiv	r1, r3, r2
 801ae3a:	fb02 3311 	mls	r3, r2, r1, r3
 801ae3e:	f884 35d8 	strb.w	r3, [r4, #1496]	; 0x5d8
 801ae42:	ee86 5aa5 	vdiv.f32	s10, s13, s11
 801ae46:	ee87 6a25 	vdiv.f32	s12, s14, s11
 801ae4a:	eddb 6a0c 	vldr	s13, [fp, #48]	; 0x30
 801ae4e:	ed9b 7a0d 	vldr	s14, [fp, #52]	; 0x34
 801ae52:	eddb 7a0e 	vldr	s15, [fp, #56]	; 0x38
 801ae56:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801ae5a:	ee37 7a05 	vadd.f32	s14, s14, s10
 801ae5e:	ee77 7a86 	vadd.f32	s15, s15, s12
 801ae62:	edcb 6a0c 	vstr	s13, [fp, #48]	; 0x30
 801ae66:	ed8b 7a0d 	vstr	s14, [fp, #52]	; 0x34
 801ae6a:	edcb 7a0e 	vstr	s15, [fp, #56]	; 0x38
 801ae6e:	2800      	cmp	r0, #0
 801ae70:	f040 845b 	bne.w	801b72a <MotionFX_propagate+0xca2>
 801ae74:	ae10      	add	r6, sp, #64	; 0x40
 801ae76:	4abb      	ldr	r2, [pc, #748]	; (801b164 <MotionFX_propagate+0x6dc>)
 801ae78:	ed9f 8abb 	vldr	s16, [pc, #748]	; 801b168 <MotionFX_propagate+0x6e0>
 801ae7c:	f102 074c 	add.w	r7, r2, #76	; 0x4c
 801ae80:	4611      	mov	r1, r2
 801ae82:	f1a2 0010 	sub.w	r0, r2, #16
 801ae86:	f7f5 fe81 	bl	8010b8c <m_qmult_eml>
 801ae8a:	f1a7 027c 	sub.w	r2, r7, #124	; 0x7c
 801ae8e:	4611      	mov	r1, r2
 801ae90:	4630      	mov	r0, r6
 801ae92:	f7f5 fe7b 	bl	8010b8c <m_qmult_eml>
 801ae96:	f107 0218 	add.w	r2, r7, #24
 801ae9a:	f1a7 019c 	sub.w	r1, r7, #156	; 0x9c
 801ae9e:	f1a7 004c 	sub.w	r0, r7, #76	; 0x4c
 801aea2:	f7f5 fe73 	bl	8010b8c <m_qmult_eml>
 801aea6:	f107 0218 	add.w	r2, r7, #24
 801aeaa:	4611      	mov	r1, r2
 801aeac:	f1a7 007c 	sub.w	r0, r7, #124	; 0x7c
 801aeb0:	f7f5 fe6c 	bl	8010b8c <m_qmult_eml>
 801aeb4:	edd7 6a06 	vldr	s13, [r7, #24]
 801aeb8:	ed97 7a07 	vldr	s14, [r7, #28]
 801aebc:	edd7 7a08 	vldr	s15, [r7, #32]
 801aec0:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 801aec4:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801aec8:	ee27 7a07 	vmul.f32	s14, s14, s14
 801aecc:	ee76 6a88 	vadd.f32	s13, s13, s16
 801aed0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801aed4:	ee37 7a26 	vadd.f32	s14, s14, s13
 801aed8:	ee26 6a06 	vmul.f32	s12, s12, s12
 801aedc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801aee0:	ee76 7a27 	vadd.f32	s15, s12, s15
 801aee4:	ee17 0a90 	vmov	r0, s15
 801aee8:	f7e5 fb36 	bl	8000558 <__aeabi_f2d>
 801aeec:	ec41 0b10 	vmov	d0, r0, r1
 801aef0:	f001 fb72 	bl	801c5d8 <sqrt>
 801aef4:	ec51 0b10 	vmov	r0, r1, d0
 801aef8:	f7e5 fe7a 	bl	8000bf0 <__aeabi_d2f>
 801aefc:	ed97 6a06 	vldr	s12, [r7, #24]
 801af00:	edd7 6a07 	vldr	s13, [r7, #28]
 801af04:	ed97 7a08 	vldr	s14, [r7, #32]
 801af08:	ed97 5a09 	vldr	s10, [r7, #36]	; 0x24
 801af0c:	f894 35e0 	ldrb.w	r3, [r4, #1504]	; 0x5e0
 801af10:	ee07 0a90 	vmov	s15, r0
 801af14:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801af18:	2b01      	cmp	r3, #1
 801af1a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801af1e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801af22:	ee85 7a27 	vdiv.f32	s14, s10, s15
 801af26:	edc7 5a06 	vstr	s11, [r7, #24]
 801af2a:	ed87 6a07 	vstr	s12, [r7, #28]
 801af2e:	edc7 6a08 	vstr	s13, [r7, #32]
 801af32:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 801af36:	f000 850b 	beq.w	801b950 <MotionFX_propagate+0xec8>
 801af3a:	f8df 8230 	ldr.w	r8, [pc, #560]	; 801b16c <MotionFX_propagate+0x6e4>
 801af3e:	f894 15f6 	ldrb.w	r1, [r4, #1526]	; 0x5f6
 801af42:	9101      	str	r1, [sp, #4]
 801af44:	f1a8 030c 	sub.w	r3, r8, #12
 801af48:	f1a8 0294 	sub.w	r2, r8, #148	; 0x94
 801af4c:	f8cd 8000 	str.w	r8, [sp]
 801af50:	f1a8 0088 	sub.w	r0, r8, #136	; 0x88
 801af54:	a906      	add	r1, sp, #24
 801af56:	f7f6 fa3b 	bl	80113d0 <output_update>
 801af5a:	f894 35f4 	ldrb.w	r3, [r4, #1524]	; 0x5f4
 801af5e:	2200      	movs	r2, #0
 801af60:	f884 25d6 	strb.w	r2, [r4, #1494]	; 0x5d6
 801af64:	079a      	lsls	r2, r3, #30
 801af66:	f100 83bd 	bmi.w	801b6e4 <MotionFX_propagate+0xc5c>
 801af6a:	f894 15d8 	ldrb.w	r1, [r4, #1496]	; 0x5d8
 801af6e:	fbb1 f2f9 	udiv	r2, r1, r9
 801af72:	fb09 1212 	mls	r2, r9, r2, r1
 801af76:	f012 0fff 	tst.w	r2, #255	; 0xff
 801af7a:	f040 83b3 	bne.w	801b6e4 <MotionFX_propagate+0xc5c>
 801af7e:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 801af82:	eddb 7a22 	vldr	s15, [fp, #136]	; 0x88
 801af86:	f8db 108c 	ldr.w	r1, [fp, #140]	; 0x8c
 801af8a:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 801af8e:	edcb 7a26 	vstr	s15, [fp, #152]	; 0x98
 801af92:	f043 0301 	orr.w	r3, r3, #1
 801af96:	eeb4 7a47 	vcmp.f32	s14, s14
 801af9a:	f884 35f4 	strb.w	r3, [r4, #1524]	; 0x5f4
 801af9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afa2:	f8db 3094 	ldr.w	r3, [fp, #148]	; 0x94
 801afa6:	f8cb 109c 	str.w	r1, [fp, #156]	; 0x9c
 801afaa:	f8cb 20a0 	str.w	r2, [fp, #160]	; 0xa0
 801afae:	f8cb 30a4 	str.w	r3, [fp, #164]	; 0xa4
 801afb2:	f47f adc0 	bne.w	801ab36 <MotionFX_propagate+0xae>
 801afb6:	ed9b 7a2a 	vldr	s14, [fp, #168]	; 0xa8
 801afba:	eeb4 7a47 	vcmp.f32	s14, s14
 801afbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afc2:	f47f adb8 	bne.w	801ab36 <MotionFX_propagate+0xae>
 801afc6:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 801afca:	eeb4 7a47 	vcmp.f32	s14, s14
 801afce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afd2:	f47f adb0 	bne.w	801ab36 <MotionFX_propagate+0xae>
 801afd6:	eef4 7a67 	vcmp.f32	s15, s15
 801afda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afde:	f47f adaa 	bne.w	801ab36 <MotionFX_propagate+0xae>
 801afe2:	4630      	mov	r0, r6
 801afe4:	aa14      	add	r2, sp, #80	; 0x50
 801afe6:	f5a8 7196 	sub.w	r1, r8, #300	; 0x12c
 801afea:	f7f5 fdcf 	bl	8010b8c <m_qmult_eml>
 801afee:	aa0c      	add	r2, sp, #48	; 0x30
 801aff0:	f5a8 71a6 	sub.w	r1, r8, #332	; 0x14c
 801aff4:	f5a8 7086 	sub.w	r0, r8, #268	; 0x10c
 801aff8:	f7f5 fdc8 	bl	8010b8c <m_qmult_eml>
 801affc:	aa0c      	add	r2, sp, #48	; 0x30
 801affe:	4611      	mov	r1, r2
 801b000:	a814      	add	r0, sp, #80	; 0x50
 801b002:	f7f5 fdc3 	bl	8010b8c <m_qmult_eml>
 801b006:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
 801b00a:	eddf 5a57 	vldr	s11, [pc, #348]	; 801b168 <MotionFX_propagate+0x6e0>
 801b00e:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 801b012:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801b016:	ed9d 6a0f 	vldr	s12, [sp, #60]	; 0x3c
 801b01a:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801b01e:	ee27 7a07 	vmul.f32	s14, s14, s14
 801b022:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801b026:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b02a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801b02e:	ee26 6a06 	vmul.f32	s12, s12, s12
 801b032:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b036:	ee76 7a27 	vadd.f32	s15, s12, s15
 801b03a:	ee17 0a90 	vmov	r0, s15
 801b03e:	f7e5 fa8b 	bl	8000558 <__aeabi_f2d>
 801b042:	ec41 0b10 	vmov	d0, r0, r1
 801b046:	f001 fac7 	bl	801c5d8 <sqrt>
 801b04a:	ec51 0b10 	vmov	r0, r1, d0
 801b04e:	f7e5 fdcf 	bl	8000bf0 <__aeabi_d2f>
 801b052:	ed9d 5a0c 	vldr	s10, [sp, #48]	; 0x30
 801b056:	eddd 5a0d 	vldr	s11, [sp, #52]	; 0x34
 801b05a:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 801b05e:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 801b062:	ee07 0a90 	vmov	s15, r0
 801b066:	eec5 6a27 	vdiv.f32	s13, s10, s15
 801b06a:	eec5 3aa7 	vdiv.f32	s7, s11, s15
 801b06e:	ee86 4a27 	vdiv.f32	s8, s12, s15
 801b072:	eec7 4a27 	vdiv.f32	s9, s14, s15
 801b076:	eef4 6a66 	vcmp.f32	s13, s13
 801b07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b07e:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 801b082:	edcd 3a0d 	vstr	s7, [sp, #52]	; 0x34
 801b086:	ed8d 4a0e 	vstr	s8, [sp, #56]	; 0x38
 801b08a:	edcd 4a0f 	vstr	s9, [sp, #60]	; 0x3c
 801b08e:	f47f ad52 	bne.w	801ab36 <MotionFX_propagate+0xae>
 801b092:	f894 35f5 	ldrb.w	r3, [r4, #1525]	; 0x5f5
 801b096:	eddb 5a32 	vldr	s11, [fp, #200]	; 0xc8
 801b09a:	ed9b 6a33 	vldr	s12, [fp, #204]	; 0xcc
 801b09e:	eddb 7a34 	vldr	s15, [fp, #208]	; 0xd0
 801b0a2:	edcb 6a1e 	vstr	s13, [fp, #120]	; 0x78
 801b0a6:	ee07 3a10 	vmov	s14, r3
 801b0aa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801b0ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b0b2:	ee85 5a87 	vdiv.f32	s10, s11, s14
 801b0b6:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 801b0ba:	f8db 10ac 	ldr.w	r1, [fp, #172]	; 0xac
 801b0be:	f8db 20b0 	ldr.w	r2, [fp, #176]	; 0xb0
 801b0c2:	f8cb 30b8 	str.w	r3, [fp, #184]	; 0xb8
 801b0c6:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 801b0ca:	f8cb 10bc 	str.w	r1, [fp, #188]	; 0xbc
 801b0ce:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 801b0d2:	f8cb 30c4 	str.w	r3, [fp, #196]	; 0xc4
 801b0d6:	eec6 5a07 	vdiv.f32	s11, s12, s14
 801b0da:	ee87 6a87 	vdiv.f32	s12, s15, s14
 801b0de:	ee25 3aa5 	vmul.f32	s6, s11, s11
 801b0e2:	ee65 7a05 	vmul.f32	s15, s10, s10
 801b0e6:	ee26 7a06 	vmul.f32	s14, s12, s12
 801b0ea:	ee77 7a83 	vadd.f32	s15, s15, s6
 801b0ee:	edcb 3a1f 	vstr	s7, [fp, #124]	; 0x7c
 801b0f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b0f6:	ed8b 4a20 	vstr	s8, [fp, #128]	; 0x80
 801b0fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b0fe:	edcb 4a21 	vstr	s9, [fp, #132]	; 0x84
 801b102:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b10a:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 801b10e:	edcb 5a37 	vstr	s11, [fp, #220]	; 0xdc
 801b112:	ed8b 6a38 	vstr	s12, [fp, #224]	; 0xe0
 801b116:	f340 8430 	ble.w	801b97a <MotionFX_propagate+0xef2>
 801b11a:	ee17 0a90 	vmov	r0, s15
 801b11e:	f7e5 fa1b 	bl	8000558 <__aeabi_f2d>
 801b122:	ec41 0b10 	vmov	d0, r0, r1
 801b126:	f001 fa57 	bl	801c5d8 <sqrt>
 801b12a:	ec51 0b10 	vmov	r0, r1, d0
 801b12e:	f7e5 fd5f 	bl	8000bf0 <__aeabi_d2f>
 801b132:	2300      	movs	r3, #0
 801b134:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801b138:	f8cb 00e4 	str.w	r0, [fp, #228]	; 0xe4
 801b13c:	f8cb 30a8 	str.w	r3, [fp, #168]	; 0xa8
 801b140:	f8cb 30ac 	str.w	r3, [fp, #172]	; 0xac
 801b144:	f8cb 30b0 	str.w	r3, [fp, #176]	; 0xb0
 801b148:	f8cb 30e8 	str.w	r3, [fp, #232]	; 0xe8
 801b14c:	f8cb 30ec 	str.w	r3, [fp, #236]	; 0xec
 801b150:	f8cb 30f0 	str.w	r3, [fp, #240]	; 0xf0
 801b154:	f8cb 20b4 	str.w	r2, [fp, #180]	; 0xb4
 801b158:	f8cb 20f4 	str.w	r2, [fp, #244]	; 0xf4
 801b15c:	e2c7      	b.n	801b6ee <MotionFX_propagate+0xc66>
 801b15e:	bf00      	nop
 801b160:	20000000 	.word	0x20000000
 801b164:	20001c44 	.word	0x20001c44
 801b168:	00000000 	.word	0x00000000
 801b16c:	20001d30 	.word	0x20001d30
 801b170:	f994 33d6 	ldrsb.w	r3, [r4, #982]	; 0x3d6
 801b174:	f994 23e8 	ldrsb.w	r2, [r4, #1000]	; 0x3e8
 801b178:	f994 13eb 	ldrsb.w	r1, [r4, #1003]	; 0x3eb
 801b17c:	f994 53d4 	ldrsb.w	r5, [r4, #980]	; 0x3d4
 801b180:	f994 03d2 	ldrsb.w	r0, [r4, #978]	; 0x3d2
 801b184:	f994 73ea 	ldrsb.w	r7, [r4, #1002]	; 0x3ea
 801b188:	f894 9835 	ldrb.w	r9, [r4, #2101]	; 0x835
 801b18c:	ee06 3a10 	vmov	s12, r3
 801b190:	f994 33d7 	ldrsb.w	r3, [r4, #983]	; 0x3d7
 801b194:	ee00 3a10 	vmov	s0, r3
 801b198:	f994 33ee 	ldrsb.w	r3, [r4, #1006]	; 0x3ee
 801b19c:	ee06 3a90 	vmov	s13, r3
 801b1a0:	f994 33ef 	ldrsb.w	r3, [r4, #1007]	; 0x3ef
 801b1a4:	ee01 3a90 	vmov	s3, r3
 801b1a8:	f994 33d8 	ldrsb.w	r3, [r4, #984]	; 0x3d8
 801b1ac:	ee02 3a10 	vmov	s4, r3
 801b1b0:	f994 33f0 	ldrsb.w	r3, [r4, #1008]	; 0x3f0
 801b1b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b1b8:	ee02 3a90 	vmov	s5, r3
 801b1bc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b1c0:	f994 33d0 	ldrsb.w	r3, [r4, #976]	; 0x3d0
 801b1c4:	ee61 1aa4 	vmul.f32	s3, s3, s9
 801b1c8:	ee0a 3a90 	vmov	s21, r3
 801b1cc:	ee66 6a84 	vmul.f32	s13, s13, s8
 801b1d0:	f994 33d1 	ldrsb.w	r3, [r4, #977]	; 0x3d1
 801b1d4:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801b1d8:	ee76 6aa1 	vadd.f32	s13, s13, s3
 801b1dc:	ee0a 3a10 	vmov	s20, r3
 801b1e0:	ee62 2aa5 	vmul.f32	s5, s5, s11
 801b1e4:	f994 33d3 	ldrsb.w	r3, [r4, #979]	; 0x3d3
 801b1e8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801b1ec:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801b1f0:	ee07 1a10 	vmov	s14, r1
 801b1f4:	ee20 0a23 	vmul.f32	s0, s0, s7
 801b1f8:	f994 13ec 	ldrsb.w	r1, [r4, #1004]	; 0x3ec
 801b1fc:	ee07 2a90 	vmov	s15, r2
 801b200:	ee26 6a03 	vmul.f32	s12, s12, s6
 801b204:	f994 23e9 	ldrsb.w	r2, [r4, #1001]	; 0x3e9
 801b208:	ee76 2aa2 	vadd.f32	s5, s13, s5
 801b20c:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801b210:	ee06 3a90 	vmov	s13, r3
 801b214:	ee22 2a05 	vmul.f32	s4, s4, s10
 801b218:	ee00 2a90 	vmov	s1, r2
 801b21c:	ee01 1a10 	vmov	s2, r1
 801b220:	ee36 6a00 	vadd.f32	s12, s12, s0
 801b224:	eef8 bae6 	vcvt.f32.s32	s23, s13
 801b228:	ee06 5a90 	vmov	s13, r5
 801b22c:	ee01 0a90 	vmov	s3, r0
 801b230:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801b234:	f994 03d5 	ldrsb.w	r0, [r4, #981]	; 0x3d5
 801b238:	f994 33dd 	ldrsb.w	r3, [r4, #989]	; 0x3dd
 801b23c:	edcd 2a0b 	vstr	s5, [sp, #44]	; 0x2c
 801b240:	ee36 6a02 	vadd.f32	s12, s12, s4
 801b244:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 801b248:	eeb8 bae0 	vcvt.f32.s32	s22, s1
 801b24c:	eef8 aaea 	vcvt.f32.s32	s21, s21
 801b250:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801b254:	2100      	movs	r1, #0
 801b256:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 801b25a:	ee6a 0a23 	vmul.f32	s1, s20, s7
 801b25e:	ee02 0a10 	vmov	s4, r0
 801b262:	ee60 3a23 	vmul.f32	s7, s0, s7
 801b266:	f994 03ed 	ldrsb.w	r0, [r4, #1005]	; 0x3ed
 801b26a:	910c      	str	r1, [sp, #48]	; 0x30
 801b26c:	910d      	str	r1, [sp, #52]	; 0x34
 801b26e:	910e      	str	r1, [sp, #56]	; 0x38
 801b270:	9110      	str	r1, [sp, #64]	; 0x40
 801b272:	9111      	str	r1, [sp, #68]	; 0x44
 801b274:	9112      	str	r1, [sp, #72]	; 0x48
 801b276:	960f      	str	r6, [sp, #60]	; 0x3c
 801b278:	9613      	str	r6, [sp, #76]	; 0x4c
 801b27a:	ee6a aa83 	vmul.f32	s21, s21, s6
 801b27e:	ee2b ba24 	vmul.f32	s22, s22, s9
 801b282:	ee21 1a24 	vmul.f32	s2, s2, s9
 801b286:	ed8d 6a08 	vstr	s12, [sp, #32]
 801b28a:	ee04 7a90 	vmov	s9, r7
 801b28e:	f994 63dc 	ldrsb.w	r6, [r4, #988]	; 0x3dc
 801b292:	9303      	str	r3, [sp, #12]
 801b294:	ee2b 3a83 	vmul.f32	s6, s23, s6
 801b298:	f994 33de 	ldrsb.w	r3, [r4, #990]	; 0x3de
 801b29c:	f994 13e2 	ldrsb.w	r1, [r4, #994]	; 0x3e2
 801b2a0:	f994 e3e4 	ldrsb.w	lr, [r4, #996]	; 0x3e4
 801b2a4:	4af2      	ldr	r2, [pc, #968]	; (801b670 <MotionFX_propagate+0xbe8>)
 801b2a6:	f994 53df 	ldrsb.w	r5, [r4, #991]	; 0x3df
 801b2aa:	f892 28e0 	ldrb.w	r2, [r2, #2272]	; 0x8e0
 801b2ae:	f994 73e1 	ldrsb.w	r7, [r4, #993]	; 0x3e1
 801b2b2:	ee06 1a90 	vmov	s13, r1
 801b2b6:	ee33 3a23 	vadd.f32	s6, s6, s7
 801b2ba:	f994 13e3 	ldrsb.w	r1, [r4, #995]	; 0x3e3
 801b2be:	eef8 3ae4 	vcvt.f32.s32	s7, s9
 801b2c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b2c6:	ee04 0a90 	vmov	s9, r0
 801b2ca:	eeb8 aac7 	vcvt.f32.s32	s20, s14
 801b2ce:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b2d2:	ee2a 7a04 	vmul.f32	s14, s20, s8
 801b2d6:	eeb8 4ae4 	vcvt.f32.s32	s8, s9
 801b2da:	ee04 1a90 	vmov	s9, r1
 801b2de:	eeb8 0ae1 	vcvt.f32.s32	s0, s3
 801b2e2:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801b2e6:	ee08 ea10 	vmov	s16, lr
 801b2ea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b2ee:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801b2f2:	ee60 1a05 	vmul.f32	s3, s0, s10
 801b2f6:	ee63 3aa5 	vmul.f32	s7, s7, s11
 801b2fa:	ee7a 0aa0 	vadd.f32	s1, s21, s1
 801b2fe:	ee64 5a25 	vmul.f32	s11, s8, s11
 801b302:	ee22 5a05 	vmul.f32	s10, s4, s10
 801b306:	ee77 7a8b 	vadd.f32	s15, s15, s22
 801b30a:	ee37 7a01 	vadd.f32	s14, s14, s2
 801b30e:	ee64 4a89 	vmul.f32	s9, s9, s18
 801b312:	ee66 6aa9 	vmul.f32	s13, s13, s19
 801b316:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801b31a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801b31e:	ee70 1aa1 	vadd.f32	s3, s1, s3
 801b322:	ee33 5a05 	vadd.f32	s10, s6, s10
 801b326:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b32a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801b32e:	ee28 8a28 	vmul.f32	s16, s16, s17
 801b332:	f994 13e0 	ldrsb.w	r1, [r4, #992]	; 0x3e0
 801b336:	9104      	str	r1, [sp, #16]
 801b338:	eef1 4a61 	vneg.f32	s9, s3
 801b33c:	eef1 5a45 	vneg.f32	s11, s10
 801b340:	eef1 7a67 	vneg.f32	s15, s15
 801b344:	eeb1 7a47 	vneg.f32	s14, s14
 801b348:	edcd 4a07 	vstr	s9, [sp, #28]
 801b34c:	edcd 5a06 	vstr	s11, [sp, #24]
 801b350:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
 801b354:	ed8d 7a09 	vstr	s14, [sp, #36]	; 0x24
 801b358:	ee36 8a88 	vadd.f32	s16, s13, s16
 801b35c:	2a00      	cmp	r2, #0
 801b35e:	f040 827a 	bne.w	801b856 <MotionFX_propagate+0xdce>
 801b362:	464a      	mov	r2, r9
 801b364:	2a00      	cmp	r2, #0
 801b366:	f000 81da 	beq.w	801b71e <MotionFX_propagate+0xc96>
 801b36a:	ee06 2a90 	vmov	s13, r2
 801b36e:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 801b372:	eec7 4a06 	vdiv.f32	s9, s14, s12
 801b376:	f894 3818 	ldrb.w	r3, [r4, #2072]	; 0x818
 801b37a:	f894 0814 	ldrb.w	r0, [r4, #2068]	; 0x814
 801b37e:	3301      	adds	r3, #1
 801b380:	b2db      	uxtb	r3, r3
 801b382:	fbb3 f1f2 	udiv	r1, r3, r2
 801b386:	fb02 3311 	mls	r3, r2, r1, r3
 801b38a:	f884 3818 	strb.w	r3, [r4, #2072]	; 0x818
 801b38e:	ee87 5a86 	vdiv.f32	s10, s15, s12
 801b392:	eec2 5a86 	vdiv.f32	s11, s5, s12
 801b396:	edd8 6a0c 	vldr	s13, [r8, #48]	; 0x30
 801b39a:	ed98 7a0d 	vldr	s14, [r8, #52]	; 0x34
 801b39e:	edd8 7a0e 	vldr	s15, [r8, #56]	; 0x38
 801b3a2:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801b3a6:	ee37 7a05 	vadd.f32	s14, s14, s10
 801b3aa:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b3ae:	edc8 6a0c 	vstr	s13, [r8, #48]	; 0x30
 801b3b2:	ed88 7a0d 	vstr	s14, [r8, #52]	; 0x34
 801b3b6:	edc8 7a0e 	vstr	s15, [r8, #56]	; 0x38
 801b3ba:	2800      	cmp	r0, #0
 801b3bc:	f040 823f 	bne.w	801b83e <MotionFX_propagate+0xdb6>
 801b3c0:	ae10      	add	r6, sp, #64	; 0x40
 801b3c2:	4aac      	ldr	r2, [pc, #688]	; (801b674 <MotionFX_propagate+0xbec>)
 801b3c4:	ed9f 8aac 	vldr	s16, [pc, #688]	; 801b678 <MotionFX_propagate+0xbf0>
 801b3c8:	f102 054c 	add.w	r5, r2, #76	; 0x4c
 801b3cc:	4611      	mov	r1, r2
 801b3ce:	f1a2 0010 	sub.w	r0, r2, #16
 801b3d2:	f7f5 fbdb 	bl	8010b8c <m_qmult_eml>
 801b3d6:	f1a5 027c 	sub.w	r2, r5, #124	; 0x7c
 801b3da:	4611      	mov	r1, r2
 801b3dc:	4630      	mov	r0, r6
 801b3de:	f7f5 fbd5 	bl	8010b8c <m_qmult_eml>
 801b3e2:	f105 0218 	add.w	r2, r5, #24
 801b3e6:	f1a5 019c 	sub.w	r1, r5, #156	; 0x9c
 801b3ea:	f1a5 004c 	sub.w	r0, r5, #76	; 0x4c
 801b3ee:	f7f5 fbcd 	bl	8010b8c <m_qmult_eml>
 801b3f2:	f105 0218 	add.w	r2, r5, #24
 801b3f6:	4611      	mov	r1, r2
 801b3f8:	f1a5 007c 	sub.w	r0, r5, #124	; 0x7c
 801b3fc:	f7f5 fbc6 	bl	8010b8c <m_qmult_eml>
 801b400:	edd5 6a06 	vldr	s13, [r5, #24]
 801b404:	ed95 7a07 	vldr	s14, [r5, #28]
 801b408:	edd5 7a08 	vldr	s15, [r5, #32]
 801b40c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801b410:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801b414:	ee27 7a07 	vmul.f32	s14, s14, s14
 801b418:	ee76 6a88 	vadd.f32	s13, s13, s16
 801b41c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b420:	ee37 7a26 	vadd.f32	s14, s14, s13
 801b424:	ee26 6a06 	vmul.f32	s12, s12, s12
 801b428:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b42c:	ee76 7a27 	vadd.f32	s15, s12, s15
 801b430:	ee17 0a90 	vmov	r0, s15
 801b434:	f7e5 f890 	bl	8000558 <__aeabi_f2d>
 801b438:	ec41 0b10 	vmov	d0, r0, r1
 801b43c:	f001 f8cc 	bl	801c5d8 <sqrt>
 801b440:	ec51 0b10 	vmov	r0, r1, d0
 801b444:	f7e5 fbd4 	bl	8000bf0 <__aeabi_d2f>
 801b448:	ed95 6a06 	vldr	s12, [r5, #24]
 801b44c:	edd5 6a07 	vldr	s13, [r5, #28]
 801b450:	ed95 7a08 	vldr	s14, [r5, #32]
 801b454:	ed95 5a09 	vldr	s10, [r5, #36]	; 0x24
 801b458:	f894 3820 	ldrb.w	r3, [r4, #2080]	; 0x820
 801b45c:	ee07 0a90 	vmov	s15, r0
 801b460:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801b464:	2b01      	cmp	r3, #1
 801b466:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801b46a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b46e:	ee85 7a27 	vdiv.f32	s14, s10, s15
 801b472:	edc5 5a06 	vstr	s11, [r5, #24]
 801b476:	ed85 6a07 	vstr	s12, [r5, #28]
 801b47a:	edc5 6a08 	vstr	s13, [r5, #32]
 801b47e:	ed85 7a09 	vstr	s14, [r5, #36]	; 0x24
 801b482:	f000 8270 	beq.w	801b966 <MotionFX_propagate+0xede>
 801b486:	4f7d      	ldr	r7, [pc, #500]	; (801b67c <MotionFX_propagate+0xbf4>)
 801b488:	f894 1836 	ldrb.w	r1, [r4, #2102]	; 0x836
 801b48c:	9101      	str	r1, [sp, #4]
 801b48e:	f1a7 030c 	sub.w	r3, r7, #12
 801b492:	f1a7 0294 	sub.w	r2, r7, #148	; 0x94
 801b496:	a906      	add	r1, sp, #24
 801b498:	9700      	str	r7, [sp, #0]
 801b49a:	f1a7 0088 	sub.w	r0, r7, #136	; 0x88
 801b49e:	f7f5 ff97 	bl	80113d0 <output_update>
 801b4a2:	f894 3834 	ldrb.w	r3, [r4, #2100]	; 0x834
 801b4a6:	2200      	movs	r2, #0
 801b4a8:	0799      	lsls	r1, r3, #30
 801b4aa:	f884 2816 	strb.w	r2, [r4, #2070]	; 0x816
 801b4ae:	f100 8103 	bmi.w	801b6b8 <MotionFX_propagate+0xc30>
 801b4b2:	f894 1818 	ldrb.w	r1, [r4, #2072]	; 0x818
 801b4b6:	fbb1 f2f9 	udiv	r2, r1, r9
 801b4ba:	fb09 1912 	mls	r9, r9, r2, r1
 801b4be:	f019 0fff 	tst.w	r9, #255	; 0xff
 801b4c2:	f040 80f9 	bne.w	801b6b8 <MotionFX_propagate+0xc30>
 801b4c6:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 801b4ca:	edd8 7a22 	vldr	s15, [r8, #136]	; 0x88
 801b4ce:	f8d8 108c 	ldr.w	r1, [r8, #140]	; 0x8c
 801b4d2:	f8d8 2090 	ldr.w	r2, [r8, #144]	; 0x90
 801b4d6:	edc8 7a26 	vstr	s15, [r8, #152]	; 0x98
 801b4da:	f043 0301 	orr.w	r3, r3, #1
 801b4de:	eeb4 7a47 	vcmp.f32	s14, s14
 801b4e2:	f884 3834 	strb.w	r3, [r4, #2100]	; 0x834
 801b4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4ea:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 801b4ee:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 801b4f2:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 801b4f6:	f8c8 30a4 	str.w	r3, [r8, #164]	; 0xa4
 801b4fa:	f47f ab17 	bne.w	801ab2c <MotionFX_propagate+0xa4>
 801b4fe:	ed98 7a2a 	vldr	s14, [r8, #168]	; 0xa8
 801b502:	eeb4 7a47 	vcmp.f32	s14, s14
 801b506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b50a:	f47f ab0f 	bne.w	801ab2c <MotionFX_propagate+0xa4>
 801b50e:	ed98 7a32 	vldr	s14, [r8, #200]	; 0xc8
 801b512:	eeb4 7a47 	vcmp.f32	s14, s14
 801b516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b51a:	f47f ab07 	bne.w	801ab2c <MotionFX_propagate+0xa4>
 801b51e:	eef4 7a67 	vcmp.f32	s15, s15
 801b522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b526:	f47f ab01 	bne.w	801ab2c <MotionFX_propagate+0xa4>
 801b52a:	4630      	mov	r0, r6
 801b52c:	aa14      	add	r2, sp, #80	; 0x50
 801b52e:	f5a7 7196 	sub.w	r1, r7, #300	; 0x12c
 801b532:	f7f5 fb2b 	bl	8010b8c <m_qmult_eml>
 801b536:	aa0c      	add	r2, sp, #48	; 0x30
 801b538:	f5a7 71a6 	sub.w	r1, r7, #332	; 0x14c
 801b53c:	f5a7 7086 	sub.w	r0, r7, #268	; 0x10c
 801b540:	f7f5 fb24 	bl	8010b8c <m_qmult_eml>
 801b544:	aa0c      	add	r2, sp, #48	; 0x30
 801b546:	4611      	mov	r1, r2
 801b548:	a814      	add	r0, sp, #80	; 0x50
 801b54a:	f7f5 fb1f 	bl	8010b8c <m_qmult_eml>
 801b54e:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
 801b552:	eddf 5a49 	vldr	s11, [pc, #292]	; 801b678 <MotionFX_propagate+0xbf0>
 801b556:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 801b55a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801b55e:	ed9d 6a0f 	vldr	s12, [sp, #60]	; 0x3c
 801b562:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801b566:	ee27 7a07 	vmul.f32	s14, s14, s14
 801b56a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801b56e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b572:	ee37 7a26 	vadd.f32	s14, s14, s13
 801b576:	ee26 6a06 	vmul.f32	s12, s12, s12
 801b57a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b57e:	ee76 7a27 	vadd.f32	s15, s12, s15
 801b582:	ee17 0a90 	vmov	r0, s15
 801b586:	f7e4 ffe7 	bl	8000558 <__aeabi_f2d>
 801b58a:	ec41 0b10 	vmov	d0, r0, r1
 801b58e:	f001 f823 	bl	801c5d8 <sqrt>
 801b592:	ec51 0b10 	vmov	r0, r1, d0
 801b596:	f7e5 fb2b 	bl	8000bf0 <__aeabi_d2f>
 801b59a:	ed9d 5a0c 	vldr	s10, [sp, #48]	; 0x30
 801b59e:	eddd 5a0d 	vldr	s11, [sp, #52]	; 0x34
 801b5a2:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 801b5a6:	eddd 6a0f 	vldr	s13, [sp, #60]	; 0x3c
 801b5aa:	ee07 0a90 	vmov	s15, r0
 801b5ae:	ee85 7a27 	vdiv.f32	s14, s10, s15
 801b5b2:	ee85 4aa7 	vdiv.f32	s8, s11, s15
 801b5b6:	eec6 4a27 	vdiv.f32	s9, s12, s15
 801b5ba:	ee86 5aa7 	vdiv.f32	s10, s13, s15
 801b5be:	eeb4 7a47 	vcmp.f32	s14, s14
 801b5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5c6:	ed8d 7a0c 	vstr	s14, [sp, #48]	; 0x30
 801b5ca:	ed8d 4a0d 	vstr	s8, [sp, #52]	; 0x34
 801b5ce:	edcd 4a0e 	vstr	s9, [sp, #56]	; 0x38
 801b5d2:	ed8d 5a0f 	vstr	s10, [sp, #60]	; 0x3c
 801b5d6:	f47f aaa9 	bne.w	801ab2c <MotionFX_propagate+0xa4>
 801b5da:	f894 3835 	ldrb.w	r3, [r4, #2101]	; 0x835
 801b5de:	ed98 6a32 	vldr	s12, [r8, #200]	; 0xc8
 801b5e2:	edd8 6a33 	vldr	s13, [r8, #204]	; 0xcc
 801b5e6:	edd8 3a34 	vldr	s7, [r8, #208]	; 0xd0
 801b5ea:	ed88 7a1e 	vstr	s14, [r8, #120]	; 0x78
 801b5ee:	ee07 3a90 	vmov	s15, r3
 801b5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b5f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b5fa:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801b5fe:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 801b602:	f8d8 10ac 	ldr.w	r1, [r8, #172]	; 0xac
 801b606:	f8d8 20b0 	ldr.w	r2, [r8, #176]	; 0xb0
 801b60a:	f8c8 30b8 	str.w	r3, [r8, #184]	; 0xb8
 801b60e:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
 801b612:	f8c8 10bc 	str.w	r1, [r8, #188]	; 0xbc
 801b616:	f8c8 20c0 	str.w	r2, [r8, #192]	; 0xc0
 801b61a:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
 801b61e:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801b622:	eec3 6aa7 	vdiv.f32	s13, s7, s15
 801b626:	ee26 3a06 	vmul.f32	s6, s12, s12
 801b62a:	ee65 7aa5 	vmul.f32	s15, s11, s11
 801b62e:	ee66 3aa6 	vmul.f32	s7, s13, s13
 801b632:	ee77 7a83 	vadd.f32	s15, s15, s6
 801b636:	ed88 4a1f 	vstr	s8, [r8, #124]	; 0x7c
 801b63a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b63e:	edc8 4a20 	vstr	s9, [r8, #128]	; 0x80
 801b642:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b646:	ed88 5a21 	vstr	s10, [r8, #132]	; 0x84
 801b64a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b652:	edc8 5a36 	vstr	s11, [r8, #216]	; 0xd8
 801b656:	ed88 6a37 	vstr	s12, [r8, #220]	; 0xdc
 801b65a:	edc8 6a38 	vstr	s13, [r8, #224]	; 0xe0
 801b65e:	f340 8190 	ble.w	801b982 <MotionFX_propagate+0xefa>
 801b662:	ee17 0a90 	vmov	r0, s15
 801b666:	f7e4 ff77 	bl	8000558 <__aeabi_f2d>
 801b66a:	ec41 0b10 	vmov	d0, r0, r1
 801b66e:	e007      	b.n	801b680 <MotionFX_propagate+0xbf8>
 801b670:	20000000 	.word	0x20000000
 801b674:	20001e84 	.word	0x20001e84
 801b678:	00000000 	.word	0x00000000
 801b67c:	20001f70 	.word	0x20001f70
 801b680:	f000 ffaa 	bl	801c5d8 <sqrt>
 801b684:	ec51 0b10 	vmov	r0, r1, d0
 801b688:	f7e5 fab2 	bl	8000bf0 <__aeabi_d2f>
 801b68c:	2300      	movs	r3, #0
 801b68e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801b692:	f8c8 00e4 	str.w	r0, [r8, #228]	; 0xe4
 801b696:	f8c8 30a8 	str.w	r3, [r8, #168]	; 0xa8
 801b69a:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
 801b69e:	f8c8 30b0 	str.w	r3, [r8, #176]	; 0xb0
 801b6a2:	f8c8 30e8 	str.w	r3, [r8, #232]	; 0xe8
 801b6a6:	f8c8 30ec 	str.w	r3, [r8, #236]	; 0xec
 801b6aa:	f8c8 30f0 	str.w	r3, [r8, #240]	; 0xf0
 801b6ae:	f8c8 20b4 	str.w	r2, [r8, #180]	; 0xb4
 801b6b2:	f8c8 20f4 	str.w	r2, [r8, #244]	; 0xf4
 801b6b6:	e004      	b.n	801b6c2 <MotionFX_propagate+0xc3a>
 801b6b8:	4abb      	ldr	r2, [pc, #748]	; (801b9a8 <MotionFX_propagate+0xf20>)
 801b6ba:	4630      	mov	r0, r6
 801b6bc:	4611      	mov	r1, r2
 801b6be:	f7f5 fa65 	bl	8010b8c <m_qmult_eml>
 801b6c2:	f894 3836 	ldrb.w	r3, [r4, #2102]	; 0x836
 801b6c6:	2b01      	cmp	r3, #1
 801b6c8:	f47f aa30 	bne.w	801ab2c <MotionFX_propagate+0xa4>
 801b6cc:	edd5 7a08 	vldr	s15, [r5, #32]
 801b6d0:	69aa      	ldr	r2, [r5, #24]
 801b6d2:	69eb      	ldr	r3, [r5, #28]
 801b6d4:	61ab      	str	r3, [r5, #24]
 801b6d6:	eef1 7a67 	vneg.f32	s15, s15
 801b6da:	61ea      	str	r2, [r5, #28]
 801b6dc:	edc5 7a08 	vstr	s15, [r5, #32]
 801b6e0:	f7ff ba24 	b.w	801ab2c <MotionFX_propagate+0xa4>
 801b6e4:	4ab1      	ldr	r2, [pc, #708]	; (801b9ac <MotionFX_propagate+0xf24>)
 801b6e6:	4630      	mov	r0, r6
 801b6e8:	4611      	mov	r1, r2
 801b6ea:	f7f5 fa4f 	bl	8010b8c <m_qmult_eml>
 801b6ee:	f894 35f6 	ldrb.w	r3, [r4, #1526]	; 0x5f6
 801b6f2:	2b01      	cmp	r3, #1
 801b6f4:	f47f aa1f 	bne.w	801ab36 <MotionFX_propagate+0xae>
 801b6f8:	edd7 7a08 	vldr	s15, [r7, #32]
 801b6fc:	69ba      	ldr	r2, [r7, #24]
 801b6fe:	69fb      	ldr	r3, [r7, #28]
 801b700:	61bb      	str	r3, [r7, #24]
 801b702:	eef1 7a67 	vneg.f32	s15, s15
 801b706:	61fa      	str	r2, [r7, #28]
 801b708:	edc7 7a08 	vstr	s15, [r7, #32]
 801b70c:	f7ff ba13 	b.w	801ab36 <MotionFX_propagate+0xae>
 801b710:	2201      	movs	r2, #1
 801b712:	f884 25f5 	strb.w	r2, [r4, #1525]	; 0x5f5
 801b716:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801b71a:	f7ff bb84 	b.w	801ae26 <MotionFX_propagate+0x39e>
 801b71e:	2201      	movs	r2, #1
 801b720:	f884 2835 	strb.w	r2, [r4, #2101]	; 0x835
 801b724:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801b728:	e623      	b.n	801b372 <MotionFX_propagate+0x8ea>
 801b72a:	4ba1      	ldr	r3, [pc, #644]	; (801b9b0 <MotionFX_propagate+0xf28>)
 801b72c:	ed9d 0a02 	vldr	s0, [sp, #8]
 801b730:	ae10      	add	r6, sp, #64	; 0x40
 801b732:	f1a3 020c 	sub.w	r2, r3, #12
 801b736:	4618      	mov	r0, r3
 801b738:	9600      	str	r6, [sp, #0]
 801b73a:	a909      	add	r1, sp, #36	; 0x24
 801b73c:	f7f5 fbf4 	bl	8010f28 <SpacePointGyroProp>
 801b740:	f7ff bb99 	b.w	801ae76 <MotionFX_propagate+0x3ee>
 801b744:	ee61 1aa1 	vmul.f32	s3, s3, s3
 801b748:	ee62 2aa2 	vmul.f32	s5, s5, s5
 801b74c:	ee65 7a05 	vmul.f32	s15, s10, s10
 801b750:	ee72 2aa1 	vadd.f32	s5, s5, s3
 801b754:	ee72 7aa7 	vadd.f32	s15, s5, s15
 801b758:	ee17 0a90 	vmov	r0, s15
 801b75c:	f7e4 fefc 	bl	8000558 <__aeabi_f2d>
 801b760:	ec41 0b10 	vmov	d0, r0, r1
 801b764:	f000 ff38 	bl	801c5d8 <sqrt>
 801b768:	ec51 0b10 	vmov	r0, r1, d0
 801b76c:	f7e5 fa40 	bl	8000bf0 <__aeabi_d2f>
 801b770:	ee0a 0a90 	vmov	s21, r0
 801b774:	f7e4 fef0 	bl	8000558 <__aeabi_f2d>
 801b778:	a387      	add	r3, pc, #540	; (adr r3, 801b998 <MotionFX_propagate+0xf10>)
 801b77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b77e:	f7e5 f9b1 	bl	8000ae4 <__aeabi_dcmplt>
 801b782:	eddd 7a06 	vldr	s15, [sp, #24]
 801b786:	ed9d 6a07 	vldr	s12, [sp, #28]
 801b78a:	ed9d 7a08 	vldr	s14, [sp, #32]
 801b78e:	2800      	cmp	r0, #0
 801b790:	bf18      	it	ne
 801b792:	eef0 aa68 	vmovne.f32	s21, s17
 801b796:	eec7 6aaa 	vdiv.f32	s13, s15, s21
 801b79a:	eec6 7a2a 	vdiv.f32	s15, s12, s21
 801b79e:	ee87 5a2a 	vdiv.f32	s10, s14, s21
 801b7a2:	ed9d 7a04 	vldr	s14, [sp, #16]
 801b7a6:	edcd 7a07 	vstr	s15, [sp, #28]
 801b7aa:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 801b7ae:	ee07 6a90 	vmov	s15, r6
 801b7b2:	ee07 7a10 	vmov	s14, r7
 801b7b6:	edcd 6a06 	vstr	s13, [sp, #24]
 801b7ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b7be:	eddd 6a03 	vldr	s13, [sp, #12]
 801b7c2:	ed9d 6a05 	vldr	s12, [sp, #20]
 801b7c6:	ed8d 5a08 	vstr	s10, [sp, #32]
 801b7ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b7ce:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b7d2:	ee67 7a8a 	vmul.f32	s15, s15, s20
 801b7d6:	ee27 aa0a 	vmul.f32	s20, s14, s20
 801b7da:	ee07 8a10 	vmov	s14, r8
 801b7de:	ee65 5aa9 	vmul.f32	s11, s11, s19
 801b7e2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801b7e6:	ee66 9aa9 	vmul.f32	s19, s13, s19
 801b7ea:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801b7ee:	ee26 6a09 	vmul.f32	s12, s12, s18
 801b7f2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b7f6:	ee26 9a89 	vmul.f32	s18, s13, s18
 801b7fa:	ee3a 7a29 	vadd.f32	s14, s20, s19
 801b7fe:	ee77 7a86 	vadd.f32	s15, s15, s12
 801b802:	ee37 9a09 	vadd.f32	s18, s14, s18
 801b806:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801b80a:	ee29 9a09 	vmul.f32	s18, s18, s18
 801b80e:	ee68 7a08 	vmul.f32	s15, s16, s16
 801b812:	ee37 7a09 	vadd.f32	s14, s14, s18
 801b816:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b81a:	ee17 0a90 	vmov	r0, s15
 801b81e:	f7e4 fe9b 	bl	8000558 <__aeabi_f2d>
 801b822:	ec41 0b10 	vmov	d0, r0, r1
 801b826:	f000 fed7 	bl	801c5d8 <sqrt>
 801b82a:	f894 25f5 	ldrb.w	r2, [r4, #1525]	; 0x5f5
 801b82e:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 801b832:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 801b836:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 801b83a:	f7ff baed 	b.w	801ae18 <MotionFX_propagate+0x390>
 801b83e:	4b5d      	ldr	r3, [pc, #372]	; (801b9b4 <MotionFX_propagate+0xf2c>)
 801b840:	ed9d 0a02 	vldr	s0, [sp, #8]
 801b844:	ae10      	add	r6, sp, #64	; 0x40
 801b846:	f1a3 020c 	sub.w	r2, r3, #12
 801b84a:	4618      	mov	r0, r3
 801b84c:	9600      	str	r6, [sp, #0]
 801b84e:	a909      	add	r1, sp, #36	; 0x24
 801b850:	f7f5 fb6a 	bl	8010f28 <SpacePointGyroProp>
 801b854:	e5b5      	b.n	801b3c2 <MotionFX_propagate+0x93a>
 801b856:	ee61 1aa1 	vmul.f32	s3, s3, s3
 801b85a:	ee25 5a05 	vmul.f32	s10, s10, s10
 801b85e:	ee26 6a06 	vmul.f32	s12, s12, s12
 801b862:	ee35 5a21 	vadd.f32	s10, s10, s3
 801b866:	9305      	str	r3, [sp, #20]
 801b868:	ee75 7a06 	vadd.f32	s15, s10, s12
 801b86c:	ee17 0a90 	vmov	r0, s15
 801b870:	f7e4 fe72 	bl	8000558 <__aeabi_f2d>
 801b874:	ec41 0b10 	vmov	d0, r0, r1
 801b878:	f000 feae 	bl	801c5d8 <sqrt>
 801b87c:	ec51 0b10 	vmov	r0, r1, d0
 801b880:	f7e5 f9b6 	bl	8000bf0 <__aeabi_d2f>
 801b884:	ed9d 7a06 	vldr	s14, [sp, #24]
 801b888:	eddd 5a07 	vldr	s11, [sp, #28]
 801b88c:	eddd 6a08 	vldr	s13, [sp, #32]
 801b890:	9b05      	ldr	r3, [sp, #20]
 801b892:	ee07 0a90 	vmov	s15, r0
 801b896:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801b89a:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 801b89e:	ee86 5aa7 	vdiv.f32	s10, s13, s15
 801b8a2:	ed8d 7a07 	vstr	s14, [sp, #28]
 801b8a6:	ed9d 7a04 	vldr	s14, [sp, #16]
 801b8aa:	eddd 6a03 	vldr	s13, [sp, #12]
 801b8ae:	ed8d 6a06 	vstr	s12, [sp, #24]
 801b8b2:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 801b8b6:	ee07 5a90 	vmov	s15, r5
 801b8ba:	ee07 6a10 	vmov	s14, r6
 801b8be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b8c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b8c6:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 801b8ca:	ee67 7aa9 	vmul.f32	s15, s15, s19
 801b8ce:	ee06 7a90 	vmov	s13, r7
 801b8d2:	ee67 9a29 	vmul.f32	s19, s14, s19
 801b8d6:	ee07 3a10 	vmov	s14, r3
 801b8da:	ee65 5a89 	vmul.f32	s11, s11, s18
 801b8de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b8e2:	ee26 9a09 	vmul.f32	s18, s12, s18
 801b8e6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b8ea:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801b8ee:	ee66 6aa8 	vmul.f32	s13, s13, s17
 801b8f2:	ee39 9a89 	vadd.f32	s18, s19, s18
 801b8f6:	ee67 8a28 	vmul.f32	s17, s14, s17
 801b8fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b8fe:	ee79 8a28 	vadd.f32	s17, s18, s17
 801b902:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b906:	ee68 8aa8 	vmul.f32	s17, s17, s17
 801b90a:	ee68 6a08 	vmul.f32	s13, s16, s16
 801b90e:	ee77 7aa8 	vadd.f32	s15, s15, s17
 801b912:	ed8d 5a08 	vstr	s10, [sp, #32]
 801b916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b91a:	ee17 0a90 	vmov	r0, s15
 801b91e:	f7e4 fe1b 	bl	8000558 <__aeabi_f2d>
 801b922:	2200      	movs	r2, #0
 801b924:	2300      	movs	r3, #0
 801b926:	4606      	mov	r6, r0
 801b928:	460f      	mov	r7, r1
 801b92a:	f7e5 f903 	bl	8000b34 <__aeabi_dcmpun>
 801b92e:	b930      	cbnz	r0, 801b93e <MotionFX_propagate+0xeb6>
 801b930:	2200      	movs	r2, #0
 801b932:	2300      	movs	r3, #0
 801b934:	4630      	mov	r0, r6
 801b936:	4639      	mov	r1, r7
 801b938:	f7e5 f8e8 	bl	8000b0c <__aeabi_dcmpge>
 801b93c:	b320      	cbz	r0, 801b988 <MotionFX_propagate+0xf00>
 801b93e:	f894 2835 	ldrb.w	r2, [r4, #2101]	; 0x835
 801b942:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 801b946:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801b94a:	eddd 2a0b 	vldr	s5, [sp, #44]	; 0x2c
 801b94e:	e509      	b.n	801b364 <MotionFX_propagate+0x8dc>
 801b950:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801b954:	ed87 8a06 	vstr	s16, [r7, #24]
 801b958:	ed87 8a07 	vstr	s16, [r7, #28]
 801b95c:	ed87 8a08 	vstr	s16, [r7, #32]
 801b960:	627b      	str	r3, [r7, #36]	; 0x24
 801b962:	f7ff baea 	b.w	801af3a <MotionFX_propagate+0x4b2>
 801b966:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801b96a:	ed85 8a06 	vstr	s16, [r5, #24]
 801b96e:	ed85 8a07 	vstr	s16, [r5, #28]
 801b972:	ed85 8a08 	vstr	s16, [r5, #32]
 801b976:	626b      	str	r3, [r5, #36]	; 0x24
 801b978:	e585      	b.n	801b486 <MotionFX_propagate+0x9fe>
 801b97a:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b9a0 <MotionFX_propagate+0xf18>
 801b97e:	f7ff bbd2 	b.w	801b126 <MotionFX_propagate+0x69e>
 801b982:	ed9f 0b07 	vldr	d0, [pc, #28]	; 801b9a0 <MotionFX_propagate+0xf18>
 801b986:	e67b      	b.n	801b680 <MotionFX_propagate+0xbf8>
 801b988:	ec47 6b10 	vmov	d0, r6, r7
 801b98c:	f000 fe24 	bl	801c5d8 <sqrt>
 801b990:	e7d5      	b.n	801b93e <MotionFX_propagate+0xeb6>
 801b992:	bf00      	nop
 801b994:	f3af 8000 	nop.w
 801b998:	a0b5ed8d 	.word	0xa0b5ed8d
 801b99c:	3eb0c6f7 	.word	0x3eb0c6f7
	...
 801b9a8:	20001e44 	.word	0x20001e44
 801b9ac:	20001c04 	.word	0x20001c04
 801b9b0:	20001bd4 	.word	0x20001bd4
 801b9b4:	20001e14 	.word	0x20001e14

0801b9b8 <MotionFX_MagCal_init>:
 801b9b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b9bc:	4c77      	ldr	r4, [pc, #476]	; (801bb9c <MotionFX_MagCal_init+0x1e4>)
 801b9be:	f894 3941 	ldrb.w	r3, [r4, #2369]	; 0x941
 801b9c2:	b097      	sub	sp, #92	; 0x5c
 801b9c4:	b913      	cbnz	r3, 801b9cc <MotionFX_MagCal_init+0x14>
 801b9c6:	b017      	add	sp, #92	; 0x5c
 801b9c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b9cc:	1e43      	subs	r3, r0, #1
 801b9ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b9d2:	d2f8      	bcs.n	801b9c6 <MotionFX_MagCal_init+0xe>
 801b9d4:	4689      	mov	r9, r1
 801b9d6:	4607      	mov	r7, r0
 801b9d8:	fa0f f880 	sxth.w	r8, r0
 801b9dc:	2900      	cmp	r1, #0
 801b9de:	d15a      	bne.n	801ba96 <MotionFX_MagCal_init+0xde>
 801b9e0:	f104 057c 	add.w	r5, r4, #124	; 0x7c
 801b9e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b9e6:	f04f 0e01 	mov.w	lr, #1
 801b9ea:	ae03      	add	r6, sp, #12
 801b9ec:	f88d e004 	strb.w	lr, [sp, #4]
 801b9f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b9f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b9f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b9f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b9f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b9fa:	f855 2948 	ldr.w	r2, [r5], #-72
 801b9fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801ba00:	6032      	str	r2, [r6, #0]
 801ba02:	9302      	str	r3, [sp, #8]
 801ba04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ba06:	ae10      	add	r6, sp, #64	; 0x40
 801ba08:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801ba0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801ba0e:	e886 0003 	stmia.w	r6, {r0, r1}
 801ba12:	a901      	add	r1, sp, #4
 801ba14:	2054      	movs	r0, #84	; 0x54
 801ba16:	f7f2 fdc5 	bl	800e5a4 <MotionFX_SaveMagCalInNVM>
 801ba1a:	f884 9058 	strb.w	r9, [r4, #88]	; 0x58
 801ba1e:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 801ba22:	4a5f      	ldr	r2, [pc, #380]	; (801bba0 <MotionFX_MagCal_init+0x1e8>)
 801ba24:	1bdb      	subs	r3, r3, r7
 801ba26:	ee07 3a90 	vmov	s15, r3
 801ba2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ba2e:	23c8      	movs	r3, #200	; 0xc8
 801ba30:	eef0 7ae7 	vabs.f32	s15, s15
 801ba34:	fb93 f3f7 	sdiv	r3, r3, r7
 801ba38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ba3c:	b2db      	uxtb	r3, r3
 801ba3e:	2b0f      	cmp	r3, #15
 801ba40:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ba44:	bf28      	it	cs
 801ba46:	230f      	movcs	r3, #15
 801ba48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba4c:	f884 3d76 	strb.w	r3, [r4, #3446]	; 0xd76
 801ba50:	f8c2 70c4 	str.w	r7, [r2, #196]	; 0xc4
 801ba54:	dd0f      	ble.n	801ba76 <MotionFX_MagCal_init+0xbe>
 801ba56:	2300      	movs	r3, #0
 801ba58:	4952      	ldr	r1, [pc, #328]	; (801bba4 <MotionFX_MagCal_init+0x1ec>)
 801ba5a:	f8a4 8012 	strh.w	r8, [r4, #18]
 801ba5e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 801ba62:	6161      	str	r1, [r4, #20]
 801ba64:	8323      	strh	r3, [r4, #24]
 801ba66:	61e3      	str	r3, [r4, #28]
 801ba68:	8222      	strh	r2, [r4, #16]
 801ba6a:	2300      	movs	r3, #0
 801ba6c:	f884 3df0 	strb.w	r3, [r4, #3568]	; 0xdf0
 801ba70:	b017      	add	sp, #92	; 0x5c
 801ba72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ba76:	edd4 7a05 	vldr	s15, [r4, #20]
 801ba7a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801bba8 <MotionFX_MagCal_init+0x1f0>
 801ba7e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801bbac <MotionFX_MagCal_init+0x1f4>
 801ba82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ba86:	eef0 7ae7 	vabs.f32	s15, s15
 801ba8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ba8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba92:	dce0      	bgt.n	801ba56 <MotionFX_MagCal_init+0x9e>
 801ba94:	e7e9      	b.n	801ba6a <MotionFX_MagCal_init+0xb2>
 801ba96:	2500      	movs	r5, #0
 801ba98:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 801ba9c:	f504 6016 	add.w	r0, r4, #2400	; 0x960
 801baa0:	4629      	mov	r1, r5
 801baa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801baa6:	61a2      	str	r2, [r4, #24]
 801baa8:	6220      	str	r0, [r4, #32]
 801baaa:	f44f 7248 	mov.w	r2, #800	; 0x320
 801baae:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 801bab2:	61e5      	str	r5, [r4, #28]
 801bab4:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 801bab8:	65e5      	str	r5, [r4, #92]	; 0x5c
 801baba:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 801babe:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 801bac2:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 801bac6:	f003 f956 	bl	801ed76 <memset>
 801baca:	225f      	movs	r2, #95	; 0x5f
 801bacc:	23ff      	movs	r3, #255	; 0xff
 801bace:	2601      	movs	r6, #1
 801bad0:	4629      	mov	r1, r5
 801bad2:	6325      	str	r5, [r4, #48]	; 0x30
 801bad4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 801bad8:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 801badc:	62e5      	str	r5, [r4, #44]	; 0x2c
 801bade:	62a5      	str	r5, [r4, #40]	; 0x28
 801bae0:	f884 20b1 	strb.w	r2, [r4, #177]	; 0xb1
 801bae4:	250f      	movs	r5, #15
 801bae6:	2234      	movs	r2, #52	; 0x34
 801bae8:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 801baec:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
 801baf0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 801baf4:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
 801baf8:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
 801bafc:	f003 f93b 	bl	801ed76 <memset>
 801bb00:	a916      	add	r1, sp, #88	; 0x58
 801bb02:	f1a7 030a 	sub.w	r3, r7, #10
 801bb06:	b29b      	uxth	r3, r3
 801bb08:	2500      	movs	r5, #0
 801bb0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801bb0e:	2b32      	cmp	r3, #50	; 0x32
 801bb10:	f801 5d54 	strb.w	r5, [r1, #-84]!
 801bb14:	f04f 0301 	mov.w	r3, #1
 801bb18:	f04f 0054 	mov.w	r0, #84	; 0x54
 801bb1c:	bf98      	it	ls
 801bb1e:	f884 6058 	strbls.w	r6, [r4, #88]	; 0x58
 801bb22:	f884 607d 	strb.w	r6, [r4, #125]	; 0x7d
 801bb26:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 801bb2a:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 801bb2e:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
 801bb32:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 801bb36:	f7f2 fd33 	bl	800e5a0 <MotionFX_LoadMagCalFromNVM>
 801bb3a:	2801      	cmp	r0, #1
 801bb3c:	f43f af6f 	beq.w	801ba1e <MotionFX_MagCal_init+0x66>
 801bb40:	9e02      	ldr	r6, [sp, #8]
 801bb42:	f88d 5004 	strb.w	r5, [sp, #4]
 801bb46:	2e00      	cmp	r6, #0
 801bb48:	f43f af69 	beq.w	801ba1e <MotionFX_MagCal_init+0x66>
 801bb4c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801bb50:	2b00      	cmp	r3, #0
 801bb52:	f43f af64 	beq.w	801ba1e <MotionFX_MagCal_init+0x66>
 801bb56:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	f43f af5f 	beq.w	801ba1e <MotionFX_MagCal_init+0x66>
 801bb60:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 801bb64:	429a      	cmp	r2, r3
 801bb66:	f4ff af5a 	bcc.w	801ba1e <MotionFX_MagCal_init+0x66>
 801bb6a:	f10d 0e0c 	add.w	lr, sp, #12
 801bb6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bb72:	4d0f      	ldr	r5, [pc, #60]	; (801bbb0 <MotionFX_MagCal_init+0x1f8>)
 801bb74:	62e6      	str	r6, [r4, #44]	; 0x2c
 801bb76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bb78:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bb7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bb7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bb82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bb84:	ae10      	add	r6, sp, #64	; 0x40
 801bb86:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801bb88:	f8de e000 	ldr.w	lr, [lr]
 801bb8c:	f845 e948 	str.w	lr, [r5], #-72
 801bb90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bb92:	e896 0003 	ldmia.w	r6, {r0, r1}
 801bb96:	e885 0003 	stmia.w	r5, {r0, r1}
 801bb9a:	e740      	b.n	801ba1e <MotionFX_MagCal_init+0x66>
 801bb9c:	20001698 	.word	0x20001698
 801bba0:	200010f8 	.word	0x200010f8
 801bba4:	3dcccccd 	.word	0x3dcccccd
 801bba8:	3dcccccd 	.word	0x3dcccccd
 801bbac:	3c23d70a 	.word	0x3c23d70a
 801bbb0:	20001714 	.word	0x20001714

0801bbb4 <MotionFX_MagCal_run>:
 801bbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbb8:	f8df e230 	ldr.w	lr, [pc, #560]	; 801bdec <MotionFX_MagCal_run+0x238>
 801bbbc:	f89e 3941 	ldrb.w	r3, [lr, #2369]	; 0x941
 801bbc0:	b083      	sub	sp, #12
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	d06f      	beq.n	801bca6 <MotionFX_MagCal_run+0xf2>
 801bbc6:	edd0 7a00 	vldr	s15, [r0]
 801bbca:	ed9f 7a84 	vldr	s14, [pc, #528]	; 801bddc <MotionFX_MagCal_run+0x228>
 801bbce:	f89e 4df0 	ldrb.w	r4, [lr, #3568]	; 0xdf0
 801bbd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bbd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801bbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbde:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801bbe2:	bfac      	ite	ge
 801bbe4:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801bbe8:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801bbec:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 801bddc <MotionFX_MagCal_run+0x228>
 801bbf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bbf4:	ee17 1a90 	vmov	r1, s15
 801bbf8:	edd0 7a01 	vldr	s15, [r0, #4]
 801bbfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bc00:	ee67 7a87 	vmul.f32	s15, s15, s14
 801bc04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc08:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801bc0c:	bfac      	ite	ge
 801bc0e:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801bc12:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801bc16:	ed9f 7a71 	vldr	s14, [pc, #452]	; 801bddc <MotionFX_MagCal_run+0x228>
 801bc1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bc1e:	ee17 3a90 	vmov	r3, s15
 801bc22:	edd0 7a02 	vldr	s15, [r0, #8]
 801bc26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bc2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801bc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801bc36:	bfac      	ite	ge
 801bc38:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801bc3c:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801bc40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bc44:	ee17 2a90 	vmov	r2, s15
 801bc48:	b384      	cbz	r4, 801bcac <MotionFX_MagCal_run+0xf8>
 801bc4a:	4d65      	ldr	r5, [pc, #404]	; (801bde0 <MotionFX_MagCal_run+0x22c>)
 801bc4c:	00e0      	lsls	r0, r4, #3
 801bc4e:	f8d5 50c4 	ldr.w	r5, [r5, #196]	; 0xc4
 801bc52:	eb0e 0600 	add.w	r6, lr, r0
 801bc56:	fb15 f504 	smulbb	r5, r5, r4
 801bc5a:	f8a6 5d78 	strh.w	r5, [r6, #3448]	; 0xd78
 801bc5e:	f647 75fe 	movw	r5, #32766	; 0x7ffe
 801bc62:	42a9      	cmp	r1, r5
 801bc64:	4f5f      	ldr	r7, [pc, #380]	; (801bde4 <MotionFX_MagCal_run+0x230>)
 801bc66:	f89e 6d76 	ldrb.w	r6, [lr, #3446]	; 0xd76
 801bc6a:	bfa8      	it	ge
 801bc6c:	4629      	movge	r1, r5
 801bc6e:	42ab      	cmp	r3, r5
 801bc70:	bfa8      	it	ge
 801bc72:	462b      	movge	r3, r5
 801bc74:	42aa      	cmp	r2, r5
 801bc76:	bfa8      	it	ge
 801bc78:	462a      	movge	r2, r5
 801bc7a:	3401      	adds	r4, #1
 801bc7c:	42b9      	cmp	r1, r7
 801bc7e:	4470      	add	r0, lr
 801bc80:	bfb8      	it	lt
 801bc82:	4639      	movlt	r1, r7
 801bc84:	b2e4      	uxtb	r4, r4
 801bc86:	42bb      	cmp	r3, r7
 801bc88:	bfb8      	it	lt
 801bc8a:	462b      	movlt	r3, r5
 801bc8c:	42ba      	cmp	r2, r7
 801bc8e:	bfb8      	it	lt
 801bc90:	463a      	movlt	r2, r7
 801bc92:	42a6      	cmp	r6, r4
 801bc94:	f88e 4df0 	strb.w	r4, [lr, #3568]	; 0xdf0
 801bc98:	f8a0 1d7a 	strh.w	r1, [r0, #3450]	; 0xd7a
 801bc9c:	f8a0 3d7c 	strh.w	r3, [r0, #3452]	; 0xd7c
 801bca0:	f8a0 2d7e 	strh.w	r2, [r0, #3454]	; 0xd7e
 801bca4:	d00a      	beq.n	801bcbc <MotionFX_MagCal_run+0x108>
 801bca6:	b003      	add	sp, #12
 801bca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcac:	68c0      	ldr	r0, [r0, #12]
 801bcae:	f8ce 0d70 	str.w	r0, [lr, #3440]	; 0xd70
 801bcb2:	2001      	movs	r0, #1
 801bcb4:	f88e 0d74 	strb.w	r0, [lr, #3444]	; 0xd74
 801bcb8:	4620      	mov	r0, r4
 801bcba:	e7d0      	b.n	801bc5e <MotionFX_MagCal_run+0xaa>
 801bcbc:	f89e 2d74 	ldrb.w	r2, [lr, #3444]	; 0xd74
 801bcc0:	f8de cd70 	ldr.w	ip, [lr, #3440]	; 0xd70
 801bcc4:	f04f 0a00 	mov.w	sl, #0
 801bcc8:	f88e adf0 	strb.w	sl, [lr, #3568]	; 0xdf0
 801bccc:	2a00      	cmp	r2, #0
 801bcce:	d048      	beq.n	801bd62 <MotionFX_MagCal_run+0x1ae>
 801bcd0:	3a01      	subs	r2, #1
 801bcd2:	217a      	movs	r1, #122	; 0x7a
 801bcd4:	b2d2      	uxtb	r2, r2
 801bcd6:	fb02 1201 	mla	r2, r2, r1, r1
 801bcda:	f8be 701a 	ldrh.w	r7, [lr, #26]
 801bcde:	f8de 5020 	ldr.w	r5, [lr, #32]
 801bce2:	f8be 3018 	ldrh.w	r3, [lr, #24]
 801bce6:	f8de 001c 	ldr.w	r0, [lr, #28]
 801bcea:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 801bde8 <MotionFX_MagCal_run+0x234>
 801bcee:	9201      	str	r2, [sp, #4]
 801bcf0:	4651      	mov	r1, sl
 801bcf2:	4654      	mov	r4, sl
 801bcf4:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 801bcf8:	f04f 0801 	mov.w	r8, #1
 801bcfc:	f89b 6006 	ldrb.w	r6, [fp, #6]
 801bd00:	b32e      	cbz	r6, 801bd4e <MotionFX_MagCal_run+0x19a>
 801bd02:	b327      	cbz	r7, 801bd4e <MotionFX_MagCal_run+0x19a>
 801bd04:	3e01      	subs	r6, #1
 801bd06:	f10a 0208 	add.w	r2, sl, #8
 801bd0a:	b2f6      	uxtb	r6, r6
 801bd0c:	2108      	movs	r1, #8
 801bd0e:	fb11 2606 	smlabb	r6, r1, r6, r2
 801bd12:	4a35      	ldr	r2, [pc, #212]	; (801bde8 <MotionFX_MagCal_run+0x234>)
 801bd14:	42bb      	cmp	r3, r7
 801bd16:	4416      	add	r6, r2
 801bd18:	bf28      	it	cs
 801bd1a:	463b      	movcs	r3, r7
 801bd1c:	465a      	mov	r2, fp
 801bd1e:	3301      	adds	r3, #1
 801bd20:	b29b      	uxth	r3, r3
 801bd22:	42bb      	cmp	r3, r7
 801bd24:	bf28      	it	cs
 801bd26:	463b      	movcs	r3, r7
 801bd28:	eb03 0009 	add.w	r0, r3, r9
 801bd2c:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
 801bd30:	8954      	ldrh	r4, [r2, #10]
 801bd32:	f805 8030 	strb.w	r8, [r5, r0, lsl #3]
 801bd36:	8990      	ldrh	r0, [r2, #12]
 801bd38:	804c      	strh	r4, [r1, #2]
 801bd3a:	89d4      	ldrh	r4, [r2, #14]
 801bd3c:	8088      	strh	r0, [r1, #4]
 801bd3e:	f832 0f08 	ldrh.w	r0, [r2, #8]!
 801bd42:	80cc      	strh	r4, [r1, #6]
 801bd44:	42b2      	cmp	r2, r6
 801bd46:	4460      	add	r0, ip
 801bd48:	d1e9      	bne.n	801bd1e <MotionFX_MagCal_run+0x16a>
 801bd4a:	2101      	movs	r1, #1
 801bd4c:	460c      	mov	r4, r1
 801bd4e:	9a01      	ldr	r2, [sp, #4]
 801bd50:	f10a 0a7a 	add.w	sl, sl, #122	; 0x7a
 801bd54:	4552      	cmp	r2, sl
 801bd56:	f10b 0b7a 	add.w	fp, fp, #122	; 0x7a
 801bd5a:	d1cf      	bne.n	801bcfc <MotionFX_MagCal_run+0x148>
 801bd5c:	2c00      	cmp	r4, #0
 801bd5e:	d13a      	bne.n	801bdd6 <MotionFX_MagCal_run+0x222>
 801bd60:	bbb1      	cbnz	r1, 801bdd0 <MotionFX_MagCal_run+0x21c>
 801bd62:	f89e 3058 	ldrb.w	r3, [lr, #88]	; 0x58
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	d09d      	beq.n	801bca6 <MotionFX_MagCal_run+0xf2>
 801bd6a:	f8be 1018 	ldrh.w	r1, [lr, #24]
 801bd6e:	f8be 301a 	ldrh.w	r3, [lr, #26]
 801bd72:	428b      	cmp	r3, r1
 801bd74:	d023      	beq.n	801bdbe <MotionFX_MagCal_run+0x20a>
 801bd76:	f9be 4012 	ldrsh.w	r4, [lr, #18]
 801bd7a:	b329      	cbz	r1, 801bdc8 <MotionFX_MagCal_run+0x214>
 801bd7c:	f8de 201c 	ldr.w	r2, [lr, #28]
 801bd80:	3201      	adds	r2, #1
 801bd82:	1913      	adds	r3, r2, r4
 801bd84:	1c5a      	adds	r2, r3, #1
 801bd86:	d01f      	beq.n	801bdc8 <MotionFX_MagCal_run+0x214>
 801bd88:	f503 501c 	add.w	r0, r3, #9984	; 0x2700
 801bd8c:	3010      	adds	r0, #16
 801bd8e:	f8de 205c 	ldr.w	r2, [lr, #92]	; 0x5c
 801bd92:	4282      	cmp	r2, r0
 801bd94:	f8be 0060 	ldrh.w	r0, [lr, #96]	; 0x60
 801bd98:	bf84      	itt	hi
 801bd9a:	f8ce 305c 	strhi.w	r3, [lr, #92]	; 0x5c
 801bd9e:	461a      	movhi	r2, r3
 801bda0:	4402      	add	r2, r0
 801bda2:	4293      	cmp	r3, r2
 801bda4:	f4ff af7f 	bcc.w	801bca6 <MotionFX_MagCal_run+0xf2>
 801bda8:	b121      	cbz	r1, 801bdb4 <MotionFX_MagCal_run+0x200>
 801bdaa:	f8de 201c 	ldr.w	r2, [lr, #28]
 801bdae:	3901      	subs	r1, #1
 801bdb0:	fb04 2111 	mls	r1, r4, r1, r2
 801bdb4:	1a5b      	subs	r3, r3, r1
 801bdb6:	b21b      	sxth	r3, r3
 801bdb8:	4283      	cmp	r3, r0
 801bdba:	f6ff af74 	blt.w	801bca6 <MotionFX_MagCal_run+0xf2>
 801bdbe:	b003      	add	sp, #12
 801bdc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdc4:	f7f6 bd4e 	b.w	8012864 <MEMS_runMagCal.constprop.21>
 801bdc8:	f242 7010 	movw	r0, #10000	; 0x2710
 801bdcc:	2300      	movs	r3, #0
 801bdce:	e7de      	b.n	801bd8e <MotionFX_MagCal_run+0x1da>
 801bdd0:	f8ce 001c 	str.w	r0, [lr, #28]
 801bdd4:	e7c5      	b.n	801bd62 <MotionFX_MagCal_run+0x1ae>
 801bdd6:	f8ae 3018 	strh.w	r3, [lr, #24]
 801bdda:	e7c1      	b.n	801bd60 <MotionFX_MagCal_run+0x1ac>
 801bddc:	43fa0000 	.word	0x43fa0000
 801bde0:	200010f8 	.word	0x200010f8
 801bde4:	ffff8002 	.word	0xffff8002
 801bde8:	20002408 	.word	0x20002408
 801bdec:	20001698 	.word	0x20001698

0801bdf0 <MotionFX_MagCal_getParams>:
 801bdf0:	4b14      	ldr	r3, [pc, #80]	; (801be44 <MotionFX_MagCal_getParams+0x54>)
 801bdf2:	f893 2941 	ldrb.w	r2, [r3, #2369]	; 0x941
 801bdf6:	b902      	cbnz	r2, 801bdfa <MotionFX_MagCal_getParams+0xa>
 801bdf8:	4770      	bx	lr
 801bdfa:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 801bdfe:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 801be02:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 801be06:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801be48 <MotionFX_MagCal_getParams+0x58>
 801be0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801be0e:	7303      	strb	r3, [r0, #12]
 801be10:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801be14:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801be18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801be1c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801be20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801be28:	eec6 5a86 	vdiv.f32	s11, s13, s12
 801be2c:	eec7 6a06 	vdiv.f32	s13, s14, s12
 801be30:	ee87 7a86 	vdiv.f32	s14, s15, s12
 801be34:	edc0 5a00 	vstr	s11, [r0]
 801be38:	edc0 6a01 	vstr	s13, [r0, #4]
 801be3c:	ed80 7a02 	vstr	s14, [r0, #8]
 801be40:	4770      	bx	lr
 801be42:	bf00      	nop
 801be44:	20001698 	.word	0x20001698
 801be48:	43fa0000 	.word	0x43fa0000

0801be4c <MotionFX_GetLibVersion>:
 801be4c:	4b10      	ldr	r3, [pc, #64]	; (801be90 <MotionFX_GetLibVersion+0x44>)
 801be4e:	f893 3941 	ldrb.w	r3, [r3, #2369]	; 0x941
 801be52:	b90b      	cbnz	r3, 801be58 <MotionFX_GetLibVersion+0xc>
 801be54:	4618      	mov	r0, r3
 801be56:	4770      	bx	lr
 801be58:	b470      	push	{r4, r5, r6}
 801be5a:	4e0e      	ldr	r6, [pc, #56]	; (801be94 <MotionFX_GetLibVersion+0x48>)
 801be5c:	4605      	mov	r5, r0
 801be5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801be60:	b08b      	sub	sp, #44	; 0x2c
 801be62:	ac01      	add	r4, sp, #4
 801be64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801be66:	6833      	ldr	r3, [r6, #0]
 801be68:	f824 3b02 	strh.w	r3, [r4], #2
 801be6c:	0c1b      	lsrs	r3, r3, #16
 801be6e:	7023      	strb	r3, [r4, #0]
 801be70:	ac01      	add	r4, sp, #4
 801be72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801be74:	8826      	ldrh	r6, [r4, #0]
 801be76:	60eb      	str	r3, [r5, #12]
 801be78:	78a4      	ldrb	r4, [r4, #2]
 801be7a:	6028      	str	r0, [r5, #0]
 801be7c:	2312      	movs	r3, #18
 801be7e:	4618      	mov	r0, r3
 801be80:	6069      	str	r1, [r5, #4]
 801be82:	60aa      	str	r2, [r5, #8]
 801be84:	822e      	strh	r6, [r5, #16]
 801be86:	74ac      	strb	r4, [r5, #18]
 801be88:	b00b      	add	sp, #44	; 0x2c
 801be8a:	bc70      	pop	{r4, r5, r6}
 801be8c:	4770      	bx	lr
 801be8e:	bf00      	nop
 801be90:	20001698 	.word	0x20001698
 801be94:	08021c68 	.word	0x08021c68

0801be98 <floor>:
 801be98:	ec51 0b10 	vmov	r0, r1, d0
 801be9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bea0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801bea4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801bea8:	2e13      	cmp	r6, #19
 801beaa:	ee10 8a10 	vmov	r8, s0
 801beae:	460c      	mov	r4, r1
 801beb0:	ee10 5a10 	vmov	r5, s0
 801beb4:	dc35      	bgt.n	801bf22 <floor+0x8a>
 801beb6:	2e00      	cmp	r6, #0
 801beb8:	da17      	bge.n	801beea <floor+0x52>
 801beba:	a335      	add	r3, pc, #212	; (adr r3, 801bf90 <floor+0xf8>)
 801bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bec0:	f7e4 f9ec 	bl	800029c <__adddf3>
 801bec4:	2200      	movs	r2, #0
 801bec6:	2300      	movs	r3, #0
 801bec8:	f7e4 fe2a 	bl	8000b20 <__aeabi_dcmpgt>
 801becc:	b150      	cbz	r0, 801bee4 <floor+0x4c>
 801bece:	2c00      	cmp	r4, #0
 801bed0:	da5a      	bge.n	801bf88 <floor+0xf0>
 801bed2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801bed6:	ea53 0308 	orrs.w	r3, r3, r8
 801beda:	4b2f      	ldr	r3, [pc, #188]	; (801bf98 <floor+0x100>)
 801bedc:	f04f 0500 	mov.w	r5, #0
 801bee0:	bf18      	it	ne
 801bee2:	461c      	movne	r4, r3
 801bee4:	4621      	mov	r1, r4
 801bee6:	4628      	mov	r0, r5
 801bee8:	e025      	b.n	801bf36 <floor+0x9e>
 801beea:	4f2c      	ldr	r7, [pc, #176]	; (801bf9c <floor+0x104>)
 801beec:	4137      	asrs	r7, r6
 801beee:	ea01 0307 	and.w	r3, r1, r7
 801bef2:	4303      	orrs	r3, r0
 801bef4:	d01f      	beq.n	801bf36 <floor+0x9e>
 801bef6:	a326      	add	r3, pc, #152	; (adr r3, 801bf90 <floor+0xf8>)
 801bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801befc:	f7e4 f9ce 	bl	800029c <__adddf3>
 801bf00:	2200      	movs	r2, #0
 801bf02:	2300      	movs	r3, #0
 801bf04:	f7e4 fe0c 	bl	8000b20 <__aeabi_dcmpgt>
 801bf08:	2800      	cmp	r0, #0
 801bf0a:	d0eb      	beq.n	801bee4 <floor+0x4c>
 801bf0c:	2c00      	cmp	r4, #0
 801bf0e:	bfbe      	ittt	lt
 801bf10:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801bf14:	fa43 f606 	asrlt.w	r6, r3, r6
 801bf18:	19a4      	addlt	r4, r4, r6
 801bf1a:	ea24 0407 	bic.w	r4, r4, r7
 801bf1e:	2500      	movs	r5, #0
 801bf20:	e7e0      	b.n	801bee4 <floor+0x4c>
 801bf22:	2e33      	cmp	r6, #51	; 0x33
 801bf24:	dd0b      	ble.n	801bf3e <floor+0xa6>
 801bf26:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801bf2a:	d104      	bne.n	801bf36 <floor+0x9e>
 801bf2c:	ee10 2a10 	vmov	r2, s0
 801bf30:	460b      	mov	r3, r1
 801bf32:	f7e4 f9b3 	bl	800029c <__adddf3>
 801bf36:	ec41 0b10 	vmov	d0, r0, r1
 801bf3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf3e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801bf42:	f04f 33ff 	mov.w	r3, #4294967295
 801bf46:	fa23 f707 	lsr.w	r7, r3, r7
 801bf4a:	4238      	tst	r0, r7
 801bf4c:	d0f3      	beq.n	801bf36 <floor+0x9e>
 801bf4e:	a310      	add	r3, pc, #64	; (adr r3, 801bf90 <floor+0xf8>)
 801bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf54:	f7e4 f9a2 	bl	800029c <__adddf3>
 801bf58:	2200      	movs	r2, #0
 801bf5a:	2300      	movs	r3, #0
 801bf5c:	f7e4 fde0 	bl	8000b20 <__aeabi_dcmpgt>
 801bf60:	2800      	cmp	r0, #0
 801bf62:	d0bf      	beq.n	801bee4 <floor+0x4c>
 801bf64:	2c00      	cmp	r4, #0
 801bf66:	da02      	bge.n	801bf6e <floor+0xd6>
 801bf68:	2e14      	cmp	r6, #20
 801bf6a:	d103      	bne.n	801bf74 <floor+0xdc>
 801bf6c:	3401      	adds	r4, #1
 801bf6e:	ea25 0507 	bic.w	r5, r5, r7
 801bf72:	e7b7      	b.n	801bee4 <floor+0x4c>
 801bf74:	2301      	movs	r3, #1
 801bf76:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801bf7a:	fa03 f606 	lsl.w	r6, r3, r6
 801bf7e:	4435      	add	r5, r6
 801bf80:	45a8      	cmp	r8, r5
 801bf82:	bf88      	it	hi
 801bf84:	18e4      	addhi	r4, r4, r3
 801bf86:	e7f2      	b.n	801bf6e <floor+0xd6>
 801bf88:	2500      	movs	r5, #0
 801bf8a:	462c      	mov	r4, r5
 801bf8c:	e7aa      	b.n	801bee4 <floor+0x4c>
 801bf8e:	bf00      	nop
 801bf90:	8800759c 	.word	0x8800759c
 801bf94:	7e37e43c 	.word	0x7e37e43c
 801bf98:	bff00000 	.word	0xbff00000
 801bf9c:	000fffff 	.word	0x000fffff

0801bfa0 <fmax>:
 801bfa0:	b508      	push	{r3, lr}
 801bfa2:	ed2d 8b04 	vpush	{d8-d9}
 801bfa6:	eeb0 8a40 	vmov.f32	s16, s0
 801bfaa:	eef0 8a60 	vmov.f32	s17, s1
 801bfae:	eeb0 9a41 	vmov.f32	s18, s2
 801bfb2:	eef0 9a61 	vmov.f32	s19, s3
 801bfb6:	f000 f841 	bl	801c03c <__fpclassifyd>
 801bfba:	b168      	cbz	r0, 801bfd8 <fmax+0x38>
 801bfbc:	eeb0 0a49 	vmov.f32	s0, s18
 801bfc0:	eef0 0a69 	vmov.f32	s1, s19
 801bfc4:	f000 f83a 	bl	801c03c <__fpclassifyd>
 801bfc8:	b150      	cbz	r0, 801bfe0 <fmax+0x40>
 801bfca:	ec53 2b19 	vmov	r2, r3, d9
 801bfce:	ec51 0b18 	vmov	r0, r1, d8
 801bfd2:	f7e4 fda5 	bl	8000b20 <__aeabi_dcmpgt>
 801bfd6:	b918      	cbnz	r0, 801bfe0 <fmax+0x40>
 801bfd8:	eeb0 8a49 	vmov.f32	s16, s18
 801bfdc:	eef0 8a69 	vmov.f32	s17, s19
 801bfe0:	eeb0 0a48 	vmov.f32	s0, s16
 801bfe4:	eef0 0a68 	vmov.f32	s1, s17
 801bfe8:	ecbd 8b04 	vpop	{d8-d9}
 801bfec:	bd08      	pop	{r3, pc}

0801bfee <fmin>:
 801bfee:	b508      	push	{r3, lr}
 801bff0:	ed2d 8b04 	vpush	{d8-d9}
 801bff4:	eeb0 8a40 	vmov.f32	s16, s0
 801bff8:	eef0 8a60 	vmov.f32	s17, s1
 801bffc:	eeb0 9a41 	vmov.f32	s18, s2
 801c000:	eef0 9a61 	vmov.f32	s19, s3
 801c004:	f000 f81a 	bl	801c03c <__fpclassifyd>
 801c008:	b168      	cbz	r0, 801c026 <fmin+0x38>
 801c00a:	eeb0 0a49 	vmov.f32	s0, s18
 801c00e:	eef0 0a69 	vmov.f32	s1, s19
 801c012:	f000 f813 	bl	801c03c <__fpclassifyd>
 801c016:	b150      	cbz	r0, 801c02e <fmin+0x40>
 801c018:	ec53 2b19 	vmov	r2, r3, d9
 801c01c:	ec51 0b18 	vmov	r0, r1, d8
 801c020:	f7e4 fd60 	bl	8000ae4 <__aeabi_dcmplt>
 801c024:	b918      	cbnz	r0, 801c02e <fmin+0x40>
 801c026:	eeb0 8a49 	vmov.f32	s16, s18
 801c02a:	eef0 8a69 	vmov.f32	s17, s19
 801c02e:	eeb0 0a48 	vmov.f32	s0, s16
 801c032:	eef0 0a68 	vmov.f32	s1, s17
 801c036:	ecbd 8b04 	vpop	{d8-d9}
 801c03a:	bd08      	pop	{r3, pc}

0801c03c <__fpclassifyd>:
 801c03c:	ec53 2b10 	vmov	r2, r3, d0
 801c040:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801c044:	b510      	push	{r4, lr}
 801c046:	ee10 0a10 	vmov	r0, s0
 801c04a:	d01b      	beq.n	801c084 <__fpclassifyd+0x48>
 801c04c:	490f      	ldr	r1, [pc, #60]	; (801c08c <__fpclassifyd+0x50>)
 801c04e:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 801c052:	428c      	cmp	r4, r1
 801c054:	d910      	bls.n	801c078 <__fpclassifyd+0x3c>
 801c056:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 801c05a:	490c      	ldr	r1, [pc, #48]	; (801c08c <__fpclassifyd+0x50>)
 801c05c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801c060:	428b      	cmp	r3, r1
 801c062:	d909      	bls.n	801c078 <__fpclassifyd+0x3c>
 801c064:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 801c068:	d308      	bcc.n	801c07c <__fpclassifyd+0x40>
 801c06a:	4b09      	ldr	r3, [pc, #36]	; (801c090 <__fpclassifyd+0x54>)
 801c06c:	429a      	cmp	r2, r3
 801c06e:	d107      	bne.n	801c080 <__fpclassifyd+0x44>
 801c070:	fab0 f080 	clz	r0, r0
 801c074:	0940      	lsrs	r0, r0, #5
 801c076:	bd10      	pop	{r4, pc}
 801c078:	2004      	movs	r0, #4
 801c07a:	bd10      	pop	{r4, pc}
 801c07c:	2003      	movs	r0, #3
 801c07e:	bd10      	pop	{r4, pc}
 801c080:	2000      	movs	r0, #0
 801c082:	bd10      	pop	{r4, pc}
 801c084:	2800      	cmp	r0, #0
 801c086:	d1e6      	bne.n	801c056 <__fpclassifyd+0x1a>
 801c088:	2002      	movs	r0, #2
 801c08a:	bd10      	pop	{r4, pc}
 801c08c:	7fdfffff 	.word	0x7fdfffff
 801c090:	7ff00000 	.word	0x7ff00000

0801c094 <cosf>:
 801c094:	ee10 3a10 	vmov	r3, s0
 801c098:	b507      	push	{r0, r1, r2, lr}
 801c09a:	4a1c      	ldr	r2, [pc, #112]	; (801c10c <cosf+0x78>)
 801c09c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c0a0:	4293      	cmp	r3, r2
 801c0a2:	dc04      	bgt.n	801c0ae <cosf+0x1a>
 801c0a4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801c110 <cosf+0x7c>
 801c0a8:	f001 feb4 	bl	801de14 <__kernel_cosf>
 801c0ac:	e004      	b.n	801c0b8 <cosf+0x24>
 801c0ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801c0b2:	db04      	blt.n	801c0be <cosf+0x2a>
 801c0b4:	ee30 0a40 	vsub.f32	s0, s0, s0
 801c0b8:	b003      	add	sp, #12
 801c0ba:	f85d fb04 	ldr.w	pc, [sp], #4
 801c0be:	4668      	mov	r0, sp
 801c0c0:	f001 fd34 	bl	801db2c <__ieee754_rem_pio2f>
 801c0c4:	f000 0003 	and.w	r0, r0, #3
 801c0c8:	2801      	cmp	r0, #1
 801c0ca:	d007      	beq.n	801c0dc <cosf+0x48>
 801c0cc:	2802      	cmp	r0, #2
 801c0ce:	d00e      	beq.n	801c0ee <cosf+0x5a>
 801c0d0:	b9a0      	cbnz	r0, 801c0fc <cosf+0x68>
 801c0d2:	eddd 0a01 	vldr	s1, [sp, #4]
 801c0d6:	ed9d 0a00 	vldr	s0, [sp]
 801c0da:	e7e5      	b.n	801c0a8 <cosf+0x14>
 801c0dc:	eddd 0a01 	vldr	s1, [sp, #4]
 801c0e0:	ed9d 0a00 	vldr	s0, [sp]
 801c0e4:	f002 f952 	bl	801e38c <__kernel_sinf>
 801c0e8:	eeb1 0a40 	vneg.f32	s0, s0
 801c0ec:	e7e4      	b.n	801c0b8 <cosf+0x24>
 801c0ee:	eddd 0a01 	vldr	s1, [sp, #4]
 801c0f2:	ed9d 0a00 	vldr	s0, [sp]
 801c0f6:	f001 fe8d 	bl	801de14 <__kernel_cosf>
 801c0fa:	e7f5      	b.n	801c0e8 <cosf+0x54>
 801c0fc:	2001      	movs	r0, #1
 801c0fe:	eddd 0a01 	vldr	s1, [sp, #4]
 801c102:	ed9d 0a00 	vldr	s0, [sp]
 801c106:	f002 f941 	bl	801e38c <__kernel_sinf>
 801c10a:	e7d5      	b.n	801c0b8 <cosf+0x24>
 801c10c:	3f490fd8 	.word	0x3f490fd8
 801c110:	00000000 	.word	0x00000000

0801c114 <roundf>:
 801c114:	ee10 0a10 	vmov	r0, s0
 801c118:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801c11c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801c120:	2a16      	cmp	r2, #22
 801c122:	dc15      	bgt.n	801c150 <roundf+0x3c>
 801c124:	2a00      	cmp	r2, #0
 801c126:	da08      	bge.n	801c13a <roundf+0x26>
 801c128:	3201      	adds	r2, #1
 801c12a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801c12e:	d101      	bne.n	801c134 <roundf+0x20>
 801c130:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801c134:	ee00 3a10 	vmov	s0, r3
 801c138:	4770      	bx	lr
 801c13a:	4908      	ldr	r1, [pc, #32]	; (801c15c <roundf+0x48>)
 801c13c:	4111      	asrs	r1, r2
 801c13e:	4208      	tst	r0, r1
 801c140:	d0fa      	beq.n	801c138 <roundf+0x24>
 801c142:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801c146:	4113      	asrs	r3, r2
 801c148:	4403      	add	r3, r0
 801c14a:	ea23 0301 	bic.w	r3, r3, r1
 801c14e:	e7f1      	b.n	801c134 <roundf+0x20>
 801c150:	2a80      	cmp	r2, #128	; 0x80
 801c152:	d1f1      	bne.n	801c138 <roundf+0x24>
 801c154:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c158:	4770      	bx	lr
 801c15a:	bf00      	nop
 801c15c:	007fffff 	.word	0x007fffff

0801c160 <sinf>:
 801c160:	ee10 3a10 	vmov	r3, s0
 801c164:	b507      	push	{r0, r1, r2, lr}
 801c166:	4a1d      	ldr	r2, [pc, #116]	; (801c1dc <sinf+0x7c>)
 801c168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c16c:	4293      	cmp	r3, r2
 801c16e:	dc05      	bgt.n	801c17c <sinf+0x1c>
 801c170:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801c1e0 <sinf+0x80>
 801c174:	2000      	movs	r0, #0
 801c176:	f002 f909 	bl	801e38c <__kernel_sinf>
 801c17a:	e004      	b.n	801c186 <sinf+0x26>
 801c17c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801c180:	db04      	blt.n	801c18c <sinf+0x2c>
 801c182:	ee30 0a40 	vsub.f32	s0, s0, s0
 801c186:	b003      	add	sp, #12
 801c188:	f85d fb04 	ldr.w	pc, [sp], #4
 801c18c:	4668      	mov	r0, sp
 801c18e:	f001 fccd 	bl	801db2c <__ieee754_rem_pio2f>
 801c192:	f000 0003 	and.w	r0, r0, #3
 801c196:	2801      	cmp	r0, #1
 801c198:	d008      	beq.n	801c1ac <sinf+0x4c>
 801c19a:	2802      	cmp	r0, #2
 801c19c:	d00d      	beq.n	801c1ba <sinf+0x5a>
 801c19e:	b9b0      	cbnz	r0, 801c1ce <sinf+0x6e>
 801c1a0:	2001      	movs	r0, #1
 801c1a2:	eddd 0a01 	vldr	s1, [sp, #4]
 801c1a6:	ed9d 0a00 	vldr	s0, [sp]
 801c1aa:	e7e4      	b.n	801c176 <sinf+0x16>
 801c1ac:	eddd 0a01 	vldr	s1, [sp, #4]
 801c1b0:	ed9d 0a00 	vldr	s0, [sp]
 801c1b4:	f001 fe2e 	bl	801de14 <__kernel_cosf>
 801c1b8:	e7e5      	b.n	801c186 <sinf+0x26>
 801c1ba:	2001      	movs	r0, #1
 801c1bc:	eddd 0a01 	vldr	s1, [sp, #4]
 801c1c0:	ed9d 0a00 	vldr	s0, [sp]
 801c1c4:	f002 f8e2 	bl	801e38c <__kernel_sinf>
 801c1c8:	eeb1 0a40 	vneg.f32	s0, s0
 801c1cc:	e7db      	b.n	801c186 <sinf+0x26>
 801c1ce:	eddd 0a01 	vldr	s1, [sp, #4]
 801c1d2:	ed9d 0a00 	vldr	s0, [sp]
 801c1d6:	f001 fe1d 	bl	801de14 <__kernel_cosf>
 801c1da:	e7f5      	b.n	801c1c8 <sinf+0x68>
 801c1dc:	3f490fd8 	.word	0x3f490fd8
 801c1e0:	00000000 	.word	0x00000000

0801c1e4 <tanf>:
 801c1e4:	ee10 3a10 	vmov	r3, s0
 801c1e8:	b507      	push	{r0, r1, r2, lr}
 801c1ea:	4a10      	ldr	r2, [pc, #64]	; (801c22c <tanf+0x48>)
 801c1ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c1f0:	4293      	cmp	r3, r2
 801c1f2:	dc05      	bgt.n	801c200 <tanf+0x1c>
 801c1f4:	eddf 0a0e 	vldr	s1, [pc, #56]	; 801c230 <tanf+0x4c>
 801c1f8:	2001      	movs	r0, #1
 801c1fa:	f002 f90f 	bl	801e41c <__kernel_tanf>
 801c1fe:	e004      	b.n	801c20a <tanf+0x26>
 801c200:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801c204:	db04      	blt.n	801c210 <tanf+0x2c>
 801c206:	ee30 0a40 	vsub.f32	s0, s0, s0
 801c20a:	b003      	add	sp, #12
 801c20c:	f85d fb04 	ldr.w	pc, [sp], #4
 801c210:	4668      	mov	r0, sp
 801c212:	f001 fc8b 	bl	801db2c <__ieee754_rem_pio2f>
 801c216:	0040      	lsls	r0, r0, #1
 801c218:	f000 0002 	and.w	r0, r0, #2
 801c21c:	f1c0 0001 	rsb	r0, r0, #1
 801c220:	eddd 0a01 	vldr	s1, [sp, #4]
 801c224:	ed9d 0a00 	vldr	s0, [sp]
 801c228:	e7e7      	b.n	801c1fa <tanf+0x16>
 801c22a:	bf00      	nop
 801c22c:	3f490fda 	.word	0x3f490fda
 801c230:	00000000 	.word	0x00000000

0801c234 <asin>:
 801c234:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c236:	ed2d 8b02 	vpush	{d8}
 801c23a:	4e26      	ldr	r6, [pc, #152]	; (801c2d4 <asin+0xa0>)
 801c23c:	b08b      	sub	sp, #44	; 0x2c
 801c23e:	ec55 4b10 	vmov	r4, r5, d0
 801c242:	f000 facd 	bl	801c7e0 <__ieee754_asin>
 801c246:	f996 3000 	ldrsb.w	r3, [r6]
 801c24a:	eeb0 8a40 	vmov.f32	s16, s0
 801c24e:	eef0 8a60 	vmov.f32	s17, s1
 801c252:	3301      	adds	r3, #1
 801c254:	d036      	beq.n	801c2c4 <asin+0x90>
 801c256:	4622      	mov	r2, r4
 801c258:	462b      	mov	r3, r5
 801c25a:	4620      	mov	r0, r4
 801c25c:	4629      	mov	r1, r5
 801c25e:	f7e4 fc69 	bl	8000b34 <__aeabi_dcmpun>
 801c262:	4607      	mov	r7, r0
 801c264:	bb70      	cbnz	r0, 801c2c4 <asin+0x90>
 801c266:	ec45 4b10 	vmov	d0, r4, r5
 801c26a:	f002 fb65 	bl	801e938 <fabs>
 801c26e:	2200      	movs	r2, #0
 801c270:	4b19      	ldr	r3, [pc, #100]	; (801c2d8 <asin+0xa4>)
 801c272:	ec51 0b10 	vmov	r0, r1, d0
 801c276:	f7e4 fc53 	bl	8000b20 <__aeabi_dcmpgt>
 801c27a:	b318      	cbz	r0, 801c2c4 <asin+0x90>
 801c27c:	2301      	movs	r3, #1
 801c27e:	9300      	str	r3, [sp, #0]
 801c280:	4816      	ldr	r0, [pc, #88]	; (801c2dc <asin+0xa8>)
 801c282:	4b17      	ldr	r3, [pc, #92]	; (801c2e0 <asin+0xac>)
 801c284:	9301      	str	r3, [sp, #4]
 801c286:	9708      	str	r7, [sp, #32]
 801c288:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801c28c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801c290:	f002 fb66 	bl	801e960 <nan>
 801c294:	f996 3000 	ldrsb.w	r3, [r6]
 801c298:	2b02      	cmp	r3, #2
 801c29a:	ed8d 0b06 	vstr	d0, [sp, #24]
 801c29e:	d104      	bne.n	801c2aa <asin+0x76>
 801c2a0:	f002 fd2c 	bl	801ecfc <__errno>
 801c2a4:	2321      	movs	r3, #33	; 0x21
 801c2a6:	6003      	str	r3, [r0, #0]
 801c2a8:	e004      	b.n	801c2b4 <asin+0x80>
 801c2aa:	4668      	mov	r0, sp
 801c2ac:	f002 fb53 	bl	801e956 <matherr>
 801c2b0:	2800      	cmp	r0, #0
 801c2b2:	d0f5      	beq.n	801c2a0 <asin+0x6c>
 801c2b4:	9b08      	ldr	r3, [sp, #32]
 801c2b6:	b11b      	cbz	r3, 801c2c0 <asin+0x8c>
 801c2b8:	f002 fd20 	bl	801ecfc <__errno>
 801c2bc:	9b08      	ldr	r3, [sp, #32]
 801c2be:	6003      	str	r3, [r0, #0]
 801c2c0:	ed9d 8b06 	vldr	d8, [sp, #24]
 801c2c4:	eeb0 0a48 	vmov.f32	s0, s16
 801c2c8:	eef0 0a68 	vmov.f32	s1, s17
 801c2cc:	b00b      	add	sp, #44	; 0x2c
 801c2ce:	ecbd 8b02 	vpop	{d8}
 801c2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2d4:	200014a4 	.word	0x200014a4
 801c2d8:	3ff00000 	.word	0x3ff00000
 801c2dc:	08022901 	.word	0x08022901
 801c2e0:	080222e8 	.word	0x080222e8

0801c2e4 <atan2>:
 801c2e4:	f000 bc88 	b.w	801cbf8 <__ieee754_atan2>

0801c2e8 <pow>:
 801c2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2ec:	ed2d 8b04 	vpush	{d8-d9}
 801c2f0:	b08d      	sub	sp, #52	; 0x34
 801c2f2:	ec57 6b10 	vmov	r6, r7, d0
 801c2f6:	ec55 4b11 	vmov	r4, r5, d1
 801c2fa:	f000 fd59 	bl	801cdb0 <__ieee754_pow>
 801c2fe:	4bae      	ldr	r3, [pc, #696]	; (801c5b8 <pow+0x2d0>)
 801c300:	eeb0 8a40 	vmov.f32	s16, s0
 801c304:	eef0 8a60 	vmov.f32	s17, s1
 801c308:	f993 9000 	ldrsb.w	r9, [r3]
 801c30c:	f1b9 3fff 	cmp.w	r9, #4294967295
 801c310:	4698      	mov	r8, r3
 801c312:	d05f      	beq.n	801c3d4 <pow+0xec>
 801c314:	4622      	mov	r2, r4
 801c316:	462b      	mov	r3, r5
 801c318:	4620      	mov	r0, r4
 801c31a:	4629      	mov	r1, r5
 801c31c:	f7e4 fc0a 	bl	8000b34 <__aeabi_dcmpun>
 801c320:	4683      	mov	fp, r0
 801c322:	2800      	cmp	r0, #0
 801c324:	d156      	bne.n	801c3d4 <pow+0xec>
 801c326:	4632      	mov	r2, r6
 801c328:	463b      	mov	r3, r7
 801c32a:	4630      	mov	r0, r6
 801c32c:	4639      	mov	r1, r7
 801c32e:	f7e4 fc01 	bl	8000b34 <__aeabi_dcmpun>
 801c332:	9001      	str	r0, [sp, #4]
 801c334:	b1e8      	cbz	r0, 801c372 <pow+0x8a>
 801c336:	2200      	movs	r2, #0
 801c338:	2300      	movs	r3, #0
 801c33a:	4620      	mov	r0, r4
 801c33c:	4629      	mov	r1, r5
 801c33e:	f7e4 fbc7 	bl	8000ad0 <__aeabi_dcmpeq>
 801c342:	2800      	cmp	r0, #0
 801c344:	d046      	beq.n	801c3d4 <pow+0xec>
 801c346:	2301      	movs	r3, #1
 801c348:	9302      	str	r3, [sp, #8]
 801c34a:	4b9c      	ldr	r3, [pc, #624]	; (801c5bc <pow+0x2d4>)
 801c34c:	9303      	str	r3, [sp, #12]
 801c34e:	4b9c      	ldr	r3, [pc, #624]	; (801c5c0 <pow+0x2d8>)
 801c350:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801c354:	2200      	movs	r2, #0
 801c356:	f1b9 0f02 	cmp.w	r9, #2
 801c35a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c35e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c362:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c366:	d033      	beq.n	801c3d0 <pow+0xe8>
 801c368:	a802      	add	r0, sp, #8
 801c36a:	f002 faf4 	bl	801e956 <matherr>
 801c36e:	bb48      	cbnz	r0, 801c3c4 <pow+0xdc>
 801c370:	e05e      	b.n	801c430 <pow+0x148>
 801c372:	f04f 0a00 	mov.w	sl, #0
 801c376:	f04f 0b00 	mov.w	fp, #0
 801c37a:	4652      	mov	r2, sl
 801c37c:	465b      	mov	r3, fp
 801c37e:	4630      	mov	r0, r6
 801c380:	4639      	mov	r1, r7
 801c382:	f7e4 fba5 	bl	8000ad0 <__aeabi_dcmpeq>
 801c386:	ec4b ab19 	vmov	d9, sl, fp
 801c38a:	2800      	cmp	r0, #0
 801c38c:	d055      	beq.n	801c43a <pow+0x152>
 801c38e:	4652      	mov	r2, sl
 801c390:	465b      	mov	r3, fp
 801c392:	4620      	mov	r0, r4
 801c394:	4629      	mov	r1, r5
 801c396:	f7e4 fb9b 	bl	8000ad0 <__aeabi_dcmpeq>
 801c39a:	4680      	mov	r8, r0
 801c39c:	b318      	cbz	r0, 801c3e6 <pow+0xfe>
 801c39e:	2301      	movs	r3, #1
 801c3a0:	9302      	str	r3, [sp, #8]
 801c3a2:	4b86      	ldr	r3, [pc, #536]	; (801c5bc <pow+0x2d4>)
 801c3a4:	9303      	str	r3, [sp, #12]
 801c3a6:	9b01      	ldr	r3, [sp, #4]
 801c3a8:	930a      	str	r3, [sp, #40]	; 0x28
 801c3aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c3ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c3b2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801c3b6:	f1b9 0f00 	cmp.w	r9, #0
 801c3ba:	d0d5      	beq.n	801c368 <pow+0x80>
 801c3bc:	4b80      	ldr	r3, [pc, #512]	; (801c5c0 <pow+0x2d8>)
 801c3be:	2200      	movs	r2, #0
 801c3c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c3c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3c6:	b11b      	cbz	r3, 801c3d0 <pow+0xe8>
 801c3c8:	f002 fc98 	bl	801ecfc <__errno>
 801c3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3ce:	6003      	str	r3, [r0, #0]
 801c3d0:	ed9d 8b08 	vldr	d8, [sp, #32]
 801c3d4:	eeb0 0a48 	vmov.f32	s0, s16
 801c3d8:	eef0 0a68 	vmov.f32	s1, s17
 801c3dc:	b00d      	add	sp, #52	; 0x34
 801c3de:	ecbd 8b04 	vpop	{d8-d9}
 801c3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3e6:	ec45 4b10 	vmov	d0, r4, r5
 801c3ea:	f002 faac 	bl	801e946 <finite>
 801c3ee:	2800      	cmp	r0, #0
 801c3f0:	d0f0      	beq.n	801c3d4 <pow+0xec>
 801c3f2:	4652      	mov	r2, sl
 801c3f4:	465b      	mov	r3, fp
 801c3f6:	4620      	mov	r0, r4
 801c3f8:	4629      	mov	r1, r5
 801c3fa:	f7e4 fb73 	bl	8000ae4 <__aeabi_dcmplt>
 801c3fe:	2800      	cmp	r0, #0
 801c400:	d0e8      	beq.n	801c3d4 <pow+0xec>
 801c402:	2301      	movs	r3, #1
 801c404:	9302      	str	r3, [sp, #8]
 801c406:	4b6d      	ldr	r3, [pc, #436]	; (801c5bc <pow+0x2d4>)
 801c408:	9303      	str	r3, [sp, #12]
 801c40a:	4b6b      	ldr	r3, [pc, #428]	; (801c5b8 <pow+0x2d0>)
 801c40c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801c410:	f993 3000 	ldrsb.w	r3, [r3]
 801c414:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c418:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c41c:	b913      	cbnz	r3, 801c424 <pow+0x13c>
 801c41e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801c422:	e7a1      	b.n	801c368 <pow+0x80>
 801c424:	4967      	ldr	r1, [pc, #412]	; (801c5c4 <pow+0x2dc>)
 801c426:	2000      	movs	r0, #0
 801c428:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c42c:	2b02      	cmp	r3, #2
 801c42e:	d19b      	bne.n	801c368 <pow+0x80>
 801c430:	f002 fc64 	bl	801ecfc <__errno>
 801c434:	2321      	movs	r3, #33	; 0x21
 801c436:	6003      	str	r3, [r0, #0]
 801c438:	e7c4      	b.n	801c3c4 <pow+0xdc>
 801c43a:	eeb0 0a48 	vmov.f32	s0, s16
 801c43e:	eef0 0a68 	vmov.f32	s1, s17
 801c442:	f002 fa80 	bl	801e946 <finite>
 801c446:	9001      	str	r0, [sp, #4]
 801c448:	2800      	cmp	r0, #0
 801c44a:	f040 808a 	bne.w	801c562 <pow+0x27a>
 801c44e:	ec47 6b10 	vmov	d0, r6, r7
 801c452:	f002 fa78 	bl	801e946 <finite>
 801c456:	2800      	cmp	r0, #0
 801c458:	f000 8083 	beq.w	801c562 <pow+0x27a>
 801c45c:	ec45 4b10 	vmov	d0, r4, r5
 801c460:	f002 fa71 	bl	801e946 <finite>
 801c464:	2800      	cmp	r0, #0
 801c466:	d07c      	beq.n	801c562 <pow+0x27a>
 801c468:	ec53 2b18 	vmov	r2, r3, d8
 801c46c:	ee18 0a10 	vmov	r0, s16
 801c470:	4619      	mov	r1, r3
 801c472:	f7e4 fb5f 	bl	8000b34 <__aeabi_dcmpun>
 801c476:	f998 9000 	ldrsb.w	r9, [r8]
 801c47a:	4b50      	ldr	r3, [pc, #320]	; (801c5bc <pow+0x2d4>)
 801c47c:	b1b0      	cbz	r0, 801c4ac <pow+0x1c4>
 801c47e:	2201      	movs	r2, #1
 801c480:	9303      	str	r3, [sp, #12]
 801c482:	9b01      	ldr	r3, [sp, #4]
 801c484:	9202      	str	r2, [sp, #8]
 801c486:	930a      	str	r3, [sp, #40]	; 0x28
 801c488:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c48c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c490:	f1b9 0f00 	cmp.w	r9, #0
 801c494:	d0c3      	beq.n	801c41e <pow+0x136>
 801c496:	4652      	mov	r2, sl
 801c498:	465b      	mov	r3, fp
 801c49a:	4650      	mov	r0, sl
 801c49c:	4659      	mov	r1, fp
 801c49e:	f7e4 f9d9 	bl	8000854 <__aeabi_ddiv>
 801c4a2:	f1b9 0f02 	cmp.w	r9, #2
 801c4a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c4aa:	e7c0      	b.n	801c42e <pow+0x146>
 801c4ac:	2203      	movs	r2, #3
 801c4ae:	9202      	str	r2, [sp, #8]
 801c4b0:	9303      	str	r3, [sp, #12]
 801c4b2:	900a      	str	r0, [sp, #40]	; 0x28
 801c4b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c4b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c4bc:	f1b9 0f00 	cmp.w	r9, #0
 801c4c0:	d12c      	bne.n	801c51c <pow+0x234>
 801c4c2:	4b41      	ldr	r3, [pc, #260]	; (801c5c8 <pow+0x2e0>)
 801c4c4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801c4c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c4cc:	4630      	mov	r0, r6
 801c4ce:	4652      	mov	r2, sl
 801c4d0:	465b      	mov	r3, fp
 801c4d2:	4639      	mov	r1, r7
 801c4d4:	f7e4 fb06 	bl	8000ae4 <__aeabi_dcmplt>
 801c4d8:	2800      	cmp	r0, #0
 801c4da:	d066      	beq.n	801c5aa <pow+0x2c2>
 801c4dc:	2200      	movs	r2, #0
 801c4de:	4b3b      	ldr	r3, [pc, #236]	; (801c5cc <pow+0x2e4>)
 801c4e0:	4620      	mov	r0, r4
 801c4e2:	4629      	mov	r1, r5
 801c4e4:	f7e4 f88c 	bl	8000600 <__aeabi_dmul>
 801c4e8:	4604      	mov	r4, r0
 801c4ea:	460d      	mov	r5, r1
 801c4ec:	ec45 4b10 	vmov	d0, r4, r5
 801c4f0:	f002 fa3e 	bl	801e970 <rint>
 801c4f4:	4620      	mov	r0, r4
 801c4f6:	ec53 2b10 	vmov	r2, r3, d0
 801c4fa:	4629      	mov	r1, r5
 801c4fc:	f7e4 fae8 	bl	8000ad0 <__aeabi_dcmpeq>
 801c500:	b920      	cbnz	r0, 801c50c <pow+0x224>
 801c502:	4b33      	ldr	r3, [pc, #204]	; (801c5d0 <pow+0x2e8>)
 801c504:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801c508:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c50c:	f998 3000 	ldrsb.w	r3, [r8]
 801c510:	2b02      	cmp	r3, #2
 801c512:	d14a      	bne.n	801c5aa <pow+0x2c2>
 801c514:	f002 fbf2 	bl	801ecfc <__errno>
 801c518:	2322      	movs	r3, #34	; 0x22
 801c51a:	e78c      	b.n	801c436 <pow+0x14e>
 801c51c:	4b2d      	ldr	r3, [pc, #180]	; (801c5d4 <pow+0x2ec>)
 801c51e:	2200      	movs	r2, #0
 801c520:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c524:	4630      	mov	r0, r6
 801c526:	4652      	mov	r2, sl
 801c528:	465b      	mov	r3, fp
 801c52a:	4639      	mov	r1, r7
 801c52c:	f7e4 fada 	bl	8000ae4 <__aeabi_dcmplt>
 801c530:	2800      	cmp	r0, #0
 801c532:	d0eb      	beq.n	801c50c <pow+0x224>
 801c534:	2200      	movs	r2, #0
 801c536:	4b25      	ldr	r3, [pc, #148]	; (801c5cc <pow+0x2e4>)
 801c538:	4620      	mov	r0, r4
 801c53a:	4629      	mov	r1, r5
 801c53c:	f7e4 f860 	bl	8000600 <__aeabi_dmul>
 801c540:	4604      	mov	r4, r0
 801c542:	460d      	mov	r5, r1
 801c544:	ec45 4b10 	vmov	d0, r4, r5
 801c548:	f002 fa12 	bl	801e970 <rint>
 801c54c:	4620      	mov	r0, r4
 801c54e:	ec53 2b10 	vmov	r2, r3, d0
 801c552:	4629      	mov	r1, r5
 801c554:	f7e4 fabc 	bl	8000ad0 <__aeabi_dcmpeq>
 801c558:	2800      	cmp	r0, #0
 801c55a:	d1d7      	bne.n	801c50c <pow+0x224>
 801c55c:	2200      	movs	r2, #0
 801c55e:	4b19      	ldr	r3, [pc, #100]	; (801c5c4 <pow+0x2dc>)
 801c560:	e7d2      	b.n	801c508 <pow+0x220>
 801c562:	2200      	movs	r2, #0
 801c564:	2300      	movs	r3, #0
 801c566:	ec51 0b18 	vmov	r0, r1, d8
 801c56a:	f7e4 fab1 	bl	8000ad0 <__aeabi_dcmpeq>
 801c56e:	2800      	cmp	r0, #0
 801c570:	f43f af30 	beq.w	801c3d4 <pow+0xec>
 801c574:	ec47 6b10 	vmov	d0, r6, r7
 801c578:	f002 f9e5 	bl	801e946 <finite>
 801c57c:	2800      	cmp	r0, #0
 801c57e:	f43f af29 	beq.w	801c3d4 <pow+0xec>
 801c582:	ec45 4b10 	vmov	d0, r4, r5
 801c586:	f002 f9de 	bl	801e946 <finite>
 801c58a:	2800      	cmp	r0, #0
 801c58c:	f43f af22 	beq.w	801c3d4 <pow+0xec>
 801c590:	2304      	movs	r3, #4
 801c592:	9302      	str	r3, [sp, #8]
 801c594:	4b09      	ldr	r3, [pc, #36]	; (801c5bc <pow+0x2d4>)
 801c596:	9303      	str	r3, [sp, #12]
 801c598:	2300      	movs	r3, #0
 801c59a:	930a      	str	r3, [sp, #40]	; 0x28
 801c59c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c5a0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c5a4:	ed8d 9b08 	vstr	d9, [sp, #32]
 801c5a8:	e7b0      	b.n	801c50c <pow+0x224>
 801c5aa:	a802      	add	r0, sp, #8
 801c5ac:	f002 f9d3 	bl	801e956 <matherr>
 801c5b0:	2800      	cmp	r0, #0
 801c5b2:	f47f af07 	bne.w	801c3c4 <pow+0xdc>
 801c5b6:	e7ad      	b.n	801c514 <pow+0x22c>
 801c5b8:	200014a4 	.word	0x200014a4
 801c5bc:	080222ed 	.word	0x080222ed
 801c5c0:	3ff00000 	.word	0x3ff00000
 801c5c4:	fff00000 	.word	0xfff00000
 801c5c8:	47efffff 	.word	0x47efffff
 801c5cc:	3fe00000 	.word	0x3fe00000
 801c5d0:	c7efffff 	.word	0xc7efffff
 801c5d4:	7ff00000 	.word	0x7ff00000

0801c5d8 <sqrt>:
 801c5d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c5dc:	ed2d 8b02 	vpush	{d8}
 801c5e0:	b08b      	sub	sp, #44	; 0x2c
 801c5e2:	ec55 4b10 	vmov	r4, r5, d0
 801c5e6:	f001 f8f5 	bl	801d7d4 <__ieee754_sqrt>
 801c5ea:	4b26      	ldr	r3, [pc, #152]	; (801c684 <sqrt+0xac>)
 801c5ec:	eeb0 8a40 	vmov.f32	s16, s0
 801c5f0:	eef0 8a60 	vmov.f32	s17, s1
 801c5f4:	f993 6000 	ldrsb.w	r6, [r3]
 801c5f8:	1c73      	adds	r3, r6, #1
 801c5fa:	d02a      	beq.n	801c652 <sqrt+0x7a>
 801c5fc:	4622      	mov	r2, r4
 801c5fe:	462b      	mov	r3, r5
 801c600:	4620      	mov	r0, r4
 801c602:	4629      	mov	r1, r5
 801c604:	f7e4 fa96 	bl	8000b34 <__aeabi_dcmpun>
 801c608:	4607      	mov	r7, r0
 801c60a:	bb10      	cbnz	r0, 801c652 <sqrt+0x7a>
 801c60c:	f04f 0800 	mov.w	r8, #0
 801c610:	f04f 0900 	mov.w	r9, #0
 801c614:	4642      	mov	r2, r8
 801c616:	464b      	mov	r3, r9
 801c618:	4620      	mov	r0, r4
 801c61a:	4629      	mov	r1, r5
 801c61c:	f7e4 fa62 	bl	8000ae4 <__aeabi_dcmplt>
 801c620:	b1b8      	cbz	r0, 801c652 <sqrt+0x7a>
 801c622:	2301      	movs	r3, #1
 801c624:	9300      	str	r3, [sp, #0]
 801c626:	4b18      	ldr	r3, [pc, #96]	; (801c688 <sqrt+0xb0>)
 801c628:	9301      	str	r3, [sp, #4]
 801c62a:	9708      	str	r7, [sp, #32]
 801c62c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801c630:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801c634:	b9b6      	cbnz	r6, 801c664 <sqrt+0x8c>
 801c636:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801c63a:	4668      	mov	r0, sp
 801c63c:	f002 f98b 	bl	801e956 <matherr>
 801c640:	b1d0      	cbz	r0, 801c678 <sqrt+0xa0>
 801c642:	9b08      	ldr	r3, [sp, #32]
 801c644:	b11b      	cbz	r3, 801c64e <sqrt+0x76>
 801c646:	f002 fb59 	bl	801ecfc <__errno>
 801c64a:	9b08      	ldr	r3, [sp, #32]
 801c64c:	6003      	str	r3, [r0, #0]
 801c64e:	ed9d 8b06 	vldr	d8, [sp, #24]
 801c652:	eeb0 0a48 	vmov.f32	s0, s16
 801c656:	eef0 0a68 	vmov.f32	s1, s17
 801c65a:	b00b      	add	sp, #44	; 0x2c
 801c65c:	ecbd 8b02 	vpop	{d8}
 801c660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c664:	4642      	mov	r2, r8
 801c666:	464b      	mov	r3, r9
 801c668:	4640      	mov	r0, r8
 801c66a:	4649      	mov	r1, r9
 801c66c:	f7e4 f8f2 	bl	8000854 <__aeabi_ddiv>
 801c670:	2e02      	cmp	r6, #2
 801c672:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c676:	d1e0      	bne.n	801c63a <sqrt+0x62>
 801c678:	f002 fb40 	bl	801ecfc <__errno>
 801c67c:	2321      	movs	r3, #33	; 0x21
 801c67e:	6003      	str	r3, [r0, #0]
 801c680:	e7df      	b.n	801c642 <sqrt+0x6a>
 801c682:	bf00      	nop
 801c684:	200014a4 	.word	0x200014a4
 801c688:	080222f1 	.word	0x080222f1

0801c68c <acosf>:
 801c68c:	b510      	push	{r4, lr}
 801c68e:	ed2d 8b02 	vpush	{d8}
 801c692:	4c27      	ldr	r4, [pc, #156]	; (801c730 <acosf+0xa4>)
 801c694:	b08a      	sub	sp, #40	; 0x28
 801c696:	eeb0 8a40 	vmov.f32	s16, s0
 801c69a:	f001 f94b 	bl	801d934 <__ieee754_acosf>
 801c69e:	f994 3000 	ldrsb.w	r3, [r4]
 801c6a2:	3301      	adds	r3, #1
 801c6a4:	eef0 8a40 	vmov.f32	s17, s0
 801c6a8:	d03c      	beq.n	801c724 <acosf+0x98>
 801c6aa:	eeb4 8a48 	vcmp.f32	s16, s16
 801c6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6b2:	d637      	bvs.n	801c724 <acosf+0x98>
 801c6b4:	eeb0 0a48 	vmov.f32	s0, s16
 801c6b8:	f002 fa5c 	bl	801eb74 <fabsf>
 801c6bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c6c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801c6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6c8:	dd2c      	ble.n	801c724 <acosf+0x98>
 801c6ca:	2301      	movs	r3, #1
 801c6cc:	9300      	str	r3, [sp, #0]
 801c6ce:	4b19      	ldr	r3, [pc, #100]	; (801c734 <acosf+0xa8>)
 801c6d0:	9301      	str	r3, [sp, #4]
 801c6d2:	ee18 0a10 	vmov	r0, s16
 801c6d6:	2300      	movs	r3, #0
 801c6d8:	9308      	str	r3, [sp, #32]
 801c6da:	f7e3 ff3d 	bl	8000558 <__aeabi_f2d>
 801c6de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c6e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c6e6:	4814      	ldr	r0, [pc, #80]	; (801c738 <acosf+0xac>)
 801c6e8:	f002 f93a 	bl	801e960 <nan>
 801c6ec:	f994 3000 	ldrsb.w	r3, [r4]
 801c6f0:	2b02      	cmp	r3, #2
 801c6f2:	ed8d 0b06 	vstr	d0, [sp, #24]
 801c6f6:	d104      	bne.n	801c702 <acosf+0x76>
 801c6f8:	f002 fb00 	bl	801ecfc <__errno>
 801c6fc:	2321      	movs	r3, #33	; 0x21
 801c6fe:	6003      	str	r3, [r0, #0]
 801c700:	e004      	b.n	801c70c <acosf+0x80>
 801c702:	4668      	mov	r0, sp
 801c704:	f002 f927 	bl	801e956 <matherr>
 801c708:	2800      	cmp	r0, #0
 801c70a:	d0f5      	beq.n	801c6f8 <acosf+0x6c>
 801c70c:	9b08      	ldr	r3, [sp, #32]
 801c70e:	b11b      	cbz	r3, 801c718 <acosf+0x8c>
 801c710:	f002 faf4 	bl	801ecfc <__errno>
 801c714:	9b08      	ldr	r3, [sp, #32]
 801c716:	6003      	str	r3, [r0, #0]
 801c718:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c71c:	f7e4 fa68 	bl	8000bf0 <__aeabi_d2f>
 801c720:	ee08 0a90 	vmov	s17, r0
 801c724:	eeb0 0a68 	vmov.f32	s0, s17
 801c728:	b00a      	add	sp, #40	; 0x28
 801c72a:	ecbd 8b02 	vpop	{d8}
 801c72e:	bd10      	pop	{r4, pc}
 801c730:	200014a4 	.word	0x200014a4
 801c734:	080222f6 	.word	0x080222f6
 801c738:	08022901 	.word	0x08022901

0801c73c <sqrtf>:
 801c73c:	b510      	push	{r4, lr}
 801c73e:	ed2d 8b02 	vpush	{d8}
 801c742:	b08a      	sub	sp, #40	; 0x28
 801c744:	eeb0 8a40 	vmov.f32	s16, s0
 801c748:	f001 fb1c 	bl	801dd84 <__ieee754_sqrtf>
 801c74c:	4b21      	ldr	r3, [pc, #132]	; (801c7d4 <sqrtf+0x98>)
 801c74e:	f993 4000 	ldrsb.w	r4, [r3]
 801c752:	1c63      	adds	r3, r4, #1
 801c754:	d02c      	beq.n	801c7b0 <sqrtf+0x74>
 801c756:	eeb4 8a48 	vcmp.f32	s16, s16
 801c75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c75e:	d627      	bvs.n	801c7b0 <sqrtf+0x74>
 801c760:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801c764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c768:	d522      	bpl.n	801c7b0 <sqrtf+0x74>
 801c76a:	2301      	movs	r3, #1
 801c76c:	9300      	str	r3, [sp, #0]
 801c76e:	4b1a      	ldr	r3, [pc, #104]	; (801c7d8 <sqrtf+0x9c>)
 801c770:	9301      	str	r3, [sp, #4]
 801c772:	ee18 0a10 	vmov	r0, s16
 801c776:	2300      	movs	r3, #0
 801c778:	9308      	str	r3, [sp, #32]
 801c77a:	f7e3 feed 	bl	8000558 <__aeabi_f2d>
 801c77e:	2200      	movs	r2, #0
 801c780:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c788:	2300      	movs	r3, #0
 801c78a:	b9ac      	cbnz	r4, 801c7b8 <sqrtf+0x7c>
 801c78c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801c790:	4668      	mov	r0, sp
 801c792:	f002 f8e0 	bl	801e956 <matherr>
 801c796:	b1b8      	cbz	r0, 801c7c8 <sqrtf+0x8c>
 801c798:	9b08      	ldr	r3, [sp, #32]
 801c79a:	b11b      	cbz	r3, 801c7a4 <sqrtf+0x68>
 801c79c:	f002 faae 	bl	801ecfc <__errno>
 801c7a0:	9b08      	ldr	r3, [sp, #32]
 801c7a2:	6003      	str	r3, [r0, #0]
 801c7a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c7a8:	f7e4 fa22 	bl	8000bf0 <__aeabi_d2f>
 801c7ac:	ee00 0a10 	vmov	s0, r0
 801c7b0:	b00a      	add	sp, #40	; 0x28
 801c7b2:	ecbd 8b02 	vpop	{d8}
 801c7b6:	bd10      	pop	{r4, pc}
 801c7b8:	4610      	mov	r0, r2
 801c7ba:	4619      	mov	r1, r3
 801c7bc:	f7e4 f84a 	bl	8000854 <__aeabi_ddiv>
 801c7c0:	2c02      	cmp	r4, #2
 801c7c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c7c6:	d1e3      	bne.n	801c790 <sqrtf+0x54>
 801c7c8:	f002 fa98 	bl	801ecfc <__errno>
 801c7cc:	2321      	movs	r3, #33	; 0x21
 801c7ce:	6003      	str	r3, [r0, #0]
 801c7d0:	e7e2      	b.n	801c798 <sqrtf+0x5c>
 801c7d2:	bf00      	nop
 801c7d4:	200014a4 	.word	0x200014a4
 801c7d8:	080222fc 	.word	0x080222fc
 801c7dc:	00000000 	.word	0x00000000

0801c7e0 <__ieee754_asin>:
 801c7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7e4:	ec55 4b10 	vmov	r4, r5, d0
 801c7e8:	4bcb      	ldr	r3, [pc, #812]	; (801cb18 <__ieee754_asin+0x338>)
 801c7ea:	b085      	sub	sp, #20
 801c7ec:	f025 4b00 	bic.w	fp, r5, #2147483648	; 0x80000000
 801c7f0:	459b      	cmp	fp, r3
 801c7f2:	9501      	str	r5, [sp, #4]
 801c7f4:	dd32      	ble.n	801c85c <__ieee754_asin+0x7c>
 801c7f6:	ee10 3a10 	vmov	r3, s0
 801c7fa:	f10b 4b40 	add.w	fp, fp, #3221225472	; 0xc0000000
 801c7fe:	f50b 1b80 	add.w	fp, fp, #1048576	; 0x100000
 801c802:	ea5b 0303 	orrs.w	r3, fp, r3
 801c806:	d117      	bne.n	801c838 <__ieee754_asin+0x58>
 801c808:	a3a9      	add	r3, pc, #676	; (adr r3, 801cab0 <__ieee754_asin+0x2d0>)
 801c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c80e:	ee10 0a10 	vmov	r0, s0
 801c812:	4629      	mov	r1, r5
 801c814:	f7e3 fef4 	bl	8000600 <__aeabi_dmul>
 801c818:	a3a7      	add	r3, pc, #668	; (adr r3, 801cab8 <__ieee754_asin+0x2d8>)
 801c81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c81e:	4606      	mov	r6, r0
 801c820:	460f      	mov	r7, r1
 801c822:	4620      	mov	r0, r4
 801c824:	4629      	mov	r1, r5
 801c826:	f7e3 feeb 	bl	8000600 <__aeabi_dmul>
 801c82a:	4602      	mov	r2, r0
 801c82c:	460b      	mov	r3, r1
 801c82e:	4630      	mov	r0, r6
 801c830:	4639      	mov	r1, r7
 801c832:	f7e3 fd33 	bl	800029c <__adddf3>
 801c836:	e00a      	b.n	801c84e <__ieee754_asin+0x6e>
 801c838:	ee10 2a10 	vmov	r2, s0
 801c83c:	462b      	mov	r3, r5
 801c83e:	4620      	mov	r0, r4
 801c840:	4629      	mov	r1, r5
 801c842:	f7e3 fd29 	bl	8000298 <__aeabi_dsub>
 801c846:	4602      	mov	r2, r0
 801c848:	460b      	mov	r3, r1
 801c84a:	f7e4 f803 	bl	8000854 <__aeabi_ddiv>
 801c84e:	4604      	mov	r4, r0
 801c850:	460d      	mov	r5, r1
 801c852:	ec45 4b10 	vmov	d0, r4, r5
 801c856:	b005      	add	sp, #20
 801c858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c85c:	4baf      	ldr	r3, [pc, #700]	; (801cb1c <__ieee754_asin+0x33c>)
 801c85e:	459b      	cmp	fp, r3
 801c860:	dc11      	bgt.n	801c886 <__ieee754_asin+0xa6>
 801c862:	f1bb 5f79 	cmp.w	fp, #1044381696	; 0x3e400000
 801c866:	f280 80b0 	bge.w	801c9ca <__ieee754_asin+0x1ea>
 801c86a:	a395      	add	r3, pc, #596	; (adr r3, 801cac0 <__ieee754_asin+0x2e0>)
 801c86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c870:	ee10 0a10 	vmov	r0, s0
 801c874:	4629      	mov	r1, r5
 801c876:	f7e3 fd11 	bl	800029c <__adddf3>
 801c87a:	2200      	movs	r2, #0
 801c87c:	4ba8      	ldr	r3, [pc, #672]	; (801cb20 <__ieee754_asin+0x340>)
 801c87e:	f7e4 f94f 	bl	8000b20 <__aeabi_dcmpgt>
 801c882:	2800      	cmp	r0, #0
 801c884:	d1e5      	bne.n	801c852 <__ieee754_asin+0x72>
 801c886:	ec45 4b10 	vmov	d0, r4, r5
 801c88a:	f002 f855 	bl	801e938 <fabs>
 801c88e:	2000      	movs	r0, #0
 801c890:	ec53 2b10 	vmov	r2, r3, d0
 801c894:	49a2      	ldr	r1, [pc, #648]	; (801cb20 <__ieee754_asin+0x340>)
 801c896:	f7e3 fcff 	bl	8000298 <__aeabi_dsub>
 801c89a:	2200      	movs	r2, #0
 801c89c:	4ba1      	ldr	r3, [pc, #644]	; (801cb24 <__ieee754_asin+0x344>)
 801c89e:	f7e3 feaf 	bl	8000600 <__aeabi_dmul>
 801c8a2:	a389      	add	r3, pc, #548	; (adr r3, 801cac8 <__ieee754_asin+0x2e8>)
 801c8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8a8:	4604      	mov	r4, r0
 801c8aa:	460d      	mov	r5, r1
 801c8ac:	f7e3 fea8 	bl	8000600 <__aeabi_dmul>
 801c8b0:	a387      	add	r3, pc, #540	; (adr r3, 801cad0 <__ieee754_asin+0x2f0>)
 801c8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8b6:	f7e3 fcf1 	bl	800029c <__adddf3>
 801c8ba:	4622      	mov	r2, r4
 801c8bc:	462b      	mov	r3, r5
 801c8be:	f7e3 fe9f 	bl	8000600 <__aeabi_dmul>
 801c8c2:	a385      	add	r3, pc, #532	; (adr r3, 801cad8 <__ieee754_asin+0x2f8>)
 801c8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8c8:	f7e3 fce6 	bl	8000298 <__aeabi_dsub>
 801c8cc:	4622      	mov	r2, r4
 801c8ce:	462b      	mov	r3, r5
 801c8d0:	f7e3 fe96 	bl	8000600 <__aeabi_dmul>
 801c8d4:	a382      	add	r3, pc, #520	; (adr r3, 801cae0 <__ieee754_asin+0x300>)
 801c8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8da:	f7e3 fcdf 	bl	800029c <__adddf3>
 801c8de:	4622      	mov	r2, r4
 801c8e0:	462b      	mov	r3, r5
 801c8e2:	f7e3 fe8d 	bl	8000600 <__aeabi_dmul>
 801c8e6:	a380      	add	r3, pc, #512	; (adr r3, 801cae8 <__ieee754_asin+0x308>)
 801c8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8ec:	f7e3 fcd4 	bl	8000298 <__aeabi_dsub>
 801c8f0:	4622      	mov	r2, r4
 801c8f2:	462b      	mov	r3, r5
 801c8f4:	f7e3 fe84 	bl	8000600 <__aeabi_dmul>
 801c8f8:	a37d      	add	r3, pc, #500	; (adr r3, 801caf0 <__ieee754_asin+0x310>)
 801c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8fe:	f7e3 fccd 	bl	800029c <__adddf3>
 801c902:	4622      	mov	r2, r4
 801c904:	462b      	mov	r3, r5
 801c906:	f7e3 fe7b 	bl	8000600 <__aeabi_dmul>
 801c90a:	a37b      	add	r3, pc, #492	; (adr r3, 801caf8 <__ieee754_asin+0x318>)
 801c90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c910:	4680      	mov	r8, r0
 801c912:	4689      	mov	r9, r1
 801c914:	4620      	mov	r0, r4
 801c916:	4629      	mov	r1, r5
 801c918:	f7e3 fe72 	bl	8000600 <__aeabi_dmul>
 801c91c:	a378      	add	r3, pc, #480	; (adr r3, 801cb00 <__ieee754_asin+0x320>)
 801c91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c922:	f7e3 fcb9 	bl	8000298 <__aeabi_dsub>
 801c926:	4622      	mov	r2, r4
 801c928:	462b      	mov	r3, r5
 801c92a:	f7e3 fe69 	bl	8000600 <__aeabi_dmul>
 801c92e:	a376      	add	r3, pc, #472	; (adr r3, 801cb08 <__ieee754_asin+0x328>)
 801c930:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c934:	f7e3 fcb2 	bl	800029c <__adddf3>
 801c938:	4622      	mov	r2, r4
 801c93a:	462b      	mov	r3, r5
 801c93c:	f7e3 fe60 	bl	8000600 <__aeabi_dmul>
 801c940:	a373      	add	r3, pc, #460	; (adr r3, 801cb10 <__ieee754_asin+0x330>)
 801c942:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c946:	f7e3 fca7 	bl	8000298 <__aeabi_dsub>
 801c94a:	4622      	mov	r2, r4
 801c94c:	462b      	mov	r3, r5
 801c94e:	f7e3 fe57 	bl	8000600 <__aeabi_dmul>
 801c952:	2200      	movs	r2, #0
 801c954:	4b72      	ldr	r3, [pc, #456]	; (801cb20 <__ieee754_asin+0x340>)
 801c956:	f7e3 fca1 	bl	800029c <__adddf3>
 801c95a:	ec45 4b10 	vmov	d0, r4, r5
 801c95e:	460b      	mov	r3, r1
 801c960:	4602      	mov	r2, r0
 801c962:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c966:	f000 ff35 	bl	801d7d4 <__ieee754_sqrt>
 801c96a:	496f      	ldr	r1, [pc, #444]	; (801cb28 <__ieee754_asin+0x348>)
 801c96c:	458b      	cmp	fp, r1
 801c96e:	ec57 6b10 	vmov	r6, r7, d0
 801c972:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c976:	f340 80d9 	ble.w	801cb2c <__ieee754_asin+0x34c>
 801c97a:	4640      	mov	r0, r8
 801c97c:	4649      	mov	r1, r9
 801c97e:	f7e3 ff69 	bl	8000854 <__aeabi_ddiv>
 801c982:	4632      	mov	r2, r6
 801c984:	463b      	mov	r3, r7
 801c986:	f7e3 fe3b 	bl	8000600 <__aeabi_dmul>
 801c98a:	4632      	mov	r2, r6
 801c98c:	463b      	mov	r3, r7
 801c98e:	f7e3 fc85 	bl	800029c <__adddf3>
 801c992:	4602      	mov	r2, r0
 801c994:	460b      	mov	r3, r1
 801c996:	f7e3 fc81 	bl	800029c <__adddf3>
 801c99a:	a347      	add	r3, pc, #284	; (adr r3, 801cab8 <__ieee754_asin+0x2d8>)
 801c99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9a0:	f7e3 fc7a 	bl	8000298 <__aeabi_dsub>
 801c9a4:	4602      	mov	r2, r0
 801c9a6:	460b      	mov	r3, r1
 801c9a8:	a141      	add	r1, pc, #260	; (adr r1, 801cab0 <__ieee754_asin+0x2d0>)
 801c9aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c9ae:	f7e3 fc73 	bl	8000298 <__aeabi_dsub>
 801c9b2:	9b01      	ldr	r3, [sp, #4]
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	bfdc      	itt	le
 801c9b8:	4602      	movle	r2, r0
 801c9ba:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801c9be:	4604      	mov	r4, r0
 801c9c0:	460d      	mov	r5, r1
 801c9c2:	bfdc      	itt	le
 801c9c4:	4614      	movle	r4, r2
 801c9c6:	461d      	movle	r5, r3
 801c9c8:	e743      	b.n	801c852 <__ieee754_asin+0x72>
 801c9ca:	ee10 2a10 	vmov	r2, s0
 801c9ce:	ee10 0a10 	vmov	r0, s0
 801c9d2:	462b      	mov	r3, r5
 801c9d4:	4629      	mov	r1, r5
 801c9d6:	f7e3 fe13 	bl	8000600 <__aeabi_dmul>
 801c9da:	a33b      	add	r3, pc, #236	; (adr r3, 801cac8 <__ieee754_asin+0x2e8>)
 801c9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9e0:	4606      	mov	r6, r0
 801c9e2:	460f      	mov	r7, r1
 801c9e4:	f7e3 fe0c 	bl	8000600 <__aeabi_dmul>
 801c9e8:	a339      	add	r3, pc, #228	; (adr r3, 801cad0 <__ieee754_asin+0x2f0>)
 801c9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9ee:	f7e3 fc55 	bl	800029c <__adddf3>
 801c9f2:	4632      	mov	r2, r6
 801c9f4:	463b      	mov	r3, r7
 801c9f6:	f7e3 fe03 	bl	8000600 <__aeabi_dmul>
 801c9fa:	a337      	add	r3, pc, #220	; (adr r3, 801cad8 <__ieee754_asin+0x2f8>)
 801c9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca00:	f7e3 fc4a 	bl	8000298 <__aeabi_dsub>
 801ca04:	4632      	mov	r2, r6
 801ca06:	463b      	mov	r3, r7
 801ca08:	f7e3 fdfa 	bl	8000600 <__aeabi_dmul>
 801ca0c:	a334      	add	r3, pc, #208	; (adr r3, 801cae0 <__ieee754_asin+0x300>)
 801ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca12:	f7e3 fc43 	bl	800029c <__adddf3>
 801ca16:	4632      	mov	r2, r6
 801ca18:	463b      	mov	r3, r7
 801ca1a:	f7e3 fdf1 	bl	8000600 <__aeabi_dmul>
 801ca1e:	a332      	add	r3, pc, #200	; (adr r3, 801cae8 <__ieee754_asin+0x308>)
 801ca20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca24:	f7e3 fc38 	bl	8000298 <__aeabi_dsub>
 801ca28:	4632      	mov	r2, r6
 801ca2a:	463b      	mov	r3, r7
 801ca2c:	f7e3 fde8 	bl	8000600 <__aeabi_dmul>
 801ca30:	a32f      	add	r3, pc, #188	; (adr r3, 801caf0 <__ieee754_asin+0x310>)
 801ca32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca36:	f7e3 fc31 	bl	800029c <__adddf3>
 801ca3a:	4632      	mov	r2, r6
 801ca3c:	463b      	mov	r3, r7
 801ca3e:	f7e3 fddf 	bl	8000600 <__aeabi_dmul>
 801ca42:	a32d      	add	r3, pc, #180	; (adr r3, 801caf8 <__ieee754_asin+0x318>)
 801ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca48:	4680      	mov	r8, r0
 801ca4a:	4689      	mov	r9, r1
 801ca4c:	4630      	mov	r0, r6
 801ca4e:	4639      	mov	r1, r7
 801ca50:	f7e3 fdd6 	bl	8000600 <__aeabi_dmul>
 801ca54:	a32a      	add	r3, pc, #168	; (adr r3, 801cb00 <__ieee754_asin+0x320>)
 801ca56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca5a:	f7e3 fc1d 	bl	8000298 <__aeabi_dsub>
 801ca5e:	4632      	mov	r2, r6
 801ca60:	463b      	mov	r3, r7
 801ca62:	f7e3 fdcd 	bl	8000600 <__aeabi_dmul>
 801ca66:	a328      	add	r3, pc, #160	; (adr r3, 801cb08 <__ieee754_asin+0x328>)
 801ca68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca6c:	f7e3 fc16 	bl	800029c <__adddf3>
 801ca70:	4632      	mov	r2, r6
 801ca72:	463b      	mov	r3, r7
 801ca74:	f7e3 fdc4 	bl	8000600 <__aeabi_dmul>
 801ca78:	a325      	add	r3, pc, #148	; (adr r3, 801cb10 <__ieee754_asin+0x330>)
 801ca7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca7e:	f7e3 fc0b 	bl	8000298 <__aeabi_dsub>
 801ca82:	4632      	mov	r2, r6
 801ca84:	463b      	mov	r3, r7
 801ca86:	f7e3 fdbb 	bl	8000600 <__aeabi_dmul>
 801ca8a:	2200      	movs	r2, #0
 801ca8c:	4b24      	ldr	r3, [pc, #144]	; (801cb20 <__ieee754_asin+0x340>)
 801ca8e:	f7e3 fc05 	bl	800029c <__adddf3>
 801ca92:	4602      	mov	r2, r0
 801ca94:	460b      	mov	r3, r1
 801ca96:	4640      	mov	r0, r8
 801ca98:	4649      	mov	r1, r9
 801ca9a:	f7e3 fedb 	bl	8000854 <__aeabi_ddiv>
 801ca9e:	4622      	mov	r2, r4
 801caa0:	462b      	mov	r3, r5
 801caa2:	f7e3 fdad 	bl	8000600 <__aeabi_dmul>
 801caa6:	4602      	mov	r2, r0
 801caa8:	460b      	mov	r3, r1
 801caaa:	4620      	mov	r0, r4
 801caac:	4629      	mov	r1, r5
 801caae:	e6c0      	b.n	801c832 <__ieee754_asin+0x52>
 801cab0:	54442d18 	.word	0x54442d18
 801cab4:	3ff921fb 	.word	0x3ff921fb
 801cab8:	33145c07 	.word	0x33145c07
 801cabc:	3c91a626 	.word	0x3c91a626
 801cac0:	8800759c 	.word	0x8800759c
 801cac4:	7e37e43c 	.word	0x7e37e43c
 801cac8:	0dfdf709 	.word	0x0dfdf709
 801cacc:	3f023de1 	.word	0x3f023de1
 801cad0:	7501b288 	.word	0x7501b288
 801cad4:	3f49efe0 	.word	0x3f49efe0
 801cad8:	b5688f3b 	.word	0xb5688f3b
 801cadc:	3fa48228 	.word	0x3fa48228
 801cae0:	0e884455 	.word	0x0e884455
 801cae4:	3fc9c155 	.word	0x3fc9c155
 801cae8:	03eb6f7d 	.word	0x03eb6f7d
 801caec:	3fd4d612 	.word	0x3fd4d612
 801caf0:	55555555 	.word	0x55555555
 801caf4:	3fc55555 	.word	0x3fc55555
 801caf8:	b12e9282 	.word	0xb12e9282
 801cafc:	3fb3b8c5 	.word	0x3fb3b8c5
 801cb00:	1b8d0159 	.word	0x1b8d0159
 801cb04:	3fe6066c 	.word	0x3fe6066c
 801cb08:	9c598ac8 	.word	0x9c598ac8
 801cb0c:	40002ae5 	.word	0x40002ae5
 801cb10:	1c8a2d4b 	.word	0x1c8a2d4b
 801cb14:	40033a27 	.word	0x40033a27
 801cb18:	3fefffff 	.word	0x3fefffff
 801cb1c:	3fdfffff 	.word	0x3fdfffff
 801cb20:	3ff00000 	.word	0x3ff00000
 801cb24:	3fe00000 	.word	0x3fe00000
 801cb28:	3fef3332 	.word	0x3fef3332
 801cb2c:	4640      	mov	r0, r8
 801cb2e:	4649      	mov	r1, r9
 801cb30:	f7e3 fe90 	bl	8000854 <__aeabi_ddiv>
 801cb34:	4632      	mov	r2, r6
 801cb36:	4680      	mov	r8, r0
 801cb38:	4689      	mov	r9, r1
 801cb3a:	463b      	mov	r3, r7
 801cb3c:	4630      	mov	r0, r6
 801cb3e:	4639      	mov	r1, r7
 801cb40:	f7e3 fbac 	bl	800029c <__adddf3>
 801cb44:	4602      	mov	r2, r0
 801cb46:	460b      	mov	r3, r1
 801cb48:	4640      	mov	r0, r8
 801cb4a:	4649      	mov	r1, r9
 801cb4c:	f7e3 fd58 	bl	8000600 <__aeabi_dmul>
 801cb50:	f04f 0a00 	mov.w	sl, #0
 801cb54:	4680      	mov	r8, r0
 801cb56:	4689      	mov	r9, r1
 801cb58:	4652      	mov	r2, sl
 801cb5a:	463b      	mov	r3, r7
 801cb5c:	4650      	mov	r0, sl
 801cb5e:	4639      	mov	r1, r7
 801cb60:	f7e3 fd4e 	bl	8000600 <__aeabi_dmul>
 801cb64:	4602      	mov	r2, r0
 801cb66:	460b      	mov	r3, r1
 801cb68:	4620      	mov	r0, r4
 801cb6a:	4629      	mov	r1, r5
 801cb6c:	f7e3 fb94 	bl	8000298 <__aeabi_dsub>
 801cb70:	4652      	mov	r2, sl
 801cb72:	4604      	mov	r4, r0
 801cb74:	460d      	mov	r5, r1
 801cb76:	463b      	mov	r3, r7
 801cb78:	4630      	mov	r0, r6
 801cb7a:	4639      	mov	r1, r7
 801cb7c:	f7e3 fb8e 	bl	800029c <__adddf3>
 801cb80:	4602      	mov	r2, r0
 801cb82:	460b      	mov	r3, r1
 801cb84:	4620      	mov	r0, r4
 801cb86:	4629      	mov	r1, r5
 801cb88:	f7e3 fe64 	bl	8000854 <__aeabi_ddiv>
 801cb8c:	4602      	mov	r2, r0
 801cb8e:	460b      	mov	r3, r1
 801cb90:	f7e3 fb84 	bl	800029c <__adddf3>
 801cb94:	4602      	mov	r2, r0
 801cb96:	460b      	mov	r3, r1
 801cb98:	a113      	add	r1, pc, #76	; (adr r1, 801cbe8 <__ieee754_asin+0x408>)
 801cb9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb9e:	f7e3 fb7b 	bl	8000298 <__aeabi_dsub>
 801cba2:	4602      	mov	r2, r0
 801cba4:	460b      	mov	r3, r1
 801cba6:	4640      	mov	r0, r8
 801cba8:	4649      	mov	r1, r9
 801cbaa:	f7e3 fb75 	bl	8000298 <__aeabi_dsub>
 801cbae:	4652      	mov	r2, sl
 801cbb0:	4604      	mov	r4, r0
 801cbb2:	460d      	mov	r5, r1
 801cbb4:	463b      	mov	r3, r7
 801cbb6:	4650      	mov	r0, sl
 801cbb8:	4639      	mov	r1, r7
 801cbba:	f7e3 fb6f 	bl	800029c <__adddf3>
 801cbbe:	4602      	mov	r2, r0
 801cbc0:	460b      	mov	r3, r1
 801cbc2:	a10b      	add	r1, pc, #44	; (adr r1, 801cbf0 <__ieee754_asin+0x410>)
 801cbc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cbc8:	f7e3 fb66 	bl	8000298 <__aeabi_dsub>
 801cbcc:	4602      	mov	r2, r0
 801cbce:	460b      	mov	r3, r1
 801cbd0:	4620      	mov	r0, r4
 801cbd2:	4629      	mov	r1, r5
 801cbd4:	f7e3 fb60 	bl	8000298 <__aeabi_dsub>
 801cbd8:	4602      	mov	r2, r0
 801cbda:	460b      	mov	r3, r1
 801cbdc:	a104      	add	r1, pc, #16	; (adr r1, 801cbf0 <__ieee754_asin+0x410>)
 801cbde:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cbe2:	e6e4      	b.n	801c9ae <__ieee754_asin+0x1ce>
 801cbe4:	f3af 8000 	nop.w
 801cbe8:	33145c07 	.word	0x33145c07
 801cbec:	3c91a626 	.word	0x3c91a626
 801cbf0:	54442d18 	.word	0x54442d18
 801cbf4:	3fe921fb 	.word	0x3fe921fb

0801cbf8 <__ieee754_atan2>:
 801cbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cbfc:	ec57 6b11 	vmov	r6, r7, d1
 801cc00:	4273      	negs	r3, r6
 801cc02:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801cc06:	4333      	orrs	r3, r6
 801cc08:	f8df c19c 	ldr.w	ip, [pc, #412]	; 801cda8 <__ieee754_atan2+0x1b0>
 801cc0c:	ec51 0b10 	vmov	r0, r1, d0
 801cc10:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801cc14:	4563      	cmp	r3, ip
 801cc16:	ee11 8a10 	vmov	r8, s2
 801cc1a:	ee10 9a10 	vmov	r9, s0
 801cc1e:	468e      	mov	lr, r1
 801cc20:	d807      	bhi.n	801cc32 <__ieee754_atan2+0x3a>
 801cc22:	4244      	negs	r4, r0
 801cc24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801cc28:	4304      	orrs	r4, r0
 801cc2a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801cc2e:	4564      	cmp	r4, ip
 801cc30:	d907      	bls.n	801cc42 <__ieee754_atan2+0x4a>
 801cc32:	4632      	mov	r2, r6
 801cc34:	463b      	mov	r3, r7
 801cc36:	f7e3 fb31 	bl	800029c <__adddf3>
 801cc3a:	ec41 0b10 	vmov	d0, r0, r1
 801cc3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc42:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801cc46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801cc4a:	4334      	orrs	r4, r6
 801cc4c:	d103      	bne.n	801cc56 <__ieee754_atan2+0x5e>
 801cc4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc52:	f001 bcc9 	b.w	801e5e8 <atan>
 801cc56:	17bc      	asrs	r4, r7, #30
 801cc58:	f004 0402 	and.w	r4, r4, #2
 801cc5c:	ea59 0903 	orrs.w	r9, r9, r3
 801cc60:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801cc64:	d107      	bne.n	801cc76 <__ieee754_atan2+0x7e>
 801cc66:	2c02      	cmp	r4, #2
 801cc68:	d030      	beq.n	801cccc <__ieee754_atan2+0xd4>
 801cc6a:	2c03      	cmp	r4, #3
 801cc6c:	d1e5      	bne.n	801cc3a <__ieee754_atan2+0x42>
 801cc6e:	a13c      	add	r1, pc, #240	; (adr r1, 801cd60 <__ieee754_atan2+0x168>)
 801cc70:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc74:	e7e1      	b.n	801cc3a <__ieee754_atan2+0x42>
 801cc76:	ea58 0802 	orrs.w	r8, r8, r2
 801cc7a:	d106      	bne.n	801cc8a <__ieee754_atan2+0x92>
 801cc7c:	f1be 0f00 	cmp.w	lr, #0
 801cc80:	da6a      	bge.n	801cd58 <__ieee754_atan2+0x160>
 801cc82:	a139      	add	r1, pc, #228	; (adr r1, 801cd68 <__ieee754_atan2+0x170>)
 801cc84:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc88:	e7d7      	b.n	801cc3a <__ieee754_atan2+0x42>
 801cc8a:	4562      	cmp	r2, ip
 801cc8c:	d122      	bne.n	801ccd4 <__ieee754_atan2+0xdc>
 801cc8e:	4293      	cmp	r3, r2
 801cc90:	d111      	bne.n	801ccb6 <__ieee754_atan2+0xbe>
 801cc92:	2c02      	cmp	r4, #2
 801cc94:	d007      	beq.n	801cca6 <__ieee754_atan2+0xae>
 801cc96:	2c03      	cmp	r4, #3
 801cc98:	d009      	beq.n	801ccae <__ieee754_atan2+0xb6>
 801cc9a:	2c01      	cmp	r4, #1
 801cc9c:	d156      	bne.n	801cd4c <__ieee754_atan2+0x154>
 801cc9e:	a134      	add	r1, pc, #208	; (adr r1, 801cd70 <__ieee754_atan2+0x178>)
 801cca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cca4:	e7c9      	b.n	801cc3a <__ieee754_atan2+0x42>
 801cca6:	a134      	add	r1, pc, #208	; (adr r1, 801cd78 <__ieee754_atan2+0x180>)
 801cca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ccac:	e7c5      	b.n	801cc3a <__ieee754_atan2+0x42>
 801ccae:	a134      	add	r1, pc, #208	; (adr r1, 801cd80 <__ieee754_atan2+0x188>)
 801ccb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ccb4:	e7c1      	b.n	801cc3a <__ieee754_atan2+0x42>
 801ccb6:	2c02      	cmp	r4, #2
 801ccb8:	d008      	beq.n	801cccc <__ieee754_atan2+0xd4>
 801ccba:	2c03      	cmp	r4, #3
 801ccbc:	d0d7      	beq.n	801cc6e <__ieee754_atan2+0x76>
 801ccbe:	2c01      	cmp	r4, #1
 801ccc0:	f04f 0000 	mov.w	r0, #0
 801ccc4:	d146      	bne.n	801cd54 <__ieee754_atan2+0x15c>
 801ccc6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801ccca:	e7b6      	b.n	801cc3a <__ieee754_atan2+0x42>
 801cccc:	a12e      	add	r1, pc, #184	; (adr r1, 801cd88 <__ieee754_atan2+0x190>)
 801ccce:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ccd2:	e7b2      	b.n	801cc3a <__ieee754_atan2+0x42>
 801ccd4:	4563      	cmp	r3, ip
 801ccd6:	d0d1      	beq.n	801cc7c <__ieee754_atan2+0x84>
 801ccd8:	1a9b      	subs	r3, r3, r2
 801ccda:	151b      	asrs	r3, r3, #20
 801ccdc:	2b3c      	cmp	r3, #60	; 0x3c
 801ccde:	dc1e      	bgt.n	801cd1e <__ieee754_atan2+0x126>
 801cce0:	2f00      	cmp	r7, #0
 801cce2:	da01      	bge.n	801cce8 <__ieee754_atan2+0xf0>
 801cce4:	333c      	adds	r3, #60	; 0x3c
 801cce6:	db1e      	blt.n	801cd26 <__ieee754_atan2+0x12e>
 801cce8:	4632      	mov	r2, r6
 801ccea:	463b      	mov	r3, r7
 801ccec:	f7e3 fdb2 	bl	8000854 <__aeabi_ddiv>
 801ccf0:	ec41 0b10 	vmov	d0, r0, r1
 801ccf4:	f001 fe20 	bl	801e938 <fabs>
 801ccf8:	f001 fc76 	bl	801e5e8 <atan>
 801ccfc:	ec51 0b10 	vmov	r0, r1, d0
 801cd00:	2c01      	cmp	r4, #1
 801cd02:	d013      	beq.n	801cd2c <__ieee754_atan2+0x134>
 801cd04:	2c02      	cmp	r4, #2
 801cd06:	d014      	beq.n	801cd32 <__ieee754_atan2+0x13a>
 801cd08:	2c00      	cmp	r4, #0
 801cd0a:	d096      	beq.n	801cc3a <__ieee754_atan2+0x42>
 801cd0c:	a320      	add	r3, pc, #128	; (adr r3, 801cd90 <__ieee754_atan2+0x198>)
 801cd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd12:	f7e3 fac1 	bl	8000298 <__aeabi_dsub>
 801cd16:	a31c      	add	r3, pc, #112	; (adr r3, 801cd88 <__ieee754_atan2+0x190>)
 801cd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd1c:	e013      	b.n	801cd46 <__ieee754_atan2+0x14e>
 801cd1e:	a11e      	add	r1, pc, #120	; (adr r1, 801cd98 <__ieee754_atan2+0x1a0>)
 801cd20:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cd24:	e7ec      	b.n	801cd00 <__ieee754_atan2+0x108>
 801cd26:	2000      	movs	r0, #0
 801cd28:	2100      	movs	r1, #0
 801cd2a:	e7e9      	b.n	801cd00 <__ieee754_atan2+0x108>
 801cd2c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801cd30:	e783      	b.n	801cc3a <__ieee754_atan2+0x42>
 801cd32:	a317      	add	r3, pc, #92	; (adr r3, 801cd90 <__ieee754_atan2+0x198>)
 801cd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd38:	f7e3 faae 	bl	8000298 <__aeabi_dsub>
 801cd3c:	4602      	mov	r2, r0
 801cd3e:	460b      	mov	r3, r1
 801cd40:	a111      	add	r1, pc, #68	; (adr r1, 801cd88 <__ieee754_atan2+0x190>)
 801cd42:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cd46:	f7e3 faa7 	bl	8000298 <__aeabi_dsub>
 801cd4a:	e776      	b.n	801cc3a <__ieee754_atan2+0x42>
 801cd4c:	a114      	add	r1, pc, #80	; (adr r1, 801cda0 <__ieee754_atan2+0x1a8>)
 801cd4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cd52:	e772      	b.n	801cc3a <__ieee754_atan2+0x42>
 801cd54:	2100      	movs	r1, #0
 801cd56:	e770      	b.n	801cc3a <__ieee754_atan2+0x42>
 801cd58:	a10f      	add	r1, pc, #60	; (adr r1, 801cd98 <__ieee754_atan2+0x1a0>)
 801cd5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cd5e:	e76c      	b.n	801cc3a <__ieee754_atan2+0x42>
 801cd60:	54442d18 	.word	0x54442d18
 801cd64:	c00921fb 	.word	0xc00921fb
 801cd68:	54442d18 	.word	0x54442d18
 801cd6c:	bff921fb 	.word	0xbff921fb
 801cd70:	54442d18 	.word	0x54442d18
 801cd74:	bfe921fb 	.word	0xbfe921fb
 801cd78:	7f3321d2 	.word	0x7f3321d2
 801cd7c:	4002d97c 	.word	0x4002d97c
 801cd80:	7f3321d2 	.word	0x7f3321d2
 801cd84:	c002d97c 	.word	0xc002d97c
 801cd88:	54442d18 	.word	0x54442d18
 801cd8c:	400921fb 	.word	0x400921fb
 801cd90:	33145c07 	.word	0x33145c07
 801cd94:	3ca1a626 	.word	0x3ca1a626
 801cd98:	54442d18 	.word	0x54442d18
 801cd9c:	3ff921fb 	.word	0x3ff921fb
 801cda0:	54442d18 	.word	0x54442d18
 801cda4:	3fe921fb 	.word	0x3fe921fb
 801cda8:	7ff00000 	.word	0x7ff00000
 801cdac:	00000000 	.word	0x00000000

0801cdb0 <__ieee754_pow>:
 801cdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdb4:	b091      	sub	sp, #68	; 0x44
 801cdb6:	ed8d 1b00 	vstr	d1, [sp]
 801cdba:	e89d 0204 	ldmia.w	sp, {r2, r9}
 801cdbe:	ec57 6b10 	vmov	r6, r7, d0
 801cdc2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801cdc6:	ea58 0302 	orrs.w	r3, r8, r2
 801cdca:	ee10 aa10 	vmov	sl, s0
 801cdce:	463d      	mov	r5, r7
 801cdd0:	f000 84bd 	beq.w	801d74e <__ieee754_pow+0x99e>
 801cdd4:	4b78      	ldr	r3, [pc, #480]	; (801cfb8 <__ieee754_pow+0x208>)
 801cdd6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801cdda:	429c      	cmp	r4, r3
 801cddc:	dc09      	bgt.n	801cdf2 <__ieee754_pow+0x42>
 801cdde:	d103      	bne.n	801cde8 <__ieee754_pow+0x38>
 801cde0:	b93e      	cbnz	r6, 801cdf2 <__ieee754_pow+0x42>
 801cde2:	45a0      	cmp	r8, r4
 801cde4:	dc0d      	bgt.n	801ce02 <__ieee754_pow+0x52>
 801cde6:	e001      	b.n	801cdec <__ieee754_pow+0x3c>
 801cde8:	4598      	cmp	r8, r3
 801cdea:	dc02      	bgt.n	801cdf2 <__ieee754_pow+0x42>
 801cdec:	4598      	cmp	r8, r3
 801cdee:	d10e      	bne.n	801ce0e <__ieee754_pow+0x5e>
 801cdf0:	b16a      	cbz	r2, 801ce0e <__ieee754_pow+0x5e>
 801cdf2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801cdf6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801cdfa:	ea54 030a 	orrs.w	r3, r4, sl
 801cdfe:	f000 84a6 	beq.w	801d74e <__ieee754_pow+0x99e>
 801ce02:	486e      	ldr	r0, [pc, #440]	; (801cfbc <__ieee754_pow+0x20c>)
 801ce04:	b011      	add	sp, #68	; 0x44
 801ce06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce0a:	f001 bda9 	b.w	801e960 <nan>
 801ce0e:	2d00      	cmp	r5, #0
 801ce10:	da53      	bge.n	801ceba <__ieee754_pow+0x10a>
 801ce12:	4b6b      	ldr	r3, [pc, #428]	; (801cfc0 <__ieee754_pow+0x210>)
 801ce14:	4598      	cmp	r8, r3
 801ce16:	dc4d      	bgt.n	801ceb4 <__ieee754_pow+0x104>
 801ce18:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801ce1c:	4598      	cmp	r8, r3
 801ce1e:	dd4c      	ble.n	801ceba <__ieee754_pow+0x10a>
 801ce20:	ea4f 5328 	mov.w	r3, r8, asr #20
 801ce24:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ce28:	2b14      	cmp	r3, #20
 801ce2a:	dd26      	ble.n	801ce7a <__ieee754_pow+0xca>
 801ce2c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801ce30:	fa22 f103 	lsr.w	r1, r2, r3
 801ce34:	fa01 f303 	lsl.w	r3, r1, r3
 801ce38:	429a      	cmp	r2, r3
 801ce3a:	d13e      	bne.n	801ceba <__ieee754_pow+0x10a>
 801ce3c:	f001 0101 	and.w	r1, r1, #1
 801ce40:	f1c1 0b02 	rsb	fp, r1, #2
 801ce44:	2a00      	cmp	r2, #0
 801ce46:	d15b      	bne.n	801cf00 <__ieee754_pow+0x150>
 801ce48:	4b5b      	ldr	r3, [pc, #364]	; (801cfb8 <__ieee754_pow+0x208>)
 801ce4a:	4598      	cmp	r8, r3
 801ce4c:	d124      	bne.n	801ce98 <__ieee754_pow+0xe8>
 801ce4e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801ce52:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801ce56:	ea53 030a 	orrs.w	r3, r3, sl
 801ce5a:	f000 8478 	beq.w	801d74e <__ieee754_pow+0x99e>
 801ce5e:	4b59      	ldr	r3, [pc, #356]	; (801cfc4 <__ieee754_pow+0x214>)
 801ce60:	429c      	cmp	r4, r3
 801ce62:	dd2d      	ble.n	801cec0 <__ieee754_pow+0x110>
 801ce64:	f1b9 0f00 	cmp.w	r9, #0
 801ce68:	f280 8475 	bge.w	801d756 <__ieee754_pow+0x9a6>
 801ce6c:	2000      	movs	r0, #0
 801ce6e:	2100      	movs	r1, #0
 801ce70:	ec41 0b10 	vmov	d0, r0, r1
 801ce74:	b011      	add	sp, #68	; 0x44
 801ce76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce7a:	2a00      	cmp	r2, #0
 801ce7c:	d13e      	bne.n	801cefc <__ieee754_pow+0x14c>
 801ce7e:	f1c3 0314 	rsb	r3, r3, #20
 801ce82:	fa48 f103 	asr.w	r1, r8, r3
 801ce86:	fa01 f303 	lsl.w	r3, r1, r3
 801ce8a:	4598      	cmp	r8, r3
 801ce8c:	f040 846b 	bne.w	801d766 <__ieee754_pow+0x9b6>
 801ce90:	f001 0101 	and.w	r1, r1, #1
 801ce94:	f1c1 0b02 	rsb	fp, r1, #2
 801ce98:	4b4b      	ldr	r3, [pc, #300]	; (801cfc8 <__ieee754_pow+0x218>)
 801ce9a:	4598      	cmp	r8, r3
 801ce9c:	d118      	bne.n	801ced0 <__ieee754_pow+0x120>
 801ce9e:	f1b9 0f00 	cmp.w	r9, #0
 801cea2:	f280 845c 	bge.w	801d75e <__ieee754_pow+0x9ae>
 801cea6:	4948      	ldr	r1, [pc, #288]	; (801cfc8 <__ieee754_pow+0x218>)
 801cea8:	4632      	mov	r2, r6
 801ceaa:	463b      	mov	r3, r7
 801ceac:	2000      	movs	r0, #0
 801ceae:	f7e3 fcd1 	bl	8000854 <__aeabi_ddiv>
 801ceb2:	e7dd      	b.n	801ce70 <__ieee754_pow+0xc0>
 801ceb4:	f04f 0b02 	mov.w	fp, #2
 801ceb8:	e7c4      	b.n	801ce44 <__ieee754_pow+0x94>
 801ceba:	f04f 0b00 	mov.w	fp, #0
 801cebe:	e7c1      	b.n	801ce44 <__ieee754_pow+0x94>
 801cec0:	f1b9 0f00 	cmp.w	r9, #0
 801cec4:	dad2      	bge.n	801ce6c <__ieee754_pow+0xbc>
 801cec6:	e89d 0009 	ldmia.w	sp, {r0, r3}
 801ceca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801cece:	e7cf      	b.n	801ce70 <__ieee754_pow+0xc0>
 801ced0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801ced4:	d106      	bne.n	801cee4 <__ieee754_pow+0x134>
 801ced6:	4632      	mov	r2, r6
 801ced8:	463b      	mov	r3, r7
 801ceda:	4610      	mov	r0, r2
 801cedc:	4619      	mov	r1, r3
 801cede:	f7e3 fb8f 	bl	8000600 <__aeabi_dmul>
 801cee2:	e7c5      	b.n	801ce70 <__ieee754_pow+0xc0>
 801cee4:	4b39      	ldr	r3, [pc, #228]	; (801cfcc <__ieee754_pow+0x21c>)
 801cee6:	4599      	cmp	r9, r3
 801cee8:	d10a      	bne.n	801cf00 <__ieee754_pow+0x150>
 801ceea:	2d00      	cmp	r5, #0
 801ceec:	db08      	blt.n	801cf00 <__ieee754_pow+0x150>
 801ceee:	ec47 6b10 	vmov	d0, r6, r7
 801cef2:	b011      	add	sp, #68	; 0x44
 801cef4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cef8:	f000 bc6c 	b.w	801d7d4 <__ieee754_sqrt>
 801cefc:	f04f 0b00 	mov.w	fp, #0
 801cf00:	ec47 6b10 	vmov	d0, r6, r7
 801cf04:	f001 fd18 	bl	801e938 <fabs>
 801cf08:	ec51 0b10 	vmov	r0, r1, d0
 801cf0c:	f1ba 0f00 	cmp.w	sl, #0
 801cf10:	d127      	bne.n	801cf62 <__ieee754_pow+0x1b2>
 801cf12:	b124      	cbz	r4, 801cf1e <__ieee754_pow+0x16e>
 801cf14:	4b2c      	ldr	r3, [pc, #176]	; (801cfc8 <__ieee754_pow+0x218>)
 801cf16:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801cf1a:	429a      	cmp	r2, r3
 801cf1c:	d121      	bne.n	801cf62 <__ieee754_pow+0x1b2>
 801cf1e:	f1b9 0f00 	cmp.w	r9, #0
 801cf22:	da05      	bge.n	801cf30 <__ieee754_pow+0x180>
 801cf24:	4602      	mov	r2, r0
 801cf26:	460b      	mov	r3, r1
 801cf28:	2000      	movs	r0, #0
 801cf2a:	4927      	ldr	r1, [pc, #156]	; (801cfc8 <__ieee754_pow+0x218>)
 801cf2c:	f7e3 fc92 	bl	8000854 <__aeabi_ddiv>
 801cf30:	2d00      	cmp	r5, #0
 801cf32:	da9d      	bge.n	801ce70 <__ieee754_pow+0xc0>
 801cf34:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801cf38:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801cf3c:	ea54 030b 	orrs.w	r3, r4, fp
 801cf40:	d108      	bne.n	801cf54 <__ieee754_pow+0x1a4>
 801cf42:	4602      	mov	r2, r0
 801cf44:	460b      	mov	r3, r1
 801cf46:	4610      	mov	r0, r2
 801cf48:	4619      	mov	r1, r3
 801cf4a:	f7e3 f9a5 	bl	8000298 <__aeabi_dsub>
 801cf4e:	4602      	mov	r2, r0
 801cf50:	460b      	mov	r3, r1
 801cf52:	e7ac      	b.n	801ceae <__ieee754_pow+0xfe>
 801cf54:	f1bb 0f01 	cmp.w	fp, #1
 801cf58:	d18a      	bne.n	801ce70 <__ieee754_pow+0xc0>
 801cf5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cf5e:	4619      	mov	r1, r3
 801cf60:	e786      	b.n	801ce70 <__ieee754_pow+0xc0>
 801cf62:	0fed      	lsrs	r5, r5, #31
 801cf64:	1e6b      	subs	r3, r5, #1
 801cf66:	930d      	str	r3, [sp, #52]	; 0x34
 801cf68:	ea5b 0303 	orrs.w	r3, fp, r3
 801cf6c:	d102      	bne.n	801cf74 <__ieee754_pow+0x1c4>
 801cf6e:	4632      	mov	r2, r6
 801cf70:	463b      	mov	r3, r7
 801cf72:	e7e8      	b.n	801cf46 <__ieee754_pow+0x196>
 801cf74:	4b16      	ldr	r3, [pc, #88]	; (801cfd0 <__ieee754_pow+0x220>)
 801cf76:	4598      	cmp	r8, r3
 801cf78:	f340 80fe 	ble.w	801d178 <__ieee754_pow+0x3c8>
 801cf7c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801cf80:	4598      	cmp	r8, r3
 801cf82:	dd0a      	ble.n	801cf9a <__ieee754_pow+0x1ea>
 801cf84:	4b0f      	ldr	r3, [pc, #60]	; (801cfc4 <__ieee754_pow+0x214>)
 801cf86:	429c      	cmp	r4, r3
 801cf88:	dc0d      	bgt.n	801cfa6 <__ieee754_pow+0x1f6>
 801cf8a:	f1b9 0f00 	cmp.w	r9, #0
 801cf8e:	f6bf af6d 	bge.w	801ce6c <__ieee754_pow+0xbc>
 801cf92:	a307      	add	r3, pc, #28	; (adr r3, 801cfb0 <__ieee754_pow+0x200>)
 801cf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf98:	e79f      	b.n	801ceda <__ieee754_pow+0x12a>
 801cf9a:	4b0e      	ldr	r3, [pc, #56]	; (801cfd4 <__ieee754_pow+0x224>)
 801cf9c:	429c      	cmp	r4, r3
 801cf9e:	ddf4      	ble.n	801cf8a <__ieee754_pow+0x1da>
 801cfa0:	4b09      	ldr	r3, [pc, #36]	; (801cfc8 <__ieee754_pow+0x218>)
 801cfa2:	429c      	cmp	r4, r3
 801cfa4:	dd18      	ble.n	801cfd8 <__ieee754_pow+0x228>
 801cfa6:	f1b9 0f00 	cmp.w	r9, #0
 801cfaa:	dcf2      	bgt.n	801cf92 <__ieee754_pow+0x1e2>
 801cfac:	e75e      	b.n	801ce6c <__ieee754_pow+0xbc>
 801cfae:	bf00      	nop
 801cfb0:	8800759c 	.word	0x8800759c
 801cfb4:	7e37e43c 	.word	0x7e37e43c
 801cfb8:	7ff00000 	.word	0x7ff00000
 801cfbc:	08022901 	.word	0x08022901
 801cfc0:	433fffff 	.word	0x433fffff
 801cfc4:	3fefffff 	.word	0x3fefffff
 801cfc8:	3ff00000 	.word	0x3ff00000
 801cfcc:	3fe00000 	.word	0x3fe00000
 801cfd0:	41e00000 	.word	0x41e00000
 801cfd4:	3feffffe 	.word	0x3feffffe
 801cfd8:	2200      	movs	r2, #0
 801cfda:	4b63      	ldr	r3, [pc, #396]	; (801d168 <__ieee754_pow+0x3b8>)
 801cfdc:	f7e3 f95c 	bl	8000298 <__aeabi_dsub>
 801cfe0:	a355      	add	r3, pc, #340	; (adr r3, 801d138 <__ieee754_pow+0x388>)
 801cfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfe6:	4604      	mov	r4, r0
 801cfe8:	460d      	mov	r5, r1
 801cfea:	f7e3 fb09 	bl	8000600 <__aeabi_dmul>
 801cfee:	a354      	add	r3, pc, #336	; (adr r3, 801d140 <__ieee754_pow+0x390>)
 801cff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cff4:	4606      	mov	r6, r0
 801cff6:	460f      	mov	r7, r1
 801cff8:	4620      	mov	r0, r4
 801cffa:	4629      	mov	r1, r5
 801cffc:	f7e3 fb00 	bl	8000600 <__aeabi_dmul>
 801d000:	2200      	movs	r2, #0
 801d002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d006:	4b59      	ldr	r3, [pc, #356]	; (801d16c <__ieee754_pow+0x3bc>)
 801d008:	4620      	mov	r0, r4
 801d00a:	4629      	mov	r1, r5
 801d00c:	f7e3 faf8 	bl	8000600 <__aeabi_dmul>
 801d010:	4602      	mov	r2, r0
 801d012:	460b      	mov	r3, r1
 801d014:	a14c      	add	r1, pc, #304	; (adr r1, 801d148 <__ieee754_pow+0x398>)
 801d016:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d01a:	f7e3 f93d 	bl	8000298 <__aeabi_dsub>
 801d01e:	4622      	mov	r2, r4
 801d020:	462b      	mov	r3, r5
 801d022:	f7e3 faed 	bl	8000600 <__aeabi_dmul>
 801d026:	4602      	mov	r2, r0
 801d028:	460b      	mov	r3, r1
 801d02a:	2000      	movs	r0, #0
 801d02c:	4950      	ldr	r1, [pc, #320]	; (801d170 <__ieee754_pow+0x3c0>)
 801d02e:	f7e3 f933 	bl	8000298 <__aeabi_dsub>
 801d032:	4622      	mov	r2, r4
 801d034:	462b      	mov	r3, r5
 801d036:	4680      	mov	r8, r0
 801d038:	4689      	mov	r9, r1
 801d03a:	4620      	mov	r0, r4
 801d03c:	4629      	mov	r1, r5
 801d03e:	f7e3 fadf 	bl	8000600 <__aeabi_dmul>
 801d042:	4602      	mov	r2, r0
 801d044:	460b      	mov	r3, r1
 801d046:	4640      	mov	r0, r8
 801d048:	4649      	mov	r1, r9
 801d04a:	f7e3 fad9 	bl	8000600 <__aeabi_dmul>
 801d04e:	a340      	add	r3, pc, #256	; (adr r3, 801d150 <__ieee754_pow+0x3a0>)
 801d050:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d054:	f7e3 fad4 	bl	8000600 <__aeabi_dmul>
 801d058:	4602      	mov	r2, r0
 801d05a:	460b      	mov	r3, r1
 801d05c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d060:	f7e3 f91a 	bl	8000298 <__aeabi_dsub>
 801d064:	4602      	mov	r2, r0
 801d066:	460b      	mov	r3, r1
 801d068:	4604      	mov	r4, r0
 801d06a:	460d      	mov	r5, r1
 801d06c:	4630      	mov	r0, r6
 801d06e:	4639      	mov	r1, r7
 801d070:	f7e3 f914 	bl	800029c <__adddf3>
 801d074:	2000      	movs	r0, #0
 801d076:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d07a:	4632      	mov	r2, r6
 801d07c:	463b      	mov	r3, r7
 801d07e:	f7e3 f90b 	bl	8000298 <__aeabi_dsub>
 801d082:	4602      	mov	r2, r0
 801d084:	460b      	mov	r3, r1
 801d086:	4620      	mov	r0, r4
 801d088:	4629      	mov	r1, r5
 801d08a:	f7e3 f905 	bl	8000298 <__aeabi_dsub>
 801d08e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d090:	f10b 33ff 	add.w	r3, fp, #4294967295
 801d094:	4313      	orrs	r3, r2
 801d096:	4606      	mov	r6, r0
 801d098:	460f      	mov	r7, r1
 801d09a:	f040 81eb 	bne.w	801d474 <__ieee754_pow+0x6c4>
 801d09e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801d158 <__ieee754_pow+0x3a8>
 801d0a2:	e9dd 4500 	ldrd	r4, r5, [sp]
 801d0a6:	2400      	movs	r4, #0
 801d0a8:	4622      	mov	r2, r4
 801d0aa:	462b      	mov	r3, r5
 801d0ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d0b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d0b4:	f7e3 f8f0 	bl	8000298 <__aeabi_dsub>
 801d0b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d0bc:	f7e3 faa0 	bl	8000600 <__aeabi_dmul>
 801d0c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d0c4:	4680      	mov	r8, r0
 801d0c6:	4689      	mov	r9, r1
 801d0c8:	4630      	mov	r0, r6
 801d0ca:	4639      	mov	r1, r7
 801d0cc:	f7e3 fa98 	bl	8000600 <__aeabi_dmul>
 801d0d0:	4602      	mov	r2, r0
 801d0d2:	460b      	mov	r3, r1
 801d0d4:	4640      	mov	r0, r8
 801d0d6:	4649      	mov	r1, r9
 801d0d8:	f7e3 f8e0 	bl	800029c <__adddf3>
 801d0dc:	4622      	mov	r2, r4
 801d0de:	462b      	mov	r3, r5
 801d0e0:	4680      	mov	r8, r0
 801d0e2:	4689      	mov	r9, r1
 801d0e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d0e8:	f7e3 fa8a 	bl	8000600 <__aeabi_dmul>
 801d0ec:	460b      	mov	r3, r1
 801d0ee:	4604      	mov	r4, r0
 801d0f0:	460d      	mov	r5, r1
 801d0f2:	4602      	mov	r2, r0
 801d0f4:	4649      	mov	r1, r9
 801d0f6:	4640      	mov	r0, r8
 801d0f8:	e9cd 4500 	strd	r4, r5, [sp]
 801d0fc:	f7e3 f8ce 	bl	800029c <__adddf3>
 801d100:	4b1c      	ldr	r3, [pc, #112]	; (801d174 <__ieee754_pow+0x3c4>)
 801d102:	4299      	cmp	r1, r3
 801d104:	4606      	mov	r6, r0
 801d106:	460f      	mov	r7, r1
 801d108:	468b      	mov	fp, r1
 801d10a:	f340 82f7 	ble.w	801d6fc <__ieee754_pow+0x94c>
 801d10e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801d112:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801d116:	4303      	orrs	r3, r0
 801d118:	f000 81ea 	beq.w	801d4f0 <__ieee754_pow+0x740>
 801d11c:	a310      	add	r3, pc, #64	; (adr r3, 801d160 <__ieee754_pow+0x3b0>)
 801d11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d126:	f7e3 fa6b 	bl	8000600 <__aeabi_dmul>
 801d12a:	a30d      	add	r3, pc, #52	; (adr r3, 801d160 <__ieee754_pow+0x3b0>)
 801d12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d130:	e6d5      	b.n	801cede <__ieee754_pow+0x12e>
 801d132:	bf00      	nop
 801d134:	f3af 8000 	nop.w
 801d138:	60000000 	.word	0x60000000
 801d13c:	3ff71547 	.word	0x3ff71547
 801d140:	f85ddf44 	.word	0xf85ddf44
 801d144:	3e54ae0b 	.word	0x3e54ae0b
 801d148:	55555555 	.word	0x55555555
 801d14c:	3fd55555 	.word	0x3fd55555
 801d150:	652b82fe 	.word	0x652b82fe
 801d154:	3ff71547 	.word	0x3ff71547
 801d158:	00000000 	.word	0x00000000
 801d15c:	bff00000 	.word	0xbff00000
 801d160:	8800759c 	.word	0x8800759c
 801d164:	7e37e43c 	.word	0x7e37e43c
 801d168:	3ff00000 	.word	0x3ff00000
 801d16c:	3fd00000 	.word	0x3fd00000
 801d170:	3fe00000 	.word	0x3fe00000
 801d174:	408fffff 	.word	0x408fffff
 801d178:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801d17c:	f04f 0200 	mov.w	r2, #0
 801d180:	da05      	bge.n	801d18e <__ieee754_pow+0x3de>
 801d182:	4bd3      	ldr	r3, [pc, #844]	; (801d4d0 <__ieee754_pow+0x720>)
 801d184:	f7e3 fa3c 	bl	8000600 <__aeabi_dmul>
 801d188:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801d18c:	460c      	mov	r4, r1
 801d18e:	1523      	asrs	r3, r4, #20
 801d190:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d194:	4413      	add	r3, r2
 801d196:	9307      	str	r3, [sp, #28]
 801d198:	4bce      	ldr	r3, [pc, #824]	; (801d4d4 <__ieee754_pow+0x724>)
 801d19a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801d19e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801d1a2:	429c      	cmp	r4, r3
 801d1a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d1a8:	dd08      	ble.n	801d1bc <__ieee754_pow+0x40c>
 801d1aa:	4bcb      	ldr	r3, [pc, #812]	; (801d4d8 <__ieee754_pow+0x728>)
 801d1ac:	429c      	cmp	r4, r3
 801d1ae:	f340 815e 	ble.w	801d46e <__ieee754_pow+0x6be>
 801d1b2:	9b07      	ldr	r3, [sp, #28]
 801d1b4:	3301      	adds	r3, #1
 801d1b6:	9307      	str	r3, [sp, #28]
 801d1b8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801d1bc:	f04f 0a00 	mov.w	sl, #0
 801d1c0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801d1c4:	930c      	str	r3, [sp, #48]	; 0x30
 801d1c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d1c8:	4bc4      	ldr	r3, [pc, #784]	; (801d4dc <__ieee754_pow+0x72c>)
 801d1ca:	4413      	add	r3, r2
 801d1cc:	ed93 7b00 	vldr	d7, [r3]
 801d1d0:	4629      	mov	r1, r5
 801d1d2:	ec53 2b17 	vmov	r2, r3, d7
 801d1d6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801d1da:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d1de:	f7e3 f85b 	bl	8000298 <__aeabi_dsub>
 801d1e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d1e6:	4606      	mov	r6, r0
 801d1e8:	460f      	mov	r7, r1
 801d1ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d1ee:	f7e3 f855 	bl	800029c <__adddf3>
 801d1f2:	4602      	mov	r2, r0
 801d1f4:	460b      	mov	r3, r1
 801d1f6:	2000      	movs	r0, #0
 801d1f8:	49b9      	ldr	r1, [pc, #740]	; (801d4e0 <__ieee754_pow+0x730>)
 801d1fa:	f7e3 fb2b 	bl	8000854 <__aeabi_ddiv>
 801d1fe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801d202:	4602      	mov	r2, r0
 801d204:	460b      	mov	r3, r1
 801d206:	4630      	mov	r0, r6
 801d208:	4639      	mov	r1, r7
 801d20a:	f7e3 f9f9 	bl	8000600 <__aeabi_dmul>
 801d20e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d212:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801d216:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801d21a:	2300      	movs	r3, #0
 801d21c:	9302      	str	r3, [sp, #8]
 801d21e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d222:	106d      	asrs	r5, r5, #1
 801d224:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801d228:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801d22c:	2200      	movs	r2, #0
 801d22e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801d232:	4640      	mov	r0, r8
 801d234:	4649      	mov	r1, r9
 801d236:	4614      	mov	r4, r2
 801d238:	461d      	mov	r5, r3
 801d23a:	f7e3 f9e1 	bl	8000600 <__aeabi_dmul>
 801d23e:	4602      	mov	r2, r0
 801d240:	460b      	mov	r3, r1
 801d242:	4630      	mov	r0, r6
 801d244:	4639      	mov	r1, r7
 801d246:	f7e3 f827 	bl	8000298 <__aeabi_dsub>
 801d24a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d24e:	4606      	mov	r6, r0
 801d250:	460f      	mov	r7, r1
 801d252:	4620      	mov	r0, r4
 801d254:	4629      	mov	r1, r5
 801d256:	f7e3 f81f 	bl	8000298 <__aeabi_dsub>
 801d25a:	4602      	mov	r2, r0
 801d25c:	460b      	mov	r3, r1
 801d25e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d262:	f7e3 f819 	bl	8000298 <__aeabi_dsub>
 801d266:	4642      	mov	r2, r8
 801d268:	464b      	mov	r3, r9
 801d26a:	f7e3 f9c9 	bl	8000600 <__aeabi_dmul>
 801d26e:	4602      	mov	r2, r0
 801d270:	460b      	mov	r3, r1
 801d272:	4630      	mov	r0, r6
 801d274:	4639      	mov	r1, r7
 801d276:	f7e3 f80f 	bl	8000298 <__aeabi_dsub>
 801d27a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801d27e:	f7e3 f9bf 	bl	8000600 <__aeabi_dmul>
 801d282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d286:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d28a:	4610      	mov	r0, r2
 801d28c:	4619      	mov	r1, r3
 801d28e:	f7e3 f9b7 	bl	8000600 <__aeabi_dmul>
 801d292:	a37b      	add	r3, pc, #492	; (adr r3, 801d480 <__ieee754_pow+0x6d0>)
 801d294:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d298:	4604      	mov	r4, r0
 801d29a:	460d      	mov	r5, r1
 801d29c:	f7e3 f9b0 	bl	8000600 <__aeabi_dmul>
 801d2a0:	a379      	add	r3, pc, #484	; (adr r3, 801d488 <__ieee754_pow+0x6d8>)
 801d2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2a6:	f7e2 fff9 	bl	800029c <__adddf3>
 801d2aa:	4622      	mov	r2, r4
 801d2ac:	462b      	mov	r3, r5
 801d2ae:	f7e3 f9a7 	bl	8000600 <__aeabi_dmul>
 801d2b2:	a377      	add	r3, pc, #476	; (adr r3, 801d490 <__ieee754_pow+0x6e0>)
 801d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2b8:	f7e2 fff0 	bl	800029c <__adddf3>
 801d2bc:	4622      	mov	r2, r4
 801d2be:	462b      	mov	r3, r5
 801d2c0:	f7e3 f99e 	bl	8000600 <__aeabi_dmul>
 801d2c4:	a374      	add	r3, pc, #464	; (adr r3, 801d498 <__ieee754_pow+0x6e8>)
 801d2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2ca:	f7e2 ffe7 	bl	800029c <__adddf3>
 801d2ce:	4622      	mov	r2, r4
 801d2d0:	462b      	mov	r3, r5
 801d2d2:	f7e3 f995 	bl	8000600 <__aeabi_dmul>
 801d2d6:	a372      	add	r3, pc, #456	; (adr r3, 801d4a0 <__ieee754_pow+0x6f0>)
 801d2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2dc:	f7e2 ffde 	bl	800029c <__adddf3>
 801d2e0:	4622      	mov	r2, r4
 801d2e2:	462b      	mov	r3, r5
 801d2e4:	f7e3 f98c 	bl	8000600 <__aeabi_dmul>
 801d2e8:	a36f      	add	r3, pc, #444	; (adr r3, 801d4a8 <__ieee754_pow+0x6f8>)
 801d2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2ee:	f7e2 ffd5 	bl	800029c <__adddf3>
 801d2f2:	4622      	mov	r2, r4
 801d2f4:	4606      	mov	r6, r0
 801d2f6:	460f      	mov	r7, r1
 801d2f8:	462b      	mov	r3, r5
 801d2fa:	4620      	mov	r0, r4
 801d2fc:	4629      	mov	r1, r5
 801d2fe:	f7e3 f97f 	bl	8000600 <__aeabi_dmul>
 801d302:	4602      	mov	r2, r0
 801d304:	460b      	mov	r3, r1
 801d306:	4630      	mov	r0, r6
 801d308:	4639      	mov	r1, r7
 801d30a:	f7e3 f979 	bl	8000600 <__aeabi_dmul>
 801d30e:	4642      	mov	r2, r8
 801d310:	4604      	mov	r4, r0
 801d312:	460d      	mov	r5, r1
 801d314:	464b      	mov	r3, r9
 801d316:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d31a:	f7e2 ffbf 	bl	800029c <__adddf3>
 801d31e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d322:	f7e3 f96d 	bl	8000600 <__aeabi_dmul>
 801d326:	4622      	mov	r2, r4
 801d328:	462b      	mov	r3, r5
 801d32a:	f7e2 ffb7 	bl	800029c <__adddf3>
 801d32e:	4642      	mov	r2, r8
 801d330:	4606      	mov	r6, r0
 801d332:	460f      	mov	r7, r1
 801d334:	464b      	mov	r3, r9
 801d336:	4640      	mov	r0, r8
 801d338:	4649      	mov	r1, r9
 801d33a:	f7e3 f961 	bl	8000600 <__aeabi_dmul>
 801d33e:	2200      	movs	r2, #0
 801d340:	4b68      	ldr	r3, [pc, #416]	; (801d4e4 <__ieee754_pow+0x734>)
 801d342:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801d346:	f7e2 ffa9 	bl	800029c <__adddf3>
 801d34a:	4632      	mov	r2, r6
 801d34c:	463b      	mov	r3, r7
 801d34e:	f7e2 ffa5 	bl	800029c <__adddf3>
 801d352:	9802      	ldr	r0, [sp, #8]
 801d354:	460d      	mov	r5, r1
 801d356:	4604      	mov	r4, r0
 801d358:	4602      	mov	r2, r0
 801d35a:	460b      	mov	r3, r1
 801d35c:	4640      	mov	r0, r8
 801d35e:	4649      	mov	r1, r9
 801d360:	f7e3 f94e 	bl	8000600 <__aeabi_dmul>
 801d364:	2200      	movs	r2, #0
 801d366:	4680      	mov	r8, r0
 801d368:	4689      	mov	r9, r1
 801d36a:	4b5e      	ldr	r3, [pc, #376]	; (801d4e4 <__ieee754_pow+0x734>)
 801d36c:	4620      	mov	r0, r4
 801d36e:	4629      	mov	r1, r5
 801d370:	f7e2 ff92 	bl	8000298 <__aeabi_dsub>
 801d374:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d378:	f7e2 ff8e 	bl	8000298 <__aeabi_dsub>
 801d37c:	4602      	mov	r2, r0
 801d37e:	460b      	mov	r3, r1
 801d380:	4630      	mov	r0, r6
 801d382:	4639      	mov	r1, r7
 801d384:	f7e2 ff88 	bl	8000298 <__aeabi_dsub>
 801d388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d38c:	f7e3 f938 	bl	8000600 <__aeabi_dmul>
 801d390:	4622      	mov	r2, r4
 801d392:	4606      	mov	r6, r0
 801d394:	460f      	mov	r7, r1
 801d396:	462b      	mov	r3, r5
 801d398:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d39c:	f7e3 f930 	bl	8000600 <__aeabi_dmul>
 801d3a0:	4602      	mov	r2, r0
 801d3a2:	460b      	mov	r3, r1
 801d3a4:	4630      	mov	r0, r6
 801d3a6:	4639      	mov	r1, r7
 801d3a8:	f7e2 ff78 	bl	800029c <__adddf3>
 801d3ac:	4606      	mov	r6, r0
 801d3ae:	460f      	mov	r7, r1
 801d3b0:	4602      	mov	r2, r0
 801d3b2:	460b      	mov	r3, r1
 801d3b4:	4640      	mov	r0, r8
 801d3b6:	4649      	mov	r1, r9
 801d3b8:	f7e2 ff70 	bl	800029c <__adddf3>
 801d3bc:	9802      	ldr	r0, [sp, #8]
 801d3be:	a33c      	add	r3, pc, #240	; (adr r3, 801d4b0 <__ieee754_pow+0x700>)
 801d3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3c4:	4604      	mov	r4, r0
 801d3c6:	460d      	mov	r5, r1
 801d3c8:	f7e3 f91a 	bl	8000600 <__aeabi_dmul>
 801d3cc:	4642      	mov	r2, r8
 801d3ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d3d2:	464b      	mov	r3, r9
 801d3d4:	4620      	mov	r0, r4
 801d3d6:	4629      	mov	r1, r5
 801d3d8:	f7e2 ff5e 	bl	8000298 <__aeabi_dsub>
 801d3dc:	4602      	mov	r2, r0
 801d3de:	460b      	mov	r3, r1
 801d3e0:	4630      	mov	r0, r6
 801d3e2:	4639      	mov	r1, r7
 801d3e4:	f7e2 ff58 	bl	8000298 <__aeabi_dsub>
 801d3e8:	a333      	add	r3, pc, #204	; (adr r3, 801d4b8 <__ieee754_pow+0x708>)
 801d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3ee:	f7e3 f907 	bl	8000600 <__aeabi_dmul>
 801d3f2:	a333      	add	r3, pc, #204	; (adr r3, 801d4c0 <__ieee754_pow+0x710>)
 801d3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3f8:	4606      	mov	r6, r0
 801d3fa:	460f      	mov	r7, r1
 801d3fc:	4620      	mov	r0, r4
 801d3fe:	4629      	mov	r1, r5
 801d400:	f7e3 f8fe 	bl	8000600 <__aeabi_dmul>
 801d404:	4602      	mov	r2, r0
 801d406:	460b      	mov	r3, r1
 801d408:	4630      	mov	r0, r6
 801d40a:	4639      	mov	r1, r7
 801d40c:	f7e2 ff46 	bl	800029c <__adddf3>
 801d410:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d412:	4b35      	ldr	r3, [pc, #212]	; (801d4e8 <__ieee754_pow+0x738>)
 801d414:	4413      	add	r3, r2
 801d416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d41a:	f7e2 ff3f 	bl	800029c <__adddf3>
 801d41e:	4604      	mov	r4, r0
 801d420:	9807      	ldr	r0, [sp, #28]
 801d422:	460d      	mov	r5, r1
 801d424:	f7e3 f886 	bl	8000534 <__aeabi_i2d>
 801d428:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d42a:	4b30      	ldr	r3, [pc, #192]	; (801d4ec <__ieee754_pow+0x73c>)
 801d42c:	4413      	add	r3, r2
 801d42e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d432:	4606      	mov	r6, r0
 801d434:	460f      	mov	r7, r1
 801d436:	4622      	mov	r2, r4
 801d438:	462b      	mov	r3, r5
 801d43a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d43e:	f7e2 ff2d 	bl	800029c <__adddf3>
 801d442:	4642      	mov	r2, r8
 801d444:	464b      	mov	r3, r9
 801d446:	f7e2 ff29 	bl	800029c <__adddf3>
 801d44a:	4632      	mov	r2, r6
 801d44c:	463b      	mov	r3, r7
 801d44e:	f7e2 ff25 	bl	800029c <__adddf3>
 801d452:	9802      	ldr	r0, [sp, #8]
 801d454:	4632      	mov	r2, r6
 801d456:	463b      	mov	r3, r7
 801d458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d45c:	f7e2 ff1c 	bl	8000298 <__aeabi_dsub>
 801d460:	4642      	mov	r2, r8
 801d462:	464b      	mov	r3, r9
 801d464:	f7e2 ff18 	bl	8000298 <__aeabi_dsub>
 801d468:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d46c:	e607      	b.n	801d07e <__ieee754_pow+0x2ce>
 801d46e:	f04f 0a01 	mov.w	sl, #1
 801d472:	e6a5      	b.n	801d1c0 <__ieee754_pow+0x410>
 801d474:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801d4c8 <__ieee754_pow+0x718>
 801d478:	e613      	b.n	801d0a2 <__ieee754_pow+0x2f2>
 801d47a:	bf00      	nop
 801d47c:	f3af 8000 	nop.w
 801d480:	4a454eef 	.word	0x4a454eef
 801d484:	3fca7e28 	.word	0x3fca7e28
 801d488:	93c9db65 	.word	0x93c9db65
 801d48c:	3fcd864a 	.word	0x3fcd864a
 801d490:	a91d4101 	.word	0xa91d4101
 801d494:	3fd17460 	.word	0x3fd17460
 801d498:	518f264d 	.word	0x518f264d
 801d49c:	3fd55555 	.word	0x3fd55555
 801d4a0:	db6fabff 	.word	0xdb6fabff
 801d4a4:	3fdb6db6 	.word	0x3fdb6db6
 801d4a8:	33333303 	.word	0x33333303
 801d4ac:	3fe33333 	.word	0x3fe33333
 801d4b0:	e0000000 	.word	0xe0000000
 801d4b4:	3feec709 	.word	0x3feec709
 801d4b8:	dc3a03fd 	.word	0xdc3a03fd
 801d4bc:	3feec709 	.word	0x3feec709
 801d4c0:	145b01f5 	.word	0x145b01f5
 801d4c4:	be3e2fe0 	.word	0xbe3e2fe0
 801d4c8:	00000000 	.word	0x00000000
 801d4cc:	3ff00000 	.word	0x3ff00000
 801d4d0:	43400000 	.word	0x43400000
 801d4d4:	0003988e 	.word	0x0003988e
 801d4d8:	000bb679 	.word	0x000bb679
 801d4dc:	08022308 	.word	0x08022308
 801d4e0:	3ff00000 	.word	0x3ff00000
 801d4e4:	40080000 	.word	0x40080000
 801d4e8:	08022328 	.word	0x08022328
 801d4ec:	08022318 	.word	0x08022318
 801d4f0:	a3b6      	add	r3, pc, #728	; (adr r3, 801d7cc <__ieee754_pow+0xa1c>)
 801d4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4f6:	4640      	mov	r0, r8
 801d4f8:	4649      	mov	r1, r9
 801d4fa:	f7e2 fecf 	bl	800029c <__adddf3>
 801d4fe:	4622      	mov	r2, r4
 801d500:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d504:	462b      	mov	r3, r5
 801d506:	4630      	mov	r0, r6
 801d508:	4639      	mov	r1, r7
 801d50a:	f7e2 fec5 	bl	8000298 <__aeabi_dsub>
 801d50e:	4602      	mov	r2, r0
 801d510:	460b      	mov	r3, r1
 801d512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d516:	f7e3 fb03 	bl	8000b20 <__aeabi_dcmpgt>
 801d51a:	2800      	cmp	r0, #0
 801d51c:	f47f adfe 	bne.w	801d11c <__ieee754_pow+0x36c>
 801d520:	4aa5      	ldr	r2, [pc, #660]	; (801d7b8 <__ieee754_pow+0xa08>)
 801d522:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d526:	4293      	cmp	r3, r2
 801d528:	f340 810c 	ble.w	801d744 <__ieee754_pow+0x994>
 801d52c:	151b      	asrs	r3, r3, #20
 801d52e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801d532:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801d536:	fa4a f303 	asr.w	r3, sl, r3
 801d53a:	445b      	add	r3, fp
 801d53c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801d540:	4e9e      	ldr	r6, [pc, #632]	; (801d7bc <__ieee754_pow+0xa0c>)
 801d542:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801d546:	4116      	asrs	r6, r2
 801d548:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801d54c:	2000      	movs	r0, #0
 801d54e:	ea23 0106 	bic.w	r1, r3, r6
 801d552:	f1c2 0214 	rsb	r2, r2, #20
 801d556:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801d55a:	fa4a fa02 	asr.w	sl, sl, r2
 801d55e:	f1bb 0f00 	cmp.w	fp, #0
 801d562:	4602      	mov	r2, r0
 801d564:	460b      	mov	r3, r1
 801d566:	4620      	mov	r0, r4
 801d568:	4629      	mov	r1, r5
 801d56a:	bfb8      	it	lt
 801d56c:	f1ca 0a00 	rsblt	sl, sl, #0
 801d570:	f7e2 fe92 	bl	8000298 <__aeabi_dsub>
 801d574:	e9cd 0100 	strd	r0, r1, [sp]
 801d578:	4642      	mov	r2, r8
 801d57a:	464b      	mov	r3, r9
 801d57c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d580:	f7e2 fe8c 	bl	800029c <__adddf3>
 801d584:	2000      	movs	r0, #0
 801d586:	a37a      	add	r3, pc, #488	; (adr r3, 801d770 <__ieee754_pow+0x9c0>)
 801d588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d58c:	4604      	mov	r4, r0
 801d58e:	460d      	mov	r5, r1
 801d590:	f7e3 f836 	bl	8000600 <__aeabi_dmul>
 801d594:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d598:	4606      	mov	r6, r0
 801d59a:	460f      	mov	r7, r1
 801d59c:	4620      	mov	r0, r4
 801d59e:	4629      	mov	r1, r5
 801d5a0:	f7e2 fe7a 	bl	8000298 <__aeabi_dsub>
 801d5a4:	4602      	mov	r2, r0
 801d5a6:	460b      	mov	r3, r1
 801d5a8:	4640      	mov	r0, r8
 801d5aa:	4649      	mov	r1, r9
 801d5ac:	f7e2 fe74 	bl	8000298 <__aeabi_dsub>
 801d5b0:	a371      	add	r3, pc, #452	; (adr r3, 801d778 <__ieee754_pow+0x9c8>)
 801d5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5b6:	f7e3 f823 	bl	8000600 <__aeabi_dmul>
 801d5ba:	a371      	add	r3, pc, #452	; (adr r3, 801d780 <__ieee754_pow+0x9d0>)
 801d5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5c0:	4680      	mov	r8, r0
 801d5c2:	4689      	mov	r9, r1
 801d5c4:	4620      	mov	r0, r4
 801d5c6:	4629      	mov	r1, r5
 801d5c8:	f7e3 f81a 	bl	8000600 <__aeabi_dmul>
 801d5cc:	4602      	mov	r2, r0
 801d5ce:	460b      	mov	r3, r1
 801d5d0:	4640      	mov	r0, r8
 801d5d2:	4649      	mov	r1, r9
 801d5d4:	f7e2 fe62 	bl	800029c <__adddf3>
 801d5d8:	4604      	mov	r4, r0
 801d5da:	460d      	mov	r5, r1
 801d5dc:	4602      	mov	r2, r0
 801d5de:	460b      	mov	r3, r1
 801d5e0:	4630      	mov	r0, r6
 801d5e2:	4639      	mov	r1, r7
 801d5e4:	f7e2 fe5a 	bl	800029c <__adddf3>
 801d5e8:	4632      	mov	r2, r6
 801d5ea:	463b      	mov	r3, r7
 801d5ec:	4680      	mov	r8, r0
 801d5ee:	4689      	mov	r9, r1
 801d5f0:	f7e2 fe52 	bl	8000298 <__aeabi_dsub>
 801d5f4:	4602      	mov	r2, r0
 801d5f6:	460b      	mov	r3, r1
 801d5f8:	4620      	mov	r0, r4
 801d5fa:	4629      	mov	r1, r5
 801d5fc:	f7e2 fe4c 	bl	8000298 <__aeabi_dsub>
 801d600:	4642      	mov	r2, r8
 801d602:	4606      	mov	r6, r0
 801d604:	460f      	mov	r7, r1
 801d606:	464b      	mov	r3, r9
 801d608:	4640      	mov	r0, r8
 801d60a:	4649      	mov	r1, r9
 801d60c:	f7e2 fff8 	bl	8000600 <__aeabi_dmul>
 801d610:	a35d      	add	r3, pc, #372	; (adr r3, 801d788 <__ieee754_pow+0x9d8>)
 801d612:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d616:	4604      	mov	r4, r0
 801d618:	460d      	mov	r5, r1
 801d61a:	f7e2 fff1 	bl	8000600 <__aeabi_dmul>
 801d61e:	a35c      	add	r3, pc, #368	; (adr r3, 801d790 <__ieee754_pow+0x9e0>)
 801d620:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d624:	f7e2 fe38 	bl	8000298 <__aeabi_dsub>
 801d628:	4622      	mov	r2, r4
 801d62a:	462b      	mov	r3, r5
 801d62c:	f7e2 ffe8 	bl	8000600 <__aeabi_dmul>
 801d630:	a359      	add	r3, pc, #356	; (adr r3, 801d798 <__ieee754_pow+0x9e8>)
 801d632:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d636:	f7e2 fe31 	bl	800029c <__adddf3>
 801d63a:	4622      	mov	r2, r4
 801d63c:	462b      	mov	r3, r5
 801d63e:	f7e2 ffdf 	bl	8000600 <__aeabi_dmul>
 801d642:	a357      	add	r3, pc, #348	; (adr r3, 801d7a0 <__ieee754_pow+0x9f0>)
 801d644:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d648:	f7e2 fe26 	bl	8000298 <__aeabi_dsub>
 801d64c:	4622      	mov	r2, r4
 801d64e:	462b      	mov	r3, r5
 801d650:	f7e2 ffd6 	bl	8000600 <__aeabi_dmul>
 801d654:	a354      	add	r3, pc, #336	; (adr r3, 801d7a8 <__ieee754_pow+0x9f8>)
 801d656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d65a:	f7e2 fe1f 	bl	800029c <__adddf3>
 801d65e:	4622      	mov	r2, r4
 801d660:	462b      	mov	r3, r5
 801d662:	f7e2 ffcd 	bl	8000600 <__aeabi_dmul>
 801d666:	4602      	mov	r2, r0
 801d668:	460b      	mov	r3, r1
 801d66a:	4640      	mov	r0, r8
 801d66c:	4649      	mov	r1, r9
 801d66e:	f7e2 fe13 	bl	8000298 <__aeabi_dsub>
 801d672:	4604      	mov	r4, r0
 801d674:	460d      	mov	r5, r1
 801d676:	4602      	mov	r2, r0
 801d678:	460b      	mov	r3, r1
 801d67a:	4640      	mov	r0, r8
 801d67c:	4649      	mov	r1, r9
 801d67e:	f7e2 ffbf 	bl	8000600 <__aeabi_dmul>
 801d682:	2200      	movs	r2, #0
 801d684:	e9cd 0100 	strd	r0, r1, [sp]
 801d688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d68c:	4620      	mov	r0, r4
 801d68e:	4629      	mov	r1, r5
 801d690:	f7e2 fe02 	bl	8000298 <__aeabi_dsub>
 801d694:	4602      	mov	r2, r0
 801d696:	460b      	mov	r3, r1
 801d698:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d69c:	f7e3 f8da 	bl	8000854 <__aeabi_ddiv>
 801d6a0:	4632      	mov	r2, r6
 801d6a2:	4604      	mov	r4, r0
 801d6a4:	460d      	mov	r5, r1
 801d6a6:	463b      	mov	r3, r7
 801d6a8:	4640      	mov	r0, r8
 801d6aa:	4649      	mov	r1, r9
 801d6ac:	f7e2 ffa8 	bl	8000600 <__aeabi_dmul>
 801d6b0:	4632      	mov	r2, r6
 801d6b2:	463b      	mov	r3, r7
 801d6b4:	f7e2 fdf2 	bl	800029c <__adddf3>
 801d6b8:	4602      	mov	r2, r0
 801d6ba:	460b      	mov	r3, r1
 801d6bc:	4620      	mov	r0, r4
 801d6be:	4629      	mov	r1, r5
 801d6c0:	f7e2 fdea 	bl	8000298 <__aeabi_dsub>
 801d6c4:	4642      	mov	r2, r8
 801d6c6:	464b      	mov	r3, r9
 801d6c8:	f7e2 fde6 	bl	8000298 <__aeabi_dsub>
 801d6cc:	4602      	mov	r2, r0
 801d6ce:	460b      	mov	r3, r1
 801d6d0:	2000      	movs	r0, #0
 801d6d2:	493b      	ldr	r1, [pc, #236]	; (801d7c0 <__ieee754_pow+0xa10>)
 801d6d4:	f7e2 fde0 	bl	8000298 <__aeabi_dsub>
 801d6d8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801d6dc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801d6e0:	4602      	mov	r2, r0
 801d6e2:	460b      	mov	r3, r1
 801d6e4:	da31      	bge.n	801d74a <__ieee754_pow+0x99a>
 801d6e6:	4650      	mov	r0, sl
 801d6e8:	ec43 2b10 	vmov	d0, r2, r3
 801d6ec:	f001 f9c8 	bl	801ea80 <scalbn>
 801d6f0:	ec51 0b10 	vmov	r0, r1, d0
 801d6f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d6f8:	f7ff bbf1 	b.w	801cede <__ieee754_pow+0x12e>
 801d6fc:	4b31      	ldr	r3, [pc, #196]	; (801d7c4 <__ieee754_pow+0xa14>)
 801d6fe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801d702:	429e      	cmp	r6, r3
 801d704:	f77f af0c 	ble.w	801d520 <__ieee754_pow+0x770>
 801d708:	4b2f      	ldr	r3, [pc, #188]	; (801d7c8 <__ieee754_pow+0xa18>)
 801d70a:	440b      	add	r3, r1
 801d70c:	4303      	orrs	r3, r0
 801d70e:	d00b      	beq.n	801d728 <__ieee754_pow+0x978>
 801d710:	a327      	add	r3, pc, #156	; (adr r3, 801d7b0 <__ieee754_pow+0xa00>)
 801d712:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d71a:	f7e2 ff71 	bl	8000600 <__aeabi_dmul>
 801d71e:	a324      	add	r3, pc, #144	; (adr r3, 801d7b0 <__ieee754_pow+0xa00>)
 801d720:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d724:	f7ff bbdb 	b.w	801cede <__ieee754_pow+0x12e>
 801d728:	4622      	mov	r2, r4
 801d72a:	462b      	mov	r3, r5
 801d72c:	f7e2 fdb4 	bl	8000298 <__aeabi_dsub>
 801d730:	4602      	mov	r2, r0
 801d732:	460b      	mov	r3, r1
 801d734:	4640      	mov	r0, r8
 801d736:	4649      	mov	r1, r9
 801d738:	f7e3 f9de 	bl	8000af8 <__aeabi_dcmple>
 801d73c:	2800      	cmp	r0, #0
 801d73e:	f43f aeef 	beq.w	801d520 <__ieee754_pow+0x770>
 801d742:	e7e5      	b.n	801d710 <__ieee754_pow+0x960>
 801d744:	f04f 0a00 	mov.w	sl, #0
 801d748:	e716      	b.n	801d578 <__ieee754_pow+0x7c8>
 801d74a:	4621      	mov	r1, r4
 801d74c:	e7d2      	b.n	801d6f4 <__ieee754_pow+0x944>
 801d74e:	2000      	movs	r0, #0
 801d750:	491b      	ldr	r1, [pc, #108]	; (801d7c0 <__ieee754_pow+0xa10>)
 801d752:	f7ff bb8d 	b.w	801ce70 <__ieee754_pow+0xc0>
 801d756:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d75a:	f7ff bb89 	b.w	801ce70 <__ieee754_pow+0xc0>
 801d75e:	4630      	mov	r0, r6
 801d760:	4639      	mov	r1, r7
 801d762:	f7ff bb85 	b.w	801ce70 <__ieee754_pow+0xc0>
 801d766:	4693      	mov	fp, r2
 801d768:	f7ff bb96 	b.w	801ce98 <__ieee754_pow+0xe8>
 801d76c:	f3af 8000 	nop.w
 801d770:	00000000 	.word	0x00000000
 801d774:	3fe62e43 	.word	0x3fe62e43
 801d778:	fefa39ef 	.word	0xfefa39ef
 801d77c:	3fe62e42 	.word	0x3fe62e42
 801d780:	0ca86c39 	.word	0x0ca86c39
 801d784:	be205c61 	.word	0xbe205c61
 801d788:	72bea4d0 	.word	0x72bea4d0
 801d78c:	3e663769 	.word	0x3e663769
 801d790:	c5d26bf1 	.word	0xc5d26bf1
 801d794:	3ebbbd41 	.word	0x3ebbbd41
 801d798:	af25de2c 	.word	0xaf25de2c
 801d79c:	3f11566a 	.word	0x3f11566a
 801d7a0:	16bebd93 	.word	0x16bebd93
 801d7a4:	3f66c16c 	.word	0x3f66c16c
 801d7a8:	5555553e 	.word	0x5555553e
 801d7ac:	3fc55555 	.word	0x3fc55555
 801d7b0:	c2f8f359 	.word	0xc2f8f359
 801d7b4:	01a56e1f 	.word	0x01a56e1f
 801d7b8:	3fe00000 	.word	0x3fe00000
 801d7bc:	000fffff 	.word	0x000fffff
 801d7c0:	3ff00000 	.word	0x3ff00000
 801d7c4:	4090cbff 	.word	0x4090cbff
 801d7c8:	3f6f3400 	.word	0x3f6f3400
 801d7cc:	652b82fe 	.word	0x652b82fe
 801d7d0:	3c971547 	.word	0x3c971547

0801d7d4 <__ieee754_sqrt>:
 801d7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7d8:	ec55 4b10 	vmov	r4, r5, d0
 801d7dc:	4e54      	ldr	r6, [pc, #336]	; (801d930 <__ieee754_sqrt+0x15c>)
 801d7de:	43ae      	bics	r6, r5
 801d7e0:	ee10 0a10 	vmov	r0, s0
 801d7e4:	462b      	mov	r3, r5
 801d7e6:	462a      	mov	r2, r5
 801d7e8:	4621      	mov	r1, r4
 801d7ea:	d113      	bne.n	801d814 <__ieee754_sqrt+0x40>
 801d7ec:	ee10 2a10 	vmov	r2, s0
 801d7f0:	462b      	mov	r3, r5
 801d7f2:	ee10 0a10 	vmov	r0, s0
 801d7f6:	4629      	mov	r1, r5
 801d7f8:	f7e2 ff02 	bl	8000600 <__aeabi_dmul>
 801d7fc:	4602      	mov	r2, r0
 801d7fe:	460b      	mov	r3, r1
 801d800:	4620      	mov	r0, r4
 801d802:	4629      	mov	r1, r5
 801d804:	f7e2 fd4a 	bl	800029c <__adddf3>
 801d808:	4604      	mov	r4, r0
 801d80a:	460d      	mov	r5, r1
 801d80c:	ec45 4b10 	vmov	d0, r4, r5
 801d810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d814:	2d00      	cmp	r5, #0
 801d816:	dc10      	bgt.n	801d83a <__ieee754_sqrt+0x66>
 801d818:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d81c:	4330      	orrs	r0, r6
 801d81e:	d0f5      	beq.n	801d80c <__ieee754_sqrt+0x38>
 801d820:	b15d      	cbz	r5, 801d83a <__ieee754_sqrt+0x66>
 801d822:	ee10 2a10 	vmov	r2, s0
 801d826:	462b      	mov	r3, r5
 801d828:	4620      	mov	r0, r4
 801d82a:	4629      	mov	r1, r5
 801d82c:	f7e2 fd34 	bl	8000298 <__aeabi_dsub>
 801d830:	4602      	mov	r2, r0
 801d832:	460b      	mov	r3, r1
 801d834:	f7e3 f80e 	bl	8000854 <__aeabi_ddiv>
 801d838:	e7e6      	b.n	801d808 <__ieee754_sqrt+0x34>
 801d83a:	151b      	asrs	r3, r3, #20
 801d83c:	d10c      	bne.n	801d858 <__ieee754_sqrt+0x84>
 801d83e:	2a00      	cmp	r2, #0
 801d840:	d06d      	beq.n	801d91e <__ieee754_sqrt+0x14a>
 801d842:	2000      	movs	r0, #0
 801d844:	02d6      	lsls	r6, r2, #11
 801d846:	d56e      	bpl.n	801d926 <__ieee754_sqrt+0x152>
 801d848:	1e44      	subs	r4, r0, #1
 801d84a:	1b1b      	subs	r3, r3, r4
 801d84c:	f1c0 0420 	rsb	r4, r0, #32
 801d850:	fa21 f404 	lsr.w	r4, r1, r4
 801d854:	4322      	orrs	r2, r4
 801d856:	4081      	lsls	r1, r0
 801d858:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d85c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801d860:	07dd      	lsls	r5, r3, #31
 801d862:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801d866:	bf42      	ittt	mi
 801d868:	0052      	lslmi	r2, r2, #1
 801d86a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 801d86e:	0049      	lslmi	r1, r1, #1
 801d870:	1058      	asrs	r0, r3, #1
 801d872:	2500      	movs	r5, #0
 801d874:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 801d878:	441a      	add	r2, r3
 801d87a:	0049      	lsls	r1, r1, #1
 801d87c:	2316      	movs	r3, #22
 801d87e:	462c      	mov	r4, r5
 801d880:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801d884:	19a7      	adds	r7, r4, r6
 801d886:	4297      	cmp	r7, r2
 801d888:	bfde      	ittt	le
 801d88a:	1bd2      	suble	r2, r2, r7
 801d88c:	19bc      	addle	r4, r7, r6
 801d88e:	19ad      	addle	r5, r5, r6
 801d890:	0052      	lsls	r2, r2, #1
 801d892:	3b01      	subs	r3, #1
 801d894:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801d898:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d89c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d8a0:	d1f0      	bne.n	801d884 <__ieee754_sqrt+0xb0>
 801d8a2:	f04f 0e20 	mov.w	lr, #32
 801d8a6:	469c      	mov	ip, r3
 801d8a8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801d8ac:	42a2      	cmp	r2, r4
 801d8ae:	eb06 070c 	add.w	r7, r6, ip
 801d8b2:	dc02      	bgt.n	801d8ba <__ieee754_sqrt+0xe6>
 801d8b4:	d112      	bne.n	801d8dc <__ieee754_sqrt+0x108>
 801d8b6:	428f      	cmp	r7, r1
 801d8b8:	d810      	bhi.n	801d8dc <__ieee754_sqrt+0x108>
 801d8ba:	2f00      	cmp	r7, #0
 801d8bc:	eb07 0c06 	add.w	ip, r7, r6
 801d8c0:	da34      	bge.n	801d92c <__ieee754_sqrt+0x158>
 801d8c2:	f1bc 0f00 	cmp.w	ip, #0
 801d8c6:	db31      	blt.n	801d92c <__ieee754_sqrt+0x158>
 801d8c8:	f104 0801 	add.w	r8, r4, #1
 801d8cc:	1b12      	subs	r2, r2, r4
 801d8ce:	428f      	cmp	r7, r1
 801d8d0:	bf88      	it	hi
 801d8d2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d8d6:	1bc9      	subs	r1, r1, r7
 801d8d8:	4433      	add	r3, r6
 801d8da:	4644      	mov	r4, r8
 801d8dc:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 801d8e0:	f1be 0e01 	subs.w	lr, lr, #1
 801d8e4:	443a      	add	r2, r7
 801d8e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d8ea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d8ee:	d1dd      	bne.n	801d8ac <__ieee754_sqrt+0xd8>
 801d8f0:	430a      	orrs	r2, r1
 801d8f2:	d006      	beq.n	801d902 <__ieee754_sqrt+0x12e>
 801d8f4:	1c5c      	adds	r4, r3, #1
 801d8f6:	bf13      	iteet	ne
 801d8f8:	3301      	addne	r3, #1
 801d8fa:	3501      	addeq	r5, #1
 801d8fc:	4673      	moveq	r3, lr
 801d8fe:	f023 0301 	bicne.w	r3, r3, #1
 801d902:	106a      	asrs	r2, r5, #1
 801d904:	085b      	lsrs	r3, r3, #1
 801d906:	07e9      	lsls	r1, r5, #31
 801d908:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801d90c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801d910:	bf48      	it	mi
 801d912:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801d916:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801d91a:	461c      	mov	r4, r3
 801d91c:	e776      	b.n	801d80c <__ieee754_sqrt+0x38>
 801d91e:	0aca      	lsrs	r2, r1, #11
 801d920:	3b15      	subs	r3, #21
 801d922:	0549      	lsls	r1, r1, #21
 801d924:	e78b      	b.n	801d83e <__ieee754_sqrt+0x6a>
 801d926:	0052      	lsls	r2, r2, #1
 801d928:	3001      	adds	r0, #1
 801d92a:	e78b      	b.n	801d844 <__ieee754_sqrt+0x70>
 801d92c:	46a0      	mov	r8, r4
 801d92e:	e7cd      	b.n	801d8cc <__ieee754_sqrt+0xf8>
 801d930:	7ff00000 	.word	0x7ff00000

0801d934 <__ieee754_acosf>:
 801d934:	b508      	push	{r3, lr}
 801d936:	ee10 3a10 	vmov	r3, s0
 801d93a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d93e:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801d942:	ed2d 8b0c 	vpush	{d8-d13}
 801d946:	d10a      	bne.n	801d95e <__ieee754_acosf+0x2a>
 801d948:	ed9f 8a67 	vldr	s16, [pc, #412]	; 801dae8 <__ieee754_acosf+0x1b4>
 801d94c:	ed9f 0a67 	vldr	s0, [pc, #412]	; 801daec <__ieee754_acosf+0x1b8>
 801d950:	2b00      	cmp	r3, #0
 801d952:	bfd8      	it	le
 801d954:	eeb0 0a48 	vmovle.f32	s0, s16
 801d958:	ecbd 8b0c 	vpop	{d8-d13}
 801d95c:	bd08      	pop	{r3, pc}
 801d95e:	dd04      	ble.n	801d96a <__ieee754_acosf+0x36>
 801d960:	ee30 8a40 	vsub.f32	s16, s0, s0
 801d964:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801d968:	e7f6      	b.n	801d958 <__ieee754_acosf+0x24>
 801d96a:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801d96e:	da3e      	bge.n	801d9ee <__ieee754_acosf+0xba>
 801d970:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 801d974:	f340 80b5 	ble.w	801dae2 <__ieee754_acosf+0x1ae>
 801d978:	ee60 7a00 	vmul.f32	s15, s0, s0
 801d97c:	eddf 6a5c 	vldr	s13, [pc, #368]	; 801daf0 <__ieee754_acosf+0x1bc>
 801d980:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 801daf4 <__ieee754_acosf+0x1c0>
 801d984:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 801daf8 <__ieee754_acosf+0x1c4>
 801d988:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 801dafc <__ieee754_acosf+0x1c8>
 801d98c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801d990:	eddf 6a5b 	vldr	s13, [pc, #364]	; 801db00 <__ieee754_acosf+0x1cc>
 801d994:	eee7 6a87 	vfma.f32	s13, s15, s14
 801d998:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 801db04 <__ieee754_acosf+0x1d0>
 801d99c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801d9a0:	eddf 6a59 	vldr	s13, [pc, #356]	; 801db08 <__ieee754_acosf+0x1d4>
 801d9a4:	eee7 6a87 	vfma.f32	s13, s15, s14
 801d9a8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 801db0c <__ieee754_acosf+0x1d8>
 801d9ac:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801d9b0:	eddf 6a57 	vldr	s13, [pc, #348]	; 801db10 <__ieee754_acosf+0x1dc>
 801d9b4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801d9b8:	eddf 6a56 	vldr	s13, [pc, #344]	; 801db14 <__ieee754_acosf+0x1e0>
 801d9bc:	eee7 6a86 	vfma.f32	s13, s15, s12
 801d9c0:	ed9f 6a55 	vldr	s12, [pc, #340]	; 801db18 <__ieee754_acosf+0x1e4>
 801d9c4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801d9c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d9cc:	eee7 6a86 	vfma.f32	s13, s15, s12
 801d9d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d9d4:	eef0 7a66 	vmov.f32	s15, s13
 801d9d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d9dc:	eea0 8a66 	vfms.f32	s16, s0, s13
 801d9e0:	ee30 8a48 	vsub.f32	s16, s0, s16
 801d9e4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801db1c <__ieee754_acosf+0x1e8>
 801d9e8:	ee30 0a48 	vsub.f32	s0, s0, s16
 801d9ec:	e7b4      	b.n	801d958 <__ieee754_acosf+0x24>
 801d9ee:	2b00      	cmp	r3, #0
 801d9f0:	eddf da3f 	vldr	s27, [pc, #252]	; 801daf0 <__ieee754_acosf+0x1bc>
 801d9f4:	eddf ca3f 	vldr	s25, [pc, #252]	; 801daf4 <__ieee754_acosf+0x1c0>
 801d9f8:	ed9f ca41 	vldr	s24, [pc, #260]	; 801db00 <__ieee754_acosf+0x1cc>
 801d9fc:	eddf ba41 	vldr	s23, [pc, #260]	; 801db04 <__ieee754_acosf+0x1d0>
 801da00:	ed9f ba41 	vldr	s22, [pc, #260]	; 801db08 <__ieee754_acosf+0x1d4>
 801da04:	eddf 8a41 	vldr	s17, [pc, #260]	; 801db0c <__ieee754_acosf+0x1d8>
 801da08:	ed9f da41 	vldr	s26, [pc, #260]	; 801db10 <__ieee754_acosf+0x1dc>
 801da0c:	eddf aa3a 	vldr	s21, [pc, #232]	; 801daf8 <__ieee754_acosf+0x1c4>
 801da10:	ed9f aa40 	vldr	s20, [pc, #256]	; 801db14 <__ieee754_acosf+0x1e0>
 801da14:	eddf 9a40 	vldr	s19, [pc, #256]	; 801db18 <__ieee754_acosf+0x1e4>
 801da18:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801da1c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801da20:	da28      	bge.n	801da74 <__ieee754_acosf+0x140>
 801da22:	ee30 0a09 	vadd.f32	s0, s0, s18
 801da26:	ee20 0a27 	vmul.f32	s0, s0, s15
 801da2a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801da2e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801da32:	eea0 ca2c 	vfma.f32	s24, s0, s25
 801da36:	eea0 aa2a 	vfma.f32	s20, s0, s21
 801da3a:	eee0 ba0c 	vfma.f32	s23, s0, s24
 801da3e:	eee0 9a0a 	vfma.f32	s19, s0, s20
 801da42:	eea0 ba2b 	vfma.f32	s22, s0, s23
 801da46:	eea0 9a29 	vfma.f32	s18, s0, s19
 801da4a:	eee0 8a0b 	vfma.f32	s17, s0, s22
 801da4e:	ee68 8a80 	vmul.f32	s17, s17, s0
 801da52:	f000 f997 	bl	801dd84 <__ieee754_sqrtf>
 801da56:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801da5a:	eddf 7a31 	vldr	s15, [pc, #196]	; 801db20 <__ieee754_acosf+0x1ec>
 801da5e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801da62:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801da66:	ee77 7a80 	vadd.f32	s15, s15, s0
 801da6a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 801db24 <__ieee754_acosf+0x1f0>
 801da6e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801da72:	e771      	b.n	801d958 <__ieee754_acosf+0x24>
 801da74:	ee39 8a40 	vsub.f32	s16, s18, s0
 801da78:	ee28 8a27 	vmul.f32	s16, s16, s15
 801da7c:	eeb0 0a48 	vmov.f32	s0, s16
 801da80:	f000 f980 	bl	801dd84 <__ieee754_sqrtf>
 801da84:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801da88:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801da8c:	eea8 ca2c 	vfma.f32	s24, s16, s25
 801da90:	eea8 aa2a 	vfma.f32	s20, s16, s21
 801da94:	eee8 ba0c 	vfma.f32	s23, s16, s24
 801da98:	ee10 3a10 	vmov	r3, s0
 801da9c:	eea8 ba2b 	vfma.f32	s22, s16, s23
 801daa0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801daa4:	f023 030f 	bic.w	r3, r3, #15
 801daa8:	eee8 9a0a 	vfma.f32	s19, s16, s20
 801daac:	ee07 3a90 	vmov	s15, r3
 801dab0:	eee8 8a0b 	vfma.f32	s17, s16, s22
 801dab4:	eeb0 6a48 	vmov.f32	s12, s16
 801dab8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801dabc:	eea8 9a29 	vfma.f32	s18, s16, s19
 801dac0:	ee77 6a80 	vadd.f32	s13, s15, s0
 801dac4:	ee68 8a88 	vmul.f32	s17, s17, s16
 801dac8:	eeb0 7a40 	vmov.f32	s14, s0
 801dacc:	ee86 0a26 	vdiv.f32	s0, s12, s13
 801dad0:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801dad4:	eea7 0a26 	vfma.f32	s0, s14, s13
 801dad8:	ee30 0a27 	vadd.f32	s0, s0, s15
 801dadc:	ee30 0a00 	vadd.f32	s0, s0, s0
 801dae0:	e73a      	b.n	801d958 <__ieee754_acosf+0x24>
 801dae2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801db28 <__ieee754_acosf+0x1f4>
 801dae6:	e737      	b.n	801d958 <__ieee754_acosf+0x24>
 801dae8:	40490fdb 	.word	0x40490fdb
 801daec:	00000000 	.word	0x00000000
 801daf0:	3811ef08 	.word	0x3811ef08
 801daf4:	3a4f7f04 	.word	0x3a4f7f04
 801daf8:	bf303361 	.word	0xbf303361
 801dafc:	33a22168 	.word	0x33a22168
 801db00:	bd241146 	.word	0xbd241146
 801db04:	3e4e0aa8 	.word	0x3e4e0aa8
 801db08:	bea6b090 	.word	0xbea6b090
 801db0c:	3e2aaaab 	.word	0x3e2aaaab
 801db10:	3d9dc62e 	.word	0x3d9dc62e
 801db14:	4001572d 	.word	0x4001572d
 801db18:	c019d139 	.word	0xc019d139
 801db1c:	3fc90fda 	.word	0x3fc90fda
 801db20:	b3a22168 	.word	0xb3a22168
 801db24:	40490fda 	.word	0x40490fda
 801db28:	3fc90fdb 	.word	0x3fc90fdb

0801db2c <__ieee754_rem_pio2f>:
 801db2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db2e:	ee10 6a10 	vmov	r6, s0
 801db32:	4b86      	ldr	r3, [pc, #536]	; (801dd4c <__ieee754_rem_pio2f+0x220>)
 801db34:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 801db38:	429c      	cmp	r4, r3
 801db3a:	b087      	sub	sp, #28
 801db3c:	4605      	mov	r5, r0
 801db3e:	dc05      	bgt.n	801db4c <__ieee754_rem_pio2f+0x20>
 801db40:	2300      	movs	r3, #0
 801db42:	ed85 0a00 	vstr	s0, [r5]
 801db46:	6043      	str	r3, [r0, #4]
 801db48:	2000      	movs	r0, #0
 801db4a:	e020      	b.n	801db8e <__ieee754_rem_pio2f+0x62>
 801db4c:	4b80      	ldr	r3, [pc, #512]	; (801dd50 <__ieee754_rem_pio2f+0x224>)
 801db4e:	429c      	cmp	r4, r3
 801db50:	dc38      	bgt.n	801dbc4 <__ieee754_rem_pio2f+0x98>
 801db52:	2e00      	cmp	r6, #0
 801db54:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801dd54 <__ieee754_rem_pio2f+0x228>
 801db58:	4b7f      	ldr	r3, [pc, #508]	; (801dd58 <__ieee754_rem_pio2f+0x22c>)
 801db5a:	f024 040f 	bic.w	r4, r4, #15
 801db5e:	dd18      	ble.n	801db92 <__ieee754_rem_pio2f+0x66>
 801db60:	429c      	cmp	r4, r3
 801db62:	ee70 7a47 	vsub.f32	s15, s0, s14
 801db66:	bf09      	itett	eq
 801db68:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801dd5c <__ieee754_rem_pio2f+0x230>
 801db6c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801dd60 <__ieee754_rem_pio2f+0x234>
 801db70:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801db74:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801dd64 <__ieee754_rem_pio2f+0x238>
 801db78:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801db7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801db80:	edc0 6a00 	vstr	s13, [r0]
 801db84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801db88:	edc0 7a01 	vstr	s15, [r0, #4]
 801db8c:	2001      	movs	r0, #1
 801db8e:	b007      	add	sp, #28
 801db90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db92:	429c      	cmp	r4, r3
 801db94:	ee70 7a07 	vadd.f32	s15, s0, s14
 801db98:	bf09      	itett	eq
 801db9a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801dd5c <__ieee754_rem_pio2f+0x230>
 801db9e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801dd60 <__ieee754_rem_pio2f+0x234>
 801dba2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801dba6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801dd64 <__ieee754_rem_pio2f+0x238>
 801dbaa:	ee77 6a87 	vadd.f32	s13, s15, s14
 801dbae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801dbb2:	edc0 6a00 	vstr	s13, [r0]
 801dbb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dbba:	edc0 7a01 	vstr	s15, [r0, #4]
 801dbbe:	f04f 30ff 	mov.w	r0, #4294967295
 801dbc2:	e7e4      	b.n	801db8e <__ieee754_rem_pio2f+0x62>
 801dbc4:	4b68      	ldr	r3, [pc, #416]	; (801dd68 <__ieee754_rem_pio2f+0x23c>)
 801dbc6:	429c      	cmp	r4, r3
 801dbc8:	dc71      	bgt.n	801dcae <__ieee754_rem_pio2f+0x182>
 801dbca:	f000 ffd3 	bl	801eb74 <fabsf>
 801dbce:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801dd6c <__ieee754_rem_pio2f+0x240>
 801dbd2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801dbd6:	eee0 7a07 	vfma.f32	s15, s0, s14
 801dbda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dbde:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801dbe2:	ee17 0a90 	vmov	r0, s15
 801dbe6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801dd54 <__ieee754_rem_pio2f+0x228>
 801dbea:	eeb1 7a46 	vneg.f32	s14, s12
 801dbee:	eea7 0a27 	vfma.f32	s0, s14, s15
 801dbf2:	281f      	cmp	r0, #31
 801dbf4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801dd60 <__ieee754_rem_pio2f+0x234>
 801dbf8:	ee66 7a27 	vmul.f32	s15, s12, s15
 801dbfc:	ee70 6a67 	vsub.f32	s13, s0, s15
 801dc00:	ee16 3a90 	vmov	r3, s13
 801dc04:	dc1c      	bgt.n	801dc40 <__ieee754_rem_pio2f+0x114>
 801dc06:	1e47      	subs	r7, r0, #1
 801dc08:	4959      	ldr	r1, [pc, #356]	; (801dd70 <__ieee754_rem_pio2f+0x244>)
 801dc0a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801dc0e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 801dc12:	428a      	cmp	r2, r1
 801dc14:	d014      	beq.n	801dc40 <__ieee754_rem_pio2f+0x114>
 801dc16:	602b      	str	r3, [r5, #0]
 801dc18:	ed95 7a00 	vldr	s14, [r5]
 801dc1c:	ee30 0a47 	vsub.f32	s0, s0, s14
 801dc20:	2e00      	cmp	r6, #0
 801dc22:	ee30 0a67 	vsub.f32	s0, s0, s15
 801dc26:	ed85 0a01 	vstr	s0, [r5, #4]
 801dc2a:	dab0      	bge.n	801db8e <__ieee754_rem_pio2f+0x62>
 801dc2c:	eeb1 7a47 	vneg.f32	s14, s14
 801dc30:	eeb1 0a40 	vneg.f32	s0, s0
 801dc34:	ed85 7a00 	vstr	s14, [r5]
 801dc38:	ed85 0a01 	vstr	s0, [r5, #4]
 801dc3c:	4240      	negs	r0, r0
 801dc3e:	e7a6      	b.n	801db8e <__ieee754_rem_pio2f+0x62>
 801dc40:	15e4      	asrs	r4, r4, #23
 801dc42:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801dc46:	1aa2      	subs	r2, r4, r2
 801dc48:	2a08      	cmp	r2, #8
 801dc4a:	dde4      	ble.n	801dc16 <__ieee754_rem_pio2f+0xea>
 801dc4c:	eddf 7a43 	vldr	s15, [pc, #268]	; 801dd5c <__ieee754_rem_pio2f+0x230>
 801dc50:	eef0 6a40 	vmov.f32	s13, s0
 801dc54:	eee7 6a27 	vfma.f32	s13, s14, s15
 801dc58:	ee30 0a66 	vsub.f32	s0, s0, s13
 801dc5c:	eea7 0a27 	vfma.f32	s0, s14, s15
 801dc60:	eddf 7a40 	vldr	s15, [pc, #256]	; 801dd64 <__ieee754_rem_pio2f+0x238>
 801dc64:	ee96 0a27 	vfnms.f32	s0, s12, s15
 801dc68:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801dc6c:	eef0 7a40 	vmov.f32	s15, s0
 801dc70:	ee15 3a90 	vmov	r3, s11
 801dc74:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801dc78:	1aa4      	subs	r4, r4, r2
 801dc7a:	2c19      	cmp	r4, #25
 801dc7c:	dc04      	bgt.n	801dc88 <__ieee754_rem_pio2f+0x15c>
 801dc7e:	edc5 5a00 	vstr	s11, [r5]
 801dc82:	eeb0 0a66 	vmov.f32	s0, s13
 801dc86:	e7c7      	b.n	801dc18 <__ieee754_rem_pio2f+0xec>
 801dc88:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801dd74 <__ieee754_rem_pio2f+0x248>
 801dc8c:	eeb0 0a66 	vmov.f32	s0, s13
 801dc90:	eea7 0a25 	vfma.f32	s0, s14, s11
 801dc94:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801dc98:	eee7 7a25 	vfma.f32	s15, s14, s11
 801dc9c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801dd78 <__ieee754_rem_pio2f+0x24c>
 801dca0:	eed6 7a07 	vfnms.f32	s15, s12, s14
 801dca4:	ee30 7a67 	vsub.f32	s14, s0, s15
 801dca8:	ed85 7a00 	vstr	s14, [r5]
 801dcac:	e7b4      	b.n	801dc18 <__ieee754_rem_pio2f+0xec>
 801dcae:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801dcb2:	db06      	blt.n	801dcc2 <__ieee754_rem_pio2f+0x196>
 801dcb4:	ee70 7a40 	vsub.f32	s15, s0, s0
 801dcb8:	edc0 7a01 	vstr	s15, [r0, #4]
 801dcbc:	edc0 7a00 	vstr	s15, [r0]
 801dcc0:	e742      	b.n	801db48 <__ieee754_rem_pio2f+0x1c>
 801dcc2:	15e2      	asrs	r2, r4, #23
 801dcc4:	3a86      	subs	r2, #134	; 0x86
 801dcc6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 801dcca:	ee07 3a90 	vmov	s15, r3
 801dcce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801dcd2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801dd7c <__ieee754_rem_pio2f+0x250>
 801dcd6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dcda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dcde:	ed8d 7a03 	vstr	s14, [sp, #12]
 801dce2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dce6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801dcea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dcee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dcf2:	ed8d 7a04 	vstr	s14, [sp, #16]
 801dcf6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dcfa:	eef5 7a40 	vcmp.f32	s15, #0.0
 801dcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd02:	edcd 7a05 	vstr	s15, [sp, #20]
 801dd06:	d11e      	bne.n	801dd46 <__ieee754_rem_pio2f+0x21a>
 801dd08:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801dd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd10:	bf14      	ite	ne
 801dd12:	2302      	movne	r3, #2
 801dd14:	2301      	moveq	r3, #1
 801dd16:	491a      	ldr	r1, [pc, #104]	; (801dd80 <__ieee754_rem_pio2f+0x254>)
 801dd18:	9101      	str	r1, [sp, #4]
 801dd1a:	2102      	movs	r1, #2
 801dd1c:	9100      	str	r1, [sp, #0]
 801dd1e:	a803      	add	r0, sp, #12
 801dd20:	4629      	mov	r1, r5
 801dd22:	f000 f8d5 	bl	801ded0 <__kernel_rem_pio2f>
 801dd26:	2e00      	cmp	r6, #0
 801dd28:	f6bf af31 	bge.w	801db8e <__ieee754_rem_pio2f+0x62>
 801dd2c:	edd5 7a00 	vldr	s15, [r5]
 801dd30:	eef1 7a67 	vneg.f32	s15, s15
 801dd34:	edc5 7a00 	vstr	s15, [r5]
 801dd38:	edd5 7a01 	vldr	s15, [r5, #4]
 801dd3c:	eef1 7a67 	vneg.f32	s15, s15
 801dd40:	edc5 7a01 	vstr	s15, [r5, #4]
 801dd44:	e77a      	b.n	801dc3c <__ieee754_rem_pio2f+0x110>
 801dd46:	2303      	movs	r3, #3
 801dd48:	e7e5      	b.n	801dd16 <__ieee754_rem_pio2f+0x1ea>
 801dd4a:	bf00      	nop
 801dd4c:	3f490fd8 	.word	0x3f490fd8
 801dd50:	4016cbe3 	.word	0x4016cbe3
 801dd54:	3fc90f80 	.word	0x3fc90f80
 801dd58:	3fc90fd0 	.word	0x3fc90fd0
 801dd5c:	37354400 	.word	0x37354400
 801dd60:	37354443 	.word	0x37354443
 801dd64:	2e85a308 	.word	0x2e85a308
 801dd68:	43490f80 	.word	0x43490f80
 801dd6c:	3f22f984 	.word	0x3f22f984
 801dd70:	08022338 	.word	0x08022338
 801dd74:	2e85a300 	.word	0x2e85a300
 801dd78:	248d3132 	.word	0x248d3132
 801dd7c:	43800000 	.word	0x43800000
 801dd80:	080223b8 	.word	0x080223b8

0801dd84 <__ieee754_sqrtf>:
 801dd84:	ee10 2a10 	vmov	r2, s0
 801dd88:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801dd8c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801dd90:	b570      	push	{r4, r5, r6, lr}
 801dd92:	d302      	bcc.n	801dd9a <__ieee754_sqrtf+0x16>
 801dd94:	eea0 0a00 	vfma.f32	s0, s0, s0
 801dd98:	bd70      	pop	{r4, r5, r6, pc}
 801dd9a:	b3b1      	cbz	r1, 801de0a <__ieee754_sqrtf+0x86>
 801dd9c:	2a00      	cmp	r2, #0
 801dd9e:	da04      	bge.n	801ddaa <__ieee754_sqrtf+0x26>
 801dda0:	ee70 7a40 	vsub.f32	s15, s0, s0
 801dda4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801dda8:	bd70      	pop	{r4, r5, r6, pc}
 801ddaa:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801ddae:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801ddb2:	d204      	bcs.n	801ddbe <__ieee754_sqrtf+0x3a>
 801ddb4:	2100      	movs	r1, #0
 801ddb6:	0210      	lsls	r0, r2, #8
 801ddb8:	d528      	bpl.n	801de0c <__ieee754_sqrtf+0x88>
 801ddba:	3901      	subs	r1, #1
 801ddbc:	1a5b      	subs	r3, r3, r1
 801ddbe:	3b7f      	subs	r3, #127	; 0x7f
 801ddc0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801ddc4:	07d9      	lsls	r1, r3, #31
 801ddc6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 801ddca:	bf48      	it	mi
 801ddcc:	0052      	lslmi	r2, r2, #1
 801ddce:	1059      	asrs	r1, r3, #1
 801ddd0:	2300      	movs	r3, #0
 801ddd2:	0052      	lsls	r2, r2, #1
 801ddd4:	2419      	movs	r4, #25
 801ddd6:	461e      	mov	r6, r3
 801ddd8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801dddc:	1835      	adds	r5, r6, r0
 801ddde:	4295      	cmp	r5, r2
 801dde0:	bfde      	ittt	le
 801dde2:	182e      	addle	r6, r5, r0
 801dde4:	1b52      	suble	r2, r2, r5
 801dde6:	181b      	addle	r3, r3, r0
 801dde8:	3c01      	subs	r4, #1
 801ddea:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801ddee:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801ddf2:	d1f3      	bne.n	801dddc <__ieee754_sqrtf+0x58>
 801ddf4:	b112      	cbz	r2, 801ddfc <__ieee754_sqrtf+0x78>
 801ddf6:	3301      	adds	r3, #1
 801ddf8:	f023 0301 	bic.w	r3, r3, #1
 801ddfc:	105b      	asrs	r3, r3, #1
 801ddfe:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 801de02:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 801de06:	ee00 3a10 	vmov	s0, r3
 801de0a:	bd70      	pop	{r4, r5, r6, pc}
 801de0c:	0052      	lsls	r2, r2, #1
 801de0e:	3101      	adds	r1, #1
 801de10:	e7d1      	b.n	801ddb6 <__ieee754_sqrtf+0x32>
	...

0801de14 <__kernel_cosf>:
 801de14:	ee10 3a10 	vmov	r3, s0
 801de18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801de1c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801de20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801de24:	da05      	bge.n	801de32 <__kernel_cosf+0x1e>
 801de26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801de2a:	ee17 2a90 	vmov	r2, s15
 801de2e:	2a00      	cmp	r2, #0
 801de30:	d03b      	beq.n	801deaa <__kernel_cosf+0x96>
 801de32:	ee20 7a00 	vmul.f32	s14, s0, s0
 801de36:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801deb0 <__kernel_cosf+0x9c>
 801de3a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801deb4 <__kernel_cosf+0xa0>
 801de3e:	eddf 5a1e 	vldr	s11, [pc, #120]	; 801deb8 <__kernel_cosf+0xa4>
 801de42:	4a1e      	ldr	r2, [pc, #120]	; (801debc <__kernel_cosf+0xa8>)
 801de44:	eea7 6a27 	vfma.f32	s12, s14, s15
 801de48:	4293      	cmp	r3, r2
 801de4a:	ee60 0a20 	vmul.f32	s1, s0, s1
 801de4e:	eee7 5a06 	vfma.f32	s11, s14, s12
 801de52:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 801dec0 <__kernel_cosf+0xac>
 801de56:	eea7 6a25 	vfma.f32	s12, s14, s11
 801de5a:	eddf 5a1a 	vldr	s11, [pc, #104]	; 801dec4 <__kernel_cosf+0xb0>
 801de5e:	eee7 5a06 	vfma.f32	s11, s14, s12
 801de62:	ed9f 6a19 	vldr	s12, [pc, #100]	; 801dec8 <__kernel_cosf+0xb4>
 801de66:	eea7 6a25 	vfma.f32	s12, s14, s11
 801de6a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801de6e:	ee26 6a07 	vmul.f32	s12, s12, s14
 801de72:	dc06      	bgt.n	801de82 <__kernel_cosf+0x6e>
 801de74:	eed7 0a06 	vfnms.f32	s1, s14, s12
 801de78:	eed7 0a25 	vfnms.f32	s1, s14, s11
 801de7c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 801de80:	4770      	bx	lr
 801de82:	4a12      	ldr	r2, [pc, #72]	; (801decc <__kernel_cosf+0xb8>)
 801de84:	4293      	cmp	r3, r2
 801de86:	bfda      	itte	le
 801de88:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801de8c:	ee07 3a90 	vmovle	s15, r3
 801de90:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 801de94:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801de98:	eed7 0a06 	vfnms.f32	s1, s14, s12
 801de9c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801dea0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801dea4:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801dea8:	4770      	bx	lr
 801deaa:	eeb0 0a66 	vmov.f32	s0, s13
 801deae:	4770      	bx	lr
 801deb0:	310f74f6 	.word	0x310f74f6
 801deb4:	ad47d74e 	.word	0xad47d74e
 801deb8:	b493f27c 	.word	0xb493f27c
 801debc:	3e999999 	.word	0x3e999999
 801dec0:	37d00d01 	.word	0x37d00d01
 801dec4:	bab60b61 	.word	0xbab60b61
 801dec8:	3d2aaaab 	.word	0x3d2aaaab
 801decc:	3f480000 	.word	0x3f480000

0801ded0 <__kernel_rem_pio2f>:
 801ded0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ded4:	ed2d 8b04 	vpush	{d8-d9}
 801ded8:	b0d7      	sub	sp, #348	; 0x15c
 801deda:	468b      	mov	fp, r1
 801dedc:	9301      	str	r3, [sp, #4]
 801dede:	9964      	ldr	r1, [sp, #400]	; 0x190
 801dee0:	4bcb      	ldr	r3, [pc, #812]	; (801e210 <__kernel_rem_pio2f+0x340>)
 801dee2:	9002      	str	r0, [sp, #8]
 801dee4:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 801dee8:	9b01      	ldr	r3, [sp, #4]
 801deea:	9e65      	ldr	r6, [sp, #404]	; 0x194
 801deec:	ed9f 7acc 	vldr	s14, [pc, #816]	; 801e220 <__kernel_rem_pio2f+0x350>
 801def0:	3b01      	subs	r3, #1
 801def2:	1ed0      	subs	r0, r2, #3
 801def4:	2408      	movs	r4, #8
 801def6:	fb90 f0f4 	sdiv	r0, r0, r4
 801defa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801defe:	1c45      	adds	r5, r0, #1
 801df00:	1ac7      	subs	r7, r0, r3
 801df02:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801df06:	eb0a 0e03 	add.w	lr, sl, r3
 801df0a:	ac1a      	add	r4, sp, #104	; 0x68
 801df0c:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 801df10:	2200      	movs	r2, #0
 801df12:	4572      	cmp	r2, lr
 801df14:	dd0f      	ble.n	801df36 <__kernel_rem_pio2f+0x66>
 801df16:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 801df1a:	2400      	movs	r4, #0
 801df1c:	4554      	cmp	r4, sl
 801df1e:	dc26      	bgt.n	801df6e <__kernel_rem_pio2f+0x9e>
 801df20:	9a01      	ldr	r2, [sp, #4]
 801df22:	9f02      	ldr	r7, [sp, #8]
 801df24:	eddf 7abe 	vldr	s15, [pc, #760]	; 801e220 <__kernel_rem_pio2f+0x350>
 801df28:	4422      	add	r2, r4
 801df2a:	a91a      	add	r1, sp, #104	; 0x68
 801df2c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801df30:	f04f 0c00 	mov.w	ip, #0
 801df34:	e015      	b.n	801df62 <__kernel_rem_pio2f+0x92>
 801df36:	42d7      	cmn	r7, r2
 801df38:	bf5d      	ittte	pl
 801df3a:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 801df3e:	ee07 1a90 	vmovpl	s15, r1
 801df42:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801df46:	eef0 7a47 	vmovmi.f32	s15, s14
 801df4a:	ece4 7a01 	vstmia	r4!, {s15}
 801df4e:	3201      	adds	r2, #1
 801df50:	e7df      	b.n	801df12 <__kernel_rem_pio2f+0x42>
 801df52:	ecf7 6a01 	vldmia	r7!, {s13}
 801df56:	ed32 7a01 	vldmdb	r2!, {s14}
 801df5a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801df5e:	f10c 0c01 	add.w	ip, ip, #1
 801df62:	459c      	cmp	ip, r3
 801df64:	ddf5      	ble.n	801df52 <__kernel_rem_pio2f+0x82>
 801df66:	ecee 7a01 	vstmia	lr!, {s15}
 801df6a:	3401      	adds	r4, #1
 801df6c:	e7d6      	b.n	801df1c <__kernel_rem_pio2f+0x4c>
 801df6e:	aa06      	add	r2, sp, #24
 801df70:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801df74:	9204      	str	r2, [sp, #16]
 801df76:	eddf 8aa7 	vldr	s17, [pc, #668]	; 801e214 <__kernel_rem_pio2f+0x344>
 801df7a:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 801e218 <__kernel_rem_pio2f+0x348>
 801df7e:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 801df82:	9203      	str	r2, [sp, #12]
 801df84:	4657      	mov	r7, sl
 801df86:	aa56      	add	r2, sp, #344	; 0x158
 801df88:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 801df8c:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 801df90:	f108 38ff 	add.w	r8, r8, #4294967295
 801df94:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 801df98:	ea4f 0888 	mov.w	r8, r8, lsl #2
 801df9c:	aa56      	add	r2, sp, #344	; 0x158
 801df9e:	eb02 0008 	add.w	r0, r2, r8
 801dfa2:	384c      	subs	r0, #76	; 0x4c
 801dfa4:	2200      	movs	r2, #0
 801dfa6:	1abc      	subs	r4, r7, r2
 801dfa8:	2c00      	cmp	r4, #0
 801dfaa:	dc4a      	bgt.n	801e042 <__kernel_rem_pio2f+0x172>
 801dfac:	4628      	mov	r0, r5
 801dfae:	9305      	str	r3, [sp, #20]
 801dfb0:	f000 fe2a 	bl	801ec08 <scalbnf>
 801dfb4:	eeb0 8a40 	vmov.f32	s16, s0
 801dfb8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801dfbc:	ee28 0a00 	vmul.f32	s0, s16, s0
 801dfc0:	f000 fde0 	bl	801eb84 <floorf>
 801dfc4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801dfc8:	eea0 8a67 	vfms.f32	s16, s0, s15
 801dfcc:	2d00      	cmp	r5, #0
 801dfce:	9b05      	ldr	r3, [sp, #20]
 801dfd0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801dfd4:	ee17 9a90 	vmov	r9, s15
 801dfd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dfdc:	ee38 8a67 	vsub.f32	s16, s16, s15
 801dfe0:	dd44      	ble.n	801e06c <__kernel_rem_pio2f+0x19c>
 801dfe2:	1e78      	subs	r0, r7, #1
 801dfe4:	aa06      	add	r2, sp, #24
 801dfe6:	f1c5 0408 	rsb	r4, r5, #8
 801dfea:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801dfee:	fa46 f204 	asr.w	r2, r6, r4
 801dff2:	4491      	add	r9, r2
 801dff4:	40a2      	lsls	r2, r4
 801dff6:	1ab6      	subs	r6, r6, r2
 801dff8:	aa06      	add	r2, sp, #24
 801dffa:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801dffe:	f1c5 0207 	rsb	r2, r5, #7
 801e002:	4116      	asrs	r6, r2
 801e004:	2e00      	cmp	r6, #0
 801e006:	dd40      	ble.n	801e08a <__kernel_rem_pio2f+0x1ba>
 801e008:	2400      	movs	r4, #0
 801e00a:	f109 0901 	add.w	r9, r9, #1
 801e00e:	4620      	mov	r0, r4
 801e010:	42a7      	cmp	r7, r4
 801e012:	dc75      	bgt.n	801e100 <__kernel_rem_pio2f+0x230>
 801e014:	2d00      	cmp	r5, #0
 801e016:	dd05      	ble.n	801e024 <__kernel_rem_pio2f+0x154>
 801e018:	2d01      	cmp	r5, #1
 801e01a:	f000 8086 	beq.w	801e12a <__kernel_rem_pio2f+0x25a>
 801e01e:	2d02      	cmp	r5, #2
 801e020:	f000 808d 	beq.w	801e13e <__kernel_rem_pio2f+0x26e>
 801e024:	2e02      	cmp	r6, #2
 801e026:	d130      	bne.n	801e08a <__kernel_rem_pio2f+0x1ba>
 801e028:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e02c:	ee30 8a48 	vsub.f32	s16, s0, s16
 801e030:	b358      	cbz	r0, 801e08a <__kernel_rem_pio2f+0x1ba>
 801e032:	4628      	mov	r0, r5
 801e034:	9305      	str	r3, [sp, #20]
 801e036:	f000 fde7 	bl	801ec08 <scalbnf>
 801e03a:	9b05      	ldr	r3, [sp, #20]
 801e03c:	ee38 8a40 	vsub.f32	s16, s16, s0
 801e040:	e023      	b.n	801e08a <__kernel_rem_pio2f+0x1ba>
 801e042:	ee60 7a28 	vmul.f32	s15, s0, s17
 801e046:	ac06      	add	r4, sp, #24
 801e048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e04c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e050:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801e054:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e058:	ee10 1a10 	vmov	r1, s0
 801e05c:	ed30 0a01 	vldmdb	r0!, {s0}
 801e060:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801e064:	ee37 0a80 	vadd.f32	s0, s15, s0
 801e068:	3201      	adds	r2, #1
 801e06a:	e79c      	b.n	801dfa6 <__kernel_rem_pio2f+0xd6>
 801e06c:	d105      	bne.n	801e07a <__kernel_rem_pio2f+0x1aa>
 801e06e:	1e7a      	subs	r2, r7, #1
 801e070:	a906      	add	r1, sp, #24
 801e072:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801e076:	1236      	asrs	r6, r6, #8
 801e078:	e7c4      	b.n	801e004 <__kernel_rem_pio2f+0x134>
 801e07a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e07e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e086:	da39      	bge.n	801e0fc <__kernel_rem_pio2f+0x22c>
 801e088:	2600      	movs	r6, #0
 801e08a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801e08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e092:	f040 808d 	bne.w	801e1b0 <__kernel_rem_pio2f+0x2e0>
 801e096:	1e7c      	subs	r4, r7, #1
 801e098:	4620      	mov	r0, r4
 801e09a:	2200      	movs	r2, #0
 801e09c:	4550      	cmp	r0, sl
 801e09e:	da55      	bge.n	801e14c <__kernel_rem_pio2f+0x27c>
 801e0a0:	2a00      	cmp	r2, #0
 801e0a2:	d164      	bne.n	801e16e <__kernel_rem_pio2f+0x29e>
 801e0a4:	2401      	movs	r4, #1
 801e0a6:	f06f 0003 	mvn.w	r0, #3
 801e0aa:	fb00 f204 	mul.w	r2, r0, r4
 801e0ae:	9904      	ldr	r1, [sp, #16]
 801e0b0:	588a      	ldr	r2, [r1, r2]
 801e0b2:	2a00      	cmp	r2, #0
 801e0b4:	d050      	beq.n	801e158 <__kernel_rem_pio2f+0x288>
 801e0b6:	aa56      	add	r2, sp, #344	; 0x158
 801e0b8:	4490      	add	r8, r2
 801e0ba:	9a01      	ldr	r2, [sp, #4]
 801e0bc:	a91a      	add	r1, sp, #104	; 0x68
 801e0be:	443a      	add	r2, r7
 801e0c0:	1c78      	adds	r0, r7, #1
 801e0c2:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 801e0c6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801e0ca:	4427      	add	r7, r4
 801e0cc:	42b8      	cmp	r0, r7
 801e0ce:	f73f af5a 	bgt.w	801df86 <__kernel_rem_pio2f+0xb6>
 801e0d2:	9903      	ldr	r1, [sp, #12]
 801e0d4:	9e02      	ldr	r6, [sp, #8]
 801e0d6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801e0da:	9105      	str	r1, [sp, #20]
 801e0dc:	ee07 1a90 	vmov	s15, r1
 801e0e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e0e4:	2400      	movs	r4, #0
 801e0e6:	ece2 7a01 	vstmia	r2!, {s15}
 801e0ea:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801e220 <__kernel_rem_pio2f+0x350>
 801e0ee:	4696      	mov	lr, r2
 801e0f0:	429c      	cmp	r4, r3
 801e0f2:	dd33      	ble.n	801e15c <__kernel_rem_pio2f+0x28c>
 801e0f4:	ece8 7a01 	vstmia	r8!, {s15}
 801e0f8:	3001      	adds	r0, #1
 801e0fa:	e7e7      	b.n	801e0cc <__kernel_rem_pio2f+0x1fc>
 801e0fc:	2602      	movs	r6, #2
 801e0fe:	e783      	b.n	801e008 <__kernel_rem_pio2f+0x138>
 801e100:	aa06      	add	r2, sp, #24
 801e102:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801e106:	b948      	cbnz	r0, 801e11c <__kernel_rem_pio2f+0x24c>
 801e108:	b12a      	cbz	r2, 801e116 <__kernel_rem_pio2f+0x246>
 801e10a:	a906      	add	r1, sp, #24
 801e10c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e110:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 801e114:	2201      	movs	r2, #1
 801e116:	3401      	adds	r4, #1
 801e118:	4610      	mov	r0, r2
 801e11a:	e779      	b.n	801e010 <__kernel_rem_pio2f+0x140>
 801e11c:	a906      	add	r1, sp, #24
 801e11e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801e122:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 801e126:	4602      	mov	r2, r0
 801e128:	e7f5      	b.n	801e116 <__kernel_rem_pio2f+0x246>
 801e12a:	1e7c      	subs	r4, r7, #1
 801e12c:	aa06      	add	r2, sp, #24
 801e12e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801e132:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801e136:	a906      	add	r1, sp, #24
 801e138:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 801e13c:	e772      	b.n	801e024 <__kernel_rem_pio2f+0x154>
 801e13e:	1e7c      	subs	r4, r7, #1
 801e140:	aa06      	add	r2, sp, #24
 801e142:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801e146:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801e14a:	e7f4      	b.n	801e136 <__kernel_rem_pio2f+0x266>
 801e14c:	a906      	add	r1, sp, #24
 801e14e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801e152:	3801      	subs	r0, #1
 801e154:	430a      	orrs	r2, r1
 801e156:	e7a1      	b.n	801e09c <__kernel_rem_pio2f+0x1cc>
 801e158:	3401      	adds	r4, #1
 801e15a:	e7a6      	b.n	801e0aa <__kernel_rem_pio2f+0x1da>
 801e15c:	ecf6 6a01 	vldmia	r6!, {s13}
 801e160:	ed3e 7a01 	vldmdb	lr!, {s14}
 801e164:	3401      	adds	r4, #1
 801e166:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e16a:	e7c1      	b.n	801e0f0 <__kernel_rem_pio2f+0x220>
 801e16c:	3c01      	subs	r4, #1
 801e16e:	ab06      	add	r3, sp, #24
 801e170:	3d08      	subs	r5, #8
 801e172:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801e176:	2b00      	cmp	r3, #0
 801e178:	d0f8      	beq.n	801e16c <__kernel_rem_pio2f+0x29c>
 801e17a:	4628      	mov	r0, r5
 801e17c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e180:	f000 fd42 	bl	801ec08 <scalbnf>
 801e184:	00a3      	lsls	r3, r4, #2
 801e186:	aa42      	add	r2, sp, #264	; 0x108
 801e188:	3304      	adds	r3, #4
 801e18a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 801e214 <__kernel_rem_pio2f+0x344>
 801e18e:	18d0      	adds	r0, r2, r3
 801e190:	4622      	mov	r2, r4
 801e192:	2a00      	cmp	r2, #0
 801e194:	da46      	bge.n	801e224 <__kernel_rem_pio2f+0x354>
 801e196:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 801e19a:	2200      	movs	r2, #0
 801e19c:	1aa5      	subs	r5, r4, r2
 801e19e:	d460      	bmi.n	801e262 <__kernel_rem_pio2f+0x392>
 801e1a0:	a942      	add	r1, sp, #264	; 0x108
 801e1a2:	4f1e      	ldr	r7, [pc, #120]	; (801e21c <__kernel_rem_pio2f+0x34c>)
 801e1a4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801e220 <__kernel_rem_pio2f+0x350>
 801e1a8:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 801e1ac:	2000      	movs	r0, #0
 801e1ae:	e050      	b.n	801e252 <__kernel_rem_pio2f+0x382>
 801e1b0:	4268      	negs	r0, r5
 801e1b2:	eeb0 0a48 	vmov.f32	s0, s16
 801e1b6:	f000 fd27 	bl	801ec08 <scalbnf>
 801e1ba:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801e218 <__kernel_rem_pio2f+0x348>
 801e1be:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801e1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1c6:	db19      	blt.n	801e1fc <__kernel_rem_pio2f+0x32c>
 801e1c8:	eddf 7a12 	vldr	s15, [pc, #72]	; 801e214 <__kernel_rem_pio2f+0x344>
 801e1cc:	ee60 7a27 	vmul.f32	s15, s0, s15
 801e1d0:	aa06      	add	r2, sp, #24
 801e1d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e1d6:	1c7c      	adds	r4, r7, #1
 801e1d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e1dc:	3508      	adds	r5, #8
 801e1de:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801e1e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e1e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e1ea:	ee10 3a10 	vmov	r3, s0
 801e1ee:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 801e1f2:	ee17 3a90 	vmov	r3, s15
 801e1f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801e1fa:	e7be      	b.n	801e17a <__kernel_rem_pio2f+0x2aa>
 801e1fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e200:	aa06      	add	r2, sp, #24
 801e202:	ee10 3a10 	vmov	r3, s0
 801e206:	463c      	mov	r4, r7
 801e208:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 801e20c:	e7b5      	b.n	801e17a <__kernel_rem_pio2f+0x2aa>
 801e20e:	bf00      	nop
 801e210:	080226fc 	.word	0x080226fc
 801e214:	3b800000 	.word	0x3b800000
 801e218:	43800000 	.word	0x43800000
 801e21c:	080226d0 	.word	0x080226d0
 801e220:	00000000 	.word	0x00000000
 801e224:	a906      	add	r1, sp, #24
 801e226:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801e22a:	9101      	str	r1, [sp, #4]
 801e22c:	ee07 1a90 	vmov	s15, r1
 801e230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e234:	3a01      	subs	r2, #1
 801e236:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e23a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801e23e:	ed60 7a01 	vstmdb	r0!, {s15}
 801e242:	e7a6      	b.n	801e192 <__kernel_rem_pio2f+0x2c2>
 801e244:	ecf7 6a01 	vldmia	r7!, {s13}
 801e248:	ecb5 7a01 	vldmia	r5!, {s14}
 801e24c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e250:	3001      	adds	r0, #1
 801e252:	4550      	cmp	r0, sl
 801e254:	dc01      	bgt.n	801e25a <__kernel_rem_pio2f+0x38a>
 801e256:	4290      	cmp	r0, r2
 801e258:	ddf4      	ble.n	801e244 <__kernel_rem_pio2f+0x374>
 801e25a:	ecee 7a01 	vstmia	lr!, {s15}
 801e25e:	3201      	adds	r2, #1
 801e260:	e79c      	b.n	801e19c <__kernel_rem_pio2f+0x2cc>
 801e262:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801e264:	2a03      	cmp	r2, #3
 801e266:	d843      	bhi.n	801e2f0 <__kernel_rem_pio2f+0x420>
 801e268:	e8df f002 	tbb	[pc, r2]
 801e26c:	021d1d37 	.word	0x021d1d37
 801e270:	aa2e      	add	r2, sp, #184	; 0xb8
 801e272:	4413      	add	r3, r2
 801e274:	461a      	mov	r2, r3
 801e276:	4620      	mov	r0, r4
 801e278:	2800      	cmp	r0, #0
 801e27a:	dc55      	bgt.n	801e328 <__kernel_rem_pio2f+0x458>
 801e27c:	461a      	mov	r2, r3
 801e27e:	4620      	mov	r0, r4
 801e280:	2801      	cmp	r0, #1
 801e282:	dc61      	bgt.n	801e348 <__kernel_rem_pio2f+0x478>
 801e284:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 801e220 <__kernel_rem_pio2f+0x350>
 801e288:	2c01      	cmp	r4, #1
 801e28a:	dc6d      	bgt.n	801e368 <__kernel_rem_pio2f+0x498>
 801e28c:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801e290:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801e294:	2e00      	cmp	r6, #0
 801e296:	d16d      	bne.n	801e374 <__kernel_rem_pio2f+0x4a4>
 801e298:	edcb 6a00 	vstr	s13, [fp]
 801e29c:	ed8b 7a01 	vstr	s14, [fp, #4]
 801e2a0:	edcb 7a02 	vstr	s15, [fp, #8]
 801e2a4:	e024      	b.n	801e2f0 <__kernel_rem_pio2f+0x420>
 801e2a6:	aa2e      	add	r2, sp, #184	; 0xb8
 801e2a8:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 801e220 <__kernel_rem_pio2f+0x350>
 801e2ac:	4413      	add	r3, r2
 801e2ae:	4622      	mov	r2, r4
 801e2b0:	2a00      	cmp	r2, #0
 801e2b2:	da2a      	bge.n	801e30a <__kernel_rem_pio2f+0x43a>
 801e2b4:	b37e      	cbz	r6, 801e316 <__kernel_rem_pio2f+0x446>
 801e2b6:	eef1 7a47 	vneg.f32	s15, s14
 801e2ba:	edcb 7a00 	vstr	s15, [fp]
 801e2be:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801e2c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e2c6:	aa2f      	add	r2, sp, #188	; 0xbc
 801e2c8:	2301      	movs	r3, #1
 801e2ca:	429c      	cmp	r4, r3
 801e2cc:	da26      	bge.n	801e31c <__kernel_rem_pio2f+0x44c>
 801e2ce:	b10e      	cbz	r6, 801e2d4 <__kernel_rem_pio2f+0x404>
 801e2d0:	eef1 7a67 	vneg.f32	s15, s15
 801e2d4:	edcb 7a01 	vstr	s15, [fp, #4]
 801e2d8:	e00a      	b.n	801e2f0 <__kernel_rem_pio2f+0x420>
 801e2da:	aa2e      	add	r2, sp, #184	; 0xb8
 801e2dc:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 801e220 <__kernel_rem_pio2f+0x350>
 801e2e0:	4413      	add	r3, r2
 801e2e2:	2c00      	cmp	r4, #0
 801e2e4:	da0b      	bge.n	801e2fe <__kernel_rem_pio2f+0x42e>
 801e2e6:	b10e      	cbz	r6, 801e2ec <__kernel_rem_pio2f+0x41c>
 801e2e8:	eef1 7a67 	vneg.f32	s15, s15
 801e2ec:	edcb 7a00 	vstr	s15, [fp]
 801e2f0:	f009 0007 	and.w	r0, r9, #7
 801e2f4:	b057      	add	sp, #348	; 0x15c
 801e2f6:	ecbd 8b04 	vpop	{d8-d9}
 801e2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2fe:	ed33 7a01 	vldmdb	r3!, {s14}
 801e302:	3c01      	subs	r4, #1
 801e304:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e308:	e7eb      	b.n	801e2e2 <__kernel_rem_pio2f+0x412>
 801e30a:	ed73 7a01 	vldmdb	r3!, {s15}
 801e30e:	3a01      	subs	r2, #1
 801e310:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e314:	e7cc      	b.n	801e2b0 <__kernel_rem_pio2f+0x3e0>
 801e316:	eef0 7a47 	vmov.f32	s15, s14
 801e31a:	e7ce      	b.n	801e2ba <__kernel_rem_pio2f+0x3ea>
 801e31c:	ecb2 7a01 	vldmia	r2!, {s14}
 801e320:	3301      	adds	r3, #1
 801e322:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e326:	e7d0      	b.n	801e2ca <__kernel_rem_pio2f+0x3fa>
 801e328:	ed52 6a01 	vldr	s13, [r2, #-4]
 801e32c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801e330:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e334:	3801      	subs	r0, #1
 801e336:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e33a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e33e:	ed62 7a01 	vstmdb	r2!, {s15}
 801e342:	ed02 7a01 	vstr	s14, [r2, #-4]
 801e346:	e797      	b.n	801e278 <__kernel_rem_pio2f+0x3a8>
 801e348:	ed52 6a01 	vldr	s13, [r2, #-4]
 801e34c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801e350:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e354:	3801      	subs	r0, #1
 801e356:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e35a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e35e:	ed62 7a01 	vstmdb	r2!, {s15}
 801e362:	ed02 7a01 	vstr	s14, [r2, #-4]
 801e366:	e78b      	b.n	801e280 <__kernel_rem_pio2f+0x3b0>
 801e368:	ed33 7a01 	vldmdb	r3!, {s14}
 801e36c:	3c01      	subs	r4, #1
 801e36e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e372:	e789      	b.n	801e288 <__kernel_rem_pio2f+0x3b8>
 801e374:	eef1 6a66 	vneg.f32	s13, s13
 801e378:	eeb1 7a47 	vneg.f32	s14, s14
 801e37c:	edcb 6a00 	vstr	s13, [fp]
 801e380:	ed8b 7a01 	vstr	s14, [fp, #4]
 801e384:	eef1 7a67 	vneg.f32	s15, s15
 801e388:	e78a      	b.n	801e2a0 <__kernel_rem_pio2f+0x3d0>
 801e38a:	bf00      	nop

0801e38c <__kernel_sinf>:
 801e38c:	ee10 3a10 	vmov	r3, s0
 801e390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e394:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801e398:	da04      	bge.n	801e3a4 <__kernel_sinf+0x18>
 801e39a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801e39e:	ee17 3a90 	vmov	r3, s15
 801e3a2:	b35b      	cbz	r3, 801e3fc <__kernel_sinf+0x70>
 801e3a4:	ee20 7a00 	vmul.f32	s14, s0, s0
 801e3a8:	eddf 7a15 	vldr	s15, [pc, #84]	; 801e400 <__kernel_sinf+0x74>
 801e3ac:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801e404 <__kernel_sinf+0x78>
 801e3b0:	eea7 6a27 	vfma.f32	s12, s14, s15
 801e3b4:	eddf 7a14 	vldr	s15, [pc, #80]	; 801e408 <__kernel_sinf+0x7c>
 801e3b8:	eee7 7a06 	vfma.f32	s15, s14, s12
 801e3bc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801e40c <__kernel_sinf+0x80>
 801e3c0:	eea7 6a27 	vfma.f32	s12, s14, s15
 801e3c4:	eddf 7a12 	vldr	s15, [pc, #72]	; 801e410 <__kernel_sinf+0x84>
 801e3c8:	ee60 6a07 	vmul.f32	s13, s0, s14
 801e3cc:	eee7 7a06 	vfma.f32	s15, s14, s12
 801e3d0:	b930      	cbnz	r0, 801e3e0 <__kernel_sinf+0x54>
 801e3d2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801e414 <__kernel_sinf+0x88>
 801e3d6:	eea7 6a27 	vfma.f32	s12, s14, s15
 801e3da:	eea6 0a86 	vfma.f32	s0, s13, s12
 801e3de:	4770      	bx	lr
 801e3e0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801e3e4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801e3e8:	eee0 7a86 	vfma.f32	s15, s1, s12
 801e3ec:	eed7 0a27 	vfnms.f32	s1, s14, s15
 801e3f0:	eddf 7a09 	vldr	s15, [pc, #36]	; 801e418 <__kernel_sinf+0x8c>
 801e3f4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801e3f8:	ee30 0a60 	vsub.f32	s0, s0, s1
 801e3fc:	4770      	bx	lr
 801e3fe:	bf00      	nop
 801e400:	2f2ec9d3 	.word	0x2f2ec9d3
 801e404:	b2d72f34 	.word	0xb2d72f34
 801e408:	3638ef1b 	.word	0x3638ef1b
 801e40c:	b9500d01 	.word	0xb9500d01
 801e410:	3c088889 	.word	0x3c088889
 801e414:	be2aaaab 	.word	0xbe2aaaab
 801e418:	3e2aaaab 	.word	0x3e2aaaab

0801e41c <__kernel_tanf>:
 801e41c:	b508      	push	{r3, lr}
 801e41e:	ee10 3a10 	vmov	r3, s0
 801e422:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801e426:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801e42a:	eef0 7a40 	vmov.f32	s15, s0
 801e42e:	da17      	bge.n	801e460 <__kernel_tanf+0x44>
 801e430:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801e434:	ee17 1a10 	vmov	r1, s14
 801e438:	bb41      	cbnz	r1, 801e48c <__kernel_tanf+0x70>
 801e43a:	1c43      	adds	r3, r0, #1
 801e43c:	4313      	orrs	r3, r2
 801e43e:	d108      	bne.n	801e452 <__kernel_tanf+0x36>
 801e440:	f000 fb98 	bl	801eb74 <fabsf>
 801e444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e448:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e44c:	eeb0 0a67 	vmov.f32	s0, s15
 801e450:	bd08      	pop	{r3, pc}
 801e452:	2801      	cmp	r0, #1
 801e454:	d0fa      	beq.n	801e44c <__kernel_tanf+0x30>
 801e456:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e45a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e45e:	e7f5      	b.n	801e44c <__kernel_tanf+0x30>
 801e460:	494e      	ldr	r1, [pc, #312]	; (801e59c <__kernel_tanf+0x180>)
 801e462:	428a      	cmp	r2, r1
 801e464:	dd12      	ble.n	801e48c <__kernel_tanf+0x70>
 801e466:	2b00      	cmp	r3, #0
 801e468:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801e5a0 <__kernel_tanf+0x184>
 801e46c:	bfb8      	it	lt
 801e46e:	eef1 7a40 	vneglt.f32	s15, s0
 801e472:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e476:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801e5a4 <__kernel_tanf+0x188>
 801e47a:	bfb8      	it	lt
 801e47c:	eef1 0a60 	vneglt.f32	s1, s1
 801e480:	ee77 0a60 	vsub.f32	s1, s14, s1
 801e484:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801e488:	eddf 0a47 	vldr	s1, [pc, #284]	; 801e5a8 <__kernel_tanf+0x18c>
 801e48c:	eddf 5a47 	vldr	s11, [pc, #284]	; 801e5ac <__kernel_tanf+0x190>
 801e490:	ed9f 6a47 	vldr	s12, [pc, #284]	; 801e5b0 <__kernel_tanf+0x194>
 801e494:	ed9f 5a47 	vldr	s10, [pc, #284]	; 801e5b4 <__kernel_tanf+0x198>
 801e498:	4940      	ldr	r1, [pc, #256]	; (801e59c <__kernel_tanf+0x180>)
 801e49a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801e49e:	428a      	cmp	r2, r1
 801e4a0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801e4a4:	ee67 4aa6 	vmul.f32	s9, s15, s13
 801e4a8:	eea7 6a25 	vfma.f32	s12, s14, s11
 801e4ac:	eddf 5a42 	vldr	s11, [pc, #264]	; 801e5b8 <__kernel_tanf+0x19c>
 801e4b0:	eee7 5a06 	vfma.f32	s11, s14, s12
 801e4b4:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801e5bc <__kernel_tanf+0x1a0>
 801e4b8:	eea7 6a25 	vfma.f32	s12, s14, s11
 801e4bc:	eddf 5a40 	vldr	s11, [pc, #256]	; 801e5c0 <__kernel_tanf+0x1a4>
 801e4c0:	eee7 5a06 	vfma.f32	s11, s14, s12
 801e4c4:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 801e5c4 <__kernel_tanf+0x1a8>
 801e4c8:	eea7 6a25 	vfma.f32	s12, s14, s11
 801e4cc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801e5c8 <__kernel_tanf+0x1ac>
 801e4d0:	eee7 5a05 	vfma.f32	s11, s14, s10
 801e4d4:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801e5cc <__kernel_tanf+0x1b0>
 801e4d8:	eea7 5a25 	vfma.f32	s10, s14, s11
 801e4dc:	eddf 5a3c 	vldr	s11, [pc, #240]	; 801e5d0 <__kernel_tanf+0x1b4>
 801e4e0:	eee7 5a05 	vfma.f32	s11, s14, s10
 801e4e4:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 801e5d4 <__kernel_tanf+0x1b8>
 801e4e8:	eea7 5a25 	vfma.f32	s10, s14, s11
 801e4ec:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801e5d8 <__kernel_tanf+0x1bc>
 801e4f0:	eee7 5a05 	vfma.f32	s11, s14, s10
 801e4f4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e4f8:	eeb0 7a46 	vmov.f32	s14, s12
 801e4fc:	eeb0 6a60 	vmov.f32	s12, s1
 801e500:	eea4 6a87 	vfma.f32	s12, s9, s14
 801e504:	ed9f 7a35 	vldr	s14, [pc, #212]	; 801e5dc <__kernel_tanf+0x1c0>
 801e508:	eee6 0a86 	vfma.f32	s1, s13, s12
 801e50c:	eee4 0a87 	vfma.f32	s1, s9, s14
 801e510:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801e514:	dd1d      	ble.n	801e552 <__kernel_tanf+0x136>
 801e516:	ee07 0a10 	vmov	s14, r0
 801e51a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e51e:	ee66 5aa6 	vmul.f32	s11, s13, s13
 801e522:	ee76 6a87 	vadd.f32	s13, s13, s14
 801e526:	179b      	asrs	r3, r3, #30
 801e528:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801e52c:	f003 0302 	and.w	r3, r3, #2
 801e530:	f1c3 0301 	rsb	r3, r3, #1
 801e534:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801e538:	ee76 0a60 	vsub.f32	s1, s12, s1
 801e53c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801e540:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801e544:	ee07 3a90 	vmov	s15, r3
 801e548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e54c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e550:	e77c      	b.n	801e44c <__kernel_tanf+0x30>
 801e552:	2801      	cmp	r0, #1
 801e554:	d01f      	beq.n	801e596 <__kernel_tanf+0x17a>
 801e556:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e55a:	eec7 5a26 	vdiv.f32	s11, s14, s13
 801e55e:	4b20      	ldr	r3, [pc, #128]	; (801e5e0 <__kernel_tanf+0x1c4>)
 801e560:	ee16 2a90 	vmov	r2, s13
 801e564:	401a      	ands	r2, r3
 801e566:	ee06 2a10 	vmov	s12, r2
 801e56a:	ee15 2a90 	vmov	r2, s11
 801e56e:	4013      	ands	r3, r2
 801e570:	ee07 3a10 	vmov	s14, r3
 801e574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e578:	eee6 6a07 	vfma.f32	s13, s12, s14
 801e57c:	ee76 7a67 	vsub.f32	s15, s12, s15
 801e580:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801e584:	eef0 7a66 	vmov.f32	s15, s13
 801e588:	eee7 7a20 	vfma.f32	s15, s14, s1
 801e58c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801e590:	eef0 7a47 	vmov.f32	s15, s14
 801e594:	e75a      	b.n	801e44c <__kernel_tanf+0x30>
 801e596:	eef0 7a66 	vmov.f32	s15, s13
 801e59a:	e757      	b.n	801e44c <__kernel_tanf+0x30>
 801e59c:	3f2ca13f 	.word	0x3f2ca13f
 801e5a0:	3f490fda 	.word	0x3f490fda
 801e5a4:	33222168 	.word	0x33222168
 801e5a8:	00000000 	.word	0x00000000
 801e5ac:	b79bae5f 	.word	0xb79bae5f
 801e5b0:	38a3f445 	.word	0x38a3f445
 801e5b4:	37d95384 	.word	0x37d95384
 801e5b8:	3a1a26c8 	.word	0x3a1a26c8
 801e5bc:	3b6b6916 	.word	0x3b6b6916
 801e5c0:	3cb327a4 	.word	0x3cb327a4
 801e5c4:	3e088889 	.word	0x3e088889
 801e5c8:	3895c07a 	.word	0x3895c07a
 801e5cc:	398137b9 	.word	0x398137b9
 801e5d0:	3abede48 	.word	0x3abede48
 801e5d4:	3c11371f 	.word	0x3c11371f
 801e5d8:	3d5d0dd1 	.word	0x3d5d0dd1
 801e5dc:	3eaaaaab 	.word	0x3eaaaaab
 801e5e0:	fffff000 	.word	0xfffff000
 801e5e4:	00000000 	.word	0x00000000

0801e5e8 <atan>:
 801e5e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5ec:	ec55 4b10 	vmov	r4, r5, d0
 801e5f0:	4bc7      	ldr	r3, [pc, #796]	; (801e910 <atan+0x328>)
 801e5f2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801e5f6:	429e      	cmp	r6, r3
 801e5f8:	46ab      	mov	fp, r5
 801e5fa:	dd18      	ble.n	801e62e <atan+0x46>
 801e5fc:	4ac5      	ldr	r2, [pc, #788]	; (801e914 <atan+0x32c>)
 801e5fe:	4296      	cmp	r6, r2
 801e600:	dc01      	bgt.n	801e606 <atan+0x1e>
 801e602:	d109      	bne.n	801e618 <atan+0x30>
 801e604:	b144      	cbz	r4, 801e618 <atan+0x30>
 801e606:	4622      	mov	r2, r4
 801e608:	462b      	mov	r3, r5
 801e60a:	4620      	mov	r0, r4
 801e60c:	4629      	mov	r1, r5
 801e60e:	f7e1 fe45 	bl	800029c <__adddf3>
 801e612:	4604      	mov	r4, r0
 801e614:	460d      	mov	r5, r1
 801e616:	e006      	b.n	801e626 <atan+0x3e>
 801e618:	f1bb 0f00 	cmp.w	fp, #0
 801e61c:	f300 813a 	bgt.w	801e894 <atan+0x2ac>
 801e620:	a59f      	add	r5, pc, #636	; (adr r5, 801e8a0 <atan+0x2b8>)
 801e622:	e9d5 4500 	ldrd	r4, r5, [r5]
 801e626:	ec45 4b10 	vmov	d0, r4, r5
 801e62a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e62e:	4bba      	ldr	r3, [pc, #744]	; (801e918 <atan+0x330>)
 801e630:	429e      	cmp	r6, r3
 801e632:	dc14      	bgt.n	801e65e <atan+0x76>
 801e634:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801e638:	429e      	cmp	r6, r3
 801e63a:	dc0d      	bgt.n	801e658 <atan+0x70>
 801e63c:	a39a      	add	r3, pc, #616	; (adr r3, 801e8a8 <atan+0x2c0>)
 801e63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e642:	ee10 0a10 	vmov	r0, s0
 801e646:	4629      	mov	r1, r5
 801e648:	f7e1 fe28 	bl	800029c <__adddf3>
 801e64c:	2200      	movs	r2, #0
 801e64e:	4bb3      	ldr	r3, [pc, #716]	; (801e91c <atan+0x334>)
 801e650:	f7e2 fa66 	bl	8000b20 <__aeabi_dcmpgt>
 801e654:	2800      	cmp	r0, #0
 801e656:	d1e6      	bne.n	801e626 <atan+0x3e>
 801e658:	f04f 3aff 	mov.w	sl, #4294967295
 801e65c:	e02b      	b.n	801e6b6 <atan+0xce>
 801e65e:	f000 f96b 	bl	801e938 <fabs>
 801e662:	4baf      	ldr	r3, [pc, #700]	; (801e920 <atan+0x338>)
 801e664:	429e      	cmp	r6, r3
 801e666:	ec55 4b10 	vmov	r4, r5, d0
 801e66a:	f300 80bf 	bgt.w	801e7ec <atan+0x204>
 801e66e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801e672:	429e      	cmp	r6, r3
 801e674:	f300 80a0 	bgt.w	801e7b8 <atan+0x1d0>
 801e678:	ee10 2a10 	vmov	r2, s0
 801e67c:	ee10 0a10 	vmov	r0, s0
 801e680:	462b      	mov	r3, r5
 801e682:	4629      	mov	r1, r5
 801e684:	f7e1 fe0a 	bl	800029c <__adddf3>
 801e688:	2200      	movs	r2, #0
 801e68a:	4ba4      	ldr	r3, [pc, #656]	; (801e91c <atan+0x334>)
 801e68c:	f7e1 fe04 	bl	8000298 <__aeabi_dsub>
 801e690:	2200      	movs	r2, #0
 801e692:	4606      	mov	r6, r0
 801e694:	460f      	mov	r7, r1
 801e696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e69a:	4620      	mov	r0, r4
 801e69c:	4629      	mov	r1, r5
 801e69e:	f7e1 fdfd 	bl	800029c <__adddf3>
 801e6a2:	4602      	mov	r2, r0
 801e6a4:	460b      	mov	r3, r1
 801e6a6:	4630      	mov	r0, r6
 801e6a8:	4639      	mov	r1, r7
 801e6aa:	f7e2 f8d3 	bl	8000854 <__aeabi_ddiv>
 801e6ae:	f04f 0a00 	mov.w	sl, #0
 801e6b2:	4604      	mov	r4, r0
 801e6b4:	460d      	mov	r5, r1
 801e6b6:	4622      	mov	r2, r4
 801e6b8:	462b      	mov	r3, r5
 801e6ba:	4620      	mov	r0, r4
 801e6bc:	4629      	mov	r1, r5
 801e6be:	f7e1 ff9f 	bl	8000600 <__aeabi_dmul>
 801e6c2:	4602      	mov	r2, r0
 801e6c4:	460b      	mov	r3, r1
 801e6c6:	4680      	mov	r8, r0
 801e6c8:	4689      	mov	r9, r1
 801e6ca:	f7e1 ff99 	bl	8000600 <__aeabi_dmul>
 801e6ce:	a378      	add	r3, pc, #480	; (adr r3, 801e8b0 <atan+0x2c8>)
 801e6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6d4:	4606      	mov	r6, r0
 801e6d6:	460f      	mov	r7, r1
 801e6d8:	f7e1 ff92 	bl	8000600 <__aeabi_dmul>
 801e6dc:	a376      	add	r3, pc, #472	; (adr r3, 801e8b8 <atan+0x2d0>)
 801e6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6e2:	f7e1 fddb 	bl	800029c <__adddf3>
 801e6e6:	4632      	mov	r2, r6
 801e6e8:	463b      	mov	r3, r7
 801e6ea:	f7e1 ff89 	bl	8000600 <__aeabi_dmul>
 801e6ee:	a374      	add	r3, pc, #464	; (adr r3, 801e8c0 <atan+0x2d8>)
 801e6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6f4:	f7e1 fdd2 	bl	800029c <__adddf3>
 801e6f8:	4632      	mov	r2, r6
 801e6fa:	463b      	mov	r3, r7
 801e6fc:	f7e1 ff80 	bl	8000600 <__aeabi_dmul>
 801e700:	a371      	add	r3, pc, #452	; (adr r3, 801e8c8 <atan+0x2e0>)
 801e702:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e706:	f7e1 fdc9 	bl	800029c <__adddf3>
 801e70a:	4632      	mov	r2, r6
 801e70c:	463b      	mov	r3, r7
 801e70e:	f7e1 ff77 	bl	8000600 <__aeabi_dmul>
 801e712:	a36f      	add	r3, pc, #444	; (adr r3, 801e8d0 <atan+0x2e8>)
 801e714:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e718:	f7e1 fdc0 	bl	800029c <__adddf3>
 801e71c:	4632      	mov	r2, r6
 801e71e:	463b      	mov	r3, r7
 801e720:	f7e1 ff6e 	bl	8000600 <__aeabi_dmul>
 801e724:	a36c      	add	r3, pc, #432	; (adr r3, 801e8d8 <atan+0x2f0>)
 801e726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e72a:	f7e1 fdb7 	bl	800029c <__adddf3>
 801e72e:	4642      	mov	r2, r8
 801e730:	464b      	mov	r3, r9
 801e732:	f7e1 ff65 	bl	8000600 <__aeabi_dmul>
 801e736:	a36a      	add	r3, pc, #424	; (adr r3, 801e8e0 <atan+0x2f8>)
 801e738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e73c:	4680      	mov	r8, r0
 801e73e:	4689      	mov	r9, r1
 801e740:	4630      	mov	r0, r6
 801e742:	4639      	mov	r1, r7
 801e744:	f7e1 ff5c 	bl	8000600 <__aeabi_dmul>
 801e748:	a367      	add	r3, pc, #412	; (adr r3, 801e8e8 <atan+0x300>)
 801e74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e74e:	f7e1 fda3 	bl	8000298 <__aeabi_dsub>
 801e752:	4632      	mov	r2, r6
 801e754:	463b      	mov	r3, r7
 801e756:	f7e1 ff53 	bl	8000600 <__aeabi_dmul>
 801e75a:	a365      	add	r3, pc, #404	; (adr r3, 801e8f0 <atan+0x308>)
 801e75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e760:	f7e1 fd9a 	bl	8000298 <__aeabi_dsub>
 801e764:	4632      	mov	r2, r6
 801e766:	463b      	mov	r3, r7
 801e768:	f7e1 ff4a 	bl	8000600 <__aeabi_dmul>
 801e76c:	a362      	add	r3, pc, #392	; (adr r3, 801e8f8 <atan+0x310>)
 801e76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e772:	f7e1 fd91 	bl	8000298 <__aeabi_dsub>
 801e776:	4632      	mov	r2, r6
 801e778:	463b      	mov	r3, r7
 801e77a:	f7e1 ff41 	bl	8000600 <__aeabi_dmul>
 801e77e:	a360      	add	r3, pc, #384	; (adr r3, 801e900 <atan+0x318>)
 801e780:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e784:	f7e1 fd88 	bl	8000298 <__aeabi_dsub>
 801e788:	4632      	mov	r2, r6
 801e78a:	463b      	mov	r3, r7
 801e78c:	f7e1 ff38 	bl	8000600 <__aeabi_dmul>
 801e790:	f1ba 3fff 	cmp.w	sl, #4294967295
 801e794:	4602      	mov	r2, r0
 801e796:	460b      	mov	r3, r1
 801e798:	d155      	bne.n	801e846 <atan+0x25e>
 801e79a:	4640      	mov	r0, r8
 801e79c:	4649      	mov	r1, r9
 801e79e:	f7e1 fd7d 	bl	800029c <__adddf3>
 801e7a2:	4622      	mov	r2, r4
 801e7a4:	462b      	mov	r3, r5
 801e7a6:	f7e1 ff2b 	bl	8000600 <__aeabi_dmul>
 801e7aa:	4602      	mov	r2, r0
 801e7ac:	460b      	mov	r3, r1
 801e7ae:	4620      	mov	r0, r4
 801e7b0:	4629      	mov	r1, r5
 801e7b2:	f7e1 fd71 	bl	8000298 <__aeabi_dsub>
 801e7b6:	e72c      	b.n	801e612 <atan+0x2a>
 801e7b8:	ee10 0a10 	vmov	r0, s0
 801e7bc:	2200      	movs	r2, #0
 801e7be:	4b57      	ldr	r3, [pc, #348]	; (801e91c <atan+0x334>)
 801e7c0:	4629      	mov	r1, r5
 801e7c2:	f7e1 fd69 	bl	8000298 <__aeabi_dsub>
 801e7c6:	2200      	movs	r2, #0
 801e7c8:	4606      	mov	r6, r0
 801e7ca:	460f      	mov	r7, r1
 801e7cc:	4b53      	ldr	r3, [pc, #332]	; (801e91c <atan+0x334>)
 801e7ce:	4620      	mov	r0, r4
 801e7d0:	4629      	mov	r1, r5
 801e7d2:	f7e1 fd63 	bl	800029c <__adddf3>
 801e7d6:	4602      	mov	r2, r0
 801e7d8:	460b      	mov	r3, r1
 801e7da:	4630      	mov	r0, r6
 801e7dc:	4639      	mov	r1, r7
 801e7de:	f7e2 f839 	bl	8000854 <__aeabi_ddiv>
 801e7e2:	f04f 0a01 	mov.w	sl, #1
 801e7e6:	4604      	mov	r4, r0
 801e7e8:	460d      	mov	r5, r1
 801e7ea:	e764      	b.n	801e6b6 <atan+0xce>
 801e7ec:	4b4d      	ldr	r3, [pc, #308]	; (801e924 <atan+0x33c>)
 801e7ee:	429e      	cmp	r6, r3
 801e7f0:	dc1d      	bgt.n	801e82e <atan+0x246>
 801e7f2:	ee10 0a10 	vmov	r0, s0
 801e7f6:	2200      	movs	r2, #0
 801e7f8:	4b4b      	ldr	r3, [pc, #300]	; (801e928 <atan+0x340>)
 801e7fa:	4629      	mov	r1, r5
 801e7fc:	f7e1 fd4c 	bl	8000298 <__aeabi_dsub>
 801e800:	2200      	movs	r2, #0
 801e802:	4606      	mov	r6, r0
 801e804:	460f      	mov	r7, r1
 801e806:	4b48      	ldr	r3, [pc, #288]	; (801e928 <atan+0x340>)
 801e808:	4620      	mov	r0, r4
 801e80a:	4629      	mov	r1, r5
 801e80c:	f7e1 fef8 	bl	8000600 <__aeabi_dmul>
 801e810:	2200      	movs	r2, #0
 801e812:	4b42      	ldr	r3, [pc, #264]	; (801e91c <atan+0x334>)
 801e814:	f7e1 fd42 	bl	800029c <__adddf3>
 801e818:	4602      	mov	r2, r0
 801e81a:	460b      	mov	r3, r1
 801e81c:	4630      	mov	r0, r6
 801e81e:	4639      	mov	r1, r7
 801e820:	f7e2 f818 	bl	8000854 <__aeabi_ddiv>
 801e824:	f04f 0a02 	mov.w	sl, #2
 801e828:	4604      	mov	r4, r0
 801e82a:	460d      	mov	r5, r1
 801e82c:	e743      	b.n	801e6b6 <atan+0xce>
 801e82e:	462b      	mov	r3, r5
 801e830:	ee10 2a10 	vmov	r2, s0
 801e834:	2000      	movs	r0, #0
 801e836:	493d      	ldr	r1, [pc, #244]	; (801e92c <atan+0x344>)
 801e838:	f7e2 f80c 	bl	8000854 <__aeabi_ddiv>
 801e83c:	f04f 0a03 	mov.w	sl, #3
 801e840:	4604      	mov	r4, r0
 801e842:	460d      	mov	r5, r1
 801e844:	e737      	b.n	801e6b6 <atan+0xce>
 801e846:	4640      	mov	r0, r8
 801e848:	4649      	mov	r1, r9
 801e84a:	f7e1 fd27 	bl	800029c <__adddf3>
 801e84e:	4622      	mov	r2, r4
 801e850:	462b      	mov	r3, r5
 801e852:	f7e1 fed5 	bl	8000600 <__aeabi_dmul>
 801e856:	4e36      	ldr	r6, [pc, #216]	; (801e930 <atan+0x348>)
 801e858:	4b36      	ldr	r3, [pc, #216]	; (801e934 <atan+0x34c>)
 801e85a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801e85e:	4456      	add	r6, sl
 801e860:	449a      	add	sl, r3
 801e862:	e9da 2300 	ldrd	r2, r3, [sl]
 801e866:	f7e1 fd17 	bl	8000298 <__aeabi_dsub>
 801e86a:	4622      	mov	r2, r4
 801e86c:	462b      	mov	r3, r5
 801e86e:	f7e1 fd13 	bl	8000298 <__aeabi_dsub>
 801e872:	4602      	mov	r2, r0
 801e874:	460b      	mov	r3, r1
 801e876:	e9d6 0100 	ldrd	r0, r1, [r6]
 801e87a:	f7e1 fd0d 	bl	8000298 <__aeabi_dsub>
 801e87e:	f1bb 0f00 	cmp.w	fp, #0
 801e882:	4604      	mov	r4, r0
 801e884:	460d      	mov	r5, r1
 801e886:	f6bf aece 	bge.w	801e626 <atan+0x3e>
 801e88a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e88e:	4604      	mov	r4, r0
 801e890:	461d      	mov	r5, r3
 801e892:	e6c8      	b.n	801e626 <atan+0x3e>
 801e894:	a51c      	add	r5, pc, #112	; (adr r5, 801e908 <atan+0x320>)
 801e896:	e9d5 4500 	ldrd	r4, r5, [r5]
 801e89a:	e6c4      	b.n	801e626 <atan+0x3e>
 801e89c:	f3af 8000 	nop.w
 801e8a0:	54442d18 	.word	0x54442d18
 801e8a4:	bff921fb 	.word	0xbff921fb
 801e8a8:	8800759c 	.word	0x8800759c
 801e8ac:	7e37e43c 	.word	0x7e37e43c
 801e8b0:	e322da11 	.word	0xe322da11
 801e8b4:	3f90ad3a 	.word	0x3f90ad3a
 801e8b8:	24760deb 	.word	0x24760deb
 801e8bc:	3fa97b4b 	.word	0x3fa97b4b
 801e8c0:	a0d03d51 	.word	0xa0d03d51
 801e8c4:	3fb10d66 	.word	0x3fb10d66
 801e8c8:	c54c206e 	.word	0xc54c206e
 801e8cc:	3fb745cd 	.word	0x3fb745cd
 801e8d0:	920083ff 	.word	0x920083ff
 801e8d4:	3fc24924 	.word	0x3fc24924
 801e8d8:	5555550d 	.word	0x5555550d
 801e8dc:	3fd55555 	.word	0x3fd55555
 801e8e0:	2c6a6c2f 	.word	0x2c6a6c2f
 801e8e4:	bfa2b444 	.word	0xbfa2b444
 801e8e8:	52defd9a 	.word	0x52defd9a
 801e8ec:	3fadde2d 	.word	0x3fadde2d
 801e8f0:	af749a6d 	.word	0xaf749a6d
 801e8f4:	3fb3b0f2 	.word	0x3fb3b0f2
 801e8f8:	fe231671 	.word	0xfe231671
 801e8fc:	3fbc71c6 	.word	0x3fbc71c6
 801e900:	9998ebc4 	.word	0x9998ebc4
 801e904:	3fc99999 	.word	0x3fc99999
 801e908:	54442d18 	.word	0x54442d18
 801e90c:	3ff921fb 	.word	0x3ff921fb
 801e910:	440fffff 	.word	0x440fffff
 801e914:	7ff00000 	.word	0x7ff00000
 801e918:	3fdbffff 	.word	0x3fdbffff
 801e91c:	3ff00000 	.word	0x3ff00000
 801e920:	3ff2ffff 	.word	0x3ff2ffff
 801e924:	40037fff 	.word	0x40037fff
 801e928:	3ff80000 	.word	0x3ff80000
 801e92c:	bff00000 	.word	0xbff00000
 801e930:	08022708 	.word	0x08022708
 801e934:	08022728 	.word	0x08022728

0801e938 <fabs>:
 801e938:	ec53 2b10 	vmov	r2, r3, d0
 801e93c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e940:	ec43 2b10 	vmov	d0, r2, r3
 801e944:	4770      	bx	lr

0801e946 <finite>:
 801e946:	ee10 3a90 	vmov	r3, s1
 801e94a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801e94e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801e952:	0fc0      	lsrs	r0, r0, #31
 801e954:	4770      	bx	lr

0801e956 <matherr>:
 801e956:	2000      	movs	r0, #0
 801e958:	4770      	bx	lr
 801e95a:	0000      	movs	r0, r0
 801e95c:	0000      	movs	r0, r0
	...

0801e960 <nan>:
 801e960:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e968 <nan+0x8>
 801e964:	4770      	bx	lr
 801e966:	bf00      	nop
 801e968:	00000000 	.word	0x00000000
 801e96c:	7ff80000 	.word	0x7ff80000

0801e970 <rint>:
 801e970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e972:	ec51 0b10 	vmov	r0, r1, d0
 801e976:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801e97a:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 801e97e:	2e13      	cmp	r6, #19
 801e980:	ee10 7a10 	vmov	r7, s0
 801e984:	460b      	mov	r3, r1
 801e986:	4602      	mov	r2, r0
 801e988:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801e98c:	dc58      	bgt.n	801ea40 <rint+0xd0>
 801e98e:	2e00      	cmp	r6, #0
 801e990:	da2b      	bge.n	801e9ea <rint+0x7a>
 801e992:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801e996:	4302      	orrs	r2, r0
 801e998:	d023      	beq.n	801e9e2 <rint+0x72>
 801e99a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801e99e:	4302      	orrs	r2, r0
 801e9a0:	4251      	negs	r1, r2
 801e9a2:	4311      	orrs	r1, r2
 801e9a4:	0b09      	lsrs	r1, r1, #12
 801e9a6:	0c5b      	lsrs	r3, r3, #17
 801e9a8:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 801e9ac:	045b      	lsls	r3, r3, #17
 801e9ae:	ea41 0703 	orr.w	r7, r1, r3
 801e9b2:	4b31      	ldr	r3, [pc, #196]	; (801ea78 <rint+0x108>)
 801e9b4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801e9b8:	4639      	mov	r1, r7
 801e9ba:	e9d3 6700 	ldrd	r6, r7, [r3]
 801e9be:	ee10 0a10 	vmov	r0, s0
 801e9c2:	4632      	mov	r2, r6
 801e9c4:	463b      	mov	r3, r7
 801e9c6:	f7e1 fc69 	bl	800029c <__adddf3>
 801e9ca:	e9cd 0100 	strd	r0, r1, [sp]
 801e9ce:	463b      	mov	r3, r7
 801e9d0:	4632      	mov	r2, r6
 801e9d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e9d6:	f7e1 fc5f 	bl	8000298 <__aeabi_dsub>
 801e9da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801e9de:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 801e9e2:	ec41 0b10 	vmov	d0, r0, r1
 801e9e6:	b003      	add	sp, #12
 801e9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e9ea:	4c24      	ldr	r4, [pc, #144]	; (801ea7c <rint+0x10c>)
 801e9ec:	4134      	asrs	r4, r6
 801e9ee:	ea01 0704 	and.w	r7, r1, r4
 801e9f2:	4307      	orrs	r7, r0
 801e9f4:	d0f5      	beq.n	801e9e2 <rint+0x72>
 801e9f6:	0861      	lsrs	r1, r4, #1
 801e9f8:	ea03 0001 	and.w	r0, r3, r1
 801e9fc:	4302      	orrs	r2, r0
 801e9fe:	d00b      	beq.n	801ea18 <rint+0xa8>
 801ea00:	ea23 0101 	bic.w	r1, r3, r1
 801ea04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801ea08:	2e13      	cmp	r6, #19
 801ea0a:	fa43 f306 	asr.w	r3, r3, r6
 801ea0e:	bf0c      	ite	eq
 801ea10:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 801ea14:	2200      	movne	r2, #0
 801ea16:	430b      	orrs	r3, r1
 801ea18:	4619      	mov	r1, r3
 801ea1a:	4b17      	ldr	r3, [pc, #92]	; (801ea78 <rint+0x108>)
 801ea1c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801ea20:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ea24:	4610      	mov	r0, r2
 801ea26:	462b      	mov	r3, r5
 801ea28:	4622      	mov	r2, r4
 801ea2a:	f7e1 fc37 	bl	800029c <__adddf3>
 801ea2e:	e9cd 0100 	strd	r0, r1, [sp]
 801ea32:	4622      	mov	r2, r4
 801ea34:	462b      	mov	r3, r5
 801ea36:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ea3a:	f7e1 fc2d 	bl	8000298 <__aeabi_dsub>
 801ea3e:	e7d0      	b.n	801e9e2 <rint+0x72>
 801ea40:	2e33      	cmp	r6, #51	; 0x33
 801ea42:	dd08      	ble.n	801ea56 <rint+0xe6>
 801ea44:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ea48:	d1cb      	bne.n	801e9e2 <rint+0x72>
 801ea4a:	ee10 2a10 	vmov	r2, s0
 801ea4e:	460b      	mov	r3, r1
 801ea50:	f7e1 fc24 	bl	800029c <__adddf3>
 801ea54:	e7c5      	b.n	801e9e2 <rint+0x72>
 801ea56:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801ea5a:	f04f 34ff 	mov.w	r4, #4294967295
 801ea5e:	40f4      	lsrs	r4, r6
 801ea60:	4220      	tst	r0, r4
 801ea62:	d0be      	beq.n	801e9e2 <rint+0x72>
 801ea64:	0861      	lsrs	r1, r4, #1
 801ea66:	420f      	tst	r7, r1
 801ea68:	bf1f      	itttt	ne
 801ea6a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 801ea6e:	ea27 0101 	bicne.w	r1, r7, r1
 801ea72:	4132      	asrne	r2, r6
 801ea74:	430a      	orrne	r2, r1
 801ea76:	e7cf      	b.n	801ea18 <rint+0xa8>
 801ea78:	08022748 	.word	0x08022748
 801ea7c:	000fffff 	.word	0x000fffff

0801ea80 <scalbn>:
 801ea80:	b570      	push	{r4, r5, r6, lr}
 801ea82:	ec55 4b10 	vmov	r4, r5, d0
 801ea86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801ea8a:	4606      	mov	r6, r0
 801ea8c:	462b      	mov	r3, r5
 801ea8e:	b9b2      	cbnz	r2, 801eabe <scalbn+0x3e>
 801ea90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ea94:	4323      	orrs	r3, r4
 801ea96:	d03c      	beq.n	801eb12 <scalbn+0x92>
 801ea98:	2200      	movs	r2, #0
 801ea9a:	4b33      	ldr	r3, [pc, #204]	; (801eb68 <scalbn+0xe8>)
 801ea9c:	4629      	mov	r1, r5
 801ea9e:	ee10 0a10 	vmov	r0, s0
 801eaa2:	f7e1 fdad 	bl	8000600 <__aeabi_dmul>
 801eaa6:	4a31      	ldr	r2, [pc, #196]	; (801eb6c <scalbn+0xec>)
 801eaa8:	4296      	cmp	r6, r2
 801eaaa:	4604      	mov	r4, r0
 801eaac:	460d      	mov	r5, r1
 801eaae:	460b      	mov	r3, r1
 801eab0:	da13      	bge.n	801eada <scalbn+0x5a>
 801eab2:	a329      	add	r3, pc, #164	; (adr r3, 801eb58 <scalbn+0xd8>)
 801eab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eab8:	f7e1 fda2 	bl	8000600 <__aeabi_dmul>
 801eabc:	e00a      	b.n	801ead4 <scalbn+0x54>
 801eabe:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801eac2:	428a      	cmp	r2, r1
 801eac4:	d10c      	bne.n	801eae0 <scalbn+0x60>
 801eac6:	ee10 2a10 	vmov	r2, s0
 801eaca:	462b      	mov	r3, r5
 801eacc:	4620      	mov	r0, r4
 801eace:	4629      	mov	r1, r5
 801ead0:	f7e1 fbe4 	bl	800029c <__adddf3>
 801ead4:	4604      	mov	r4, r0
 801ead6:	460d      	mov	r5, r1
 801ead8:	e01b      	b.n	801eb12 <scalbn+0x92>
 801eada:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801eade:	3a36      	subs	r2, #54	; 0x36
 801eae0:	4432      	add	r2, r6
 801eae2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801eae6:	428a      	cmp	r2, r1
 801eae8:	dd0b      	ble.n	801eb02 <scalbn+0x82>
 801eaea:	ec45 4b11 	vmov	d1, r4, r5
 801eaee:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801eb60 <scalbn+0xe0>
 801eaf2:	f000 f8e9 	bl	801ecc8 <copysign>
 801eaf6:	a31a      	add	r3, pc, #104	; (adr r3, 801eb60 <scalbn+0xe0>)
 801eaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eafc:	ec51 0b10 	vmov	r0, r1, d0
 801eb00:	e7da      	b.n	801eab8 <scalbn+0x38>
 801eb02:	2a00      	cmp	r2, #0
 801eb04:	dd08      	ble.n	801eb18 <scalbn+0x98>
 801eb06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801eb0a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801eb0e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801eb12:	ec45 4b10 	vmov	d0, r4, r5
 801eb16:	bd70      	pop	{r4, r5, r6, pc}
 801eb18:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801eb1c:	da0d      	bge.n	801eb3a <scalbn+0xba>
 801eb1e:	f24c 3350 	movw	r3, #50000	; 0xc350
 801eb22:	429e      	cmp	r6, r3
 801eb24:	ec45 4b11 	vmov	d1, r4, r5
 801eb28:	dce1      	bgt.n	801eaee <scalbn+0x6e>
 801eb2a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 801eb58 <scalbn+0xd8>
 801eb2e:	f000 f8cb 	bl	801ecc8 <copysign>
 801eb32:	a309      	add	r3, pc, #36	; (adr r3, 801eb58 <scalbn+0xd8>)
 801eb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb38:	e7e0      	b.n	801eafc <scalbn+0x7c>
 801eb3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801eb3e:	3236      	adds	r2, #54	; 0x36
 801eb40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801eb44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801eb48:	4620      	mov	r0, r4
 801eb4a:	4629      	mov	r1, r5
 801eb4c:	2200      	movs	r2, #0
 801eb4e:	4b08      	ldr	r3, [pc, #32]	; (801eb70 <scalbn+0xf0>)
 801eb50:	e7b2      	b.n	801eab8 <scalbn+0x38>
 801eb52:	bf00      	nop
 801eb54:	f3af 8000 	nop.w
 801eb58:	c2f8f359 	.word	0xc2f8f359
 801eb5c:	01a56e1f 	.word	0x01a56e1f
 801eb60:	8800759c 	.word	0x8800759c
 801eb64:	7e37e43c 	.word	0x7e37e43c
 801eb68:	43500000 	.word	0x43500000
 801eb6c:	ffff3cb0 	.word	0xffff3cb0
 801eb70:	3c900000 	.word	0x3c900000

0801eb74 <fabsf>:
 801eb74:	ee10 3a10 	vmov	r3, s0
 801eb78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801eb7c:	ee00 3a10 	vmov	s0, r3
 801eb80:	4770      	bx	lr
	...

0801eb84 <floorf>:
 801eb84:	ee10 3a10 	vmov	r3, s0
 801eb88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801eb8c:	0dca      	lsrs	r2, r1, #23
 801eb8e:	3a7f      	subs	r2, #127	; 0x7f
 801eb90:	2a16      	cmp	r2, #22
 801eb92:	dc2a      	bgt.n	801ebea <floorf+0x66>
 801eb94:	2a00      	cmp	r2, #0
 801eb96:	da11      	bge.n	801ebbc <floorf+0x38>
 801eb98:	eddf 7a18 	vldr	s15, [pc, #96]	; 801ebfc <floorf+0x78>
 801eb9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 801eba0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801eba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eba8:	dd05      	ble.n	801ebb6 <floorf+0x32>
 801ebaa:	2b00      	cmp	r3, #0
 801ebac:	da23      	bge.n	801ebf6 <floorf+0x72>
 801ebae:	4a14      	ldr	r2, [pc, #80]	; (801ec00 <floorf+0x7c>)
 801ebb0:	2900      	cmp	r1, #0
 801ebb2:	bf18      	it	ne
 801ebb4:	4613      	movne	r3, r2
 801ebb6:	ee00 3a10 	vmov	s0, r3
 801ebba:	4770      	bx	lr
 801ebbc:	4911      	ldr	r1, [pc, #68]	; (801ec04 <floorf+0x80>)
 801ebbe:	4111      	asrs	r1, r2
 801ebc0:	420b      	tst	r3, r1
 801ebc2:	d0fa      	beq.n	801ebba <floorf+0x36>
 801ebc4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801ebfc <floorf+0x78>
 801ebc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ebcc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ebd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebd4:	ddef      	ble.n	801ebb6 <floorf+0x32>
 801ebd6:	2b00      	cmp	r3, #0
 801ebd8:	bfbe      	ittt	lt
 801ebda:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801ebde:	fa40 f202 	asrlt.w	r2, r0, r2
 801ebe2:	189b      	addlt	r3, r3, r2
 801ebe4:	ea23 0301 	bic.w	r3, r3, r1
 801ebe8:	e7e5      	b.n	801ebb6 <floorf+0x32>
 801ebea:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801ebee:	d3e4      	bcc.n	801ebba <floorf+0x36>
 801ebf0:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ebf4:	4770      	bx	lr
 801ebf6:	2300      	movs	r3, #0
 801ebf8:	e7dd      	b.n	801ebb6 <floorf+0x32>
 801ebfa:	bf00      	nop
 801ebfc:	7149f2ca 	.word	0x7149f2ca
 801ec00:	bf800000 	.word	0xbf800000
 801ec04:	007fffff 	.word	0x007fffff

0801ec08 <scalbnf>:
 801ec08:	b508      	push	{r3, lr}
 801ec0a:	ee10 2a10 	vmov	r2, s0
 801ec0e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801ec12:	ed2d 8b02 	vpush	{d8}
 801ec16:	eef0 0a40 	vmov.f32	s1, s0
 801ec1a:	d004      	beq.n	801ec26 <scalbnf+0x1e>
 801ec1c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ec20:	d306      	bcc.n	801ec30 <scalbnf+0x28>
 801ec22:	ee70 0a00 	vadd.f32	s1, s0, s0
 801ec26:	ecbd 8b02 	vpop	{d8}
 801ec2a:	eeb0 0a60 	vmov.f32	s0, s1
 801ec2e:	bd08      	pop	{r3, pc}
 801ec30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801ec34:	d21c      	bcs.n	801ec70 <scalbnf+0x68>
 801ec36:	4b1f      	ldr	r3, [pc, #124]	; (801ecb4 <scalbnf+0xac>)
 801ec38:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801ecb8 <scalbnf+0xb0>
 801ec3c:	4298      	cmp	r0, r3
 801ec3e:	ee60 0a27 	vmul.f32	s1, s0, s15
 801ec42:	db10      	blt.n	801ec66 <scalbnf+0x5e>
 801ec44:	ee10 2a90 	vmov	r2, s1
 801ec48:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801ec4c:	3b19      	subs	r3, #25
 801ec4e:	4403      	add	r3, r0
 801ec50:	2bfe      	cmp	r3, #254	; 0xfe
 801ec52:	dd0f      	ble.n	801ec74 <scalbnf+0x6c>
 801ec54:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801ecbc <scalbnf+0xb4>
 801ec58:	eeb0 0a48 	vmov.f32	s0, s16
 801ec5c:	f000 f841 	bl	801ece2 <copysignf>
 801ec60:	ee60 0a08 	vmul.f32	s1, s0, s16
 801ec64:	e7df      	b.n	801ec26 <scalbnf+0x1e>
 801ec66:	eddf 7a16 	vldr	s15, [pc, #88]	; 801ecc0 <scalbnf+0xb8>
 801ec6a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801ec6e:	e7da      	b.n	801ec26 <scalbnf+0x1e>
 801ec70:	0ddb      	lsrs	r3, r3, #23
 801ec72:	e7ec      	b.n	801ec4e <scalbnf+0x46>
 801ec74:	2b00      	cmp	r3, #0
 801ec76:	dd06      	ble.n	801ec86 <scalbnf+0x7e>
 801ec78:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801ec7c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801ec80:	ee00 3a90 	vmov	s1, r3
 801ec84:	e7cf      	b.n	801ec26 <scalbnf+0x1e>
 801ec86:	f113 0f16 	cmn.w	r3, #22
 801ec8a:	da06      	bge.n	801ec9a <scalbnf+0x92>
 801ec8c:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ec90:	4298      	cmp	r0, r3
 801ec92:	dcdf      	bgt.n	801ec54 <scalbnf+0x4c>
 801ec94:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801ecc0 <scalbnf+0xb8>
 801ec98:	e7de      	b.n	801ec58 <scalbnf+0x50>
 801ec9a:	3319      	adds	r3, #25
 801ec9c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801eca0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801eca4:	eddf 7a07 	vldr	s15, [pc, #28]	; 801ecc4 <scalbnf+0xbc>
 801eca8:	ee07 3a10 	vmov	s14, r3
 801ecac:	ee67 0a27 	vmul.f32	s1, s14, s15
 801ecb0:	e7b9      	b.n	801ec26 <scalbnf+0x1e>
 801ecb2:	bf00      	nop
 801ecb4:	ffff3cb0 	.word	0xffff3cb0
 801ecb8:	4c000000 	.word	0x4c000000
 801ecbc:	7149f2ca 	.word	0x7149f2ca
 801ecc0:	0da24260 	.word	0x0da24260
 801ecc4:	33000000 	.word	0x33000000

0801ecc8 <copysign>:
 801ecc8:	ec53 2b10 	vmov	r2, r3, d0
 801eccc:	ee11 0a90 	vmov	r0, s3
 801ecd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ecd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801ecd8:	ea41 0300 	orr.w	r3, r1, r0
 801ecdc:	ec43 2b10 	vmov	d0, r2, r3
 801ece0:	4770      	bx	lr

0801ece2 <copysignf>:
 801ece2:	ee10 3a10 	vmov	r3, s0
 801ece6:	ee10 2a90 	vmov	r2, s1
 801ecea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ecee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801ecf2:	4313      	orrs	r3, r2
 801ecf4:	ee00 3a10 	vmov	s0, r3
 801ecf8:	4770      	bx	lr
	...

0801ecfc <__errno>:
 801ecfc:	4b01      	ldr	r3, [pc, #4]	; (801ed04 <__errno+0x8>)
 801ecfe:	6818      	ldr	r0, [r3, #0]
 801ed00:	4770      	bx	lr
 801ed02:	bf00      	nop
 801ed04:	200014a8 	.word	0x200014a8

0801ed08 <__libc_init_array>:
 801ed08:	b570      	push	{r4, r5, r6, lr}
 801ed0a:	4e0d      	ldr	r6, [pc, #52]	; (801ed40 <__libc_init_array+0x38>)
 801ed0c:	4c0d      	ldr	r4, [pc, #52]	; (801ed44 <__libc_init_array+0x3c>)
 801ed0e:	1ba4      	subs	r4, r4, r6
 801ed10:	10a4      	asrs	r4, r4, #2
 801ed12:	2500      	movs	r5, #0
 801ed14:	42a5      	cmp	r5, r4
 801ed16:	d109      	bne.n	801ed2c <__libc_init_array+0x24>
 801ed18:	4e0b      	ldr	r6, [pc, #44]	; (801ed48 <__libc_init_array+0x40>)
 801ed1a:	4c0c      	ldr	r4, [pc, #48]	; (801ed4c <__libc_init_array+0x44>)
 801ed1c:	f002 feae 	bl	8021a7c <_init>
 801ed20:	1ba4      	subs	r4, r4, r6
 801ed22:	10a4      	asrs	r4, r4, #2
 801ed24:	2500      	movs	r5, #0
 801ed26:	42a5      	cmp	r5, r4
 801ed28:	d105      	bne.n	801ed36 <__libc_init_array+0x2e>
 801ed2a:	bd70      	pop	{r4, r5, r6, pc}
 801ed2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ed30:	4798      	blx	r3
 801ed32:	3501      	adds	r5, #1
 801ed34:	e7ee      	b.n	801ed14 <__libc_init_array+0xc>
 801ed36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ed3a:	4798      	blx	r3
 801ed3c:	3501      	adds	r5, #1
 801ed3e:	e7f2      	b.n	801ed26 <__libc_init_array+0x1e>
 801ed40:	08022a20 	.word	0x08022a20
 801ed44:	08022a20 	.word	0x08022a20
 801ed48:	08022a20 	.word	0x08022a20
 801ed4c:	08022a24 	.word	0x08022a24

0801ed50 <malloc>:
 801ed50:	4b02      	ldr	r3, [pc, #8]	; (801ed5c <malloc+0xc>)
 801ed52:	4601      	mov	r1, r0
 801ed54:	6818      	ldr	r0, [r3, #0]
 801ed56:	f000 b865 	b.w	801ee24 <_malloc_r>
 801ed5a:	bf00      	nop
 801ed5c:	200014a8 	.word	0x200014a8

0801ed60 <memcpy>:
 801ed60:	b510      	push	{r4, lr}
 801ed62:	1e43      	subs	r3, r0, #1
 801ed64:	440a      	add	r2, r1
 801ed66:	4291      	cmp	r1, r2
 801ed68:	d100      	bne.n	801ed6c <memcpy+0xc>
 801ed6a:	bd10      	pop	{r4, pc}
 801ed6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ed70:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ed74:	e7f7      	b.n	801ed66 <memcpy+0x6>

0801ed76 <memset>:
 801ed76:	4402      	add	r2, r0
 801ed78:	4603      	mov	r3, r0
 801ed7a:	4293      	cmp	r3, r2
 801ed7c:	d100      	bne.n	801ed80 <memset+0xa>
 801ed7e:	4770      	bx	lr
 801ed80:	f803 1b01 	strb.w	r1, [r3], #1
 801ed84:	e7f9      	b.n	801ed7a <memset+0x4>
	...

0801ed88 <_free_r>:
 801ed88:	b538      	push	{r3, r4, r5, lr}
 801ed8a:	4605      	mov	r5, r0
 801ed8c:	2900      	cmp	r1, #0
 801ed8e:	d045      	beq.n	801ee1c <_free_r+0x94>
 801ed90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ed94:	1f0c      	subs	r4, r1, #4
 801ed96:	2b00      	cmp	r3, #0
 801ed98:	bfb8      	it	lt
 801ed9a:	18e4      	addlt	r4, r4, r3
 801ed9c:	f001 ffb4 	bl	8020d08 <__malloc_lock>
 801eda0:	4a1f      	ldr	r2, [pc, #124]	; (801ee20 <_free_r+0x98>)
 801eda2:	6813      	ldr	r3, [r2, #0]
 801eda4:	4610      	mov	r0, r2
 801eda6:	b933      	cbnz	r3, 801edb6 <_free_r+0x2e>
 801eda8:	6063      	str	r3, [r4, #4]
 801edaa:	6014      	str	r4, [r2, #0]
 801edac:	4628      	mov	r0, r5
 801edae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801edb2:	f001 bfaa 	b.w	8020d0a <__malloc_unlock>
 801edb6:	42a3      	cmp	r3, r4
 801edb8:	d90c      	bls.n	801edd4 <_free_r+0x4c>
 801edba:	6821      	ldr	r1, [r4, #0]
 801edbc:	1862      	adds	r2, r4, r1
 801edbe:	4293      	cmp	r3, r2
 801edc0:	bf04      	itt	eq
 801edc2:	681a      	ldreq	r2, [r3, #0]
 801edc4:	685b      	ldreq	r3, [r3, #4]
 801edc6:	6063      	str	r3, [r4, #4]
 801edc8:	bf04      	itt	eq
 801edca:	1852      	addeq	r2, r2, r1
 801edcc:	6022      	streq	r2, [r4, #0]
 801edce:	6004      	str	r4, [r0, #0]
 801edd0:	e7ec      	b.n	801edac <_free_r+0x24>
 801edd2:	4613      	mov	r3, r2
 801edd4:	685a      	ldr	r2, [r3, #4]
 801edd6:	b10a      	cbz	r2, 801eddc <_free_r+0x54>
 801edd8:	42a2      	cmp	r2, r4
 801edda:	d9fa      	bls.n	801edd2 <_free_r+0x4a>
 801eddc:	6819      	ldr	r1, [r3, #0]
 801edde:	1858      	adds	r0, r3, r1
 801ede0:	42a0      	cmp	r0, r4
 801ede2:	d10b      	bne.n	801edfc <_free_r+0x74>
 801ede4:	6820      	ldr	r0, [r4, #0]
 801ede6:	4401      	add	r1, r0
 801ede8:	1858      	adds	r0, r3, r1
 801edea:	4282      	cmp	r2, r0
 801edec:	6019      	str	r1, [r3, #0]
 801edee:	d1dd      	bne.n	801edac <_free_r+0x24>
 801edf0:	6810      	ldr	r0, [r2, #0]
 801edf2:	6852      	ldr	r2, [r2, #4]
 801edf4:	605a      	str	r2, [r3, #4]
 801edf6:	4401      	add	r1, r0
 801edf8:	6019      	str	r1, [r3, #0]
 801edfa:	e7d7      	b.n	801edac <_free_r+0x24>
 801edfc:	d902      	bls.n	801ee04 <_free_r+0x7c>
 801edfe:	230c      	movs	r3, #12
 801ee00:	602b      	str	r3, [r5, #0]
 801ee02:	e7d3      	b.n	801edac <_free_r+0x24>
 801ee04:	6820      	ldr	r0, [r4, #0]
 801ee06:	1821      	adds	r1, r4, r0
 801ee08:	428a      	cmp	r2, r1
 801ee0a:	bf04      	itt	eq
 801ee0c:	6811      	ldreq	r1, [r2, #0]
 801ee0e:	6852      	ldreq	r2, [r2, #4]
 801ee10:	6062      	str	r2, [r4, #4]
 801ee12:	bf04      	itt	eq
 801ee14:	1809      	addeq	r1, r1, r0
 801ee16:	6021      	streq	r1, [r4, #0]
 801ee18:	605c      	str	r4, [r3, #4]
 801ee1a:	e7c7      	b.n	801edac <_free_r+0x24>
 801ee1c:	bd38      	pop	{r3, r4, r5, pc}
 801ee1e:	bf00      	nop
 801ee20:	200028e4 	.word	0x200028e4

0801ee24 <_malloc_r>:
 801ee24:	b570      	push	{r4, r5, r6, lr}
 801ee26:	1ccd      	adds	r5, r1, #3
 801ee28:	f025 0503 	bic.w	r5, r5, #3
 801ee2c:	3508      	adds	r5, #8
 801ee2e:	2d0c      	cmp	r5, #12
 801ee30:	bf38      	it	cc
 801ee32:	250c      	movcc	r5, #12
 801ee34:	2d00      	cmp	r5, #0
 801ee36:	4606      	mov	r6, r0
 801ee38:	db01      	blt.n	801ee3e <_malloc_r+0x1a>
 801ee3a:	42a9      	cmp	r1, r5
 801ee3c:	d903      	bls.n	801ee46 <_malloc_r+0x22>
 801ee3e:	230c      	movs	r3, #12
 801ee40:	6033      	str	r3, [r6, #0]
 801ee42:	2000      	movs	r0, #0
 801ee44:	bd70      	pop	{r4, r5, r6, pc}
 801ee46:	f001 ff5f 	bl	8020d08 <__malloc_lock>
 801ee4a:	4a23      	ldr	r2, [pc, #140]	; (801eed8 <_malloc_r+0xb4>)
 801ee4c:	6814      	ldr	r4, [r2, #0]
 801ee4e:	4621      	mov	r1, r4
 801ee50:	b991      	cbnz	r1, 801ee78 <_malloc_r+0x54>
 801ee52:	4c22      	ldr	r4, [pc, #136]	; (801eedc <_malloc_r+0xb8>)
 801ee54:	6823      	ldr	r3, [r4, #0]
 801ee56:	b91b      	cbnz	r3, 801ee60 <_malloc_r+0x3c>
 801ee58:	4630      	mov	r0, r6
 801ee5a:	f000 fd3d 	bl	801f8d8 <_sbrk_r>
 801ee5e:	6020      	str	r0, [r4, #0]
 801ee60:	4629      	mov	r1, r5
 801ee62:	4630      	mov	r0, r6
 801ee64:	f000 fd38 	bl	801f8d8 <_sbrk_r>
 801ee68:	1c43      	adds	r3, r0, #1
 801ee6a:	d126      	bne.n	801eeba <_malloc_r+0x96>
 801ee6c:	230c      	movs	r3, #12
 801ee6e:	6033      	str	r3, [r6, #0]
 801ee70:	4630      	mov	r0, r6
 801ee72:	f001 ff4a 	bl	8020d0a <__malloc_unlock>
 801ee76:	e7e4      	b.n	801ee42 <_malloc_r+0x1e>
 801ee78:	680b      	ldr	r3, [r1, #0]
 801ee7a:	1b5b      	subs	r3, r3, r5
 801ee7c:	d41a      	bmi.n	801eeb4 <_malloc_r+0x90>
 801ee7e:	2b0b      	cmp	r3, #11
 801ee80:	d90f      	bls.n	801eea2 <_malloc_r+0x7e>
 801ee82:	600b      	str	r3, [r1, #0]
 801ee84:	50cd      	str	r5, [r1, r3]
 801ee86:	18cc      	adds	r4, r1, r3
 801ee88:	4630      	mov	r0, r6
 801ee8a:	f001 ff3e 	bl	8020d0a <__malloc_unlock>
 801ee8e:	f104 000b 	add.w	r0, r4, #11
 801ee92:	1d23      	adds	r3, r4, #4
 801ee94:	f020 0007 	bic.w	r0, r0, #7
 801ee98:	1ac3      	subs	r3, r0, r3
 801ee9a:	d01b      	beq.n	801eed4 <_malloc_r+0xb0>
 801ee9c:	425a      	negs	r2, r3
 801ee9e:	50e2      	str	r2, [r4, r3]
 801eea0:	bd70      	pop	{r4, r5, r6, pc}
 801eea2:	428c      	cmp	r4, r1
 801eea4:	bf0d      	iteet	eq
 801eea6:	6863      	ldreq	r3, [r4, #4]
 801eea8:	684b      	ldrne	r3, [r1, #4]
 801eeaa:	6063      	strne	r3, [r4, #4]
 801eeac:	6013      	streq	r3, [r2, #0]
 801eeae:	bf18      	it	ne
 801eeb0:	460c      	movne	r4, r1
 801eeb2:	e7e9      	b.n	801ee88 <_malloc_r+0x64>
 801eeb4:	460c      	mov	r4, r1
 801eeb6:	6849      	ldr	r1, [r1, #4]
 801eeb8:	e7ca      	b.n	801ee50 <_malloc_r+0x2c>
 801eeba:	1cc4      	adds	r4, r0, #3
 801eebc:	f024 0403 	bic.w	r4, r4, #3
 801eec0:	42a0      	cmp	r0, r4
 801eec2:	d005      	beq.n	801eed0 <_malloc_r+0xac>
 801eec4:	1a21      	subs	r1, r4, r0
 801eec6:	4630      	mov	r0, r6
 801eec8:	f000 fd06 	bl	801f8d8 <_sbrk_r>
 801eecc:	3001      	adds	r0, #1
 801eece:	d0cd      	beq.n	801ee6c <_malloc_r+0x48>
 801eed0:	6025      	str	r5, [r4, #0]
 801eed2:	e7d9      	b.n	801ee88 <_malloc_r+0x64>
 801eed4:	bd70      	pop	{r4, r5, r6, pc}
 801eed6:	bf00      	nop
 801eed8:	200028e4 	.word	0x200028e4
 801eedc:	200028e8 	.word	0x200028e8

0801eee0 <__cvt>:
 801eee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801eee4:	ec55 4b10 	vmov	r4, r5, d0
 801eee8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801eeea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801eeee:	2d00      	cmp	r5, #0
 801eef0:	460e      	mov	r6, r1
 801eef2:	4691      	mov	r9, r2
 801eef4:	4619      	mov	r1, r3
 801eef6:	bfb8      	it	lt
 801eef8:	4622      	movlt	r2, r4
 801eefa:	462b      	mov	r3, r5
 801eefc:	f027 0720 	bic.w	r7, r7, #32
 801ef00:	bfbb      	ittet	lt
 801ef02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801ef06:	461d      	movlt	r5, r3
 801ef08:	2300      	movge	r3, #0
 801ef0a:	232d      	movlt	r3, #45	; 0x2d
 801ef0c:	bfb8      	it	lt
 801ef0e:	4614      	movlt	r4, r2
 801ef10:	2f46      	cmp	r7, #70	; 0x46
 801ef12:	700b      	strb	r3, [r1, #0]
 801ef14:	d004      	beq.n	801ef20 <__cvt+0x40>
 801ef16:	2f45      	cmp	r7, #69	; 0x45
 801ef18:	d100      	bne.n	801ef1c <__cvt+0x3c>
 801ef1a:	3601      	adds	r6, #1
 801ef1c:	2102      	movs	r1, #2
 801ef1e:	e000      	b.n	801ef22 <__cvt+0x42>
 801ef20:	2103      	movs	r1, #3
 801ef22:	ab03      	add	r3, sp, #12
 801ef24:	9301      	str	r3, [sp, #4]
 801ef26:	ab02      	add	r3, sp, #8
 801ef28:	9300      	str	r3, [sp, #0]
 801ef2a:	4632      	mov	r2, r6
 801ef2c:	4653      	mov	r3, sl
 801ef2e:	ec45 4b10 	vmov	d0, r4, r5
 801ef32:	f000 ff2d 	bl	801fd90 <_dtoa_r>
 801ef36:	2f47      	cmp	r7, #71	; 0x47
 801ef38:	4680      	mov	r8, r0
 801ef3a:	d102      	bne.n	801ef42 <__cvt+0x62>
 801ef3c:	f019 0f01 	tst.w	r9, #1
 801ef40:	d026      	beq.n	801ef90 <__cvt+0xb0>
 801ef42:	2f46      	cmp	r7, #70	; 0x46
 801ef44:	eb08 0906 	add.w	r9, r8, r6
 801ef48:	d111      	bne.n	801ef6e <__cvt+0x8e>
 801ef4a:	f898 3000 	ldrb.w	r3, [r8]
 801ef4e:	2b30      	cmp	r3, #48	; 0x30
 801ef50:	d10a      	bne.n	801ef68 <__cvt+0x88>
 801ef52:	2200      	movs	r2, #0
 801ef54:	2300      	movs	r3, #0
 801ef56:	4620      	mov	r0, r4
 801ef58:	4629      	mov	r1, r5
 801ef5a:	f7e1 fdb9 	bl	8000ad0 <__aeabi_dcmpeq>
 801ef5e:	b918      	cbnz	r0, 801ef68 <__cvt+0x88>
 801ef60:	f1c6 0601 	rsb	r6, r6, #1
 801ef64:	f8ca 6000 	str.w	r6, [sl]
 801ef68:	f8da 3000 	ldr.w	r3, [sl]
 801ef6c:	4499      	add	r9, r3
 801ef6e:	2200      	movs	r2, #0
 801ef70:	2300      	movs	r3, #0
 801ef72:	4620      	mov	r0, r4
 801ef74:	4629      	mov	r1, r5
 801ef76:	f7e1 fdab 	bl	8000ad0 <__aeabi_dcmpeq>
 801ef7a:	b938      	cbnz	r0, 801ef8c <__cvt+0xac>
 801ef7c:	2230      	movs	r2, #48	; 0x30
 801ef7e:	9b03      	ldr	r3, [sp, #12]
 801ef80:	4599      	cmp	r9, r3
 801ef82:	d905      	bls.n	801ef90 <__cvt+0xb0>
 801ef84:	1c59      	adds	r1, r3, #1
 801ef86:	9103      	str	r1, [sp, #12]
 801ef88:	701a      	strb	r2, [r3, #0]
 801ef8a:	e7f8      	b.n	801ef7e <__cvt+0x9e>
 801ef8c:	f8cd 900c 	str.w	r9, [sp, #12]
 801ef90:	9b03      	ldr	r3, [sp, #12]
 801ef92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ef94:	eba3 0308 	sub.w	r3, r3, r8
 801ef98:	4640      	mov	r0, r8
 801ef9a:	6013      	str	r3, [r2, #0]
 801ef9c:	b004      	add	sp, #16
 801ef9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801efa2 <__exponent>:
 801efa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801efa4:	4603      	mov	r3, r0
 801efa6:	2900      	cmp	r1, #0
 801efa8:	bfb8      	it	lt
 801efaa:	4249      	neglt	r1, r1
 801efac:	f803 2b02 	strb.w	r2, [r3], #2
 801efb0:	bfb4      	ite	lt
 801efb2:	222d      	movlt	r2, #45	; 0x2d
 801efb4:	222b      	movge	r2, #43	; 0x2b
 801efb6:	2909      	cmp	r1, #9
 801efb8:	7042      	strb	r2, [r0, #1]
 801efba:	dd20      	ble.n	801effe <__exponent+0x5c>
 801efbc:	f10d 0207 	add.w	r2, sp, #7
 801efc0:	4617      	mov	r7, r2
 801efc2:	260a      	movs	r6, #10
 801efc4:	fb91 f5f6 	sdiv	r5, r1, r6
 801efc8:	fb06 1115 	mls	r1, r6, r5, r1
 801efcc:	3130      	adds	r1, #48	; 0x30
 801efce:	2d09      	cmp	r5, #9
 801efd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 801efd4:	f102 34ff 	add.w	r4, r2, #4294967295
 801efd8:	4629      	mov	r1, r5
 801efda:	dc09      	bgt.n	801eff0 <__exponent+0x4e>
 801efdc:	3130      	adds	r1, #48	; 0x30
 801efde:	3a02      	subs	r2, #2
 801efe0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801efe4:	42ba      	cmp	r2, r7
 801efe6:	461c      	mov	r4, r3
 801efe8:	d304      	bcc.n	801eff4 <__exponent+0x52>
 801efea:	1a20      	subs	r0, r4, r0
 801efec:	b003      	add	sp, #12
 801efee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eff0:	4622      	mov	r2, r4
 801eff2:	e7e7      	b.n	801efc4 <__exponent+0x22>
 801eff4:	f812 1b01 	ldrb.w	r1, [r2], #1
 801eff8:	f803 1b01 	strb.w	r1, [r3], #1
 801effc:	e7f2      	b.n	801efe4 <__exponent+0x42>
 801effe:	2230      	movs	r2, #48	; 0x30
 801f000:	461c      	mov	r4, r3
 801f002:	4411      	add	r1, r2
 801f004:	f804 2b02 	strb.w	r2, [r4], #2
 801f008:	7059      	strb	r1, [r3, #1]
 801f00a:	e7ee      	b.n	801efea <__exponent+0x48>

0801f00c <_printf_float>:
 801f00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f010:	b08d      	sub	sp, #52	; 0x34
 801f012:	460c      	mov	r4, r1
 801f014:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f018:	4616      	mov	r6, r2
 801f01a:	461f      	mov	r7, r3
 801f01c:	4605      	mov	r5, r0
 801f01e:	f001 fe01 	bl	8020c24 <_localeconv_r>
 801f022:	6803      	ldr	r3, [r0, #0]
 801f024:	9304      	str	r3, [sp, #16]
 801f026:	4618      	mov	r0, r3
 801f028:	f7e1 f8da 	bl	80001e0 <strlen>
 801f02c:	2300      	movs	r3, #0
 801f02e:	930a      	str	r3, [sp, #40]	; 0x28
 801f030:	f8d8 3000 	ldr.w	r3, [r8]
 801f034:	9005      	str	r0, [sp, #20]
 801f036:	3307      	adds	r3, #7
 801f038:	f023 0307 	bic.w	r3, r3, #7
 801f03c:	f103 0208 	add.w	r2, r3, #8
 801f040:	f894 a018 	ldrb.w	sl, [r4, #24]
 801f044:	f8d4 b000 	ldr.w	fp, [r4]
 801f048:	f8c8 2000 	str.w	r2, [r8]
 801f04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f050:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801f054:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801f058:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f05c:	9307      	str	r3, [sp, #28]
 801f05e:	f8cd 8018 	str.w	r8, [sp, #24]
 801f062:	f04f 32ff 	mov.w	r2, #4294967295
 801f066:	4ba5      	ldr	r3, [pc, #660]	; (801f2fc <_printf_float+0x2f0>)
 801f068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f06c:	f7e1 fd62 	bl	8000b34 <__aeabi_dcmpun>
 801f070:	2800      	cmp	r0, #0
 801f072:	f040 81fb 	bne.w	801f46c <_printf_float+0x460>
 801f076:	f04f 32ff 	mov.w	r2, #4294967295
 801f07a:	4ba0      	ldr	r3, [pc, #640]	; (801f2fc <_printf_float+0x2f0>)
 801f07c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f080:	f7e1 fd3a 	bl	8000af8 <__aeabi_dcmple>
 801f084:	2800      	cmp	r0, #0
 801f086:	f040 81f1 	bne.w	801f46c <_printf_float+0x460>
 801f08a:	2200      	movs	r2, #0
 801f08c:	2300      	movs	r3, #0
 801f08e:	4640      	mov	r0, r8
 801f090:	4649      	mov	r1, r9
 801f092:	f7e1 fd27 	bl	8000ae4 <__aeabi_dcmplt>
 801f096:	b110      	cbz	r0, 801f09e <_printf_float+0x92>
 801f098:	232d      	movs	r3, #45	; 0x2d
 801f09a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f09e:	4b98      	ldr	r3, [pc, #608]	; (801f300 <_printf_float+0x2f4>)
 801f0a0:	4a98      	ldr	r2, [pc, #608]	; (801f304 <_printf_float+0x2f8>)
 801f0a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801f0a6:	bf8c      	ite	hi
 801f0a8:	4690      	movhi	r8, r2
 801f0aa:	4698      	movls	r8, r3
 801f0ac:	2303      	movs	r3, #3
 801f0ae:	f02b 0204 	bic.w	r2, fp, #4
 801f0b2:	6123      	str	r3, [r4, #16]
 801f0b4:	6022      	str	r2, [r4, #0]
 801f0b6:	f04f 0900 	mov.w	r9, #0
 801f0ba:	9700      	str	r7, [sp, #0]
 801f0bc:	4633      	mov	r3, r6
 801f0be:	aa0b      	add	r2, sp, #44	; 0x2c
 801f0c0:	4621      	mov	r1, r4
 801f0c2:	4628      	mov	r0, r5
 801f0c4:	f000 f9e2 	bl	801f48c <_printf_common>
 801f0c8:	3001      	adds	r0, #1
 801f0ca:	f040 8093 	bne.w	801f1f4 <_printf_float+0x1e8>
 801f0ce:	f04f 30ff 	mov.w	r0, #4294967295
 801f0d2:	b00d      	add	sp, #52	; 0x34
 801f0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0d8:	6861      	ldr	r1, [r4, #4]
 801f0da:	1c4b      	adds	r3, r1, #1
 801f0dc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801f0e0:	d13f      	bne.n	801f162 <_printf_float+0x156>
 801f0e2:	2306      	movs	r3, #6
 801f0e4:	6063      	str	r3, [r4, #4]
 801f0e6:	2300      	movs	r3, #0
 801f0e8:	9303      	str	r3, [sp, #12]
 801f0ea:	ab0a      	add	r3, sp, #40	; 0x28
 801f0ec:	9302      	str	r3, [sp, #8]
 801f0ee:	ab09      	add	r3, sp, #36	; 0x24
 801f0f0:	9300      	str	r3, [sp, #0]
 801f0f2:	ec49 8b10 	vmov	d0, r8, r9
 801f0f6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f0fa:	6022      	str	r2, [r4, #0]
 801f0fc:	f8cd a004 	str.w	sl, [sp, #4]
 801f100:	6861      	ldr	r1, [r4, #4]
 801f102:	4628      	mov	r0, r5
 801f104:	f7ff feec 	bl	801eee0 <__cvt>
 801f108:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801f10c:	2b47      	cmp	r3, #71	; 0x47
 801f10e:	4680      	mov	r8, r0
 801f110:	d109      	bne.n	801f126 <_printf_float+0x11a>
 801f112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f114:	1cd8      	adds	r0, r3, #3
 801f116:	db02      	blt.n	801f11e <_printf_float+0x112>
 801f118:	6862      	ldr	r2, [r4, #4]
 801f11a:	4293      	cmp	r3, r2
 801f11c:	dd57      	ble.n	801f1ce <_printf_float+0x1c2>
 801f11e:	f1aa 0a02 	sub.w	sl, sl, #2
 801f122:	fa5f fa8a 	uxtb.w	sl, sl
 801f126:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801f12a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f12c:	d834      	bhi.n	801f198 <_printf_float+0x18c>
 801f12e:	3901      	subs	r1, #1
 801f130:	4652      	mov	r2, sl
 801f132:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f136:	9109      	str	r1, [sp, #36]	; 0x24
 801f138:	f7ff ff33 	bl	801efa2 <__exponent>
 801f13c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f13e:	1883      	adds	r3, r0, r2
 801f140:	2a01      	cmp	r2, #1
 801f142:	4681      	mov	r9, r0
 801f144:	6123      	str	r3, [r4, #16]
 801f146:	dc02      	bgt.n	801f14e <_printf_float+0x142>
 801f148:	6822      	ldr	r2, [r4, #0]
 801f14a:	07d1      	lsls	r1, r2, #31
 801f14c:	d501      	bpl.n	801f152 <_printf_float+0x146>
 801f14e:	3301      	adds	r3, #1
 801f150:	6123      	str	r3, [r4, #16]
 801f152:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f156:	2b00      	cmp	r3, #0
 801f158:	d0af      	beq.n	801f0ba <_printf_float+0xae>
 801f15a:	232d      	movs	r3, #45	; 0x2d
 801f15c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f160:	e7ab      	b.n	801f0ba <_printf_float+0xae>
 801f162:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801f166:	d002      	beq.n	801f16e <_printf_float+0x162>
 801f168:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801f16c:	d1bb      	bne.n	801f0e6 <_printf_float+0xda>
 801f16e:	b189      	cbz	r1, 801f194 <_printf_float+0x188>
 801f170:	2300      	movs	r3, #0
 801f172:	9303      	str	r3, [sp, #12]
 801f174:	ab0a      	add	r3, sp, #40	; 0x28
 801f176:	9302      	str	r3, [sp, #8]
 801f178:	ab09      	add	r3, sp, #36	; 0x24
 801f17a:	9300      	str	r3, [sp, #0]
 801f17c:	ec49 8b10 	vmov	d0, r8, r9
 801f180:	6022      	str	r2, [r4, #0]
 801f182:	f8cd a004 	str.w	sl, [sp, #4]
 801f186:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f18a:	4628      	mov	r0, r5
 801f18c:	f7ff fea8 	bl	801eee0 <__cvt>
 801f190:	4680      	mov	r8, r0
 801f192:	e7be      	b.n	801f112 <_printf_float+0x106>
 801f194:	2301      	movs	r3, #1
 801f196:	e7a5      	b.n	801f0e4 <_printf_float+0xd8>
 801f198:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801f19c:	d119      	bne.n	801f1d2 <_printf_float+0x1c6>
 801f19e:	2900      	cmp	r1, #0
 801f1a0:	6863      	ldr	r3, [r4, #4]
 801f1a2:	dd0c      	ble.n	801f1be <_printf_float+0x1b2>
 801f1a4:	6121      	str	r1, [r4, #16]
 801f1a6:	b913      	cbnz	r3, 801f1ae <_printf_float+0x1a2>
 801f1a8:	6822      	ldr	r2, [r4, #0]
 801f1aa:	07d2      	lsls	r2, r2, #31
 801f1ac:	d502      	bpl.n	801f1b4 <_printf_float+0x1a8>
 801f1ae:	3301      	adds	r3, #1
 801f1b0:	440b      	add	r3, r1
 801f1b2:	6123      	str	r3, [r4, #16]
 801f1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1b6:	65a3      	str	r3, [r4, #88]	; 0x58
 801f1b8:	f04f 0900 	mov.w	r9, #0
 801f1bc:	e7c9      	b.n	801f152 <_printf_float+0x146>
 801f1be:	b913      	cbnz	r3, 801f1c6 <_printf_float+0x1ba>
 801f1c0:	6822      	ldr	r2, [r4, #0]
 801f1c2:	07d0      	lsls	r0, r2, #31
 801f1c4:	d501      	bpl.n	801f1ca <_printf_float+0x1be>
 801f1c6:	3302      	adds	r3, #2
 801f1c8:	e7f3      	b.n	801f1b2 <_printf_float+0x1a6>
 801f1ca:	2301      	movs	r3, #1
 801f1cc:	e7f1      	b.n	801f1b2 <_printf_float+0x1a6>
 801f1ce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801f1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f1d6:	4293      	cmp	r3, r2
 801f1d8:	db05      	blt.n	801f1e6 <_printf_float+0x1da>
 801f1da:	6822      	ldr	r2, [r4, #0]
 801f1dc:	6123      	str	r3, [r4, #16]
 801f1de:	07d1      	lsls	r1, r2, #31
 801f1e0:	d5e8      	bpl.n	801f1b4 <_printf_float+0x1a8>
 801f1e2:	3301      	adds	r3, #1
 801f1e4:	e7e5      	b.n	801f1b2 <_printf_float+0x1a6>
 801f1e6:	2b00      	cmp	r3, #0
 801f1e8:	bfd4      	ite	le
 801f1ea:	f1c3 0302 	rsble	r3, r3, #2
 801f1ee:	2301      	movgt	r3, #1
 801f1f0:	4413      	add	r3, r2
 801f1f2:	e7de      	b.n	801f1b2 <_printf_float+0x1a6>
 801f1f4:	6823      	ldr	r3, [r4, #0]
 801f1f6:	055a      	lsls	r2, r3, #21
 801f1f8:	d407      	bmi.n	801f20a <_printf_float+0x1fe>
 801f1fa:	6923      	ldr	r3, [r4, #16]
 801f1fc:	4642      	mov	r2, r8
 801f1fe:	4631      	mov	r1, r6
 801f200:	4628      	mov	r0, r5
 801f202:	47b8      	blx	r7
 801f204:	3001      	adds	r0, #1
 801f206:	d12b      	bne.n	801f260 <_printf_float+0x254>
 801f208:	e761      	b.n	801f0ce <_printf_float+0xc2>
 801f20a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801f20e:	f240 80e2 	bls.w	801f3d6 <_printf_float+0x3ca>
 801f212:	2200      	movs	r2, #0
 801f214:	2300      	movs	r3, #0
 801f216:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f21a:	f7e1 fc59 	bl	8000ad0 <__aeabi_dcmpeq>
 801f21e:	2800      	cmp	r0, #0
 801f220:	d03c      	beq.n	801f29c <_printf_float+0x290>
 801f222:	2301      	movs	r3, #1
 801f224:	4a38      	ldr	r2, [pc, #224]	; (801f308 <_printf_float+0x2fc>)
 801f226:	4631      	mov	r1, r6
 801f228:	4628      	mov	r0, r5
 801f22a:	47b8      	blx	r7
 801f22c:	3001      	adds	r0, #1
 801f22e:	f43f af4e 	beq.w	801f0ce <_printf_float+0xc2>
 801f232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f236:	429a      	cmp	r2, r3
 801f238:	db02      	blt.n	801f240 <_printf_float+0x234>
 801f23a:	6823      	ldr	r3, [r4, #0]
 801f23c:	07d8      	lsls	r0, r3, #31
 801f23e:	d50f      	bpl.n	801f260 <_printf_float+0x254>
 801f240:	9b05      	ldr	r3, [sp, #20]
 801f242:	9a04      	ldr	r2, [sp, #16]
 801f244:	4631      	mov	r1, r6
 801f246:	4628      	mov	r0, r5
 801f248:	47b8      	blx	r7
 801f24a:	3001      	adds	r0, #1
 801f24c:	f43f af3f 	beq.w	801f0ce <_printf_float+0xc2>
 801f250:	f04f 0800 	mov.w	r8, #0
 801f254:	f104 091a 	add.w	r9, r4, #26
 801f258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f25a:	3b01      	subs	r3, #1
 801f25c:	4598      	cmp	r8, r3
 801f25e:	db12      	blt.n	801f286 <_printf_float+0x27a>
 801f260:	6823      	ldr	r3, [r4, #0]
 801f262:	079b      	lsls	r3, r3, #30
 801f264:	d509      	bpl.n	801f27a <_printf_float+0x26e>
 801f266:	f04f 0800 	mov.w	r8, #0
 801f26a:	f104 0919 	add.w	r9, r4, #25
 801f26e:	68e3      	ldr	r3, [r4, #12]
 801f270:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f272:	1a9b      	subs	r3, r3, r2
 801f274:	4598      	cmp	r8, r3
 801f276:	f2c0 80ee 	blt.w	801f456 <_printf_float+0x44a>
 801f27a:	68e0      	ldr	r0, [r4, #12]
 801f27c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f27e:	4298      	cmp	r0, r3
 801f280:	bfb8      	it	lt
 801f282:	4618      	movlt	r0, r3
 801f284:	e725      	b.n	801f0d2 <_printf_float+0xc6>
 801f286:	2301      	movs	r3, #1
 801f288:	464a      	mov	r2, r9
 801f28a:	4631      	mov	r1, r6
 801f28c:	4628      	mov	r0, r5
 801f28e:	47b8      	blx	r7
 801f290:	3001      	adds	r0, #1
 801f292:	f43f af1c 	beq.w	801f0ce <_printf_float+0xc2>
 801f296:	f108 0801 	add.w	r8, r8, #1
 801f29a:	e7dd      	b.n	801f258 <_printf_float+0x24c>
 801f29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	dc34      	bgt.n	801f30c <_printf_float+0x300>
 801f2a2:	2301      	movs	r3, #1
 801f2a4:	4a18      	ldr	r2, [pc, #96]	; (801f308 <_printf_float+0x2fc>)
 801f2a6:	4631      	mov	r1, r6
 801f2a8:	4628      	mov	r0, r5
 801f2aa:	47b8      	blx	r7
 801f2ac:	3001      	adds	r0, #1
 801f2ae:	f43f af0e 	beq.w	801f0ce <_printf_float+0xc2>
 801f2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f2b4:	b923      	cbnz	r3, 801f2c0 <_printf_float+0x2b4>
 801f2b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2b8:	b913      	cbnz	r3, 801f2c0 <_printf_float+0x2b4>
 801f2ba:	6823      	ldr	r3, [r4, #0]
 801f2bc:	07d9      	lsls	r1, r3, #31
 801f2be:	d5cf      	bpl.n	801f260 <_printf_float+0x254>
 801f2c0:	9b05      	ldr	r3, [sp, #20]
 801f2c2:	9a04      	ldr	r2, [sp, #16]
 801f2c4:	4631      	mov	r1, r6
 801f2c6:	4628      	mov	r0, r5
 801f2c8:	47b8      	blx	r7
 801f2ca:	3001      	adds	r0, #1
 801f2cc:	f43f aeff 	beq.w	801f0ce <_printf_float+0xc2>
 801f2d0:	f04f 0900 	mov.w	r9, #0
 801f2d4:	f104 0a1a 	add.w	sl, r4, #26
 801f2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f2da:	425b      	negs	r3, r3
 801f2dc:	4599      	cmp	r9, r3
 801f2de:	db01      	blt.n	801f2e4 <_printf_float+0x2d8>
 801f2e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2e2:	e78b      	b.n	801f1fc <_printf_float+0x1f0>
 801f2e4:	2301      	movs	r3, #1
 801f2e6:	4652      	mov	r2, sl
 801f2e8:	4631      	mov	r1, r6
 801f2ea:	4628      	mov	r0, r5
 801f2ec:	47b8      	blx	r7
 801f2ee:	3001      	adds	r0, #1
 801f2f0:	f43f aeed 	beq.w	801f0ce <_printf_float+0xc2>
 801f2f4:	f109 0901 	add.w	r9, r9, #1
 801f2f8:	e7ee      	b.n	801f2d8 <_printf_float+0x2cc>
 801f2fa:	bf00      	nop
 801f2fc:	7fefffff 	.word	0x7fefffff
 801f300:	0802275c 	.word	0x0802275c
 801f304:	08022760 	.word	0x08022760
 801f308:	0802276c 	.word	0x0802276c
 801f30c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f30e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f310:	429a      	cmp	r2, r3
 801f312:	bfa8      	it	ge
 801f314:	461a      	movge	r2, r3
 801f316:	2a00      	cmp	r2, #0
 801f318:	4691      	mov	r9, r2
 801f31a:	dc38      	bgt.n	801f38e <_printf_float+0x382>
 801f31c:	f104 031a 	add.w	r3, r4, #26
 801f320:	f04f 0b00 	mov.w	fp, #0
 801f324:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f328:	9306      	str	r3, [sp, #24]
 801f32a:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801f32e:	ebaa 0309 	sub.w	r3, sl, r9
 801f332:	459b      	cmp	fp, r3
 801f334:	db33      	blt.n	801f39e <_printf_float+0x392>
 801f336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f33a:	429a      	cmp	r2, r3
 801f33c:	db3a      	blt.n	801f3b4 <_printf_float+0x3a8>
 801f33e:	6823      	ldr	r3, [r4, #0]
 801f340:	07da      	lsls	r2, r3, #31
 801f342:	d437      	bmi.n	801f3b4 <_printf_float+0x3a8>
 801f344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f346:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f348:	eba3 020a 	sub.w	r2, r3, sl
 801f34c:	eba3 0901 	sub.w	r9, r3, r1
 801f350:	4591      	cmp	r9, r2
 801f352:	bfa8      	it	ge
 801f354:	4691      	movge	r9, r2
 801f356:	f1b9 0f00 	cmp.w	r9, #0
 801f35a:	dc33      	bgt.n	801f3c4 <_printf_float+0x3b8>
 801f35c:	f04f 0800 	mov.w	r8, #0
 801f360:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f364:	f104 0a1a 	add.w	sl, r4, #26
 801f368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f36a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f36c:	1a9b      	subs	r3, r3, r2
 801f36e:	eba3 0309 	sub.w	r3, r3, r9
 801f372:	4598      	cmp	r8, r3
 801f374:	f6bf af74 	bge.w	801f260 <_printf_float+0x254>
 801f378:	2301      	movs	r3, #1
 801f37a:	4652      	mov	r2, sl
 801f37c:	4631      	mov	r1, r6
 801f37e:	4628      	mov	r0, r5
 801f380:	47b8      	blx	r7
 801f382:	3001      	adds	r0, #1
 801f384:	f43f aea3 	beq.w	801f0ce <_printf_float+0xc2>
 801f388:	f108 0801 	add.w	r8, r8, #1
 801f38c:	e7ec      	b.n	801f368 <_printf_float+0x35c>
 801f38e:	4613      	mov	r3, r2
 801f390:	4631      	mov	r1, r6
 801f392:	4642      	mov	r2, r8
 801f394:	4628      	mov	r0, r5
 801f396:	47b8      	blx	r7
 801f398:	3001      	adds	r0, #1
 801f39a:	d1bf      	bne.n	801f31c <_printf_float+0x310>
 801f39c:	e697      	b.n	801f0ce <_printf_float+0xc2>
 801f39e:	2301      	movs	r3, #1
 801f3a0:	9a06      	ldr	r2, [sp, #24]
 801f3a2:	4631      	mov	r1, r6
 801f3a4:	4628      	mov	r0, r5
 801f3a6:	47b8      	blx	r7
 801f3a8:	3001      	adds	r0, #1
 801f3aa:	f43f ae90 	beq.w	801f0ce <_printf_float+0xc2>
 801f3ae:	f10b 0b01 	add.w	fp, fp, #1
 801f3b2:	e7ba      	b.n	801f32a <_printf_float+0x31e>
 801f3b4:	9b05      	ldr	r3, [sp, #20]
 801f3b6:	9a04      	ldr	r2, [sp, #16]
 801f3b8:	4631      	mov	r1, r6
 801f3ba:	4628      	mov	r0, r5
 801f3bc:	47b8      	blx	r7
 801f3be:	3001      	adds	r0, #1
 801f3c0:	d1c0      	bne.n	801f344 <_printf_float+0x338>
 801f3c2:	e684      	b.n	801f0ce <_printf_float+0xc2>
 801f3c4:	464b      	mov	r3, r9
 801f3c6:	eb08 020a 	add.w	r2, r8, sl
 801f3ca:	4631      	mov	r1, r6
 801f3cc:	4628      	mov	r0, r5
 801f3ce:	47b8      	blx	r7
 801f3d0:	3001      	adds	r0, #1
 801f3d2:	d1c3      	bne.n	801f35c <_printf_float+0x350>
 801f3d4:	e67b      	b.n	801f0ce <_printf_float+0xc2>
 801f3d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f3d8:	2a01      	cmp	r2, #1
 801f3da:	dc01      	bgt.n	801f3e0 <_printf_float+0x3d4>
 801f3dc:	07db      	lsls	r3, r3, #31
 801f3de:	d537      	bpl.n	801f450 <_printf_float+0x444>
 801f3e0:	2301      	movs	r3, #1
 801f3e2:	4642      	mov	r2, r8
 801f3e4:	4631      	mov	r1, r6
 801f3e6:	4628      	mov	r0, r5
 801f3e8:	47b8      	blx	r7
 801f3ea:	3001      	adds	r0, #1
 801f3ec:	f43f ae6f 	beq.w	801f0ce <_printf_float+0xc2>
 801f3f0:	9b05      	ldr	r3, [sp, #20]
 801f3f2:	9a04      	ldr	r2, [sp, #16]
 801f3f4:	4631      	mov	r1, r6
 801f3f6:	4628      	mov	r0, r5
 801f3f8:	47b8      	blx	r7
 801f3fa:	3001      	adds	r0, #1
 801f3fc:	f43f ae67 	beq.w	801f0ce <_printf_float+0xc2>
 801f400:	2200      	movs	r2, #0
 801f402:	2300      	movs	r3, #0
 801f404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f408:	f7e1 fb62 	bl	8000ad0 <__aeabi_dcmpeq>
 801f40c:	b158      	cbz	r0, 801f426 <_printf_float+0x41a>
 801f40e:	f04f 0800 	mov.w	r8, #0
 801f412:	f104 0a1a 	add.w	sl, r4, #26
 801f416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f418:	3b01      	subs	r3, #1
 801f41a:	4598      	cmp	r8, r3
 801f41c:	db0d      	blt.n	801f43a <_printf_float+0x42e>
 801f41e:	464b      	mov	r3, r9
 801f420:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801f424:	e6eb      	b.n	801f1fe <_printf_float+0x1f2>
 801f426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f428:	f108 0201 	add.w	r2, r8, #1
 801f42c:	3b01      	subs	r3, #1
 801f42e:	4631      	mov	r1, r6
 801f430:	4628      	mov	r0, r5
 801f432:	47b8      	blx	r7
 801f434:	3001      	adds	r0, #1
 801f436:	d1f2      	bne.n	801f41e <_printf_float+0x412>
 801f438:	e649      	b.n	801f0ce <_printf_float+0xc2>
 801f43a:	2301      	movs	r3, #1
 801f43c:	4652      	mov	r2, sl
 801f43e:	4631      	mov	r1, r6
 801f440:	4628      	mov	r0, r5
 801f442:	47b8      	blx	r7
 801f444:	3001      	adds	r0, #1
 801f446:	f43f ae42 	beq.w	801f0ce <_printf_float+0xc2>
 801f44a:	f108 0801 	add.w	r8, r8, #1
 801f44e:	e7e2      	b.n	801f416 <_printf_float+0x40a>
 801f450:	2301      	movs	r3, #1
 801f452:	4642      	mov	r2, r8
 801f454:	e7eb      	b.n	801f42e <_printf_float+0x422>
 801f456:	2301      	movs	r3, #1
 801f458:	464a      	mov	r2, r9
 801f45a:	4631      	mov	r1, r6
 801f45c:	4628      	mov	r0, r5
 801f45e:	47b8      	blx	r7
 801f460:	3001      	adds	r0, #1
 801f462:	f43f ae34 	beq.w	801f0ce <_printf_float+0xc2>
 801f466:	f108 0801 	add.w	r8, r8, #1
 801f46a:	e700      	b.n	801f26e <_printf_float+0x262>
 801f46c:	4642      	mov	r2, r8
 801f46e:	464b      	mov	r3, r9
 801f470:	4640      	mov	r0, r8
 801f472:	4649      	mov	r1, r9
 801f474:	f7e1 fb5e 	bl	8000b34 <__aeabi_dcmpun>
 801f478:	2800      	cmp	r0, #0
 801f47a:	f43f ae2d 	beq.w	801f0d8 <_printf_float+0xcc>
 801f47e:	4b01      	ldr	r3, [pc, #4]	; (801f484 <_printf_float+0x478>)
 801f480:	4a01      	ldr	r2, [pc, #4]	; (801f488 <_printf_float+0x47c>)
 801f482:	e60e      	b.n	801f0a2 <_printf_float+0x96>
 801f484:	08022764 	.word	0x08022764
 801f488:	08022768 	.word	0x08022768

0801f48c <_printf_common>:
 801f48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f490:	4691      	mov	r9, r2
 801f492:	461f      	mov	r7, r3
 801f494:	688a      	ldr	r2, [r1, #8]
 801f496:	690b      	ldr	r3, [r1, #16]
 801f498:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f49c:	4293      	cmp	r3, r2
 801f49e:	bfb8      	it	lt
 801f4a0:	4613      	movlt	r3, r2
 801f4a2:	f8c9 3000 	str.w	r3, [r9]
 801f4a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f4aa:	4606      	mov	r6, r0
 801f4ac:	460c      	mov	r4, r1
 801f4ae:	b112      	cbz	r2, 801f4b6 <_printf_common+0x2a>
 801f4b0:	3301      	adds	r3, #1
 801f4b2:	f8c9 3000 	str.w	r3, [r9]
 801f4b6:	6823      	ldr	r3, [r4, #0]
 801f4b8:	0699      	lsls	r1, r3, #26
 801f4ba:	bf42      	ittt	mi
 801f4bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 801f4c0:	3302      	addmi	r3, #2
 801f4c2:	f8c9 3000 	strmi.w	r3, [r9]
 801f4c6:	6825      	ldr	r5, [r4, #0]
 801f4c8:	f015 0506 	ands.w	r5, r5, #6
 801f4cc:	d107      	bne.n	801f4de <_printf_common+0x52>
 801f4ce:	f104 0a19 	add.w	sl, r4, #25
 801f4d2:	68e3      	ldr	r3, [r4, #12]
 801f4d4:	f8d9 2000 	ldr.w	r2, [r9]
 801f4d8:	1a9b      	subs	r3, r3, r2
 801f4da:	429d      	cmp	r5, r3
 801f4dc:	db29      	blt.n	801f532 <_printf_common+0xa6>
 801f4de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801f4e2:	6822      	ldr	r2, [r4, #0]
 801f4e4:	3300      	adds	r3, #0
 801f4e6:	bf18      	it	ne
 801f4e8:	2301      	movne	r3, #1
 801f4ea:	0692      	lsls	r2, r2, #26
 801f4ec:	d42e      	bmi.n	801f54c <_printf_common+0xc0>
 801f4ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f4f2:	4639      	mov	r1, r7
 801f4f4:	4630      	mov	r0, r6
 801f4f6:	47c0      	blx	r8
 801f4f8:	3001      	adds	r0, #1
 801f4fa:	d021      	beq.n	801f540 <_printf_common+0xb4>
 801f4fc:	6823      	ldr	r3, [r4, #0]
 801f4fe:	68e5      	ldr	r5, [r4, #12]
 801f500:	f8d9 2000 	ldr.w	r2, [r9]
 801f504:	f003 0306 	and.w	r3, r3, #6
 801f508:	2b04      	cmp	r3, #4
 801f50a:	bf08      	it	eq
 801f50c:	1aad      	subeq	r5, r5, r2
 801f50e:	68a3      	ldr	r3, [r4, #8]
 801f510:	6922      	ldr	r2, [r4, #16]
 801f512:	bf0c      	ite	eq
 801f514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f518:	2500      	movne	r5, #0
 801f51a:	4293      	cmp	r3, r2
 801f51c:	bfc4      	itt	gt
 801f51e:	1a9b      	subgt	r3, r3, r2
 801f520:	18ed      	addgt	r5, r5, r3
 801f522:	f04f 0900 	mov.w	r9, #0
 801f526:	341a      	adds	r4, #26
 801f528:	454d      	cmp	r5, r9
 801f52a:	d11b      	bne.n	801f564 <_printf_common+0xd8>
 801f52c:	2000      	movs	r0, #0
 801f52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f532:	2301      	movs	r3, #1
 801f534:	4652      	mov	r2, sl
 801f536:	4639      	mov	r1, r7
 801f538:	4630      	mov	r0, r6
 801f53a:	47c0      	blx	r8
 801f53c:	3001      	adds	r0, #1
 801f53e:	d103      	bne.n	801f548 <_printf_common+0xbc>
 801f540:	f04f 30ff 	mov.w	r0, #4294967295
 801f544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f548:	3501      	adds	r5, #1
 801f54a:	e7c2      	b.n	801f4d2 <_printf_common+0x46>
 801f54c:	18e1      	adds	r1, r4, r3
 801f54e:	1c5a      	adds	r2, r3, #1
 801f550:	2030      	movs	r0, #48	; 0x30
 801f552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f556:	4422      	add	r2, r4
 801f558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f55c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f560:	3302      	adds	r3, #2
 801f562:	e7c4      	b.n	801f4ee <_printf_common+0x62>
 801f564:	2301      	movs	r3, #1
 801f566:	4622      	mov	r2, r4
 801f568:	4639      	mov	r1, r7
 801f56a:	4630      	mov	r0, r6
 801f56c:	47c0      	blx	r8
 801f56e:	3001      	adds	r0, #1
 801f570:	d0e6      	beq.n	801f540 <_printf_common+0xb4>
 801f572:	f109 0901 	add.w	r9, r9, #1
 801f576:	e7d7      	b.n	801f528 <_printf_common+0x9c>

0801f578 <_printf_i>:
 801f578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f57c:	4617      	mov	r7, r2
 801f57e:	7e0a      	ldrb	r2, [r1, #24]
 801f580:	b085      	sub	sp, #20
 801f582:	2a6e      	cmp	r2, #110	; 0x6e
 801f584:	4698      	mov	r8, r3
 801f586:	4606      	mov	r6, r0
 801f588:	460c      	mov	r4, r1
 801f58a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f58c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 801f590:	f000 80bc 	beq.w	801f70c <_printf_i+0x194>
 801f594:	d81a      	bhi.n	801f5cc <_printf_i+0x54>
 801f596:	2a63      	cmp	r2, #99	; 0x63
 801f598:	d02e      	beq.n	801f5f8 <_printf_i+0x80>
 801f59a:	d80a      	bhi.n	801f5b2 <_printf_i+0x3a>
 801f59c:	2a00      	cmp	r2, #0
 801f59e:	f000 80c8 	beq.w	801f732 <_printf_i+0x1ba>
 801f5a2:	2a58      	cmp	r2, #88	; 0x58
 801f5a4:	f000 808a 	beq.w	801f6bc <_printf_i+0x144>
 801f5a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f5ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 801f5b0:	e02a      	b.n	801f608 <_printf_i+0x90>
 801f5b2:	2a64      	cmp	r2, #100	; 0x64
 801f5b4:	d001      	beq.n	801f5ba <_printf_i+0x42>
 801f5b6:	2a69      	cmp	r2, #105	; 0x69
 801f5b8:	d1f6      	bne.n	801f5a8 <_printf_i+0x30>
 801f5ba:	6821      	ldr	r1, [r4, #0]
 801f5bc:	681a      	ldr	r2, [r3, #0]
 801f5be:	f011 0f80 	tst.w	r1, #128	; 0x80
 801f5c2:	d023      	beq.n	801f60c <_printf_i+0x94>
 801f5c4:	1d11      	adds	r1, r2, #4
 801f5c6:	6019      	str	r1, [r3, #0]
 801f5c8:	6813      	ldr	r3, [r2, #0]
 801f5ca:	e027      	b.n	801f61c <_printf_i+0xa4>
 801f5cc:	2a73      	cmp	r2, #115	; 0x73
 801f5ce:	f000 80b4 	beq.w	801f73a <_printf_i+0x1c2>
 801f5d2:	d808      	bhi.n	801f5e6 <_printf_i+0x6e>
 801f5d4:	2a6f      	cmp	r2, #111	; 0x6f
 801f5d6:	d02a      	beq.n	801f62e <_printf_i+0xb6>
 801f5d8:	2a70      	cmp	r2, #112	; 0x70
 801f5da:	d1e5      	bne.n	801f5a8 <_printf_i+0x30>
 801f5dc:	680a      	ldr	r2, [r1, #0]
 801f5de:	f042 0220 	orr.w	r2, r2, #32
 801f5e2:	600a      	str	r2, [r1, #0]
 801f5e4:	e003      	b.n	801f5ee <_printf_i+0x76>
 801f5e6:	2a75      	cmp	r2, #117	; 0x75
 801f5e8:	d021      	beq.n	801f62e <_printf_i+0xb6>
 801f5ea:	2a78      	cmp	r2, #120	; 0x78
 801f5ec:	d1dc      	bne.n	801f5a8 <_printf_i+0x30>
 801f5ee:	2278      	movs	r2, #120	; 0x78
 801f5f0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 801f5f4:	496e      	ldr	r1, [pc, #440]	; (801f7b0 <_printf_i+0x238>)
 801f5f6:	e064      	b.n	801f6c2 <_printf_i+0x14a>
 801f5f8:	681a      	ldr	r2, [r3, #0]
 801f5fa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 801f5fe:	1d11      	adds	r1, r2, #4
 801f600:	6019      	str	r1, [r3, #0]
 801f602:	6813      	ldr	r3, [r2, #0]
 801f604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f608:	2301      	movs	r3, #1
 801f60a:	e0a3      	b.n	801f754 <_printf_i+0x1dc>
 801f60c:	f011 0f40 	tst.w	r1, #64	; 0x40
 801f610:	f102 0104 	add.w	r1, r2, #4
 801f614:	6019      	str	r1, [r3, #0]
 801f616:	d0d7      	beq.n	801f5c8 <_printf_i+0x50>
 801f618:	f9b2 3000 	ldrsh.w	r3, [r2]
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	da03      	bge.n	801f628 <_printf_i+0xb0>
 801f620:	222d      	movs	r2, #45	; 0x2d
 801f622:	425b      	negs	r3, r3
 801f624:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801f628:	4962      	ldr	r1, [pc, #392]	; (801f7b4 <_printf_i+0x23c>)
 801f62a:	220a      	movs	r2, #10
 801f62c:	e017      	b.n	801f65e <_printf_i+0xe6>
 801f62e:	6820      	ldr	r0, [r4, #0]
 801f630:	6819      	ldr	r1, [r3, #0]
 801f632:	f010 0f80 	tst.w	r0, #128	; 0x80
 801f636:	d003      	beq.n	801f640 <_printf_i+0xc8>
 801f638:	1d08      	adds	r0, r1, #4
 801f63a:	6018      	str	r0, [r3, #0]
 801f63c:	680b      	ldr	r3, [r1, #0]
 801f63e:	e006      	b.n	801f64e <_printf_i+0xd6>
 801f640:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f644:	f101 0004 	add.w	r0, r1, #4
 801f648:	6018      	str	r0, [r3, #0]
 801f64a:	d0f7      	beq.n	801f63c <_printf_i+0xc4>
 801f64c:	880b      	ldrh	r3, [r1, #0]
 801f64e:	4959      	ldr	r1, [pc, #356]	; (801f7b4 <_printf_i+0x23c>)
 801f650:	2a6f      	cmp	r2, #111	; 0x6f
 801f652:	bf14      	ite	ne
 801f654:	220a      	movne	r2, #10
 801f656:	2208      	moveq	r2, #8
 801f658:	2000      	movs	r0, #0
 801f65a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801f65e:	6865      	ldr	r5, [r4, #4]
 801f660:	60a5      	str	r5, [r4, #8]
 801f662:	2d00      	cmp	r5, #0
 801f664:	f2c0 809c 	blt.w	801f7a0 <_printf_i+0x228>
 801f668:	6820      	ldr	r0, [r4, #0]
 801f66a:	f020 0004 	bic.w	r0, r0, #4
 801f66e:	6020      	str	r0, [r4, #0]
 801f670:	2b00      	cmp	r3, #0
 801f672:	d13f      	bne.n	801f6f4 <_printf_i+0x17c>
 801f674:	2d00      	cmp	r5, #0
 801f676:	f040 8095 	bne.w	801f7a4 <_printf_i+0x22c>
 801f67a:	4675      	mov	r5, lr
 801f67c:	2a08      	cmp	r2, #8
 801f67e:	d10b      	bne.n	801f698 <_printf_i+0x120>
 801f680:	6823      	ldr	r3, [r4, #0]
 801f682:	07da      	lsls	r2, r3, #31
 801f684:	d508      	bpl.n	801f698 <_printf_i+0x120>
 801f686:	6923      	ldr	r3, [r4, #16]
 801f688:	6862      	ldr	r2, [r4, #4]
 801f68a:	429a      	cmp	r2, r3
 801f68c:	bfde      	ittt	le
 801f68e:	2330      	movle	r3, #48	; 0x30
 801f690:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f694:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f698:	ebae 0305 	sub.w	r3, lr, r5
 801f69c:	6123      	str	r3, [r4, #16]
 801f69e:	f8cd 8000 	str.w	r8, [sp]
 801f6a2:	463b      	mov	r3, r7
 801f6a4:	aa03      	add	r2, sp, #12
 801f6a6:	4621      	mov	r1, r4
 801f6a8:	4630      	mov	r0, r6
 801f6aa:	f7ff feef 	bl	801f48c <_printf_common>
 801f6ae:	3001      	adds	r0, #1
 801f6b0:	d155      	bne.n	801f75e <_printf_i+0x1e6>
 801f6b2:	f04f 30ff 	mov.w	r0, #4294967295
 801f6b6:	b005      	add	sp, #20
 801f6b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f6bc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 801f6c0:	493c      	ldr	r1, [pc, #240]	; (801f7b4 <_printf_i+0x23c>)
 801f6c2:	6822      	ldr	r2, [r4, #0]
 801f6c4:	6818      	ldr	r0, [r3, #0]
 801f6c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 801f6ca:	f100 0504 	add.w	r5, r0, #4
 801f6ce:	601d      	str	r5, [r3, #0]
 801f6d0:	d001      	beq.n	801f6d6 <_printf_i+0x15e>
 801f6d2:	6803      	ldr	r3, [r0, #0]
 801f6d4:	e002      	b.n	801f6dc <_printf_i+0x164>
 801f6d6:	0655      	lsls	r5, r2, #25
 801f6d8:	d5fb      	bpl.n	801f6d2 <_printf_i+0x15a>
 801f6da:	8803      	ldrh	r3, [r0, #0]
 801f6dc:	07d0      	lsls	r0, r2, #31
 801f6de:	bf44      	itt	mi
 801f6e0:	f042 0220 	orrmi.w	r2, r2, #32
 801f6e4:	6022      	strmi	r2, [r4, #0]
 801f6e6:	b91b      	cbnz	r3, 801f6f0 <_printf_i+0x178>
 801f6e8:	6822      	ldr	r2, [r4, #0]
 801f6ea:	f022 0220 	bic.w	r2, r2, #32
 801f6ee:	6022      	str	r2, [r4, #0]
 801f6f0:	2210      	movs	r2, #16
 801f6f2:	e7b1      	b.n	801f658 <_printf_i+0xe0>
 801f6f4:	4675      	mov	r5, lr
 801f6f6:	fbb3 f0f2 	udiv	r0, r3, r2
 801f6fa:	fb02 3310 	mls	r3, r2, r0, r3
 801f6fe:	5ccb      	ldrb	r3, [r1, r3]
 801f700:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801f704:	4603      	mov	r3, r0
 801f706:	2800      	cmp	r0, #0
 801f708:	d1f5      	bne.n	801f6f6 <_printf_i+0x17e>
 801f70a:	e7b7      	b.n	801f67c <_printf_i+0x104>
 801f70c:	6808      	ldr	r0, [r1, #0]
 801f70e:	681a      	ldr	r2, [r3, #0]
 801f710:	6949      	ldr	r1, [r1, #20]
 801f712:	f010 0f80 	tst.w	r0, #128	; 0x80
 801f716:	d004      	beq.n	801f722 <_printf_i+0x1aa>
 801f718:	1d10      	adds	r0, r2, #4
 801f71a:	6018      	str	r0, [r3, #0]
 801f71c:	6813      	ldr	r3, [r2, #0]
 801f71e:	6019      	str	r1, [r3, #0]
 801f720:	e007      	b.n	801f732 <_printf_i+0x1ba>
 801f722:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f726:	f102 0004 	add.w	r0, r2, #4
 801f72a:	6018      	str	r0, [r3, #0]
 801f72c:	6813      	ldr	r3, [r2, #0]
 801f72e:	d0f6      	beq.n	801f71e <_printf_i+0x1a6>
 801f730:	8019      	strh	r1, [r3, #0]
 801f732:	2300      	movs	r3, #0
 801f734:	6123      	str	r3, [r4, #16]
 801f736:	4675      	mov	r5, lr
 801f738:	e7b1      	b.n	801f69e <_printf_i+0x126>
 801f73a:	681a      	ldr	r2, [r3, #0]
 801f73c:	1d11      	adds	r1, r2, #4
 801f73e:	6019      	str	r1, [r3, #0]
 801f740:	6815      	ldr	r5, [r2, #0]
 801f742:	6862      	ldr	r2, [r4, #4]
 801f744:	2100      	movs	r1, #0
 801f746:	4628      	mov	r0, r5
 801f748:	f7e0 fd52 	bl	80001f0 <memchr>
 801f74c:	b108      	cbz	r0, 801f752 <_printf_i+0x1da>
 801f74e:	1b40      	subs	r0, r0, r5
 801f750:	6060      	str	r0, [r4, #4]
 801f752:	6863      	ldr	r3, [r4, #4]
 801f754:	6123      	str	r3, [r4, #16]
 801f756:	2300      	movs	r3, #0
 801f758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f75c:	e79f      	b.n	801f69e <_printf_i+0x126>
 801f75e:	6923      	ldr	r3, [r4, #16]
 801f760:	462a      	mov	r2, r5
 801f762:	4639      	mov	r1, r7
 801f764:	4630      	mov	r0, r6
 801f766:	47c0      	blx	r8
 801f768:	3001      	adds	r0, #1
 801f76a:	d0a2      	beq.n	801f6b2 <_printf_i+0x13a>
 801f76c:	6823      	ldr	r3, [r4, #0]
 801f76e:	079b      	lsls	r3, r3, #30
 801f770:	d507      	bpl.n	801f782 <_printf_i+0x20a>
 801f772:	2500      	movs	r5, #0
 801f774:	f104 0919 	add.w	r9, r4, #25
 801f778:	68e3      	ldr	r3, [r4, #12]
 801f77a:	9a03      	ldr	r2, [sp, #12]
 801f77c:	1a9b      	subs	r3, r3, r2
 801f77e:	429d      	cmp	r5, r3
 801f780:	db05      	blt.n	801f78e <_printf_i+0x216>
 801f782:	68e0      	ldr	r0, [r4, #12]
 801f784:	9b03      	ldr	r3, [sp, #12]
 801f786:	4298      	cmp	r0, r3
 801f788:	bfb8      	it	lt
 801f78a:	4618      	movlt	r0, r3
 801f78c:	e793      	b.n	801f6b6 <_printf_i+0x13e>
 801f78e:	2301      	movs	r3, #1
 801f790:	464a      	mov	r2, r9
 801f792:	4639      	mov	r1, r7
 801f794:	4630      	mov	r0, r6
 801f796:	47c0      	blx	r8
 801f798:	3001      	adds	r0, #1
 801f79a:	d08a      	beq.n	801f6b2 <_printf_i+0x13a>
 801f79c:	3501      	adds	r5, #1
 801f79e:	e7eb      	b.n	801f778 <_printf_i+0x200>
 801f7a0:	2b00      	cmp	r3, #0
 801f7a2:	d1a7      	bne.n	801f6f4 <_printf_i+0x17c>
 801f7a4:	780b      	ldrb	r3, [r1, #0]
 801f7a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f7aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f7ae:	e765      	b.n	801f67c <_printf_i+0x104>
 801f7b0:	0802277f 	.word	0x0802277f
 801f7b4:	0802276e 	.word	0x0802276e

0801f7b8 <iprintf>:
 801f7b8:	b40f      	push	{r0, r1, r2, r3}
 801f7ba:	4b0a      	ldr	r3, [pc, #40]	; (801f7e4 <iprintf+0x2c>)
 801f7bc:	b513      	push	{r0, r1, r4, lr}
 801f7be:	681c      	ldr	r4, [r3, #0]
 801f7c0:	b124      	cbz	r4, 801f7cc <iprintf+0x14>
 801f7c2:	69a3      	ldr	r3, [r4, #24]
 801f7c4:	b913      	cbnz	r3, 801f7cc <iprintf+0x14>
 801f7c6:	4620      	mov	r0, r4
 801f7c8:	f001 f9a2 	bl	8020b10 <__sinit>
 801f7cc:	ab05      	add	r3, sp, #20
 801f7ce:	9a04      	ldr	r2, [sp, #16]
 801f7d0:	68a1      	ldr	r1, [r4, #8]
 801f7d2:	9301      	str	r3, [sp, #4]
 801f7d4:	4620      	mov	r0, r4
 801f7d6:	f001 fef1 	bl	80215bc <_vfiprintf_r>
 801f7da:	b002      	add	sp, #8
 801f7dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f7e0:	b004      	add	sp, #16
 801f7e2:	4770      	bx	lr
 801f7e4:	200014a8 	.word	0x200014a8

0801f7e8 <putchar>:
 801f7e8:	b538      	push	{r3, r4, r5, lr}
 801f7ea:	4b08      	ldr	r3, [pc, #32]	; (801f80c <putchar+0x24>)
 801f7ec:	681c      	ldr	r4, [r3, #0]
 801f7ee:	4605      	mov	r5, r0
 801f7f0:	b124      	cbz	r4, 801f7fc <putchar+0x14>
 801f7f2:	69a3      	ldr	r3, [r4, #24]
 801f7f4:	b913      	cbnz	r3, 801f7fc <putchar+0x14>
 801f7f6:	4620      	mov	r0, r4
 801f7f8:	f001 f98a 	bl	8020b10 <__sinit>
 801f7fc:	68a2      	ldr	r2, [r4, #8]
 801f7fe:	4629      	mov	r1, r5
 801f800:	4620      	mov	r0, r4
 801f802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f806:	f001 bfef 	b.w	80217e8 <_putc_r>
 801f80a:	bf00      	nop
 801f80c:	200014a8 	.word	0x200014a8

0801f810 <_puts_r>:
 801f810:	b570      	push	{r4, r5, r6, lr}
 801f812:	460e      	mov	r6, r1
 801f814:	4605      	mov	r5, r0
 801f816:	b118      	cbz	r0, 801f820 <_puts_r+0x10>
 801f818:	6983      	ldr	r3, [r0, #24]
 801f81a:	b90b      	cbnz	r3, 801f820 <_puts_r+0x10>
 801f81c:	f001 f978 	bl	8020b10 <__sinit>
 801f820:	69ab      	ldr	r3, [r5, #24]
 801f822:	68ac      	ldr	r4, [r5, #8]
 801f824:	b913      	cbnz	r3, 801f82c <_puts_r+0x1c>
 801f826:	4628      	mov	r0, r5
 801f828:	f001 f972 	bl	8020b10 <__sinit>
 801f82c:	4b23      	ldr	r3, [pc, #140]	; (801f8bc <_puts_r+0xac>)
 801f82e:	429c      	cmp	r4, r3
 801f830:	d117      	bne.n	801f862 <_puts_r+0x52>
 801f832:	686c      	ldr	r4, [r5, #4]
 801f834:	89a3      	ldrh	r3, [r4, #12]
 801f836:	071b      	lsls	r3, r3, #28
 801f838:	d51d      	bpl.n	801f876 <_puts_r+0x66>
 801f83a:	6923      	ldr	r3, [r4, #16]
 801f83c:	b1db      	cbz	r3, 801f876 <_puts_r+0x66>
 801f83e:	3e01      	subs	r6, #1
 801f840:	68a3      	ldr	r3, [r4, #8]
 801f842:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f846:	3b01      	subs	r3, #1
 801f848:	60a3      	str	r3, [r4, #8]
 801f84a:	b9e9      	cbnz	r1, 801f888 <_puts_r+0x78>
 801f84c:	2b00      	cmp	r3, #0
 801f84e:	da2e      	bge.n	801f8ae <_puts_r+0x9e>
 801f850:	4622      	mov	r2, r4
 801f852:	210a      	movs	r1, #10
 801f854:	4628      	mov	r0, r5
 801f856:	f000 f94f 	bl	801faf8 <__swbuf_r>
 801f85a:	3001      	adds	r0, #1
 801f85c:	d011      	beq.n	801f882 <_puts_r+0x72>
 801f85e:	200a      	movs	r0, #10
 801f860:	bd70      	pop	{r4, r5, r6, pc}
 801f862:	4b17      	ldr	r3, [pc, #92]	; (801f8c0 <_puts_r+0xb0>)
 801f864:	429c      	cmp	r4, r3
 801f866:	d101      	bne.n	801f86c <_puts_r+0x5c>
 801f868:	68ac      	ldr	r4, [r5, #8]
 801f86a:	e7e3      	b.n	801f834 <_puts_r+0x24>
 801f86c:	4b15      	ldr	r3, [pc, #84]	; (801f8c4 <_puts_r+0xb4>)
 801f86e:	429c      	cmp	r4, r3
 801f870:	bf08      	it	eq
 801f872:	68ec      	ldreq	r4, [r5, #12]
 801f874:	e7de      	b.n	801f834 <_puts_r+0x24>
 801f876:	4621      	mov	r1, r4
 801f878:	4628      	mov	r0, r5
 801f87a:	f000 f98f 	bl	801fb9c <__swsetup_r>
 801f87e:	2800      	cmp	r0, #0
 801f880:	d0dd      	beq.n	801f83e <_puts_r+0x2e>
 801f882:	f04f 30ff 	mov.w	r0, #4294967295
 801f886:	bd70      	pop	{r4, r5, r6, pc}
 801f888:	2b00      	cmp	r3, #0
 801f88a:	da04      	bge.n	801f896 <_puts_r+0x86>
 801f88c:	69a2      	ldr	r2, [r4, #24]
 801f88e:	4293      	cmp	r3, r2
 801f890:	db06      	blt.n	801f8a0 <_puts_r+0x90>
 801f892:	290a      	cmp	r1, #10
 801f894:	d004      	beq.n	801f8a0 <_puts_r+0x90>
 801f896:	6823      	ldr	r3, [r4, #0]
 801f898:	1c5a      	adds	r2, r3, #1
 801f89a:	6022      	str	r2, [r4, #0]
 801f89c:	7019      	strb	r1, [r3, #0]
 801f89e:	e7cf      	b.n	801f840 <_puts_r+0x30>
 801f8a0:	4622      	mov	r2, r4
 801f8a2:	4628      	mov	r0, r5
 801f8a4:	f000 f928 	bl	801faf8 <__swbuf_r>
 801f8a8:	3001      	adds	r0, #1
 801f8aa:	d1c9      	bne.n	801f840 <_puts_r+0x30>
 801f8ac:	e7e9      	b.n	801f882 <_puts_r+0x72>
 801f8ae:	6823      	ldr	r3, [r4, #0]
 801f8b0:	200a      	movs	r0, #10
 801f8b2:	1c5a      	adds	r2, r3, #1
 801f8b4:	6022      	str	r2, [r4, #0]
 801f8b6:	7018      	strb	r0, [r3, #0]
 801f8b8:	bd70      	pop	{r4, r5, r6, pc}
 801f8ba:	bf00      	nop
 801f8bc:	080227c0 	.word	0x080227c0
 801f8c0:	080227e0 	.word	0x080227e0
 801f8c4:	080227a0 	.word	0x080227a0

0801f8c8 <puts>:
 801f8c8:	4b02      	ldr	r3, [pc, #8]	; (801f8d4 <puts+0xc>)
 801f8ca:	4601      	mov	r1, r0
 801f8cc:	6818      	ldr	r0, [r3, #0]
 801f8ce:	f7ff bf9f 	b.w	801f810 <_puts_r>
 801f8d2:	bf00      	nop
 801f8d4:	200014a8 	.word	0x200014a8

0801f8d8 <_sbrk_r>:
 801f8d8:	b538      	push	{r3, r4, r5, lr}
 801f8da:	4c06      	ldr	r4, [pc, #24]	; (801f8f4 <_sbrk_r+0x1c>)
 801f8dc:	2300      	movs	r3, #0
 801f8de:	4605      	mov	r5, r0
 801f8e0:	4608      	mov	r0, r1
 801f8e2:	6023      	str	r3, [r4, #0]
 801f8e4:	f7f0 fb6c 	bl	800ffc0 <_sbrk>
 801f8e8:	1c43      	adds	r3, r0, #1
 801f8ea:	d102      	bne.n	801f8f2 <_sbrk_r+0x1a>
 801f8ec:	6823      	ldr	r3, [r4, #0]
 801f8ee:	b103      	cbz	r3, 801f8f2 <_sbrk_r+0x1a>
 801f8f0:	602b      	str	r3, [r5, #0]
 801f8f2:	bd38      	pop	{r3, r4, r5, pc}
 801f8f4:	20003acc 	.word	0x20003acc

0801f8f8 <setvbuf>:
 801f8f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f8fc:	461d      	mov	r5, r3
 801f8fe:	4b51      	ldr	r3, [pc, #324]	; (801fa44 <setvbuf+0x14c>)
 801f900:	681e      	ldr	r6, [r3, #0]
 801f902:	4604      	mov	r4, r0
 801f904:	460f      	mov	r7, r1
 801f906:	4690      	mov	r8, r2
 801f908:	b126      	cbz	r6, 801f914 <setvbuf+0x1c>
 801f90a:	69b3      	ldr	r3, [r6, #24]
 801f90c:	b913      	cbnz	r3, 801f914 <setvbuf+0x1c>
 801f90e:	4630      	mov	r0, r6
 801f910:	f001 f8fe 	bl	8020b10 <__sinit>
 801f914:	4b4c      	ldr	r3, [pc, #304]	; (801fa48 <setvbuf+0x150>)
 801f916:	429c      	cmp	r4, r3
 801f918:	d152      	bne.n	801f9c0 <setvbuf+0xc8>
 801f91a:	6874      	ldr	r4, [r6, #4]
 801f91c:	f1b8 0f02 	cmp.w	r8, #2
 801f920:	d006      	beq.n	801f930 <setvbuf+0x38>
 801f922:	f1b8 0f01 	cmp.w	r8, #1
 801f926:	f200 8089 	bhi.w	801fa3c <setvbuf+0x144>
 801f92a:	2d00      	cmp	r5, #0
 801f92c:	f2c0 8086 	blt.w	801fa3c <setvbuf+0x144>
 801f930:	4621      	mov	r1, r4
 801f932:	4630      	mov	r0, r6
 801f934:	f001 f882 	bl	8020a3c <_fflush_r>
 801f938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f93a:	b141      	cbz	r1, 801f94e <setvbuf+0x56>
 801f93c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f940:	4299      	cmp	r1, r3
 801f942:	d002      	beq.n	801f94a <setvbuf+0x52>
 801f944:	4630      	mov	r0, r6
 801f946:	f7ff fa1f 	bl	801ed88 <_free_r>
 801f94a:	2300      	movs	r3, #0
 801f94c:	6363      	str	r3, [r4, #52]	; 0x34
 801f94e:	2300      	movs	r3, #0
 801f950:	61a3      	str	r3, [r4, #24]
 801f952:	6063      	str	r3, [r4, #4]
 801f954:	89a3      	ldrh	r3, [r4, #12]
 801f956:	061b      	lsls	r3, r3, #24
 801f958:	d503      	bpl.n	801f962 <setvbuf+0x6a>
 801f95a:	6921      	ldr	r1, [r4, #16]
 801f95c:	4630      	mov	r0, r6
 801f95e:	f7ff fa13 	bl	801ed88 <_free_r>
 801f962:	89a3      	ldrh	r3, [r4, #12]
 801f964:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801f968:	f023 0303 	bic.w	r3, r3, #3
 801f96c:	f1b8 0f02 	cmp.w	r8, #2
 801f970:	81a3      	strh	r3, [r4, #12]
 801f972:	d05d      	beq.n	801fa30 <setvbuf+0x138>
 801f974:	ab01      	add	r3, sp, #4
 801f976:	466a      	mov	r2, sp
 801f978:	4621      	mov	r1, r4
 801f97a:	4630      	mov	r0, r6
 801f97c:	f001 f960 	bl	8020c40 <__swhatbuf_r>
 801f980:	89a3      	ldrh	r3, [r4, #12]
 801f982:	4318      	orrs	r0, r3
 801f984:	81a0      	strh	r0, [r4, #12]
 801f986:	bb2d      	cbnz	r5, 801f9d4 <setvbuf+0xdc>
 801f988:	9d00      	ldr	r5, [sp, #0]
 801f98a:	4628      	mov	r0, r5
 801f98c:	f7ff f9e0 	bl	801ed50 <malloc>
 801f990:	4607      	mov	r7, r0
 801f992:	2800      	cmp	r0, #0
 801f994:	d14e      	bne.n	801fa34 <setvbuf+0x13c>
 801f996:	f8dd 9000 	ldr.w	r9, [sp]
 801f99a:	45a9      	cmp	r9, r5
 801f99c:	d13c      	bne.n	801fa18 <setvbuf+0x120>
 801f99e:	f04f 30ff 	mov.w	r0, #4294967295
 801f9a2:	89a3      	ldrh	r3, [r4, #12]
 801f9a4:	f043 0302 	orr.w	r3, r3, #2
 801f9a8:	81a3      	strh	r3, [r4, #12]
 801f9aa:	2300      	movs	r3, #0
 801f9ac:	60a3      	str	r3, [r4, #8]
 801f9ae:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f9b2:	6023      	str	r3, [r4, #0]
 801f9b4:	6123      	str	r3, [r4, #16]
 801f9b6:	2301      	movs	r3, #1
 801f9b8:	6163      	str	r3, [r4, #20]
 801f9ba:	b003      	add	sp, #12
 801f9bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f9c0:	4b22      	ldr	r3, [pc, #136]	; (801fa4c <setvbuf+0x154>)
 801f9c2:	429c      	cmp	r4, r3
 801f9c4:	d101      	bne.n	801f9ca <setvbuf+0xd2>
 801f9c6:	68b4      	ldr	r4, [r6, #8]
 801f9c8:	e7a8      	b.n	801f91c <setvbuf+0x24>
 801f9ca:	4b21      	ldr	r3, [pc, #132]	; (801fa50 <setvbuf+0x158>)
 801f9cc:	429c      	cmp	r4, r3
 801f9ce:	bf08      	it	eq
 801f9d0:	68f4      	ldreq	r4, [r6, #12]
 801f9d2:	e7a3      	b.n	801f91c <setvbuf+0x24>
 801f9d4:	2f00      	cmp	r7, #0
 801f9d6:	d0d8      	beq.n	801f98a <setvbuf+0x92>
 801f9d8:	69b3      	ldr	r3, [r6, #24]
 801f9da:	b913      	cbnz	r3, 801f9e2 <setvbuf+0xea>
 801f9dc:	4630      	mov	r0, r6
 801f9de:	f001 f897 	bl	8020b10 <__sinit>
 801f9e2:	f1b8 0f01 	cmp.w	r8, #1
 801f9e6:	bf08      	it	eq
 801f9e8:	89a3      	ldrheq	r3, [r4, #12]
 801f9ea:	6027      	str	r7, [r4, #0]
 801f9ec:	bf04      	itt	eq
 801f9ee:	f043 0301 	orreq.w	r3, r3, #1
 801f9f2:	81a3      	strheq	r3, [r4, #12]
 801f9f4:	89a3      	ldrh	r3, [r4, #12]
 801f9f6:	6127      	str	r7, [r4, #16]
 801f9f8:	f013 0008 	ands.w	r0, r3, #8
 801f9fc:	6165      	str	r5, [r4, #20]
 801f9fe:	d01b      	beq.n	801fa38 <setvbuf+0x140>
 801fa00:	f013 0001 	ands.w	r0, r3, #1
 801fa04:	bf18      	it	ne
 801fa06:	426d      	negne	r5, r5
 801fa08:	f04f 0300 	mov.w	r3, #0
 801fa0c:	bf1d      	ittte	ne
 801fa0e:	60a3      	strne	r3, [r4, #8]
 801fa10:	61a5      	strne	r5, [r4, #24]
 801fa12:	4618      	movne	r0, r3
 801fa14:	60a5      	streq	r5, [r4, #8]
 801fa16:	e7d0      	b.n	801f9ba <setvbuf+0xc2>
 801fa18:	4648      	mov	r0, r9
 801fa1a:	f7ff f999 	bl	801ed50 <malloc>
 801fa1e:	4607      	mov	r7, r0
 801fa20:	2800      	cmp	r0, #0
 801fa22:	d0bc      	beq.n	801f99e <setvbuf+0xa6>
 801fa24:	89a3      	ldrh	r3, [r4, #12]
 801fa26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fa2a:	81a3      	strh	r3, [r4, #12]
 801fa2c:	464d      	mov	r5, r9
 801fa2e:	e7d3      	b.n	801f9d8 <setvbuf+0xe0>
 801fa30:	2000      	movs	r0, #0
 801fa32:	e7b6      	b.n	801f9a2 <setvbuf+0xaa>
 801fa34:	46a9      	mov	r9, r5
 801fa36:	e7f5      	b.n	801fa24 <setvbuf+0x12c>
 801fa38:	60a0      	str	r0, [r4, #8]
 801fa3a:	e7be      	b.n	801f9ba <setvbuf+0xc2>
 801fa3c:	f04f 30ff 	mov.w	r0, #4294967295
 801fa40:	e7bb      	b.n	801f9ba <setvbuf+0xc2>
 801fa42:	bf00      	nop
 801fa44:	200014a8 	.word	0x200014a8
 801fa48:	080227c0 	.word	0x080227c0
 801fa4c:	080227e0 	.word	0x080227e0
 801fa50:	080227a0 	.word	0x080227a0

0801fa54 <sniprintf>:
 801fa54:	b40c      	push	{r2, r3}
 801fa56:	b530      	push	{r4, r5, lr}
 801fa58:	4b17      	ldr	r3, [pc, #92]	; (801fab8 <sniprintf+0x64>)
 801fa5a:	1e0c      	subs	r4, r1, #0
 801fa5c:	b09d      	sub	sp, #116	; 0x74
 801fa5e:	681d      	ldr	r5, [r3, #0]
 801fa60:	da08      	bge.n	801fa74 <sniprintf+0x20>
 801fa62:	238b      	movs	r3, #139	; 0x8b
 801fa64:	602b      	str	r3, [r5, #0]
 801fa66:	f04f 30ff 	mov.w	r0, #4294967295
 801fa6a:	b01d      	add	sp, #116	; 0x74
 801fa6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fa70:	b002      	add	sp, #8
 801fa72:	4770      	bx	lr
 801fa74:	f44f 7302 	mov.w	r3, #520	; 0x208
 801fa78:	f8ad 3014 	strh.w	r3, [sp, #20]
 801fa7c:	bf14      	ite	ne
 801fa7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801fa82:	4623      	moveq	r3, r4
 801fa84:	9304      	str	r3, [sp, #16]
 801fa86:	9307      	str	r3, [sp, #28]
 801fa88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fa8c:	9002      	str	r0, [sp, #8]
 801fa8e:	9006      	str	r0, [sp, #24]
 801fa90:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fa94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fa96:	ab21      	add	r3, sp, #132	; 0x84
 801fa98:	a902      	add	r1, sp, #8
 801fa9a:	4628      	mov	r0, r5
 801fa9c:	9301      	str	r3, [sp, #4]
 801fa9e:	f001 fc6f 	bl	8021380 <_svfiprintf_r>
 801faa2:	1c43      	adds	r3, r0, #1
 801faa4:	bfbc      	itt	lt
 801faa6:	238b      	movlt	r3, #139	; 0x8b
 801faa8:	602b      	strlt	r3, [r5, #0]
 801faaa:	2c00      	cmp	r4, #0
 801faac:	d0dd      	beq.n	801fa6a <sniprintf+0x16>
 801faae:	9b02      	ldr	r3, [sp, #8]
 801fab0:	2200      	movs	r2, #0
 801fab2:	701a      	strb	r2, [r3, #0]
 801fab4:	e7d9      	b.n	801fa6a <sniprintf+0x16>
 801fab6:	bf00      	nop
 801fab8:	200014a8 	.word	0x200014a8

0801fabc <strcpy>:
 801fabc:	4603      	mov	r3, r0
 801fabe:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fac2:	f803 2b01 	strb.w	r2, [r3], #1
 801fac6:	2a00      	cmp	r2, #0
 801fac8:	d1f9      	bne.n	801fabe <strcpy+0x2>
 801faca:	4770      	bx	lr

0801facc <strncpy>:
 801facc:	b570      	push	{r4, r5, r6, lr}
 801face:	4604      	mov	r4, r0
 801fad0:	b902      	cbnz	r2, 801fad4 <strncpy+0x8>
 801fad2:	bd70      	pop	{r4, r5, r6, pc}
 801fad4:	4623      	mov	r3, r4
 801fad6:	f811 5b01 	ldrb.w	r5, [r1], #1
 801fada:	f803 5b01 	strb.w	r5, [r3], #1
 801fade:	1e56      	subs	r6, r2, #1
 801fae0:	b91d      	cbnz	r5, 801faea <strncpy+0x1e>
 801fae2:	4414      	add	r4, r2
 801fae4:	42a3      	cmp	r3, r4
 801fae6:	d103      	bne.n	801faf0 <strncpy+0x24>
 801fae8:	bd70      	pop	{r4, r5, r6, pc}
 801faea:	461c      	mov	r4, r3
 801faec:	4632      	mov	r2, r6
 801faee:	e7ef      	b.n	801fad0 <strncpy+0x4>
 801faf0:	f803 5b01 	strb.w	r5, [r3], #1
 801faf4:	e7f6      	b.n	801fae4 <strncpy+0x18>
	...

0801faf8 <__swbuf_r>:
 801faf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fafa:	460e      	mov	r6, r1
 801fafc:	4614      	mov	r4, r2
 801fafe:	4605      	mov	r5, r0
 801fb00:	b118      	cbz	r0, 801fb0a <__swbuf_r+0x12>
 801fb02:	6983      	ldr	r3, [r0, #24]
 801fb04:	b90b      	cbnz	r3, 801fb0a <__swbuf_r+0x12>
 801fb06:	f001 f803 	bl	8020b10 <__sinit>
 801fb0a:	4b21      	ldr	r3, [pc, #132]	; (801fb90 <__swbuf_r+0x98>)
 801fb0c:	429c      	cmp	r4, r3
 801fb0e:	d12a      	bne.n	801fb66 <__swbuf_r+0x6e>
 801fb10:	686c      	ldr	r4, [r5, #4]
 801fb12:	69a3      	ldr	r3, [r4, #24]
 801fb14:	60a3      	str	r3, [r4, #8]
 801fb16:	89a3      	ldrh	r3, [r4, #12]
 801fb18:	071a      	lsls	r2, r3, #28
 801fb1a:	d52e      	bpl.n	801fb7a <__swbuf_r+0x82>
 801fb1c:	6923      	ldr	r3, [r4, #16]
 801fb1e:	b363      	cbz	r3, 801fb7a <__swbuf_r+0x82>
 801fb20:	6923      	ldr	r3, [r4, #16]
 801fb22:	6820      	ldr	r0, [r4, #0]
 801fb24:	1ac0      	subs	r0, r0, r3
 801fb26:	6963      	ldr	r3, [r4, #20]
 801fb28:	b2f6      	uxtb	r6, r6
 801fb2a:	4298      	cmp	r0, r3
 801fb2c:	4637      	mov	r7, r6
 801fb2e:	db04      	blt.n	801fb3a <__swbuf_r+0x42>
 801fb30:	4621      	mov	r1, r4
 801fb32:	4628      	mov	r0, r5
 801fb34:	f000 ff82 	bl	8020a3c <_fflush_r>
 801fb38:	bb28      	cbnz	r0, 801fb86 <__swbuf_r+0x8e>
 801fb3a:	68a3      	ldr	r3, [r4, #8]
 801fb3c:	3b01      	subs	r3, #1
 801fb3e:	60a3      	str	r3, [r4, #8]
 801fb40:	6823      	ldr	r3, [r4, #0]
 801fb42:	1c5a      	adds	r2, r3, #1
 801fb44:	6022      	str	r2, [r4, #0]
 801fb46:	701e      	strb	r6, [r3, #0]
 801fb48:	6963      	ldr	r3, [r4, #20]
 801fb4a:	3001      	adds	r0, #1
 801fb4c:	4298      	cmp	r0, r3
 801fb4e:	d004      	beq.n	801fb5a <__swbuf_r+0x62>
 801fb50:	89a3      	ldrh	r3, [r4, #12]
 801fb52:	07db      	lsls	r3, r3, #31
 801fb54:	d519      	bpl.n	801fb8a <__swbuf_r+0x92>
 801fb56:	2e0a      	cmp	r6, #10
 801fb58:	d117      	bne.n	801fb8a <__swbuf_r+0x92>
 801fb5a:	4621      	mov	r1, r4
 801fb5c:	4628      	mov	r0, r5
 801fb5e:	f000 ff6d 	bl	8020a3c <_fflush_r>
 801fb62:	b190      	cbz	r0, 801fb8a <__swbuf_r+0x92>
 801fb64:	e00f      	b.n	801fb86 <__swbuf_r+0x8e>
 801fb66:	4b0b      	ldr	r3, [pc, #44]	; (801fb94 <__swbuf_r+0x9c>)
 801fb68:	429c      	cmp	r4, r3
 801fb6a:	d101      	bne.n	801fb70 <__swbuf_r+0x78>
 801fb6c:	68ac      	ldr	r4, [r5, #8]
 801fb6e:	e7d0      	b.n	801fb12 <__swbuf_r+0x1a>
 801fb70:	4b09      	ldr	r3, [pc, #36]	; (801fb98 <__swbuf_r+0xa0>)
 801fb72:	429c      	cmp	r4, r3
 801fb74:	bf08      	it	eq
 801fb76:	68ec      	ldreq	r4, [r5, #12]
 801fb78:	e7cb      	b.n	801fb12 <__swbuf_r+0x1a>
 801fb7a:	4621      	mov	r1, r4
 801fb7c:	4628      	mov	r0, r5
 801fb7e:	f000 f80d 	bl	801fb9c <__swsetup_r>
 801fb82:	2800      	cmp	r0, #0
 801fb84:	d0cc      	beq.n	801fb20 <__swbuf_r+0x28>
 801fb86:	f04f 37ff 	mov.w	r7, #4294967295
 801fb8a:	4638      	mov	r0, r7
 801fb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb8e:	bf00      	nop
 801fb90:	080227c0 	.word	0x080227c0
 801fb94:	080227e0 	.word	0x080227e0
 801fb98:	080227a0 	.word	0x080227a0

0801fb9c <__swsetup_r>:
 801fb9c:	4b32      	ldr	r3, [pc, #200]	; (801fc68 <__swsetup_r+0xcc>)
 801fb9e:	b570      	push	{r4, r5, r6, lr}
 801fba0:	681d      	ldr	r5, [r3, #0]
 801fba2:	4606      	mov	r6, r0
 801fba4:	460c      	mov	r4, r1
 801fba6:	b125      	cbz	r5, 801fbb2 <__swsetup_r+0x16>
 801fba8:	69ab      	ldr	r3, [r5, #24]
 801fbaa:	b913      	cbnz	r3, 801fbb2 <__swsetup_r+0x16>
 801fbac:	4628      	mov	r0, r5
 801fbae:	f000 ffaf 	bl	8020b10 <__sinit>
 801fbb2:	4b2e      	ldr	r3, [pc, #184]	; (801fc6c <__swsetup_r+0xd0>)
 801fbb4:	429c      	cmp	r4, r3
 801fbb6:	d10f      	bne.n	801fbd8 <__swsetup_r+0x3c>
 801fbb8:	686c      	ldr	r4, [r5, #4]
 801fbba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fbbe:	b29a      	uxth	r2, r3
 801fbc0:	0715      	lsls	r5, r2, #28
 801fbc2:	d42c      	bmi.n	801fc1e <__swsetup_r+0x82>
 801fbc4:	06d0      	lsls	r0, r2, #27
 801fbc6:	d411      	bmi.n	801fbec <__swsetup_r+0x50>
 801fbc8:	2209      	movs	r2, #9
 801fbca:	6032      	str	r2, [r6, #0]
 801fbcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fbd0:	81a3      	strh	r3, [r4, #12]
 801fbd2:	f04f 30ff 	mov.w	r0, #4294967295
 801fbd6:	bd70      	pop	{r4, r5, r6, pc}
 801fbd8:	4b25      	ldr	r3, [pc, #148]	; (801fc70 <__swsetup_r+0xd4>)
 801fbda:	429c      	cmp	r4, r3
 801fbdc:	d101      	bne.n	801fbe2 <__swsetup_r+0x46>
 801fbde:	68ac      	ldr	r4, [r5, #8]
 801fbe0:	e7eb      	b.n	801fbba <__swsetup_r+0x1e>
 801fbe2:	4b24      	ldr	r3, [pc, #144]	; (801fc74 <__swsetup_r+0xd8>)
 801fbe4:	429c      	cmp	r4, r3
 801fbe6:	bf08      	it	eq
 801fbe8:	68ec      	ldreq	r4, [r5, #12]
 801fbea:	e7e6      	b.n	801fbba <__swsetup_r+0x1e>
 801fbec:	0751      	lsls	r1, r2, #29
 801fbee:	d512      	bpl.n	801fc16 <__swsetup_r+0x7a>
 801fbf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fbf2:	b141      	cbz	r1, 801fc06 <__swsetup_r+0x6a>
 801fbf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fbf8:	4299      	cmp	r1, r3
 801fbfa:	d002      	beq.n	801fc02 <__swsetup_r+0x66>
 801fbfc:	4630      	mov	r0, r6
 801fbfe:	f7ff f8c3 	bl	801ed88 <_free_r>
 801fc02:	2300      	movs	r3, #0
 801fc04:	6363      	str	r3, [r4, #52]	; 0x34
 801fc06:	89a3      	ldrh	r3, [r4, #12]
 801fc08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fc0c:	81a3      	strh	r3, [r4, #12]
 801fc0e:	2300      	movs	r3, #0
 801fc10:	6063      	str	r3, [r4, #4]
 801fc12:	6923      	ldr	r3, [r4, #16]
 801fc14:	6023      	str	r3, [r4, #0]
 801fc16:	89a3      	ldrh	r3, [r4, #12]
 801fc18:	f043 0308 	orr.w	r3, r3, #8
 801fc1c:	81a3      	strh	r3, [r4, #12]
 801fc1e:	6923      	ldr	r3, [r4, #16]
 801fc20:	b94b      	cbnz	r3, 801fc36 <__swsetup_r+0x9a>
 801fc22:	89a3      	ldrh	r3, [r4, #12]
 801fc24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fc28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fc2c:	d003      	beq.n	801fc36 <__swsetup_r+0x9a>
 801fc2e:	4621      	mov	r1, r4
 801fc30:	4630      	mov	r0, r6
 801fc32:	f001 f829 	bl	8020c88 <__smakebuf_r>
 801fc36:	89a2      	ldrh	r2, [r4, #12]
 801fc38:	f012 0301 	ands.w	r3, r2, #1
 801fc3c:	d00c      	beq.n	801fc58 <__swsetup_r+0xbc>
 801fc3e:	2300      	movs	r3, #0
 801fc40:	60a3      	str	r3, [r4, #8]
 801fc42:	6963      	ldr	r3, [r4, #20]
 801fc44:	425b      	negs	r3, r3
 801fc46:	61a3      	str	r3, [r4, #24]
 801fc48:	6923      	ldr	r3, [r4, #16]
 801fc4a:	b953      	cbnz	r3, 801fc62 <__swsetup_r+0xc6>
 801fc4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fc50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801fc54:	d1ba      	bne.n	801fbcc <__swsetup_r+0x30>
 801fc56:	bd70      	pop	{r4, r5, r6, pc}
 801fc58:	0792      	lsls	r2, r2, #30
 801fc5a:	bf58      	it	pl
 801fc5c:	6963      	ldrpl	r3, [r4, #20]
 801fc5e:	60a3      	str	r3, [r4, #8]
 801fc60:	e7f2      	b.n	801fc48 <__swsetup_r+0xac>
 801fc62:	2000      	movs	r0, #0
 801fc64:	e7f7      	b.n	801fc56 <__swsetup_r+0xba>
 801fc66:	bf00      	nop
 801fc68:	200014a8 	.word	0x200014a8
 801fc6c:	080227c0 	.word	0x080227c0
 801fc70:	080227e0 	.word	0x080227e0
 801fc74:	080227a0 	.word	0x080227a0

0801fc78 <quorem>:
 801fc78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc7c:	6903      	ldr	r3, [r0, #16]
 801fc7e:	690c      	ldr	r4, [r1, #16]
 801fc80:	429c      	cmp	r4, r3
 801fc82:	4680      	mov	r8, r0
 801fc84:	f300 8082 	bgt.w	801fd8c <quorem+0x114>
 801fc88:	3c01      	subs	r4, #1
 801fc8a:	f101 0714 	add.w	r7, r1, #20
 801fc8e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 801fc92:	f100 0614 	add.w	r6, r0, #20
 801fc96:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801fc9a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801fc9e:	eb06 030e 	add.w	r3, r6, lr
 801fca2:	3501      	adds	r5, #1
 801fca4:	eb07 090e 	add.w	r9, r7, lr
 801fca8:	9301      	str	r3, [sp, #4]
 801fcaa:	fbb0 f5f5 	udiv	r5, r0, r5
 801fcae:	b395      	cbz	r5, 801fd16 <quorem+0x9e>
 801fcb0:	f04f 0a00 	mov.w	sl, #0
 801fcb4:	4638      	mov	r0, r7
 801fcb6:	46b4      	mov	ip, r6
 801fcb8:	46d3      	mov	fp, sl
 801fcba:	f850 2b04 	ldr.w	r2, [r0], #4
 801fcbe:	b293      	uxth	r3, r2
 801fcc0:	fb05 a303 	mla	r3, r5, r3, sl
 801fcc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801fcc8:	b29b      	uxth	r3, r3
 801fcca:	ebab 0303 	sub.w	r3, fp, r3
 801fcce:	0c12      	lsrs	r2, r2, #16
 801fcd0:	f8bc b000 	ldrh.w	fp, [ip]
 801fcd4:	fb05 a202 	mla	r2, r5, r2, sl
 801fcd8:	fa13 f38b 	uxtah	r3, r3, fp
 801fcdc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801fce0:	fa1f fb82 	uxth.w	fp, r2
 801fce4:	f8dc 2000 	ldr.w	r2, [ip]
 801fce8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801fcec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fcf0:	b29b      	uxth	r3, r3
 801fcf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fcf6:	4581      	cmp	r9, r0
 801fcf8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801fcfc:	f84c 3b04 	str.w	r3, [ip], #4
 801fd00:	d2db      	bcs.n	801fcba <quorem+0x42>
 801fd02:	f856 300e 	ldr.w	r3, [r6, lr]
 801fd06:	b933      	cbnz	r3, 801fd16 <quorem+0x9e>
 801fd08:	9b01      	ldr	r3, [sp, #4]
 801fd0a:	3b04      	subs	r3, #4
 801fd0c:	429e      	cmp	r6, r3
 801fd0e:	461a      	mov	r2, r3
 801fd10:	d330      	bcc.n	801fd74 <quorem+0xfc>
 801fd12:	f8c8 4010 	str.w	r4, [r8, #16]
 801fd16:	4640      	mov	r0, r8
 801fd18:	f001 fa01 	bl	802111e <__mcmp>
 801fd1c:	2800      	cmp	r0, #0
 801fd1e:	db25      	blt.n	801fd6c <quorem+0xf4>
 801fd20:	3501      	adds	r5, #1
 801fd22:	4630      	mov	r0, r6
 801fd24:	f04f 0e00 	mov.w	lr, #0
 801fd28:	f857 2b04 	ldr.w	r2, [r7], #4
 801fd2c:	f8d0 c000 	ldr.w	ip, [r0]
 801fd30:	b293      	uxth	r3, r2
 801fd32:	ebae 0303 	sub.w	r3, lr, r3
 801fd36:	0c12      	lsrs	r2, r2, #16
 801fd38:	fa13 f38c 	uxtah	r3, r3, ip
 801fd3c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801fd40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fd44:	b29b      	uxth	r3, r3
 801fd46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fd4a:	45b9      	cmp	r9, r7
 801fd4c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801fd50:	f840 3b04 	str.w	r3, [r0], #4
 801fd54:	d2e8      	bcs.n	801fd28 <quorem+0xb0>
 801fd56:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801fd5a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801fd5e:	b92a      	cbnz	r2, 801fd6c <quorem+0xf4>
 801fd60:	3b04      	subs	r3, #4
 801fd62:	429e      	cmp	r6, r3
 801fd64:	461a      	mov	r2, r3
 801fd66:	d30b      	bcc.n	801fd80 <quorem+0x108>
 801fd68:	f8c8 4010 	str.w	r4, [r8, #16]
 801fd6c:	4628      	mov	r0, r5
 801fd6e:	b003      	add	sp, #12
 801fd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd74:	6812      	ldr	r2, [r2, #0]
 801fd76:	3b04      	subs	r3, #4
 801fd78:	2a00      	cmp	r2, #0
 801fd7a:	d1ca      	bne.n	801fd12 <quorem+0x9a>
 801fd7c:	3c01      	subs	r4, #1
 801fd7e:	e7c5      	b.n	801fd0c <quorem+0x94>
 801fd80:	6812      	ldr	r2, [r2, #0]
 801fd82:	3b04      	subs	r3, #4
 801fd84:	2a00      	cmp	r2, #0
 801fd86:	d1ef      	bne.n	801fd68 <quorem+0xf0>
 801fd88:	3c01      	subs	r4, #1
 801fd8a:	e7ea      	b.n	801fd62 <quorem+0xea>
 801fd8c:	2000      	movs	r0, #0
 801fd8e:	e7ee      	b.n	801fd6e <quorem+0xf6>

0801fd90 <_dtoa_r>:
 801fd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd94:	ec57 6b10 	vmov	r6, r7, d0
 801fd98:	b097      	sub	sp, #92	; 0x5c
 801fd9a:	e9cd 6700 	strd	r6, r7, [sp]
 801fd9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801fda0:	9107      	str	r1, [sp, #28]
 801fda2:	4604      	mov	r4, r0
 801fda4:	920a      	str	r2, [sp, #40]	; 0x28
 801fda6:	930f      	str	r3, [sp, #60]	; 0x3c
 801fda8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801fdaa:	b93e      	cbnz	r6, 801fdbc <_dtoa_r+0x2c>
 801fdac:	2010      	movs	r0, #16
 801fdae:	f7fe ffcf 	bl	801ed50 <malloc>
 801fdb2:	6260      	str	r0, [r4, #36]	; 0x24
 801fdb4:	6046      	str	r6, [r0, #4]
 801fdb6:	6086      	str	r6, [r0, #8]
 801fdb8:	6006      	str	r6, [r0, #0]
 801fdba:	60c6      	str	r6, [r0, #12]
 801fdbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fdbe:	6819      	ldr	r1, [r3, #0]
 801fdc0:	b151      	cbz	r1, 801fdd8 <_dtoa_r+0x48>
 801fdc2:	685a      	ldr	r2, [r3, #4]
 801fdc4:	604a      	str	r2, [r1, #4]
 801fdc6:	2301      	movs	r3, #1
 801fdc8:	4093      	lsls	r3, r2
 801fdca:	608b      	str	r3, [r1, #8]
 801fdcc:	4620      	mov	r0, r4
 801fdce:	f000 ffd1 	bl	8020d74 <_Bfree>
 801fdd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fdd4:	2200      	movs	r2, #0
 801fdd6:	601a      	str	r2, [r3, #0]
 801fdd8:	9b01      	ldr	r3, [sp, #4]
 801fdda:	2b00      	cmp	r3, #0
 801fddc:	bfbf      	itttt	lt
 801fdde:	2301      	movlt	r3, #1
 801fde0:	602b      	strlt	r3, [r5, #0]
 801fde2:	9b01      	ldrlt	r3, [sp, #4]
 801fde4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801fde8:	bfb2      	itee	lt
 801fdea:	9301      	strlt	r3, [sp, #4]
 801fdec:	2300      	movge	r3, #0
 801fdee:	602b      	strge	r3, [r5, #0]
 801fdf0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801fdf4:	4ba8      	ldr	r3, [pc, #672]	; (8020098 <_dtoa_r+0x308>)
 801fdf6:	ea33 0308 	bics.w	r3, r3, r8
 801fdfa:	d11b      	bne.n	801fe34 <_dtoa_r+0xa4>
 801fdfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fdfe:	f242 730f 	movw	r3, #9999	; 0x270f
 801fe02:	6013      	str	r3, [r2, #0]
 801fe04:	9b00      	ldr	r3, [sp, #0]
 801fe06:	b923      	cbnz	r3, 801fe12 <_dtoa_r+0x82>
 801fe08:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801fe0c:	2800      	cmp	r0, #0
 801fe0e:	f000 8578 	beq.w	8020902 <_dtoa_r+0xb72>
 801fe12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fe14:	b953      	cbnz	r3, 801fe2c <_dtoa_r+0x9c>
 801fe16:	4ba1      	ldr	r3, [pc, #644]	; (802009c <_dtoa_r+0x30c>)
 801fe18:	e021      	b.n	801fe5e <_dtoa_r+0xce>
 801fe1a:	4ba1      	ldr	r3, [pc, #644]	; (80200a0 <_dtoa_r+0x310>)
 801fe1c:	9302      	str	r3, [sp, #8]
 801fe1e:	3308      	adds	r3, #8
 801fe20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fe22:	6013      	str	r3, [r2, #0]
 801fe24:	9802      	ldr	r0, [sp, #8]
 801fe26:	b017      	add	sp, #92	; 0x5c
 801fe28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe2c:	4b9b      	ldr	r3, [pc, #620]	; (802009c <_dtoa_r+0x30c>)
 801fe2e:	9302      	str	r3, [sp, #8]
 801fe30:	3303      	adds	r3, #3
 801fe32:	e7f5      	b.n	801fe20 <_dtoa_r+0x90>
 801fe34:	e9dd 6700 	ldrd	r6, r7, [sp]
 801fe38:	2200      	movs	r2, #0
 801fe3a:	2300      	movs	r3, #0
 801fe3c:	4630      	mov	r0, r6
 801fe3e:	4639      	mov	r1, r7
 801fe40:	f7e0 fe46 	bl	8000ad0 <__aeabi_dcmpeq>
 801fe44:	4681      	mov	r9, r0
 801fe46:	b160      	cbz	r0, 801fe62 <_dtoa_r+0xd2>
 801fe48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fe4a:	2301      	movs	r3, #1
 801fe4c:	6013      	str	r3, [r2, #0]
 801fe4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fe50:	2b00      	cmp	r3, #0
 801fe52:	f000 8553 	beq.w	80208fc <_dtoa_r+0xb6c>
 801fe56:	4b93      	ldr	r3, [pc, #588]	; (80200a4 <_dtoa_r+0x314>)
 801fe58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fe5a:	6013      	str	r3, [r2, #0]
 801fe5c:	3b01      	subs	r3, #1
 801fe5e:	9302      	str	r3, [sp, #8]
 801fe60:	e7e0      	b.n	801fe24 <_dtoa_r+0x94>
 801fe62:	aa14      	add	r2, sp, #80	; 0x50
 801fe64:	a915      	add	r1, sp, #84	; 0x54
 801fe66:	ec47 6b10 	vmov	d0, r6, r7
 801fe6a:	4620      	mov	r0, r4
 801fe6c:	f001 f9cf 	bl	802120e <__d2b>
 801fe70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801fe74:	4682      	mov	sl, r0
 801fe76:	2d00      	cmp	r5, #0
 801fe78:	d07e      	beq.n	801ff78 <_dtoa_r+0x1e8>
 801fe7a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801fe7e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801fe82:	4630      	mov	r0, r6
 801fe84:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801fe88:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801fe8c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 801fe90:	2200      	movs	r2, #0
 801fe92:	4b85      	ldr	r3, [pc, #532]	; (80200a8 <_dtoa_r+0x318>)
 801fe94:	f7e0 fa00 	bl	8000298 <__aeabi_dsub>
 801fe98:	a379      	add	r3, pc, #484	; (adr r3, 8020080 <_dtoa_r+0x2f0>)
 801fe9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe9e:	f7e0 fbaf 	bl	8000600 <__aeabi_dmul>
 801fea2:	a379      	add	r3, pc, #484	; (adr r3, 8020088 <_dtoa_r+0x2f8>)
 801fea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fea8:	f7e0 f9f8 	bl	800029c <__adddf3>
 801feac:	4606      	mov	r6, r0
 801feae:	4628      	mov	r0, r5
 801feb0:	460f      	mov	r7, r1
 801feb2:	f7e0 fb3f 	bl	8000534 <__aeabi_i2d>
 801feb6:	a376      	add	r3, pc, #472	; (adr r3, 8020090 <_dtoa_r+0x300>)
 801feb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801febc:	f7e0 fba0 	bl	8000600 <__aeabi_dmul>
 801fec0:	4602      	mov	r2, r0
 801fec2:	460b      	mov	r3, r1
 801fec4:	4630      	mov	r0, r6
 801fec6:	4639      	mov	r1, r7
 801fec8:	f7e0 f9e8 	bl	800029c <__adddf3>
 801fecc:	4606      	mov	r6, r0
 801fece:	460f      	mov	r7, r1
 801fed0:	f7e0 fe46 	bl	8000b60 <__aeabi_d2iz>
 801fed4:	2200      	movs	r2, #0
 801fed6:	4683      	mov	fp, r0
 801fed8:	2300      	movs	r3, #0
 801feda:	4630      	mov	r0, r6
 801fedc:	4639      	mov	r1, r7
 801fede:	f7e0 fe01 	bl	8000ae4 <__aeabi_dcmplt>
 801fee2:	b158      	cbz	r0, 801fefc <_dtoa_r+0x16c>
 801fee4:	4658      	mov	r0, fp
 801fee6:	f7e0 fb25 	bl	8000534 <__aeabi_i2d>
 801feea:	4602      	mov	r2, r0
 801feec:	460b      	mov	r3, r1
 801feee:	4630      	mov	r0, r6
 801fef0:	4639      	mov	r1, r7
 801fef2:	f7e0 fded 	bl	8000ad0 <__aeabi_dcmpeq>
 801fef6:	b908      	cbnz	r0, 801fefc <_dtoa_r+0x16c>
 801fef8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fefc:	f1bb 0f16 	cmp.w	fp, #22
 801ff00:	d859      	bhi.n	801ffb6 <_dtoa_r+0x226>
 801ff02:	496a      	ldr	r1, [pc, #424]	; (80200ac <_dtoa_r+0x31c>)
 801ff04:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801ff08:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ff0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ff10:	f7e0 fe06 	bl	8000b20 <__aeabi_dcmpgt>
 801ff14:	2800      	cmp	r0, #0
 801ff16:	d050      	beq.n	801ffba <_dtoa_r+0x22a>
 801ff18:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ff1c:	2300      	movs	r3, #0
 801ff1e:	930e      	str	r3, [sp, #56]	; 0x38
 801ff20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ff22:	1b5d      	subs	r5, r3, r5
 801ff24:	1e6b      	subs	r3, r5, #1
 801ff26:	9306      	str	r3, [sp, #24]
 801ff28:	bf45      	ittet	mi
 801ff2a:	f1c5 0301 	rsbmi	r3, r5, #1
 801ff2e:	9305      	strmi	r3, [sp, #20]
 801ff30:	2300      	movpl	r3, #0
 801ff32:	2300      	movmi	r3, #0
 801ff34:	bf4c      	ite	mi
 801ff36:	9306      	strmi	r3, [sp, #24]
 801ff38:	9305      	strpl	r3, [sp, #20]
 801ff3a:	f1bb 0f00 	cmp.w	fp, #0
 801ff3e:	db3e      	blt.n	801ffbe <_dtoa_r+0x22e>
 801ff40:	9b06      	ldr	r3, [sp, #24]
 801ff42:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801ff46:	445b      	add	r3, fp
 801ff48:	9306      	str	r3, [sp, #24]
 801ff4a:	2300      	movs	r3, #0
 801ff4c:	9308      	str	r3, [sp, #32]
 801ff4e:	9b07      	ldr	r3, [sp, #28]
 801ff50:	2b09      	cmp	r3, #9
 801ff52:	f200 80af 	bhi.w	80200b4 <_dtoa_r+0x324>
 801ff56:	2b05      	cmp	r3, #5
 801ff58:	bfc4      	itt	gt
 801ff5a:	3b04      	subgt	r3, #4
 801ff5c:	9307      	strgt	r3, [sp, #28]
 801ff5e:	9b07      	ldr	r3, [sp, #28]
 801ff60:	f1a3 0302 	sub.w	r3, r3, #2
 801ff64:	bfcc      	ite	gt
 801ff66:	2600      	movgt	r6, #0
 801ff68:	2601      	movle	r6, #1
 801ff6a:	2b03      	cmp	r3, #3
 801ff6c:	f200 80ae 	bhi.w	80200cc <_dtoa_r+0x33c>
 801ff70:	e8df f003 	tbb	[pc, r3]
 801ff74:	772f8482 	.word	0x772f8482
 801ff78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ff7a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ff7c:	441d      	add	r5, r3
 801ff7e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801ff82:	2b20      	cmp	r3, #32
 801ff84:	dd11      	ble.n	801ffaa <_dtoa_r+0x21a>
 801ff86:	9a00      	ldr	r2, [sp, #0]
 801ff88:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801ff8c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801ff90:	fa22 f000 	lsr.w	r0, r2, r0
 801ff94:	fa08 f303 	lsl.w	r3, r8, r3
 801ff98:	4318      	orrs	r0, r3
 801ff9a:	f7e0 fabb 	bl	8000514 <__aeabi_ui2d>
 801ff9e:	2301      	movs	r3, #1
 801ffa0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801ffa4:	3d01      	subs	r5, #1
 801ffa6:	9312      	str	r3, [sp, #72]	; 0x48
 801ffa8:	e772      	b.n	801fe90 <_dtoa_r+0x100>
 801ffaa:	f1c3 0020 	rsb	r0, r3, #32
 801ffae:	9b00      	ldr	r3, [sp, #0]
 801ffb0:	fa03 f000 	lsl.w	r0, r3, r0
 801ffb4:	e7f1      	b.n	801ff9a <_dtoa_r+0x20a>
 801ffb6:	2301      	movs	r3, #1
 801ffb8:	e7b1      	b.n	801ff1e <_dtoa_r+0x18e>
 801ffba:	900e      	str	r0, [sp, #56]	; 0x38
 801ffbc:	e7b0      	b.n	801ff20 <_dtoa_r+0x190>
 801ffbe:	9b05      	ldr	r3, [sp, #20]
 801ffc0:	eba3 030b 	sub.w	r3, r3, fp
 801ffc4:	9305      	str	r3, [sp, #20]
 801ffc6:	f1cb 0300 	rsb	r3, fp, #0
 801ffca:	9308      	str	r3, [sp, #32]
 801ffcc:	2300      	movs	r3, #0
 801ffce:	930b      	str	r3, [sp, #44]	; 0x2c
 801ffd0:	e7bd      	b.n	801ff4e <_dtoa_r+0x1be>
 801ffd2:	2301      	movs	r3, #1
 801ffd4:	9309      	str	r3, [sp, #36]	; 0x24
 801ffd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ffd8:	2b00      	cmp	r3, #0
 801ffda:	dd7a      	ble.n	80200d2 <_dtoa_r+0x342>
 801ffdc:	9304      	str	r3, [sp, #16]
 801ffde:	9303      	str	r3, [sp, #12]
 801ffe0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801ffe2:	2200      	movs	r2, #0
 801ffe4:	606a      	str	r2, [r5, #4]
 801ffe6:	2104      	movs	r1, #4
 801ffe8:	f101 0214 	add.w	r2, r1, #20
 801ffec:	429a      	cmp	r2, r3
 801ffee:	d975      	bls.n	80200dc <_dtoa_r+0x34c>
 801fff0:	6869      	ldr	r1, [r5, #4]
 801fff2:	4620      	mov	r0, r4
 801fff4:	f000 fe8a 	bl	8020d0c <_Balloc>
 801fff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fffa:	6028      	str	r0, [r5, #0]
 801fffc:	681b      	ldr	r3, [r3, #0]
 801fffe:	9302      	str	r3, [sp, #8]
 8020000:	9b03      	ldr	r3, [sp, #12]
 8020002:	2b0e      	cmp	r3, #14
 8020004:	f200 80e5 	bhi.w	80201d2 <_dtoa_r+0x442>
 8020008:	2e00      	cmp	r6, #0
 802000a:	f000 80e2 	beq.w	80201d2 <_dtoa_r+0x442>
 802000e:	ed9d 7b00 	vldr	d7, [sp]
 8020012:	f1bb 0f00 	cmp.w	fp, #0
 8020016:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 802001a:	dd74      	ble.n	8020106 <_dtoa_r+0x376>
 802001c:	4a23      	ldr	r2, [pc, #140]	; (80200ac <_dtoa_r+0x31c>)
 802001e:	f00b 030f 	and.w	r3, fp, #15
 8020022:	ea4f 162b 	mov.w	r6, fp, asr #4
 8020026:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802002a:	06f0      	lsls	r0, r6, #27
 802002c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020030:	d559      	bpl.n	80200e6 <_dtoa_r+0x356>
 8020032:	4b1f      	ldr	r3, [pc, #124]	; (80200b0 <_dtoa_r+0x320>)
 8020034:	ec51 0b17 	vmov	r0, r1, d7
 8020038:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802003c:	f7e0 fc0a 	bl	8000854 <__aeabi_ddiv>
 8020040:	e9cd 0100 	strd	r0, r1, [sp]
 8020044:	f006 060f 	and.w	r6, r6, #15
 8020048:	2503      	movs	r5, #3
 802004a:	4f19      	ldr	r7, [pc, #100]	; (80200b0 <_dtoa_r+0x320>)
 802004c:	2e00      	cmp	r6, #0
 802004e:	d14c      	bne.n	80200ea <_dtoa_r+0x35a>
 8020050:	4642      	mov	r2, r8
 8020052:	464b      	mov	r3, r9
 8020054:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020058:	f7e0 fbfc 	bl	8000854 <__aeabi_ddiv>
 802005c:	e9cd 0100 	strd	r0, r1, [sp]
 8020060:	e06a      	b.n	8020138 <_dtoa_r+0x3a8>
 8020062:	2301      	movs	r3, #1
 8020064:	9309      	str	r3, [sp, #36]	; 0x24
 8020066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020068:	445b      	add	r3, fp
 802006a:	9304      	str	r3, [sp, #16]
 802006c:	3301      	adds	r3, #1
 802006e:	2b01      	cmp	r3, #1
 8020070:	9303      	str	r3, [sp, #12]
 8020072:	bfb8      	it	lt
 8020074:	2301      	movlt	r3, #1
 8020076:	e7b3      	b.n	801ffe0 <_dtoa_r+0x250>
 8020078:	2300      	movs	r3, #0
 802007a:	e7ab      	b.n	801ffd4 <_dtoa_r+0x244>
 802007c:	2300      	movs	r3, #0
 802007e:	e7f1      	b.n	8020064 <_dtoa_r+0x2d4>
 8020080:	636f4361 	.word	0x636f4361
 8020084:	3fd287a7 	.word	0x3fd287a7
 8020088:	8b60c8b3 	.word	0x8b60c8b3
 802008c:	3fc68a28 	.word	0x3fc68a28
 8020090:	509f79fb 	.word	0x509f79fb
 8020094:	3fd34413 	.word	0x3fd34413
 8020098:	7ff00000 	.word	0x7ff00000
 802009c:	08022799 	.word	0x08022799
 80200a0:	08022790 	.word	0x08022790
 80200a4:	0802276d 	.word	0x0802276d
 80200a8:	3ff80000 	.word	0x3ff80000
 80200ac:	08022828 	.word	0x08022828
 80200b0:	08022800 	.word	0x08022800
 80200b4:	2601      	movs	r6, #1
 80200b6:	2300      	movs	r3, #0
 80200b8:	9307      	str	r3, [sp, #28]
 80200ba:	9609      	str	r6, [sp, #36]	; 0x24
 80200bc:	f04f 33ff 	mov.w	r3, #4294967295
 80200c0:	9304      	str	r3, [sp, #16]
 80200c2:	9303      	str	r3, [sp, #12]
 80200c4:	2200      	movs	r2, #0
 80200c6:	2312      	movs	r3, #18
 80200c8:	920a      	str	r2, [sp, #40]	; 0x28
 80200ca:	e789      	b.n	801ffe0 <_dtoa_r+0x250>
 80200cc:	2301      	movs	r3, #1
 80200ce:	9309      	str	r3, [sp, #36]	; 0x24
 80200d0:	e7f4      	b.n	80200bc <_dtoa_r+0x32c>
 80200d2:	2301      	movs	r3, #1
 80200d4:	9304      	str	r3, [sp, #16]
 80200d6:	9303      	str	r3, [sp, #12]
 80200d8:	461a      	mov	r2, r3
 80200da:	e7f5      	b.n	80200c8 <_dtoa_r+0x338>
 80200dc:	686a      	ldr	r2, [r5, #4]
 80200de:	3201      	adds	r2, #1
 80200e0:	606a      	str	r2, [r5, #4]
 80200e2:	0049      	lsls	r1, r1, #1
 80200e4:	e780      	b.n	801ffe8 <_dtoa_r+0x258>
 80200e6:	2502      	movs	r5, #2
 80200e8:	e7af      	b.n	802004a <_dtoa_r+0x2ba>
 80200ea:	07f1      	lsls	r1, r6, #31
 80200ec:	d508      	bpl.n	8020100 <_dtoa_r+0x370>
 80200ee:	4640      	mov	r0, r8
 80200f0:	4649      	mov	r1, r9
 80200f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80200f6:	f7e0 fa83 	bl	8000600 <__aeabi_dmul>
 80200fa:	3501      	adds	r5, #1
 80200fc:	4680      	mov	r8, r0
 80200fe:	4689      	mov	r9, r1
 8020100:	1076      	asrs	r6, r6, #1
 8020102:	3708      	adds	r7, #8
 8020104:	e7a2      	b.n	802004c <_dtoa_r+0x2bc>
 8020106:	f000 809d 	beq.w	8020244 <_dtoa_r+0x4b4>
 802010a:	f1cb 0600 	rsb	r6, fp, #0
 802010e:	4b9f      	ldr	r3, [pc, #636]	; (802038c <_dtoa_r+0x5fc>)
 8020110:	4f9f      	ldr	r7, [pc, #636]	; (8020390 <_dtoa_r+0x600>)
 8020112:	f006 020f 	and.w	r2, r6, #15
 8020116:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802011a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802011e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020122:	f7e0 fa6d 	bl	8000600 <__aeabi_dmul>
 8020126:	e9cd 0100 	strd	r0, r1, [sp]
 802012a:	1136      	asrs	r6, r6, #4
 802012c:	2300      	movs	r3, #0
 802012e:	2502      	movs	r5, #2
 8020130:	2e00      	cmp	r6, #0
 8020132:	d17c      	bne.n	802022e <_dtoa_r+0x49e>
 8020134:	2b00      	cmp	r3, #0
 8020136:	d191      	bne.n	802005c <_dtoa_r+0x2cc>
 8020138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802013a:	2b00      	cmp	r3, #0
 802013c:	f000 8084 	beq.w	8020248 <_dtoa_r+0x4b8>
 8020140:	e9dd 8900 	ldrd	r8, r9, [sp]
 8020144:	2200      	movs	r2, #0
 8020146:	4b93      	ldr	r3, [pc, #588]	; (8020394 <_dtoa_r+0x604>)
 8020148:	4640      	mov	r0, r8
 802014a:	4649      	mov	r1, r9
 802014c:	f7e0 fcca 	bl	8000ae4 <__aeabi_dcmplt>
 8020150:	2800      	cmp	r0, #0
 8020152:	d079      	beq.n	8020248 <_dtoa_r+0x4b8>
 8020154:	9b03      	ldr	r3, [sp, #12]
 8020156:	2b00      	cmp	r3, #0
 8020158:	d076      	beq.n	8020248 <_dtoa_r+0x4b8>
 802015a:	9b04      	ldr	r3, [sp, #16]
 802015c:	2b00      	cmp	r3, #0
 802015e:	dd34      	ble.n	80201ca <_dtoa_r+0x43a>
 8020160:	2200      	movs	r2, #0
 8020162:	4b8d      	ldr	r3, [pc, #564]	; (8020398 <_dtoa_r+0x608>)
 8020164:	4640      	mov	r0, r8
 8020166:	4649      	mov	r1, r9
 8020168:	f7e0 fa4a 	bl	8000600 <__aeabi_dmul>
 802016c:	e9cd 0100 	strd	r0, r1, [sp]
 8020170:	9e04      	ldr	r6, [sp, #16]
 8020172:	f10b 37ff 	add.w	r7, fp, #4294967295
 8020176:	3501      	adds	r5, #1
 8020178:	4628      	mov	r0, r5
 802017a:	f7e0 f9db 	bl	8000534 <__aeabi_i2d>
 802017e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020182:	f7e0 fa3d 	bl	8000600 <__aeabi_dmul>
 8020186:	2200      	movs	r2, #0
 8020188:	4b84      	ldr	r3, [pc, #528]	; (802039c <_dtoa_r+0x60c>)
 802018a:	f7e0 f887 	bl	800029c <__adddf3>
 802018e:	4680      	mov	r8, r0
 8020190:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8020194:	2e00      	cmp	r6, #0
 8020196:	d15a      	bne.n	802024e <_dtoa_r+0x4be>
 8020198:	2200      	movs	r2, #0
 802019a:	4b81      	ldr	r3, [pc, #516]	; (80203a0 <_dtoa_r+0x610>)
 802019c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80201a0:	f7e0 f87a 	bl	8000298 <__aeabi_dsub>
 80201a4:	4642      	mov	r2, r8
 80201a6:	464b      	mov	r3, r9
 80201a8:	e9cd 0100 	strd	r0, r1, [sp]
 80201ac:	f7e0 fcb8 	bl	8000b20 <__aeabi_dcmpgt>
 80201b0:	2800      	cmp	r0, #0
 80201b2:	f040 829b 	bne.w	80206ec <_dtoa_r+0x95c>
 80201b6:	4642      	mov	r2, r8
 80201b8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80201bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80201c0:	f7e0 fc90 	bl	8000ae4 <__aeabi_dcmplt>
 80201c4:	2800      	cmp	r0, #0
 80201c6:	f040 828f 	bne.w	80206e8 <_dtoa_r+0x958>
 80201ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80201ce:	e9cd 2300 	strd	r2, r3, [sp]
 80201d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	f2c0 8150 	blt.w	802047a <_dtoa_r+0x6ea>
 80201da:	f1bb 0f0e 	cmp.w	fp, #14
 80201de:	f300 814c 	bgt.w	802047a <_dtoa_r+0x6ea>
 80201e2:	4b6a      	ldr	r3, [pc, #424]	; (802038c <_dtoa_r+0x5fc>)
 80201e4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80201e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80201ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80201ee:	2b00      	cmp	r3, #0
 80201f0:	f280 80da 	bge.w	80203a8 <_dtoa_r+0x618>
 80201f4:	9b03      	ldr	r3, [sp, #12]
 80201f6:	2b00      	cmp	r3, #0
 80201f8:	f300 80d6 	bgt.w	80203a8 <_dtoa_r+0x618>
 80201fc:	f040 8273 	bne.w	80206e6 <_dtoa_r+0x956>
 8020200:	2200      	movs	r2, #0
 8020202:	4b67      	ldr	r3, [pc, #412]	; (80203a0 <_dtoa_r+0x610>)
 8020204:	4640      	mov	r0, r8
 8020206:	4649      	mov	r1, r9
 8020208:	f7e0 f9fa 	bl	8000600 <__aeabi_dmul>
 802020c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020210:	f7e0 fc7c 	bl	8000b0c <__aeabi_dcmpge>
 8020214:	9e03      	ldr	r6, [sp, #12]
 8020216:	4637      	mov	r7, r6
 8020218:	2800      	cmp	r0, #0
 802021a:	f040 824a 	bne.w	80206b2 <_dtoa_r+0x922>
 802021e:	9b02      	ldr	r3, [sp, #8]
 8020220:	9a02      	ldr	r2, [sp, #8]
 8020222:	1c5d      	adds	r5, r3, #1
 8020224:	2331      	movs	r3, #49	; 0x31
 8020226:	7013      	strb	r3, [r2, #0]
 8020228:	f10b 0b01 	add.w	fp, fp, #1
 802022c:	e245      	b.n	80206ba <_dtoa_r+0x92a>
 802022e:	07f2      	lsls	r2, r6, #31
 8020230:	d505      	bpl.n	802023e <_dtoa_r+0x4ae>
 8020232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020236:	f7e0 f9e3 	bl	8000600 <__aeabi_dmul>
 802023a:	3501      	adds	r5, #1
 802023c:	2301      	movs	r3, #1
 802023e:	1076      	asrs	r6, r6, #1
 8020240:	3708      	adds	r7, #8
 8020242:	e775      	b.n	8020130 <_dtoa_r+0x3a0>
 8020244:	2502      	movs	r5, #2
 8020246:	e777      	b.n	8020138 <_dtoa_r+0x3a8>
 8020248:	465f      	mov	r7, fp
 802024a:	9e03      	ldr	r6, [sp, #12]
 802024c:	e794      	b.n	8020178 <_dtoa_r+0x3e8>
 802024e:	9a02      	ldr	r2, [sp, #8]
 8020250:	4b4e      	ldr	r3, [pc, #312]	; (802038c <_dtoa_r+0x5fc>)
 8020252:	4432      	add	r2, r6
 8020254:	9213      	str	r2, [sp, #76]	; 0x4c
 8020256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020258:	1e71      	subs	r1, r6, #1
 802025a:	2a00      	cmp	r2, #0
 802025c:	d048      	beq.n	80202f0 <_dtoa_r+0x560>
 802025e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8020262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020266:	2000      	movs	r0, #0
 8020268:	494e      	ldr	r1, [pc, #312]	; (80203a4 <_dtoa_r+0x614>)
 802026a:	f7e0 faf3 	bl	8000854 <__aeabi_ddiv>
 802026e:	4642      	mov	r2, r8
 8020270:	464b      	mov	r3, r9
 8020272:	f7e0 f811 	bl	8000298 <__aeabi_dsub>
 8020276:	9d02      	ldr	r5, [sp, #8]
 8020278:	4680      	mov	r8, r0
 802027a:	4689      	mov	r9, r1
 802027c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020280:	f7e0 fc6e 	bl	8000b60 <__aeabi_d2iz>
 8020284:	4606      	mov	r6, r0
 8020286:	f7e0 f955 	bl	8000534 <__aeabi_i2d>
 802028a:	4602      	mov	r2, r0
 802028c:	460b      	mov	r3, r1
 802028e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020292:	f7e0 f801 	bl	8000298 <__aeabi_dsub>
 8020296:	3630      	adds	r6, #48	; 0x30
 8020298:	f805 6b01 	strb.w	r6, [r5], #1
 802029c:	4642      	mov	r2, r8
 802029e:	464b      	mov	r3, r9
 80202a0:	e9cd 0100 	strd	r0, r1, [sp]
 80202a4:	f7e0 fc1e 	bl	8000ae4 <__aeabi_dcmplt>
 80202a8:	2800      	cmp	r0, #0
 80202aa:	d165      	bne.n	8020378 <_dtoa_r+0x5e8>
 80202ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80202b0:	2000      	movs	r0, #0
 80202b2:	4938      	ldr	r1, [pc, #224]	; (8020394 <_dtoa_r+0x604>)
 80202b4:	f7df fff0 	bl	8000298 <__aeabi_dsub>
 80202b8:	4642      	mov	r2, r8
 80202ba:	464b      	mov	r3, r9
 80202bc:	f7e0 fc12 	bl	8000ae4 <__aeabi_dcmplt>
 80202c0:	2800      	cmp	r0, #0
 80202c2:	f040 80ba 	bne.w	802043a <_dtoa_r+0x6aa>
 80202c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80202c8:	429d      	cmp	r5, r3
 80202ca:	f43f af7e 	beq.w	80201ca <_dtoa_r+0x43a>
 80202ce:	2200      	movs	r2, #0
 80202d0:	4b31      	ldr	r3, [pc, #196]	; (8020398 <_dtoa_r+0x608>)
 80202d2:	4640      	mov	r0, r8
 80202d4:	4649      	mov	r1, r9
 80202d6:	f7e0 f993 	bl	8000600 <__aeabi_dmul>
 80202da:	2200      	movs	r2, #0
 80202dc:	4680      	mov	r8, r0
 80202de:	4689      	mov	r9, r1
 80202e0:	4b2d      	ldr	r3, [pc, #180]	; (8020398 <_dtoa_r+0x608>)
 80202e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80202e6:	f7e0 f98b 	bl	8000600 <__aeabi_dmul>
 80202ea:	e9cd 0100 	strd	r0, r1, [sp]
 80202ee:	e7c5      	b.n	802027c <_dtoa_r+0x4ec>
 80202f0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80202f4:	4642      	mov	r2, r8
 80202f6:	464b      	mov	r3, r9
 80202f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80202fc:	f7e0 f980 	bl	8000600 <__aeabi_dmul>
 8020300:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8020304:	9d02      	ldr	r5, [sp, #8]
 8020306:	e9dd 0100 	ldrd	r0, r1, [sp]
 802030a:	f7e0 fc29 	bl	8000b60 <__aeabi_d2iz>
 802030e:	4606      	mov	r6, r0
 8020310:	f7e0 f910 	bl	8000534 <__aeabi_i2d>
 8020314:	3630      	adds	r6, #48	; 0x30
 8020316:	4602      	mov	r2, r0
 8020318:	460b      	mov	r3, r1
 802031a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802031e:	f7df ffbb 	bl	8000298 <__aeabi_dsub>
 8020322:	f805 6b01 	strb.w	r6, [r5], #1
 8020326:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020328:	42ab      	cmp	r3, r5
 802032a:	4680      	mov	r8, r0
 802032c:	4689      	mov	r9, r1
 802032e:	f04f 0200 	mov.w	r2, #0
 8020332:	d125      	bne.n	8020380 <_dtoa_r+0x5f0>
 8020334:	4b1b      	ldr	r3, [pc, #108]	; (80203a4 <_dtoa_r+0x614>)
 8020336:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802033a:	f7df ffaf 	bl	800029c <__adddf3>
 802033e:	4602      	mov	r2, r0
 8020340:	460b      	mov	r3, r1
 8020342:	4640      	mov	r0, r8
 8020344:	4649      	mov	r1, r9
 8020346:	f7e0 fbeb 	bl	8000b20 <__aeabi_dcmpgt>
 802034a:	2800      	cmp	r0, #0
 802034c:	d175      	bne.n	802043a <_dtoa_r+0x6aa>
 802034e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8020352:	2000      	movs	r0, #0
 8020354:	4913      	ldr	r1, [pc, #76]	; (80203a4 <_dtoa_r+0x614>)
 8020356:	f7df ff9f 	bl	8000298 <__aeabi_dsub>
 802035a:	4602      	mov	r2, r0
 802035c:	460b      	mov	r3, r1
 802035e:	4640      	mov	r0, r8
 8020360:	4649      	mov	r1, r9
 8020362:	f7e0 fbbf 	bl	8000ae4 <__aeabi_dcmplt>
 8020366:	2800      	cmp	r0, #0
 8020368:	f43f af2f 	beq.w	80201ca <_dtoa_r+0x43a>
 802036c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020370:	2b30      	cmp	r3, #48	; 0x30
 8020372:	f105 32ff 	add.w	r2, r5, #4294967295
 8020376:	d001      	beq.n	802037c <_dtoa_r+0x5ec>
 8020378:	46bb      	mov	fp, r7
 802037a:	e04d      	b.n	8020418 <_dtoa_r+0x688>
 802037c:	4615      	mov	r5, r2
 802037e:	e7f5      	b.n	802036c <_dtoa_r+0x5dc>
 8020380:	4b05      	ldr	r3, [pc, #20]	; (8020398 <_dtoa_r+0x608>)
 8020382:	f7e0 f93d 	bl	8000600 <__aeabi_dmul>
 8020386:	e9cd 0100 	strd	r0, r1, [sp]
 802038a:	e7bc      	b.n	8020306 <_dtoa_r+0x576>
 802038c:	08022828 	.word	0x08022828
 8020390:	08022800 	.word	0x08022800
 8020394:	3ff00000 	.word	0x3ff00000
 8020398:	40240000 	.word	0x40240000
 802039c:	401c0000 	.word	0x401c0000
 80203a0:	40140000 	.word	0x40140000
 80203a4:	3fe00000 	.word	0x3fe00000
 80203a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80203ac:	9d02      	ldr	r5, [sp, #8]
 80203ae:	4642      	mov	r2, r8
 80203b0:	464b      	mov	r3, r9
 80203b2:	4630      	mov	r0, r6
 80203b4:	4639      	mov	r1, r7
 80203b6:	f7e0 fa4d 	bl	8000854 <__aeabi_ddiv>
 80203ba:	f7e0 fbd1 	bl	8000b60 <__aeabi_d2iz>
 80203be:	9000      	str	r0, [sp, #0]
 80203c0:	f7e0 f8b8 	bl	8000534 <__aeabi_i2d>
 80203c4:	4642      	mov	r2, r8
 80203c6:	464b      	mov	r3, r9
 80203c8:	f7e0 f91a 	bl	8000600 <__aeabi_dmul>
 80203cc:	4602      	mov	r2, r0
 80203ce:	460b      	mov	r3, r1
 80203d0:	4630      	mov	r0, r6
 80203d2:	4639      	mov	r1, r7
 80203d4:	f7df ff60 	bl	8000298 <__aeabi_dsub>
 80203d8:	9e00      	ldr	r6, [sp, #0]
 80203da:	9f03      	ldr	r7, [sp, #12]
 80203dc:	3630      	adds	r6, #48	; 0x30
 80203de:	f805 6b01 	strb.w	r6, [r5], #1
 80203e2:	9e02      	ldr	r6, [sp, #8]
 80203e4:	1bae      	subs	r6, r5, r6
 80203e6:	42b7      	cmp	r7, r6
 80203e8:	4602      	mov	r2, r0
 80203ea:	460b      	mov	r3, r1
 80203ec:	d138      	bne.n	8020460 <_dtoa_r+0x6d0>
 80203ee:	f7df ff55 	bl	800029c <__adddf3>
 80203f2:	4606      	mov	r6, r0
 80203f4:	460f      	mov	r7, r1
 80203f6:	4602      	mov	r2, r0
 80203f8:	460b      	mov	r3, r1
 80203fa:	4640      	mov	r0, r8
 80203fc:	4649      	mov	r1, r9
 80203fe:	f7e0 fb71 	bl	8000ae4 <__aeabi_dcmplt>
 8020402:	b9c8      	cbnz	r0, 8020438 <_dtoa_r+0x6a8>
 8020404:	4632      	mov	r2, r6
 8020406:	463b      	mov	r3, r7
 8020408:	4640      	mov	r0, r8
 802040a:	4649      	mov	r1, r9
 802040c:	f7e0 fb60 	bl	8000ad0 <__aeabi_dcmpeq>
 8020410:	b110      	cbz	r0, 8020418 <_dtoa_r+0x688>
 8020412:	9b00      	ldr	r3, [sp, #0]
 8020414:	07db      	lsls	r3, r3, #31
 8020416:	d40f      	bmi.n	8020438 <_dtoa_r+0x6a8>
 8020418:	4651      	mov	r1, sl
 802041a:	4620      	mov	r0, r4
 802041c:	f000 fcaa 	bl	8020d74 <_Bfree>
 8020420:	2300      	movs	r3, #0
 8020422:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020424:	702b      	strb	r3, [r5, #0]
 8020426:	f10b 0301 	add.w	r3, fp, #1
 802042a:	6013      	str	r3, [r2, #0]
 802042c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802042e:	2b00      	cmp	r3, #0
 8020430:	f43f acf8 	beq.w	801fe24 <_dtoa_r+0x94>
 8020434:	601d      	str	r5, [r3, #0]
 8020436:	e4f5      	b.n	801fe24 <_dtoa_r+0x94>
 8020438:	465f      	mov	r7, fp
 802043a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802043e:	2a39      	cmp	r2, #57	; 0x39
 8020440:	f105 33ff 	add.w	r3, r5, #4294967295
 8020444:	d106      	bne.n	8020454 <_dtoa_r+0x6c4>
 8020446:	9a02      	ldr	r2, [sp, #8]
 8020448:	429a      	cmp	r2, r3
 802044a:	d107      	bne.n	802045c <_dtoa_r+0x6cc>
 802044c:	2330      	movs	r3, #48	; 0x30
 802044e:	7013      	strb	r3, [r2, #0]
 8020450:	3701      	adds	r7, #1
 8020452:	4613      	mov	r3, r2
 8020454:	781a      	ldrb	r2, [r3, #0]
 8020456:	3201      	adds	r2, #1
 8020458:	701a      	strb	r2, [r3, #0]
 802045a:	e78d      	b.n	8020378 <_dtoa_r+0x5e8>
 802045c:	461d      	mov	r5, r3
 802045e:	e7ec      	b.n	802043a <_dtoa_r+0x6aa>
 8020460:	2200      	movs	r2, #0
 8020462:	4ba4      	ldr	r3, [pc, #656]	; (80206f4 <_dtoa_r+0x964>)
 8020464:	f7e0 f8cc 	bl	8000600 <__aeabi_dmul>
 8020468:	2200      	movs	r2, #0
 802046a:	2300      	movs	r3, #0
 802046c:	4606      	mov	r6, r0
 802046e:	460f      	mov	r7, r1
 8020470:	f7e0 fb2e 	bl	8000ad0 <__aeabi_dcmpeq>
 8020474:	2800      	cmp	r0, #0
 8020476:	d09a      	beq.n	80203ae <_dtoa_r+0x61e>
 8020478:	e7ce      	b.n	8020418 <_dtoa_r+0x688>
 802047a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802047c:	2a00      	cmp	r2, #0
 802047e:	f000 80cd 	beq.w	802061c <_dtoa_r+0x88c>
 8020482:	9a07      	ldr	r2, [sp, #28]
 8020484:	2a01      	cmp	r2, #1
 8020486:	f300 80af 	bgt.w	80205e8 <_dtoa_r+0x858>
 802048a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802048c:	2a00      	cmp	r2, #0
 802048e:	f000 80a7 	beq.w	80205e0 <_dtoa_r+0x850>
 8020492:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020496:	9e08      	ldr	r6, [sp, #32]
 8020498:	9d05      	ldr	r5, [sp, #20]
 802049a:	9a05      	ldr	r2, [sp, #20]
 802049c:	441a      	add	r2, r3
 802049e:	9205      	str	r2, [sp, #20]
 80204a0:	9a06      	ldr	r2, [sp, #24]
 80204a2:	2101      	movs	r1, #1
 80204a4:	441a      	add	r2, r3
 80204a6:	4620      	mov	r0, r4
 80204a8:	9206      	str	r2, [sp, #24]
 80204aa:	f000 fd03 	bl	8020eb4 <__i2b>
 80204ae:	4607      	mov	r7, r0
 80204b0:	2d00      	cmp	r5, #0
 80204b2:	dd0c      	ble.n	80204ce <_dtoa_r+0x73e>
 80204b4:	9b06      	ldr	r3, [sp, #24]
 80204b6:	2b00      	cmp	r3, #0
 80204b8:	dd09      	ble.n	80204ce <_dtoa_r+0x73e>
 80204ba:	42ab      	cmp	r3, r5
 80204bc:	9a05      	ldr	r2, [sp, #20]
 80204be:	bfa8      	it	ge
 80204c0:	462b      	movge	r3, r5
 80204c2:	1ad2      	subs	r2, r2, r3
 80204c4:	9205      	str	r2, [sp, #20]
 80204c6:	9a06      	ldr	r2, [sp, #24]
 80204c8:	1aed      	subs	r5, r5, r3
 80204ca:	1ad3      	subs	r3, r2, r3
 80204cc:	9306      	str	r3, [sp, #24]
 80204ce:	9b08      	ldr	r3, [sp, #32]
 80204d0:	b1f3      	cbz	r3, 8020510 <_dtoa_r+0x780>
 80204d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204d4:	2b00      	cmp	r3, #0
 80204d6:	f000 80a5 	beq.w	8020624 <_dtoa_r+0x894>
 80204da:	2e00      	cmp	r6, #0
 80204dc:	dd10      	ble.n	8020500 <_dtoa_r+0x770>
 80204de:	4639      	mov	r1, r7
 80204e0:	4632      	mov	r2, r6
 80204e2:	4620      	mov	r0, r4
 80204e4:	f000 fd7c 	bl	8020fe0 <__pow5mult>
 80204e8:	4652      	mov	r2, sl
 80204ea:	4601      	mov	r1, r0
 80204ec:	4607      	mov	r7, r0
 80204ee:	4620      	mov	r0, r4
 80204f0:	f000 fce9 	bl	8020ec6 <__multiply>
 80204f4:	4651      	mov	r1, sl
 80204f6:	4680      	mov	r8, r0
 80204f8:	4620      	mov	r0, r4
 80204fa:	f000 fc3b 	bl	8020d74 <_Bfree>
 80204fe:	46c2      	mov	sl, r8
 8020500:	9b08      	ldr	r3, [sp, #32]
 8020502:	1b9a      	subs	r2, r3, r6
 8020504:	d004      	beq.n	8020510 <_dtoa_r+0x780>
 8020506:	4651      	mov	r1, sl
 8020508:	4620      	mov	r0, r4
 802050a:	f000 fd69 	bl	8020fe0 <__pow5mult>
 802050e:	4682      	mov	sl, r0
 8020510:	2101      	movs	r1, #1
 8020512:	4620      	mov	r0, r4
 8020514:	f000 fcce 	bl	8020eb4 <__i2b>
 8020518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802051a:	2b00      	cmp	r3, #0
 802051c:	4606      	mov	r6, r0
 802051e:	f340 8083 	ble.w	8020628 <_dtoa_r+0x898>
 8020522:	461a      	mov	r2, r3
 8020524:	4601      	mov	r1, r0
 8020526:	4620      	mov	r0, r4
 8020528:	f000 fd5a 	bl	8020fe0 <__pow5mult>
 802052c:	9b07      	ldr	r3, [sp, #28]
 802052e:	2b01      	cmp	r3, #1
 8020530:	4606      	mov	r6, r0
 8020532:	dd7c      	ble.n	802062e <_dtoa_r+0x89e>
 8020534:	f04f 0800 	mov.w	r8, #0
 8020538:	6933      	ldr	r3, [r6, #16]
 802053a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802053e:	6918      	ldr	r0, [r3, #16]
 8020540:	f000 fc6a 	bl	8020e18 <__hi0bits>
 8020544:	f1c0 0020 	rsb	r0, r0, #32
 8020548:	9b06      	ldr	r3, [sp, #24]
 802054a:	4418      	add	r0, r3
 802054c:	f010 001f 	ands.w	r0, r0, #31
 8020550:	f000 8096 	beq.w	8020680 <_dtoa_r+0x8f0>
 8020554:	f1c0 0320 	rsb	r3, r0, #32
 8020558:	2b04      	cmp	r3, #4
 802055a:	f340 8087 	ble.w	802066c <_dtoa_r+0x8dc>
 802055e:	9b05      	ldr	r3, [sp, #20]
 8020560:	f1c0 001c 	rsb	r0, r0, #28
 8020564:	4403      	add	r3, r0
 8020566:	9305      	str	r3, [sp, #20]
 8020568:	9b06      	ldr	r3, [sp, #24]
 802056a:	4405      	add	r5, r0
 802056c:	4403      	add	r3, r0
 802056e:	9306      	str	r3, [sp, #24]
 8020570:	9b05      	ldr	r3, [sp, #20]
 8020572:	2b00      	cmp	r3, #0
 8020574:	dd05      	ble.n	8020582 <_dtoa_r+0x7f2>
 8020576:	4651      	mov	r1, sl
 8020578:	461a      	mov	r2, r3
 802057a:	4620      	mov	r0, r4
 802057c:	f000 fd7e 	bl	802107c <__lshift>
 8020580:	4682      	mov	sl, r0
 8020582:	9b06      	ldr	r3, [sp, #24]
 8020584:	2b00      	cmp	r3, #0
 8020586:	dd05      	ble.n	8020594 <_dtoa_r+0x804>
 8020588:	4631      	mov	r1, r6
 802058a:	461a      	mov	r2, r3
 802058c:	4620      	mov	r0, r4
 802058e:	f000 fd75 	bl	802107c <__lshift>
 8020592:	4606      	mov	r6, r0
 8020594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020596:	2b00      	cmp	r3, #0
 8020598:	d074      	beq.n	8020684 <_dtoa_r+0x8f4>
 802059a:	4631      	mov	r1, r6
 802059c:	4650      	mov	r0, sl
 802059e:	f000 fdbe 	bl	802111e <__mcmp>
 80205a2:	2800      	cmp	r0, #0
 80205a4:	da6e      	bge.n	8020684 <_dtoa_r+0x8f4>
 80205a6:	2300      	movs	r3, #0
 80205a8:	4651      	mov	r1, sl
 80205aa:	220a      	movs	r2, #10
 80205ac:	4620      	mov	r0, r4
 80205ae:	f000 fbf8 	bl	8020da2 <__multadd>
 80205b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80205b8:	4682      	mov	sl, r0
 80205ba:	2b00      	cmp	r3, #0
 80205bc:	f000 81a8 	beq.w	8020910 <_dtoa_r+0xb80>
 80205c0:	2300      	movs	r3, #0
 80205c2:	4639      	mov	r1, r7
 80205c4:	220a      	movs	r2, #10
 80205c6:	4620      	mov	r0, r4
 80205c8:	f000 fbeb 	bl	8020da2 <__multadd>
 80205cc:	9b04      	ldr	r3, [sp, #16]
 80205ce:	2b00      	cmp	r3, #0
 80205d0:	4607      	mov	r7, r0
 80205d2:	f300 80c8 	bgt.w	8020766 <_dtoa_r+0x9d6>
 80205d6:	9b07      	ldr	r3, [sp, #28]
 80205d8:	2b02      	cmp	r3, #2
 80205da:	f340 80c4 	ble.w	8020766 <_dtoa_r+0x9d6>
 80205de:	e059      	b.n	8020694 <_dtoa_r+0x904>
 80205e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80205e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80205e6:	e756      	b.n	8020496 <_dtoa_r+0x706>
 80205e8:	9b03      	ldr	r3, [sp, #12]
 80205ea:	1e5e      	subs	r6, r3, #1
 80205ec:	9b08      	ldr	r3, [sp, #32]
 80205ee:	42b3      	cmp	r3, r6
 80205f0:	bfbf      	itttt	lt
 80205f2:	9b08      	ldrlt	r3, [sp, #32]
 80205f4:	9608      	strlt	r6, [sp, #32]
 80205f6:	1af2      	sublt	r2, r6, r3
 80205f8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80205fa:	bfb6      	itet	lt
 80205fc:	189b      	addlt	r3, r3, r2
 80205fe:	1b9e      	subge	r6, r3, r6
 8020600:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8020602:	9b03      	ldr	r3, [sp, #12]
 8020604:	bfb8      	it	lt
 8020606:	2600      	movlt	r6, #0
 8020608:	2b00      	cmp	r3, #0
 802060a:	bfb9      	ittee	lt
 802060c:	9b05      	ldrlt	r3, [sp, #20]
 802060e:	9a03      	ldrlt	r2, [sp, #12]
 8020610:	9d05      	ldrge	r5, [sp, #20]
 8020612:	9b03      	ldrge	r3, [sp, #12]
 8020614:	bfbc      	itt	lt
 8020616:	1a9d      	sublt	r5, r3, r2
 8020618:	2300      	movlt	r3, #0
 802061a:	e73e      	b.n	802049a <_dtoa_r+0x70a>
 802061c:	9e08      	ldr	r6, [sp, #32]
 802061e:	9d05      	ldr	r5, [sp, #20]
 8020620:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020622:	e745      	b.n	80204b0 <_dtoa_r+0x720>
 8020624:	9a08      	ldr	r2, [sp, #32]
 8020626:	e76e      	b.n	8020506 <_dtoa_r+0x776>
 8020628:	9b07      	ldr	r3, [sp, #28]
 802062a:	2b01      	cmp	r3, #1
 802062c:	dc19      	bgt.n	8020662 <_dtoa_r+0x8d2>
 802062e:	9b00      	ldr	r3, [sp, #0]
 8020630:	b9bb      	cbnz	r3, 8020662 <_dtoa_r+0x8d2>
 8020632:	9b01      	ldr	r3, [sp, #4]
 8020634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020638:	b99b      	cbnz	r3, 8020662 <_dtoa_r+0x8d2>
 802063a:	9b01      	ldr	r3, [sp, #4]
 802063c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020640:	0d1b      	lsrs	r3, r3, #20
 8020642:	051b      	lsls	r3, r3, #20
 8020644:	b183      	cbz	r3, 8020668 <_dtoa_r+0x8d8>
 8020646:	9b05      	ldr	r3, [sp, #20]
 8020648:	3301      	adds	r3, #1
 802064a:	9305      	str	r3, [sp, #20]
 802064c:	9b06      	ldr	r3, [sp, #24]
 802064e:	3301      	adds	r3, #1
 8020650:	9306      	str	r3, [sp, #24]
 8020652:	f04f 0801 	mov.w	r8, #1
 8020656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020658:	2b00      	cmp	r3, #0
 802065a:	f47f af6d 	bne.w	8020538 <_dtoa_r+0x7a8>
 802065e:	2001      	movs	r0, #1
 8020660:	e772      	b.n	8020548 <_dtoa_r+0x7b8>
 8020662:	f04f 0800 	mov.w	r8, #0
 8020666:	e7f6      	b.n	8020656 <_dtoa_r+0x8c6>
 8020668:	4698      	mov	r8, r3
 802066a:	e7f4      	b.n	8020656 <_dtoa_r+0x8c6>
 802066c:	d080      	beq.n	8020570 <_dtoa_r+0x7e0>
 802066e:	9a05      	ldr	r2, [sp, #20]
 8020670:	331c      	adds	r3, #28
 8020672:	441a      	add	r2, r3
 8020674:	9205      	str	r2, [sp, #20]
 8020676:	9a06      	ldr	r2, [sp, #24]
 8020678:	441a      	add	r2, r3
 802067a:	441d      	add	r5, r3
 802067c:	4613      	mov	r3, r2
 802067e:	e776      	b.n	802056e <_dtoa_r+0x7de>
 8020680:	4603      	mov	r3, r0
 8020682:	e7f4      	b.n	802066e <_dtoa_r+0x8de>
 8020684:	9b03      	ldr	r3, [sp, #12]
 8020686:	2b00      	cmp	r3, #0
 8020688:	dc36      	bgt.n	80206f8 <_dtoa_r+0x968>
 802068a:	9b07      	ldr	r3, [sp, #28]
 802068c:	2b02      	cmp	r3, #2
 802068e:	dd33      	ble.n	80206f8 <_dtoa_r+0x968>
 8020690:	9b03      	ldr	r3, [sp, #12]
 8020692:	9304      	str	r3, [sp, #16]
 8020694:	9b04      	ldr	r3, [sp, #16]
 8020696:	b963      	cbnz	r3, 80206b2 <_dtoa_r+0x922>
 8020698:	4631      	mov	r1, r6
 802069a:	2205      	movs	r2, #5
 802069c:	4620      	mov	r0, r4
 802069e:	f000 fb80 	bl	8020da2 <__multadd>
 80206a2:	4601      	mov	r1, r0
 80206a4:	4606      	mov	r6, r0
 80206a6:	4650      	mov	r0, sl
 80206a8:	f000 fd39 	bl	802111e <__mcmp>
 80206ac:	2800      	cmp	r0, #0
 80206ae:	f73f adb6 	bgt.w	802021e <_dtoa_r+0x48e>
 80206b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80206b4:	9d02      	ldr	r5, [sp, #8]
 80206b6:	ea6f 0b03 	mvn.w	fp, r3
 80206ba:	2300      	movs	r3, #0
 80206bc:	9303      	str	r3, [sp, #12]
 80206be:	4631      	mov	r1, r6
 80206c0:	4620      	mov	r0, r4
 80206c2:	f000 fb57 	bl	8020d74 <_Bfree>
 80206c6:	2f00      	cmp	r7, #0
 80206c8:	f43f aea6 	beq.w	8020418 <_dtoa_r+0x688>
 80206cc:	9b03      	ldr	r3, [sp, #12]
 80206ce:	b12b      	cbz	r3, 80206dc <_dtoa_r+0x94c>
 80206d0:	42bb      	cmp	r3, r7
 80206d2:	d003      	beq.n	80206dc <_dtoa_r+0x94c>
 80206d4:	4619      	mov	r1, r3
 80206d6:	4620      	mov	r0, r4
 80206d8:	f000 fb4c 	bl	8020d74 <_Bfree>
 80206dc:	4639      	mov	r1, r7
 80206de:	4620      	mov	r0, r4
 80206e0:	f000 fb48 	bl	8020d74 <_Bfree>
 80206e4:	e698      	b.n	8020418 <_dtoa_r+0x688>
 80206e6:	2600      	movs	r6, #0
 80206e8:	4637      	mov	r7, r6
 80206ea:	e7e2      	b.n	80206b2 <_dtoa_r+0x922>
 80206ec:	46bb      	mov	fp, r7
 80206ee:	4637      	mov	r7, r6
 80206f0:	e595      	b.n	802021e <_dtoa_r+0x48e>
 80206f2:	bf00      	nop
 80206f4:	40240000 	.word	0x40240000
 80206f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206fa:	bb93      	cbnz	r3, 8020762 <_dtoa_r+0x9d2>
 80206fc:	9b03      	ldr	r3, [sp, #12]
 80206fe:	9304      	str	r3, [sp, #16]
 8020700:	9d02      	ldr	r5, [sp, #8]
 8020702:	4631      	mov	r1, r6
 8020704:	4650      	mov	r0, sl
 8020706:	f7ff fab7 	bl	801fc78 <quorem>
 802070a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802070e:	f805 9b01 	strb.w	r9, [r5], #1
 8020712:	9b02      	ldr	r3, [sp, #8]
 8020714:	9a04      	ldr	r2, [sp, #16]
 8020716:	1aeb      	subs	r3, r5, r3
 8020718:	429a      	cmp	r2, r3
 802071a:	f300 80dc 	bgt.w	80208d6 <_dtoa_r+0xb46>
 802071e:	9b02      	ldr	r3, [sp, #8]
 8020720:	2a01      	cmp	r2, #1
 8020722:	bfac      	ite	ge
 8020724:	189b      	addge	r3, r3, r2
 8020726:	3301      	addlt	r3, #1
 8020728:	4698      	mov	r8, r3
 802072a:	2300      	movs	r3, #0
 802072c:	9303      	str	r3, [sp, #12]
 802072e:	4651      	mov	r1, sl
 8020730:	2201      	movs	r2, #1
 8020732:	4620      	mov	r0, r4
 8020734:	f000 fca2 	bl	802107c <__lshift>
 8020738:	4631      	mov	r1, r6
 802073a:	4682      	mov	sl, r0
 802073c:	f000 fcef 	bl	802111e <__mcmp>
 8020740:	2800      	cmp	r0, #0
 8020742:	f300 808d 	bgt.w	8020860 <_dtoa_r+0xad0>
 8020746:	d103      	bne.n	8020750 <_dtoa_r+0x9c0>
 8020748:	f019 0f01 	tst.w	r9, #1
 802074c:	f040 8088 	bne.w	8020860 <_dtoa_r+0xad0>
 8020750:	4645      	mov	r5, r8
 8020752:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020756:	2b30      	cmp	r3, #48	; 0x30
 8020758:	f105 32ff 	add.w	r2, r5, #4294967295
 802075c:	d1af      	bne.n	80206be <_dtoa_r+0x92e>
 802075e:	4615      	mov	r5, r2
 8020760:	e7f7      	b.n	8020752 <_dtoa_r+0x9c2>
 8020762:	9b03      	ldr	r3, [sp, #12]
 8020764:	9304      	str	r3, [sp, #16]
 8020766:	2d00      	cmp	r5, #0
 8020768:	dd05      	ble.n	8020776 <_dtoa_r+0x9e6>
 802076a:	4639      	mov	r1, r7
 802076c:	462a      	mov	r2, r5
 802076e:	4620      	mov	r0, r4
 8020770:	f000 fc84 	bl	802107c <__lshift>
 8020774:	4607      	mov	r7, r0
 8020776:	f1b8 0f00 	cmp.w	r8, #0
 802077a:	d04c      	beq.n	8020816 <_dtoa_r+0xa86>
 802077c:	6879      	ldr	r1, [r7, #4]
 802077e:	4620      	mov	r0, r4
 8020780:	f000 fac4 	bl	8020d0c <_Balloc>
 8020784:	693a      	ldr	r2, [r7, #16]
 8020786:	3202      	adds	r2, #2
 8020788:	4605      	mov	r5, r0
 802078a:	0092      	lsls	r2, r2, #2
 802078c:	f107 010c 	add.w	r1, r7, #12
 8020790:	300c      	adds	r0, #12
 8020792:	f7fe fae5 	bl	801ed60 <memcpy>
 8020796:	2201      	movs	r2, #1
 8020798:	4629      	mov	r1, r5
 802079a:	4620      	mov	r0, r4
 802079c:	f000 fc6e 	bl	802107c <__lshift>
 80207a0:	9b00      	ldr	r3, [sp, #0]
 80207a2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80207a6:	9703      	str	r7, [sp, #12]
 80207a8:	f003 0301 	and.w	r3, r3, #1
 80207ac:	4607      	mov	r7, r0
 80207ae:	9305      	str	r3, [sp, #20]
 80207b0:	4631      	mov	r1, r6
 80207b2:	4650      	mov	r0, sl
 80207b4:	f7ff fa60 	bl	801fc78 <quorem>
 80207b8:	9903      	ldr	r1, [sp, #12]
 80207ba:	4605      	mov	r5, r0
 80207bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80207c0:	4650      	mov	r0, sl
 80207c2:	f000 fcac 	bl	802111e <__mcmp>
 80207c6:	463a      	mov	r2, r7
 80207c8:	9000      	str	r0, [sp, #0]
 80207ca:	4631      	mov	r1, r6
 80207cc:	4620      	mov	r0, r4
 80207ce:	f000 fcc0 	bl	8021152 <__mdiff>
 80207d2:	68c3      	ldr	r3, [r0, #12]
 80207d4:	4602      	mov	r2, r0
 80207d6:	bb03      	cbnz	r3, 802081a <_dtoa_r+0xa8a>
 80207d8:	4601      	mov	r1, r0
 80207da:	9006      	str	r0, [sp, #24]
 80207dc:	4650      	mov	r0, sl
 80207de:	f000 fc9e 	bl	802111e <__mcmp>
 80207e2:	9a06      	ldr	r2, [sp, #24]
 80207e4:	4603      	mov	r3, r0
 80207e6:	4611      	mov	r1, r2
 80207e8:	4620      	mov	r0, r4
 80207ea:	9306      	str	r3, [sp, #24]
 80207ec:	f000 fac2 	bl	8020d74 <_Bfree>
 80207f0:	9b06      	ldr	r3, [sp, #24]
 80207f2:	b9a3      	cbnz	r3, 802081e <_dtoa_r+0xa8e>
 80207f4:	9a07      	ldr	r2, [sp, #28]
 80207f6:	b992      	cbnz	r2, 802081e <_dtoa_r+0xa8e>
 80207f8:	9a05      	ldr	r2, [sp, #20]
 80207fa:	b982      	cbnz	r2, 802081e <_dtoa_r+0xa8e>
 80207fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8020800:	d029      	beq.n	8020856 <_dtoa_r+0xac6>
 8020802:	9b00      	ldr	r3, [sp, #0]
 8020804:	2b00      	cmp	r3, #0
 8020806:	dd01      	ble.n	802080c <_dtoa_r+0xa7c>
 8020808:	f105 0931 	add.w	r9, r5, #49	; 0x31
 802080c:	f108 0501 	add.w	r5, r8, #1
 8020810:	f888 9000 	strb.w	r9, [r8]
 8020814:	e753      	b.n	80206be <_dtoa_r+0x92e>
 8020816:	4638      	mov	r0, r7
 8020818:	e7c2      	b.n	80207a0 <_dtoa_r+0xa10>
 802081a:	2301      	movs	r3, #1
 802081c:	e7e3      	b.n	80207e6 <_dtoa_r+0xa56>
 802081e:	9a00      	ldr	r2, [sp, #0]
 8020820:	2a00      	cmp	r2, #0
 8020822:	db04      	blt.n	802082e <_dtoa_r+0xa9e>
 8020824:	d125      	bne.n	8020872 <_dtoa_r+0xae2>
 8020826:	9a07      	ldr	r2, [sp, #28]
 8020828:	bb1a      	cbnz	r2, 8020872 <_dtoa_r+0xae2>
 802082a:	9a05      	ldr	r2, [sp, #20]
 802082c:	bb0a      	cbnz	r2, 8020872 <_dtoa_r+0xae2>
 802082e:	2b00      	cmp	r3, #0
 8020830:	ddec      	ble.n	802080c <_dtoa_r+0xa7c>
 8020832:	4651      	mov	r1, sl
 8020834:	2201      	movs	r2, #1
 8020836:	4620      	mov	r0, r4
 8020838:	f000 fc20 	bl	802107c <__lshift>
 802083c:	4631      	mov	r1, r6
 802083e:	4682      	mov	sl, r0
 8020840:	f000 fc6d 	bl	802111e <__mcmp>
 8020844:	2800      	cmp	r0, #0
 8020846:	dc03      	bgt.n	8020850 <_dtoa_r+0xac0>
 8020848:	d1e0      	bne.n	802080c <_dtoa_r+0xa7c>
 802084a:	f019 0f01 	tst.w	r9, #1
 802084e:	d0dd      	beq.n	802080c <_dtoa_r+0xa7c>
 8020850:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8020854:	d1d8      	bne.n	8020808 <_dtoa_r+0xa78>
 8020856:	2339      	movs	r3, #57	; 0x39
 8020858:	f888 3000 	strb.w	r3, [r8]
 802085c:	f108 0801 	add.w	r8, r8, #1
 8020860:	4645      	mov	r5, r8
 8020862:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020866:	2b39      	cmp	r3, #57	; 0x39
 8020868:	f105 32ff 	add.w	r2, r5, #4294967295
 802086c:	d03b      	beq.n	80208e6 <_dtoa_r+0xb56>
 802086e:	3301      	adds	r3, #1
 8020870:	e040      	b.n	80208f4 <_dtoa_r+0xb64>
 8020872:	2b00      	cmp	r3, #0
 8020874:	f108 0501 	add.w	r5, r8, #1
 8020878:	dd05      	ble.n	8020886 <_dtoa_r+0xaf6>
 802087a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802087e:	d0ea      	beq.n	8020856 <_dtoa_r+0xac6>
 8020880:	f109 0901 	add.w	r9, r9, #1
 8020884:	e7c4      	b.n	8020810 <_dtoa_r+0xa80>
 8020886:	9b02      	ldr	r3, [sp, #8]
 8020888:	9a04      	ldr	r2, [sp, #16]
 802088a:	f805 9c01 	strb.w	r9, [r5, #-1]
 802088e:	1aeb      	subs	r3, r5, r3
 8020890:	4293      	cmp	r3, r2
 8020892:	46a8      	mov	r8, r5
 8020894:	f43f af4b 	beq.w	802072e <_dtoa_r+0x99e>
 8020898:	4651      	mov	r1, sl
 802089a:	2300      	movs	r3, #0
 802089c:	220a      	movs	r2, #10
 802089e:	4620      	mov	r0, r4
 80208a0:	f000 fa7f 	bl	8020da2 <__multadd>
 80208a4:	9b03      	ldr	r3, [sp, #12]
 80208a6:	9903      	ldr	r1, [sp, #12]
 80208a8:	42bb      	cmp	r3, r7
 80208aa:	4682      	mov	sl, r0
 80208ac:	f04f 0300 	mov.w	r3, #0
 80208b0:	f04f 020a 	mov.w	r2, #10
 80208b4:	4620      	mov	r0, r4
 80208b6:	d104      	bne.n	80208c2 <_dtoa_r+0xb32>
 80208b8:	f000 fa73 	bl	8020da2 <__multadd>
 80208bc:	9003      	str	r0, [sp, #12]
 80208be:	4607      	mov	r7, r0
 80208c0:	e776      	b.n	80207b0 <_dtoa_r+0xa20>
 80208c2:	f000 fa6e 	bl	8020da2 <__multadd>
 80208c6:	2300      	movs	r3, #0
 80208c8:	9003      	str	r0, [sp, #12]
 80208ca:	220a      	movs	r2, #10
 80208cc:	4639      	mov	r1, r7
 80208ce:	4620      	mov	r0, r4
 80208d0:	f000 fa67 	bl	8020da2 <__multadd>
 80208d4:	e7f3      	b.n	80208be <_dtoa_r+0xb2e>
 80208d6:	4651      	mov	r1, sl
 80208d8:	2300      	movs	r3, #0
 80208da:	220a      	movs	r2, #10
 80208dc:	4620      	mov	r0, r4
 80208de:	f000 fa60 	bl	8020da2 <__multadd>
 80208e2:	4682      	mov	sl, r0
 80208e4:	e70d      	b.n	8020702 <_dtoa_r+0x972>
 80208e6:	9b02      	ldr	r3, [sp, #8]
 80208e8:	4293      	cmp	r3, r2
 80208ea:	d105      	bne.n	80208f8 <_dtoa_r+0xb68>
 80208ec:	9a02      	ldr	r2, [sp, #8]
 80208ee:	f10b 0b01 	add.w	fp, fp, #1
 80208f2:	2331      	movs	r3, #49	; 0x31
 80208f4:	7013      	strb	r3, [r2, #0]
 80208f6:	e6e2      	b.n	80206be <_dtoa_r+0x92e>
 80208f8:	4615      	mov	r5, r2
 80208fa:	e7b2      	b.n	8020862 <_dtoa_r+0xad2>
 80208fc:	4b09      	ldr	r3, [pc, #36]	; (8020924 <_dtoa_r+0xb94>)
 80208fe:	f7ff baae 	b.w	801fe5e <_dtoa_r+0xce>
 8020902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020904:	2b00      	cmp	r3, #0
 8020906:	f47f aa88 	bne.w	801fe1a <_dtoa_r+0x8a>
 802090a:	4b07      	ldr	r3, [pc, #28]	; (8020928 <_dtoa_r+0xb98>)
 802090c:	f7ff baa7 	b.w	801fe5e <_dtoa_r+0xce>
 8020910:	9b04      	ldr	r3, [sp, #16]
 8020912:	2b00      	cmp	r3, #0
 8020914:	f73f aef4 	bgt.w	8020700 <_dtoa_r+0x970>
 8020918:	9b07      	ldr	r3, [sp, #28]
 802091a:	2b02      	cmp	r3, #2
 802091c:	f77f aef0 	ble.w	8020700 <_dtoa_r+0x970>
 8020920:	e6b8      	b.n	8020694 <_dtoa_r+0x904>
 8020922:	bf00      	nop
 8020924:	0802276c 	.word	0x0802276c
 8020928:	08022790 	.word	0x08022790

0802092c <__sflush_r>:
 802092c:	898a      	ldrh	r2, [r1, #12]
 802092e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020932:	4605      	mov	r5, r0
 8020934:	0710      	lsls	r0, r2, #28
 8020936:	460c      	mov	r4, r1
 8020938:	d45a      	bmi.n	80209f0 <__sflush_r+0xc4>
 802093a:	684b      	ldr	r3, [r1, #4]
 802093c:	2b00      	cmp	r3, #0
 802093e:	dc05      	bgt.n	802094c <__sflush_r+0x20>
 8020940:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020942:	2b00      	cmp	r3, #0
 8020944:	dc02      	bgt.n	802094c <__sflush_r+0x20>
 8020946:	2000      	movs	r0, #0
 8020948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802094c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802094e:	2e00      	cmp	r6, #0
 8020950:	d0f9      	beq.n	8020946 <__sflush_r+0x1a>
 8020952:	2300      	movs	r3, #0
 8020954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020958:	682f      	ldr	r7, [r5, #0]
 802095a:	602b      	str	r3, [r5, #0]
 802095c:	d033      	beq.n	80209c6 <__sflush_r+0x9a>
 802095e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020960:	89a3      	ldrh	r3, [r4, #12]
 8020962:	075a      	lsls	r2, r3, #29
 8020964:	d505      	bpl.n	8020972 <__sflush_r+0x46>
 8020966:	6863      	ldr	r3, [r4, #4]
 8020968:	1ac0      	subs	r0, r0, r3
 802096a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802096c:	b10b      	cbz	r3, 8020972 <__sflush_r+0x46>
 802096e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020970:	1ac0      	subs	r0, r0, r3
 8020972:	2300      	movs	r3, #0
 8020974:	4602      	mov	r2, r0
 8020976:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020978:	6a21      	ldr	r1, [r4, #32]
 802097a:	4628      	mov	r0, r5
 802097c:	47b0      	blx	r6
 802097e:	1c43      	adds	r3, r0, #1
 8020980:	89a3      	ldrh	r3, [r4, #12]
 8020982:	d106      	bne.n	8020992 <__sflush_r+0x66>
 8020984:	6829      	ldr	r1, [r5, #0]
 8020986:	291d      	cmp	r1, #29
 8020988:	d84b      	bhi.n	8020a22 <__sflush_r+0xf6>
 802098a:	4a2b      	ldr	r2, [pc, #172]	; (8020a38 <__sflush_r+0x10c>)
 802098c:	40ca      	lsrs	r2, r1
 802098e:	07d6      	lsls	r6, r2, #31
 8020990:	d547      	bpl.n	8020a22 <__sflush_r+0xf6>
 8020992:	2200      	movs	r2, #0
 8020994:	6062      	str	r2, [r4, #4]
 8020996:	04d9      	lsls	r1, r3, #19
 8020998:	6922      	ldr	r2, [r4, #16]
 802099a:	6022      	str	r2, [r4, #0]
 802099c:	d504      	bpl.n	80209a8 <__sflush_r+0x7c>
 802099e:	1c42      	adds	r2, r0, #1
 80209a0:	d101      	bne.n	80209a6 <__sflush_r+0x7a>
 80209a2:	682b      	ldr	r3, [r5, #0]
 80209a4:	b903      	cbnz	r3, 80209a8 <__sflush_r+0x7c>
 80209a6:	6560      	str	r0, [r4, #84]	; 0x54
 80209a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80209aa:	602f      	str	r7, [r5, #0]
 80209ac:	2900      	cmp	r1, #0
 80209ae:	d0ca      	beq.n	8020946 <__sflush_r+0x1a>
 80209b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80209b4:	4299      	cmp	r1, r3
 80209b6:	d002      	beq.n	80209be <__sflush_r+0x92>
 80209b8:	4628      	mov	r0, r5
 80209ba:	f7fe f9e5 	bl	801ed88 <_free_r>
 80209be:	2000      	movs	r0, #0
 80209c0:	6360      	str	r0, [r4, #52]	; 0x34
 80209c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80209c6:	6a21      	ldr	r1, [r4, #32]
 80209c8:	2301      	movs	r3, #1
 80209ca:	4628      	mov	r0, r5
 80209cc:	47b0      	blx	r6
 80209ce:	1c41      	adds	r1, r0, #1
 80209d0:	d1c6      	bne.n	8020960 <__sflush_r+0x34>
 80209d2:	682b      	ldr	r3, [r5, #0]
 80209d4:	2b00      	cmp	r3, #0
 80209d6:	d0c3      	beq.n	8020960 <__sflush_r+0x34>
 80209d8:	2b1d      	cmp	r3, #29
 80209da:	d001      	beq.n	80209e0 <__sflush_r+0xb4>
 80209dc:	2b16      	cmp	r3, #22
 80209de:	d101      	bne.n	80209e4 <__sflush_r+0xb8>
 80209e0:	602f      	str	r7, [r5, #0]
 80209e2:	e7b0      	b.n	8020946 <__sflush_r+0x1a>
 80209e4:	89a3      	ldrh	r3, [r4, #12]
 80209e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80209ea:	81a3      	strh	r3, [r4, #12]
 80209ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80209f0:	690f      	ldr	r7, [r1, #16]
 80209f2:	2f00      	cmp	r7, #0
 80209f4:	d0a7      	beq.n	8020946 <__sflush_r+0x1a>
 80209f6:	0793      	lsls	r3, r2, #30
 80209f8:	680e      	ldr	r6, [r1, #0]
 80209fa:	bf08      	it	eq
 80209fc:	694b      	ldreq	r3, [r1, #20]
 80209fe:	600f      	str	r7, [r1, #0]
 8020a00:	bf18      	it	ne
 8020a02:	2300      	movne	r3, #0
 8020a04:	eba6 0807 	sub.w	r8, r6, r7
 8020a08:	608b      	str	r3, [r1, #8]
 8020a0a:	f1b8 0f00 	cmp.w	r8, #0
 8020a0e:	dd9a      	ble.n	8020946 <__sflush_r+0x1a>
 8020a10:	4643      	mov	r3, r8
 8020a12:	463a      	mov	r2, r7
 8020a14:	6a21      	ldr	r1, [r4, #32]
 8020a16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020a18:	4628      	mov	r0, r5
 8020a1a:	47b0      	blx	r6
 8020a1c:	2800      	cmp	r0, #0
 8020a1e:	dc07      	bgt.n	8020a30 <__sflush_r+0x104>
 8020a20:	89a3      	ldrh	r3, [r4, #12]
 8020a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020a26:	81a3      	strh	r3, [r4, #12]
 8020a28:	f04f 30ff 	mov.w	r0, #4294967295
 8020a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020a30:	4407      	add	r7, r0
 8020a32:	eba8 0800 	sub.w	r8, r8, r0
 8020a36:	e7e8      	b.n	8020a0a <__sflush_r+0xde>
 8020a38:	20400001 	.word	0x20400001

08020a3c <_fflush_r>:
 8020a3c:	b538      	push	{r3, r4, r5, lr}
 8020a3e:	690b      	ldr	r3, [r1, #16]
 8020a40:	4605      	mov	r5, r0
 8020a42:	460c      	mov	r4, r1
 8020a44:	b1db      	cbz	r3, 8020a7e <_fflush_r+0x42>
 8020a46:	b118      	cbz	r0, 8020a50 <_fflush_r+0x14>
 8020a48:	6983      	ldr	r3, [r0, #24]
 8020a4a:	b90b      	cbnz	r3, 8020a50 <_fflush_r+0x14>
 8020a4c:	f000 f860 	bl	8020b10 <__sinit>
 8020a50:	4b0c      	ldr	r3, [pc, #48]	; (8020a84 <_fflush_r+0x48>)
 8020a52:	429c      	cmp	r4, r3
 8020a54:	d109      	bne.n	8020a6a <_fflush_r+0x2e>
 8020a56:	686c      	ldr	r4, [r5, #4]
 8020a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020a5c:	b17b      	cbz	r3, 8020a7e <_fflush_r+0x42>
 8020a5e:	4621      	mov	r1, r4
 8020a60:	4628      	mov	r0, r5
 8020a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020a66:	f7ff bf61 	b.w	802092c <__sflush_r>
 8020a6a:	4b07      	ldr	r3, [pc, #28]	; (8020a88 <_fflush_r+0x4c>)
 8020a6c:	429c      	cmp	r4, r3
 8020a6e:	d101      	bne.n	8020a74 <_fflush_r+0x38>
 8020a70:	68ac      	ldr	r4, [r5, #8]
 8020a72:	e7f1      	b.n	8020a58 <_fflush_r+0x1c>
 8020a74:	4b05      	ldr	r3, [pc, #20]	; (8020a8c <_fflush_r+0x50>)
 8020a76:	429c      	cmp	r4, r3
 8020a78:	bf08      	it	eq
 8020a7a:	68ec      	ldreq	r4, [r5, #12]
 8020a7c:	e7ec      	b.n	8020a58 <_fflush_r+0x1c>
 8020a7e:	2000      	movs	r0, #0
 8020a80:	bd38      	pop	{r3, r4, r5, pc}
 8020a82:	bf00      	nop
 8020a84:	080227c0 	.word	0x080227c0
 8020a88:	080227e0 	.word	0x080227e0
 8020a8c:	080227a0 	.word	0x080227a0

08020a90 <_cleanup_r>:
 8020a90:	4901      	ldr	r1, [pc, #4]	; (8020a98 <_cleanup_r+0x8>)
 8020a92:	f000 b8a9 	b.w	8020be8 <_fwalk_reent>
 8020a96:	bf00      	nop
 8020a98:	08020a3d 	.word	0x08020a3d

08020a9c <std.isra.0>:
 8020a9c:	2300      	movs	r3, #0
 8020a9e:	b510      	push	{r4, lr}
 8020aa0:	4604      	mov	r4, r0
 8020aa2:	6003      	str	r3, [r0, #0]
 8020aa4:	6043      	str	r3, [r0, #4]
 8020aa6:	6083      	str	r3, [r0, #8]
 8020aa8:	8181      	strh	r1, [r0, #12]
 8020aaa:	6643      	str	r3, [r0, #100]	; 0x64
 8020aac:	81c2      	strh	r2, [r0, #14]
 8020aae:	6103      	str	r3, [r0, #16]
 8020ab0:	6143      	str	r3, [r0, #20]
 8020ab2:	6183      	str	r3, [r0, #24]
 8020ab4:	4619      	mov	r1, r3
 8020ab6:	2208      	movs	r2, #8
 8020ab8:	305c      	adds	r0, #92	; 0x5c
 8020aba:	f7fe f95c 	bl	801ed76 <memset>
 8020abe:	4b05      	ldr	r3, [pc, #20]	; (8020ad4 <std.isra.0+0x38>)
 8020ac0:	6263      	str	r3, [r4, #36]	; 0x24
 8020ac2:	4b05      	ldr	r3, [pc, #20]	; (8020ad8 <std.isra.0+0x3c>)
 8020ac4:	62a3      	str	r3, [r4, #40]	; 0x28
 8020ac6:	4b05      	ldr	r3, [pc, #20]	; (8020adc <std.isra.0+0x40>)
 8020ac8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020aca:	4b05      	ldr	r3, [pc, #20]	; (8020ae0 <std.isra.0+0x44>)
 8020acc:	6224      	str	r4, [r4, #32]
 8020ace:	6323      	str	r3, [r4, #48]	; 0x30
 8020ad0:	bd10      	pop	{r4, pc}
 8020ad2:	bf00      	nop
 8020ad4:	08021855 	.word	0x08021855
 8020ad8:	08021877 	.word	0x08021877
 8020adc:	080218af 	.word	0x080218af
 8020ae0:	080218d3 	.word	0x080218d3

08020ae4 <__sfmoreglue>:
 8020ae4:	b570      	push	{r4, r5, r6, lr}
 8020ae6:	1e4a      	subs	r2, r1, #1
 8020ae8:	2568      	movs	r5, #104	; 0x68
 8020aea:	4355      	muls	r5, r2
 8020aec:	460e      	mov	r6, r1
 8020aee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020af2:	f7fe f997 	bl	801ee24 <_malloc_r>
 8020af6:	4604      	mov	r4, r0
 8020af8:	b140      	cbz	r0, 8020b0c <__sfmoreglue+0x28>
 8020afa:	2100      	movs	r1, #0
 8020afc:	e880 0042 	stmia.w	r0, {r1, r6}
 8020b00:	300c      	adds	r0, #12
 8020b02:	60a0      	str	r0, [r4, #8]
 8020b04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020b08:	f7fe f935 	bl	801ed76 <memset>
 8020b0c:	4620      	mov	r0, r4
 8020b0e:	bd70      	pop	{r4, r5, r6, pc}

08020b10 <__sinit>:
 8020b10:	6983      	ldr	r3, [r0, #24]
 8020b12:	b510      	push	{r4, lr}
 8020b14:	4604      	mov	r4, r0
 8020b16:	bb33      	cbnz	r3, 8020b66 <__sinit+0x56>
 8020b18:	6483      	str	r3, [r0, #72]	; 0x48
 8020b1a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8020b1c:	6503      	str	r3, [r0, #80]	; 0x50
 8020b1e:	4b12      	ldr	r3, [pc, #72]	; (8020b68 <__sinit+0x58>)
 8020b20:	4a12      	ldr	r2, [pc, #72]	; (8020b6c <__sinit+0x5c>)
 8020b22:	681b      	ldr	r3, [r3, #0]
 8020b24:	6282      	str	r2, [r0, #40]	; 0x28
 8020b26:	4298      	cmp	r0, r3
 8020b28:	bf04      	itt	eq
 8020b2a:	2301      	moveq	r3, #1
 8020b2c:	6183      	streq	r3, [r0, #24]
 8020b2e:	f000 f81f 	bl	8020b70 <__sfp>
 8020b32:	6060      	str	r0, [r4, #4]
 8020b34:	4620      	mov	r0, r4
 8020b36:	f000 f81b 	bl	8020b70 <__sfp>
 8020b3a:	60a0      	str	r0, [r4, #8]
 8020b3c:	4620      	mov	r0, r4
 8020b3e:	f000 f817 	bl	8020b70 <__sfp>
 8020b42:	2200      	movs	r2, #0
 8020b44:	60e0      	str	r0, [r4, #12]
 8020b46:	2104      	movs	r1, #4
 8020b48:	6860      	ldr	r0, [r4, #4]
 8020b4a:	f7ff ffa7 	bl	8020a9c <std.isra.0>
 8020b4e:	2201      	movs	r2, #1
 8020b50:	2109      	movs	r1, #9
 8020b52:	68a0      	ldr	r0, [r4, #8]
 8020b54:	f7ff ffa2 	bl	8020a9c <std.isra.0>
 8020b58:	2202      	movs	r2, #2
 8020b5a:	2112      	movs	r1, #18
 8020b5c:	68e0      	ldr	r0, [r4, #12]
 8020b5e:	f7ff ff9d 	bl	8020a9c <std.isra.0>
 8020b62:	2301      	movs	r3, #1
 8020b64:	61a3      	str	r3, [r4, #24]
 8020b66:	bd10      	pop	{r4, pc}
 8020b68:	08022758 	.word	0x08022758
 8020b6c:	08020a91 	.word	0x08020a91

08020b70 <__sfp>:
 8020b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b72:	4b1c      	ldr	r3, [pc, #112]	; (8020be4 <__sfp+0x74>)
 8020b74:	681e      	ldr	r6, [r3, #0]
 8020b76:	69b3      	ldr	r3, [r6, #24]
 8020b78:	4607      	mov	r7, r0
 8020b7a:	b913      	cbnz	r3, 8020b82 <__sfp+0x12>
 8020b7c:	4630      	mov	r0, r6
 8020b7e:	f7ff ffc7 	bl	8020b10 <__sinit>
 8020b82:	3648      	adds	r6, #72	; 0x48
 8020b84:	68b4      	ldr	r4, [r6, #8]
 8020b86:	6873      	ldr	r3, [r6, #4]
 8020b88:	3b01      	subs	r3, #1
 8020b8a:	d503      	bpl.n	8020b94 <__sfp+0x24>
 8020b8c:	6833      	ldr	r3, [r6, #0]
 8020b8e:	b133      	cbz	r3, 8020b9e <__sfp+0x2e>
 8020b90:	6836      	ldr	r6, [r6, #0]
 8020b92:	e7f7      	b.n	8020b84 <__sfp+0x14>
 8020b94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020b98:	b16d      	cbz	r5, 8020bb6 <__sfp+0x46>
 8020b9a:	3468      	adds	r4, #104	; 0x68
 8020b9c:	e7f4      	b.n	8020b88 <__sfp+0x18>
 8020b9e:	2104      	movs	r1, #4
 8020ba0:	4638      	mov	r0, r7
 8020ba2:	f7ff ff9f 	bl	8020ae4 <__sfmoreglue>
 8020ba6:	6030      	str	r0, [r6, #0]
 8020ba8:	2800      	cmp	r0, #0
 8020baa:	d1f1      	bne.n	8020b90 <__sfp+0x20>
 8020bac:	230c      	movs	r3, #12
 8020bae:	603b      	str	r3, [r7, #0]
 8020bb0:	4604      	mov	r4, r0
 8020bb2:	4620      	mov	r0, r4
 8020bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020bba:	81e3      	strh	r3, [r4, #14]
 8020bbc:	2301      	movs	r3, #1
 8020bbe:	81a3      	strh	r3, [r4, #12]
 8020bc0:	6665      	str	r5, [r4, #100]	; 0x64
 8020bc2:	6025      	str	r5, [r4, #0]
 8020bc4:	60a5      	str	r5, [r4, #8]
 8020bc6:	6065      	str	r5, [r4, #4]
 8020bc8:	6125      	str	r5, [r4, #16]
 8020bca:	6165      	str	r5, [r4, #20]
 8020bcc:	61a5      	str	r5, [r4, #24]
 8020bce:	2208      	movs	r2, #8
 8020bd0:	4629      	mov	r1, r5
 8020bd2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020bd6:	f7fe f8ce 	bl	801ed76 <memset>
 8020bda:	6365      	str	r5, [r4, #52]	; 0x34
 8020bdc:	63a5      	str	r5, [r4, #56]	; 0x38
 8020bde:	64a5      	str	r5, [r4, #72]	; 0x48
 8020be0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8020be2:	e7e6      	b.n	8020bb2 <__sfp+0x42>
 8020be4:	08022758 	.word	0x08022758

08020be8 <_fwalk_reent>:
 8020be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020bec:	4680      	mov	r8, r0
 8020bee:	4689      	mov	r9, r1
 8020bf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020bf4:	2600      	movs	r6, #0
 8020bf6:	b914      	cbnz	r4, 8020bfe <_fwalk_reent+0x16>
 8020bf8:	4630      	mov	r0, r6
 8020bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020bfe:	68a5      	ldr	r5, [r4, #8]
 8020c00:	6867      	ldr	r7, [r4, #4]
 8020c02:	3f01      	subs	r7, #1
 8020c04:	d501      	bpl.n	8020c0a <_fwalk_reent+0x22>
 8020c06:	6824      	ldr	r4, [r4, #0]
 8020c08:	e7f5      	b.n	8020bf6 <_fwalk_reent+0xe>
 8020c0a:	89ab      	ldrh	r3, [r5, #12]
 8020c0c:	2b01      	cmp	r3, #1
 8020c0e:	d907      	bls.n	8020c20 <_fwalk_reent+0x38>
 8020c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020c14:	3301      	adds	r3, #1
 8020c16:	d003      	beq.n	8020c20 <_fwalk_reent+0x38>
 8020c18:	4629      	mov	r1, r5
 8020c1a:	4640      	mov	r0, r8
 8020c1c:	47c8      	blx	r9
 8020c1e:	4306      	orrs	r6, r0
 8020c20:	3568      	adds	r5, #104	; 0x68
 8020c22:	e7ee      	b.n	8020c02 <_fwalk_reent+0x1a>

08020c24 <_localeconv_r>:
 8020c24:	4b04      	ldr	r3, [pc, #16]	; (8020c38 <_localeconv_r+0x14>)
 8020c26:	681b      	ldr	r3, [r3, #0]
 8020c28:	6a18      	ldr	r0, [r3, #32]
 8020c2a:	4b04      	ldr	r3, [pc, #16]	; (8020c3c <_localeconv_r+0x18>)
 8020c2c:	2800      	cmp	r0, #0
 8020c2e:	bf08      	it	eq
 8020c30:	4618      	moveq	r0, r3
 8020c32:	30f0      	adds	r0, #240	; 0xf0
 8020c34:	4770      	bx	lr
 8020c36:	bf00      	nop
 8020c38:	200014a8 	.word	0x200014a8
 8020c3c:	2000150c 	.word	0x2000150c

08020c40 <__swhatbuf_r>:
 8020c40:	b570      	push	{r4, r5, r6, lr}
 8020c42:	460e      	mov	r6, r1
 8020c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020c48:	2900      	cmp	r1, #0
 8020c4a:	b090      	sub	sp, #64	; 0x40
 8020c4c:	4614      	mov	r4, r2
 8020c4e:	461d      	mov	r5, r3
 8020c50:	da07      	bge.n	8020c62 <__swhatbuf_r+0x22>
 8020c52:	2300      	movs	r3, #0
 8020c54:	602b      	str	r3, [r5, #0]
 8020c56:	89b3      	ldrh	r3, [r6, #12]
 8020c58:	061a      	lsls	r2, r3, #24
 8020c5a:	d410      	bmi.n	8020c7e <__swhatbuf_r+0x3e>
 8020c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020c60:	e00e      	b.n	8020c80 <__swhatbuf_r+0x40>
 8020c62:	aa01      	add	r2, sp, #4
 8020c64:	f000 fe5c 	bl	8021920 <_fstat_r>
 8020c68:	2800      	cmp	r0, #0
 8020c6a:	dbf2      	blt.n	8020c52 <__swhatbuf_r+0x12>
 8020c6c:	9a02      	ldr	r2, [sp, #8]
 8020c6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020c72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020c76:	425a      	negs	r2, r3
 8020c78:	415a      	adcs	r2, r3
 8020c7a:	602a      	str	r2, [r5, #0]
 8020c7c:	e7ee      	b.n	8020c5c <__swhatbuf_r+0x1c>
 8020c7e:	2340      	movs	r3, #64	; 0x40
 8020c80:	2000      	movs	r0, #0
 8020c82:	6023      	str	r3, [r4, #0]
 8020c84:	b010      	add	sp, #64	; 0x40
 8020c86:	bd70      	pop	{r4, r5, r6, pc}

08020c88 <__smakebuf_r>:
 8020c88:	898b      	ldrh	r3, [r1, #12]
 8020c8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020c8c:	079d      	lsls	r5, r3, #30
 8020c8e:	4606      	mov	r6, r0
 8020c90:	460c      	mov	r4, r1
 8020c92:	d507      	bpl.n	8020ca4 <__smakebuf_r+0x1c>
 8020c94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020c98:	6023      	str	r3, [r4, #0]
 8020c9a:	6123      	str	r3, [r4, #16]
 8020c9c:	2301      	movs	r3, #1
 8020c9e:	6163      	str	r3, [r4, #20]
 8020ca0:	b002      	add	sp, #8
 8020ca2:	bd70      	pop	{r4, r5, r6, pc}
 8020ca4:	ab01      	add	r3, sp, #4
 8020ca6:	466a      	mov	r2, sp
 8020ca8:	f7ff ffca 	bl	8020c40 <__swhatbuf_r>
 8020cac:	9900      	ldr	r1, [sp, #0]
 8020cae:	4605      	mov	r5, r0
 8020cb0:	4630      	mov	r0, r6
 8020cb2:	f7fe f8b7 	bl	801ee24 <_malloc_r>
 8020cb6:	b948      	cbnz	r0, 8020ccc <__smakebuf_r+0x44>
 8020cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020cbc:	059a      	lsls	r2, r3, #22
 8020cbe:	d4ef      	bmi.n	8020ca0 <__smakebuf_r+0x18>
 8020cc0:	f023 0303 	bic.w	r3, r3, #3
 8020cc4:	f043 0302 	orr.w	r3, r3, #2
 8020cc8:	81a3      	strh	r3, [r4, #12]
 8020cca:	e7e3      	b.n	8020c94 <__smakebuf_r+0xc>
 8020ccc:	4b0d      	ldr	r3, [pc, #52]	; (8020d04 <__smakebuf_r+0x7c>)
 8020cce:	62b3      	str	r3, [r6, #40]	; 0x28
 8020cd0:	89a3      	ldrh	r3, [r4, #12]
 8020cd2:	6020      	str	r0, [r4, #0]
 8020cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020cd8:	81a3      	strh	r3, [r4, #12]
 8020cda:	9b00      	ldr	r3, [sp, #0]
 8020cdc:	6163      	str	r3, [r4, #20]
 8020cde:	9b01      	ldr	r3, [sp, #4]
 8020ce0:	6120      	str	r0, [r4, #16]
 8020ce2:	b15b      	cbz	r3, 8020cfc <__smakebuf_r+0x74>
 8020ce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020ce8:	4630      	mov	r0, r6
 8020cea:	f000 fe2b 	bl	8021944 <_isatty_r>
 8020cee:	b128      	cbz	r0, 8020cfc <__smakebuf_r+0x74>
 8020cf0:	89a3      	ldrh	r3, [r4, #12]
 8020cf2:	f023 0303 	bic.w	r3, r3, #3
 8020cf6:	f043 0301 	orr.w	r3, r3, #1
 8020cfa:	81a3      	strh	r3, [r4, #12]
 8020cfc:	89a3      	ldrh	r3, [r4, #12]
 8020cfe:	431d      	orrs	r5, r3
 8020d00:	81a5      	strh	r5, [r4, #12]
 8020d02:	e7cd      	b.n	8020ca0 <__smakebuf_r+0x18>
 8020d04:	08020a91 	.word	0x08020a91

08020d08 <__malloc_lock>:
 8020d08:	4770      	bx	lr

08020d0a <__malloc_unlock>:
 8020d0a:	4770      	bx	lr

08020d0c <_Balloc>:
 8020d0c:	b570      	push	{r4, r5, r6, lr}
 8020d0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020d10:	4604      	mov	r4, r0
 8020d12:	460e      	mov	r6, r1
 8020d14:	b93d      	cbnz	r5, 8020d26 <_Balloc+0x1a>
 8020d16:	2010      	movs	r0, #16
 8020d18:	f7fe f81a 	bl	801ed50 <malloc>
 8020d1c:	6260      	str	r0, [r4, #36]	; 0x24
 8020d1e:	6045      	str	r5, [r0, #4]
 8020d20:	6085      	str	r5, [r0, #8]
 8020d22:	6005      	str	r5, [r0, #0]
 8020d24:	60c5      	str	r5, [r0, #12]
 8020d26:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8020d28:	68eb      	ldr	r3, [r5, #12]
 8020d2a:	b183      	cbz	r3, 8020d4e <_Balloc+0x42>
 8020d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020d2e:	68db      	ldr	r3, [r3, #12]
 8020d30:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8020d34:	b9b8      	cbnz	r0, 8020d66 <_Balloc+0x5a>
 8020d36:	2101      	movs	r1, #1
 8020d38:	fa01 f506 	lsl.w	r5, r1, r6
 8020d3c:	1d6a      	adds	r2, r5, #5
 8020d3e:	0092      	lsls	r2, r2, #2
 8020d40:	4620      	mov	r0, r4
 8020d42:	f000 fab3 	bl	80212ac <_calloc_r>
 8020d46:	b160      	cbz	r0, 8020d62 <_Balloc+0x56>
 8020d48:	6046      	str	r6, [r0, #4]
 8020d4a:	6085      	str	r5, [r0, #8]
 8020d4c:	e00e      	b.n	8020d6c <_Balloc+0x60>
 8020d4e:	2221      	movs	r2, #33	; 0x21
 8020d50:	2104      	movs	r1, #4
 8020d52:	4620      	mov	r0, r4
 8020d54:	f000 faaa 	bl	80212ac <_calloc_r>
 8020d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020d5a:	60e8      	str	r0, [r5, #12]
 8020d5c:	68db      	ldr	r3, [r3, #12]
 8020d5e:	2b00      	cmp	r3, #0
 8020d60:	d1e4      	bne.n	8020d2c <_Balloc+0x20>
 8020d62:	2000      	movs	r0, #0
 8020d64:	bd70      	pop	{r4, r5, r6, pc}
 8020d66:	6802      	ldr	r2, [r0, #0]
 8020d68:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8020d6c:	2300      	movs	r3, #0
 8020d6e:	6103      	str	r3, [r0, #16]
 8020d70:	60c3      	str	r3, [r0, #12]
 8020d72:	bd70      	pop	{r4, r5, r6, pc}

08020d74 <_Bfree>:
 8020d74:	b570      	push	{r4, r5, r6, lr}
 8020d76:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8020d78:	4606      	mov	r6, r0
 8020d7a:	460d      	mov	r5, r1
 8020d7c:	b93c      	cbnz	r4, 8020d8e <_Bfree+0x1a>
 8020d7e:	2010      	movs	r0, #16
 8020d80:	f7fd ffe6 	bl	801ed50 <malloc>
 8020d84:	6270      	str	r0, [r6, #36]	; 0x24
 8020d86:	6044      	str	r4, [r0, #4]
 8020d88:	6084      	str	r4, [r0, #8]
 8020d8a:	6004      	str	r4, [r0, #0]
 8020d8c:	60c4      	str	r4, [r0, #12]
 8020d8e:	b13d      	cbz	r5, 8020da0 <_Bfree+0x2c>
 8020d90:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8020d92:	686a      	ldr	r2, [r5, #4]
 8020d94:	68db      	ldr	r3, [r3, #12]
 8020d96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020d9a:	6029      	str	r1, [r5, #0]
 8020d9c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8020da0:	bd70      	pop	{r4, r5, r6, pc}

08020da2 <__multadd>:
 8020da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020da6:	690d      	ldr	r5, [r1, #16]
 8020da8:	461f      	mov	r7, r3
 8020daa:	4606      	mov	r6, r0
 8020dac:	460c      	mov	r4, r1
 8020dae:	f101 0e14 	add.w	lr, r1, #20
 8020db2:	2300      	movs	r3, #0
 8020db4:	f8de 0000 	ldr.w	r0, [lr]
 8020db8:	b281      	uxth	r1, r0
 8020dba:	fb02 7101 	mla	r1, r2, r1, r7
 8020dbe:	0c0f      	lsrs	r7, r1, #16
 8020dc0:	0c00      	lsrs	r0, r0, #16
 8020dc2:	fb02 7000 	mla	r0, r2, r0, r7
 8020dc6:	b289      	uxth	r1, r1
 8020dc8:	3301      	adds	r3, #1
 8020dca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8020dce:	429d      	cmp	r5, r3
 8020dd0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8020dd4:	f84e 1b04 	str.w	r1, [lr], #4
 8020dd8:	dcec      	bgt.n	8020db4 <__multadd+0x12>
 8020dda:	b1d7      	cbz	r7, 8020e12 <__multadd+0x70>
 8020ddc:	68a3      	ldr	r3, [r4, #8]
 8020dde:	429d      	cmp	r5, r3
 8020de0:	db12      	blt.n	8020e08 <__multadd+0x66>
 8020de2:	6861      	ldr	r1, [r4, #4]
 8020de4:	4630      	mov	r0, r6
 8020de6:	3101      	adds	r1, #1
 8020de8:	f7ff ff90 	bl	8020d0c <_Balloc>
 8020dec:	6922      	ldr	r2, [r4, #16]
 8020dee:	3202      	adds	r2, #2
 8020df0:	f104 010c 	add.w	r1, r4, #12
 8020df4:	4680      	mov	r8, r0
 8020df6:	0092      	lsls	r2, r2, #2
 8020df8:	300c      	adds	r0, #12
 8020dfa:	f7fd ffb1 	bl	801ed60 <memcpy>
 8020dfe:	4621      	mov	r1, r4
 8020e00:	4630      	mov	r0, r6
 8020e02:	f7ff ffb7 	bl	8020d74 <_Bfree>
 8020e06:	4644      	mov	r4, r8
 8020e08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020e0c:	3501      	adds	r5, #1
 8020e0e:	615f      	str	r7, [r3, #20]
 8020e10:	6125      	str	r5, [r4, #16]
 8020e12:	4620      	mov	r0, r4
 8020e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020e18 <__hi0bits>:
 8020e18:	0c02      	lsrs	r2, r0, #16
 8020e1a:	0412      	lsls	r2, r2, #16
 8020e1c:	4603      	mov	r3, r0
 8020e1e:	b9b2      	cbnz	r2, 8020e4e <__hi0bits+0x36>
 8020e20:	0403      	lsls	r3, r0, #16
 8020e22:	2010      	movs	r0, #16
 8020e24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8020e28:	bf04      	itt	eq
 8020e2a:	021b      	lsleq	r3, r3, #8
 8020e2c:	3008      	addeq	r0, #8
 8020e2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8020e32:	bf04      	itt	eq
 8020e34:	011b      	lsleq	r3, r3, #4
 8020e36:	3004      	addeq	r0, #4
 8020e38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8020e3c:	bf04      	itt	eq
 8020e3e:	009b      	lsleq	r3, r3, #2
 8020e40:	3002      	addeq	r0, #2
 8020e42:	2b00      	cmp	r3, #0
 8020e44:	db06      	blt.n	8020e54 <__hi0bits+0x3c>
 8020e46:	005b      	lsls	r3, r3, #1
 8020e48:	d503      	bpl.n	8020e52 <__hi0bits+0x3a>
 8020e4a:	3001      	adds	r0, #1
 8020e4c:	4770      	bx	lr
 8020e4e:	2000      	movs	r0, #0
 8020e50:	e7e8      	b.n	8020e24 <__hi0bits+0xc>
 8020e52:	2020      	movs	r0, #32
 8020e54:	4770      	bx	lr

08020e56 <__lo0bits>:
 8020e56:	6803      	ldr	r3, [r0, #0]
 8020e58:	f013 0207 	ands.w	r2, r3, #7
 8020e5c:	4601      	mov	r1, r0
 8020e5e:	d00b      	beq.n	8020e78 <__lo0bits+0x22>
 8020e60:	07da      	lsls	r2, r3, #31
 8020e62:	d423      	bmi.n	8020eac <__lo0bits+0x56>
 8020e64:	0798      	lsls	r0, r3, #30
 8020e66:	bf49      	itett	mi
 8020e68:	085b      	lsrmi	r3, r3, #1
 8020e6a:	089b      	lsrpl	r3, r3, #2
 8020e6c:	2001      	movmi	r0, #1
 8020e6e:	600b      	strmi	r3, [r1, #0]
 8020e70:	bf5c      	itt	pl
 8020e72:	600b      	strpl	r3, [r1, #0]
 8020e74:	2002      	movpl	r0, #2
 8020e76:	4770      	bx	lr
 8020e78:	b298      	uxth	r0, r3
 8020e7a:	b9a8      	cbnz	r0, 8020ea8 <__lo0bits+0x52>
 8020e7c:	0c1b      	lsrs	r3, r3, #16
 8020e7e:	2010      	movs	r0, #16
 8020e80:	f013 0fff 	tst.w	r3, #255	; 0xff
 8020e84:	bf04      	itt	eq
 8020e86:	0a1b      	lsreq	r3, r3, #8
 8020e88:	3008      	addeq	r0, #8
 8020e8a:	071a      	lsls	r2, r3, #28
 8020e8c:	bf04      	itt	eq
 8020e8e:	091b      	lsreq	r3, r3, #4
 8020e90:	3004      	addeq	r0, #4
 8020e92:	079a      	lsls	r2, r3, #30
 8020e94:	bf04      	itt	eq
 8020e96:	089b      	lsreq	r3, r3, #2
 8020e98:	3002      	addeq	r0, #2
 8020e9a:	07da      	lsls	r2, r3, #31
 8020e9c:	d402      	bmi.n	8020ea4 <__lo0bits+0x4e>
 8020e9e:	085b      	lsrs	r3, r3, #1
 8020ea0:	d006      	beq.n	8020eb0 <__lo0bits+0x5a>
 8020ea2:	3001      	adds	r0, #1
 8020ea4:	600b      	str	r3, [r1, #0]
 8020ea6:	4770      	bx	lr
 8020ea8:	4610      	mov	r0, r2
 8020eaa:	e7e9      	b.n	8020e80 <__lo0bits+0x2a>
 8020eac:	2000      	movs	r0, #0
 8020eae:	4770      	bx	lr
 8020eb0:	2020      	movs	r0, #32
 8020eb2:	4770      	bx	lr

08020eb4 <__i2b>:
 8020eb4:	b510      	push	{r4, lr}
 8020eb6:	460c      	mov	r4, r1
 8020eb8:	2101      	movs	r1, #1
 8020eba:	f7ff ff27 	bl	8020d0c <_Balloc>
 8020ebe:	2201      	movs	r2, #1
 8020ec0:	6144      	str	r4, [r0, #20]
 8020ec2:	6102      	str	r2, [r0, #16]
 8020ec4:	bd10      	pop	{r4, pc}

08020ec6 <__multiply>:
 8020ec6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020eca:	4614      	mov	r4, r2
 8020ecc:	690a      	ldr	r2, [r1, #16]
 8020ece:	6923      	ldr	r3, [r4, #16]
 8020ed0:	429a      	cmp	r2, r3
 8020ed2:	bfb8      	it	lt
 8020ed4:	460b      	movlt	r3, r1
 8020ed6:	4689      	mov	r9, r1
 8020ed8:	bfbc      	itt	lt
 8020eda:	46a1      	movlt	r9, r4
 8020edc:	461c      	movlt	r4, r3
 8020ede:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8020ee2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8020ee6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8020eea:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020eee:	eb07 060a 	add.w	r6, r7, sl
 8020ef2:	429e      	cmp	r6, r3
 8020ef4:	bfc8      	it	gt
 8020ef6:	3101      	addgt	r1, #1
 8020ef8:	f7ff ff08 	bl	8020d0c <_Balloc>
 8020efc:	f100 0514 	add.w	r5, r0, #20
 8020f00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8020f04:	462b      	mov	r3, r5
 8020f06:	2200      	movs	r2, #0
 8020f08:	4543      	cmp	r3, r8
 8020f0a:	d316      	bcc.n	8020f3a <__multiply+0x74>
 8020f0c:	f104 0214 	add.w	r2, r4, #20
 8020f10:	f109 0114 	add.w	r1, r9, #20
 8020f14:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8020f18:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8020f1c:	9301      	str	r3, [sp, #4]
 8020f1e:	9c01      	ldr	r4, [sp, #4]
 8020f20:	4294      	cmp	r4, r2
 8020f22:	4613      	mov	r3, r2
 8020f24:	d80c      	bhi.n	8020f40 <__multiply+0x7a>
 8020f26:	2e00      	cmp	r6, #0
 8020f28:	dd03      	ble.n	8020f32 <__multiply+0x6c>
 8020f2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8020f2e:	2b00      	cmp	r3, #0
 8020f30:	d054      	beq.n	8020fdc <__multiply+0x116>
 8020f32:	6106      	str	r6, [r0, #16]
 8020f34:	b003      	add	sp, #12
 8020f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f3a:	f843 2b04 	str.w	r2, [r3], #4
 8020f3e:	e7e3      	b.n	8020f08 <__multiply+0x42>
 8020f40:	f8b3 a000 	ldrh.w	sl, [r3]
 8020f44:	3204      	adds	r2, #4
 8020f46:	f1ba 0f00 	cmp.w	sl, #0
 8020f4a:	d020      	beq.n	8020f8e <__multiply+0xc8>
 8020f4c:	46ae      	mov	lr, r5
 8020f4e:	4689      	mov	r9, r1
 8020f50:	f04f 0c00 	mov.w	ip, #0
 8020f54:	f859 4b04 	ldr.w	r4, [r9], #4
 8020f58:	f8be b000 	ldrh.w	fp, [lr]
 8020f5c:	b2a3      	uxth	r3, r4
 8020f5e:	fb0a b303 	mla	r3, sl, r3, fp
 8020f62:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8020f66:	f8de 4000 	ldr.w	r4, [lr]
 8020f6a:	4463      	add	r3, ip
 8020f6c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8020f70:	fb0a c40b 	mla	r4, sl, fp, ip
 8020f74:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8020f78:	b29b      	uxth	r3, r3
 8020f7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8020f7e:	454f      	cmp	r7, r9
 8020f80:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8020f84:	f84e 3b04 	str.w	r3, [lr], #4
 8020f88:	d8e4      	bhi.n	8020f54 <__multiply+0x8e>
 8020f8a:	f8ce c000 	str.w	ip, [lr]
 8020f8e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8020f92:	f1b9 0f00 	cmp.w	r9, #0
 8020f96:	d01f      	beq.n	8020fd8 <__multiply+0x112>
 8020f98:	682b      	ldr	r3, [r5, #0]
 8020f9a:	46ae      	mov	lr, r5
 8020f9c:	468c      	mov	ip, r1
 8020f9e:	f04f 0a00 	mov.w	sl, #0
 8020fa2:	f8bc 4000 	ldrh.w	r4, [ip]
 8020fa6:	f8be b002 	ldrh.w	fp, [lr, #2]
 8020faa:	fb09 b404 	mla	r4, r9, r4, fp
 8020fae:	44a2      	add	sl, r4
 8020fb0:	b29b      	uxth	r3, r3
 8020fb2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8020fb6:	f84e 3b04 	str.w	r3, [lr], #4
 8020fba:	f85c 3b04 	ldr.w	r3, [ip], #4
 8020fbe:	f8be 4000 	ldrh.w	r4, [lr]
 8020fc2:	0c1b      	lsrs	r3, r3, #16
 8020fc4:	fb09 4303 	mla	r3, r9, r3, r4
 8020fc8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8020fcc:	4567      	cmp	r7, ip
 8020fce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020fd2:	d8e6      	bhi.n	8020fa2 <__multiply+0xdc>
 8020fd4:	f8ce 3000 	str.w	r3, [lr]
 8020fd8:	3504      	adds	r5, #4
 8020fda:	e7a0      	b.n	8020f1e <__multiply+0x58>
 8020fdc:	3e01      	subs	r6, #1
 8020fde:	e7a2      	b.n	8020f26 <__multiply+0x60>

08020fe0 <__pow5mult>:
 8020fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020fe4:	4615      	mov	r5, r2
 8020fe6:	f012 0203 	ands.w	r2, r2, #3
 8020fea:	4606      	mov	r6, r0
 8020fec:	460f      	mov	r7, r1
 8020fee:	d007      	beq.n	8021000 <__pow5mult+0x20>
 8020ff0:	3a01      	subs	r2, #1
 8020ff2:	4c21      	ldr	r4, [pc, #132]	; (8021078 <__pow5mult+0x98>)
 8020ff4:	2300      	movs	r3, #0
 8020ff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020ffa:	f7ff fed2 	bl	8020da2 <__multadd>
 8020ffe:	4607      	mov	r7, r0
 8021000:	10ad      	asrs	r5, r5, #2
 8021002:	d035      	beq.n	8021070 <__pow5mult+0x90>
 8021004:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021006:	b93c      	cbnz	r4, 8021018 <__pow5mult+0x38>
 8021008:	2010      	movs	r0, #16
 802100a:	f7fd fea1 	bl	801ed50 <malloc>
 802100e:	6270      	str	r0, [r6, #36]	; 0x24
 8021010:	6044      	str	r4, [r0, #4]
 8021012:	6084      	str	r4, [r0, #8]
 8021014:	6004      	str	r4, [r0, #0]
 8021016:	60c4      	str	r4, [r0, #12]
 8021018:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802101c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021020:	b94c      	cbnz	r4, 8021036 <__pow5mult+0x56>
 8021022:	f240 2171 	movw	r1, #625	; 0x271
 8021026:	4630      	mov	r0, r6
 8021028:	f7ff ff44 	bl	8020eb4 <__i2b>
 802102c:	2300      	movs	r3, #0
 802102e:	f8c8 0008 	str.w	r0, [r8, #8]
 8021032:	4604      	mov	r4, r0
 8021034:	6003      	str	r3, [r0, #0]
 8021036:	f04f 0800 	mov.w	r8, #0
 802103a:	07eb      	lsls	r3, r5, #31
 802103c:	d50a      	bpl.n	8021054 <__pow5mult+0x74>
 802103e:	4639      	mov	r1, r7
 8021040:	4622      	mov	r2, r4
 8021042:	4630      	mov	r0, r6
 8021044:	f7ff ff3f 	bl	8020ec6 <__multiply>
 8021048:	4639      	mov	r1, r7
 802104a:	4681      	mov	r9, r0
 802104c:	4630      	mov	r0, r6
 802104e:	f7ff fe91 	bl	8020d74 <_Bfree>
 8021052:	464f      	mov	r7, r9
 8021054:	106d      	asrs	r5, r5, #1
 8021056:	d00b      	beq.n	8021070 <__pow5mult+0x90>
 8021058:	6820      	ldr	r0, [r4, #0]
 802105a:	b938      	cbnz	r0, 802106c <__pow5mult+0x8c>
 802105c:	4622      	mov	r2, r4
 802105e:	4621      	mov	r1, r4
 8021060:	4630      	mov	r0, r6
 8021062:	f7ff ff30 	bl	8020ec6 <__multiply>
 8021066:	6020      	str	r0, [r4, #0]
 8021068:	f8c0 8000 	str.w	r8, [r0]
 802106c:	4604      	mov	r4, r0
 802106e:	e7e4      	b.n	802103a <__pow5mult+0x5a>
 8021070:	4638      	mov	r0, r7
 8021072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021076:	bf00      	nop
 8021078:	080228f0 	.word	0x080228f0

0802107c <__lshift>:
 802107c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021080:	460c      	mov	r4, r1
 8021082:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021086:	6923      	ldr	r3, [r4, #16]
 8021088:	6849      	ldr	r1, [r1, #4]
 802108a:	eb0a 0903 	add.w	r9, sl, r3
 802108e:	68a3      	ldr	r3, [r4, #8]
 8021090:	4607      	mov	r7, r0
 8021092:	4616      	mov	r6, r2
 8021094:	f109 0501 	add.w	r5, r9, #1
 8021098:	42ab      	cmp	r3, r5
 802109a:	db31      	blt.n	8021100 <__lshift+0x84>
 802109c:	4638      	mov	r0, r7
 802109e:	f7ff fe35 	bl	8020d0c <_Balloc>
 80210a2:	2200      	movs	r2, #0
 80210a4:	4680      	mov	r8, r0
 80210a6:	f100 0314 	add.w	r3, r0, #20
 80210aa:	4611      	mov	r1, r2
 80210ac:	4552      	cmp	r2, sl
 80210ae:	db2a      	blt.n	8021106 <__lshift+0x8a>
 80210b0:	6920      	ldr	r0, [r4, #16]
 80210b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80210b6:	f104 0114 	add.w	r1, r4, #20
 80210ba:	f016 021f 	ands.w	r2, r6, #31
 80210be:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80210c2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80210c6:	d022      	beq.n	802110e <__lshift+0x92>
 80210c8:	f1c2 0c20 	rsb	ip, r2, #32
 80210cc:	2000      	movs	r0, #0
 80210ce:	680e      	ldr	r6, [r1, #0]
 80210d0:	4096      	lsls	r6, r2
 80210d2:	4330      	orrs	r0, r6
 80210d4:	f843 0b04 	str.w	r0, [r3], #4
 80210d8:	f851 0b04 	ldr.w	r0, [r1], #4
 80210dc:	458e      	cmp	lr, r1
 80210de:	fa20 f00c 	lsr.w	r0, r0, ip
 80210e2:	d8f4      	bhi.n	80210ce <__lshift+0x52>
 80210e4:	6018      	str	r0, [r3, #0]
 80210e6:	b108      	cbz	r0, 80210ec <__lshift+0x70>
 80210e8:	f109 0502 	add.w	r5, r9, #2
 80210ec:	3d01      	subs	r5, #1
 80210ee:	4638      	mov	r0, r7
 80210f0:	f8c8 5010 	str.w	r5, [r8, #16]
 80210f4:	4621      	mov	r1, r4
 80210f6:	f7ff fe3d 	bl	8020d74 <_Bfree>
 80210fa:	4640      	mov	r0, r8
 80210fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021100:	3101      	adds	r1, #1
 8021102:	005b      	lsls	r3, r3, #1
 8021104:	e7c8      	b.n	8021098 <__lshift+0x1c>
 8021106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802110a:	3201      	adds	r2, #1
 802110c:	e7ce      	b.n	80210ac <__lshift+0x30>
 802110e:	3b04      	subs	r3, #4
 8021110:	f851 2b04 	ldr.w	r2, [r1], #4
 8021114:	f843 2f04 	str.w	r2, [r3, #4]!
 8021118:	458e      	cmp	lr, r1
 802111a:	d8f9      	bhi.n	8021110 <__lshift+0x94>
 802111c:	e7e6      	b.n	80210ec <__lshift+0x70>

0802111e <__mcmp>:
 802111e:	6903      	ldr	r3, [r0, #16]
 8021120:	690a      	ldr	r2, [r1, #16]
 8021122:	1a9b      	subs	r3, r3, r2
 8021124:	b530      	push	{r4, r5, lr}
 8021126:	d10c      	bne.n	8021142 <__mcmp+0x24>
 8021128:	0092      	lsls	r2, r2, #2
 802112a:	3014      	adds	r0, #20
 802112c:	3114      	adds	r1, #20
 802112e:	1884      	adds	r4, r0, r2
 8021130:	4411      	add	r1, r2
 8021132:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8021136:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802113a:	4295      	cmp	r5, r2
 802113c:	d003      	beq.n	8021146 <__mcmp+0x28>
 802113e:	d305      	bcc.n	802114c <__mcmp+0x2e>
 8021140:	2301      	movs	r3, #1
 8021142:	4618      	mov	r0, r3
 8021144:	bd30      	pop	{r4, r5, pc}
 8021146:	42a0      	cmp	r0, r4
 8021148:	d3f3      	bcc.n	8021132 <__mcmp+0x14>
 802114a:	e7fa      	b.n	8021142 <__mcmp+0x24>
 802114c:	f04f 33ff 	mov.w	r3, #4294967295
 8021150:	e7f7      	b.n	8021142 <__mcmp+0x24>

08021152 <__mdiff>:
 8021152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021156:	460d      	mov	r5, r1
 8021158:	4607      	mov	r7, r0
 802115a:	4611      	mov	r1, r2
 802115c:	4628      	mov	r0, r5
 802115e:	4614      	mov	r4, r2
 8021160:	f7ff ffdd 	bl	802111e <__mcmp>
 8021164:	1e06      	subs	r6, r0, #0
 8021166:	d108      	bne.n	802117a <__mdiff+0x28>
 8021168:	4631      	mov	r1, r6
 802116a:	4638      	mov	r0, r7
 802116c:	f7ff fdce 	bl	8020d0c <_Balloc>
 8021170:	2301      	movs	r3, #1
 8021172:	6103      	str	r3, [r0, #16]
 8021174:	6146      	str	r6, [r0, #20]
 8021176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802117a:	bfa4      	itt	ge
 802117c:	4623      	movge	r3, r4
 802117e:	462c      	movge	r4, r5
 8021180:	4638      	mov	r0, r7
 8021182:	6861      	ldr	r1, [r4, #4]
 8021184:	bfa6      	itte	ge
 8021186:	461d      	movge	r5, r3
 8021188:	2600      	movge	r6, #0
 802118a:	2601      	movlt	r6, #1
 802118c:	f7ff fdbe 	bl	8020d0c <_Balloc>
 8021190:	692b      	ldr	r3, [r5, #16]
 8021192:	60c6      	str	r6, [r0, #12]
 8021194:	6926      	ldr	r6, [r4, #16]
 8021196:	f105 0914 	add.w	r9, r5, #20
 802119a:	f104 0214 	add.w	r2, r4, #20
 802119e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80211a2:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80211a6:	f100 0514 	add.w	r5, r0, #20
 80211aa:	f04f 0c00 	mov.w	ip, #0
 80211ae:	f852 ab04 	ldr.w	sl, [r2], #4
 80211b2:	f859 4b04 	ldr.w	r4, [r9], #4
 80211b6:	fa1c f18a 	uxtah	r1, ip, sl
 80211ba:	b2a3      	uxth	r3, r4
 80211bc:	1ac9      	subs	r1, r1, r3
 80211be:	0c23      	lsrs	r3, r4, #16
 80211c0:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80211c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80211c8:	b289      	uxth	r1, r1
 80211ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80211ce:	45c8      	cmp	r8, r9
 80211d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80211d4:	4696      	mov	lr, r2
 80211d6:	f845 3b04 	str.w	r3, [r5], #4
 80211da:	d8e8      	bhi.n	80211ae <__mdiff+0x5c>
 80211dc:	45be      	cmp	lr, r7
 80211de:	d305      	bcc.n	80211ec <__mdiff+0x9a>
 80211e0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80211e4:	b18b      	cbz	r3, 802120a <__mdiff+0xb8>
 80211e6:	6106      	str	r6, [r0, #16]
 80211e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80211ec:	f85e 1b04 	ldr.w	r1, [lr], #4
 80211f0:	fa1c f381 	uxtah	r3, ip, r1
 80211f4:	141a      	asrs	r2, r3, #16
 80211f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80211fa:	b29b      	uxth	r3, r3
 80211fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021200:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8021204:	f845 3b04 	str.w	r3, [r5], #4
 8021208:	e7e8      	b.n	80211dc <__mdiff+0x8a>
 802120a:	3e01      	subs	r6, #1
 802120c:	e7e8      	b.n	80211e0 <__mdiff+0x8e>

0802120e <__d2b>:
 802120e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021212:	460e      	mov	r6, r1
 8021214:	2101      	movs	r1, #1
 8021216:	ec59 8b10 	vmov	r8, r9, d0
 802121a:	4615      	mov	r5, r2
 802121c:	f7ff fd76 	bl	8020d0c <_Balloc>
 8021220:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8021224:	4607      	mov	r7, r0
 8021226:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802122a:	bb34      	cbnz	r4, 802127a <__d2b+0x6c>
 802122c:	9301      	str	r3, [sp, #4]
 802122e:	f1b8 0f00 	cmp.w	r8, #0
 8021232:	d027      	beq.n	8021284 <__d2b+0x76>
 8021234:	a802      	add	r0, sp, #8
 8021236:	f840 8d08 	str.w	r8, [r0, #-8]!
 802123a:	f7ff fe0c 	bl	8020e56 <__lo0bits>
 802123e:	9900      	ldr	r1, [sp, #0]
 8021240:	b1f0      	cbz	r0, 8021280 <__d2b+0x72>
 8021242:	9a01      	ldr	r2, [sp, #4]
 8021244:	f1c0 0320 	rsb	r3, r0, #32
 8021248:	fa02 f303 	lsl.w	r3, r2, r3
 802124c:	430b      	orrs	r3, r1
 802124e:	40c2      	lsrs	r2, r0
 8021250:	617b      	str	r3, [r7, #20]
 8021252:	9201      	str	r2, [sp, #4]
 8021254:	9b01      	ldr	r3, [sp, #4]
 8021256:	61bb      	str	r3, [r7, #24]
 8021258:	2b00      	cmp	r3, #0
 802125a:	bf14      	ite	ne
 802125c:	2102      	movne	r1, #2
 802125e:	2101      	moveq	r1, #1
 8021260:	6139      	str	r1, [r7, #16]
 8021262:	b1c4      	cbz	r4, 8021296 <__d2b+0x88>
 8021264:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8021268:	4404      	add	r4, r0
 802126a:	6034      	str	r4, [r6, #0]
 802126c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8021270:	6028      	str	r0, [r5, #0]
 8021272:	4638      	mov	r0, r7
 8021274:	b003      	add	sp, #12
 8021276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802127a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802127e:	e7d5      	b.n	802122c <__d2b+0x1e>
 8021280:	6179      	str	r1, [r7, #20]
 8021282:	e7e7      	b.n	8021254 <__d2b+0x46>
 8021284:	a801      	add	r0, sp, #4
 8021286:	f7ff fde6 	bl	8020e56 <__lo0bits>
 802128a:	9b01      	ldr	r3, [sp, #4]
 802128c:	617b      	str	r3, [r7, #20]
 802128e:	2101      	movs	r1, #1
 8021290:	6139      	str	r1, [r7, #16]
 8021292:	3020      	adds	r0, #32
 8021294:	e7e5      	b.n	8021262 <__d2b+0x54>
 8021296:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 802129a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802129e:	6030      	str	r0, [r6, #0]
 80212a0:	6918      	ldr	r0, [r3, #16]
 80212a2:	f7ff fdb9 	bl	8020e18 <__hi0bits>
 80212a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80212aa:	e7e1      	b.n	8021270 <__d2b+0x62>

080212ac <_calloc_r>:
 80212ac:	b538      	push	{r3, r4, r5, lr}
 80212ae:	fb02 f401 	mul.w	r4, r2, r1
 80212b2:	4621      	mov	r1, r4
 80212b4:	f7fd fdb6 	bl	801ee24 <_malloc_r>
 80212b8:	4605      	mov	r5, r0
 80212ba:	b118      	cbz	r0, 80212c4 <_calloc_r+0x18>
 80212bc:	4622      	mov	r2, r4
 80212be:	2100      	movs	r1, #0
 80212c0:	f7fd fd59 	bl	801ed76 <memset>
 80212c4:	4628      	mov	r0, r5
 80212c6:	bd38      	pop	{r3, r4, r5, pc}

080212c8 <__ssputs_r>:
 80212c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80212cc:	688e      	ldr	r6, [r1, #8]
 80212ce:	429e      	cmp	r6, r3
 80212d0:	4682      	mov	sl, r0
 80212d2:	460c      	mov	r4, r1
 80212d4:	4691      	mov	r9, r2
 80212d6:	4698      	mov	r8, r3
 80212d8:	d835      	bhi.n	8021346 <__ssputs_r+0x7e>
 80212da:	898a      	ldrh	r2, [r1, #12]
 80212dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80212e0:	d031      	beq.n	8021346 <__ssputs_r+0x7e>
 80212e2:	6825      	ldr	r5, [r4, #0]
 80212e4:	6909      	ldr	r1, [r1, #16]
 80212e6:	1a6f      	subs	r7, r5, r1
 80212e8:	6965      	ldr	r5, [r4, #20]
 80212ea:	2302      	movs	r3, #2
 80212ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80212f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80212f4:	f108 0301 	add.w	r3, r8, #1
 80212f8:	443b      	add	r3, r7
 80212fa:	429d      	cmp	r5, r3
 80212fc:	bf38      	it	cc
 80212fe:	461d      	movcc	r5, r3
 8021300:	0553      	lsls	r3, r2, #21
 8021302:	d531      	bpl.n	8021368 <__ssputs_r+0xa0>
 8021304:	4629      	mov	r1, r5
 8021306:	f7fd fd8d 	bl	801ee24 <_malloc_r>
 802130a:	4606      	mov	r6, r0
 802130c:	b950      	cbnz	r0, 8021324 <__ssputs_r+0x5c>
 802130e:	230c      	movs	r3, #12
 8021310:	f8ca 3000 	str.w	r3, [sl]
 8021314:	89a3      	ldrh	r3, [r4, #12]
 8021316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802131a:	81a3      	strh	r3, [r4, #12]
 802131c:	f04f 30ff 	mov.w	r0, #4294967295
 8021320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021324:	463a      	mov	r2, r7
 8021326:	6921      	ldr	r1, [r4, #16]
 8021328:	f7fd fd1a 	bl	801ed60 <memcpy>
 802132c:	89a3      	ldrh	r3, [r4, #12]
 802132e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021336:	81a3      	strh	r3, [r4, #12]
 8021338:	6126      	str	r6, [r4, #16]
 802133a:	6165      	str	r5, [r4, #20]
 802133c:	443e      	add	r6, r7
 802133e:	1bed      	subs	r5, r5, r7
 8021340:	6026      	str	r6, [r4, #0]
 8021342:	60a5      	str	r5, [r4, #8]
 8021344:	4646      	mov	r6, r8
 8021346:	4546      	cmp	r6, r8
 8021348:	bf28      	it	cs
 802134a:	4646      	movcs	r6, r8
 802134c:	4632      	mov	r2, r6
 802134e:	4649      	mov	r1, r9
 8021350:	6820      	ldr	r0, [r4, #0]
 8021352:	f000 fb2b 	bl	80219ac <memmove>
 8021356:	68a3      	ldr	r3, [r4, #8]
 8021358:	1b9b      	subs	r3, r3, r6
 802135a:	60a3      	str	r3, [r4, #8]
 802135c:	6823      	ldr	r3, [r4, #0]
 802135e:	441e      	add	r6, r3
 8021360:	6026      	str	r6, [r4, #0]
 8021362:	2000      	movs	r0, #0
 8021364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021368:	462a      	mov	r2, r5
 802136a:	f000 fb39 	bl	80219e0 <_realloc_r>
 802136e:	4606      	mov	r6, r0
 8021370:	2800      	cmp	r0, #0
 8021372:	d1e1      	bne.n	8021338 <__ssputs_r+0x70>
 8021374:	6921      	ldr	r1, [r4, #16]
 8021376:	4650      	mov	r0, sl
 8021378:	f7fd fd06 	bl	801ed88 <_free_r>
 802137c:	e7c7      	b.n	802130e <__ssputs_r+0x46>
	...

08021380 <_svfiprintf_r>:
 8021380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021384:	b09d      	sub	sp, #116	; 0x74
 8021386:	4680      	mov	r8, r0
 8021388:	9303      	str	r3, [sp, #12]
 802138a:	898b      	ldrh	r3, [r1, #12]
 802138c:	061c      	lsls	r4, r3, #24
 802138e:	460d      	mov	r5, r1
 8021390:	4616      	mov	r6, r2
 8021392:	d50f      	bpl.n	80213b4 <_svfiprintf_r+0x34>
 8021394:	690b      	ldr	r3, [r1, #16]
 8021396:	b96b      	cbnz	r3, 80213b4 <_svfiprintf_r+0x34>
 8021398:	2140      	movs	r1, #64	; 0x40
 802139a:	f7fd fd43 	bl	801ee24 <_malloc_r>
 802139e:	6028      	str	r0, [r5, #0]
 80213a0:	6128      	str	r0, [r5, #16]
 80213a2:	b928      	cbnz	r0, 80213b0 <_svfiprintf_r+0x30>
 80213a4:	230c      	movs	r3, #12
 80213a6:	f8c8 3000 	str.w	r3, [r8]
 80213aa:	f04f 30ff 	mov.w	r0, #4294967295
 80213ae:	e0c5      	b.n	802153c <_svfiprintf_r+0x1bc>
 80213b0:	2340      	movs	r3, #64	; 0x40
 80213b2:	616b      	str	r3, [r5, #20]
 80213b4:	2300      	movs	r3, #0
 80213b6:	9309      	str	r3, [sp, #36]	; 0x24
 80213b8:	2320      	movs	r3, #32
 80213ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80213be:	2330      	movs	r3, #48	; 0x30
 80213c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80213c4:	f04f 0b01 	mov.w	fp, #1
 80213c8:	4637      	mov	r7, r6
 80213ca:	463c      	mov	r4, r7
 80213cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80213d0:	2b00      	cmp	r3, #0
 80213d2:	d13c      	bne.n	802144e <_svfiprintf_r+0xce>
 80213d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80213d8:	d00b      	beq.n	80213f2 <_svfiprintf_r+0x72>
 80213da:	4653      	mov	r3, sl
 80213dc:	4632      	mov	r2, r6
 80213de:	4629      	mov	r1, r5
 80213e0:	4640      	mov	r0, r8
 80213e2:	f7ff ff71 	bl	80212c8 <__ssputs_r>
 80213e6:	3001      	adds	r0, #1
 80213e8:	f000 80a3 	beq.w	8021532 <_svfiprintf_r+0x1b2>
 80213ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80213ee:	4453      	add	r3, sl
 80213f0:	9309      	str	r3, [sp, #36]	; 0x24
 80213f2:	783b      	ldrb	r3, [r7, #0]
 80213f4:	2b00      	cmp	r3, #0
 80213f6:	f000 809c 	beq.w	8021532 <_svfiprintf_r+0x1b2>
 80213fa:	2300      	movs	r3, #0
 80213fc:	f04f 32ff 	mov.w	r2, #4294967295
 8021400:	9304      	str	r3, [sp, #16]
 8021402:	9307      	str	r3, [sp, #28]
 8021404:	9205      	str	r2, [sp, #20]
 8021406:	9306      	str	r3, [sp, #24]
 8021408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802140c:	931a      	str	r3, [sp, #104]	; 0x68
 802140e:	2205      	movs	r2, #5
 8021410:	7821      	ldrb	r1, [r4, #0]
 8021412:	4850      	ldr	r0, [pc, #320]	; (8021554 <_svfiprintf_r+0x1d4>)
 8021414:	f7de feec 	bl	80001f0 <memchr>
 8021418:	1c67      	adds	r7, r4, #1
 802141a:	9b04      	ldr	r3, [sp, #16]
 802141c:	b9d8      	cbnz	r0, 8021456 <_svfiprintf_r+0xd6>
 802141e:	06d9      	lsls	r1, r3, #27
 8021420:	bf44      	itt	mi
 8021422:	2220      	movmi	r2, #32
 8021424:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021428:	071a      	lsls	r2, r3, #28
 802142a:	bf44      	itt	mi
 802142c:	222b      	movmi	r2, #43	; 0x2b
 802142e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021432:	7822      	ldrb	r2, [r4, #0]
 8021434:	2a2a      	cmp	r2, #42	; 0x2a
 8021436:	d016      	beq.n	8021466 <_svfiprintf_r+0xe6>
 8021438:	9a07      	ldr	r2, [sp, #28]
 802143a:	2100      	movs	r1, #0
 802143c:	200a      	movs	r0, #10
 802143e:	4627      	mov	r7, r4
 8021440:	3401      	adds	r4, #1
 8021442:	783b      	ldrb	r3, [r7, #0]
 8021444:	3b30      	subs	r3, #48	; 0x30
 8021446:	2b09      	cmp	r3, #9
 8021448:	d951      	bls.n	80214ee <_svfiprintf_r+0x16e>
 802144a:	b1c9      	cbz	r1, 8021480 <_svfiprintf_r+0x100>
 802144c:	e011      	b.n	8021472 <_svfiprintf_r+0xf2>
 802144e:	2b25      	cmp	r3, #37	; 0x25
 8021450:	d0c0      	beq.n	80213d4 <_svfiprintf_r+0x54>
 8021452:	4627      	mov	r7, r4
 8021454:	e7b9      	b.n	80213ca <_svfiprintf_r+0x4a>
 8021456:	4a3f      	ldr	r2, [pc, #252]	; (8021554 <_svfiprintf_r+0x1d4>)
 8021458:	1a80      	subs	r0, r0, r2
 802145a:	fa0b f000 	lsl.w	r0, fp, r0
 802145e:	4318      	orrs	r0, r3
 8021460:	9004      	str	r0, [sp, #16]
 8021462:	463c      	mov	r4, r7
 8021464:	e7d3      	b.n	802140e <_svfiprintf_r+0x8e>
 8021466:	9a03      	ldr	r2, [sp, #12]
 8021468:	1d11      	adds	r1, r2, #4
 802146a:	6812      	ldr	r2, [r2, #0]
 802146c:	9103      	str	r1, [sp, #12]
 802146e:	2a00      	cmp	r2, #0
 8021470:	db01      	blt.n	8021476 <_svfiprintf_r+0xf6>
 8021472:	9207      	str	r2, [sp, #28]
 8021474:	e004      	b.n	8021480 <_svfiprintf_r+0x100>
 8021476:	4252      	negs	r2, r2
 8021478:	f043 0302 	orr.w	r3, r3, #2
 802147c:	9207      	str	r2, [sp, #28]
 802147e:	9304      	str	r3, [sp, #16]
 8021480:	783b      	ldrb	r3, [r7, #0]
 8021482:	2b2e      	cmp	r3, #46	; 0x2e
 8021484:	d10e      	bne.n	80214a4 <_svfiprintf_r+0x124>
 8021486:	787b      	ldrb	r3, [r7, #1]
 8021488:	2b2a      	cmp	r3, #42	; 0x2a
 802148a:	f107 0101 	add.w	r1, r7, #1
 802148e:	d132      	bne.n	80214f6 <_svfiprintf_r+0x176>
 8021490:	9b03      	ldr	r3, [sp, #12]
 8021492:	1d1a      	adds	r2, r3, #4
 8021494:	681b      	ldr	r3, [r3, #0]
 8021496:	9203      	str	r2, [sp, #12]
 8021498:	2b00      	cmp	r3, #0
 802149a:	bfb8      	it	lt
 802149c:	f04f 33ff 	movlt.w	r3, #4294967295
 80214a0:	3702      	adds	r7, #2
 80214a2:	9305      	str	r3, [sp, #20]
 80214a4:	4c2c      	ldr	r4, [pc, #176]	; (8021558 <_svfiprintf_r+0x1d8>)
 80214a6:	7839      	ldrb	r1, [r7, #0]
 80214a8:	2203      	movs	r2, #3
 80214aa:	4620      	mov	r0, r4
 80214ac:	f7de fea0 	bl	80001f0 <memchr>
 80214b0:	b138      	cbz	r0, 80214c2 <_svfiprintf_r+0x142>
 80214b2:	2340      	movs	r3, #64	; 0x40
 80214b4:	1b00      	subs	r0, r0, r4
 80214b6:	fa03 f000 	lsl.w	r0, r3, r0
 80214ba:	9b04      	ldr	r3, [sp, #16]
 80214bc:	4303      	orrs	r3, r0
 80214be:	9304      	str	r3, [sp, #16]
 80214c0:	3701      	adds	r7, #1
 80214c2:	7839      	ldrb	r1, [r7, #0]
 80214c4:	4825      	ldr	r0, [pc, #148]	; (802155c <_svfiprintf_r+0x1dc>)
 80214c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80214ca:	2206      	movs	r2, #6
 80214cc:	1c7e      	adds	r6, r7, #1
 80214ce:	f7de fe8f 	bl	80001f0 <memchr>
 80214d2:	2800      	cmp	r0, #0
 80214d4:	d035      	beq.n	8021542 <_svfiprintf_r+0x1c2>
 80214d6:	4b22      	ldr	r3, [pc, #136]	; (8021560 <_svfiprintf_r+0x1e0>)
 80214d8:	b9fb      	cbnz	r3, 802151a <_svfiprintf_r+0x19a>
 80214da:	9b03      	ldr	r3, [sp, #12]
 80214dc:	3307      	adds	r3, #7
 80214de:	f023 0307 	bic.w	r3, r3, #7
 80214e2:	3308      	adds	r3, #8
 80214e4:	9303      	str	r3, [sp, #12]
 80214e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214e8:	444b      	add	r3, r9
 80214ea:	9309      	str	r3, [sp, #36]	; 0x24
 80214ec:	e76c      	b.n	80213c8 <_svfiprintf_r+0x48>
 80214ee:	fb00 3202 	mla	r2, r0, r2, r3
 80214f2:	2101      	movs	r1, #1
 80214f4:	e7a3      	b.n	802143e <_svfiprintf_r+0xbe>
 80214f6:	2300      	movs	r3, #0
 80214f8:	9305      	str	r3, [sp, #20]
 80214fa:	4618      	mov	r0, r3
 80214fc:	240a      	movs	r4, #10
 80214fe:	460f      	mov	r7, r1
 8021500:	3101      	adds	r1, #1
 8021502:	783a      	ldrb	r2, [r7, #0]
 8021504:	3a30      	subs	r2, #48	; 0x30
 8021506:	2a09      	cmp	r2, #9
 8021508:	d903      	bls.n	8021512 <_svfiprintf_r+0x192>
 802150a:	2b00      	cmp	r3, #0
 802150c:	d0ca      	beq.n	80214a4 <_svfiprintf_r+0x124>
 802150e:	9005      	str	r0, [sp, #20]
 8021510:	e7c8      	b.n	80214a4 <_svfiprintf_r+0x124>
 8021512:	fb04 2000 	mla	r0, r4, r0, r2
 8021516:	2301      	movs	r3, #1
 8021518:	e7f1      	b.n	80214fe <_svfiprintf_r+0x17e>
 802151a:	ab03      	add	r3, sp, #12
 802151c:	9300      	str	r3, [sp, #0]
 802151e:	462a      	mov	r2, r5
 8021520:	4b10      	ldr	r3, [pc, #64]	; (8021564 <_svfiprintf_r+0x1e4>)
 8021522:	a904      	add	r1, sp, #16
 8021524:	4640      	mov	r0, r8
 8021526:	f7fd fd71 	bl	801f00c <_printf_float>
 802152a:	f1b0 3fff 	cmp.w	r0, #4294967295
 802152e:	4681      	mov	r9, r0
 8021530:	d1d9      	bne.n	80214e6 <_svfiprintf_r+0x166>
 8021532:	89ab      	ldrh	r3, [r5, #12]
 8021534:	065b      	lsls	r3, r3, #25
 8021536:	f53f af38 	bmi.w	80213aa <_svfiprintf_r+0x2a>
 802153a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802153c:	b01d      	add	sp, #116	; 0x74
 802153e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021542:	ab03      	add	r3, sp, #12
 8021544:	9300      	str	r3, [sp, #0]
 8021546:	462a      	mov	r2, r5
 8021548:	4b06      	ldr	r3, [pc, #24]	; (8021564 <_svfiprintf_r+0x1e4>)
 802154a:	a904      	add	r1, sp, #16
 802154c:	4640      	mov	r0, r8
 802154e:	f7fe f813 	bl	801f578 <_printf_i>
 8021552:	e7ea      	b.n	802152a <_svfiprintf_r+0x1aa>
 8021554:	080228fc 	.word	0x080228fc
 8021558:	08022902 	.word	0x08022902
 802155c:	08022906 	.word	0x08022906
 8021560:	0801f00d 	.word	0x0801f00d
 8021564:	080212c9 	.word	0x080212c9

08021568 <__sfputc_r>:
 8021568:	6893      	ldr	r3, [r2, #8]
 802156a:	3b01      	subs	r3, #1
 802156c:	2b00      	cmp	r3, #0
 802156e:	b410      	push	{r4}
 8021570:	6093      	str	r3, [r2, #8]
 8021572:	da09      	bge.n	8021588 <__sfputc_r+0x20>
 8021574:	6994      	ldr	r4, [r2, #24]
 8021576:	42a3      	cmp	r3, r4
 8021578:	db02      	blt.n	8021580 <__sfputc_r+0x18>
 802157a:	b2cb      	uxtb	r3, r1
 802157c:	2b0a      	cmp	r3, #10
 802157e:	d103      	bne.n	8021588 <__sfputc_r+0x20>
 8021580:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021584:	f7fe bab8 	b.w	801faf8 <__swbuf_r>
 8021588:	6813      	ldr	r3, [r2, #0]
 802158a:	1c58      	adds	r0, r3, #1
 802158c:	6010      	str	r0, [r2, #0]
 802158e:	7019      	strb	r1, [r3, #0]
 8021590:	b2c8      	uxtb	r0, r1
 8021592:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021596:	4770      	bx	lr

08021598 <__sfputs_r>:
 8021598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802159a:	4606      	mov	r6, r0
 802159c:	460f      	mov	r7, r1
 802159e:	4614      	mov	r4, r2
 80215a0:	18d5      	adds	r5, r2, r3
 80215a2:	42ac      	cmp	r4, r5
 80215a4:	d101      	bne.n	80215aa <__sfputs_r+0x12>
 80215a6:	2000      	movs	r0, #0
 80215a8:	e007      	b.n	80215ba <__sfputs_r+0x22>
 80215aa:	463a      	mov	r2, r7
 80215ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80215b0:	4630      	mov	r0, r6
 80215b2:	f7ff ffd9 	bl	8021568 <__sfputc_r>
 80215b6:	1c43      	adds	r3, r0, #1
 80215b8:	d1f3      	bne.n	80215a2 <__sfputs_r+0xa>
 80215ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080215bc <_vfiprintf_r>:
 80215bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215c0:	b09d      	sub	sp, #116	; 0x74
 80215c2:	460c      	mov	r4, r1
 80215c4:	4617      	mov	r7, r2
 80215c6:	9303      	str	r3, [sp, #12]
 80215c8:	4606      	mov	r6, r0
 80215ca:	b118      	cbz	r0, 80215d4 <_vfiprintf_r+0x18>
 80215cc:	6983      	ldr	r3, [r0, #24]
 80215ce:	b90b      	cbnz	r3, 80215d4 <_vfiprintf_r+0x18>
 80215d0:	f7ff fa9e 	bl	8020b10 <__sinit>
 80215d4:	4b7c      	ldr	r3, [pc, #496]	; (80217c8 <_vfiprintf_r+0x20c>)
 80215d6:	429c      	cmp	r4, r3
 80215d8:	d157      	bne.n	802168a <_vfiprintf_r+0xce>
 80215da:	6874      	ldr	r4, [r6, #4]
 80215dc:	89a3      	ldrh	r3, [r4, #12]
 80215de:	0718      	lsls	r0, r3, #28
 80215e0:	d55d      	bpl.n	802169e <_vfiprintf_r+0xe2>
 80215e2:	6923      	ldr	r3, [r4, #16]
 80215e4:	2b00      	cmp	r3, #0
 80215e6:	d05a      	beq.n	802169e <_vfiprintf_r+0xe2>
 80215e8:	2300      	movs	r3, #0
 80215ea:	9309      	str	r3, [sp, #36]	; 0x24
 80215ec:	2320      	movs	r3, #32
 80215ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80215f2:	2330      	movs	r3, #48	; 0x30
 80215f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80215f8:	f04f 0b01 	mov.w	fp, #1
 80215fc:	46b8      	mov	r8, r7
 80215fe:	4645      	mov	r5, r8
 8021600:	f815 3b01 	ldrb.w	r3, [r5], #1
 8021604:	2b00      	cmp	r3, #0
 8021606:	d155      	bne.n	80216b4 <_vfiprintf_r+0xf8>
 8021608:	ebb8 0a07 	subs.w	sl, r8, r7
 802160c:	d00b      	beq.n	8021626 <_vfiprintf_r+0x6a>
 802160e:	4653      	mov	r3, sl
 8021610:	463a      	mov	r2, r7
 8021612:	4621      	mov	r1, r4
 8021614:	4630      	mov	r0, r6
 8021616:	f7ff ffbf 	bl	8021598 <__sfputs_r>
 802161a:	3001      	adds	r0, #1
 802161c:	f000 80c4 	beq.w	80217a8 <_vfiprintf_r+0x1ec>
 8021620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021622:	4453      	add	r3, sl
 8021624:	9309      	str	r3, [sp, #36]	; 0x24
 8021626:	f898 3000 	ldrb.w	r3, [r8]
 802162a:	2b00      	cmp	r3, #0
 802162c:	f000 80bc 	beq.w	80217a8 <_vfiprintf_r+0x1ec>
 8021630:	2300      	movs	r3, #0
 8021632:	f04f 32ff 	mov.w	r2, #4294967295
 8021636:	9304      	str	r3, [sp, #16]
 8021638:	9307      	str	r3, [sp, #28]
 802163a:	9205      	str	r2, [sp, #20]
 802163c:	9306      	str	r3, [sp, #24]
 802163e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021642:	931a      	str	r3, [sp, #104]	; 0x68
 8021644:	2205      	movs	r2, #5
 8021646:	7829      	ldrb	r1, [r5, #0]
 8021648:	4860      	ldr	r0, [pc, #384]	; (80217cc <_vfiprintf_r+0x210>)
 802164a:	f7de fdd1 	bl	80001f0 <memchr>
 802164e:	f105 0801 	add.w	r8, r5, #1
 8021652:	9b04      	ldr	r3, [sp, #16]
 8021654:	2800      	cmp	r0, #0
 8021656:	d131      	bne.n	80216bc <_vfiprintf_r+0x100>
 8021658:	06d9      	lsls	r1, r3, #27
 802165a:	bf44      	itt	mi
 802165c:	2220      	movmi	r2, #32
 802165e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021662:	071a      	lsls	r2, r3, #28
 8021664:	bf44      	itt	mi
 8021666:	222b      	movmi	r2, #43	; 0x2b
 8021668:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802166c:	782a      	ldrb	r2, [r5, #0]
 802166e:	2a2a      	cmp	r2, #42	; 0x2a
 8021670:	d02c      	beq.n	80216cc <_vfiprintf_r+0x110>
 8021672:	9a07      	ldr	r2, [sp, #28]
 8021674:	2100      	movs	r1, #0
 8021676:	200a      	movs	r0, #10
 8021678:	46a8      	mov	r8, r5
 802167a:	3501      	adds	r5, #1
 802167c:	f898 3000 	ldrb.w	r3, [r8]
 8021680:	3b30      	subs	r3, #48	; 0x30
 8021682:	2b09      	cmp	r3, #9
 8021684:	d96d      	bls.n	8021762 <_vfiprintf_r+0x1a6>
 8021686:	b371      	cbz	r1, 80216e6 <_vfiprintf_r+0x12a>
 8021688:	e026      	b.n	80216d8 <_vfiprintf_r+0x11c>
 802168a:	4b51      	ldr	r3, [pc, #324]	; (80217d0 <_vfiprintf_r+0x214>)
 802168c:	429c      	cmp	r4, r3
 802168e:	d101      	bne.n	8021694 <_vfiprintf_r+0xd8>
 8021690:	68b4      	ldr	r4, [r6, #8]
 8021692:	e7a3      	b.n	80215dc <_vfiprintf_r+0x20>
 8021694:	4b4f      	ldr	r3, [pc, #316]	; (80217d4 <_vfiprintf_r+0x218>)
 8021696:	429c      	cmp	r4, r3
 8021698:	bf08      	it	eq
 802169a:	68f4      	ldreq	r4, [r6, #12]
 802169c:	e79e      	b.n	80215dc <_vfiprintf_r+0x20>
 802169e:	4621      	mov	r1, r4
 80216a0:	4630      	mov	r0, r6
 80216a2:	f7fe fa7b 	bl	801fb9c <__swsetup_r>
 80216a6:	2800      	cmp	r0, #0
 80216a8:	d09e      	beq.n	80215e8 <_vfiprintf_r+0x2c>
 80216aa:	f04f 30ff 	mov.w	r0, #4294967295
 80216ae:	b01d      	add	sp, #116	; 0x74
 80216b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216b4:	2b25      	cmp	r3, #37	; 0x25
 80216b6:	d0a7      	beq.n	8021608 <_vfiprintf_r+0x4c>
 80216b8:	46a8      	mov	r8, r5
 80216ba:	e7a0      	b.n	80215fe <_vfiprintf_r+0x42>
 80216bc:	4a43      	ldr	r2, [pc, #268]	; (80217cc <_vfiprintf_r+0x210>)
 80216be:	1a80      	subs	r0, r0, r2
 80216c0:	fa0b f000 	lsl.w	r0, fp, r0
 80216c4:	4318      	orrs	r0, r3
 80216c6:	9004      	str	r0, [sp, #16]
 80216c8:	4645      	mov	r5, r8
 80216ca:	e7bb      	b.n	8021644 <_vfiprintf_r+0x88>
 80216cc:	9a03      	ldr	r2, [sp, #12]
 80216ce:	1d11      	adds	r1, r2, #4
 80216d0:	6812      	ldr	r2, [r2, #0]
 80216d2:	9103      	str	r1, [sp, #12]
 80216d4:	2a00      	cmp	r2, #0
 80216d6:	db01      	blt.n	80216dc <_vfiprintf_r+0x120>
 80216d8:	9207      	str	r2, [sp, #28]
 80216da:	e004      	b.n	80216e6 <_vfiprintf_r+0x12a>
 80216dc:	4252      	negs	r2, r2
 80216de:	f043 0302 	orr.w	r3, r3, #2
 80216e2:	9207      	str	r2, [sp, #28]
 80216e4:	9304      	str	r3, [sp, #16]
 80216e6:	f898 3000 	ldrb.w	r3, [r8]
 80216ea:	2b2e      	cmp	r3, #46	; 0x2e
 80216ec:	d110      	bne.n	8021710 <_vfiprintf_r+0x154>
 80216ee:	f898 3001 	ldrb.w	r3, [r8, #1]
 80216f2:	2b2a      	cmp	r3, #42	; 0x2a
 80216f4:	f108 0101 	add.w	r1, r8, #1
 80216f8:	d137      	bne.n	802176a <_vfiprintf_r+0x1ae>
 80216fa:	9b03      	ldr	r3, [sp, #12]
 80216fc:	1d1a      	adds	r2, r3, #4
 80216fe:	681b      	ldr	r3, [r3, #0]
 8021700:	9203      	str	r2, [sp, #12]
 8021702:	2b00      	cmp	r3, #0
 8021704:	bfb8      	it	lt
 8021706:	f04f 33ff 	movlt.w	r3, #4294967295
 802170a:	f108 0802 	add.w	r8, r8, #2
 802170e:	9305      	str	r3, [sp, #20]
 8021710:	4d31      	ldr	r5, [pc, #196]	; (80217d8 <_vfiprintf_r+0x21c>)
 8021712:	f898 1000 	ldrb.w	r1, [r8]
 8021716:	2203      	movs	r2, #3
 8021718:	4628      	mov	r0, r5
 802171a:	f7de fd69 	bl	80001f0 <memchr>
 802171e:	b140      	cbz	r0, 8021732 <_vfiprintf_r+0x176>
 8021720:	2340      	movs	r3, #64	; 0x40
 8021722:	1b40      	subs	r0, r0, r5
 8021724:	fa03 f000 	lsl.w	r0, r3, r0
 8021728:	9b04      	ldr	r3, [sp, #16]
 802172a:	4303      	orrs	r3, r0
 802172c:	9304      	str	r3, [sp, #16]
 802172e:	f108 0801 	add.w	r8, r8, #1
 8021732:	f898 1000 	ldrb.w	r1, [r8]
 8021736:	4829      	ldr	r0, [pc, #164]	; (80217dc <_vfiprintf_r+0x220>)
 8021738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802173c:	2206      	movs	r2, #6
 802173e:	f108 0701 	add.w	r7, r8, #1
 8021742:	f7de fd55 	bl	80001f0 <memchr>
 8021746:	2800      	cmp	r0, #0
 8021748:	d034      	beq.n	80217b4 <_vfiprintf_r+0x1f8>
 802174a:	4b25      	ldr	r3, [pc, #148]	; (80217e0 <_vfiprintf_r+0x224>)
 802174c:	bb03      	cbnz	r3, 8021790 <_vfiprintf_r+0x1d4>
 802174e:	9b03      	ldr	r3, [sp, #12]
 8021750:	3307      	adds	r3, #7
 8021752:	f023 0307 	bic.w	r3, r3, #7
 8021756:	3308      	adds	r3, #8
 8021758:	9303      	str	r3, [sp, #12]
 802175a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802175c:	444b      	add	r3, r9
 802175e:	9309      	str	r3, [sp, #36]	; 0x24
 8021760:	e74c      	b.n	80215fc <_vfiprintf_r+0x40>
 8021762:	fb00 3202 	mla	r2, r0, r2, r3
 8021766:	2101      	movs	r1, #1
 8021768:	e786      	b.n	8021678 <_vfiprintf_r+0xbc>
 802176a:	2300      	movs	r3, #0
 802176c:	9305      	str	r3, [sp, #20]
 802176e:	4618      	mov	r0, r3
 8021770:	250a      	movs	r5, #10
 8021772:	4688      	mov	r8, r1
 8021774:	3101      	adds	r1, #1
 8021776:	f898 2000 	ldrb.w	r2, [r8]
 802177a:	3a30      	subs	r2, #48	; 0x30
 802177c:	2a09      	cmp	r2, #9
 802177e:	d903      	bls.n	8021788 <_vfiprintf_r+0x1cc>
 8021780:	2b00      	cmp	r3, #0
 8021782:	d0c5      	beq.n	8021710 <_vfiprintf_r+0x154>
 8021784:	9005      	str	r0, [sp, #20]
 8021786:	e7c3      	b.n	8021710 <_vfiprintf_r+0x154>
 8021788:	fb05 2000 	mla	r0, r5, r0, r2
 802178c:	2301      	movs	r3, #1
 802178e:	e7f0      	b.n	8021772 <_vfiprintf_r+0x1b6>
 8021790:	ab03      	add	r3, sp, #12
 8021792:	9300      	str	r3, [sp, #0]
 8021794:	4622      	mov	r2, r4
 8021796:	4b13      	ldr	r3, [pc, #76]	; (80217e4 <_vfiprintf_r+0x228>)
 8021798:	a904      	add	r1, sp, #16
 802179a:	4630      	mov	r0, r6
 802179c:	f7fd fc36 	bl	801f00c <_printf_float>
 80217a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80217a4:	4681      	mov	r9, r0
 80217a6:	d1d8      	bne.n	802175a <_vfiprintf_r+0x19e>
 80217a8:	89a3      	ldrh	r3, [r4, #12]
 80217aa:	065b      	lsls	r3, r3, #25
 80217ac:	f53f af7d 	bmi.w	80216aa <_vfiprintf_r+0xee>
 80217b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80217b2:	e77c      	b.n	80216ae <_vfiprintf_r+0xf2>
 80217b4:	ab03      	add	r3, sp, #12
 80217b6:	9300      	str	r3, [sp, #0]
 80217b8:	4622      	mov	r2, r4
 80217ba:	4b0a      	ldr	r3, [pc, #40]	; (80217e4 <_vfiprintf_r+0x228>)
 80217bc:	a904      	add	r1, sp, #16
 80217be:	4630      	mov	r0, r6
 80217c0:	f7fd feda 	bl	801f578 <_printf_i>
 80217c4:	e7ec      	b.n	80217a0 <_vfiprintf_r+0x1e4>
 80217c6:	bf00      	nop
 80217c8:	080227c0 	.word	0x080227c0
 80217cc:	080228fc 	.word	0x080228fc
 80217d0:	080227e0 	.word	0x080227e0
 80217d4:	080227a0 	.word	0x080227a0
 80217d8:	08022902 	.word	0x08022902
 80217dc:	08022906 	.word	0x08022906
 80217e0:	0801f00d 	.word	0x0801f00d
 80217e4:	08021599 	.word	0x08021599

080217e8 <_putc_r>:
 80217e8:	b570      	push	{r4, r5, r6, lr}
 80217ea:	460d      	mov	r5, r1
 80217ec:	4614      	mov	r4, r2
 80217ee:	4606      	mov	r6, r0
 80217f0:	b118      	cbz	r0, 80217fa <_putc_r+0x12>
 80217f2:	6983      	ldr	r3, [r0, #24]
 80217f4:	b90b      	cbnz	r3, 80217fa <_putc_r+0x12>
 80217f6:	f7ff f98b 	bl	8020b10 <__sinit>
 80217fa:	4b13      	ldr	r3, [pc, #76]	; (8021848 <_putc_r+0x60>)
 80217fc:	429c      	cmp	r4, r3
 80217fe:	d112      	bne.n	8021826 <_putc_r+0x3e>
 8021800:	6874      	ldr	r4, [r6, #4]
 8021802:	68a3      	ldr	r3, [r4, #8]
 8021804:	3b01      	subs	r3, #1
 8021806:	2b00      	cmp	r3, #0
 8021808:	60a3      	str	r3, [r4, #8]
 802180a:	da16      	bge.n	802183a <_putc_r+0x52>
 802180c:	69a2      	ldr	r2, [r4, #24]
 802180e:	4293      	cmp	r3, r2
 8021810:	db02      	blt.n	8021818 <_putc_r+0x30>
 8021812:	b2eb      	uxtb	r3, r5
 8021814:	2b0a      	cmp	r3, #10
 8021816:	d110      	bne.n	802183a <_putc_r+0x52>
 8021818:	4622      	mov	r2, r4
 802181a:	4629      	mov	r1, r5
 802181c:	4630      	mov	r0, r6
 802181e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021822:	f7fe b969 	b.w	801faf8 <__swbuf_r>
 8021826:	4b09      	ldr	r3, [pc, #36]	; (802184c <_putc_r+0x64>)
 8021828:	429c      	cmp	r4, r3
 802182a:	d101      	bne.n	8021830 <_putc_r+0x48>
 802182c:	68b4      	ldr	r4, [r6, #8]
 802182e:	e7e8      	b.n	8021802 <_putc_r+0x1a>
 8021830:	4b07      	ldr	r3, [pc, #28]	; (8021850 <_putc_r+0x68>)
 8021832:	429c      	cmp	r4, r3
 8021834:	bf08      	it	eq
 8021836:	68f4      	ldreq	r4, [r6, #12]
 8021838:	e7e3      	b.n	8021802 <_putc_r+0x1a>
 802183a:	6823      	ldr	r3, [r4, #0]
 802183c:	1c5a      	adds	r2, r3, #1
 802183e:	6022      	str	r2, [r4, #0]
 8021840:	701d      	strb	r5, [r3, #0]
 8021842:	b2e8      	uxtb	r0, r5
 8021844:	bd70      	pop	{r4, r5, r6, pc}
 8021846:	bf00      	nop
 8021848:	080227c0 	.word	0x080227c0
 802184c:	080227e0 	.word	0x080227e0
 8021850:	080227a0 	.word	0x080227a0

08021854 <__sread>:
 8021854:	b510      	push	{r4, lr}
 8021856:	460c      	mov	r4, r1
 8021858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802185c:	f000 f8e6 	bl	8021a2c <_read_r>
 8021860:	2800      	cmp	r0, #0
 8021862:	bfab      	itete	ge
 8021864:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021866:	89a3      	ldrhlt	r3, [r4, #12]
 8021868:	181b      	addge	r3, r3, r0
 802186a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802186e:	bfac      	ite	ge
 8021870:	6563      	strge	r3, [r4, #84]	; 0x54
 8021872:	81a3      	strhlt	r3, [r4, #12]
 8021874:	bd10      	pop	{r4, pc}

08021876 <__swrite>:
 8021876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802187a:	461f      	mov	r7, r3
 802187c:	898b      	ldrh	r3, [r1, #12]
 802187e:	05db      	lsls	r3, r3, #23
 8021880:	4605      	mov	r5, r0
 8021882:	460c      	mov	r4, r1
 8021884:	4616      	mov	r6, r2
 8021886:	d505      	bpl.n	8021894 <__swrite+0x1e>
 8021888:	2302      	movs	r3, #2
 802188a:	2200      	movs	r2, #0
 802188c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021890:	f000 f868 	bl	8021964 <_lseek_r>
 8021894:	89a3      	ldrh	r3, [r4, #12]
 8021896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802189a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802189e:	81a3      	strh	r3, [r4, #12]
 80218a0:	4632      	mov	r2, r6
 80218a2:	463b      	mov	r3, r7
 80218a4:	4628      	mov	r0, r5
 80218a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80218aa:	f000 b817 	b.w	80218dc <_write_r>

080218ae <__sseek>:
 80218ae:	b510      	push	{r4, lr}
 80218b0:	460c      	mov	r4, r1
 80218b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80218b6:	f000 f855 	bl	8021964 <_lseek_r>
 80218ba:	1c43      	adds	r3, r0, #1
 80218bc:	89a3      	ldrh	r3, [r4, #12]
 80218be:	bf15      	itete	ne
 80218c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80218c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80218c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80218ca:	81a3      	strheq	r3, [r4, #12]
 80218cc:	bf18      	it	ne
 80218ce:	81a3      	strhne	r3, [r4, #12]
 80218d0:	bd10      	pop	{r4, pc}

080218d2 <__sclose>:
 80218d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80218d6:	f000 b813 	b.w	8021900 <_close_r>
	...

080218dc <_write_r>:
 80218dc:	b538      	push	{r3, r4, r5, lr}
 80218de:	4c07      	ldr	r4, [pc, #28]	; (80218fc <_write_r+0x20>)
 80218e0:	4605      	mov	r5, r0
 80218e2:	4608      	mov	r0, r1
 80218e4:	4611      	mov	r1, r2
 80218e6:	2200      	movs	r2, #0
 80218e8:	6022      	str	r2, [r4, #0]
 80218ea:	461a      	mov	r2, r3
 80218ec:	f7ee fb59 	bl	800ffa2 <_write>
 80218f0:	1c43      	adds	r3, r0, #1
 80218f2:	d102      	bne.n	80218fa <_write_r+0x1e>
 80218f4:	6823      	ldr	r3, [r4, #0]
 80218f6:	b103      	cbz	r3, 80218fa <_write_r+0x1e>
 80218f8:	602b      	str	r3, [r5, #0]
 80218fa:	bd38      	pop	{r3, r4, r5, pc}
 80218fc:	20003acc 	.word	0x20003acc

08021900 <_close_r>:
 8021900:	b538      	push	{r3, r4, r5, lr}
 8021902:	4c06      	ldr	r4, [pc, #24]	; (802191c <_close_r+0x1c>)
 8021904:	2300      	movs	r3, #0
 8021906:	4605      	mov	r5, r0
 8021908:	4608      	mov	r0, r1
 802190a:	6023      	str	r3, [r4, #0]
 802190c:	f7ee fb76 	bl	800fffc <_close>
 8021910:	1c43      	adds	r3, r0, #1
 8021912:	d102      	bne.n	802191a <_close_r+0x1a>
 8021914:	6823      	ldr	r3, [r4, #0]
 8021916:	b103      	cbz	r3, 802191a <_close_r+0x1a>
 8021918:	602b      	str	r3, [r5, #0]
 802191a:	bd38      	pop	{r3, r4, r5, pc}
 802191c:	20003acc 	.word	0x20003acc

08021920 <_fstat_r>:
 8021920:	b538      	push	{r3, r4, r5, lr}
 8021922:	4c07      	ldr	r4, [pc, #28]	; (8021940 <_fstat_r+0x20>)
 8021924:	2300      	movs	r3, #0
 8021926:	4605      	mov	r5, r0
 8021928:	4608      	mov	r0, r1
 802192a:	4611      	mov	r1, r2
 802192c:	6023      	str	r3, [r4, #0]
 802192e:	f7ee fb68 	bl	8010002 <_fstat>
 8021932:	1c43      	adds	r3, r0, #1
 8021934:	d102      	bne.n	802193c <_fstat_r+0x1c>
 8021936:	6823      	ldr	r3, [r4, #0]
 8021938:	b103      	cbz	r3, 802193c <_fstat_r+0x1c>
 802193a:	602b      	str	r3, [r5, #0]
 802193c:	bd38      	pop	{r3, r4, r5, pc}
 802193e:	bf00      	nop
 8021940:	20003acc 	.word	0x20003acc

08021944 <_isatty_r>:
 8021944:	b538      	push	{r3, r4, r5, lr}
 8021946:	4c06      	ldr	r4, [pc, #24]	; (8021960 <_isatty_r+0x1c>)
 8021948:	2300      	movs	r3, #0
 802194a:	4605      	mov	r5, r0
 802194c:	4608      	mov	r0, r1
 802194e:	6023      	str	r3, [r4, #0]
 8021950:	f7ee fb5c 	bl	801000c <_isatty>
 8021954:	1c43      	adds	r3, r0, #1
 8021956:	d102      	bne.n	802195e <_isatty_r+0x1a>
 8021958:	6823      	ldr	r3, [r4, #0]
 802195a:	b103      	cbz	r3, 802195e <_isatty_r+0x1a>
 802195c:	602b      	str	r3, [r5, #0]
 802195e:	bd38      	pop	{r3, r4, r5, pc}
 8021960:	20003acc 	.word	0x20003acc

08021964 <_lseek_r>:
 8021964:	b538      	push	{r3, r4, r5, lr}
 8021966:	4c07      	ldr	r4, [pc, #28]	; (8021984 <_lseek_r+0x20>)
 8021968:	4605      	mov	r5, r0
 802196a:	4608      	mov	r0, r1
 802196c:	4611      	mov	r1, r2
 802196e:	2200      	movs	r2, #0
 8021970:	6022      	str	r2, [r4, #0]
 8021972:	461a      	mov	r2, r3
 8021974:	f7ee fb4c 	bl	8010010 <_lseek>
 8021978:	1c43      	adds	r3, r0, #1
 802197a:	d102      	bne.n	8021982 <_lseek_r+0x1e>
 802197c:	6823      	ldr	r3, [r4, #0]
 802197e:	b103      	cbz	r3, 8021982 <_lseek_r+0x1e>
 8021980:	602b      	str	r3, [r5, #0]
 8021982:	bd38      	pop	{r3, r4, r5, pc}
 8021984:	20003acc 	.word	0x20003acc

08021988 <__ascii_mbtowc>:
 8021988:	b082      	sub	sp, #8
 802198a:	b901      	cbnz	r1, 802198e <__ascii_mbtowc+0x6>
 802198c:	a901      	add	r1, sp, #4
 802198e:	b142      	cbz	r2, 80219a2 <__ascii_mbtowc+0x1a>
 8021990:	b14b      	cbz	r3, 80219a6 <__ascii_mbtowc+0x1e>
 8021992:	7813      	ldrb	r3, [r2, #0]
 8021994:	600b      	str	r3, [r1, #0]
 8021996:	7812      	ldrb	r2, [r2, #0]
 8021998:	1c10      	adds	r0, r2, #0
 802199a:	bf18      	it	ne
 802199c:	2001      	movne	r0, #1
 802199e:	b002      	add	sp, #8
 80219a0:	4770      	bx	lr
 80219a2:	4610      	mov	r0, r2
 80219a4:	e7fb      	b.n	802199e <__ascii_mbtowc+0x16>
 80219a6:	f06f 0001 	mvn.w	r0, #1
 80219aa:	e7f8      	b.n	802199e <__ascii_mbtowc+0x16>

080219ac <memmove>:
 80219ac:	4288      	cmp	r0, r1
 80219ae:	b510      	push	{r4, lr}
 80219b0:	eb01 0302 	add.w	r3, r1, r2
 80219b4:	d803      	bhi.n	80219be <memmove+0x12>
 80219b6:	1e42      	subs	r2, r0, #1
 80219b8:	4299      	cmp	r1, r3
 80219ba:	d10c      	bne.n	80219d6 <memmove+0x2a>
 80219bc:	bd10      	pop	{r4, pc}
 80219be:	4298      	cmp	r0, r3
 80219c0:	d2f9      	bcs.n	80219b6 <memmove+0xa>
 80219c2:	1881      	adds	r1, r0, r2
 80219c4:	1ad2      	subs	r2, r2, r3
 80219c6:	42d3      	cmn	r3, r2
 80219c8:	d100      	bne.n	80219cc <memmove+0x20>
 80219ca:	bd10      	pop	{r4, pc}
 80219cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80219d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80219d4:	e7f7      	b.n	80219c6 <memmove+0x1a>
 80219d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80219da:	f802 4f01 	strb.w	r4, [r2, #1]!
 80219de:	e7eb      	b.n	80219b8 <memmove+0xc>

080219e0 <_realloc_r>:
 80219e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80219e2:	4607      	mov	r7, r0
 80219e4:	4614      	mov	r4, r2
 80219e6:	460e      	mov	r6, r1
 80219e8:	b921      	cbnz	r1, 80219f4 <_realloc_r+0x14>
 80219ea:	4611      	mov	r1, r2
 80219ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80219f0:	f7fd ba18 	b.w	801ee24 <_malloc_r>
 80219f4:	b922      	cbnz	r2, 8021a00 <_realloc_r+0x20>
 80219f6:	f7fd f9c7 	bl	801ed88 <_free_r>
 80219fa:	4625      	mov	r5, r4
 80219fc:	4628      	mov	r0, r5
 80219fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021a00:	f000 f833 	bl	8021a6a <_malloc_usable_size_r>
 8021a04:	4284      	cmp	r4, r0
 8021a06:	d90f      	bls.n	8021a28 <_realloc_r+0x48>
 8021a08:	4621      	mov	r1, r4
 8021a0a:	4638      	mov	r0, r7
 8021a0c:	f7fd fa0a 	bl	801ee24 <_malloc_r>
 8021a10:	4605      	mov	r5, r0
 8021a12:	2800      	cmp	r0, #0
 8021a14:	d0f2      	beq.n	80219fc <_realloc_r+0x1c>
 8021a16:	4631      	mov	r1, r6
 8021a18:	4622      	mov	r2, r4
 8021a1a:	f7fd f9a1 	bl	801ed60 <memcpy>
 8021a1e:	4631      	mov	r1, r6
 8021a20:	4638      	mov	r0, r7
 8021a22:	f7fd f9b1 	bl	801ed88 <_free_r>
 8021a26:	e7e9      	b.n	80219fc <_realloc_r+0x1c>
 8021a28:	4635      	mov	r5, r6
 8021a2a:	e7e7      	b.n	80219fc <_realloc_r+0x1c>

08021a2c <_read_r>:
 8021a2c:	b538      	push	{r3, r4, r5, lr}
 8021a2e:	4c07      	ldr	r4, [pc, #28]	; (8021a4c <_read_r+0x20>)
 8021a30:	4605      	mov	r5, r0
 8021a32:	4608      	mov	r0, r1
 8021a34:	4611      	mov	r1, r2
 8021a36:	2200      	movs	r2, #0
 8021a38:	6022      	str	r2, [r4, #0]
 8021a3a:	461a      	mov	r2, r3
 8021a3c:	f7ee faa2 	bl	800ff84 <_read>
 8021a40:	1c43      	adds	r3, r0, #1
 8021a42:	d102      	bne.n	8021a4a <_read_r+0x1e>
 8021a44:	6823      	ldr	r3, [r4, #0]
 8021a46:	b103      	cbz	r3, 8021a4a <_read_r+0x1e>
 8021a48:	602b      	str	r3, [r5, #0]
 8021a4a:	bd38      	pop	{r3, r4, r5, pc}
 8021a4c:	20003acc 	.word	0x20003acc

08021a50 <__ascii_wctomb>:
 8021a50:	b149      	cbz	r1, 8021a66 <__ascii_wctomb+0x16>
 8021a52:	2aff      	cmp	r2, #255	; 0xff
 8021a54:	bf85      	ittet	hi
 8021a56:	238a      	movhi	r3, #138	; 0x8a
 8021a58:	6003      	strhi	r3, [r0, #0]
 8021a5a:	700a      	strbls	r2, [r1, #0]
 8021a5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8021a60:	bf98      	it	ls
 8021a62:	2001      	movls	r0, #1
 8021a64:	4770      	bx	lr
 8021a66:	4608      	mov	r0, r1
 8021a68:	4770      	bx	lr

08021a6a <_malloc_usable_size_r>:
 8021a6a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8021a6e:	2800      	cmp	r0, #0
 8021a70:	f1a0 0004 	sub.w	r0, r0, #4
 8021a74:	bfbc      	itt	lt
 8021a76:	580b      	ldrlt	r3, [r1, r0]
 8021a78:	18c0      	addlt	r0, r0, r3
 8021a7a:	4770      	bx	lr

08021a7c <_init>:
 8021a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a7e:	bf00      	nop
 8021a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021a82:	bc08      	pop	{r3}
 8021a84:	469e      	mov	lr, r3
 8021a86:	4770      	bx	lr

08021a88 <_fini>:
 8021a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a8a:	bf00      	nop
 8021a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021a8e:	bc08      	pop	{r3}
 8021a90:	469e      	mov	lr, r3
 8021a92:	4770      	bx	lr
